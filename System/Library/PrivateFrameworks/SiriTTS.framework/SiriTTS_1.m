uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2, uint64_t a3)
{
  v6 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)a2 + 1);
  uint64_t v7 = *(void *)a2;
  uint64_t *v6 = *(void *)a2;
  *(void *)((char *)this + *(void *)(v7 - 40)) = *((void *)a2 + 5);
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = *((void *)a2 + 6);
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = *((void *)a2 + 7);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 1) = off_26C211198;
  *((unsigned char *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  LOBYTE(v7) = *(unsigned char *)(a3 + 104);
  int v8 = *(_DWORD *)(a3 + 108);
  *((_OWORD *)this + 7) = 0u;
  v9 = (uint64_t *)((char *)this + 112);
  *((void *)this + 7) = off_26C211198;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = v7;
  *((_DWORD *)this + 27) = v8;
  *((_OWORD *)this + 8) = 0u;
  uint64_t v10 = *(void *)(a3 + 112);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v12 = *v9;
    uint64_t *v9 = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t v13 = *(void *)(a3 + 120);
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v15 = *((void *)this + 15);
    *((void *)this + 15) = v14;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t v16 = *(void *)(a3 + 128);
  if (v16)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    uint64_t v18 = *((void *)this + 16);
    *((void *)this + 16) = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = *(void *)(a3 + 136);
  if (v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
    uint64_t v21 = *((void *)this + 17);
    *((void *)this + 17) = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  return this;
}

void sub_20CE16F34(_Unwind_Exception *a1)
{
  uint64_t v6 = v1[17];
  v1[17] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[16];
  v1[16] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[15];
  v1[15] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v4;
  uint64_t *v4 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2)
{
  v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 18) = off_26C2108C8;
  *((void *)this + 19) = *((void *)v4 + 1);
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 24) = off_26C20F228;
  v5 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_26C1FF290);
  v5[18] = (uint64_t)off_26C20C720;
  v5[24] = (uint64_t)off_26C20C7F0;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  uint64_t *v5 = (uint64_t)off_26C20C5F0;
  v5[1] = (uint64_t)off_26C211198;
  *((unsigned char *)v5 + 48) = 0;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  v5[7] = (uint64_t)off_26C211198;
  *((unsigned char *)v5 + 96) = 0;
  char v6 = *((unsigned char *)a2 + 104);
  int v7 = *((_DWORD *)a2 + 27);
  *((_OWORD *)v5 + 7) = 0u;
  uint64_t v8 = v5 + 14;
  *((unsigned char *)v5 + 104) = v6;
  *((_DWORD *)v5 + 27) = v7;
  *((_OWORD *)v5 + 8) = 0u;
  uint64_t v9 = *((void *)a2 + 14);
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v11 = *v8;
    *uint64_t v8 = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = *((void *)a2 + 15);
  if (v12)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v14 = *((void *)this + 15);
    *((void *)this + 15) = v13;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  uint64_t v15 = *((void *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v17 = *((void *)this + 16);
    *((void *)this + 16) = v16;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = *((void *)a2 + 17);
  if (v18)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v20 = *((void *)this + 17);
    *((void *)this + 17) = v19;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  return this;
}

void sub_20CE1735C(_Unwind_Exception *a1)
{
  uint64_t v8 = v1[17];
  v1[17] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[16];
  v1[16] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[15];
  v1[15] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *v6;
  uint64_t *v6 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
}

void sub_20CE1750C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C406D10C96CLL);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3, char a4, float a5)
{
  *((void *)this + 18) = off_26C2108C8;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 24) = off_26C20F228;
  int v7 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_26C1FF290);
  v7[18] = (uint64_t)off_26C20C720;
  *int v7 = (uint64_t)off_26C20C5F0;
  v7[24] = (uint64_t)off_26C20C7F0;
  double result = 0.0;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  v7[1] = (uint64_t)off_26C211198;
  *((unsigned char *)v7 + 48) = 0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  v7[7] = (uint64_t)off_26C211198;
  *((unsigned char *)v7 + 96) = 0;
  *((unsigned char *)v7 + 104) = a4;
  *((float *)v7 + 27) = a5;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  return result;
}

void kaldi::nnet1::ScaledDotAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x30, "in.NumCols() == InputDim()", a5);
  }
  (*(void (**)(void))(*(void *)a1 + 96))();
  if (*(void *)(a1 + 136))
  {
    __n128 v11 = kaldi::CuMatrix<float>::CuMatrix(v12, a3, 111);
    (*(void (**)(void, unsigned char *, uint64_t, uint64_t, __n128))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136), v12, a3, a4, v11);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v12);
  }
  if (*(unsigned char *)(a1 + 104)) {
    kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, v9, v10, 1.0, 1.0);
  }
}

void sub_20CE177D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

unsigned int *kaldi::nnet1::ScaledDotAttention::SetKeyValueStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned int *)(a2 + 20);
  if (v6 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch in number of key and value pairs in ScaledDotAttention, got ", 69);
    v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" keys and ", 10);
    v23 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, " values");
    goto LABEL_24;
  }
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (v9)
  {
    if (v10 != *(_DWORD *)(v9 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
      v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", but got ", 10);
      std::ostream::operator<<();
      goto LABEL_24;
    }
    kaldi::CuMatrix<float>::Resize(a1 + 8, v6, *(unsigned int *)(v9 + 12), 0, 0);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 120) + 112))(*(void *)(a1 + 120), a2, a1 + 8, a4);
  }
  else
  {
    if (v10 != *(_DWORD *)(*(void *)(a1 + 112) + 12))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
      v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", but got ", 10);
      std::ostream::operator<<();
      goto LABEL_24;
    }
    kaldi::CuMatrix<float>::Resize(a1 + 8, v6, v10, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, 111, v11, v12);
  }
  uint64_t v13 = *(void *)(a1 + 128);
  if (v13)
  {
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(v13 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 56, *(unsigned int *)(a3 + 20), *(unsigned int *)(v13 + 12), 0, 0);
      uint64_t v14 = *(uint64_t (**)(void))(**(void **)(a1 + 128) + 112);
      return (unsigned int *)v14();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  uint64_t v16 = *(void *)(a1 + 136);
  uint64_t v17 = *(unsigned int *)(a3 + 16);
  if (v16) {
    int v18 = *(_DWORD *)(v16 + 8);
  }
  else {
    int v18 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12);
  }
  if (v17 != v18)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
    goto LABEL_24;
  }
  uint64_t v19 = (unsigned int *)(a1 + 56);
  kaldi::CuMatrix<float>::Resize((uint64_t)v19, *(unsigned int *)(a3 + 20), v17, 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v19, a3, 111, v20, v21);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ClearKeyValueStates(kaldi::nnet1::ScaledDotAttention *this)
{
  long long v9 = 0u;
  long long v8 = 0u;
  int v7 = off_26C211198;
  char v10 = 0;
  long long v5 = 0u;
  long long v4 = 0u;
  uint64_t v3 = off_26C211198;
  char v6 = 0;
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 8, (uint64_t)&v7);
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 56, (uint64_t)&v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v7);
}

void sub_20CE17CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 117);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v10, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v10, a4);
  kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v10, a1 + 8, a1 + 56, a3, 0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_20CE17DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v19, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v19, a2, CblasNoTrans, a3, (const char *)0x70, 1.0, 0.0);
  float v15 = *(float *)(a1 + 108);
  if (v15 != 1.0) {
    kaldi::CuMatrixBase<float>::Scale((uint64_t)v19, v15);
  }
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(v19, (uint64_t)v19, v12, v13, v14);
  if (a6) {
    kaldi::CuMatrixBase<float>::AddMat(a6, (uint64_t)v19, 111, v16, v17, 1.0, 0.0);
  }
  kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v19, CblasNoTrans, a4, (const char *)0x6F, 1.0, 0.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v19);
}

void sub_20CE17ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(uint64_t **a1)
{
  uint64_t v2 = (const void *)((uint64_t (*)(uint64_t **, uint64_t))(*a1)[11])(a1, 1);
  if (!v2
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "../engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.h", (const char *)0x79, "quantized_attention", v3);
  }
  uint64_t v5 = v4;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 14, &v19);
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  uint64_t v7 = v5[14];
  v5[14] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = v19;
    uint64_t v19 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 15, &v19);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  uint64_t v10 = v5[15];
  v5[15] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v19;
    uint64_t v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 16, &v19);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  uint64_t v13 = v5[16];
  v5[16] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 17, &v19);
  uint64_t v15 = v19;
  uint64_t v19 = 0;
  uint64_t v16 = v5[17];
  v5[17] = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t v17 = v19;
    uint64_t v19 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return (char *)v5 + *(void *)(*v5 - 40);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(uint64_t **a1)
{
  uint64_t v2 = (const void *)((uint64_t (*)(uint64_t **, uint64_t))(*a1)[11])(a1, 1);
  if (!v2
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "../engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.h", (const char *)0x79, "quantized_attention", v3);
  }
  uint64_t v5 = v4;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 14, &v19);
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  uint64_t v7 = v5[14];
  v5[14] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = v19;
    uint64_t v19 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 15, &v19);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  uint64_t v10 = v5[15];
  v5[15] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v19;
    uint64_t v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 16, &v19);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  uint64_t v13 = v5[16];
  v5[16] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 17, &v19);
  uint64_t v15 = v19;
  uint64_t v19 = 0;
  uint64_t v16 = v5[17];
  v5[17] = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t v17 = v19;
    uint64_t v19 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return (char *)v5 + *(void *)(*v5 - 40);
}

char *virtual thunk to'kaldi::nnet1::ScaledDotAttention::CopyQuantized16Bit(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t **)((char *)this + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  kaldi::WriteToken(v19, 0, (kaldi *)"<AddQuery>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
  long long v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  if (*((void *)this + 14))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<QueryTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 14) + 64))(&__p);
    uint64_t v7 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v8 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v7, v8);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 15))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<KeyTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 15) + 64))(&__p);
    uint64_t v9 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v10 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v9, v10);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 16))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<ValueTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 16) + 64))(&__p);
    uint64_t v11 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v12 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v11, v12);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 17))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<OutputTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 17) + 64))(&__p);
    uint64_t v13 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v14 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v13, v14);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v19[1] = MEMORY[0x263F8C318] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v21);
}

void sub_20CE187B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::Info((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::ScaledDotAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 170, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Reading ScaledDotAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v52);
  }
  long long __p = 0uLL;
  uint64_t v51 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (kaldi::Peek(a2, a3) != 60) {
                goto LABEL_107;
              }
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
              if (SHIBYTE(v51) < 0) {
                break;
              }
              p_p = &__p;
              switch(HIBYTE(v51))
              {
                case 7:
                  if (__p != 1633899324 || *(_DWORD *)((char *)&__p + 3) != 1046834273) {
                    goto LABEL_123;
                  }
                  goto LABEL_51;
                case 0xA:
                  if ((void)__p != 0x726575516464413CLL || WORD4(__p) != 15993) {
                    goto LABEL_123;
                  }
                  goto LABEL_81;
                case 0xC:
                  goto LABEL_102;
                case 0xE:
                  goto LABEL_67;
                case 0x10:
                  if ((void)__p == 0x725479726575513CLL && *((void *)&__p + 1) == 0x3E6D726F66736E61) {
                    goto LABEL_94;
                  }
                  if (HIBYTE(v51) == 14)
                  {
LABEL_67:
                    if ((void)__p != 0x6E61725479654B3CLL || *(void *)((char *)&__p + 6) != 0x3E6D726F66736E61) {
                      goto LABEL_98;
                    }
                    goto LABEL_72;
                  }
                  if (HIBYTE(v51) != 16
                    || ((void)__p == 0x725465756C61563CLL
                      ? (BOOL v22 = *((void *)&__p + 1) == 0x3E6D726F66736E61)
                      : (BOOL v22 = 0),
                        !v22))
                  {
LABEL_98:
                    if (HIBYTE(v51) == 12)
                    {
                      p_p = &__p;
                      goto LABEL_102;
                    }
                    goto LABEL_123;
                  }
                  break;
                case 0x11:
                  if ((void)__p != 0x5474757074754F3CLL
                    || *((void *)&__p + 1) != 0x6D726F66736E6172
                    || v51 != 62)
                  {
                    goto LABEL_98;
                  }
                  goto LABEL_90;
                default:
                  goto LABEL_123;
              }
LABEL_63:
              uint64_t v23 = kaldi::nnet1::Component::Read(a2, a3, a4);
              uint64_t v24 = *(void *)(a1 + 128);
              *(void *)(a1 + 128) = v23;
              if (v24)
              {
                (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
                uint64_t v23 = *(void *)(a1 + 128);
              }
              if (!v23)
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 192);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading value transform failed", 30);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
              }
            }
            uint64_t v13 = *((void *)&__p + 1);
            if (*((void *)&__p + 1) != 7) {
              break;
            }
            if (*(_DWORD *)__p != 1633899324 || *(_DWORD *)(__p + 3) != 1046834273)
            {
              uint64_t v13 = *((void *)&__p + 1);
              goto LABEL_24;
            }
LABEL_51:
            kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 108), v10, v9);
          }
          if (*((void *)&__p + 1) != 10) {
            break;
          }
          if (*(void *)__p != 0x726575516464413CLL || *(_WORD *)(__p + 8) != 15993) {
            break;
          }
LABEL_81:
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 104), v10, v9);
        }
LABEL_24:
        if (v13 != 16) {
          goto LABEL_30;
        }
        if (*(void *)__p != 0x725479726575513CLL || *(void *)(__p + 8) != 0x3E6D726F66736E61) {
          break;
        }
LABEL_94:
        uint64_t v33 = kaldi::nnet1::Component::Read(a2, a3, a4);
        uint64_t v34 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v33;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
          uint64_t v33 = *(void *)(a1 + 112);
        }
        if (!v33)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 182);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading query transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
        }
      }
      uint64_t v13 = *((void *)&__p + 1);
LABEL_30:
      if (v13 != 14) {
        goto LABEL_36;
      }
      if (*(void *)__p != 0x6E61725479654B3CLL || *(void *)(__p + 6) != 0x3E6D726F66736E61) {
        break;
      }
LABEL_72:
      uint64_t v26 = kaldi::nnet1::Component::Read(a2, a3, a4);
      uint64_t v27 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        uint64_t v26 = *(void *)(a1 + 120);
      }
      if (!v26)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 187);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
      }
    }
    uint64_t v13 = *((void *)&__p + 1);
LABEL_36:
    if (v13 == 16)
    {
      if (*(void *)__p == 0x725465756C61563CLL && *(void *)(__p + 8) == 0x3E6D726F66736E61) {
        goto LABEL_63;
      }
      uint64_t v13 = *((void *)&__p + 1);
    }
    if (v13 != 17) {
      goto LABEL_100;
    }
    BOOL v19 = *(void *)__p == 0x5474757074754F3CLL && *(void *)(__p + 8) == 0x6D726F66736E6172;
    if (!v19 || *(unsigned char *)(__p + 16) != 62) {
      break;
    }
LABEL_90:
    uint64_t v31 = kaldi::nnet1::Component::Read(a2, a3, a4);
    uint64_t v32 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v31;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      uint64_t v31 = *(void *)(a1 + 136);
    }
    if (!v31)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 197);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading output transform failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
    }
  }
  uint64_t v13 = *((void *)&__p + 1);
LABEL_100:
  if (v13 != 12) {
    goto LABEL_123;
  }
  p_p = (long long *)__p;
LABEL_102:
  uint64_t v35 = *(void *)p_p;
  int v36 = *((_DWORD *)p_p + 2);
  if (v35 != 0x6E6F706D6F432F3CLL || v36 != 1047817829)
  {
LABEL_123:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 202);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Unrecognized token ", 19);
    if (v51 >= 0) {
      v46 = &__p;
    }
    else {
      v46 = (long long *)__p;
    }
    if (v51 >= 0) {
      uint64_t v47 = HIBYTE(v51);
    }
    else {
      uint64_t v47 = *((void *)&__p + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
  }
LABEL_107:
  uint64_t v38 = *(void *)(a1 + 112);
  if (!v38)
  {
    v48 = "query_transform_";
    uint64_t v49 = 206;
    goto LABEL_136;
  }
  uint64_t v39 = *(void *)(a1 + 120);
  if (v39 && *(_DWORD *)(v38 + 12) != *(_DWORD *)(v39 + 12))
  {
    v48 = "!key_transform_ || query_transform_->OutputDim() == key_transform_->OutputDim()";
    uint64_t v49 = 207;
    goto LABEL_136;
  }
  uint64_t v40 = a1 + *(void *)(*(void *)a1 - 40);
  int v41 = *(_DWORD *)(v40 + 8);
  if (v41 != *(_DWORD *)(v38 + 8))
  {
    v48 = "InputDim() == query_transform_->InputDim()";
    uint64_t v49 = 208;
    goto LABEL_136;
  }
  if (*(unsigned char *)(a1 + 104) && v41 != *(_DWORD *)(v40 + 12))
  {
    v48 = "!add_query_ || InputDim() == OutputDim()";
    uint64_t v49 = 209;
    goto LABEL_136;
  }
  uint64_t v42 = *(void *)(a1 + 136);
  if (!v42)
  {
    uint64_t v44 = *(void *)(a1 + 128);
    if (!v44 || *(_DWORD *)(v40 + 12) == *(_DWORD *)(v44 + 12)) {
      goto LABEL_120;
    }
LABEL_135:
    v48 = "!value_transform_ || (!output_transform_ && OutputDim() == value_transform_->OutputDim()) || (output_transform"
          "_ && output_transform_->InputDim() == value_transform_->OutputDim())";
    uint64_t v49 = 212;
LABEL_136:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)v49, v48, v9);
  }
  if (*(_DWORD *)(v40 + 12) != *(_DWORD *)(v42 + 12))
  {
    v48 = "!output_transform_ || OutputDim() == output_transform_->OutputDim()";
    uint64_t v49 = 210;
    goto LABEL_136;
  }
  uint64_t v43 = *(void *)(a1 + 128);
  if (v43 && *(_DWORD *)(v42 + 8) != *(_DWORD *)(v43 + 12)) {
    goto LABEL_135;
  }
LABEL_120:
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)__p);
  }
}

void sub_20CE18FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::ScaledDotAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<AddQuery>", a4, a5);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 104));
  kaldi::WriteToken(a2, a3, (kaldi *)"<Scale>", v9, v10);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (*(void *)(a1 + 112))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<QueryTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 112), a2, (uint64_t)a3, a4);
  }
  if (*(void *)(a1 + 120))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<KeyTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 120), a2, (uint64_t)a3, a4);
  }
  if (*(void *)(a1 + 128))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ValueTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 128), a2, (uint64_t)a3, a4);
  }
  if (*(void *)(a1 + 136))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<OutputTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 136), a2, (uint64_t)a3, a4);
  }
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v11, v12);
}

void *virtual thunk to'kaldi::nnet1::ScaledDotAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ScaledDotAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, const kaldi::nnet1::MultiHeadAttention *a2, uint64_t a3)
{
  double result = kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (const kaldi::nnet1::MultiHeadAttention *)((char *)a2 + 8), a3);
  uint64_t v6 = *(void *)a2;
  *(void *)double result = *(void *)a2;
  *(void *)((char *)result + *(void *)(v6 - 40)) = *((void *)a2 + 9);
  *(void *)((char *)result + *(void *)(*(void *)result - 48)) = *((void *)a2 + 10);
  *(void *)((char *)result + *(void *)(*(void *)result - 56)) = *((void *)a2 + 11);
  *((_DWORD *)result + 36) = *(_DWORD *)(a3 + 144);
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, const kaldi::nnet1::MultiHeadAttention *a2)
{
  long long v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 19) = off_26C2108C8;
  *((void *)this + 20) = *((void *)v4 + 1);
  *((_WORD *)this + 84) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 25) = off_26C20F228;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (const kaldi::nnet1::ScaledDotAttention *)&off_26C1FF230, (uint64_t)a2);
  *((void *)this + 19) = off_26C20C350;
  *(void *)this = off_26C20C220;
  *((void *)this + 25) = off_26C20C420;
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  return this;
}

void sub_20CE1944C(_Unwind_Exception *a1)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MultiHeadAttention::Copy(kaldi::nnet1::MultiHeadAttention *this)
{
}

void sub_20CE19514(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40ECDADF9FLL);
  _Unwind_Resume(a1);
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, BOOL a3, int a4, float a5, int a6)
{
  *((void *)this + 19) = off_26C2108C8;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 25) = off_26C20F228;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_26C1FF230, a2, a3, a5, a4 != 0);
  *((void *)this + 19) = off_26C20C350;
  *(void *)this = off_26C20C220;
  *((void *)this + 25) = off_26C20C420;
  *((_DWORD *)this + 36) = a6;
  return this;
}

void sub_20CE19654(_Unwind_Exception *a1)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 261);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v26, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v26, a4);
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, (uint64_t)v26, 0, v27, v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 8, 0, *(_DWORD *)(a1 + 28), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a1 + 56, 0, *(_DWORD *)(a1 + 76), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a3, 0, *(_DWORD *)(a3 + 20), v10, v12);
      kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, 0);
      uint64_t v14 = off_26C2096F8;
      long long v15 = 0u;
      long long v16 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
      uint64_t v17 = off_26C2096F8;
      long long v18 = 0u;
      long long v19 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
      char v20 = off_26C2096F8;
      long long v21 = 0u;
      long long v22 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
      uint64_t v23 = off_26C2096F8;
      long long v24 = 0u;
      long long v25 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v23);
      ++v11;
      uint64_t v10 = (const char *)(v10 + v12);
    }
    while (v11 < *(_DWORD *)(a1 + 144));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v26);
}

void sub_20CE19920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, (kaldi *)"<NumberHeads>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  long long v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  kaldi::nnet1::ScaledDotAttention::Info((uint64_t *)__p, this);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v12);
}

void sub_20CE19BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  return kaldi::nnet1::MultiHeadAttention::Info((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::MultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 288, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Reading MultiHeadAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<NumberHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 144, v8, v9);
  kaldi::nnet1::ScaledDotAttention::ReadData(a1, a2, a3, a4);
  if (*(_DWORD *)(*(void *)(a1 + 112) + 12) % *(_DWORD *)(a1 + 144)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x126, "int(query_transform_->OutputDim() / number_heads_) * number_heads_ == query_transform_->OutputDim()", v10);
  }
}

void sub_20CE19D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::MultiHeadAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumberHeads>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::nnet1::ScaledDotAttention::WriteData(a1, a2, a3, a4, v9);
}

void *virtual thunk to'kaldi::nnet1::MultiHeadAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::MultiHeadAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, const kaldi::nnet1::SupervisedMultiHeadAttention *a2)
{
  long long v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 25) = off_26C2108C8;
  *((void *)this + 26) = *((void *)v4 + 1);
  *((_WORD *)this + 108) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 31) = off_26C20F228;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (const kaldi::nnet1::MultiHeadAttention *)&off_26C1FF3A8, (uint64_t)a2);
  *((void *)this + 25) = off_26C20F3A8;
  *(void *)this = off_26C20F278;
  *((void *)this + 31) = off_26C20F478;
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 152, (char *)a2 + 152, 111);
  return this;
}

void sub_20CE19F0C(_Unwind_Exception *a1)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(v2, (uint64_t *)&off_26C1FF3B0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::Copy(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
}

void sub_20CE19FF8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C403997DC88);
  _Unwind_Resume(a1);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, BOOL a3, int a4, float a5, int a6, int a7)
{
  *((void *)this + 25) = off_26C2108C8;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 31) = off_26C20F228;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)&off_26C1FF3A8, a2, a3, a5, a4, a6);
  *((void *)this + 25) = off_26C20F3A8;
  *(void *)this = off_26C20F278;
  *((void *)this + 31) = off_26C20F478;
  *((_DWORD *)this + 37) = a7;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 19) = off_26C211198;
  *((unsigned char *)this + 192) = 0;
  return this;
}

void sub_20CE1A160(_Unwind_Exception *a1)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetAttnProbabilities(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return (uint64_t)this + 152;
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 331);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v29, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v29, a4);
  kaldi::CuMatrix<float>::Resize(a1 + 152, v30, *(unsigned int *)(a1 + 28), 0, 0);
  kaldi::CuMatrixBase<float>::SetZero(a1 + 152);
  uint64_t v16 = a1 + 152;
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, (uint64_t)v29, 0, v30, v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a1 + 8, 0, *(_DWORD *)(a1 + 28), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 56, 0, *(_DWORD *)(a1 + 76), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), v10, v12);
      if (v11 >= *(_DWORD *)(a1 + 148)) {
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, 0);
      }
      else {
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, v16);
      }
      uint64_t v17 = off_26C2096F8;
      long long v18 = 0u;
      long long v19 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
      char v20 = off_26C2096F8;
      long long v21 = 0u;
      long long v22 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
      uint64_t v23 = off_26C2096F8;
      long long v24 = 0u;
      long long v25 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v23);
      uint64_t v26 = off_26C2096F8;
      long long v27 = 0u;
      long long v28 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v26);
      ++v11;
      uint64_t v10 = (const char *)(v10 + v12);
    }
    while (v11 < *(_DWORD *)(a1 + 144));
  }
  int v13 = *(_DWORD *)(a1 + 148);
  if (v13 > 1)
  {
    float v14 = 1.0 / (double)v13;
    kaldi::CuMatrixBase<float>::Scale(v16, v14);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, (kaldi *)"<SupervisedHeads>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  long long v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  kaldi::nnet1::MultiHeadAttention::Info((uint64_t *)__p, this);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v12);
}

void sub_20CE1A750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::Info((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 367, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading SupervisedMultiHeadAttention component", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SupervisedHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 148, v8, v9);
  kaldi::nnet1::MultiHeadAttention::ReadData(a1, a2, a3, a4);
  int v11 = *(_DWORD *)(a1 + 148);
  if (v11 < 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x175, "number_supervised_heads_ >= 1", v10);
  }
  if (v11 > *(_DWORD *)(a1 + 144)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x176, "number_supervised_heads_ <= number_heads_", v10);
  }
}

void sub_20CE1A8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SupervisedHeads>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::nnet1::MultiHeadAttention::WriteData(a1, a2, a3, a4, v9);
}

void *virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::SelfAttention *kaldi::nnet1::SelfAttention::SelfAttention(kaldi::nnet1::SelfAttention *this, const kaldi::nnet1::SelfAttention *a2)
{
  long long v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 10) = off_26C2108C8;
  *((void *)this + 11) = *((void *)v4 + 1);
  *((_WORD *)this + 48) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 16) = off_26C20F228;
  uint64_t v5 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_26C1FF170);
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = (uint64_t)&off_26C20AB20;
  *((_DWORD *)v5 + 12) = 1;
  v5[9] = 0;
  v5[10] = (uint64_t)off_26C20AA28;
  uint64_t *v5 = (uint64_t)off_26C20A858;
  v5[16] = (uint64_t)off_26C20AAF8;
  v5[1] = (uint64_t)&unk_26C20A910;
  v5[2] = 0;
  v5[7] = 0;
  uint64_t v6 = v5 + 7;
  v5[8] = 0;
  uint64_t v7 = *((void *)a2 + 7);
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v9 = *v6;
    uint64_t *v6 = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t v10 = *((void *)a2 + 8);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v12 = *((void *)this + 8);
    *((void *)this + 8) = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  int v13 = (char *)*((void *)a2 + 9);
  if (v13)
  {
    float v14 = (void *)(*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 40)] + 16))(&v13[*(void *)(*(void *)v13 - 40)]);
    if (v14) {
    uint64_t v16 = *((void *)this + 9);
    }
    *((void *)this + 9) = v14;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      float v14 = (void *)*((void *)this + 9);
    }
    if (!v14) {
      kaldi::KaldiAssertFailure_((kaldi *)"SelfAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x191, "attention_", v15);
    }
  }
  return this;
}

void sub_20CE1ACC4(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v5;
  uint64_t *v5 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::PropagateFnc(uint64_t *a1, int *a2, int *a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)a1 + 12);
  if (a2[5] % v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x199, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v58, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 411, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Running forward propagation for batch size = ", 45);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v58);
  }
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[7];
  if (v14) {
    long long v15 = (unsigned int *)(v14 + 12);
  }
  else {
    long long v15 = (unsigned int *)((char *)a1 + *(void *)(*a1 - 40) + 8);
  }
  unsigned int v16 = *v15;
  uint64_t v17 = a1[8];
  if (v17)
  {
    long long v18 = (int *)(v17 + 12);
    uint64_t v19 = *a1;
  }
  else
  {
    uint64_t v19 = *a1;
    long long v18 = (int *)((char *)a1 + *(void *)(*a1 - 40) + 8);
  }
  int v36 = *v18;
  signed int v20 = *v18 + v16;
  if (v20 != (*(unsigned int (**)(uint64_t *))(v19 + 88))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x1A4, "history_state_size == HistoryStateSize()", v21);
  }
  uint64_t v22 = v13 + 48 * (int)a4;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v58, *((unsigned int *)a1 + 12), (a2[5] * v20 / v5 + *(_DWORD *)(v22 + 16)), 0, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)v58, 0, v60, 0, *(_DWORD *)(v22 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v55, v22, 111, v23, v24);
  v55 = off_26C2096F8;
  long long v56 = 0u;
  long long v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
  if (v5 >= 1)
  {
    int v25 = 0;
    for (unsigned int i = 0; i != v5; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)a2, i, v25 + a2[5], 0, a2[4]);
      if (v5 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v55, a2[6] * v5);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, (uint64_t)a3, i, v25 + a3[5], 0, a3[4]);
      if (v5 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v52, a3[6] * v5);
      }
      if (v60 <= i) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
      }
      *(void *)&long long v47 = v58[1] + 4 * (int)(v61 * i);
      v46 = &off_26C209728;
      *((void *)&v47 + 1) = v59;
      *(void *)&long long v48 = v62;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v46, (int)v59 / v20);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v49, 0, SHIDWORD(v50), 0, v16);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v49, 0, SHIDWORD(v50), (const char *)v16, v36);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, (uint64_t)&v46, HIDWORD(v47) - HIDWORD(v56), SHIDWORD(v56), 0, SDWORD2(v47));
      uint64_t v30 = a1[7];
      if (v30) {
        (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)v30 + 112))(v30, &v55, &v40, a4);
      }
      else {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v40, (uint64_t)&v55, 111, v28, v29);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, (uint64_t)&v43, HIDWORD(v44) - HIDWORD(v56), SHIDWORD(v56), 0, SDWORD2(v44));
      uint64_t v33 = a1[8];
      if (v33) {
        (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)v33 + 112))(v33, &v55, &v37, a4);
      }
      else {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v37, (uint64_t)&v55, 111, v31, v32);
      }
      (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)a1[9] + 24))(a1[9], &v46, &v43, a4);
      uint64_t v34 = a1[9] + *(void *)(*(void *)a1[9] - 40);
      (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)v34 + 112))(v34, &v55, &v52, a4);
      v37 = off_26C2096F8;
      long long v38 = 0u;
      long long v39 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v37);
      uint64_t v40 = off_26C2096F8;
      long long v41 = 0u;
      long long v42 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
      uint64_t v43 = off_26C2096F8;
      long long v44 = 0u;
      long long v45 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
      v46 = off_26C2096F8;
      long long v47 = 0u;
      long long v48 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
      uint64_t v49 = off_26C2096F8;
      long long v50 = 0u;
      long long v51 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
      v52 = off_26C2096F8;
      long long v53 = 0u;
      long long v54 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
      v55 = off_26C2096F8;
      long long v56 = 0u;
      long long v57 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
      --v25;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1[9] + 32))(a1[9]);
  (*(void (**)(uint64_t *, void *, uint64_t))(*a1 + 128))(a1, v58, a4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v58);
}

void sub_20CE1B4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void (**a46)(),uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  a46 = off_26C2096F8;
  *(_OWORD *)(v51 + 8) = 0u;
  *(_OWORD *)(v51 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a46);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::PropagateFnc(void *a1, int *a2, int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::PropagateFnc((void *)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (*((void *)this + 7))
  {
    kaldi::WriteToken(v15, 0, (kaldi *)"<KeyTransform>", v2, v3);
    (*(void (**)(void **__return_ptr))(**((void **)this + 7) + 64))(&__p);
    long long v4 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v5 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v4, v5);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 8))
  {
    kaldi::WriteToken(v15, 0, (kaldi *)"<ValueTransform>", v2, v3);
    (*(void (**)(void **__return_ptr))(**((void **)this + 8) + 64))(&__p);
    uint64_t v6 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v7 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v7);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(*(void *)((char *)v8 + *(void *)(*v8 - 40)) + 64))(&__p);
    uint64_t v9 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v10 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v17);
}

void sub_20CE1B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Info((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::SelfAttention::CopyQuantized8Bit(kaldi::nnet1::SelfAttention *this)
{
}

void sub_20CE1BC54(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *v3;
    if (v5) {
      uint64_t result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v5);
    }
    else {
      uint64_t result = (*(uint64_t (**)(uint64_t *))(v4 + 16))(v3);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
}

void sub_20CE1BF64(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *v3;
    if (v5) {
      uint64_t result = kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(v5);
    }
    else {
      uint64_t result = (*(uint64_t (**)(uint64_t *))(v4 + 16))(v3);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void virtual thunk to'kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::CopyQuantized16Bit((kaldi::nnet1::SelfAttention *)((char *)this
                                                                                + *(void *)(*(void *)this - 32)));
}

void kaldi::nnet1::SelfAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 509, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Reading SelfAttention component", 31);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
  }
  long long __p = 0uLL;
  uint64_t v31 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_60;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      break;
    }
    uint64_t v14 = *((void *)&__p + 1);
    if (*((void *)&__p + 1) == 14
      && (*(void *)__p == 0x6E61725479654B3CLL ? (BOOL v15 = *(void *)(__p + 6) == 0x3E6D726F66736E61) : (BOOL v15 = 0), v15))
    {
LABEL_12:
      uint64_t v12 = kaldi::nnet1::Component::Read(a2, a3, a4);
      uint64_t v13 = a1[7];
      a1[7] = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        uint64_t v12 = a1[7];
      }
      if (!v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 517);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
    }
    else
    {
      if (*((void *)&__p + 1) != 16) {
        goto LABEL_27;
      }
      if (*(void *)__p == 0x725465756C61563CLL && *(void *)(__p + 8) == 0x3E6D726F66736E61)
      {
LABEL_49:
        uint64_t v22 = kaldi::nnet1::Component::Read(a2, a3, a4);
        uint64_t v23 = a1[8];
        a1[8] = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          uint64_t v22 = a1[8];
        }
        if (!v22)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 522);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading value transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
      }
      else
      {
        uint64_t v14 = *((void *)&__p + 1);
LABEL_27:
        if (v14 != 11) {
          goto LABEL_53;
        }
        if (*(void *)__p != 0x69746E657474413CLL || *(void *)(__p + 3) != 0x3E6E6F69746E6574)
        {
          uint64_t v14 = *((void *)&__p + 1);
LABEL_53:
          if (v14 == 12)
          {
            uint64_t v10 = (long long *)__p;
            goto LABEL_55;
          }
LABEL_66:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 533);
          long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unrecognized token ", 19);
          if (v31 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (long long *)__p;
          }
          if (v31 >= 0) {
            uint64_t v29 = HIBYTE(v31);
          }
          else {
            uint64_t v29 = *((void *)&__p + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v29);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
LABEL_43:
        signed int v20 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
        if (v20) {
        uint64_t v21 = a1[9];
        }
        a1[9] = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          signed int v20 = (const void *)a1[9];
        }
        if (!v20)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 528);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"failed to read attention component in SelfAttention", 51);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
      }
    }
  }
  uint64_t v10 = &__p;
  switch(HIBYTE(v31))
  {
    case 0xB:
      goto LABEL_38;
    case 0xC:
      goto LABEL_55;
    case 0xE:
      if ((void)__p != 0x6E61725479654B3CLL || *(void *)((char *)&__p + 6) != 0x3E6D726F66736E61) {
        goto LABEL_66;
      }
      goto LABEL_12;
    case 0x10:
      if ((void)__p == 0x725465756C61563CLL && *((void *)&__p + 1) == 0x3E6D726F66736E61) {
        goto LABEL_49;
      }
      if (HIBYTE(v31) == 11)
      {
LABEL_38:
        if ((void)__p != 0x69746E657474413CLL || *(void *)((char *)&__p + 3) != 0x3E6E6F69746E6574) {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
      if (HIBYTE(v31) != 12) {
        goto LABEL_66;
      }
      uint64_t v10 = &__p;
LABEL_55:
      uint64_t v24 = *(void *)v10;
      int v25 = *((_DWORD *)v10 + 2);
      if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829) {
        goto LABEL_66;
      }
LABEL_60:
      if (!a1[9]) {
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x219, "attention_", v9);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__p);
      }
      return;
    default:
      goto LABEL_66;
  }
}

void sub_20CE1C578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::SelfAttention::WriteData(uint64_t *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (!a1[9]) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x21D, "attention_", a5);
  }
  if (a1[7])
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<KeyTransform>", a4, a5);
    kaldi::nnet1::Component::Write(a1[7], a2, (uint64_t)a3, a4);
  }
  if (a1[8])
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ValueTransform>", a4, a5);
    kaldi::nnet1::Component::Write(a1[8], a2, (uint64_t)a3, a4);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<Attention>", a4, a5);
  kaldi::nnet1::Component::Write(a1[9] + *(void *)(*(void *)a1[9] - 40), a2, (uint64_t)a3, a4);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

void *virtual thunk to'kaldi::nnet1::SelfAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *non-virtual thunk to'kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    uint64_t v2 = (int *)(v1 + 12);
  }
  else {
    uint64_t v2 = (int *)((char *)this + *(void *)(*(void *)this - 40) + 8);
  }
  int v3 = *v2;
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    uint64_t v5 = (_DWORD *)(v4 + 12);
  }
  else {
    uint64_t v5 = (_DWORD *)((char *)this + *(void *)(*(void *)this - 40) + 8);
  }
  return (*v5 + v3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    uint64_t v2 = (int *)(v1 + 12);
  }
  else {
    uint64_t v2 = (int *)((char *)this + *(void *)(*((void *)this - 1) - 40));
  }
  int v3 = *v2;
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    uint64_t v5 = (_DWORD *)(v4 + 12);
  }
  else {
    uint64_t v5 = (_DWORD *)((char *)this + *(void *)(*((void *)this - 1) - 40));
  }
  return (*v5 + v3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x237, "batch_idx == 0", v8);
  }
  uint64_t v9 = a2[1];
  if (v9 != *(_DWORD *)(a1 + 48)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x238, "sequence_idx.size() == hopts_.num_sequences", v8);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v10 + 32) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 573);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "ResetHistoryState for SelfAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
      }
    }
  }
  long long v15 = 0u;
  long long v14 = 0u;
  uint64_t v13 = off_26C211198;
  char v16 = 0;
  kaldi::CuMatrix<float>::operator=(v10, (uint64_t)&v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_20CE1C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20CE1C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState(a1 - 8, a2, a3, a4);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  int v3 = (void *)*((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 6;
    uint64_t v5 = v2 - 6;
    uint64_t v6 = v2 - 6;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 6;
      (*(void (**)(void *))(v7 + 16))(v5);
      v4 -= 6;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 3) = v3;
  uint64_t v9 = *(uint64_t (**)(kaldi::nnet1::SelfAttention *))(*(void *)this + 160);
  return v9(this);
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState((kaldi::nnet1::SelfAttention *)((char *)this - 8));
}

unsigned int *kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x249, "batch_idx == 0", a5);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 20), *(unsigned int *)(*(void *)(a1 + 16) + 16), 1u, 0);
  uint64_t v9 = *(void *)(a1 + 16);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v9, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

void kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x24F, "batch_idx == 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x250, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  }
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 16), 1u, a4, a5);
  uint64_t v11 = *(void *)(a1 + 16);
  int v12 = *(_DWORD *)(v11 + 20);
  if (v12 >= 1)
  {
    if (v12 <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    }
    uint64_t v13 = *(void *)(v11 + 8) + 4 * (int)(*(_DWORD *)(v11 + 24) * a3);
    unsigned int v14 = *(_DWORD *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 32);
    v16[1] = v13;
    v16[0] = &off_26C209728;
    v16[2] = v14;
    v16[3] = v15;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v16, v8, v9, v10);
  }
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
}

unsigned int *kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t *a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x259, "batch_idx == 0", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v9 = (unsigned int *)a1[2];
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v9, a2, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::SelfAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3);
}

void kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x260, "batch_idx == 0", v8);
  }
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)a1 + 12) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x261, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 % (*(int (**)(uint64_t *))(*a1 + 88))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x262, "history.Dim() % HistoryStateSize() == 0", v10);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = a1[2];
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v12, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v12, *((unsigned int *)a1 + 12), v11, 2u, 0);
    uint64_t v16 = a1[2];
    if (*(_DWORD *)(v16 + 20) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
    }
    uint64_t v17 = *(void *)(v16 + 8) + 4 * (int)(*(_DWORD *)(v16 + 24) * a3);
    unsigned int v18 = *(_DWORD *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 32);
    v20[1] = v17;
    v20[0] = &off_26C209728;
    v20[2] = v18;
    v20[3] = v19;
    kaldi::CuVectorBase<float>::CopyFromVec(v20, a2, v13, v14, v15);
  }
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, const kaldi::nnet1::AverageAttention *a2)
{
  uint64_t v2 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 9) = off_26C2108C8;
  *((void *)this + 10) = *((void *)v2 + 1);
  *((_WORD *)this + 44) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = off_26C20F080;
  *((void *)this + 15) = off_26C20F228;
  int v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_26C1FF1B0);
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = (uint64_t)&off_26C20AB20;
  *((_DWORD *)v3 + 12) = 1;
  v3[9] = (uint64_t)off_26C20B5C8;
  v3[15] = (uint64_t)off_26C20B698;
  *int v3 = (uint64_t)off_26C20B3F8;
  v3[1] = (uint64_t)&unk_26C20B4B0;
  v3[7] = 0;
  v3[8] = 0;
  operator new();
}

void sub_20CE1D090(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v7, 0x10B0C4082B712C9);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v6, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  if (v5 != *(_DWORD *)(a1 + 48)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x27E, "batch_size == num_utts", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 640, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Running forward propagation for batch size = ", 45);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v13 = *(void *)(a1 + 16) + 48 * (int)a4;
  int v14 = *(_DWORD *)(v13 + 20);
  if (!v14)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    kaldi::CuMatrix<float>::Resize(v13, v5, v15, 0, 0);
    int v14 = *(_DWORD *)(v13 + 20);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v59, v13, 0, v14, 0, 1);
  kaldi::CuMatrixBase<float>::Add((uint64_t)&v59, 1.0);
  if (!HIDWORD(v60) || !DWORD2(v60)) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v19);
  }
  float v20 = *(float *)v60;
  int v21 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v16, v17, v18, v19);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v56, v13, 0, *(_DWORD *)(v13 + 20), (const char *)1, v21);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v56, a2, 111, v22, v23, 1.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v62, &v56, 111);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v62, 1.0 / v20);
  long long v54 = 0u;
  long long v53 = 0u;
  v52 = off_26C211198;
  char v55 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 56), (uint64_t)v62, (uint64_t)&v52, a4, v24);
  if (*(void *)(a1 + 64))
  {
    kaldi::CuMatrix<float>::CuMatrix((uint64_t)v50, *(unsigned int *)(a2 + 20), (v63 + *(_DWORD *)(a2 + 16)), 0, 0, 0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v50, 0, v51, 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, a2, 111, v27, v28);
    v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v50, 0, v51, (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, (uint64_t)&v52, 111, v29, v30);
    v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    long long v47 = 0u;
    long long v48 = 0u;
    v46 = (void (**)())off_26C211198;
    char v49 = 0;
    kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 64), (uint64_t)v50, (uint64_t)&v46, 0, v31);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, a2, v32, v33, v34);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, (uint64_t)&v52, v35, v36, v37);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v43, 111, v38, v39);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)&v43, 111, v40, v41, 1.0, 1.0);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v46);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v50);
  }
  else
  {
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v52, 111, v25, v26);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v52);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v62);
  long long v56 = off_26C2096F8;
  long long v57 = 0u;
  long long v58 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v56);
  unsigned int v59 = off_26C2096F8;
  long long v60 = 0u;
  long long v61 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v59);
}

void sub_20CE1D6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void (**a30)(),uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void (**a35)(),uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  a9 = off_26C2096F8;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a40);
  a30 = off_26C2096F8;
  *(_OWORD *)((char *)v40 + 56) = 0u;
  *(_OWORD *)((char *)v40 + 72) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a30);
  a35 = off_26C2096F8;
  v40[6] = 0u;
  v40[7] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a35);
  _Unwind_Resume(a1);
}

void sub_20CE1D85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t virtual thunk to'kaldi::nnet1::AverageAttention::PropagateFnc(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::Nnet **this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  kaldi::WriteToken(v14, 0, (kaldi *)"<AverageFfn>", v2, v3);
  kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[7]);
  if ((v13 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = v12;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v5);
  if ((char)v13 < 0) {
    operator delete(__p);
  }
  if (this[8])
  {
    kaldi::WriteToken(v14, 0, (kaldi *)"<Gate>", v6, v7);
    kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[8]);
    uint64_t v8 = (v13 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v9 = (v13 & 0x80u) == 0 ? v13 : v12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v8, v9);
    if ((char)v13 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v16);
}

void sub_20CE1DA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Info((kaldi::nnet1::Nnet **)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::AverageAttention::CopyQuantized8Bit(kaldi::nnet1::AverageAttention *this)
{
}

void sub_20CE1DB24(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
}

void sub_20CE1DBB8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::CopyQuantized16Bit((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                      + *(void *)(*(void *)this
                                                                                                  - 32)));
}

void kaldi::nnet1::AverageAttention::ReadData(uint64_t a1, uint64_t *a2, char a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 714, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading AverageAttention component", 34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  uint64_t v6 = (kaldi::nnet1::Nnet **)(a1 + 64);
  long long v53 = 0;
  uint64_t v54 = 0;
  uint64_t v7 = (kaldi::nnet1::Nnet **)(a1 + 56);
  uint64_t v55 = 0;
  if (kaldi::Peek(a2, a3) != 60) {
    goto LABEL_43;
  }
  kaldi::ReadToken(a2, a3, (uint64_t)&v53, v8, v9);
  if (SHIBYTE(v55) < 0)
  {
    uint64_t v11 = v54;
    if (v54 == 6)
    {
      if (*(_DWORD *)v53 == 1952532284 && *((_WORD *)v53 + 2) == 15973) {
        goto LABEL_30;
      }
      uint64_t v11 = v54;
    }
    else if (v54 == 12 && *(void *)v53 == 0x656761726576413CLL && *((_DWORD *)v53 + 2) == 1047422534)
    {
      goto LABEL_12;
    }
    if (v11 != 19) {
      goto LABEL_64;
    }
    char v15 = (uint64_t *)v53;
    goto LABEL_35;
  }
  if (HIBYTE(v55) == 6)
  {
    if (v53 != 1952532284 || WORD2(v53) != 15973)
    {
LABEL_64:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 736);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unrecognized token ", 19);
      if (v55 >= 0) {
        long long v47 = &v53;
      }
      else {
        long long v47 = v53;
      }
      if (v55 >= 0) {
        uint64_t v48 = HIBYTE(v55);
      }
      else {
        uint64_t v48 = v54;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
LABEL_30:
    operator new();
  }
  if (HIBYTE(v55) == 12)
  {
    if (v53 != (void *)0x656761726576413CLL || v54 != 1047422534) {
      goto LABEL_64;
    }
LABEL_12:
    operator new();
  }
  if (HIBYTE(v55) != 19) {
    goto LABEL_64;
  }
  char v15 = (uint64_t *)&v53;
LABEL_35:
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = *(uint64_t *)((char *)v15 + 11);
  if (v16 != 0x6761726576412F3CLL || v17 != 0x69746E6574744165 || v18 != 0x3E6E6F69746E6574) {
    goto LABEL_64;
  }
LABEL_43:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 739, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (!*v7)
  {
    char v49 = "average_ffn_";
    uint64_t v50 = 741;
    goto LABEL_75;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*v7, &__p);
  uint64_t v25 = __p;
  if (__p != v57)
  {
    BOOL v26 = 1;
    if (!__p) {
      goto LABEL_54;
    }
LABEL_53:
    long long v57 = v25;
    operator delete(v25);
    goto LABEL_54;
  }
  if (*v6)
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*v6, &v51);
    BOOL v26 = v51 != v52;
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    uint64_t v25 = __p;
    if (__p) {
      goto LABEL_53;
    }
  }
  else
  {
    BOOL v26 = 0;
    if (__p) {
      goto LABEL_53;
    }
  }
LABEL_54:
  if (v26)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 743);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recurrent neural networks are not supported inside the average attention component.", 83);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  int v27 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12);
  if (v27 != kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v21, v22, v23, v24))
  {
    char v49 = "OutputDim() == average_ffn_->OutputDim()";
    uint64_t v50 = 746;
LABEL_75:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)v50, v49, v9);
  }
  if (*v6)
  {
    int v31 = kaldi::nnet1::Nnet::InputDim(*v6, v28, v29, v30, v9);
    int v32 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 8);
    if (v31 != kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v33, v34, v35, v36) + v32
      || (int v40 = kaldi::nnet1::Nnet::OutputDim(*v6, v37, v38, v39, v9),
          int v41 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12),
          v40 != kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v42, v43, v44, v45)
               + v41))
    {
      char v49 = "!gate_ || (gate_->InputDim() == InputDim() + average_ffn_->InputDim() && gate_->OutputDim() == OutputDim() +"
            " average_ffn_->OutputDim())";
      uint64_t v50 = 748;
      goto LABEL_75;
    }
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v53);
  }
}

void sub_20CE1E260()
{
  MEMORY[0x2105595E0](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x20CE1E2A0);
}

void sub_20CE1E29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::ReadData(void *a1, uint64_t *a2, char a3)
{
}

void *kaldi::nnet1::AverageAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (!*(void *)(a1 + 56)) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x2F0, "average_ffn_", a5);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<AverageFfn>", a4, a5);
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 56), a2, (uint64_t)a3, a4, v9);
  if (*(void *)(a1 + 64))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<Gate>", v10, v11);
    kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 64), a2, (uint64_t)a3, a4, v12);
  }
  return kaldi::WriteToken(a2, a3, (kaldi *)"</AverageAttention>", v10, v11);
}

void *virtual thunk to'kaldi::nnet1::AverageAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *non-virtual thunk to'kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::InputDim(this[7], a2, a3, a4, a5) + 1;
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::InputDim(this[6], a2, a3, a4, a5) + 1;
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x300, "batch_idx == 0", v8);
  }
  uint64_t v9 = a2[1];
  if (v9 != *(_DWORD *)(a1 + 48)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x301, "sequence_idx.size() == hopts_.num_sequences", v8);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v10 + 32) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 774);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "ResetHistoryState for AverageAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
      }
    }
  }
  long long v15 = 0u;
  long long v14 = 0u;
  unsigned __int8 v13 = off_26C211198;
  char v16 = 0;
  kaldi::CuMatrix<float>::operator=(v10, (uint64_t)&v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_20CE1E580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20CE1E594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState(a1 - 8, a2, a3, a4);
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 6;
    uint64_t v5 = v2 - 6;
    uint64_t v6 = v2 - 6;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 6;
      (*(void (**)(void *))(v7 + 16))(v5);
      v4 -= 6;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 3) = v3;
  uint64_t v9 = *(uint64_t (**)(kaldi::nnet1::AverageAttention *))(*(void *)this + 160);
  return v9(this);
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState((kaldi::nnet1::AverageAttention *)((char *)this - 8));
}

unsigned int *kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x313, "batch_idx == 0", a5);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 20), *(unsigned int *)(*(void *)(a1 + 16) + 16), 0, 0);
  uint64_t v9 = *(void *)(a1 + 16);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v9, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

void kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x319, "batch_idx == 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x31A, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v8, 0, v9, v10);
  uint64_t v14 = *(void *)(a1 + 16);
  int v15 = *(_DWORD *)(v14 + 20);
  if (v15 >= 1)
  {
    if (v15 <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
    }
    uint64_t v16 = *(void *)(v14 + 8) + 4 * (int)(*(_DWORD *)(v14 + 24) * a3);
    unsigned int v17 = *(_DWORD *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 32);
    v19[1] = v16;
    v19[0] = &off_26C209728;
    v19[2] = v17;
    v19[3] = v18;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v19, v11, v12, v13);
  }
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
}

unsigned int *kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t *a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x323, "batch_idx == 0", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v9 = (unsigned int *)a1[2];
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v9, a2, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::AverageAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3);
}

void kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x32A, "batch_idx == 0", v8);
  }
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)a1 + 12) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x32B, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 != (*(unsigned int (**)(uint64_t *))(*a1 + 88))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x32C, "history.Dim() == HistoryStateSize()", v10);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = a1[2];
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v12, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v12, *((unsigned int *)a1 + 12), v11, 2u, 0);
    uint64_t v16 = a1[2];
    if (*(_DWORD *)(v16 + 20) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
    }
    uint64_t v17 = *(void *)(v16 + 8) + 4 * (int)(*(_DWORD *)(v16 + 24) * a3);
    unsigned int v18 = *(_DWORD *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 32);
    v20[1] = v17;
    v20[0] = &off_26C209728;
    v20[2] = v18;
    v20[3] = v19;
    kaldi::CuVectorBase<float>::CopyFromVec(v20, a2, v13, v14, v15);
  }
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 192);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::ScaledDotAttention *)((char *)this + 144));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this);
  JUMPOUT(0x2105595E0);
}

uint64_t kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::ScaledDotAttention *, void))(*(void *)this + 88))(this, 0);
}

uint64_t kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x2105595E0);
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(char *, void))(*(void *)((char *)this + *(void *)(*(void *)this - 32))
                                                   + 88))((char *)this + *(void *)(*(void *)this - 32), 0);
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(void *a1)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, (uint64_t *)&off_26C1FF230);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 200);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::MultiHeadAttention *)((char *)this + 152));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(this);
  JUMPOUT(0x2105595E0);
}

uint64_t kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(void *a1)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 248);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + 200));
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(this);
  JUMPOUT(0x2105595E0);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 128);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SelfAttention *)((char *)this + 80));
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
}

void sub_20CE1F03C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
}

void virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 120);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::AverageAttention *)((char *)this + 72));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
}

void sub_20CE1F27C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::Copy((kaldi::nnet1::AverageAttention *)((char *)this
                                                                        + *(void *)(*(void *)this - 32)));
}

void virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(void *a1)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)a1
                                                                                     + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)a1
                                                                                     + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2, int a3, BOOL a4, float a5, char a6)
{
  int v9 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, a2 + 1);
  uint64_t v10 = *a2;
  uint64_t *v9 = *a2;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 40)) = a2[5];
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 56)) = a2[7];
  double result = 0.0;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  v9[1] = (uint64_t)off_26C211198;
  *((unsigned char *)v9 + 48) = 0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  v9[7] = (uint64_t)off_26C211198;
  *((unsigned char *)v9 + 96) = 0;
  *((unsigned char *)v9 + 104) = a6;
  *((float *)v9 + 27) = a5;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  return result;
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, uint64_t *a2, int a3, BOOL a4, float a5, int a6, int a7)
{
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, a2 + 1, a3, a4, a5, a6 != 0);
  uint64_t v9 = *a2;
  *(void *)uint64_t v10 = *a2;
  *(void *)(v10 + *(void *)(v9 - 40)) = a2[9];
  *(void *)(v10 + *(void *)(*(void *)v10 - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[10];
  *(void *)(v10 + *(void *)(*(void *)v10 - 56)) = a2[11];
  *(_DWORD *)(v10 + 144) = a7;
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 40)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[14];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[15];
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 152);
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, a2 + 2);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  *((void *)this + 1) = &unk_26C20A910;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::SelfAttention *)((char *)this + 8));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  *((void *)this + 1) = &unk_26C20B4B0;
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 8, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 7, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::AverageAttention *)((char *)this + 8));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

kaldi::nnet1::Nnet *std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](kaldi::nnet1::Nnet **a1, kaldi::nnet1::Nnet *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

kaldi::nnet1::RecurrentAttentionBaseComponent *kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  *(void *)this = v4;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[2];
  *((void *)this + 1) = -1;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)((char *)this + 16), a2 + 3);
  uint64_t v5 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[5];
  *((void *)this + 2) = a2[6];
  return this;
}

void sub_20CE1FFF0(_Unwind_Exception *a1)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, int a2, int a3)
{
  *((_DWORD *)this + 170) = a2;
  *((_DWORD *)this + 171) = a3;
  *((_WORD *)this + 344) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 84) = off_26C20C940;
  *((void *)this + 90) = &off_26C20B6C0;
  *(_OWORD *)((char *)this + 728) = xmmword_20D6073D0;
  *((void *)this + 93) = 0x3BF800000;
  *((_DWORD *)this + 188) = 1;
  *((_WORD *)this + 378) = 0;
  *((unsigned char *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_26C1FF310);
  *(void *)this = off_26C20E008;
  *((void *)this + 84) = off_26C20E2F8;
  *((void *)this + 2) = off_26C20E150;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  operator new();
}

void sub_20CE202D0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x2105595E0](v4, 0x10B0C4082B712C9);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(v1, (uint64_t)&off_26C1FF310);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::GlobalRecurrentAttention *a2)
{
  *((void *)this + 85) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 344) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 84) = off_26C20C940;
  *((void *)this + 90) = &off_26C20B6C0;
  *(_OWORD *)((char *)this + 728) = xmmword_20D6073D0;
  *((_DWORD *)this + 186) = -1082130432;
  *(void *)((char *)this + 748) = 0x100000003;
  *((_WORD *)this + 378) = 0;
  *((unsigned char *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_26C1FF310);
  *(void *)this = off_26C20E008;
  *((void *)this + 84) = off_26C20E2F8;
  *((void *)this + 2) = off_26C20E150;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 25) = off_26C211198;
  *((unsigned char *)this + 240) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 31) = off_26C211198;
  *((unsigned char *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 37) = off_26C211198;
  *((unsigned char *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 43) = off_26C211198;
  *((unsigned char *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 49) = off_26C211198;
  *((unsigned char *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 55) = off_26C211198;
  *((unsigned char *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((void *)this + 61) = off_26C211198;
  *((unsigned char *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 67) = off_26C211198;
  *((unsigned char *)this + 576) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = 0;
  *((void *)this + 76) = 0;
  *((void *)this + 73) = off_26C2111C8;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 1) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 22);
  if (!v5)
  {
    uint64_t v10 = "src.src_dot_trans_";
    uint64_t v11 = 52;
    goto LABEL_11;
  }
  if (!*((void *)a2 + 23))
  {
    uint64_t v10 = "src.tgt_dot_trans_";
    uint64_t v11 = 53;
    goto LABEL_11;
  }
  if (!*((void *)a2 + 24))
  {
    uint64_t v10 = "src.recurrent_net_";
    uint64_t v11 = 54;
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)"GlobalRecurrentAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)v11, v10, v4);
  }
  *((void *)this + 22) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  *((void *)this + 23) = (*(uint64_t (**)(void))(**((void **)a2 + 23) + 16))(*((void *)a2 + 23));
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 200, (uint64_t)a2 + 200);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 248, (uint64_t)a2 + 248);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 296, (uint64_t)a2 + 296);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 440, (uint64_t)a2 + 440);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 488, (uint64_t)a2 + 488);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 536, (uint64_t)a2 + 536);
  kaldi::CuVector<float>::operator=((uint64_t)this + 584, (uint64_t)a2 + 584, v6, v7, v8);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 616, *((void *)a2 + 77), *((void *)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 640, *((char **)a2 + 80), *((void *)a2 + 81), (uint64_t)(*((void *)a2 + 81) - *((void *)a2 + 80)) >> 2);
  }
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
  *((unsigned char *)this + 668) = 0;
  if ((kaldi::nnet1::Nnet::IsRnn(*((kaldi::nnet1::Nnet **)this + 24)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "GlobalRecurrentAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  return this;
}

void sub_20CE20800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, kaldi::nnet1::UpdatableComponent *a12, void **a13, uint64_t a14)
{
  uint64_t v23 = *a13;
  if (*a13)
  {
    *((void *)v14 + 81) = v23;
    operator delete(v23);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuVector<float>::~CuVector(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v21);
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  kaldi::CuMatrix<float>::~CuMatrix(v19);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(v14, (uint64_t)&off_26C1FF310);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[8];
  *((void *)this + 2) = a2[9];
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 23);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v7)
  {
    kaldi::nnet1::Nnet::~Nnet(v7);
    MEMORY[0x2105595E0]();
  }
  uint64_t v8 = (void *)*((void *)this + 80);
  if (v8)
  {
    *((void *)this + 81) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void **)((char *)this + 616);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuVector<float>::~CuVector((void *)this + 73);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 536);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 488);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 344);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 296);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(this, (uint64_t)(a2 + 1));
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
  JUMPOUT(0x2105595E0);
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + 656));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16));
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 672);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
}

void sub_20CE20C08(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40F96FF2AFLL);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::GlobalRecurrentAttention::Copy((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

void kaldi::nnet1::GlobalRecurrentAttention::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(v82, 0, sizeof(v82));
  uint64_t v6 = a2 + 4;
  uint64_t v7 = a1 + 12;
  uint64_t v8 = a1 + 8;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v82, a4, a5);
    if (SHIBYTE(v82[2]) < 0) {
      break;
    }
    if (HIBYTE(v82[2]) == 15)
    {
      BOOL v18 = v82[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v82 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v13 = v7;
      if (!v18)
      {
LABEL_35:
        if (HIBYTE(v82[2]) == 12)
        {
          uint64_t v19 = v82;
          goto LABEL_39;
        }
        goto LABEL_78;
      }
    }
    else
    {
      if (HIBYTE(v82[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v12 = v82[0] == (void *)0x53656372756F533CLL
         && v82[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v82[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v13 = v8;
      if (!v12) {
        goto LABEL_78;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v13, v9, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v14 = v82[1];
  if (v82[1] != (void *)15)
  {
    if (v82[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v15 = *(void *)v82[0] == 0x53656372756F533CLL && *((void *)v82[0] + 1) == 0x656D694465746174;
    BOOL v16 = v15 && *(void *)((char *)v82[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v13 = v8;
    if (!v16) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v17 = *(void *)v82[0] == 0x6574744178614D3CLL && *(void *)((char *)v82[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v13 = v7;
  if (v17) {
    goto LABEL_34;
  }
  uint64_t v14 = v82[1];
LABEL_37:
  if (v14 != (void *)12) {
    goto LABEL_78;
  }
  uint64_t v19 = (void **)v82[0];
LABEL_39:
  uint64_t v20 = *v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_78:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 131);
    long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v82[2]) >= 0) {
      long long v57 = v82;
    }
    else {
      long long v57 = (void **)v82[0];
    }
    if (SHIBYTE(v82[2]) >= 0) {
      uint64_t v58 = HIBYTE(v82[2]);
    }
    else {
      uint64_t v58 = (uint64_t)v82[1];
    }
    unsigned int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
LABEL_44:
  v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v73 = 0;
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v74, v23, v24);
  uint64_t v25 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73 + 4, v26, v27);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73, v28, v29);
  kaldi::nnet1::Component::NewComponentOfType(v25);
  if (!v30)
  {
    *(void *)(a1 + 176) = 0;
LABEL_86:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 149);
    long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"cannot initialize source dot transform from ", 44);
    if (v76 >= 0) {
      uint64_t v62 = &v74;
    }
    else {
      uint64_t v62 = v74;
    }
    if (v76 >= 0) {
      uint64_t v63 = HIBYTE(v76);
    }
    else {
      uint64_t v63 = v75;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
  *(void *)(a1 + 176) = v31;
  if (!v31) {
    goto LABEL_86;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v31 + 96))(v31, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v74, v32, v33);
  uint64_t v34 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73 + 4, v35, v36);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73, v37, v38);
  kaldi::nnet1::Component::NewComponentOfType(v34);
  if (!v39)
  {
    *(void *)(a1 + 184) = 0;
LABEL_94:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 161);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"cannot initialize target dot transform from ", 44);
    if (v76 >= 0) {
      v65 = &v74;
    }
    else {
      v65 = v74;
    }
    if (v76 >= 0) {
      uint64_t v66 = HIBYTE(v76);
    }
    else {
      uint64_t v66 = v75;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
  *(void *)(a1 + 184) = v40;
  if (!v40) {
    goto LABEL_94;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v40 + 96))(v40, a2, a3);
  v70 = 0;
  size_t v71 = 0;
  uint64_t v72 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  int v41 = std::locale::use_facet(&v77, MEMORY[0x263F8C108]);
  unsigned __int8 v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v77);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v70, v42);
  size_t v43 = HIBYTE(v72);
  char v44 = HIBYTE(v72);
  v46 = (char *)v70;
  size_t v45 = v71;
  long long v47 = (char *)v70 + v71;
  if (v72 >= 0)
  {
    long long v47 = (char *)&v70 + HIBYTE(v72);
    v46 = (char *)&v70;
  }
  if (v46 != v47)
  {
    do
    {
      int v48 = *v46;
      if (v48 == 124) {
        LOBYTE(v48) = 10;
      }
      *v46++ = v48;
    }
    while (v46 != v47);
    size_t v43 = HIBYTE(v72);
    size_t v45 = v71;
    char v44 = HIBYTE(v72);
  }
  if (v44 >= 0) {
    size_t v49 = v43;
  }
  else {
    size_t v49 = v45;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v49 + 1);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v50 = __p;
  }
  else {
    uint64_t v50 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v49)
  {
    if (v72 >= 0) {
      int v51 = &v70;
    }
    else {
      int v51 = v70;
    }
    memmove(v50, v51, v49);
  }
  *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 10;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v77, __p, 8);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  kaldi::nnet1::Nnet::Init(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t *)&v77, a3);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192), v52, v53, v54, v55);
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 178);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"it doesn't make sense to use a non-recurrent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  v77.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2C0];
  *(std::locale *)((char *)&v77 + *((void *)v77.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2C0] + 24);
  uint64_t v78 = MEMORY[0x263F8C318] + 16;
  if (v80 < 0) {
    operator delete(v79);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x210559500](&v81);
  if (SHIBYTE(v72) < 0) {
    operator delete(v70);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete(v74);
  }
  if (SHIBYTE(v82[2]) < 0) {
    operator delete(v82[0]);
  }
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v38, 0, 24);
  uint64_t v7 = a1 + 12;
  uint64_t v8 = a1 + 8;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)v38, v9, v10);
    if (SHIBYTE(v38[2]) < 0) {
      break;
    }
    if (HIBYTE(v38[2]) == 15)
    {
      BOOL v20 = v38[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v38 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v15 = v7;
      if (!v20)
      {
LABEL_35:
        if (HIBYTE(v38[2]) == 12)
        {
          int v21 = v38;
          goto LABEL_39;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (HIBYTE(v38[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v14 = v38[0] == (void *)0x53656372756F533CLL
         && v38[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v38[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v15 = v8;
      if (!v14) {
        goto LABEL_52;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
  }
  BOOL v16 = v38[1];
  if (v38[1] != (void *)15)
  {
    if (v38[1] != (void *)22) {
      goto LABEL_37;
    }
    BOOL v17 = *(void *)v38[0] == 0x53656372756F533CLL && *((void *)v38[0] + 1) == 0x656D694465746174;
    BOOL v18 = v17 && *(void *)((char *)v38[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v15 = v8;
    if (!v18) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v19 = *(void *)v38[0] == 0x6574744178614D3CLL && *(void *)((char *)v38[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v15 = v7;
  if (v19) {
    goto LABEL_34;
  }
  BOOL v16 = v38[1];
LABEL_37:
  if (v16 != (void *)12) {
    goto LABEL_52;
  }
  int v21 = (void **)v38[0];
LABEL_39:
  uint64_t v22 = *v21;
  int v23 = *((_DWORD *)v21 + 2);
  if (v22 != (void *)0x6E6F706D6F432F3CLL || v23 != 1047817829)
  {
LABEL_52:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 194);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v38[2]) >= 0) {
      uint64_t v34 = v38;
    }
    else {
      uint64_t v34 = (void **)v38[0];
    }
    if (SHIBYTE(v38[2]) >= 0) {
      uint64_t v35 = HIBYTE(v38[2]);
    }
    else {
      uint64_t v35 = (uint64_t)v38[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
LABEL_44:
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceDotTransform>");
  uint64_t v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v25)
  {
    *(void *)(a1 + 176) = 0;
LABEL_60:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 198);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *(void *)(a1 + 176) = v26;
  if (!v26) {
    goto LABEL_60;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetDotTransform>");
  int v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    *(void *)(a1 + 184) = 0;
LABEL_62:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 202);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *(void *)(a1 + 184) = v28;
  if (!v28) {
    goto LABEL_62;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::nnet1::Nnet::Read(*(uint64_t ***)(a1 + 192), a2, a3, a4);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192), v29, v30, v31, v32);
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 207);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (SHIBYTE(v38[2]) < 0) {
    operator delete(v38[0]);
  }
}

void sub_20CE21A18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void *kaldi::nnet1::GlobalRecurrentAttention::WriteData(uint64_t *a1, void *a2, const char *a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceDotTransform>", v8, v9);
  kaldi::nnet1::Component::Write(a1[22], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetDotTransform>", v12, v13);
  kaldi::nnet1::Component::Write(a1[23], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  BOOL v17 = (uint64_t *)a1[24];
  return kaldi::nnet1::Nnet::Write(v17, a2, (uint64_t)a3, a4, v16);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 22) + 176))(*((void *)this + 22));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 23) + 176))(*((void *)this + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::NumParams((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::GlobalRecurrentAttention::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 176) + 184))(*(void *)(a1 + 176), &v23);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v24 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  BOOL v20 = *(void **)a2;
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v7, v8, v9);
  uint64_t v10 = (int)v24;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 184) + 184))(*(void *)(a1 + 184), &v23);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if ((v24 + v10) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  }
  BOOL v20 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v11, v12, v13);
  int v14 = v24;
  kaldi::nnet1::Nnet::GetParams(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t)&v23);
  int v18 = v14 + v10;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if ((v24 + v14 + v10) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  }
  BOOL v20 = (void *)(*(void *)a2 + 4 * v18);
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v15, v16, v17);
  if (v24 + v18 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0xF8, "shift == wei_copy->Dim()", v19);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v23);
}

void sub_20CE21EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetParams(void *a1, uint64_t a2)
{
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 176);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v5 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)a2;
  LODWORD(v16) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 192))(v4, &v15);
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 176))(*(void *)(a1 + 176));
  uint64_t v8 = *(void *)(a1 + 184);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((v9 + v7) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)a2 + 4 * v7;
  LODWORD(v16) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 192))(v8, &v15);
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 176))(*(void *)(a1 + 184)) + v7;
  uint64_t v11 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  int v12 = kaldi::nnet1::Nnet::NumParams(v11);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((v12 + v10) > *(_DWORD *)(a2 + 8)) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  uint64_t v15 = *(void *)a2 + 4 * v10;
  LODWORD(v16) = v12;
  kaldi::nnet1::Nnet::SetParams(v11, (uint64_t)&v15);
  uint64_t result = kaldi::nnet1::Nnet::NumParams(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if (result + v10 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x103, "shift == wei_src.Dim()", v14);
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetParams((uint64_t)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  float v2 = (*(float (**)(void))(**((void **)this + 22) + 208))(*((void *)this + 22));
  float v3 = v2 + (*(float (**)(void))(**((void **)this + 23) + 208))(*((void *)this + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

float virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SumParams((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 22) + 216))(*((void *)this + 22));
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 216);
  v5.n128_f32[0] = a2;
  return v4(v5);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  float v3 = (char *)this + *(void *)(*(void *)this - 232);
  (*(void (**)(void))(**((void **)v3 + 22) + 216))(*((void *)v3 + 22));
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)v3 + 23) + 216);
  v5.n128_f32[0] = a2;
  return v4(v5);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *, void *, void))(*(void *)this + 96))(this, v24, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 22) + 64))(v22);
  if ((v23 & 0x80u) == 0) {
    __n128 v5 = v22;
  }
  else {
    __n128 v5 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v6 = v23;
  }
  else {
    uint64_t v6 = (uint64_t)v22[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  int v9 = (void *)std::ostream::operator<<();
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 23) + 64))(v20);
  if ((v21 & 0x80u) == 0) {
    uint64_t v11 = v20;
  }
  else {
    uint64_t v11 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (uint64_t)v20[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Internal recurrent network info ", 36);
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, *((kaldi::nnet1::Nnet **)this + 24));
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v16 = v19;
  }
  else {
    uint64_t v16 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v24[1] = MEMORY[0x263F8C318] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v26);
}

void sub_20CE22638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Info((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 22) + 72))(&v21);
  (*(void (**)(void **__return_ptr))(**((void **)this + 23) + 72))(v19);
  if ((v20 & 0x80u) == 0) {
    uint64_t v4 = v19;
  }
  else {
    uint64_t v4 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v5 = v20;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v19[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::Nnet::InfoGradient(*((kaldi::nnet1::Nnet **)this + 24), v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v8 = v17;
  }
  else {
    uint64_t v8 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v9 = v18;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v17[1];
  }
  int v10 = std::string::append(&v22, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v16 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v13 = v16;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  int v14 = std::string::append(&v23, (const std::string::value_type *)v12, v13);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_20CE22878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(void))(**((void **)this + 22) + 264))();
  (*(void (**)(void))(**((void **)this + 23) + 264))();
  uint64_t v8 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  kaldi::nnet1::Nnet::SetTrainOptions(v8, a2, 0, v6, v7);
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

unsigned int *kaldi::nnet1::GlobalRecurrentAttention::SetSourceStates(uint64_t a1, uint64_t a2, int **a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  unint64_t v7 = (char *)a3[1] - (char *)*a3;
  int v8 = *(_DWORD *)(a2 + 20);
  int v9 = v8 / (int)(v7 >> 2);
  if (v9 * (v7 >> 2) != v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x12B, "seq_size * num_seq == source.NumRows()", v6);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x12C, "source.NumCols() == source_vec_dim_", v6);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 296, a2);
  if ((int **)(a1 + 640) != a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 640), (char *)*a3, (uint64_t)a3[1], a3[1] - *a3);
  }
  uint64_t v12 = *a3 + 1;
  int v11 = **a3;
  *(_DWORD *)(a1 + 664) = v11;
  std::string::size_type v13 = a3[1];
  while (v12 != v13)
  {
    int v14 = *v12;
    if (*v12 > v11)
    {
      *(_DWORD *)(a1 + 664) = v14;
      int v11 = v14;
    }
    ++v12;
  }
  if (v11 >= *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x135, "max_src_length_ < max_attentions_", v10);
  }
  if (v11 >= v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x136, "max_src_length_ + 1 <= seq_size", v10);
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 176), a1 + 296, a1 + 200, 0);
  long long __p = 0;
  long long v28 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 616), (int)((uint64_t)v7 >> 2), (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v28 = __p;
    operator delete(__p);
  }
  uint64_t v19 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 192), v15, v16, v17, v18);
  kaldi::CuMatrix<float>::Resize(a1 + 344, v7 >> 2, v19, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 344, 0, *(_DWORD *)(a1 + 364), 0, *(_DWORD *)(a1 + 8));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a1 + 296, 0, v7 >> 2, 0, *(_DWORD *)(a1 + 312));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&__p, (uint64_t)&v24, 111, v20, v21);
  uint64_t v24 = off_26C2096F8;
  long long v25 = 0u;
  long long v26 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v24);
  long long __p = off_26C2096F8;
  long long v28 = 0u;
  long long v29 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(void *)(a1 + 192));
  return kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 192), a1 + 344, a1 + 392, 0, v22);
}

void sub_20CE22CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(), long long a10, long long a11, void (**__p)(), long long a13, long long a14)
{
  a9 = off_26C2096F8;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  long long __p = off_26C2096F8;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a1 + 316)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x147, "source.NumRows() == source_states_.NumRows()", v8);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 312)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x148, "source.NumCols() == source_states_.NumCols()", v8);
  }
  size_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  int v10 = *(const void **)(a1 + 640);
  if (v9 != *(void *)(a1 + 648) - (void)v10 || memcmp(*(const void **)a3, v10, v9)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x149, "sequence_length == src_sequence_length_", v8);
  }
  return kaldi::CuMatrix<float>::Swap(a1 + 440, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 616) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 616 != a2) {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(void *)(a1 + 616), *(void *)(a1 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3));
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 668) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 668) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  uint64_t v95 = a2;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(v6 + *(void *)(*(void *)v6 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x16E, "in.NumCols() == input_dim_", v8);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x170, "batch_idx == 0", v8);
  }
  unint64_t v9 = *(void *)(v6 + 648) - *(void *)(v6 + 640);
  uint64_t v10 = v9 >> 2;
  int v11 = *(_DWORD *)(a2 + 20);
  int v94 = v11 / (int)(v9 >> 2);
  if (v94 * (v9 >> 2) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x176, "num_seq * tgt_seq_size == in.NumRows()", v8);
  }
  uint64_t v12 = *(unsigned int *)(v6 + 316);
  std::string::size_type v13 = (_DWORD *)(v6 + 584);
  uint64_t v14 = ((int)v12 / (int)v10);
  kaldi::CuVector<float>::Resize(v6 + 584, v12, 0, v7, v8);
  uint64_t v92 = v6 + 488;
  unsigned int v93 = v14;
  kaldi::CuMatrix<float>::Resize(v6 + 488, v9 >> 2, v14, 1u, 0);
  uint64_t v15 = *(unsigned int *)(v6 + 316);
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  v122 = 0;
  kaldi::Vector<float>::Resize((void **)&v122, v15, 1, v16, v17);
  kaldi::Matrix<float>::Matrix((uint64_t)&v118);
  if (v94 >= 1)
  {
    int v18 = 0;
    uint64_t v87 = v6 + 8;
    uint64_t v90 = v6 + 200;
    uint64_t v98 = v6 + 296;
    uint64_t v99 = v6 + 248;
    uint64_t v100 = v6 + 344;
    uint64_t v101 = v6 + 536;
    uint64_t v97 = v6 + 392;
    uint64_t v19 = (int)((uint64_t)v9 >> 2);
    uint64_t v102 = v6;
    uint64_t v103 = (v9 >> 2);
    int v86 = -(int)(v9 >> 2);
    v84 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    v85 = "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMat"
          "rixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)";
    unint64_t v89 = v9 >> 2;
    v88 = (_DWORD *)(v6 + 584);
    do
    {
      kaldi::CuMatrix<float>::operator=(v101, v90);
      kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 184), v97, v99, 0);
      if (*(int *)(v6 + 664) >= 1)
      {
        int v23 = 0;
        int v24 = 0;
        do
        {
          uint64_t v25 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v101, v23, v10, 0, *(_DWORD *)(v6 + 552));
          kaldi::CuMatrixBase<float>::MulElements(v25, v99, v26, v27, v28);
          v115 = off_26C2096F8;
          long long v116 = 0u;
          long long v117 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
          ++v24;
          v23 += v10;
        }
        while (v24 < *(_DWORD *)(v6 + 664));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v13, v101, 1.0, 0.0, v20, v21, v22);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v13, (uint64_t)&v122, v29, v30, v31);
      kaldi::Matrix<float>::Resize((uint64_t)&v118, v10, v93, 0, 0);
      int v96 = v18;
      if ((int)v10 >= 1)
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        int v36 = v86;
        do
        {
          uint64_t v37 = *(unsigned int *)(*(void *)(v6 + 640) + 4 * v35);
          if ((int)v37 < 1)
          {
            int v40 = -1;
            float v41 = -INFINITY;
          }
          else
          {
            uint64_t v38 = 0;
            int v39 = 0;
            int v40 = -1;
            float v41 = -INFINITY;
            do
            {
              if (v123 <= v36 + (int)v38 + (int)v19) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v33);
              }
              float v42 = *(float *)&v122[4 * v38 + v34];
              if (v42 > v41) {
                int v40 = v39;
              }
              int v43 = v39 + 1;
              if (v42 > v41) {
                float v41 = *(float *)&v122[4 * v38 + v34];
              }
              v38 += v19;
              ++v39;
            }
            while (v37 != v43);
          }
          uint64_t v44 = *(void *)(v102 + 616) + 24 * v35;
          v46 = (int **)(v44 + 8);
          size_t v45 = *(int **)(v44 + 8);
          int v48 = (void *)(v44 + 16);
          unint64_t v47 = *(void *)(v44 + 16);
          if ((unint64_t)v45 >= v47)
          {
            uint64_t v50 = *(int **)v44;
            uint64_t v51 = ((uint64_t)v45 - *(void *)v44) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v53 = v47 - (void)v50;
            if (v53 >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v48, v54);
              size_t v45 = *v46;
              uint64_t v50 = *(int **)v44;
            }
            else
            {
              uint64_t v55 = 0;
            }
            long long v56 = (int *)&v55[4 * v51];
            *long long v56 = v40;
            size_t v49 = v56 + 1;
            while (v45 != v50)
            {
              int v57 = *--v45;
              *--long long v56 = v57;
            }
            *(void *)uint64_t v44 = v56;
            char *v46 = v49;
            void *v48 = &v55[4 * v54];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            int *v45 = v40;
            size_t v49 = v45 + 1;
          }
          char *v46 = v49;
          if ((int)v37 >= 1)
          {
            uint64_t v58 = 0;
            unsigned int v59 = v123;
            long long v60 = &v122[v34];
            float v61 = 0.0;
            int v62 = v37;
            do
            {
              if (v59 <= v36 + (int)v58 + (int)v19) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v33);
              }
              --v62;
              float v63 = expf(*(float *)&v60[4 * v58] - v41);
              *(float *)&v60[4 * v58] = v63;
              float v61 = v61 + v63;
              v58 += v19;
            }
            while (v62);
            uint64_t v64 = 0;
            unint64_t v65 = 0;
            unsigned int v66 = v123;
            unint64_t v67 = v120;
            uint64_t v68 = v118 + 4 * v121 * (int)v35;
            v69 = &v122[v34];
            while (v66 > v36 + (int)v64 + (int)v19)
            {
              uint64_t v70 = 205;
              if (v35 >= v67 || v65 >= v119) {
                goto LABEL_60;
              }
              *(float *)(v68 + 4 * v65) = (float)(1.0 / v61) * *(float *)&v69[4 * v64];
              v64 += v19;
              if (v37 == ++v65) {
                goto LABEL_46;
              }
            }
            uint64_t v70 = 104;
            v84 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
            v85 = "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)";
LABEL_60:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", v84, (const char *)v70, v85, v33);
          }
LABEL_46:
          ++v35;
          ++v36;
          v34 += 4;
          uint64_t v6 = v102;
        }
        while (v35 != v103);
      }
      kaldi::CuMatrixBase<float>::CopyFromMat(v92, (uint64_t)&v118, 111, v32, v33);
      uint64_t v10 = v89;
      std::string::size_type v13 = v88;
      if ((int)v89 >= 1)
      {
        unint64_t v71 = 0;
        do
        {
          unsigned int v72 = *(_DWORD *)(*(void *)(v6 + 640) + 4 * v71);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v100, 0, *(_DWORD *)(v6 + 364), 0, *(_DWORD *)(v6 + 8));
          if (v71 >= HIDWORD(v116)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v73);
          }
          uint64_t v112 = v116 + 4 * (int)v117 * (int)v71;
          v111 = &off_26C209728;
          uint64_t v113 = DWORD2(v116);
          uint64_t v114 = *((void *)&v117 + 1);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v98, v71, v72 * v89, 0, *(_DWORD *)(v6 + 312));
          if (v89 != 1) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v108, *(_DWORD *)(v6 + 320) * v89);
          }
          if (v71 >= *(unsigned int *)(v6 + 508)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v74);
          }
          uint64_t v75 = *(void *)(v6 + 496) + 4 * *(_DWORD *)(v6 + 512) * (int)v71;
          unsigned int v76 = *(_DWORD *)(v6 + 504);
          uint64_t v77 = *(void *)(v6 + 520);
          uint64_t v106 = 0;
          uint64_t v107 = 0;
          uint64_t v105 = 0;
          v104 = &off_26C209728;
          if (v72 > v76) {
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v74);
          }
          uint64_t v105 = v75;
          LODWORD(v106) = v72;
          uint64_t v107 = v77;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v111, (uint64_t)&v108, CblasTrans, (uint64_t)&v104, v74, 1.0, 0.0);
          v108 = off_26C2096F8;
          long long v109 = 0u;
          long long v110 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
          v111 = &off_26C209728;
          uint64_t v112 = 0;
          LODWORD(v113) = 0;
          uint64_t v114 = 0;
          v115 = off_26C2096F8;
          long long v116 = 0u;
          long long v117 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
          ++v71;
        }
        while (v103 != v71);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v100, 0, *(_DWORD *)(v6 + 364), (const char *)*(unsigned int *)(v6 + 8), *(_DWORD *)(v87 + *(void *)(*(void *)v6 - 24)));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v95, v96 * v89, v89, 0, *(_DWORD *)(v95 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v115, (uint64_t)&v108, 111, v78, v79);
      v108 = off_26C2096F8;
      long long v109 = 0u;
      long long v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      v115 = off_26C2096F8;
      long long v116 = 0u;
      long long v117 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
      kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(v6 + 192), v100, v97, 0, v80);
      uint64_t v81 = (unsigned int *)kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, a3, v96 * (int)v89, v89, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>(v81, v97, 111, v82, v83);
      v115 = off_26C2096F8;
      long long v116 = 0u;
      long long v117 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
      int v18 = v96 + 1;
    }
    while (v96 + 1 != v94);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v118);
  kaldi::Vector<float>::Destroy((uint64_t)&v122);
}

void sub_20CE23904(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 448);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
}

void *kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  (*(void (**)(void))(**(void **)(a1 + 176) + 240))(*(void *)(a1 + 176));
  (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 184) + 240))(*(void *)(a1 + 184), a2, a3);
  uint64_t v6 = *(void **)(a1 + 192);
  return kaldi::nnet1::Nnet::SetGradientNormalization(v6, a2, 0, 0, a3);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(void *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization((uint64_t)a1 + *(void *)(*a1 - 256), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 466);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
}

void kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  (*(void (**)(void))(**((void **)this + 22) + 256))();
  (*(void (**)(void))(**((void **)this + 23) + 256))();
  uint64_t v6 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  kaldi::nnet1::Nnet::Update(v6, a2, a3);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 479);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  (*((void (**)(kaldi::nnet1::Nnet **))*this + 37))(this);
  float v2 = this[24];
  return kaldi::nnet1::Nnet::HistoryStateSize(v2);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1 = (char *)this - 16;
  (*(void (**)(char *))(*((void *)this - 2) + 296))((char *)this - 16);
  float v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);
  return kaldi::nnet1::Nnet::HistoryStateSize(v2);
}

void *kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  unint64_t v9 = (void *)a1[24];
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v9, a2, a3, a4, v8);
}

void *non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  unint64_t v9 = *(void **)(v7 + 192);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v9, a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  uint64_t v2 = *((void *)this + 24);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v2);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1 = (char *)this - 16;
  (*(void (**)(char *))(*((void *)this - 2) + 296))((char *)this - 16);
  uint64_t v2 = *((void *)v1 + 24);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v6 = a1[24];
  return kaldi::nnet1::Nnet::GetHistoryState(v6, a2, a3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v6 = *(void *)(v5 + 192);
  return kaldi::nnet1::Nnet::GetHistoryState(v6, a2, a3);
}

void *kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  unint64_t v9 = (void *)a1[24];
  return kaldi::nnet1::Nnet::GetHistoryState(v9, a2, a3, a4, v8);
}

void *non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  unint64_t v9 = *(void **)(v7 + 192);
  return kaldi::nnet1::Nnet::GetHistoryState(v9, a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v8 = a1[24];
  return kaldi::nnet1::Nnet::SetHistoryState(v8, a2, a3, v6, v7);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v8 = *(void *)(v5 + 192);
  return kaldi::nnet1::Nnet::SetHistoryState(v8, a2, a3, v6, v7);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v9 = a1[24];
  return kaldi::nnet1::Nnet::SetHistoryState(v9, a2, a3, a4, v8);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v9 = *(void *)(v7 + 192);
  return kaldi::nnet1::Nnet::SetHistoryState(v9, a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(void *)(a1 + 192), a2, a3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(void *)(a1 + 176), a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Check(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!*(unsigned char *)(this + 668))
  {
    uint64_t v5 = this;
    if (*(int *)(this + 12) < 1 || (int v6 = *(_DWORD *)(this + 8), v6 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 531);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else if (v6 == *(_DWORD *)(*(void *)(this + 176) + 8))
    {
      int v7 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(this + 192), a2, a3, a4, a5);
      uint64_t v12 = *(void *)(v5 + 184);
      if (v7 == *(_DWORD *)(v12 + 8))
      {
        if (*(_DWORD *)(*(void *)(v5 + 176) + 12) == *(_DWORD *)(v12 + 12))
        {
          int v13 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 8) + *(_DWORD *)(v5 + 8);
          if (v13 == kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v8, v9, v10, v11))
          {
            int v18 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 12);
            this = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v14, v15, v16, v17);
            if (v18 == this)
            {
              *(unsigned char *)(v5 + 668) = 1;
              return this;
            }
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 558);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal network has output dim ", 36);
            kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v35, v36, v37, v38);
            int v39 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , but the component has output dim ", 36);
            std::ostream::operator<<();
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 551);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal network takes input dimension ", 43);
            kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v27, v28, v29, v30);
            uint64_t v31 = (void *)std::ostream::operator<<();
            uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" , that is not equal the sum of ", 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"source vector dimension ", 24);
            uint64_t v33 = (void *)std::ostream::operator<<();
            uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" and ", 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"target input network dim ", 25);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 546);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the source and target dot transform has different output dim ", 61);
          uint64_t v26 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 541);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal recurrent network has output dim ", 46);
        kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v21, v22, v23, v24);
        uint64_t v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" , but the target dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 536);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"source state dimension is ", 26);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" , but the source dot transform has input dim ", 46);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  return this;
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Check(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Check((uint64_t)this - 16, a2, a3, a4, a5);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void kaldi::nnet1::GatedRecurrentUnit::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  *(float *)&int v69 = -2.0;
  v70[0] = -1;
  float v67 = 0.1;
  float v68 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[39], &v65);
  memset(v64, 0, sizeof(v64));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_118;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v6, v7);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v64[2]))
      {
        case 9:
          BOOL v10 = v64[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          int v11 = (float *)(a1 + 153);
          if (v10) {
            goto LABEL_99;
          }
          BOOL v12 = v64[0] == (void *)0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          goto LABEL_20;
        case 0xA:
          if (v64[0] != (void *)0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_133;
          }
          goto LABEL_98;
        case 0xB:
          if (v64[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v64 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_133;
          }
          goto LABEL_77;
        case 0xC:
          if (v64[0] == (void *)0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_92;
          }
          uint64_t v32 = v64;
          goto LABEL_113;
        case 0xD:
          if (v64[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v64 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_133;
          }
          goto LABEL_66;
        case 0xF:
          BOOL v15 = v64[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v64 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_70;
        case 0x12:
          if (v64[0] != (void *)0x6E6569646172473CLL
            || v64[1] != (void *)0x7079546D726F4E74
            || LOWORD(v64[2]) != 15973)
          {
            goto LABEL_133;
          }
          goto LABEL_108;
        case 0x13:
          if (v64[0] != (void *)0x61725474696E493CLL
            || v64[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v64[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_133;
          }
          goto LABEL_86;
        default:
          goto LABEL_133;
      }
    }
    switch((unint64_t)v64[1])
    {
      case 9uLL:
        BOOL v13 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v64[0] + 8) == 62;
        int v11 = (float *)(a1 + 153);
        if (!v13)
        {
          BOOL v12 = *(void *)v64[0] == 0x6461724778614D3CLL && *((unsigned char *)v64[0] + 8) == 62;
LABEL_20:
          int v11 = (float *)(a1 + 38);
          if (!v12) {
            goto LABEL_133;
          }
        }
        goto LABEL_99;
      case 0xAuLL:
        if (*(void *)v64[0] != 0x61654D736169423CLL || *((_WORD *)v64[0] + 4) != 15982) {
          goto LABEL_133;
        }
LABEL_98:
        int v11 = (float *)&v69;
        goto LABEL_99;
      case 0xBuLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_133;
        }
LABEL_77:
        int v11 = &v68;
        goto LABEL_99;
      case 0xCuLL:
        if (*(void *)v64[0] != 0x536D6F646E61523CLL || *((_DWORD *)v64[0] + 2) != 1046766949) {
          goto LABEL_112;
        }
LABEL_92:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v70, v8, v9);
        goto LABEL_110;
      case 0xDuLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_133;
        }
LABEL_66:
        int v11 = &v67;
LABEL_99:
        kaldi::ReadBasicType<float>(a2, 0, v11, v8, v9);
        goto LABEL_110;
      case 0xFuLL:
        BOOL v15 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64[0] + 7) == 0x3E66656F43657461;
LABEL_70:
        int v11 = (float *)(a1 + 152);
        if (!v15) {
          goto LABEL_133;
        }
        goto LABEL_99;
      case 0x12uLL:
        if (*(void *)v64[0] != 0x6E6569646172473CLL
          || *((void *)v64[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v64[0] + 8) != 15973)
        {
          goto LABEL_133;
        }
LABEL_108:
        uint64_t v27 = &v65;
        goto LABEL_109;
      case 0x13uLL:
        if (*(void *)v64[0] == 0x61725474696E493CLL
          && *((void *)v64[0] + 1) == 0x79546D726F66736ELL
          && *(void *)((char *)v64[0] + 11) == 0x3E657079546D726FLL)
        {
LABEL_86:
          uint64_t v27 = &v66;
LABEL_109:
          kaldi::ReadToken(a2, 0, (uint64_t)v27, v8, v9);
LABEL_110:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
        if (v64[1] != (void *)12) {
          goto LABEL_133;
        }
LABEL_112:
        uint64_t v32 = (void **)v64[0];
LABEL_113:
        uint64_t v33 = *v32;
        int v34 = *((_DWORD *)v32 + 2);
        if (v33 != (void *)0x6E6F706D6F432F3CLL || v34 != 1047817829)
        {
LABEL_133:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v60, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 72);
          uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Invalid token ", 14);
          if (SHIBYTE(v64[2]) >= 0) {
            unint64_t v52 = v64;
          }
          else {
            unint64_t v52 = (void **)v64[0];
          }
          if (SHIBYTE(v64[2]) >= 0) {
            uint64_t v53 = HIBYTE(v64[2]);
          }
          else {
            uint64_t v53 = (uint64_t)v64[1];
          }
          unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
          uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)". Allowed tokens: ", 18);
          long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"(BiasMean|BiasRange|ParamStddev|LearnRateCoef|MaxNorm|MaxGrad|InitTransformType", 79);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"|GradientNormType|RandomSeed)", 29);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v60);
        }
LABEL_118:
        kaldi::nnet1::GatedRecurrentUnit::AllocateParams((kaldi::nnet1::GatedRecurrentUnit *)a1);
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v66);
        a1[39] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v65);
        if (v70[0] >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v70[0]);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v60, a3);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v60, inited, (uint64_t)(a1 + 40), v67);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v60, inited, (uint64_t)(a1 + 52), v67);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v60, inited, (uint64_t)(a1 + 64), v67);
        uint64_t v37 = a1[80];
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        int v57 = 0;
        kaldi::Vector<float>::Resize((void **)&v57, v37, 0, v38, v39);
        uint64_t v43 = v58;
        if ((int)v58 >= 1)
        {
          unint64_t v44 = 0;
          do
          {
            float v45 = *(float *)&v69;
            float v46 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v40, v41, v42);
            uint64_t v43 = v58;
            if (v44 >= v58) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v42);
            }
            float v47 = v45 + (v46 + -0.5) * v68;
            v57[v44++] = v47;
          }
          while ((uint64_t)v44 < (int)v43);
        }
        kaldi::CuVector<float>::Resize((uint64_t)(a1 + 76), v43, 1u, v41, v42);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v57, v48, v49, v50);
        (*(void (**)(unsigned int *))(*(void *)a1 + 128))(a1);
        kaldi::Vector<float>::Destroy((uint64_t)&v57);
        if (__p)
        {
          float v63 = __p;
          operator delete(__p);
        }
        int v57 = (float *)&v61;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        if (SHIBYTE(v64[2]) < 0) {
          operator delete(v64[0]);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_133;
    }
  }
}

void sub_20CE2509C()
{
  kaldi::Vector<float>::Destroy(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0x20CE250C0);
}

void sub_20CE250BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 160, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, 0);
  uint64_t v2 = *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 208, (2 * v2), v2, 0, 0);
  uint64_t v3 = *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 256, v3, v3, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)this + 304, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, v4, v5);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 663, 2);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 232))(__p, this);
    if ((v10 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v8 = v10;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
  }
}

void sub_20CE252F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  unint64_t v10 = 0;
LABEL_2:
  if ((uint64_t)v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v10 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v10 * v26;
        if (v10 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, (uint64_t)&v23, 111, v11, v12);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_20CE254E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InitData(void *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v35, v8, v9);
    if (SHIBYTE(v36) < 0)
    {
      uint64_t v14 = *((void *)&v35 + 1);
      if (*((void *)&v35 + 1) == 9)
      {
        BOOL v17 = *(void *)v35 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v35 + 8) == 62;
        uint64_t v16 = a1 + 153;
        if (!v17)
        {
          uint64_t v14 = *((void *)&v35 + 1);
LABEL_27:
          if (v14 == 18)
          {
            if (*(void *)v35 == 0x6E6569646172473CLL
              && *(void *)(v35 + 8) == 0x7079546D726F4E74
              && *(_WORD *)(v35 + 16) == 15973)
            {
              goto LABEL_59;
            }
            uint64_t v14 = *((void *)&v35 + 1);
          }
          if (v14 != 9) {
            goto LABEL_62;
          }
          float v20 = (long long *)v35;
LABEL_49:
          uint64_t v23 = *(void *)v20;
          int v24 = *((unsigned __int8 *)v20 + 8);
          BOOL v25 = v23 == 0x6461724778614D3CLL && v24 == 62;
          uint64_t v16 = a1 + 38;
          if (!v25) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        if (*((void *)&v35 + 1) != 15) {
          goto LABEL_27;
        }
        BOOL v15 = *(void *)v35 == 0x61526E7261654C3CLL && *(void *)(v35 + 7) == 0x3E66656F43657461;
        uint64_t v16 = a1 + 152;
        if (!v15) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (HIBYTE(v36) != 9)
      {
        if (HIBYTE(v36) == 15)
        {
          BOOL v21 = (void)v35 == 0x61526E7261654C3CLL && *(void *)((char *)&v35 + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 152;
          if (!v21)
          {
LABEL_62:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 115);
            uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v36 >= 0) {
              uint64_t v31 = &v35;
            }
            else {
              uint64_t v31 = (long long *)v35;
            }
            if (v36 >= 0) {
              uint64_t v32 = HIBYTE(v36);
            }
            else {
              uint64_t v32 = *((void *)&v35 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          goto LABEL_54;
        }
        if (HIBYTE(v36) != 18) {
          goto LABEL_62;
        }
        if ((void)v35 == 0x6E6569646172473CLL
          && *((void *)&v35 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v36 == 15973)
        {
LABEL_59:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v34 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p, v10, v11);
          *((_DWORD *)a1 + 39) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v34) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_55;
        }
LABEL_47:
        if (HIBYTE(v36) != 9) {
          goto LABEL_62;
        }
        float v20 = &v35;
        goto LABEL_49;
      }
      BOOL v22 = (void)v35 == 0x6D726F4E78614D3CLL && BYTE8(v35) == 62;
      uint64_t v16 = a1 + 153;
      if (!v22) {
        goto LABEL_47;
      }
    }
LABEL_54:
    kaldi::ReadBasicType<float>(a2, a3, v16, v10, v11);
LABEL_55:
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 40), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 64), a2, a3, a4);
  double v28 = kaldi::CuVector<float>::Read((uint64_t)(a1 + 76), a2, a3, v26, v27);
  return (*(uint64_t (**)(float *, double))(*(void *)a1 + 128))(a1, v28);
}

void sub_20CE258E0()
{
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::ReadData((float *)((char *)a1 + *(void *)(*a1 - 176)), a2, a3, a4);
}

void *kaldi::nnet1::GatedRecurrentUnit::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_20CE25A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::WriteData(_DWORD *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t)(a1 + 40);
  (*(void (**)(_DWORD *))(*(void *)a1 + 128))(a1);
  (*(void (**)(_DWORD *, void *, uint64_t))(*(void *)a1 + 168))(a1, a2, a3);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 64), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 76, a2, a3, v9, v10);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return (*((_DWORD *)this + 44) * *((_DWORD *)this + 45)
                      + *((_DWORD *)this + 56) * *((_DWORD *)this + 57)
                      + *((_DWORD *)this + 68) * *((_DWORD *)this + 69)
                      + *((_DWORD *)this + 80));
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1 = (_DWORD *)((char *)this + *(void *)(*(void *)this - 192));
  return (v1[44] * v1[45] + v1[56] * v1[57] + v1[68] * v1[69] + v1[80]);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v10 = a1[44] * a1[45];
  int v12 = a1[56];
  int v11 = a1[57];
  int v13 = a1[69];
  int v14 = a1[68];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  int v15 = v12 * v11;
  uint64_t v27 = *(void **)a2;
  LODWORD(v28) = v10;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, (uint64_t)(a1 + 40), v7, v8, v9);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v18 = v15 + v10;
  if ((v15 + v10) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  int v19 = v14 * v13;
  uint64_t v27 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v28) = v15;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, (uint64_t)(a1 + 52), v16, v17, v9);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v22 = v19 + v18;
  if ((v19 + v18) > *(_DWORD *)(a2 + 8)
    || (uint64_t v27 = (void *)(*(void *)a2 + 4 * v18),
        LODWORD(v28) = v19,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, (uint64_t)(a1 + 64), v20, v21, v9),
        int v25 = a1[80],
        uint64_t v28 = 0,
        uint64_t v29 = 0,
        (v25 + v22) > *(_DWORD *)(a2 + 8)))
  {
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  uint64_t v27 = (void *)(*(void *)a2 + 4 * v22);
  LODWORD(v28) = v25;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 76, (uint64_t)&v27, v23, v24, v9);
}

_DWORD *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetParams((void *)((char *)a1 + *(void *)(*a1 - 200)), a2);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 184))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0xAC, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = a1[44] * a1[45];
  int v8 = a1[56];
  int v7 = a1[57];
  int v9 = a1[69];
  int v10 = a1[68];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (v6 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  int v11 = v8 * v7;
  int v19 = *(char **)a2;
  LODWORD(v20) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v19);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v12 = v11 + v6;
  if ((v11 + v6) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  int v13 = v10 * v9;
  int v19 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v20) = v11;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 52), &v19);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v14 = v13 + v12;
  if ((v13 + v12) > *(_DWORD *)(a2 + 8)
    || (int v19 = (char *)(*(void *)a2 + 4 * v12),
        LODWORD(v20) = v13,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 64), &v19),
        int v17 = a1[80],
        uint64_t v20 = 0,
        uint64_t v21 = 0,
        (v17 + v14) > *(_DWORD *)(a2 + 8)))
  {
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  int v19 = (char *)(*(void *)a2 + 4 * v14);
  LODWORD(v20) = v17;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v19, v15, v16, v5);
}

_DWORD *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160, a2, a3, a4, a5);
  float v11 = v6 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 208, v7, v8, v9, v10);
  float v16 = v11 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 256, v12, v13, v14, v15);
  double v17 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 304);
  return v16 + *(float *)&v17;
}

float virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::SumParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 224)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, void, void))(*v9 + 296))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  int v15 = a1[44] * a1[45];
  int v17 = a1[56];
  int v16 = a1[57];
  int v18 = a1[69];
  int v19 = a1[68];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v15 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_9;
  }
  long long v35 = *(char **)a4;
  LODWORD(v36) = v15;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v32, v9[81], 111, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v35, (uint64_t)&v32);
  int v20 = v17 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v23 = v20 + v15;
  if ((v20 + v15) > *(_DWORD *)(a4 + 8)) {
    goto LABEL_9;
  }
  int v24 = v19 * v18;
  uint64_t v32 = *(void *)a4 + 4 * v15;
  LODWORD(v33) = v20;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, v9[84], v21, v22, v14);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v27 = v24 + v23;
  if ((v24 + v23) > *(_DWORD *)(a4 + 8)
    || (uint64_t v32 = *(void *)a4 + 4 * v23,
        LODWORD(v33) = v24,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, v9[87], v25, v26, v14),
        int v30 = a1[80],
        uint64_t v33 = 0,
        uint64_t v34 = 0,
        (v30 + v27) > *(_DWORD *)(a4 + 8)))
  {
LABEL_9:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  uint64_t v32 = *(void *)a4 + 4 * v27;
  LODWORD(v33) = v30;
  kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)v9[90], (uint64_t)&v32, v28, v29, v14);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

void sub_20CE261C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetGradient((void *)((char *)a1 + *(void *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v18, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v18, 111, v4, v5, a2, 1.0);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *((unsigned int *)this + 57), *((unsigned int *)this + 56), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)v18, 111, v6, v7, a2, 1.0);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *((unsigned int *)this + 69), *((unsigned int *)this + 68), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)v18, 111, v8, v9, a2, 1.0);
  uint64_t v10 = *((unsigned int *)this + 80);
  v17[0] = off_26C2111C8;
  memset(&v17[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v17, v10, 1u, v11, v12);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v17);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)v17, v13, v14, v15, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v17);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v18);
}

void sub_20CE2632C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::PerturbParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, void *, void))(*(void *)this + 168))(this, v30, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n Input weights:", 16);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v29 & 0x80u) == 0) {
    uint64_t v3 = v28;
  }
  else {
    uint64_t v3 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v4 = v29;
  }
  else {
    uint64_t v4 = (uint64_t)v28[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n Gate recurrent weights:", 25);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v27 & 0x80u) == 0) {
    uint64_t v7 = v26;
  }
  else {
    uint64_t v7 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v8 = v27;
  }
  else {
    uint64_t v8 = (uint64_t)v26[1];
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n Activation recurrent weights:", 31);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 256);
  if ((v25 & 0x80u) == 0) {
    uint64_t v11 = v24;
  }
  else {
    uint64_t v11 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v12 = v25;
  }
  else {
    uint64_t v12 = (uint64_t)v24[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n Bias:", 7);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 76, v15, v16, v17, v18);
  if ((v23 & 0x80u) == 0) {
    int v19 = __p;
  }
  else {
    int v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v20 = v23;
  }
  else {
    uint64_t v20 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v19, v20);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if ((char)v27 < 0) {
    operator delete(v26[0]);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  std::stringbuf::str();
  v30[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v30[1] = MEMORY[0x263F8C318] + 16;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v32);
}

void sub_20CE26624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Info((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 640))
  {
    memset(&v88, 0, sizeof(v88));
    int v87 = 0;
    if (*((int *)this + 20) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v75, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v74 & 0x80u) == 0) {
          uint64_t v3 = v73;
        }
        else {
          uint64_t v3 = (void **)v73[0];
        }
        if ((v74 & 0x80u) == 0) {
          std::string::size_type v4 = v74;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v73[1];
        }
        uint64_t v5 = std::string::append(&v75, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v71, ": ");
        if ((v72 & 0x80u) == 0) {
          uint64_t v7 = v71;
        }
        else {
          uint64_t v7 = (void **)v71[0];
        }
        if ((v72 & 0x80u) == 0) {
          std::string::size_type v8 = v72;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v71[1];
        }
        uint64_t v9 = std::string::append(&v76, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v69, "\n  Input weights gradient: ");
        if ((v70 & 0x80u) == 0) {
          uint64_t v11 = v69;
        }
        else {
          uint64_t v11 = (void **)v69[0];
        }
        if ((v70 & 0x80u) == 0) {
          std::string::size_type v12 = v70;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v69[1];
        }
        uint64_t v13 = std::string::append(&v77, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 81) + 48 * v87);
        if ((v68 & 0x80u) == 0) {
          uint64_t v15 = v67;
        }
        else {
          uint64_t v15 = (void **)v67[0];
        }
        if ((v68 & 0x80u) == 0) {
          std::string::size_type v16 = v68;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v67[1];
        }
        uint64_t v17 = std::string::append(&v78, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "\n  Gate recurrent weights gradient: ");
        if ((v66 & 0x80u) == 0) {
          int v19 = v65;
        }
        else {
          int v19 = (void **)v65[0];
        }
        if ((v66 & 0x80u) == 0) {
          std::string::size_type v20 = v66;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v65[1];
        }
        uint64_t v21 = std::string::append(&v79, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 84) + 48 * v87);
        if ((v64 & 0x80u) == 0) {
          unsigned __int8 v23 = v63;
        }
        else {
          unsigned __int8 v23 = (void **)v63[0];
        }
        if ((v64 & 0x80u) == 0) {
          std::string::size_type v24 = v64;
        }
        else {
          std::string::size_type v24 = (std::string::size_type)v63[1];
        }
        unsigned __int8 v25 = std::string::append(&v80, (const std::string::value_type *)v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v61, "\n  Activation recurrent weights gradient: ");
        if ((v62 & 0x80u) == 0) {
          unsigned __int8 v27 = v61;
        }
        else {
          unsigned __int8 v27 = (void **)v61[0];
        }
        if ((v62 & 0x80u) == 0) {
          std::string::size_type v28 = v62;
        }
        else {
          std::string::size_type v28 = (std::string::size_type)v61[1];
        }
        unsigned __int8 v29 = std::string::append(&v81, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 87) + 48 * v87);
        if ((v60 & 0x80u) == 0) {
          char v31 = v59;
        }
        else {
          char v31 = (void **)v59[0];
        }
        if ((v60 & 0x80u) == 0) {
          std::string::size_type v32 = v60;
        }
        else {
          std::string::size_type v32 = (std::string::size_type)v59[1];
        }
        uint64_t v33 = std::string::append(&v82, (const std::string::value_type *)v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v57, "\n  Bias gradient: ");
        if ((v58 & 0x80u) == 0) {
          long long v35 = v57;
        }
        else {
          long long v35 = (void **)v57[0];
        }
        if ((v58 & 0x80u) == 0) {
          std::string::size_type v36 = v58;
        }
        else {
          std::string::size_type v36 = (std::string::size_type)v57[1];
        }
        uint64_t v37 = std::string::append(&v83, (const std::string::value_type *)v35, v36);
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>((_DWORD *)(*((void *)this + 90) + 32 * v87), v39, v40, v41, v42);
        if ((v56 & 0x80u) == 0) {
          uint64_t v43 = __p;
        }
        else {
          uint64_t v43 = (void **)__p[0];
        }
        if ((v56 & 0x80u) == 0) {
          std::string::size_type v44 = v56;
        }
        else {
          std::string::size_type v44 = (std::string::size_type)__p[1];
        }
        float v45 = std::string::append(&v84, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        int64_t v86 = v45->__r_.__value_.__r.__words[2];
        long long v85 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (v86 >= 0) {
          float v47 = (const std::string::value_type *)&v85;
        }
        else {
          float v47 = (const std::string::value_type *)v85;
        }
        if (v86 >= 0) {
          std::string::size_type v48 = HIBYTE(v86);
        }
        else {
          std::string::size_type v48 = *((void *)&v85 + 1);
        }
        std::string::append(&v88, v47, v48);
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        if ((char)v56 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if ((char)v58 < 0) {
          operator delete(v57[0]);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if ((char)v60 < 0) {
          operator delete(v59[0]);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if ((char)v62 < 0) {
          operator delete(v61[0]);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if ((char)v64 < 0) {
          operator delete(v63[0]);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if ((char)v66 < 0) {
          operator delete(v65[0]);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if ((char)v68 < 0) {
          operator delete(v67[0]);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if ((char)v70 < 0) {
          operator delete(v69[0]);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if ((char)v72 < 0) {
          operator delete(v71[0]);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if ((char)v74 < 0) {
          operator delete(v73[0]);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        ++v87;
      }
      while (v87 < *((_DWORD *)this + 20));
    }
    uint64_t v49 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v85, "\n");
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v50 = &v88;
    }
    else {
      uint64_t v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    unint64_t v52 = std::string::insert(v49, 0, (const std::string::value_type *)v50, size);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v52->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v86) < 0) {
      operator delete((void *)v85);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_20CE26C90(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE26E54()
{
}

void sub_20CE26E5C()
{
}

void sub_20CE26E64()
{
}

void sub_20CE26E6C()
{
}

void sub_20CE26E74()
{
}

void sub_20CE26E7C()
{
}

void sub_20CE26E84()
{
}

void sub_20CE26E8C()
{
}

void sub_20CE26E94()
{
}

void sub_20CE26E9C()
{
}

void sub_20CE26EA4()
{
}

void sub_20CE26EAC()
{
}

uint64_t kaldi::nnet1::ToString<int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v3);
}

void sub_20CE26FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 0, sizeof(v69));
  int v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v57 & 0x80u) == 0) {
        uint64_t v3 = v56;
      }
      else {
        uint64_t v3 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v4 = v57;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v56[1];
      }
      uint64_t v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v7 = v54;
      }
      else {
        uint64_t v7 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v8 = v55;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v54[1];
      }
      uint64_t v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates values: ");
      if ((v53 & 0x80u) == 0) {
        uint64_t v11 = v52;
      }
      else {
        uint64_t v11 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v12 = v53;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v52[1];
      }
      uint64_t v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 46) + 48 * v68);
      if ((v51 & 0x80u) == 0) {
        uint64_t v15 = v50;
      }
      else {
        uint64_t v15 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v16 = v51;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v50[1];
      }
      uint64_t v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activations: ");
      if ((v49 & 0x80u) == 0) {
        int v19 = v48;
      }
      else {
        int v19 = (void **)v48[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v20 = v49;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v48[1];
      }
      uint64_t v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 49) + 48 * v68);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = v46;
      }
      else {
        unsigned __int8 v23 = (void **)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v24 = v47;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v46[1];
      }
      unsigned __int8 v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activations: ");
      if ((v45 & 0x80u) == 0) {
        unsigned __int8 v27 = v44;
      }
      else {
        unsigned __int8 v27 = (void **)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v44[1];
      }
      unsigned __int8 v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 61) + 48 * v68);
      if ((v43 & 0x80u) == 0) {
        char v31 = __p;
      }
      else {
        char v31 = (void **)__p[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v32 = v43;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v67 = v33->__r_.__value_.__r.__words[2];
      long long v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0) {
        long long v35 = (const std::string::value_type *)&v66;
      }
      else {
        long long v35 = (const std::string::value_type *)v66;
      }
      if (v67 >= 0) {
        std::string::size_type v36 = HIBYTE(v67);
      }
      else {
        std::string::size_type v36 = *((void *)&v66 + 1);
      }
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((char)v43 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  uint64_t v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v69;
  }
  else {
    long long v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  uint64_t v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_20CE274C8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE2764C()
{
}

void sub_20CE27654()
{
}

void sub_20CE2765C()
{
}

void sub_20CE27664()
{
}

void sub_20CE2766C()
{
}

void sub_20CE27674()
{
}

void sub_20CE2767C()
{
}

void sub_20CE27684()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 0, sizeof(v69));
  int v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v57 & 0x80u) == 0) {
        uint64_t v3 = v56;
      }
      else {
        uint64_t v3 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v4 = v57;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v56[1];
      }
      uint64_t v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v7 = v54;
      }
      else {
        uint64_t v7 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v8 = v55;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v54[1];
      }
      uint64_t v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates diff: ");
      if ((v53 & 0x80u) == 0) {
        uint64_t v11 = v52;
      }
      else {
        uint64_t v11 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v12 = v53;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v52[1];
      }
      uint64_t v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 70) + 48 * v68);
      if ((v51 & 0x80u) == 0) {
        uint64_t v15 = v50;
      }
      else {
        uint64_t v15 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v16 = v51;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v50[1];
      }
      uint64_t v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activation diff: ");
      if ((v49 & 0x80u) == 0) {
        int v19 = v48;
      }
      else {
        int v19 = (void **)v48[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v20 = v49;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v48[1];
      }
      uint64_t v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 67) + 48 * v68);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = v46;
      }
      else {
        unsigned __int8 v23 = (void **)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v24 = v47;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v46[1];
      }
      unsigned __int8 v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activation diff: ");
      if ((v45 & 0x80u) == 0) {
        unsigned __int8 v27 = v44;
      }
      else {
        unsigned __int8 v27 = (void **)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v44[1];
      }
      unsigned __int8 v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 64) + 48 * v68);
      if ((v43 & 0x80u) == 0) {
        char v31 = __p;
      }
      else {
        char v31 = (void **)__p[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v32 = v43;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v67 = v33->__r_.__value_.__r.__words[2];
      long long v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0) {
        long long v35 = (const std::string::value_type *)&v66;
      }
      else {
        long long v35 = (const std::string::value_type *)v66;
      }
      if (v67 >= 0) {
        std::string::size_type v36 = HIBYTE(v67);
      }
      else {
        std::string::size_type v36 = *((void *)&v66 + 1);
      }
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((char)v43 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  uint64_t v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v69;
  }
  else {
    long long v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  uint64_t v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_20CE27B58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE27CDC()
{
}

void sub_20CE27CE4()
{
}

void sub_20CE27CEC()
{
}

void sub_20CE27CF4()
{
}

void sub_20CE27CFC()
{
}

void sub_20CE27D04()
{
}

void sub_20CE27D0C()
{
}

void sub_20CE27D14()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *((unsigned int *)this + 24);
  int v67 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x126, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v88, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 296, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v88);
  }
  long long v14 = *(void **)(a3 + 32);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(this, a4, v5, v14);
  uint64_t v16 = *((void *)this + 105);
  std::string v63 = (unsigned int *)a3;
  if (*((void *)this + 106) == v16 || (int v17 = *(_DWORD *)(v16 + 32 * a4 + 16), v17 < 1))
  {
    int v64 = 0;
  }
  else
  {
    if (v17 != v5) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x12F, "boundary_[batch_index].Dim() == batch_size", v15);
    }
    uint64_t v18 = *((void *)this + 108) + 48 * a4;
    *(void *)(v18 + 32) = v14;
    int v64 = 1;
    kaldi::CuMatrix<float>::Resize(v18, v6, *(unsigned int *)(*((void *)this + 1) + 48 * a4 + 16), 1u, 0);
  }
  uint64_t v19 = *((void *)this + 43) + 48 * a4;
  uint64_t v20 = *((void *)this + 46) + 48 * a4;
  uint64_t v21 = *((void *)this + 49);
  uint64_t v69 = *((void *)this + 55);
  uint64_t v22 = *((void *)this + 58);
  uint64_t v23 = *((void *)this + 61);
  kaldi::CuMatrixBase<float>::AddMatMat(v19, a2, CblasNoTrans, (uint64_t)this + 160, (const char *)0x70, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToRows(v19, (uint64_t)this + 304, v24, v25, v26, 1.0, 1.0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v19, 0, *(_DWORD *)(v19 + 20), 0, 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v20, (uint64_t)&v88, 111, v27, v28);
  std::string v88 = off_26C2096F8;
  memset(v89, 0, sizeof(v89));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
  int v29 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v19, 0, *(_DWORD *)(v19 + 20), (const char *)(2 * v29), v29);
  uint64_t v66 = v21 + 48 * a4;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v66, (uint64_t)&v88, 111, v30, v31);
  std::string v88 = off_26C2096F8;
  uint64_t v68 = v23 + 48 * a4;
  memset(v89, 0, sizeof(v89));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
  kaldi::CuMatrixBase<float>::Set(v22 + 48 * a4, v32, v33, v34, v35, 1.0);
  if (v67 >= 1)
  {
    int v38 = 0;
    int v39 = 0;
    uint64_t v40 = v69 + 48 * a4;
    unsigned __int8 v70 = (char *)this + 12;
    uint64_t v65 = v40;
    long long v41 = 0uLL;
    while (1)
    {
      v89[0] = v41;
      v89[1] = v41;
      std::string v88 = off_26C2096F8;
      *(_OWORD *)&v87[1] = v41;
      *(_OWORD *)&v87[3] = v41;
      v87[0] = off_26C2096F8;
      if (!v39) {
        break;
      }
      if (!v64)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v68, v38 - v6, v6, 0, *(_DWORD *)(v68 + 16));
        goto LABEL_16;
      }
      kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 108) + 48 * a4);
      uint64_t v42 = *((void *)this + 108) + 48 * a4;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v42, 0, *(_DWORD *)(v42 + 20), 0, *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
      *(_OWORD *)((char *)v89 + 8) = *(_OWORD *)&v86[1];
      *(void *)&v89[0] = v86[0];
      *((void *)&v89[1] + 1) = v86[3];
      long long v85 = off_26C2096F8;
      memset(v86, 0, sizeof(v86));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v85);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v68, v38 - v6, v6, 0, *(_DWORD *)(v68 + 16));
      kaldi::CuSubVector<float>::CuSubVector(&v82, *((void *)this + 105) + 32 * a4, v38, v6, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v88, (uint64_t)&v85, (uint64_t)&v82, 1, v44);
LABEL_17:
      long long v85 = off_26C2096F8;
      memset(v86, 0, sizeof(v86));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v85);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v20, v38, v6, 0, *(_DWORD *)(v20 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v85, (uint64_t)&v88, CblasNoTrans, (uint64_t)this + 208, (const char *)0x70, 1.0, 1.0);
      long long v85 = off_26C2096F8;
      memset(v86, 0, sizeof(v86));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v85);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v20, v38, v6, 0, *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v85, (uint64_t)&v85, v46, v47, v48);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v82, v20, v38, v6, (const char *)*(unsigned int *)&v70[*(void *)(*(void *)this - 24)], *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v82, (uint64_t)&v82, v49, v50, v51);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v80, v65, v38, v6, 0, *(_DWORD *)(v65 + 16));
      v87[1] = v81[0];
      *(_OWORD *)&v87[2] = *(_OWORD *)&v81[1];
      v87[4] = v81[3];
      std::string v80 = off_26C2096F8;
      memset(v81, 0, sizeof(v81));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v80);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)v87, (uint64_t)&v82, 111, (uint64_t)&v88, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v80, v66, v38, v6, 0, *(_DWORD *)(v66 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v80, (uint64_t)v87, CblasNoTrans, (uint64_t)this + 256, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v80, (uint64_t)&v80, v52, v53, v54);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v77, v22 + 48 * a4, v38, v6, 0, *(_DWORD *)(v22 + 48 * a4 + 16));
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v77, (uint64_t)&v85, 111, v55, v56, -1.0, 1.0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v74, v68, v38, v6, 0, *(_DWORD *)(v68 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v74, (uint64_t)&v77, 111, (uint64_t)&v88, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v74, (uint64_t)&v85, 111, (uint64_t)&v80, (const char *)0x6F, 1.0, 1.0);
      uint64_t v57 = *((void *)this + 52) + 48 * a4;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v71, v57, v38, v6, 0, *(_DWORD *)(v57 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v71, (uint64_t)&v80, 111, v58, v59);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v71, (uint64_t)&v88, 111, v60, v61, -1.0, 1.0);
      unint64_t v71 = off_26C2096F8;
      long long v72 = 0u;
      long long v73 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v71);
      unsigned __int8 v74 = off_26C2096F8;
      long long v75 = 0u;
      long long v76 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v74);
      std::string v77 = off_26C2096F8;
      long long v78 = 0u;
      long long v79 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v77);
      std::string v80 = off_26C2096F8;
      memset(v81, 0, sizeof(v81));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v80);
      std::string v82 = off_26C2096F8;
      long long v83 = 0u;
      long long v84 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v82);
      long long v85 = off_26C2096F8;
      memset(v86, 0, sizeof(v86));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v85);
      v87[0] = off_26C2096F8;
      memset(&v87[1], 0, 32);
      kaldi::CuMatrixBase<float>::~CuMatrixBase(v87);
      std::string v88 = off_26C2096F8;
      memset(v89, 0, sizeof(v89));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
      long long v41 = 0uLL;
      ++v39;
      v38 += v6;
      if (v67 == v39) {
        goto LABEL_18;
      }
    }
    uint64_t v45 = *((void *)this + 1) + 48 * a4;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v45, 0, *(_DWORD *)(v45 + 20), 0, *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
LABEL_16:
    *(_OWORD *)((char *)v89 + 8) = *(_OWORD *)&v86[1];
    *(void *)&v89[0] = v86[0];
    *((void *)&v89[1] + 1) = v86[3];
    goto LABEL_17;
  }
LABEL_18:
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v63, v68, 111, v36, v37);
  return kaldi::nnet1::GatedRecurrentUnit::SaveLastState(this, a4);
}

void sub_20CE28748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void (**a63)())
{
  a63 = off_26C2096F8;
  *(_OWORD *)(v63 + 168) = 0u;
  *(_OWORD *)(v63 + 184) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a63);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 744, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*((void *)this + 43) + 48 * a2, a3, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 46) + 48 * a2, a3, (2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 49) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 52) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 55) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 58) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 61) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  *(void *)(*((void *)this + 43) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 46) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 49) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 52) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 55) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 58) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 61) + 48 * a2 + 32) = a4;
}

void sub_20CE28C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SaveLastState(kaldi::nnet1::GatedRecurrentUnit *this, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v9, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 852, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Saving last activation batch ", 29);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v9);
  }
  uint64_t v4 = *((void *)this + 61) + 48 * a2;
  uint64_t v5 = (unsigned int *)(*((void *)this + 1) + 48 * a2);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v9, v4, *(_DWORD *)(v4 + 20) - *((_DWORD *)this + 24), *((_DWORD *)this + 24), 0, *(_DWORD *)(v4 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v5, (uint64_t)&v9, 111, v6, v7);
  uint64_t v9 = off_26C2096F8;
  long long v10 = 0u;
  long long v11 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v9);
}

void sub_20CE28D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_26C2096F8;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((kaldi::nnet1::GatedRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 96) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x17C, "ropts_.num_sequences == 1", a5);
  }
  std::string::size_type v8 = *(void **)(a3 + 24);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, 0, 1, v8);
  uint64_t v10 = *(void *)(a1 + 840);
  if (*(void *)(a1 + 848) != v10)
  {
    int v11 = *(_DWORD *)(v10 + 16);
    if (v11 >= 1)
    {
      if (v11 != 1) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x181, "boundary_[0].Dim() == 1", v9);
      }
      uint64_t v12 = *(void *)(a1 + 864);
      *(void *)(v12 + 32) = v8;
      kaldi::CuMatrix<float>::Resize(v12, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
    }
  }
  uint64_t v13 = *(void *)(a1 + 344);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v99 = &off_26C209728;
  uint64_t v100 = v14;
  LODWORD(v101) = *(_DWORD *)(v13 + 16);
  uint64_t v102 = *(void *)(v13 + 32);
  uint64_t v15 = *(void *)(a1 + 368);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v96 = 0;
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v95 = &off_26C209728;
  uint64_t v96 = v16;
  LODWORD(v97) = *(_DWORD *)(v15 + 16);
  uint64_t v98 = *(void *)(v15 + 32);
  uint64_t v17 = *(void *)(a1 + 488);
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v92 = 0;
  uint64_t v18 = *(void *)(v17 + 8);
  v91 = &off_26C209728;
  uint64_t v92 = v18;
  LODWORD(v93) = *(_DWORD *)(v17 + 16);
  uint64_t v94 = *(void *)(v17 + 32);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v99, a1 + 160, CblasNoTrans, a2, v9, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v99, a1 + 304, v19, v20, v21, 1.0, 1.0);
  unsigned int v25 = 2 * *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  int v87 = &off_26C209728;
  uint64_t v88 = 0;
  if (v25 > v101) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v24);
  }
  uint64_t v88 = v100;
  LODWORD(v89) = v25;
  uint64_t v90 = v102;
  kaldi::CuVectorBase<float>::CopyFromVec(&v95, (uint64_t)&v87, v22, v23, v24);
  uint64_t v27 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v27 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v26);
  }
  uint64_t v28 = *(void *)(v27 + 8);
  unsigned int v29 = *(_DWORD *)(v27 + 16);
  uint64_t v30 = *(void *)(v27 + 32);
  uint64_t v88 = v28;
  int v87 = &off_26C209728;
  uint64_t v89 = v29;
  uint64_t v90 = v30;
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v95, a1 + 208, CblasNoTrans, (uint64_t)&v87, v26, 1.0, 1.0);
  unsigned int v34 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  long long v83 = &off_26C209728;
  uint64_t v84 = 0;
  if (v34 > v97) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
  }
  uint64_t v84 = v96;
  LODWORD(v85) = v34;
  uint64_t v86 = v98;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v83, (uint64_t)&v83, v31, v32, v33);
  int v35 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  kaldi::CuSubVector<float>::CuSubVector(v82, (uint64_t)&v95, v35, v35, v36);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v82, (uint64_t)v82, v37, v38, v39);
  uint64_t v40 = *(void *)(a1 + 440);
  uint64_t v80 = 0;
  uint64_t v41 = *(void *)(v40 + 8);
  v79[0] = &off_26C209728;
  v79[1] = v41;
  LODWORD(v80) = *(_DWORD *)(v40 + 16);
  uint64_t v81 = *(void *)(v40 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v79, (uint64_t)v82, (uint64_t)&v87, v42, v43, 1.0, 0.0);
  uint64_t v44 = *(void *)(a1 + 392);
  uint64_t v77 = 0;
  uint64_t v45 = *(void *)(v44 + 8);
  v76[0] = &off_26C209728;
  v76[1] = v45;
  LODWORD(v77) = *(_DWORD *)(v44 + 16);
  uint64_t v78 = *(void *)(v44 + 32);
  int v46 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  kaldi::CuSubVector<float>::CuSubVector(v73, (uint64_t)&v99, 2 * v46, v46, v47);
  kaldi::CuVectorBase<float>::CopyFromVec(v76, (uint64_t)v73, v48, v49, v50);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v76, a1 + 256, CblasNoTrans, (uint64_t)v79, v51, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)v76, (uint64_t)v76, v52, v53, v54);
  uint64_t v55 = *(void *)(a1 + 464);
  uint64_t v74 = 0;
  uint64_t v56 = *(void *)(v55 + 8);
  v73[0] = &off_26C209728;
  v73[1] = v56;
  LODWORD(v74) = *(_DWORD *)(v55 + 16);
  uint64_t v75 = *(void *)(v55 + 32);
  kaldi::CuVectorBase<float>::Set((uint64_t)v73, 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)v73, (uint64_t)&v83, v57, v58, v59, -1.0, 1.0);
  uint64_t v60 = *(void *)(a1 + 488);
  uint64_t v71 = 0;
  uint64_t v61 = *(void *)(v60 + 8);
  v70[0] = &off_26C209728;
  v70[1] = v61;
  LODWORD(v71) = *(_DWORD *)(v60 + 16);
  uint64_t v72 = *(void *)(v60 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v70, (uint64_t)v73, (uint64_t)&v87, v62, v63, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v70, (uint64_t)&v83, (uint64_t)v76, v64, v65, 1.0, 1.0);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a3, (uint64_t)v70, v66, v67, v68);
  return kaldi::nnet1::GatedRecurrentUnit::SaveLastState((kaldi::nnet1::GatedRecurrentUnit *)a1, 0);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 136), a2, a3, a4, a5);
}

double kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  int v11 = *(_DWORD *)(a1 + 96);
  kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers((uint64_t *)a1);
  int v52 = (int)v10 / v11;
  if ((int)v10 % v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x1C0, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v90, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 450, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", which contains ", 17);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" frames each from ", 18);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v90);
  }
  if (v52 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x1C4, "frames_in_batch > 1 && \"GRU backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v51 = a5;
  uint64_t v16 = a4;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, a6, v10, *(void **)(v17 + 32));
  uint64_t v18 = *(void *)(a1 + 368) + 48 * a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v18, 0, *(_DWORD *)(v18 + 20), 0, *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v18, 0, *(_DWORD *)(v18 + 20), (const char *)*(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  uint64_t v19 = a6;
  uint64_t v58 = *(void *)(a1 + 464);
  uint64_t v60 = *(void *)(a1 + 392);
  uint64_t v20 = *(void *)(a1 + 488);
  uint64_t v21 = *(void *)(a1 + 512);
  uint64_t v22 = 3 * a6;
  uint64_t v23 = *(void *)(a1 + 560) + 48 * a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v23, 0, *(_DWORD *)(v23 + 20), 0, *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  uint64_t v57 = v23;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, v23, 0, *(_DWORD *)(v23 + 20), (const char *)*(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  uint64_t v24 = *(void *)(a1 + 536);
  uint64_t v53 = a1;
  uint64_t v55 = *(void *)(a1 + 584);
  uint64_t v62 = v21 + 16 * v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v62, v16, 111, v25, v26);
  int v27 = (int)v10 / v11;
  int v28 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)&v81, v11, v28, 0, SDWORD2(v82));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, (uint64_t)&v87, v11, v28, 0, SDWORD2(v88));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v20 + 16 * v22, 0, v28, 0, *(_DWORD *)(v20 + 16 * v22 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v78, (uint64_t)&v75, (uint64_t)&v72, v29, v30);
  uint64_t v72 = off_26C2096F8;
  long long v73 = 0u;
  long long v74 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v72);
  uint64_t v75 = off_26C2096F8;
  long long v76 = 0u;
  long long v77 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
  uint64_t v78 = off_26C2096F8;
  long long v79 = 0u;
  long long v80 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)&v81, 0, v11, 0, SDWORD2(v82));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v78);
  uint64_t v78 = off_26C2096F8;
  long long v79 = 0u;
  long long v80 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v84, (uint64_t)&v90, *(void *)(v53 + 416) + 48 * (int)v19, v31, v32);
  uint64_t v33 = v60 + 16 * v22;
  uint64_t v34 = 3 * v19;
  uint64_t v61 = v24 + 48 * v19;
  kaldi::CuMatrixBase<float>::DiffTanh(v61, v33, (uint64_t)&v90, v35, v36);
  int v37 = 0;
  uint64_t v54 = v58 + 16 * v22;
  int v59 = v11 * (v52 - 1);
  uint64_t v38 = v55 + 16 * v34;
  int v56 = v11 * v52;
  do
  {
    int v39 = v59 + v37;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, v62, v59 + v37, v11, 0, *(_DWORD *)(v62 + 16));
    if (--v27 < v52 - 1)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, v62, v56 + v37, v11, 0, *(_DWORD *)(v62 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v54, v56 + v37, v11, 0, *(_DWORD *)(v54 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v69, v38, v56 + v37, v11, 0, *(_DWORD *)(v38 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, (uint64_t)&v87, v56 + v37, v11, 0, SDWORD2(v88));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v63, v57, v56 + v37, v11, 0, *(_DWORD *)(v57 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v78, (uint64_t)&v75, 111, (uint64_t)&v72, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v78, (uint64_t)&v69, 111, (uint64_t)&v66, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v78, (uint64_t)&v63, CblasNoTrans, v53 + 208, (const char *)0x6F, 1.0, 1.0);
      uint64_t v63 = off_26C2096F8;
      long long v64 = 0u;
      long long v65 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v63);
      uint64_t v66 = off_26C2096F8;
      long long v67 = 0u;
      long long v68 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
      uint64_t v69 = off_26C2096F8;
      long long v70 = 0u;
      long long v71 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v69);
      uint64_t v72 = off_26C2096F8;
      long long v73 = 0u;
      long long v74 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v72);
      uint64_t v75 = off_26C2096F8;
      long long v76 = 0u;
      long long v77 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, (uint64_t)&v84, v39, v11, 0, SDWORD2(v85));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v75, (uint64_t)&v78, v40, v41, v42);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v61, v39, v11, 0, *(_DWORD *)(v61 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v72, (uint64_t)&v78, v43, v44, v45);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v69, v38, v39, v11, 0, *(_DWORD *)(v38 + 16));
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v69, (uint64_t)&v72, CblasNoTrans, v53 + 256, (const char *)0x6F, 1.0, 0.0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, (uint64_t)&v81, v39, v11, 0, SDWORD2(v82));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v66, (uint64_t)&v69, v46, v47, v48);
    uint64_t v66 = off_26C2096F8;
    long long v67 = 0u;
    long long v68 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v66);
    uint64_t v69 = off_26C2096F8;
    long long v70 = 0u;
    long long v71 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v69);
    uint64_t v72 = off_26C2096F8;
    long long v73 = 0u;
    long long v74 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v72);
    uint64_t v75 = off_26C2096F8;
    long long v76 = 0u;
    long long v77 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
    uint64_t v78 = off_26C2096F8;
    long long v79 = 0u;
    long long v80 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
    v37 -= v11;
  }
  while (v27 > 0);
  if (v51)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, v53 + 160, 0, 2 * *(_DWORD *)(v53 + *(void *)(*(void *)v53 - 24) + 12), 0, *(_DWORD *)(v53 + 176));
    int v49 = *(_DWORD *)(v53 + *(void *)(*(void *)v53 - 24) + 12);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, v53 + 160, 2 * v49, v49, 0, *(_DWORD *)(v53 + 176));
    kaldi::CuMatrixBase<float>::AddMatMat(v51, v57, CblasNoTrans, (uint64_t)&v78, (const char *)0x6F, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(v51, v61, CblasNoTrans, (uint64_t)&v75, (const char *)0x6F, 1.0, 1.0);
    uint64_t v75 = off_26C2096F8;
    long long v76 = 0u;
    long long v77 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
    uint64_t v78 = off_26C2096F8;
    long long v79 = 0u;
    long long v80 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
  }
  uint64_t v81 = off_26C2096F8;
  long long v82 = 0u;
  long long v83 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81);
  uint64_t v84 = off_26C2096F8;
  long long v85 = 0u;
  long long v86 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
  int v87 = off_26C2096F8;
  long long v88 = 0u;
  long long v89 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
  uint64_t v90 = off_26C2096F8;
  long long v91 = 0u;
  long long v92 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90).n128_u64[0];
  return result;
}

void sub_20CE29E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void (**a49)(),long long a50,long long a51,void (**a52)(),long long a53,long long a54,void (**a55)(),long long a56,long long a57,void (**a58)(),long long a59,long long a60,void (**a61)(),long long a62,long long a63)
{
  a49 = off_26C2096F8;
  a50 = 0u;
  a51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a49);
  a52 = off_26C2096F8;
  a53 = 0u;
  a54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a52);
  a55 = off_26C2096F8;
  a56 = 0u;
  a57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a55);
  a58 = off_26C2096F8;
  a59 = 0u;
  a60 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a58);
  a61 = off_26C2096F8;
  a62 = 0u;
  a63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a61);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers(uint64_t *this)
{
  if (!*((unsigned char *)this + 337))
  {
    uint64_t v1 = this;
    std::vector<kaldi::CuMatrix<float>>::resize(this + 64, *((int *)this + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 67, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 70, *((int *)v1 + 20));
    this = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 73, *((int *)v1 + 20));
    *((unsigned char *)v1 + 337) = 1;
  }
  return this;
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 763, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*((void *)this + 64) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 67) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 70) + 48 * a2, a3, (2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 73) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  *(void *)(*((void *)this + 64) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 67) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 70) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 73) + 48 * a2 + 32) = a4;
}

void sub_20CE2A4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::GatedRecurrentUnit::AccumGradients(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*((_DWORD *)this + 20) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x20E, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *((_DWORD *)this + 24);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x212, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 532, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Accumulating gradients for batch id = ", 38);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(this);
  float v14 = *((float *)this + 15);
  *(_DWORD *)(*((void *)this + 77) + 4 * v9) = v8;
  uint64_t v15 = v9;
  uint64_t v16 = *((void *)this + 70);
  uint64_t v17 = 3 * v9;
  uint64_t v18 = *((void *)this + 67);
  uint64_t v19 = *((void *)this + 81) + 48 * v9;
  *(void *)(v19 + 32) = a4;
  *(void *)(*((void *)this + 84) + 48 * v9 + 32) = a4;
  *(void *)(*((void *)this + 87) + 48 * v9 + 32) = a4;
  *(void *)(*((void *)this + 90) + 32 * v9 + 24) = a4;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v19, 0, 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, *(_DWORD *)(v19 + 16));
  uint64_t v20 = *((void *)this + 81) + 48 * v9;
  int v21 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, v20, 2 * v21, v21, 0, *(_DWORD *)(v20 + 16));
  uint64_t v22 = v16 + 48 * v9;
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v45, v16 + 16 * v17, CblasTrans, a2, (const char *)0x6F, 1.0, v14);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v42, v18 + 16 * v17, CblasTrans, a2, (const char *)0x6F, 1.0, v14);
  uint64_t v23 = *((void *)this + 84);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, v22, v7, v8 - v7, 0, *(_DWORD *)(v22 + 16));
  uint64_t v24 = *((void *)this + 61) + 48 * (int)v15;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, v24, 0, v8 - v7, 0, *(_DWORD *)(v24 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v23 + 48 * (int)v15, (uint64_t)&v39, CblasTrans, (uint64_t)&v36, (const char *)0x6F, 1.0, v14);
  uint64_t v36 = off_26C2096F8;
  long long v37 = 0u;
  long long v38 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v36);
  int v39 = off_26C2096F8;
  long long v40 = 0u;
  long long v41 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v39);
  uint64_t v25 = *((void *)this + 87);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, v18 + 16 * v17, v7, v8 - v7, 0, *(_DWORD *)(v18 + 16 * v17 + 16));
  uint64_t v26 = *((void *)this + 55) + 48 * (int)v15;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, v26, 0, v8 - v7, 0, *(_DWORD *)(v26 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v25 + 48 * (int)v15, (uint64_t)&v39, CblasTrans, (uint64_t)&v36, (const char *)0x6F, 1.0, v14);
  uint64_t v36 = off_26C2096F8;
  long long v37 = 0u;
  long long v38 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v36);
  int v39 = off_26C2096F8;
  long long v40 = 0u;
  long long v41 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v39);
  kaldi::CuSubVector<float>::CuSubVector(&v39, *((void *)this + 90) + 32 * v15, 0, 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12), v27);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v39, v22, 1.0, v14, v28, v29, v30);
  int v31 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuSubVector<float>::CuSubVector(&v39, *((void *)this + 90) + 32 * v15, 2 * v31, v31, v32);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v39, v18 + 16 * v17, 1.0, v14, v33, v34, v35);
  uint64_t v42 = off_26C2096F8;
  long long v43 = 0u;
  long long v44 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v42);
  uint64_t v45 = off_26C2096F8;
  long long v46 = 0u;
  long long v47 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v45);
}

void sub_20CE2A9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(),long long a21,long long a22,void (**a23)(),long long a24,long long a25)
{
  a20 = off_26C2096F8;
  a21 = 0u;
  a22 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  a23 = off_26C2096F8;
  a24 = 0u;
  a25 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(kaldi::nnet1::GatedRecurrentUnit *this)
{
  if (!*((unsigned char *)this + 640))
  {
    int v2 = *((_DWORD *)this + 39);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 1;
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 81, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 84, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 87, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 90, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 93, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 96, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 99, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 102, (int)v4);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 81) + 48 * v5, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, 0);
        uint64_t v7 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
        kaldi::CuMatrix<float>::Resize(*((void *)this + 84) + 48 * v5, (2 * v7), v7, 0, 0);
        uint64_t v8 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
        kaldi::CuMatrix<float>::Resize(*((void *)this + 87) + 48 * v5, v8, v8, 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 90) + 32 * v5, (3 * *(_DWORD *)&v6[*(void *)(*(void *)this - 24)]), 0, v9, v10);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((void *)this + 93) + 48 * v5, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 1u, 0);
          uint64_t v11 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
          kaldi::CuMatrix<float>::Resize(*((void *)this + 96) + 48 * v5, (2 * v11), v11, 1u, 0);
          uint64_t v12 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
          kaldi::CuMatrix<float>::Resize(*((void *)this + 99) + 48 * v5, v12, v12, 1u, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 102) + 32 * v5, (3 * *(_DWORD *)&v6[*(void *)(*(void *)this - 24)]), 1u, v13, v14);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 93) + 48 * v5, v15, v16, v17, v18, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 96) + 48 * v5, v19, v20, v21, v22, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 99) + 48 * v5, v23, v24, v25, v26, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 102) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    *((unsigned char *)this + 640) = 1;
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 739, 2);
      int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Allocated memory for the gradients: ", 36);
      (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 240))(__p, this);
      if ((v31 & 0x80u) == 0) {
        uint64_t v28 = __p;
      }
      else {
        uint64_t v28 = (void **)__p[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v29 = v31;
      }
      else {
        uint64_t v29 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      if ((char)v31 < 0) {
        operator delete(__p[0]);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
    }
  }
}

void sub_20CE2AEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5 = *((float *)this + 14);
  float v6 = *((float *)this + 16);
  float v7 = *((float *)this + 17);
  *((void *)this + 24) = a2;
  *((void *)this + 30) = a2;
  *((void *)this + 36) = a2;
  *((void *)this + 41) = a2;
  uint64_t v8 = *(void *)this;
  int v9 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  if ((int)a3 >= 0) {
    unsigned int v10 = a3;
  }
  else {
    unsigned int v10 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  }
  if (v9 == 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  if ((int)v11 > v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x249, "batch_index <= opts_.num_subbatches", a5);
  }
  float v14 = (void *)((char *)this + 80);
  int v13 = *((_DWORD *)this + 20);
  uint64_t v15 = *((void *)this + 81) + 48 * (int)v11;
  *(void *)(v15 + 32) = a2;
  *(void *)(v14[74] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[77] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[80] + 32 * (int)v11 + 24) = a2;
  *(void *)(v14[83] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[86] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[89] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[92] + 32 * (int)v11 + 24) = a2;
  if (v11 == v13)
  {
    kaldi::CuMatrixBase<float>::SetZero(v15);
    kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 84) + 48 * (int)v11);
    kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 87) + 48 * (int)v11);
    kaldi::CuVectorBase<float>::SetZero(*((void *)this + 90) + 32 * (int)v11);
    uint64_t v8 = *(void *)this;
    if (*(int *)((char *)v14 + *(void *)(*(void *)this - 24)) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 81) + 48 * (int)v11, *((void *)this + 81) + v17, 111, a4, a5, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 84) + 48 * (int)v11, *((void *)this + 84) + v17, 111, v19, v20, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 87) + 48 * (int)v11, *((void *)this + 87) + v17, 111, v21, v22, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 90) + 32 * (int)v11, *((void *)this + 90) + v16, v23, v24, v25, 1.0, 1.0);
        ++v18;
        uint64_t v8 = *(void *)this;
        v17 += 48;
        v16 += 32;
      }
      while (v18 < *(int *)((char *)v14 + *(void *)(*(void *)this - 24)));
    }
    uint64_t v26 = (int *)*((void *)this + 77);
    v26[(int)v11] = 0;
    if ((int)v11 >= 1)
    {
      int v27 = 0;
      uint64_t v28 = v11;
      uint64_t v29 = v26;
      do
      {
        int v30 = *v29++;
        v27 += v30;
        v26[(int)v11] = v27;
        --v28;
      }
      while (v28);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v5 = v5 / (float)*(int *)(*((void *)this + 77) + 4 * (int)v11);
  }
  if (*((float *)this + 38) >= 0.0) {
    (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, uint64_t))(v8 + 320))(this, v11);
  }
  if (v6 != 0.0)
  {
    float v31 = -(float)(v5 * v6);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, a4, a5, v31 * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)this + 208, 111, v32, v33, v31 * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)this + 256, 111, v34, v35, v31 * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)this + 304, v36, v37, v38, v31, 1.0);
  }
  uint64_t v39 = *((void *)this + 81);
  if (v7 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v39 + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), v5, a3, a4, a5);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 208, *((void *)this + 84) + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), v5, v40, v41, v42);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 256, *((void *)this + 87) + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), v5, v43, v44, v45);
    uint64_t v39 = *((void *)this + 81);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v39 + 48 * (int)v11, 111, a4, a5, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, *((void *)this + 84) + 48 * (int)v11, 111, v46, v47, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, *((void *)this + 87) + 48 * (int)v11, 111, v48, v49, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, *((void *)this + 90) + 32 * (int)v11, v50, v51, v52, -(float)(v5 * *((float *)this + 152)), 1.0);
  float v53 = *((float *)this + 153);
  if (v53 > 0.0)
  {
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 160, 1, v53);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 208, 1, *((float *)this + 153));
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 256, 1, *((float *)this + 153));
    kaldi::CuVectorBase<float>::ApplyMaxNorm((uint64_t)this + 304, *((float *)this + 153), v54, v55, v56, v57);
  }
  uint64_t v58 = (unsigned char *)*((void *)this + 77);
  if (v11 == *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80))
  {
    int v59 = (unsigned char *)*((void *)this + 78);
    if (v58 != v59)
    {
      bzero(v58, ((v59 - v58 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v58[4 * (int)v11] = 0;
  }
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GatedRecurrentUnit::EnsureBuffers(kaldi::nnet1::GatedRecurrentUnit *this)
{
  if (!*((unsigned char *)this + 336))
  {
    unint64_t v2 = *((int *)this + 20);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 43, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 46, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 49, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 52, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 55, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 58, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 61, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 1) + v3, *((unsigned int *)this + 24), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 616), v2);
    *((unsigned char *)this + 336) = 1;
  }
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 640) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(void *result, int a2, float a3)
{
  uint64_t v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 640) = 0;
  return result;
}

void kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)this + 20) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x30E, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v7 = a2;
  int v8 = *((_DWORD *)this + 39);
  if (v8 == 1)
  {
    if (a2 > 0.0)
    {
      uint64_t v16 = a3;
      if (*((unsigned char *)this + 84)) {
        float v7 = (float)*(int *)(*((void *)this + 77) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 81) + 48 * a3, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 84) + 48 * v16, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 87) + 48 * v16, v7);
      uint64_t v18 = *((void *)this + 90) + 32 * v16;
      kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v7);
    }
  }
  else if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v9 = a3;
      uint64_t v10 = 3 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 81) + 48 * a3, *((void *)this + 93) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 84) + 16 * v10, *((void *)this + 96) + 16 * v10, v7);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 87) + 16 * v10, *((void *)this + 99) + 16 * v10, v7);
      uint64_t v14 = *((void *)this + 90) + 32 * v9;
      uint64_t v15 = *((void *)this + 102) + 32 * v9;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v14, v15, v7, v11, v12, v13);
    }
  }
  else if (a2 > 0.0 && v8 == 2)
  {
    uint64_t v17 = a3;
    if (*((unsigned char *)this + 84)) {
      float v7 = (float)*(int *)(*((void *)this + 77) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 81) + 48 * a3, (unsigned int *)(*((void *)this + 93) + 48 * a3), v7, a4, a5, a6);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 84) + 48 * v17, (unsigned int *)(*((void *)this + 96) + 48 * v17), v7, v19, v20, v21);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 87) + 48 * v17, (unsigned int *)(*((void *)this + 99) + 48 * v17), v7, v22, v23, v24);
    uint64_t v28 = *((void *)this + 90) + 32 * v17;
    uint64_t v29 = (_DWORD *)(*((void *)this + 102) + 32 * v17);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v28, v29, v25, v26, v27, v7);
  }
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
}

float kaldi::nnet1::GatedRecurrentUnit::Check(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v1 = *((_DWORD *)this + 45);
  unint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  int v3 = *((_DWORD *)v2 + 3);
  if (v1 != 3 * v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 812);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #rows = ", 22);
    float v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    float v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 44) != *((_DWORD *)v2 + 2))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 816);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #columns = ", 25);
    float v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    int v8 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " (same as input dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 57) != 2 * v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 820);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #rows = ", 31);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 56) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 824);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #columns = ", 34);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 69) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 828);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #rows = ", 37);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 68) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 832);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #columns = ", 40);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; expecting ", 12);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 80) != v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 836);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bias dim = ", 11);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; expecting ", 12);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 841);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 153) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 844);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  float result = *((float *)this + 38);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 847);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  return result;
}

unsigned int *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x35A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x360, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x361, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_26C209728;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = (void *)(a1 + 840);
  uint64_t v8 = *(void *)(a1 + 840);
  if (v8 == *(void *)(a1 + 848))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 840), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 864), *(int *)(a1 + 80));
    uint64_t v8 = *(void *)(a1 + 840);
  }
  kaldi::CuVector<float>::Resize(v8 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  uint64_t v13 = (_DWORD *)(*v7 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::HistoryStateSize(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
}

unsigned int *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x374, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x375, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x376, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x37E, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x37F, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x380, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_26C209728;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x385, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x386, "sequence_idx.size() == history_state_[batch_index].NumRows()", a5);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_26C209728;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 914, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v23[1] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v25);
}

void sub_20CE2C630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(kaldi::nnet1::GatedRecurrentUnit *this)
{
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 88))(this);
  for (uint64_t i = *((void *)this + 1); i != *((void *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
}

void sub_20CE2C7CC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40B7274482);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-gru.h", 93);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 888);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::GatedRecurrentUnit::Copy((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                            + *(void *)(*(void *)this - 32)));
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  uint64_t v6 = (void **)((char *)this + 864);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 840);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 816);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 792);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 768);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 744);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 720);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 696);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 672);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 648);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v5 = (void *)*((void *)this + 77);
  if (v5)
  {
    *((void *)this + 78) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 584);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 560);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 536);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 512);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 488);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 464);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuVector<float>::~CuVector((void *)this + 38);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 256);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

kaldi::nnet1::GatedRecurrentUnit *kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, const kaldi::nnet1::GatedRecurrentUnit *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 111) = off_26C2108C8;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 452) = *((_WORD *)v4 + 8);
  *((void *)this + 112) = v5;
  *((void *)this + 114) = 0;
  *((void *)this + 116) = 0;
  *((void *)this + 115) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 114, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 111) = off_26C20C940;
  *((void *)this + 117) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 959) = *(_OWORD *)(v4 + 71);
  *((_OWORD *)this + 59) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF210, (uint64_t)a2);
  *(void *)this = off_26C20BE68;
  *((void *)this + 111) = off_26C20C0D0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 208, (char *)a2 + 208, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 256, (char *)a2 + 256, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 304, (uint64_t)a2 + 304, v7, v8, v9);
  *((_WORD *)this + 168) = *((_WORD *)a2 + 168);
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 43, *((void *)a2 + 43), *((void *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 44) - *((void *)a2 + 43)) >> 4));
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 46, *((void *)a2 + 46), *((void *)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 47) - *((void *)a2 + 46)) >> 4));
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 49, *((void *)a2 + 49), *((void *)a2 + 50), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 50) - *((void *)a2 + 49)) >> 4));
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 52, *((void *)a2 + 52), *((void *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 53) - *((void *)a2 + 52)) >> 4));
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 55, *((void *)a2 + 55), *((void *)a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 56) - *((void *)a2 + 55)) >> 4));
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 58, *((void *)a2 + 58), *((void *)a2 + 59), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 59) - *((void *)a2 + 58)) >> 4));
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 61, *((void *)a2 + 61), *((void *)a2 + 62), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 62) - *((void *)a2 + 61)) >> 4));
  *((void *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 64, *((void *)a2 + 64), *((void *)a2 + 65), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 65) - *((void *)a2 + 64)) >> 4));
  *((void *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 67, *((void *)a2 + 67), *((void *)a2 + 68), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 68) - *((void *)a2 + 67)) >> 4));
  *((void *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 70, *((void *)a2 + 70), *((void *)a2 + 71), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 71) - *((void *)a2 + 70)) >> 4));
  *((void *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 73, *((void *)a2 + 73), *((void *)a2 + 74), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 74) - *((void *)a2 + 73)) >> 4));
  *((void *)this + 76) = *((void *)a2 + 76);
  *((void *)this + 77) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 78) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 77, *((const void **)a2 + 77), *((void *)a2 + 78), (uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 2);
  *((unsigned char *)this + 640) = *((unsigned char *)a2 + 640);
  *((void *)this + 81) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 81, *((void *)a2 + 81), *((void *)a2 + 82), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 82) - *((void *)a2 + 81)) >> 4));
  *((void *)this + 86) = 0;
  *((_OWORD *)this + 42) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 84, *((void *)a2 + 84), *((void *)a2 + 85), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 85) - *((void *)a2 + 84)) >> 4));
  *((void *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 87, *((void *)a2 + 87), *((void *)a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 88) - *((void *)a2 + 87)) >> 4));
  *((void *)this + 92) = 0;
  *((_OWORD *)this + 45) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 90, *((void *)a2 + 90), *((void *)a2 + 91), (uint64_t)(*((void *)a2 + 91) - *((void *)a2 + 90)) >> 5);
  *((void *)this + 95) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 93, *((void *)a2 + 93), *((void *)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 94) - *((void *)a2 + 93)) >> 4));
  *((void *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 96, *((void *)a2 + 96), *((void *)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 97) - *((void *)a2 + 96)) >> 4));
  *((void *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 99, *((void *)a2 + 99), *((void *)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 100) - *((void *)a2 + 99)) >> 4));
  *((void *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 102, *((void *)a2 + 102), *((void *)a2 + 103), (uint64_t)(*((void *)a2 + 103) - *((void *)a2 + 102)) >> 5);
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 105, *((void *)a2 + 105), *((void *)a2 + 106), (uint64_t)(*((void *)a2 + 106) - *((void *)a2 + 105)) >> 5);
  *((void *)this + 110) = 0;
  *((_OWORD *)this + 54) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 108, *((void *)a2 + 108), *((void *)a2 + 109), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 109) - *((void *)a2 + 108)) >> 4));
  return this;
}

void sub_20CE2D0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v33 - 96) = v28;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v30;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v31;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v24;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v29;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  uint64_t v35 = *a11;
  if (*a11)
  {
    *((void *)v25 + 78) = v35;
    operator delete(v35);
  }
  *(void *)(v33 - 96) = v32;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  kaldi::CuVector<float>::~CuVector(a22);
  kaldi::CuMatrix<float>::~CuMatrix(a23);
  kaldi::CuMatrix<float>::~CuMatrix(a24);
  kaldi::CuMatrix<float>::~CuMatrix(*(void *)(v33 - 112));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v25, (uint64_t *)&off_26C1FF210);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(*(kaldi::nnet1::UpdatableComponent **)(v33 - 104));
  _Unwind_Resume(a1);
}

void sub_20CE2D254()
{
}

void sub_20CE2D25C()
{
}

void sub_20CE2D264()
{
}

void sub_20CE2D26C()
{
}

void sub_20CE2D274()
{
}

void sub_20CE2D27C()
{
}

void sub_20CE2D284()
{
}

void sub_20CE2D28C()
{
}

void sub_20CE2D294()
{
}

void sub_20CE2D29C()
{
}

void sub_20CE2D2A4()
{
}

void sub_20CE2D2AC()
{
}

void sub_20CE2D2B4()
{
}

void sub_20CE2D2BC()
{
}

void sub_20CE2D2C4()
{
}

void sub_20CE2D2CC()
{
}

void sub_20CE2D2D4()
{
}

void sub_20CE2D2DC()
{
}

void sub_20CE2D2E4()
{
}

void sub_20CE2D2EC()
{
}

void sub_20CE2D2F4()
{
}

void sub_20CE2D2FC()
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_20CE2D5B4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x210559500](a1 + 128);
  return a1;
}

void *std::vector<std::vector<double>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20CE2D7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((_DWORD *)i + 10) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    void *v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_20CE2DAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

{
  unint64_t v2;
  unint64_t v3;
  char v5;

  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      BOOL v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20CE2E334(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::LayerNorm(kaldi::nnet1::LayerNorm *this, const kaldi::nnet1::LayerNorm *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_26C210988;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 7) = off_26C2111C8;
  *((void *)this + 8) = 0;
  uint64_t v7 = (char *)this + 88;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 11) = off_26C2111C8;
  *((void *)this + 12) = 0;
  kaldi::CuVector<float>::operator=((uint64_t)this + 56, (uint64_t)a2 + 56, a3, a4, a5);
  kaldi::CuVector<float>::operator=((uint64_t)v7, (uint64_t)a2 + 88, v8, v9, v10);
  return this;
}

void sub_20CE2E4E4(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::LayerNorm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", (const char *)0x1A, "in.NumCols() == input_dim_", a5);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  long long v47 = off_26C2111C8;
  uint64_t v48 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v47, v8, 0, a4, a5);
  if (*(int *)(a2 + 20) >= 1)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v11;
      unsigned int v13 = *(_DWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v43 = &off_26C209728;
      uint64_t v44 = v12;
      uint64_t v46 = v14;
      uint64_t v45 = v13;
      double v15 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v43);
      if (v11 >= v49) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v10);
      }
      *(float *)(v48 + 4 * v11++) = *(float *)&v15 / (float)(int)v45;
    }
    while ((uint64_t)v11 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)&v47, v16, v17, v18, -1.0, 1.0);
  uint64_t v19 = *(unsigned int *)(a2 + 20);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v43 = (void (**)())off_26C2111C8;
  uint64_t v44 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v43, v19, 0, v20, v21);
  if (*(int *)(a2 + 20) >= 1)
  {
    unint64_t v25 = 0;
    do
    {
      if (v25 >= *(unsigned int *)(a3 + 20)) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
      }
      unsigned int v26 = *(_DWORD *)(a3 + 16);
      uint64_t v27 = *(void *)(a3 + 32);
      v42[1] = *(void *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * (int)v25;
      v42[0] = &off_26C209728;
      v42[2] = v26;
      v42[3] = v27;
      kaldi::CuVector<float>::CuVector(v40);
      kaldi::CuVectorBase<float>::MulElements((uint64_t)v40, (uint64_t)v42, v28, v29, v30);
      double v32 = kaldi::CuVectorBase<float>::Sum((uint64_t)v40);
      if (v25 >= v45) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v31);
      }
      *(float *)(v44 + 4 * v25) = 1.0
                                / (float)(*(float *)(a1 + 48)
                                        + sqrtf(*(float *)&v32 / (float)(v41 - *(unsigned __int8 *)(a1 + 52))));
      kaldi::CuVector<float>::~CuVector(v40);
      ++v25;
    }
    while ((uint64_t)v25 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)&v43, v22, v23, v24);
  kaldi::CuMatrixBase<float>::MulColsVec(a3, a1 + 56, v33, v34, v35);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v36, v37, v38, 1.0, 1.0);
  kaldi::CuVector<float>::~CuVector(&v43);
  return kaldi::CuVector<float>::~CuVector(&v47);
}

void sub_20CE2E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::Info(kaldi::nnet1::LayerNorm *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  kaldi::WriteToken(v28, 0, (kaldi *)"<Epsilon>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v28, 0, (kaldi *)"<UnbiasedVar>", v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v28, 0, (kaldi *)"<Gamma>", v6, v7);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 14, v8, v9, v10, v11);
  if ((v26 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v13 = v26;
  }
  else {
    uint64_t v13 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, v13);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  kaldi::WriteToken(v28, 0, (kaldi *)"<Beta>", v14, v15);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v16, v17, v18, v19);
  if ((v26 & 0x80u) == 0) {
    uint64_t v20 = &__p;
  }
  else {
    uint64_t v20 = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v21 = v26;
  }
  else {
    uint64_t v21 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v20, v21);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  v27[0] = *MEMORY[0x263F8C2B8];
  uint64_t v22 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v28[0] = v22;
  v28[1] = MEMORY[0x263F8C318] + 16;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210559500](&v30);
}

void sub_20CE2EAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", 64, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Reading LayerNorm component", 27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
  }
  long long __p = 0uLL;
  uint64_t v31 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_61;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v6, v7);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      break;
    }
    uint64_t v11 = *((void *)&__p + 1);
    if (*((void *)&__p + 1) == 9
      && (*(void *)__p == 0x6E6F6C697370453CLL ? (BOOL v12 = *(unsigned char *)(__p + 8) == 62) : (BOOL v12 = 0), v12))
    {
LABEL_35:
      kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v8, v7);
    }
    else if (*((void *)&__p + 1) == 13)
    {
      if (*(void *)__p != 0x65736169626E553CLL || *(void *)(__p + 5) != 0x3E72615664657361)
      {
        uint64_t v11 = *((void *)&__p + 1);
        goto LABEL_23;
      }
LABEL_53:
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 52), v8, v7);
    }
    else
    {
LABEL_23:
      if (v11 == 7)
      {
        BOOL v14 = *(_DWORD *)__p == 1835091772 && *(_DWORD *)(__p + 3) == 1046572397;
        uint64_t v15 = a1 + 56;
        if (v14) {
          goto LABEL_52;
        }
        uint64_t v11 = *((void *)&__p + 1);
      }
      if (v11 != 6) {
        goto LABEL_54;
      }
      BOOL v16 = *(_DWORD *)__p == 1952793148 && *(_WORD *)(__p + 4) == 15969;
      uint64_t v15 = a1 + 88;
      if (!v16)
      {
        uint64_t v11 = *((void *)&__p + 1);
LABEL_54:
        if (v11 == 12)
        {
          uint64_t v9 = (long long *)__p;
          goto LABEL_56;
        }
LABEL_69:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", 80);
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unrecognized token ", 19);
        if (v31 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        if (v31 >= 0) {
          uint64_t v27 = HIBYTE(v31);
        }
        else {
          uint64_t v27 = *((void *)&__p + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
LABEL_52:
      kaldi::CuVector<float>::Read(v15, a2, a3, v8, v7);
    }
  }
  uint64_t v9 = &__p;
  switch(HIBYTE(v31))
  {
    case 6:
      goto LABEL_47;
    case 7:
      goto LABEL_42;
    case 9:
      if ((void)__p != 0x6E6F6C697370453CLL || BYTE8(__p) != 62) {
        goto LABEL_69;
      }
      goto LABEL_35;
    case 0xC:
      goto LABEL_56;
    case 0xD:
      if ((void)__p == 0x65736169626E553CLL && *(void *)((char *)&__p + 5) == 0x3E72615664657361) {
        goto LABEL_53;
      }
      if (HIBYTE(v31) == 6) {
        goto LABEL_47;
      }
      if (HIBYTE(v31) == 7)
      {
LABEL_42:
        BOOL v18 = __p == 1835091772 && *(_DWORD *)((char *)&__p + 3) == 1046572397;
        uint64_t v15 = a1 + 56;
        if (!v18)
        {
          if (HIBYTE(v31) != 6) {
            goto LABEL_69;
          }
LABEL_47:
          BOOL v19 = __p == 1952793148 && WORD2(__p) == 15969;
          uint64_t v15 = a1 + 88;
          if (!v19) {
            goto LABEL_69;
          }
        }
        goto LABEL_52;
      }
      if (HIBYTE(v31) != 12) {
        goto LABEL_69;
      }
      uint64_t v9 = &__p;
LABEL_56:
      uint64_t v20 = *(void *)v9;
      int v21 = *((_DWORD *)v9 + 2);
      if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829) {
        goto LABEL_69;
      }
LABEL_61:
      int v23 = *(_DWORD *)(a1 + 104);
      if (v23 != *(_DWORD *)(a1 + 72))
      {
        uint64_t v28 = "beta_.Dim() == gamma_.Dim()";
        uint64_t v29 = 84;
        goto LABEL_79;
      }
      int v24 = *(_DWORD *)(a1 + 8);
      if (v24 != *(_DWORD *)(a1 + 12))
      {
        uint64_t v28 = "input_dim_ == output_dim_";
        uint64_t v29 = 85;
        goto LABEL_79;
      }
      if (v23 != v24)
      {
        uint64_t v28 = "beta_.Dim() == output_dim_";
        uint64_t v29 = 86;
LABEL_79:
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", (const char *)v29, v28, v7);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__p);
      }
      return;
    default:
      goto LABEL_69;
  }
}

void sub_20CE2EF30(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::LayerNorm::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<Epsilon>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UnbiasedVar>", v8, v9);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 52));
  kaldi::WriteToken(a2, a3, (kaldi *)"<Gamma>", v10, v11);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 56), a2, (int)a3, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Beta>", v14, v15);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, (int)a3, v16, v17);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v18, v19);
}

void kaldi::nnet1::LayerNorm::~LayerNorm(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm::~LayerNorm(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_26C210988;
  uint64_t v2 = (void *)((char *)this + 56);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(this);
}

void kaldi::nnet1::LayerNorm::Copy(kaldi::nnet1::LayerNorm *this)
{
}

void sub_20CE2F0D4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1081C40D558B94DLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::GetType(kaldi::nnet1::LayerNorm *this)
{
  return 290;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v4);
  uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v4);
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF130, a2);
  *(void *)a1 = off_26C209FF8;
  *(void *)(a1 + 848) = off_26C20A2E8;
  *(void *)(a1 + 160) = &unk_26C20A188;
  *(void *)(a1 + 168) = &unk_26C20A1B0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = 259;
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = 260;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = 262;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = 265;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE3019C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,kaldi::nnet1::UpdatableComponent *a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  MEMORY[0x2105595E0](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v34);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  uint64_t v36 = *a15;
  if (*a15)
  {
    *((void *)v33 + 64) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *a23;
  if (*a23)
  {
    *((void *)v33 + 61) = v37;
    operator delete(v37);
  }
  a32 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  uint64_t v38 = *((void *)v33 + 27);
  *((void *)v33 + 27) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  uint64_t v39 = *((void *)v33 + 25);
  *((void *)v33 + 25) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a31, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v33, (uint64_t *)&off_26C1FF130);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v4);
  uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v4);
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF150, a2);
  *(void *)a1 = off_26C20A418;
  *(void *)(a1 + 848) = off_26C20A708;
  *(void *)(a1 + 160) = &unk_26C20A5A8;
  *(void *)(a1 + 168) = &unk_26C20A5D0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = 259;
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = 260;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = 262;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = 265;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE310C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,kaldi::nnet1::UpdatableComponent *a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  MEMORY[0x2105595E0](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v34);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  uint64_t v36 = *a15;
  if (*a15)
  {
    *((void *)v33 + 64) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *a23;
  if (*a23)
  {
    *((void *)v33 + 61) = v37;
    operator delete(v37);
  }
  a32 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  uint64_t v38 = *((void *)v33 + 27);
  *((void *)v33 + 27) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  uint64_t v39 = *((void *)v33 + 25);
  *((void *)v33 + 25) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a31, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v33, (uint64_t *)&off_26C1FF150);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a22);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 904) = xmmword_20D6073D0;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)&off_26C1FF110);
  *(void *)uint64_t v4 = off_26C209BD8;
  *(void *)(v4 + 848) = off_26C209EC8;
  *(void *)(v4 + 160) = &unk_26C209D68;
  *(void *)(v4 + 168) = &unk_26C209D90;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_20CE315B0(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v4);
  uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v4);
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF110, a2);
  *(void *)a1 = off_26C209BD8;
  *(void *)(a1 + 848) = off_26C209EC8;
  *(void *)(a1 + 160) = &unk_26C209D68;
  *(void *)(a1 + 168) = &unk_26C209D90;
  int v7 = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  LOBYTE(v7) = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  uint64_t v10 = *(void *)(a2 + 184);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  uint64_t v11 = *(void *)(a2 + 192);
  if (v11) {
    kaldi::NewCuSubOrMat<float>(v11, 0);
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v12 = *(void *)(a2 + 216);
  if (v12) {
    kaldi::NewCuSubOrMat<float>(v12, 0);
  }
  uint64_t v13 = *(void *)(a2 + 232);
  if (v13) {
    kaldi::NewCuSubOrMat<float>(v13, 0);
  }
  uint64_t v14 = *(void *)(a1 + 544);
  uint64_t v15 = *(void *)(a1 + 536);
  uint64_t v16 = (v14 - v15) >> 3;
  if (v16 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v24 = 162;
    goto LABEL_41;
  }
  if (v16 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v24 = 163;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v16 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v24 = 165;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v16 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v24 = 168;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v24, v23, v9);
  }
  if (v14 != v15)
  {
    unint64_t v17 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v17))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v17))
      {
        uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v19, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v17))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v17);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v17))
      {
        uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v20, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v17))
      {
        uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v21, 0);
      }
      ++v17;
    }
    while (v17 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE32294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::nnet1::UpdatableComponent *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v29);
  a28 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  uint64_t v31 = *a14;
  if (*a14)
  {
    *((void *)v28 + 64) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *a15;
  if (*a15)
  {
    *((void *)v28 + 61) = v32;
    operator delete(v32);
  }
  a28 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  uint64_t v33 = *((void *)v28 + 29);
  *((void *)v28 + 29) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  }
  uint64_t v34 = *((void *)v28 + 27);
  *((void *)v28 + 27) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  }
  uint64_t v35 = *((void *)v28 + 25);
  *((void *)v28 + 25) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
  }
  uint64_t v36 = *((void *)v28 + 24);
  *((void *)v28 + 24) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  }
  uint64_t v37 = *a27;
  *a27 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a19);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v28, (uint64_t *)&off_26C1FF110);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a21);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = &unk_26C209D68;
  *(void *)(a1 + 168) = &unk_26C209D90;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v12 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v12 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 168);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_20CE32B30(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_20CE32BCC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_20CE32C54(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v72 = -1;
  int v73 = v4;
  int v70 = 0x40000000;
  int v71 = -1073741824;
  int v68 = -1073741824;
  int v69 = 1036831949;
  int v67 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v65);
  memset(v64, 0, sizeof(v64));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v5, v6);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      uint64_t v9 = v64;
      switch(HIBYTE(v64[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v10 = v64[0] == 0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 472);
          if (v10) {
            goto LABEL_202;
          }
          BOOL v12 = v64[0] == 0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (v12) {
            goto LABEL_202;
          }
          BOOL v13 = v64[0] == 0x6C6C654378614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 476);
          if (v13) {
            goto LABEL_202;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v64[0] == 0x6C6C65436D754E3CLL && LOWORD(v64[1]) == 15987) {
            goto LABEL_205;
          }
          if (v64[0] != 0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v64[0] == 0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v64[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v64[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v33 = v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v64[0] == 0x6E6569646172473CLL && v64[1] == 0x7079546D726F4E74 && LOWORD(v64[2]) == 15973) {
            goto LABEL_204;
          }
          if (v64[0] == 0x4374757074754F3CLL && v64[1] == 0x65756C61566C6C65 && LOWORD(v64[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v64[0] != 0x47746567726F463CLL || v64[1] != 0x4D73616942657461 || LODWORD(v64[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v64[0] != 0x47746567726F463CLL
            || v64[1] != 0x5273616942657461
            || *(void *)((char *)&v64[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v22 = v64[0] == 0x7463656A6F72503CLL
             && v64[1] == 0x6E7261654C6E6F69
             && v64[2] == 0x66656F4365746152
             && v65.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v14 = v64[1];
    switch(v64[1])
    {
      case 9:
        BOOL v15 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 472);
        if (!v15)
        {
          BOOL v16 = *(void *)v64[0] == 0x6461724778614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (!v16) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v64[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v64[0] + 8) == 15987)
        {
LABEL_205:
          uint64_t v56 = &v73;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v56, v7, v8);
          break;
        }
        if (*(void *)v64[0] != 0x61654D736169423CLL || *(_WORD *)(v64[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v11 = &v71;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v11, v7, v8);
        break;
      case 0xBLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)(v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v11 = &v70;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)(v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v11 = &v69;
        goto LABEL_202;
      case 0xFLL:
        BOOL v33 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)(v64[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v11 = (int *)(a1 + 464);
        if (!v33) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v64[0] == 0x6E6569646172473CLL
          && *(void *)(v64[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v64[0] + 16) == 15973)
        {
LABEL_204:
          uint64_t v46 = &v65;
          goto LABEL_150;
        }
        if (v64[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v37 = *(void *)v64[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 476);
        if (v37) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v14 = v64[1];
LABEL_121:
        if (v14 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v64[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v64[0] + 8) == 1046766949)
        {
LABEL_206:
          uint64_t v56 = &v72;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v14 = v64[1];
LABEL_127:
        if (v14 == 8)
        {
          if (*(void *)v64[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v14 = v64[1];
        }
        if (v14 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v64[0] != 0x4374757074754F3CLL
          || *(void *)(v64[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v64[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v14 = v64[1];
LABEL_139:
          if (v14 != 19) {
            goto LABEL_209;
          }
          uint64_t v9 = (uint64_t *)v64[0];
LABEL_141:
          uint64_t v41 = *v9;
          uint64_t v42 = v9[1];
          uint64_t v43 = *(uint64_t *)((char *)v9 + 11);
          BOOL v44 = v41 == 0x61725474696E493CLL && v42 == 0x79546D726F66736ELL;
          if (!v44 || v43 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
              uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Invalid token ", 14);
              if (v64[2] >= 0) {
                uint64_t v58 = v64;
              }
              else {
                uint64_t v58 = (void *)v64[0];
              }
              if (v64[2] >= 0) {
                uint64_t v59 = HIBYTE(v64[2]);
              }
              else {
                uint64_t v59 = v64[1];
              }
              uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(a1, v73);
          }
          uint64_t v46 = &v66;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v46, v7, v8);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v64[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v11 = &v68;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x5273616942657461
          || *(void *)(v64[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v11 = &v67;
        goto LABEL_202;
      case 0x19:
        BOOL v22 = *(void *)v64[0] == 0x7463656A6F72503CLL
           && *(void *)(v64[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v64[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v64[0] + 24) == 62;
LABEL_200:
        uint64_t v11 = (int *)(a1 + 468);
        if (!v22) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_20CE33954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    char v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_20CE34048()
{
}

void sub_20CE3405C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  unint64_t v10 = 0;
LABEL_2:
  if ((uint64_t)v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v10 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v10 * v26;
        if (v10 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, (uint64_t)&v23, 111, v11, v12);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_20CE34248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v38 = *(_DWORD *)(a1 + 176);
    int v39 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v38 < v39)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      uint64_t v43 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") should not be less than output dim (", 38);
      BOOL v44 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, ").");
    }
    else
    {
      *(unsigned char *)(a1 + 224) = v38 > v39;
      if (!*(void *)(a1 + 184)) {
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v47, v6, v7);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
      switch(HIBYTE(v48))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v47 != 0x6C6C65436D754E3CLL || WORD4(v47) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v27 = (void)v47 == 0x61526E7261654C3CLL && *(void *)((char *)&v47 + 7) == 0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 464);
          if (v27) {
            goto LABEL_127;
          }
          if (HIBYTE(v48) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v47 == 0x4374757074754F3CLL
            && *((void *)&v47 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v48 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v48) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v48) != 18) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v47 == 0x6E6569646172473CLL && *((void *)&v47 + 1) == 0x7079546D726F4E74;
          if (!v25 || (unsigned __int16)v48 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v48) != 25) {
            goto LABEL_138;
          }
          BOOL v22 = (void)v47 == 0x7463656A6F72503CLL
             && *((void *)&v47 + 1) == 0x6E7261654C6E6F69
             && v48 == 0x66656F4365746152
             && v49 == 62;
          uint64_t v14 = (float *)(a1 + 468);
          if (v22) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v48) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v28 = (void)v47 == 0x6D726F4E78614D3CLL && BYTE8(v47) == 62;
          uint64_t v14 = (float *)(a1 + 472);
          if (v28) {
            goto LABEL_127;
          }
          if (HIBYTE(v48) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v48) != 9) {
            goto LABEL_138;
          }
          BOOL v29 = (void)v47 == 0x6C6C654378614D3CLL && BYTE8(v47) == 62;
          uint64_t v14 = (float *)(a1 + 476);
          if (!v29) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v11 = *((void *)&v47 + 1);
    if (*((void *)&v47 + 1) == 10
      && (*(void *)v47 == 0x6C6C65436D754E3CLL ? (BOOL v12 = *(unsigned __int16 *)(v47 + 8) == 15987) : (BOOL v12 = 0), v12))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v8, v9);
    }
    else
    {
      if (*((void *)&v47 + 1) == 15)
      {
        BOOL v13 = *(void *)v47 == 0x61526E7261654C3CLL && *(void *)(v47 + 7) == 0x3E66656F43657461;
        uint64_t v14 = (float *)(a1 + 464);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v47 + 1);
      }
      if (v11 == 25)
      {
        BOOL v17 = *(void *)v47 == 0x7463656A6F72503CLL
           && *(void *)(v47 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v47 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v47 + 24) == 62;
        uint64_t v14 = (float *)(a1 + 468);
        if (v17) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v47 + 1);
      }
      if (v11 != 9) {
        goto LABEL_47;
      }
      BOOL v18 = *(void *)v47 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v47 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 472);
      if (v18) {
        goto LABEL_127;
      }
      uint64_t v11 = *((void *)&v47 + 1);
      if (*((void *)&v47 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v19 = *(void *)v47 == 0x6C6C654378614D3CLL && *(unsigned char *)(v47 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 476);
      if (v19) {
        goto LABEL_127;
      }
      if ((v48 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v48) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v48) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v47 != 0x3E706565506F4E3CLL)
        {
          if ((v48 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v11 = *((void *)&v47 + 1);
          if (v11 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v47 == 0x4374757074754F3CLL
            && *(void *)(v47 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v47 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v11 = *((void *)&v47 + 1);
          if (*((void *)&v47 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v47 == 0x6E6569646172473CLL
            && *(void *)(v47 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v47 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v46 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v46) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v48 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v48) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v34 = &v47;
          }
          else
          {
LABEL_120:
            if (v11 != 9) {
              goto LABEL_138;
            }
            uint64_t v34 = (long long *)v47;
          }
          uint64_t v35 = *(void *)v34;
          int v36 = *((unsigned __int8 *)v34 + 8);
          BOOL v37 = v35 == 0x6461724778614D3CLL && v36 == 62;
          uint64_t v14 = (float *)(a1 + 152);
          if (!v37)
          {
LABEL_138:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v48 >= 0) {
              uint64_t v41 = &v47;
            }
            else {
              uint64_t v41 = (long long *)v47;
            }
            if (v48 >= 0) {
              uint64_t v42 = HIBYTE(v48);
            }
            else {
              uint64_t v42 = *((void *)&v47 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v14, v8, v9);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v11 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v47 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_20CE35114()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  }
  return result;
}

void sub_20CE35304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v14, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  int v2 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  int v3 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v2;
  int v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  int v5 = v3 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v4;
  uint64_t v6 = (v5 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    uint64_t v6 = (v6
                      + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)
                      * v7);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    return (v6
                        + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)
                        * v8);
  }
  return v6;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v7;
  int v9 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (v8 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v12 = v11 * v9;
  uint64_t v42 = *(void **)a2;
  LODWORD(v43) = v8;
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v13, v14, v15, v16);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v17 = v12 + v8;
  if ((v12 + v8) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  uint64_t v42 = (void *)(*(void *)a2 + 4 * v8);
  LODWORD(v43) = v12;
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v18, v19, v20, v21);
  if (a1[208])
  {
    int v22 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v22;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v24 = v23 + v17;
    if ((v23 + v17) > *(_DWORD *)(a2 + 8)) {
      goto LABEL_11;
    }
    uint64_t v42 = (void *)(*(void *)a2 + 4 * v17);
    LODWORD(v43) = v23;
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v25, v26, v27, v28);
    int v17 = v24;
  }
  int v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if ((v29 + v17) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  uint64_t v42 = (void *)(*(void *)a2 + 4 * v17);
  LODWORD(v43) = v29;
  uint64_t v30 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  uint64_t result = kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v42, v31, v32, v33);
  if (!a1[224]) {
    return result;
  }
  int v35 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v17;
  int v36 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
  int v37 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16) * v36;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if ((v37 + v35) > *(_DWORD *)(a2 + 8)) {
LABEL_11:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
  uint64_t v42 = (void *)(*(void *)a2 + 4 * v35);
  LODWORD(v43) = v37;
  uint64_t v38 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v38, v39, v40, v41);
}

_DWORD *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams((unsigned char *)a1 + *(void *)(*a1 - 200), a2);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(unsigned char *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 208))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x222, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v6;
  int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v9 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  int v12 = v9 * v8;
  uint64_t v27 = *(char **)a2;
  LODWORD(v28) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v10, &v27);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v14 = v12 + v7;
  if ((v12 + v7) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  uint64_t v27 = (char *)(*(void *)a2 + 4 * v7);
  LODWORD(v28) = v12;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v15;
    uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if ((v16 + v14) > *(_DWORD *)(a2 + 8)) {
      goto LABEL_12;
    }
    uint64_t v27 = (char *)(*(void *)a2 + 4 * v14);
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  uint64_t v18 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((v21 + v14) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  uint64_t v27 = (char *)(*(void *)a2 + 4 * v14);
  LODWORD(v28) = v21;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27, v19, v20, v11);
  if (!a1[224]) {
    return result;
  }
  int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v14;
  int v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
  int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16) * v24;
  uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((v25 + v23) > *(_DWORD *)(a2 + 8)) {
LABEL_12:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v11);
  uint64_t v27 = (char *)(*(void *)a2 + 4 * v23);
  LODWORD(v28) = v25;
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v26, &v27);
}

int *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  uint64_t v2 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  float v7 = kaldi::CuMatrixBase<float>::Sum(v2, v3, v4, v5, v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  float v13 = v7 + kaldi::CuMatrixBase<float>::Sum(v8, v9, v10, v11, v12);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v19, v20, v21, v22, v23);
  }
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  double v25 = kaldi::CuVectorBase<float>::Sum(v24);
  return v13 + *(float *)&v25;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v33, v4, *(unsigned int *)(v5 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v33, 111, v7, v8, a2, 1.0);
  uint64_t v9 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrix<float>::Resize((uint64_t)v33, v9, *(unsigned int *)(v10 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v33, 111, v12, v13, a2, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrix<float>::Resize((uint64_t)v33, v14, *(unsigned int *)(v15 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v16, (uint64_t)v33, 111, v17, v18, a2, 1.0);
  }
  uint64_t v19 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
  memset(&v32[1], 0, 24);
  v32[0] = off_26C2111C8;
  kaldi::CuVector<float>::Resize((uint64_t)v32, v19, 1u, v20, v21);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v32);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec(v22, (uint64_t)v32, v23, v24, v25, a2, 1.0);
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    uint64_t v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrix<float>::Resize((uint64_t)v33, v26, *(unsigned int *)(v27 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
    uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v28, (uint64_t)v33, 111, v29, v30, a2, 1.0);
  }
  kaldi::CuVector<float>::~CuVector(v32);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
}

void sub_20CE35EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(void *a1, float a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams((uint64_t)a1 + *(void *)(*a1 - 232), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  int v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v14 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v13;
  int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v14 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v50 = *(char **)a4;
  LODWORD(v51) = v14;
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v47, v18, 111, v19, v20);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v50, (uint64_t)&v47);
  int v21 = v17 * v15;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v47);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  int v22 = v21 + v14;
  if ((v21 + v14) > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v47 = *(void *)a4 + 4 * v14;
  LODWORD(v48) = v21;
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v23, v24, v25, v26);
  if (a1[208])
  {
    int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v28 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v27;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v29 = v28 + v22;
    if ((v28 + v22) > *(_DWORD *)(a4 + 8)) {
      goto LABEL_14;
    }
    uint64_t v47 = *(void *)a4 + 4 * v22;
    LODWORD(v48) = v28;
    uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v30, v31, v32, v33);
    int v22 = v29;
  }
  int v34 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if ((v34 + v22) > *(_DWORD *)(a4 + 8)) {
LABEL_14:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  uint64_t v47 = *(void *)a4 + 4 * v22;
  LODWORD(v48) = v34;
  int v35 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v35, (uint64_t)&v47, v36, v37, v38);
  if (a1[224])
  {
    int v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v22;
    int v40 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    int v41 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v40;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    if ((v41 + v39) <= *(_DWORD *)(a4 + 8))
    {
      uint64_t v47 = *(void *)a4 + 4 * v39;
      LODWORD(v48) = v41;
      uint64_t v42 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v42, v43, v44, v45);
      return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_20CE36270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v50);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v50, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v3);
  if ((v49 & 0x80u) == 0) {
    unint64_t v4 = v48;
  }
  else {
    unint64_t v4 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v5 = v49;
  }
  else {
    uint64_t v5 = (uint64_t)v48[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v8);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = v46;
  }
  else {
    uint64_t v9 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = (uint64_t)v46[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  int v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v45 & 0x80u) == 0) {
    uint64_t v18 = v44;
  }
  else {
    uint64_t v18 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v19 = v45;
  }
  else {
    uint64_t v19 = (uint64_t)v44[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuSubVector<float>::CuSubVector(&v39, v22, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v23);
  kaldi::nnet1::MomentStatistics<float>(&v39, v24, v25, v26, v27);
  if ((v43 & 0x80u) == 0) {
    int v28 = __p;
  }
  else {
    int v28 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v29 = v43;
  }
  else {
    uint64_t v29 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    uint64_t v32 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v33 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Projection weights:", 21);
    uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v35);
    uint64_t v36 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v37 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  std::stringbuf::str();
  v50[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v50 + *(void *)(v50[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v50[1] = MEMORY[0x263F8C318] + 16;
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v52);
}

void sub_20CE36AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    int v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0) {
          uint64_t v3 = v90;
        }
        else {
          uint64_t v3 = (void **)v90[0];
        }
        if ((v91 & 0x80u) == 0) {
          std::string::size_type v4 = v91;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v90[1];
        }
        uint64_t v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0) {
          uint64_t v7 = v88;
        }
        else {
          uint64_t v7 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v8 = v89;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v88[1];
        }
        uint64_t v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0) {
          uint64_t v11 = v86;
        }
        else {
          uint64_t v11 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v12 = v87;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v86[1];
        }
        int v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0) {
          uint64_t v15 = v84;
        }
        else {
          uint64_t v15 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v16 = v85;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v84[1];
        }
        int v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v19 = v82;
        }
        else {
          uint64_t v19 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v20 = v83;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v82[1];
        }
        int v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0) {
          uint64_t v24 = v80;
        }
        else {
          uint64_t v24 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v25 = v81;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v80[1];
        }
        uint64_t v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          int v28 = v78;
        }
        else {
          int v28 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v29 = v79;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v78[1];
        }
        uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0) {
          uint64_t v33 = v76;
        }
        else {
          uint64_t v33 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v34 = v77;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v76[1];
        }
        uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v37 = v74;
        }
        else {
          uint64_t v37 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v38 = v75;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v74[1];
        }
        int v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0) {
          uint64_t v46 = __p;
        }
        else {
          uint64_t v46 = (void **)__p[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v47 = v73;
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        uint64_t v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        int64_t v103 = v48->__r_.__value_.__r.__words[2];
        long long v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0) {
          uint64_t v50 = (const std::string::value_type *)&v102;
        }
        else {
          uint64_t v50 = (const std::string::value_type *)v102;
        }
        if (v103 >= 0) {
          std::string::size_type v51 = HIBYTE(v103);
        }
        else {
          std::string::size_type v51 = *((void *)&v102 + 1);
        }
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if ((char)v73 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v91 < 0) {
          operator delete(v90[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float v53 = &v100;
          }
          else {
            float v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          int64_t v103 = v55->__r_.__value_.__r.__words[2];
          long long v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            uint64_t v57 = (const std::string::value_type *)&v102;
          }
          else {
            uint64_t v57 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v58 = HIBYTE(v103);
          }
          else {
            std::string::size_type v58 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v100;
          }
          else {
            uint64_t v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          int64_t v103 = v62->__r_.__value_.__r.__words[2];
          long long v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            long long v64 = (const std::string::value_type *)&v102;
          }
          else {
            long long v64 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v65 = HIBYTE(v103);
          }
          else {
            std::string::size_type v65 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    std::string v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v67 = &v105;
    }
    else {
      int v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
    }
    int v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_20CE372D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      int v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      int v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      int v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      uint64_t v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        int v39 = __p;
      }
      else {
        int v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      unsigned __int8 v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        uint64_t v43 = (const std::string::value_type *)&v86;
      }
      else {
        uint64_t v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v84;
        }
        else {
          unsigned __int8 v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v89;
  }
  else {
    uint64_t v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_20CE37BB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE37DC4()
{
}

void sub_20CE37DCC()
{
}

void sub_20CE37DD4()
{
}

void sub_20CE37DDC()
{
}

void sub_20CE37DE4()
{
}

void sub_20CE37DEC()
{
}

void sub_20CE37DF4()
{
}

void sub_20CE37DFC()
{
}

void sub_20CE37E04()
{
}

void sub_20CE37E0C()
{
}

void sub_20CE37E14()
{
}

void sub_20CE37E1C()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      int v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      int v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      int v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v70;
        }
        else {
          uint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          unsigned __int8 v41 = (const std::string::value_type *)&v72;
        }
        else {
          unsigned __int8 v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_20CE383A8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE38574()
{
}

void sub_20CE3857C()
{
}

void sub_20CE38584()
{
}

void sub_20CE3858C()
{
}

void sub_20CE38594()
{
}

void sub_20CE3859C()
{
}

void sub_20CE385A4()
{
}

void sub_20CE385AC()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  int v81 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2BB, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
  }
  uint64_t v14 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, a4, v5, v14);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = a4;
  uint64_t v83 = a4;
  int v78 = a4;
  if (*(void *)(a1 + 112) == v16)
  {
    int v79 = 0;
  }
  else
  {
    int v18 = *(_DWORD *)(v16 + 32 * a4 + 16);
    if (v18 < 1)
    {
      int v79 = 0;
      uint64_t v17 = a4;
    }
    else
    {
      if (v18 != v5) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2C5, "boundary_[batch_index].Dim() == batch_size", v15);
      }
      uint64_t v17 = a4;
      uint64_t v19 = *(void *)(a1 + 128) + 48 * a4;
      *(void *)(v19 + 32) = v14;
      int v79 = 1;
      kaldi::CuMatrix<float>::Resize(v19, v6, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1u, 0);
    }
  }
  uint64_t v20 = *(void *)(a1 + 248) + 48 * v17;
  uint64_t v82 = *(void *)(a1 + 344) + 48 * v17;
  uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat(v20, a2, CblasNoTrans, v21, (const char *)0x70, 1.0, 0.0);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v20, v22, v23, v24, v25, 1.0, 1.0);
  if (v81 >= 1)
  {
    int v28 = v17;
    int v29 = 0;
    int v30 = 0;
    uint64_t v80 = a1 + 12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v20, v29, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v20, v29, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v20, v29, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      uint64_t v31 = *(void *)(a1 + 272) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v31, v29, v6, 0, *(_DWORD *)(v31 + 16));
      memset(v98, 0, sizeof(v98));
      std::string v97 = off_26C2096F8;
      memset(v96, 0, sizeof(v96));
      std::string v95 = off_26C2096F8;
      if (v30)
      {
        if (v79)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(a1 + 128) + 48 * (int)v83);
          uint64_t v32 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v32, 0, *(_DWORD *)(v32 + 20), 0, *(_DWORD *)(a1 + 176));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v33 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v33, v29 - v6, v6, 0, *(_DWORD *)(v33 + 16));
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v34);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v95, (uint64_t)&v93, (uint64_t)&v90, 1, v35);
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v36 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v36, 0, *(_DWORD *)(v36 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          int v28 = v83;
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v37);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v90, 1, v38);
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v41 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v41, v29 - v6, v6, 0, *(_DWORD *)(v41 + 16));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          int v28 = v83;
        }
      }
      else
      {
        int v28 = v83;
        uint64_t v39 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v39, 0, *(_DWORD *)(v39 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
        *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
        v98[0] = v94[0];
        v98[3] = v94[3];
        std::string v93 = off_26C2096F8;
        memset(v94, 0, sizeof(v94));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
        uint64_t v40 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
        v96[0] = v94[0];
        *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
        v96[3] = v94[3];
        std::string v93 = off_26C2096F8;
        memset(v94, 0, sizeof(v94));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, 0, *(_DWORD *)(v20 + 16));
      uint64_t v42 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v93, (uint64_t)&v97, CblasNoTrans, v42, (const char *)0x70, 1.0, 1.0);
      std::string v93 = off_26C2096F8;
      memset(v94, 0, sizeof(v94));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v46 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
        }
        unsigned int v48 = *(_DWORD *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 32);
        v94[0] = *(void *)(v46 + 8);
        std::string v93 = &off_26C209728;
        v94[1] = v48;
        v94[2] = v49;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v95, 111, (uint64_t)&v93, v47, 1.0, 1.0);
        uint64_t v50 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        }
        unsigned int v52 = *(_DWORD *)(v50 + 16);
        uint64_t v53 = *(void *)(v50 + 32);
        v94[0] = *(void *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        std::string v93 = &off_26C209728;
        v94[1] = v52;
        v94[2] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v105, (uint64_t)&v95, 111, (uint64_t)&v93, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v108, (uint64_t)&v108, v43, v44, v45);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v105, (uint64_t)&v105, v54, v55, v56);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v102, v57, v58, v59, v60);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v108, 111, (uint64_t)&v102, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v105, 111, (uint64_t)&v95, (const char *)0x6F, 1.0, 1.0);
      float v61 = *(float *)(a1 + 476);
      if (v61 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v99, v61);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v99, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v65 + 20) <= 2u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v66);
        }
        unsigned int v67 = *(_DWORD *)(v65 + 16);
        uint64_t v68 = *(void *)(v65 + 32);
        *(void *)&long long v91 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
        uint64_t v90 = &off_26C209728;
        *((void *)&v91 + 1) = v67;
        *(void *)&long long v92 = v68;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v93, (uint64_t)&v99, 111, (uint64_t)&v90, v66, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v93, (uint64_t)&v93, v62, v63, v64);
      uint64_t v69 = *(void *)(a1 + 296) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v69, v29, v6, 0, *(_DWORD *)(v69 + 16));
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v90, (uint64_t)&v99, v70, v71, v72);
      uint64_t v73 = *(void *)(a1 + 320) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v73, v29, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v87, (uint64_t)&v93, 111, (uint64_t)&v90, (const char *)0x6F, 1.0, 0.0);
      if (*(unsigned char *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        uint64_t v74 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v84, (uint64_t)&v87, CblasNoTrans, v74, (const char *)0x70, 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v84, (uint64_t)&v87, 111, v75, v76);
      }
      std::string v84 = off_26C2096F8;
      long long v85 = 0u;
      long long v86 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
      int64_t v87 = off_26C2096F8;
      long long v88 = 0u;
      long long v89 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
      uint64_t v90 = off_26C2096F8;
      long long v91 = 0u;
      long long v92 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90);
      std::string v93 = off_26C2096F8;
      memset(v94, 0, sizeof(v94));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      std::string v95 = off_26C2096F8;
      memset(v96, 0, sizeof(v96));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v95);
      std::string v97 = off_26C2096F8;
      memset(v98, 0, sizeof(v98));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v97);
      std::string v99 = off_26C2096F8;
      long long v100 = 0u;
      long long v101 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v99);
      long long v102 = off_26C2096F8;
      long long v103 = 0u;
      long long v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      std::string v105 = off_26C2096F8;
      long long v106 = 0u;
      long long v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      v108 = off_26C2096F8;
      long long v109 = 0u;
      long long v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      ++v30;
      v29 += v6;
    }
    while (v81 != v30);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v82, 111, v26, v27);
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, v78);
}

void sub_20CE39360(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_20CE39830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  int v13 = off_26C2096F8;
  long long v14 = 0u;
  long long v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  uint64_t v16 = off_26C2096F8;
  long long v17 = 0u;
  long long v18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
  uint64_t v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(void *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(void *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(void *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(void *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  int v13 = off_26C2096F8;
  long long v14 = 0u;
  long long v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  uint64_t v16 = off_26C2096F8;
  long long v17 = 0u;
  long long v18 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16).n128_u64[0];
  return result;
}

void sub_20CE39A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_26C2096F8;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = off_26C2096F8;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x320, "ropts_.num_sequences == 1", v6);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, 0, 1, v7);
  uint64_t v9 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 112) != v9)
  {
    int v10 = *(_DWORD *)(v9 + 16);
    if (v10 >= 1)
    {
      if (v10 != 1) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x325, "boundary_[0].Dim() == 1", v8);
      }
      uint64_t v11 = *(void *)(a1 + 128);
      *(void *)(v11 + 32) = v7;
      kaldi::CuMatrix<float>::Resize(v11, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
    }
  }
  uint64_t v12 = *(void *)(a1 + 248);
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v119 = 0;
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v118 = &off_26C209728;
  uint64_t v119 = v13;
  LODWORD(v120) = *(_DWORD *)(v12 + 16);
  uint64_t v121 = *(void *)(v12 + 32);
  uint64_t v14 = *(void *)(a1 + 344);
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v115 = 0;
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v114 = &off_26C209728;
  uint64_t v115 = v15;
  LODWORD(v116) = *(_DWORD *)(v14 + 16);
  uint64_t v117 = *(void *)(v14 + 32);
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v118, v16, CblasNoTrans, a2, v17, 1.0, 0.0);
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v118, v18, v19, v20, v21, 1.0, 1.0);
  unsigned int v23 = *(_DWORD *)(a1 + 176);
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  long long v110 = &off_26C209728;
  uint64_t v111 = 0;
  if (v23 > v120) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v22);
  }
  uint64_t v111 = v119;
  LODWORD(v112) = v23;
  uint64_t v113 = v121;
  kaldi::CuSubVector<float>::CuSubVector(v109, (uint64_t)&v118, v23, v23, v22);
  kaldi::CuSubVector<float>::CuSubVector(v108, (uint64_t)&v118, 3 * *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v24);
  uint64_t v26 = *(void *)(a1 + 272);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  uint64_t v27 = *(void *)(v26 + 8);
  long long v104 = &off_26C209728;
  uint64_t v105 = v27;
  LODWORD(v106) = *(_DWORD *)(v26 + 16);
  uint64_t v107 = *(void *)(v26 + 32);
  uint64_t v28 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v28 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
  }
  uint64_t v29 = *(void *)(v28 + 8);
  unsigned int v30 = *(_DWORD *)(v28 + 16);
  uint64_t v31 = *(void *)(v28 + 32);
  uint64_t v100 = v29;
  std::string v99 = &off_26C209728;
  uint64_t v101 = v30;
  uint64_t v102 = v31;
  kaldi::CuSubVector<float>::CuSubVector(v103, (uint64_t)&v99, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12), v25);
  uint64_t v33 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v33 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v32);
  }
  uint64_t v34 = *(void *)(v33 + 8);
  unsigned int v35 = *(_DWORD *)(v33 + 16);
  uint64_t v36 = *(void *)(v33 + 32);
  uint64_t v96 = v34;
  std::string v95 = &off_26C209728;
  uint64_t v97 = v35;
  unsigned int v37 = *(_DWORD *)(a1 + 176);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = v36;
  std::string v99 = &off_26C209728;
  if (v37 > v35) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v32);
  }
  uint64_t v100 = v34;
  LODWORD(v101) = v37;
  uint64_t v102 = v36;
  uint64_t v38 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v118, v38, CblasNoTrans, (uint64_t)v103, v39, 1.0, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (!*(_DWORD *)(v43 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v45);
    }
    unsigned int v46 = *(_DWORD *)(v43 + 16);
    uint64_t v47 = *(void *)(v43 + 32);
    uint64_t v96 = *(void *)(v43 + 8);
    std::string v95 = &off_26C209728;
    uint64_t v97 = v46;
    uint64_t v98 = v47;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v110, (uint64_t)&v99, (uint64_t)&v95, v44, v45, 1.0, 1.0);
    uint64_t v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (*(_DWORD *)(v48 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v50);
    }
    unsigned int v51 = *(_DWORD *)(v48 + 16);
    uint64_t v52 = *(void *)(v48 + 32);
    uint64_t v96 = *(void *)(v48 + 8) + 4 * *(int *)(v48 + 24);
    std::string v95 = &off_26C209728;
    uint64_t v97 = v51;
    uint64_t v98 = v52;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v109, (uint64_t)&v99, (uint64_t)&v95, v49, v50, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v110, (uint64_t)&v110, v40, v41, v42);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v109, (uint64_t)v109, v53, v54, v55);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v108);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v104, (uint64_t)&v110, (uint64_t)v108, v56, v57, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v104, (uint64_t)&v99, (uint64_t)v109, v58, v59, 1.0, 1.0);
  float v61 = *(float *)(a1 + 476);
  if (v61 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)&v104, v61);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v104, -*(float *)(a1 + 476));
  }
  kaldi::CuSubVector<float>::CuSubVector(&v95, (uint64_t)&v118, 2 * *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v60);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (*(_DWORD *)(v65 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
    }
    unsigned int v68 = *(_DWORD *)(v65 + 16);
    uint64_t v69 = *(void *)(v65 + 32);
    uint64_t v92 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
    long long v91 = &off_26C209728;
    uint64_t v93 = v68;
    uint64_t v94 = v69;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v95, (uint64_t)&v104, (uint64_t)&v91, v66, v67, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v95, (uint64_t)&v95, v62, v63, v64);
  uint64_t v70 = *(void *)(a1 + 296);
  uint64_t v93 = 0;
  uint64_t v71 = *(void *)(v70 + 8);
  long long v91 = &off_26C209728;
  uint64_t v92 = v71;
  LODWORD(v93) = *(_DWORD *)(v70 + 16);
  uint64_t v94 = *(void *)(v70 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v91, (uint64_t)&v104, v72, v73, v74);
  uint64_t v75 = *(void *)(a1 + 320);
  uint64_t v89 = 0;
  uint64_t v76 = *(void *)(v75 + 8);
  v88[0] = &off_26C209728;
  v88[1] = v76;
  LODWORD(v89) = *(_DWORD *)(v75 + 16);
  uint64_t v90 = *(void *)(v75 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v88, (uint64_t)&v95, (uint64_t)&v91, v77, v78, 1.0, 0.0);
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v82 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v114, v82, CblasNoTrans, (uint64_t)v88, v83, 1.0, 0.0);
  }
  else
  {
    kaldi::CuVectorBase<float>::CopyFromVec(&v114, (uint64_t)v88, v79, v80, v81);
  }
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a3, (uint64_t)&v114, v84, v85, v86);
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, 0);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 136), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  uint64_t v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  int v13 = (int)v10 / (int)v11;
  if ((int)v10 % (int)v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x380, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151);
  }
  if (v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x384, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v102 = a5;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(a1, a6, v10, v18);
  uint64_t v21 = a6;
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v23 = 3 * a6;
  uint64_t v24 = *(void *)(a1 + 440) + 16 * v23;
  uint64_t v25 = *(void *)(a1 + 368);
  uint64_t v105 = *(void *)(a1 + 416);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v103 = v24;
  if (*(void *)(a1 + 112) == v26 || (int v27 = *(_DWORD *)(v26 + 32 * v21 + 16), v27 < 1))
  {
    int v106 = 0;
  }
  else
  {
    if (v27 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x390, "boundary_[batch_index].Dim() == batch_size", v20);
    }
    uint64_t v28 = *(void *)(a1 + 128) + 48 * (int)v21;
    *(void *)(v28 + 32) = v18;
    int v106 = 1;
    kaldi::CuMatrix<float>::Resize(v28, v11, *(unsigned int *)(v24 + 16), 1u, 0);
  }
  uint64_t v29 = v22 + 16 * v23;
  uint64_t v30 = v25 + 16 * v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v30, a4, 111, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v151, v29, 0, *(_DWORD *)(v29 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v148, v29, 0, *(_DWORD *)(v29 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  uint64_t v31 = v103;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v139, v103, 0, *(_DWORD *)(v103 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v136, v31, 0, *(_DWORD *)(v31 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v133, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v139, (uint64_t)&v151, (uint64_t)&v142, v32, v33);
  int v34 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, v11, v34, 0, SDWORD2(v137));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v148, v11, v34, 0, SDWORD2(v149));
  uint64_t v35 = *(void *)(a1 + 272) + 48 * (int)v21;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, v35, 0, v34, 0, *(_DWORD *)(v35 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v127, (uint64_t)&v124, (uint64_t)&v121, v36, v37);
  uint64_t v121 = off_26C2096F8;
  long long v122 = 0u;
  long long v123 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v121);
  uint64_t v124 = off_26C2096F8;
  long long v125 = 0u;
  long long v126 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
  v127 = off_26C2096F8;
  long long v128 = 0u;
  long long v129 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, 0, v11, 0, SDWORD2(v137));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
  v127 = off_26C2096F8;
  long long v128 = 0u;
  long long v129 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  if (v106)
  {
    uint64_t v40 = *(void *)(a1 + 128) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
    int v41 = v13 - 1;
    int v42 = v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v136, v42, v11, 0, SDWORD2(v137));
      kaldi::CuSubVector<float>::CuSubVector(&v121, *(void *)(a1 + 104) + 32 * v21, v42, v11, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v127, (uint64_t)&v121, 0, v44);
      uint64_t v124 = off_26C2096F8;
      long long v125 = 0u;
      long long v126 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
      v42 += v11;
      --v41;
    }
    while (v41);
    v127 = off_26C2096F8;
    long long v128 = 0u;
    long long v129 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v133, (uint64_t)&v145, *(void *)(a1 + 296) + 48 * (int)v21, v38, v39);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v130, (uint64_t)&v142, (uint64_t)&v151, v45, v46);
  uint64_t v47 = v105 + 16 * v23;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(a1 + 296) + 48 * (int)v21, (uint64_t)&v145, v48, v49);
  int v50 = v13 - 1;
  int v104 = v13 - 1;
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v30, v50 * v11, v11, 0, *(_DWORD *)(v30 + 16));
    uint64_t v51 = *(void *)(a1 + 392) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v51, v50 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v124, (uint64_t)&v127, CblasNoTrans, v54, (const char *)0x6F, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v124, (uint64_t)&v127, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, (uint64_t)&v133, v50 * v11, v11, 0, SDWORD2(v134));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v121, (uint64_t)&v124, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v118, v47, v50 * v11, v11, 0, *(_DWORD *)(v47 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v118, (uint64_t)&v124, v58, v59, v60);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      }
      unsigned int v63 = *(_DWORD *)(v61 + 16);
      uint64_t v64 = *(void *)(v61 + 32);
      v117[0] = *(void *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      uint64_t v116 = &off_26C209728;
      v117[1] = v63;
      v117[2] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v121, 111, (uint64_t)&v116, v62, 1.0, 1.0);
    }
    if (v50 < v104)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v47, v11 + v11 * v50, v11, 0, *(_DWORD *)(v47 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, (uint64_t)&v148, v11 + v11 * v50, v11, 0, SDWORD2(v149));
      if (v106)
      {
        uint64_t v65 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, v65, 0, *(_DWORD *)(v65 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v112);
        kaldi::CuSubVector<float>::CuSubVector(&v110, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v66);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v110, 1, v67);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v113[1];
        v117[0] = v113[0];
        v117[3] = v113[3];
        uint64_t v68 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, v68, 0, *(_DWORD *)(v68 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v110);
        kaldi::CuSubVector<float>::CuSubVector(v109, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v69);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v110, (uint64_t)&v114, (uint64_t)v109, 1, v70);
        v115[0] = v111[0];
        *(_OWORD *)&v115[1] = *(_OWORD *)&v111[1];
        v115[3] = v111[3];
        long long v110 = off_26C2096F8;
        memset(v111, 0, sizeof(v111));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v110);
        uint64_t v112 = off_26C2096F8;
        memset(v113, 0, sizeof(v113));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v112);
      }
      if (*(unsigned char *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, (uint64_t)&v136, v11 + v11 * v50, v11, 0, SDWORD2(v137));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, (uint64_t)&v139, v11 + v11 * v50, v11, 0, SDWORD2(v140));
        if (v106)
        {
          uint64_t v71 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v109, v71, 0, *(_DWORD *)(v71 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v109);
          kaldi::CuSubVector<float>::CuSubVector(v108, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v72);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v109, (uint64_t)&v112, (uint64_t)v108, 1, v73);
          *(_OWORD *)&v113[1] = *(_OWORD *)&v109[2];
          v113[0] = v109[1];
          v113[3] = v109[4];
          uint64_t v74 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v108, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v108);
          kaldi::CuSubVector<float>::CuSubVector(v107, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v75);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v108, (uint64_t)&v110, (uint64_t)v107, 1, v76);
          v111[0] = v108[1];
          *(_OWORD *)&v111[1] = *(_OWORD *)&v108[2];
          v111[3] = v108[4];
          v108[0] = off_26C2096F8;
          memset(&v108[1], 0, 32);
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v108);
          v109[0] = off_26C2096F8;
          memset(&v109[1], 0, 32);
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v109);
        }
        uint64_t v77 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v77 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v78);
        }
        unsigned int v79 = *(_DWORD *)(v77 + 16);
        uint64_t v80 = *(void *)(v77 + 32);
        v109[1] = *(void *)(v77 + 8) + 4 * *(int *)(v77 + 24);
        v109[0] = &off_26C209728;
        v109[2] = v79;
        v109[3] = v80;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v112, 111, (uint64_t)v109, v78, 1.0, 1.0);
        uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v81 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v82);
        }
        unsigned int v83 = *(_DWORD *)(v81 + 16);
        uint64_t v84 = *(void *)(v81 + 32);
        v109[1] = *(void *)(v81 + 8);
        v109[0] = &off_26C209728;
        v109[2] = v83;
        v109[3] = v84;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v110, 111, (uint64_t)v109, v82, 1.0, 1.0);
        long long v110 = off_26C2096F8;
        memset(v111, 0, sizeof(v111));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v110);
        uint64_t v112 = off_26C2096F8;
        memset(v113, 0, sizeof(v113));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v112);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v118, (uint64_t)&v116, 111, (uint64_t)&v114, (const char *)0x6F, 1.0, 1.0);
      uint64_t v114 = off_26C2096F8;
      memset(v115, 0, sizeof(v115));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v139, v50 * v11, v11, 0, SDWORD2(v140));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v85, v86, v87);
    uint64_t v116 = off_26C2096F8;
    memset(v117, 0, sizeof(v117));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v130, v50 * v11, v11, 0, SDWORD2(v131));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v88, v89, v90);
    uint64_t v116 = off_26C2096F8;
    memset(v117, 0, sizeof(v117));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    if (v50 <= 0)
    {
      int v97 = v50 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v136, v50 * v11, v11, 0, SDWORD2(v137));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v91, v92, v93);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v103, v50 * v11, v11, 0, *(_DWORD *)(v103 + 16));
      if (v106)
      {
        uint64_t v94 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v94, 0, *(_DWORD *)(v94 + 20), 0, v117[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v114);
        kaldi::CuSubVector<float>::CuSubVector(&v112, *(void *)(a1 + 104) + 32 * v21, v50 * v11, v11, v95);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v112, 1, v96);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v115[1];
        v117[0] = v115[0];
        v117[3] = v115[3];
        uint64_t v114 = off_26C2096F8;
        memset(v115, 0, sizeof(v115));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      }
      int v97 = v50 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v30, (v50 - 1) * v11, v11, 0, *(_DWORD *)(v30 + 16));
      uint64_t v98 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v114, (uint64_t)&v116, CblasNoTrans, v98, (const char *)0x6F, 1.0, 1.0);
      uint64_t v114 = off_26C2096F8;
      memset(v115, 0, sizeof(v115));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    }
    uint64_t v118 = off_26C2096F8;
    long long v119 = 0u;
    long long v120 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v118);
    uint64_t v121 = off_26C2096F8;
    long long v122 = 0u;
    long long v123 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v121);
    uint64_t v124 = off_26C2096F8;
    long long v125 = 0u;
    long long v126 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
    v127 = off_26C2096F8;
    long long v128 = 0u;
    long long v129 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
    BOOL v99 = v50 <= 0;
    int v50 = v97;
  }
  while (!v99);
  if (v102)
  {
    uint64_t v100 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat(v102, v103, CblasNoTrans, v100, (const char *)0x6F, 1.0, 0.0);
  }
  v130 = off_26C2096F8;
  long long v131 = 0u;
  long long v132 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
  v133 = off_26C2096F8;
  long long v134 = 0u;
  long long v135 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v133);
  v136 = off_26C2096F8;
  long long v137 = 0u;
  long long v138 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
  v139 = off_26C2096F8;
  long long v140 = 0u;
  long long v141 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v139);
  v142 = off_26C2096F8;
  long long v143 = 0u;
  long long v144 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v142);
  v145 = off_26C2096F8;
  long long v146 = 0u;
  long long v147 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v145);
  v148 = off_26C2096F8;
  long long v149 = 0u;
  long long v150 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v148);
  v151 = off_26C2096F8;
  long long v152 = 0u;
  long long v153 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v151).n128_u64[0];
  return result;
}

void sub_20CE3B600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = off_26C2096F8;
  a72 = 0u;
  *(_OWORD *)&STACK[0x208] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a71);
  STACK[0x218] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x220] = 0u;
  *(_OWORD *)&STACK[0x230] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x218]);
  STACK[0x240] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x248] = 0u;
  *(_OWORD *)&STACK[0x258] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x240]);
  STACK[0x268] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x270] = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x268]);
  STACK[0x290] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x298] = 0u;
  *(_OWORD *)&STACK[0x2A8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x290]);
  STACK[0x2B8] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2B8]);
  STACK[0x2E0] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x2E8] = 0u;
  *(_OWORD *)&STACK[0x2F8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2E0]);
  STACK[0x308] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x308]);
  STACK[0x330] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x338] = 0u;
  *(_OWORD *)&STACK[0x348] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x330]);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers(uint64_t *result)
{
  if (!*((unsigned char *)result + 241))
  {
    uint64_t v1 = result;
    std::vector<kaldi::CuMatrix<float>>::resize(result + 46, *((int *)result + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 49, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 52, *((int *)v1 + 20));
    double result = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 55, *((int *)v1 + 20));
    *((unsigned char *)v1 + 241) = 1;
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_20CE3BEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 80) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x40D, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x411, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t v38 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 440) + 48 * v9;
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, v14, 0, *(_DWORD *)(v14 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, v14, 0, *(_DWORD *)(v14 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v14, 0, *(_DWORD *)(v14 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  }
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, v14, CblasTrans, a2, (const char *)0x6F, 1.0, v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v9);
  int v18 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v14, v7, v8 - v7, 0, *(_DWORD *)(v14 + 16));
  uint64_t v19 = *(void *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v19, 0, v8 - v7, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v17, (uint64_t)&v46, CblasTrans, (uint64_t)&v43, (const char *)0x6F, 1.0, v15);
  uint64_t v43 = off_26C2096F8;
  long long v44 = 0u;
  long long v45 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
  unsigned int v46 = off_26C2096F8;
  long long v47 = 0u;
  long long v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v20, v14, 1.0, v15, v21, v22, v23);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v24 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
    }
    unsigned int v26 = *(_DWORD *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 32);
    uint64_t v40 = *(void *)(v24 + 8);
    uint64_t v39 = &off_26C209728;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v55, v7, v18, 0, SDWORD2(v56));
    uint64_t v28 = v38 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    unsigned int v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v29 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v30);
    }
    unsigned int v31 = *(_DWORD *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 32);
    uint64_t v40 = *(void *)(v29 + 8) + 4 * *(int *)(v29 + 24);
    uint64_t v39 = &off_26C209728;
    uint64_t v41 = v31;
    uint64_t v42 = v32;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v52, v7, v18, 0, SDWORD2(v53));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    unsigned int v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v33 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
    }
    unsigned int v35 = *(_DWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    *(void *)&long long v47 = *(void *)(v33 + 8) + 8 * *(int *)(v33 + 24);
    unsigned int v46 = &off_26C209728;
    *((void *)&v47 + 1) = v35;
    *(void *)&long long v48 = v36;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v46, (uint64_t)&v49, 112, v28, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v37, *(void *)(a1 + 368) + 48 * v9, CblasTrans, *(void *)(a1 + 320) + 48 * v9, (const char *)0x6F, 1.0, v15);
  }
  uint64_t v49 = off_26C2096F8;
  long long v50 = 0u;
  long long v51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
  uint64_t v52 = off_26C2096F8;
  long long v53 = 0u;
  long long v54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
  uint64_t v55 = off_26C2096F8;
  long long v56 = 0u;
  long long v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
}

void sub_20CE3C638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27,void (**a28)(),long long a29,long long a30,void (**a31)(),long long a32,long long a33)
{
  a25 = off_26C2096F8;
  a26 = 0u;
  a27 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  a28 = off_26C2096F8;
  a29 = 0u;
  a30 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a28);
  a31 = off_26C2096F8;
  a32 = 0u;
  a33 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a31);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_20CE3D030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = (void *)(a1 + 104);
  if (v7 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v7 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  int v13 = (_DWORD *)(*v8 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6AE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B6, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_26C209728;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DF, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E0, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_26C209728;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E8, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_26C209728;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v23[1] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v25);
}

void sub_20CE3D918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x59A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v8 = a3;
  int v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v23, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 656) + 48 * a2, v8);
      uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 680) + 48 * a2, v8);
      uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(void *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v18 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, v18, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(void *)(a1 + 656) + 48 * v24), v8, v26, v27, v28);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v29, (unsigned int *)(*(void *)(a1 + 680) + 48 * v24), v8, v30, v31, v32);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, (_DWORD *)(*(void *)(a1 + 728) + 32 * v24), v34, v35, v36, v8);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v37, (unsigned int *)(*(void *)(a1 + 704) + 48 * v24), v8, v38, v39, v40);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
      long long v45 = (unsigned int *)(*(void *)(a1 + 752) + 48 * v24);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v41, v45, v8, v42, v43, v44);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v7);
  int v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v7);
  int v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    int v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  float v7 = -a3;
  float v8 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v6, v9, 111, v10, v11, v8, 1.0);
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  float v13 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v12, v14, 111, v15, v16, v13, 1.0);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  float v18 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
  kaldi::CuVectorBase<float>::AddVec(v17, v19, v20, v21, v22, v18, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    float v24 = *(float *)(a1 + 464) * v7;
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v23, v25, 111, v26, v27, v24, 1.0);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    float v29 = *(float *)(a1 + 468) * v7;
    uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v28, v30, 111, v31, v32, v29, 1.0);
  }
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t a1)
{
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #rows = ", 22);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"; expecting ", 12);
    int v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #columns = ", 25);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " (same as input dim)");
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #rows = ", 26);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    float v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    float v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #columns = ", 29);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      float v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; expecting ", 12);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20) == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
    {
      if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #columns = ", 30);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      float v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; expecting ", 12);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #rows = ", 27);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_20CE3E844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 904) = xmmword_20D6073D0;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)&off_26C1FF130);
  *(void *)uint64_t v4 = off_26C209FF8;
  *(void *)(v4 + 848) = off_26C20A2E8;
  *(void *)(v4 + 160) = &unk_26C20A188;
  *(void *)(v4 + 168) = &unk_26C20A1B0;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_20CE3EA58(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF130, a2);
  *(void *)a1 = off_26C209FF8;
  *(void *)(a1 + 848) = off_26C20A2E8;
  *(void *)(a1 + 160) = &unk_26C20A188;
  *(void *)(a1 + 168) = &unk_26C20A1B0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a2 + 192)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = 162;
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = 163;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = 165;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = 168;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE3F9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::nnet1::UpdatableComponent *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *a14;
  if (*a14)
  {
    *((void *)v30 + 64) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *a15;
  if (*a15)
  {
    *((void *)v30 + 61) = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  uint64_t v35 = *((void *)v30 + 27);
  *((void *)v30 + 27) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *((void *)v30 + 25);
  *((void *)v30 + 25) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a19);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v30, (uint64_t *)&off_26C1FF130);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a21);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = &unk_26C20A188;
  *(void *)(a1 + 168) = &unk_26C20A1B0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v9 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 168);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_20CE4019C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_20CE40238(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_20CE402C0(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF150, a2);
  *(void *)a1 = off_26C20A418;
  *(void *)(a1 + 848) = off_26C20A708;
  *(void *)(a1 + 160) = &unk_26C20A5A8;
  *(void *)(a1 + 168) = &unk_26C20A5D0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = 259;
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = 260;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = 262;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = 265;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE40E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,kaldi::nnet1::UpdatableComponent *a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  MEMORY[0x2105595E0](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v34);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  uint64_t v36 = *a15;
  if (*a15)
  {
    *((void *)v33 + 64) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *a23;
  if (*a23)
  {
    *((void *)v33 + 61) = v37;
    operator delete(v37);
  }
  a32 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  uint64_t v38 = *((void *)v33 + 27);
  *((void *)v33 + 27) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  uint64_t v39 = *((void *)v33 + 25);
  *((void *)v33 + 25) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a31, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v33, (uint64_t *)&off_26C1FF150);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v72 = -1;
  int v73 = v4;
  int v70 = 0x40000000;
  int v71 = -1073741824;
  int v68 = -1073741824;
  int v69 = 1036831949;
  int v67 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v65);
  memset(v64, 0, sizeof(v64));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v5, v6);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      uint64_t v9 = v64;
      switch(HIBYTE(v64[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v10 = v64[0] == 0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 472);
          if (v10) {
            goto LABEL_202;
          }
          BOOL v12 = v64[0] == 0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (v12) {
            goto LABEL_202;
          }
          BOOL v13 = v64[0] == 0x6C6C654378614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 476);
          if (v13) {
            goto LABEL_202;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v64[0] == 0x6C6C65436D754E3CLL && LOWORD(v64[1]) == 15987) {
            goto LABEL_205;
          }
          if (v64[0] != 0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v64[0] == 0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v64[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v64[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v33 = v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v64[0] == 0x6E6569646172473CLL && v64[1] == 0x7079546D726F4E74 && LOWORD(v64[2]) == 15973) {
            goto LABEL_204;
          }
          if (v64[0] == 0x4374757074754F3CLL && v64[1] == 0x65756C61566C6C65 && LOWORD(v64[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v64[0] != 0x47746567726F463CLL || v64[1] != 0x4D73616942657461 || LODWORD(v64[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v64[0] != 0x47746567726F463CLL
            || v64[1] != 0x5273616942657461
            || *(void *)((char *)&v64[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v22 = v64[0] == 0x7463656A6F72503CLL
             && v64[1] == 0x6E7261654C6E6F69
             && v64[2] == 0x66656F4365746152
             && v65.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v14 = v64[1];
    switch(v64[1])
    {
      case 9:
        BOOL v15 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 472);
        if (!v15)
        {
          BOOL v16 = *(void *)v64[0] == 0x6461724778614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (!v16) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v64[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v64[0] + 8) == 15987)
        {
LABEL_205:
          long long v56 = &v73;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v56, v7, v8);
          break;
        }
        if (*(void *)v64[0] != 0x61654D736169423CLL || *(_WORD *)(v64[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v11 = &v71;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v11, v7, v8);
        break;
      case 0xBLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)(v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v11 = &v70;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)(v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v11 = &v69;
        goto LABEL_202;
      case 0xFLL:
        BOOL v33 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)(v64[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v11 = (int *)(a1 + 464);
        if (!v33) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v64[0] == 0x6E6569646172473CLL
          && *(void *)(v64[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v64[0] + 16) == 15973)
        {
LABEL_204:
          unsigned int v46 = &v65;
          goto LABEL_150;
        }
        if (v64[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v37 = *(void *)v64[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 476);
        if (v37) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v14 = v64[1];
LABEL_121:
        if (v14 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v64[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v64[0] + 8) == 1046766949)
        {
LABEL_206:
          long long v56 = &v72;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v14 = v64[1];
LABEL_127:
        if (v14 == 8)
        {
          if (*(void *)v64[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v14 = v64[1];
        }
        if (v14 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v64[0] != 0x4374757074754F3CLL
          || *(void *)(v64[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v64[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v14 = v64[1];
LABEL_139:
          if (v14 != 19) {
            goto LABEL_209;
          }
          uint64_t v9 = (uint64_t *)v64[0];
LABEL_141:
          uint64_t v41 = *v9;
          uint64_t v42 = v9[1];
          uint64_t v43 = *(uint64_t *)((char *)v9 + 11);
          BOOL v44 = v41 == 0x61725474696E493CLL && v42 == 0x79546D726F66736ELL;
          if (!v44 || v43 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Invalid token ", 14);
              if (v64[2] >= 0) {
                uint64_t v58 = v64;
              }
              else {
                uint64_t v58 = (void *)v64[0];
              }
              if (v64[2] >= 0) {
                uint64_t v59 = HIBYTE(v64[2]);
              }
              else {
                uint64_t v59 = v64[1];
              }
              uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(a1, v73);
          }
          unsigned int v46 = &v66;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v46, v7, v8);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v64[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v11 = &v68;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x5273616942657461
          || *(void *)(v64[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v11 = &v67;
        goto LABEL_202;
      case 0x19:
        BOOL v22 = *(void *)v64[0] == 0x7463656A6F72503CLL
           && *(void *)(v64[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v64[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v64[0] + 24) == 62;
LABEL_200:
        uint64_t v11 = (int *)(a1 + 468);
        if (!v22) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_20CE41DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_20CE42474()
{
}

void sub_20CE42490(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, unsigned int *a4, float a5)
{
  uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
  uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v11, 0, 0);
  unint64_t v12 = 0;
LABEL_2:
  if ((uint64_t)v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v12 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v12 * v26;
        if (v12 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a4, (uint64_t)&v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_20CE42690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v38 = *(_DWORD *)(a1 + 176);
    int v39 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v38 < v39)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      BOOL v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") should not be less than output dim (", 38);
      long long v45 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, ").");
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 184);
      *(unsigned char *)(a1 + 224) = v38 > v39;
      if (!v40) {
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48, v6, v7);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      switch(HIBYTE(v49))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v48 != 0x6C6C65436D754E3CLL || WORD4(v48) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v27 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 464);
          if (v27) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v48 == 0x4374757074754F3CLL
            && *((void *)&v48 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v49 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v49) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v49) != 18) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v48 == 0x6E6569646172473CLL && *((void *)&v48 + 1) == 0x7079546D726F4E74;
          if (!v25 || (unsigned __int16)v49 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v49) != 25) {
            goto LABEL_138;
          }
          BOOL v22 = (void)v48 == 0x7463656A6F72503CLL
             && *((void *)&v48 + 1) == 0x6E7261654C6E6F69
             && v49 == 0x66656F4365746152
             && v50 == 62;
          uint64_t v14 = (float *)(a1 + 468);
          if (v22) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v28 = (void)v48 == 0x6D726F4E78614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 472);
          if (v28) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
          BOOL v29 = (void)v48 == 0x6C6C654378614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 476);
          if (!v29) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 10
      && (*(void *)v48 == 0x6C6C65436D754E3CLL ? (BOOL v12 = *(unsigned __int16 *)(v48 + 8) == 15987) : (BOOL v12 = 0), v12))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v8, v9);
    }
    else
    {
      if (*((void *)&v48 + 1) == 15)
      {
        BOOL v13 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
        uint64_t v14 = (float *)(a1 + 464);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 == 25)
      {
        BOOL v17 = *(void *)v48 == 0x7463656A6F72503CLL
           && *(void *)(v48 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v48 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v48 + 24) == 62;
        uint64_t v14 = (float *)(a1 + 468);
        if (v17) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 != 9) {
        goto LABEL_47;
      }
      BOOL v18 = *(void *)v48 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 472);
      if (v18) {
        goto LABEL_127;
      }
      uint64_t v11 = *((void *)&v48 + 1);
      if (*((void *)&v48 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v19 = *(void *)v48 == 0x6C6C654378614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 476);
      if (v19) {
        goto LABEL_127;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v49) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v49) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v48 != 0x3E706565506F4E3CLL)
        {
          if ((v49 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v11 = *((void *)&v48 + 1);
          if (v11 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v48 == 0x4374757074754F3CLL
            && *(void *)(v48 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v48 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v11 = *((void *)&v48 + 1);
          if (*((void *)&v48 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v48 == 0x6E6569646172473CLL
            && *(void *)(v48 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v48 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v47 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v47) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v49 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v49) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v34 = &v48;
          }
          else
          {
LABEL_120:
            if (v11 != 9) {
              goto LABEL_138;
            }
            uint64_t v34 = (long long *)v48;
          }
          uint64_t v35 = *(void *)v34;
          int v36 = *((unsigned __int8 *)v34 + 8);
          BOOL v37 = v35 == 0x6461724778614D3CLL && v36 == 62;
          uint64_t v14 = (float *)(a1 + 152);
          if (!v37)
          {
LABEL_138:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v49 >= 0) {
              uint64_t v42 = &v48;
            }
            else {
              uint64_t v42 = (long long *)v48;
            }
            if (v49 >= 0) {
              uint64_t v43 = HIBYTE(v49);
            }
            else {
              uint64_t v43 = *((void *)&v48 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v14, v8, v9);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v11 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v48 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_20CE43490()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  }
  return result;
}

void sub_20CE43680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v8, a2, a3, a4);
  uint64_t v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    uint64_t v14 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<signed char>::Write(v14, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  int v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  uint64_t v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20);
    uint64_t v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1)
                                   + 16)
                       * v11);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    int v13 = kaldi::QuantizedMatrixBase<short>::NumRows(v12);
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  unsigned int v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  int v11 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v16 = v14 * v12;
  int v38 = *(void **)a2;
  LODWORD(v39) = v10;
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v17);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v18 = v16 + v10;
  if (v16 + v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v10);
  LODWORD(v39) = v16;
  BOOL v19 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v19);
  if (a1[208])
  {
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v20;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    unsigned int v22 = v21 + v18;
    if (v21 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_11;
    }
    int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v39) = v21;
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v23, v24, v25, v26);
    unsigned int v18 = v22;
  }
  int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v27 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v39) = v27;
  BOOL v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v38, v29, v30, v31);
  if (!a1[224]) {
    return;
  }
  unsigned int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v33 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v34 = kaldi::QuantizedMatrixBase<short>::NumRows(v33);
  uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v36 = kaldi::QuantizedMatrixBase<short>::NumCols(v35);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v36 * v34 + v32 > *(_DWORD *)(a2 + 8)) {
LABEL_11:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  int v38 = (void *)(*(void *)a2 + 4 * (int)v32);
  LODWORD(v39) = v36 * v34;
  BOOL v37 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v37);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(void *a1, uint64_t a2)
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(unsigned char *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 208))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x222, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  unsigned int v10 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10);
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  int v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  int v16 = v13 * v11;
  BOOL v33 = *(char **)a2;
  LODWORD(v34) = v9;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v14, &v33);
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v18 = v16 + v9;
  if (v16 + v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v9);
  LODWORD(v34) = v16;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v17, &v33);
  if (a1[208])
  {
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v19;
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if (v20 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_12;
    }
    BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v34) = v20;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v21, &v33);
    v18 += v20;
  }
  unsigned int v22 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v25 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v34) = v25;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v22, (uint64_t)&v33, v23, v24, v15);
  if (!a1[224]) {
    return result;
  }
  unsigned int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v28 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v29 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
  uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v31 = kaldi::QuantizedMatrixBase<short>::NumCols(v30) * v29;
  unsigned int v32 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v31 + v27 > *(_DWORD *)(a2 + 8)) {
LABEL_12:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v27);
  LODWORD(v34) = v31;
  return (_DWORD *)kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v32, &v33);
}

_DWORD *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  uint64_t v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  float v7 = kaldi::QuantizedMatrixBase<signed char>::Sum(v2, v3, v4, v5, v6);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  float v13 = v7 + kaldi::QuantizedMatrixBase<signed char>::Sum(v8, v9, v10, v11, v12);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v19 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    float v13 = v13 + kaldi::QuantizedMatrixBase<signed char>::Sum(v19, v20, v21, v22, v23);
  }
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  double v25 = kaldi::CuVectorBase<float>::Sum(v24);
  return v13 + *(float *)&v25;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v6, v3, v5, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

void sub_20CE44104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v5 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  uint64_t v6 = kaldi::QuantizedMatrixBase<short>::NumRows(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  uint64_t v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((uint64_t)va, v6, v8, 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_20CE4415C()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0) + 20);
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v2, *(unsigned int *)(v3 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v20, 111, v5, v6, v1, 1.0);
  }
  uint64_t v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0) + 16);
  memset(&v19[1], 0, 24);
  v19[0] = off_26C2111C8;
  kaldi::CuVector<float>::Resize((uint64_t)v19, v7, 1u, v8, v9);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v10, (uint64_t)v19, v11, v12, v13, v1, 1.0);
  if (*(unsigned char *)(v0 + 224))
  {
    uint64_t v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    uint64_t v15 = kaldi::QuantizedMatrixBase<short>::NumRows(v14);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    uint64_t v17 = kaldi::QuantizedMatrixBase<short>::NumCols(v16);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v15, v17, 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<signed char>::AddMat();
  }
  kaldi::CuVector<float>::~CuVector(v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_20CE44298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(void *a1)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  float v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumRows(v13);
  uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  unsigned int v16 = kaldi::QuantizedMatrixBase<short>::NumCols(v15) * v14;
  uint64_t v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v18 = kaldi::QuantizedMatrixBase<short>::NumRows(v17);
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v20 = kaldi::QuantizedMatrixBase<short>::NumCols(v19);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  int v22 = v20;
  long long v57 = *(char **)a4;
  LODWORD(v58) = v16;
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v54, v23, 111, v24, v25);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v57, (uint64_t)&v54);
  int v26 = v22 * v18;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v54);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v27 = v26 + v16;
  if (v26 + v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v54 = *(void *)a4 + 4 * (int)v16;
  LODWORD(v55) = v26;
  uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v28, v29, v30, v31);
  if (a1[208])
  {
    int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v32;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unsigned int v34 = v33 + v27;
    if (v33 + v27 > *(_DWORD *)(a4 + 8)) {
      goto LABEL_14;
    }
    uint64_t v54 = *(void *)a4 + 4 * (int)v27;
    LODWORD(v55) = v33;
    uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v35, v36, v37, v38);
    unsigned int v27 = v34;
  }
  int v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (v39 + v27 > *(_DWORD *)(a4 + 8)) {
LABEL_14:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  uint64_t v54 = *(void *)a4 + 4 * (int)v27;
  LODWORD(v55) = v39;
  uint64_t v40 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v40, (uint64_t)&v54, v41, v42, v43);
  if (a1[224])
  {
    unsigned int v44 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v27;
    long long v45 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v46 = kaldi::QuantizedMatrixBase<short>::NumRows(v45);
    uint64_t v47 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v48 = kaldi::QuantizedMatrixBase<short>::NumCols(v47);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    if (v48 * v46 + v44 <= *(_DWORD *)(a4 + 8))
    {
      uint64_t v54 = *(void *)a4 + 4 * (int)v44;
      LODWORD(v55) = v48 * v46;
      uint64_t v49 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v49, v50, v51, v52);
      return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_20CE4463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v50);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v50, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v3);
  if ((v49 & 0x80u) == 0) {
    unint64_t v4 = v48;
  }
  else {
    unint64_t v4 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v5 = v49;
  }
  else {
    uint64_t v5 = (uint64_t)v48[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v8);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = v46;
  }
  else {
    uint64_t v9 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = (uint64_t)v46[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  float v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v45 & 0x80u) == 0) {
    int v18 = v44;
  }
  else {
    int v18 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v19 = v45;
  }
  else {
    uint64_t v19 = (uint64_t)v44[1];
  }
  int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::CuSubVector<float>::CuSubVector(&v39, v22, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v23);
  kaldi::nnet1::MomentStatistics<float>(&v39, v24, v25, v26, v27);
  if ((v43 & 0x80u) == 0) {
    uint64_t v28 = __p;
  }
  else {
    uint64_t v28 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v29 = v43;
  }
  else {
    uint64_t v29 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    int v32 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v33 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    unsigned int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Projection weights:", 21);
    uint64_t v35 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<signed char>(v35);
    uint64_t v36 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v37 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  std::stringbuf::str();
  v50[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v50 + *(void *)(v50[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v50[1] = MEMORY[0x263F8C318] + 16;
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v52);
}

void sub_20CE44EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    int v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0) {
          uint64_t v3 = v90;
        }
        else {
          uint64_t v3 = (void **)v90[0];
        }
        if ((v91 & 0x80u) == 0) {
          std::string::size_type v4 = v91;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v90[1];
        }
        uint64_t v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0) {
          uint64_t v7 = v88;
        }
        else {
          uint64_t v7 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v8 = v89;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v88[1];
        }
        uint64_t v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0) {
          uint64_t v11 = v86;
        }
        else {
          uint64_t v11 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v12 = v87;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v86[1];
        }
        float v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0) {
          uint64_t v15 = v84;
        }
        else {
          uint64_t v15 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v16 = v85;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v84[1];
        }
        uint64_t v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v19 = v82;
        }
        else {
          uint64_t v19 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v20 = v83;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v82[1];
        }
        uint64_t v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0) {
          uint64_t v24 = v80;
        }
        else {
          uint64_t v24 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v25 = v81;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v80[1];
        }
        uint64_t v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          uint64_t v28 = v78;
        }
        else {
          uint64_t v28 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v29 = v79;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v78[1];
        }
        uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0) {
          uint64_t v33 = v76;
        }
        else {
          uint64_t v33 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v34 = v77;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v76[1];
        }
        uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v37 = v74;
        }
        else {
          uint64_t v37 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v38 = v75;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v74[1];
        }
        int v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0) {
          int v46 = __p;
        }
        else {
          int v46 = (void **)__p[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v47 = v73;
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        int v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        int64_t v103 = v48->__r_.__value_.__r.__words[2];
        long long v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0) {
          uint64_t v50 = (const std::string::value_type *)&v102;
        }
        else {
          uint64_t v50 = (const std::string::value_type *)v102;
        }
        if (v103 >= 0) {
          std::string::size_type v51 = HIBYTE(v103);
        }
        else {
          std::string::size_type v51 = *((void *)&v102 + 1);
        }
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if ((char)v73 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v91 < 0) {
          operator delete(v90[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v53 = &v100;
          }
          else {
            long long v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          int64_t v103 = v55->__r_.__value_.__r.__words[2];
          long long v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            long long v57 = (const std::string::value_type *)&v102;
          }
          else {
            long long v57 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v58 = HIBYTE(v103);
          }
          else {
            std::string::size_type v58 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v100;
          }
          else {
            uint64_t v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          int64_t v103 = v62->__r_.__value_.__r.__words[2];
          long long v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            uint64_t v64 = (const std::string::value_type *)&v102;
          }
          else {
            uint64_t v64 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v65 = HIBYTE(v103);
          }
          else {
            std::string::size_type v65 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    std::string v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v67 = &v105;
    }
    else {
      int v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
    }
    int v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_20CE456A4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      float v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      uint64_t v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      uint64_t v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        int v39 = __p;
      }
      else {
        int v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      unsigned __int8 v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        uint64_t v43 = (const std::string::value_type *)&v86;
      }
      else {
        uint64_t v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v84;
        }
        else {
          unsigned __int8 v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v89;
  }
  else {
    uint64_t v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_20CE45F84(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE46190()
{
}

void sub_20CE46198()
{
}

void sub_20CE461A0()
{
}

void sub_20CE461A8()
{
}

void sub_20CE461B0()
{
}

void sub_20CE461B8()
{
}

void sub_20CE461C0()
{
}

void sub_20CE461C8()
{
}

void sub_20CE461D0()
{
}

void sub_20CE461D8()
{
}

void sub_20CE461E0()
{
}

void sub_20CE461E8()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      float v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      uint64_t v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      uint64_t v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v70;
        }
        else {
          uint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          unsigned __int8 v41 = (const std::string::value_type *)&v72;
        }
        else {
          unsigned __int8 v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  int v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_20CE46774(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE46940()
{
}

void sub_20CE46948()
{
}

void sub_20CE46950()
{
}

void sub_20CE46958()
{
}

void sub_20CE46960()
{
}

void sub_20CE46968()
{
}

void sub_20CE46970()
{
}

void sub_20CE46978()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  int v81 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2BB, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    float v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
  }
  uint64_t v14 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, a4, v5, v14);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = a4;
  uint64_t v83 = a4;
  int v78 = a4;
  if (*(void *)(a1 + 112) == v16)
  {
    int v79 = 0;
  }
  else
  {
    int v18 = *(_DWORD *)(v16 + 32 * a4 + 16);
    if (v18 < 1)
    {
      int v79 = 0;
      uint64_t v17 = a4;
    }
    else
    {
      if (v18 != v5) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2C5, "boundary_[batch_index].Dim() == batch_size", v15);
      }
      uint64_t v17 = a4;
      uint64_t v19 = *(void *)(a1 + 128) + 48 * a4;
      *(void *)(v19 + 32) = v14;
      int v79 = 1;
      kaldi::CuMatrix<float>::Resize(v19, v6, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1u, 0);
    }
  }
  uint64_t v20 = *(void *)(a1 + 248) + 48 * v17;
  uint64_t v82 = *(void *)(a1 + 344) + 48 * v17;
  uint64_t v21 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v20, a2, 111, v21, (const char *)0x70, 1.0, 0.0);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v20, v22, v23, v24, v25, 1.0, 1.0);
  if (v81 >= 1)
  {
    int v28 = v17;
    int v29 = 0;
    int v30 = 0;
    uint64_t v80 = a1 + 12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v20, v29, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v20, v29, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v20, v29, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      uint64_t v31 = *(void *)(a1 + 272) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v31, v29, v6, 0, *(_DWORD *)(v31 + 16));
      memset(v98, 0, sizeof(v98));
      std::string v97 = off_26C2096F8;
      memset(v96, 0, sizeof(v96));
      std::string v95 = off_26C2096F8;
      if (v30)
      {
        if (v79)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(a1 + 128) + 48 * (int)v83);
          uint64_t v32 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v32, 0, *(_DWORD *)(v32 + 20), 0, *(_DWORD *)(a1 + 176));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v33 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v33, v29 - v6, v6, 0, *(_DWORD *)(v33 + 16));
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v34);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v95, (uint64_t)&v93, (uint64_t)&v90, 1, v35);
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v36 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v36, 0, *(_DWORD *)(v36 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          int v28 = v83;
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v37);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v90, 1, v38);
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v41 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v41, v29 - v6, v6, 0, *(_DWORD *)(v41 + 16));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          int v28 = v83;
        }
      }
      else
      {
        int v28 = v83;
        uint64_t v39 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v39, 0, *(_DWORD *)(v39 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
        *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
        v98[0] = v94[0];
        v98[3] = v94[3];
        std::string v93 = off_26C2096F8;
        memset(v94, 0, sizeof(v94));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
        uint64_t v40 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
        v96[0] = v94[0];
        *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
        v96[3] = v94[3];
        std::string v93 = off_26C2096F8;
        memset(v94, 0, sizeof(v94));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, 0, *(_DWORD *)(v20 + 16));
      std::string::size_type v42 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v93, (uint64_t)&v97, 111, v42, (const char *)0x70, 1.0, 1.0);
      std::string v93 = off_26C2096F8;
      memset(v94, 0, sizeof(v94));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v46 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
        }
        unsigned int v48 = *(_DWORD *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 32);
        v94[0] = *(void *)(v46 + 8);
        std::string v93 = &off_26C209728;
        v94[1] = v48;
        v94[2] = v49;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v95, 111, (uint64_t)&v93, v47, 1.0, 1.0);
        uint64_t v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        }
        unsigned int v52 = *(_DWORD *)(v50 + 16);
        uint64_t v53 = *(void *)(v50 + 32);
        v94[0] = *(void *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        std::string v93 = &off_26C209728;
        v94[1] = v52;
        v94[2] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v105, (uint64_t)&v95, 111, (uint64_t)&v93, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v108, (uint64_t)&v108, v43, v44, v45);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v105, (uint64_t)&v105, v54, v55, v56);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v102, v57, v58, v59, v60);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v108, 111, (uint64_t)&v102, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v105, 111, (uint64_t)&v95, (const char *)0x6F, 1.0, 1.0);
      float v61 = *(float *)(a1 + 476);
      if (v61 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v99, v61);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v99, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v65 + 20) <= 2u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v66);
        }
        unsigned int v67 = *(_DWORD *)(v65 + 16);
        uint64_t v68 = *(void *)(v65 + 32);
        *(void *)&long long v91 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
        uint64_t v90 = &off_26C209728;
        *((void *)&v91 + 1) = v67;
        *(void *)&long long v92 = v68;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v93, (uint64_t)&v99, 111, (uint64_t)&v90, v66, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v93, (uint64_t)&v93, v62, v63, v64);
      uint64_t v69 = *(void *)(a1 + 296) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v69, v29, v6, 0, *(_DWORD *)(v69 + 16));
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v90, (uint64_t)&v99, v70, v71, v72);
      uint64_t v73 = *(void *)(a1 + 320) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v73, v29, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v87, (uint64_t)&v93, 111, (uint64_t)&v90, (const char *)0x6F, 1.0, 0.0);
      if (*(unsigned char *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        int v74 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v84, (uint64_t)&v87, 111, v74, (const char *)0x70, 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v84, (uint64_t)&v87, 111, v75, v76);
      }
      std::string v84 = off_26C2096F8;
      long long v85 = 0u;
      long long v86 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
      int64_t v87 = off_26C2096F8;
      long long v88 = 0u;
      long long v89 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
      uint64_t v90 = off_26C2096F8;
      long long v91 = 0u;
      long long v92 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90);
      std::string v93 = off_26C2096F8;
      memset(v94, 0, sizeof(v94));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      std::string v95 = off_26C2096F8;
      memset(v96, 0, sizeof(v96));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v95);
      std::string v97 = off_26C2096F8;
      memset(v98, 0, sizeof(v98));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v97);
      std::string v99 = off_26C2096F8;
      long long v100 = 0u;
      long long v101 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v99);
      long long v102 = off_26C2096F8;
      long long v103 = 0u;
      long long v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      std::string v105 = off_26C2096F8;
      long long v106 = 0u;
      long long v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      v108 = off_26C2096F8;
      long long v109 = 0u;
      long long v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      ++v30;
      v29 += v6;
    }
    while (v81 != v30);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v82, 111, v26, v27);
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(a1, v78);
}

void sub_20CE4772C(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_20CE47BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  float v13 = off_26C2096F8;
  long long v14 = 0u;
  long long v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  uint64_t v16 = off_26C2096F8;
  long long v17 = 0u;
  long long v18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
  uint64_t v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(void *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(void *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(void *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(void *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  float v13 = off_26C2096F8;
  long long v14 = 0u;
  long long v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  uint64_t v16 = off_26C2096F8;
  long long v17 = 0u;
  long long v18 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16).n128_u64[0];
  return result;
}

void sub_20CE47E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_26C2096F8;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = off_26C2096F8;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, 0, 1, v6);
    uint64_t v8 = *(void *)(a1 + 104);
    if (*(void *)(a1 + 112) != v8)
    {
      int v9 = *(_DWORD *)(v8 + 16);
      if (v9 >= 1)
      {
        if (v9 != 1) {
          kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x325, "boundary_[0].Dim() == 1", v7);
        }
        uint64_t v10 = *(void *)(a1 + 128);
        *(void *)(v10 + 32) = v6;
        kaldi::CuMatrix<float>::Resize(v10, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
      }
    }
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x320, "ropts_.num_sequences == 1", v5);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  uint64_t v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  int v13 = (int)v10 / (int)v11;
  if ((int)v10 % (int)v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x380, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    long long v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151);
  }
  if (v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x384, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v102 = a5;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(a1, a6, v10, v18);
  uint64_t v21 = a6;
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v23 = 3 * a6;
  uint64_t v24 = *(void *)(a1 + 440) + 16 * v23;
  uint64_t v25 = *(void *)(a1 + 368);
  uint64_t v105 = *(void *)(a1 + 416);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v103 = v24;
  if (*(void *)(a1 + 112) == v26 || (int v27 = *(_DWORD *)(v26 + 32 * v21 + 16), v27 < 1))
  {
    int v106 = 0;
  }
  else
  {
    if (v27 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x390, "boundary_[batch_index].Dim() == batch_size", v20);
    }
    uint64_t v28 = *(void *)(a1 + 128) + 48 * (int)v21;
    *(void *)(v28 + 32) = v18;
    int v106 = 1;
    kaldi::CuMatrix<float>::Resize(v28, v11, *(unsigned int *)(v24 + 16), 1u, 0);
  }
  uint64_t v29 = v22 + 16 * v23;
  uint64_t v30 = v25 + 16 * v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v30, a4, 111, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v151, v29, 0, *(_DWORD *)(v29 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v148, v29, 0, *(_DWORD *)(v29 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  uint64_t v31 = v103;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v139, v103, 0, *(_DWORD *)(v103 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v136, v31, 0, *(_DWORD *)(v31 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v133, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v139, (uint64_t)&v151, (uint64_t)&v142, v32, v33);
  int v34 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, v11, v34, 0, SDWORD2(v137));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v148, v11, v34, 0, SDWORD2(v149));
  uint64_t v35 = *(void *)(a1 + 272) + 48 * (int)v21;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, v35, 0, v34, 0, *(_DWORD *)(v35 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v127, (uint64_t)&v124, (uint64_t)&v121, v36, v37);
  uint64_t v121 = off_26C2096F8;
  long long v122 = 0u;
  long long v123 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v121);
  uint64_t v124 = off_26C2096F8;
  long long v125 = 0u;
  long long v126 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
  v127 = off_26C2096F8;
  long long v128 = 0u;
  long long v129 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, 0, v11, 0, SDWORD2(v137));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
  v127 = off_26C2096F8;
  long long v128 = 0u;
  long long v129 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  if (v106)
  {
    uint64_t v40 = *(void *)(a1 + 128) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
    int v41 = v13 - 1;
    int v42 = v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v136, v42, v11, 0, SDWORD2(v137));
      kaldi::CuSubVector<float>::CuSubVector(&v121, *(void *)(a1 + 104) + 32 * v21, v42, v11, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v127, (uint64_t)&v121, 0, v44);
      uint64_t v124 = off_26C2096F8;
      long long v125 = 0u;
      long long v126 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
      v42 += v11;
      --v41;
    }
    while (v41);
    v127 = off_26C2096F8;
    long long v128 = 0u;
    long long v129 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v133, (uint64_t)&v145, *(void *)(a1 + 296) + 48 * (int)v21, v38, v39);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v130, (uint64_t)&v142, (uint64_t)&v151, v45, v46);
  uint64_t v47 = v105 + 16 * v23;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(a1 + 296) + 48 * (int)v21, (uint64_t)&v145, v48, v49);
  int v50 = v13 - 1;
  int v104 = v13 - 1;
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v30, v50 * v11, v11, 0, *(_DWORD *)(v30 + 16));
    uint64_t v51 = *(void *)(a1 + 392) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v51, v50 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v124, (uint64_t)&v127, 111, v54, (const char *)0x6F, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v124, (uint64_t)&v127, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, (uint64_t)&v133, v50 * v11, v11, 0, SDWORD2(v134));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v121, (uint64_t)&v124, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v118, v47, v50 * v11, v11, 0, *(_DWORD *)(v47 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v118, (uint64_t)&v124, v58, v59, v60);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      }
      unsigned int v63 = *(_DWORD *)(v61 + 16);
      uint64_t v64 = *(void *)(v61 + 32);
      v117[0] = *(void *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      uint64_t v116 = &off_26C209728;
      v117[1] = v63;
      v117[2] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v121, 111, (uint64_t)&v116, v62, 1.0, 1.0);
    }
    if (v50 < v104)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v47, v11 + v11 * v50, v11, 0, *(_DWORD *)(v47 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, (uint64_t)&v148, v11 + v11 * v50, v11, 0, SDWORD2(v149));
      if (v106)
      {
        uint64_t v65 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, v65, 0, *(_DWORD *)(v65 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v112);
        kaldi::CuSubVector<float>::CuSubVector(&v110, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v66);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v110, 1, v67);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v113[1];
        v117[0] = v113[0];
        v117[3] = v113[3];
        uint64_t v68 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, v68, 0, *(_DWORD *)(v68 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v110);
        kaldi::CuSubVector<float>::CuSubVector(v109, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v69);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v110, (uint64_t)&v114, (uint64_t)v109, 1, v70);
        v115[0] = v111[0];
        *(_OWORD *)&v115[1] = *(_OWORD *)&v111[1];
        v115[3] = v111[3];
        long long v110 = off_26C2096F8;
        memset(v111, 0, sizeof(v111));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v110);
        uint64_t v112 = off_26C2096F8;
        memset(v113, 0, sizeof(v113));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v112);
      }
      if (*(unsigned char *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, (uint64_t)&v136, v11 + v11 * v50, v11, 0, SDWORD2(v137));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, (uint64_t)&v139, v11 + v11 * v50, v11, 0, SDWORD2(v140));
        if (v106)
        {
          uint64_t v71 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v109, v71, 0, *(_DWORD *)(v71 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v109);
          kaldi::CuSubVector<float>::CuSubVector(v108, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v72);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v109, (uint64_t)&v112, (uint64_t)v108, 1, v73);
          *(_OWORD *)&v113[1] = *(_OWORD *)&v109[2];
          v113[0] = v109[1];
          v113[3] = v109[4];
          uint64_t v74 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v108, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v108);
          kaldi::CuSubVector<float>::CuSubVector(v107, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v75);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v108, (uint64_t)&v110, (uint64_t)v107, 1, v76);
          v111[0] = v108[1];
          *(_OWORD *)&v111[1] = *(_OWORD *)&v108[2];
          v111[3] = v108[4];
          v108[0] = off_26C2096F8;
          memset(&v108[1], 0, 32);
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v108);
          v109[0] = off_26C2096F8;
          memset(&v109[1], 0, 32);
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v109);
        }
        uint64_t v77 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v77 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v78);
        }
        unsigned int v79 = *(_DWORD *)(v77 + 16);
        uint64_t v80 = *(void *)(v77 + 32);
        v109[1] = *(void *)(v77 + 8) + 4 * *(int *)(v77 + 24);
        v109[0] = &off_26C209728;
        v109[2] = v79;
        v109[3] = v80;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v112, 111, (uint64_t)v109, v78, 1.0, 1.0);
        uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v81 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v82);
        }
        unsigned int v83 = *(_DWORD *)(v81 + 16);
        uint64_t v84 = *(void *)(v81 + 32);
        v109[1] = *(void *)(v81 + 8);
        v109[0] = &off_26C209728;
        v109[2] = v83;
        v109[3] = v84;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v110, 111, (uint64_t)v109, v82, 1.0, 1.0);
        long long v110 = off_26C2096F8;
        memset(v111, 0, sizeof(v111));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v110);
        uint64_t v112 = off_26C2096F8;
        memset(v113, 0, sizeof(v113));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v112);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v118, (uint64_t)&v116, 111, (uint64_t)&v114, (const char *)0x6F, 1.0, 1.0);
      uint64_t v114 = off_26C2096F8;
      memset(v115, 0, sizeof(v115));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v139, v50 * v11, v11, 0, SDWORD2(v140));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v85, v86, v87);
    uint64_t v116 = off_26C2096F8;
    memset(v117, 0, sizeof(v117));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v130, v50 * v11, v11, 0, SDWORD2(v131));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v88, v89, v90);
    uint64_t v116 = off_26C2096F8;
    memset(v117, 0, sizeof(v117));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    if (v50 <= 0)
    {
      int v97 = v50 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v136, v50 * v11, v11, 0, SDWORD2(v137));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v91, v92, v93);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v103, v50 * v11, v11, 0, *(_DWORD *)(v103 + 16));
      if (v106)
      {
        uint64_t v94 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v94, 0, *(_DWORD *)(v94 + 20), 0, v117[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v114);
        kaldi::CuSubVector<float>::CuSubVector(&v112, *(void *)(a1 + 104) + 32 * v21, v50 * v11, v11, v95);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v112, 1, v96);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v115[1];
        v117[0] = v115[0];
        v117[3] = v115[3];
        uint64_t v114 = off_26C2096F8;
        memset(v115, 0, sizeof(v115));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      }
      int v97 = v50 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v30, (v50 - 1) * v11, v11, 0, *(_DWORD *)(v30 + 16));
      std::string v98 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v114, (uint64_t)&v116, 111, v98, (const char *)0x6F, 1.0, 1.0);
      uint64_t v114 = off_26C2096F8;
      memset(v115, 0, sizeof(v115));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    }
    uint64_t v118 = off_26C2096F8;
    long long v119 = 0u;
    long long v120 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v118);
    uint64_t v121 = off_26C2096F8;
    long long v122 = 0u;
    long long v123 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v121);
    uint64_t v124 = off_26C2096F8;
    long long v125 = 0u;
    long long v126 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
    v127 = off_26C2096F8;
    long long v128 = 0u;
    long long v129 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
    BOOL v99 = v50 <= 0;
    int v50 = v97;
  }
  while (!v99);
  if (v102)
  {
    long long v100 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v102, v103, 111, v100, (const char *)0x6F, 1.0, 0.0);
  }
  v130 = off_26C2096F8;
  long long v131 = 0u;
  long long v132 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
  v133 = off_26C2096F8;
  long long v134 = 0u;
  long long v135 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v133);
  v136 = off_26C2096F8;
  long long v137 = 0u;
  long long v138 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
  v139 = off_26C2096F8;
  long long v140 = 0u;
  long long v141 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v139);
  v142 = off_26C2096F8;
  long long v143 = 0u;
  long long v144 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v142);
  v145 = off_26C2096F8;
  long long v146 = 0u;
  long long v147 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v145);
  v148 = off_26C2096F8;
  long long v149 = 0u;
  long long v150 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v148);
  v151 = off_26C2096F8;
  long long v152 = 0u;
  long long v153 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v151).n128_u64[0];
  return result;
}

void sub_20CE499CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = off_26C2096F8;
  a72 = 0u;
  *(_OWORD *)&STACK[0x208] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a71);
  STACK[0x218] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x220] = 0u;
  *(_OWORD *)&STACK[0x230] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x218]);
  STACK[0x240] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x248] = 0u;
  *(_OWORD *)&STACK[0x258] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x240]);
  STACK[0x268] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x270] = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x268]);
  STACK[0x290] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x298] = 0u;
  *(_OWORD *)&STACK[0x2A8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x290]);
  STACK[0x2B8] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2B8]);
  STACK[0x2E0] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x2E8] = 0u;
  *(_OWORD *)&STACK[0x2F8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2E0]);
  STACK[0x308] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x308]);
  STACK[0x330] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x338] = 0u;
  *(_OWORD *)&STACK[0x348] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x330]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_20CE4A230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 80) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x40D, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x411, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  uint64_t v38 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 440) + 48 * v9;
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, v14, 0, *(_DWORD *)(v14 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, v14, 0, *(_DWORD *)(v14 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v14, 0, *(_DWORD *)(v14 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  }
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, v14, CblasTrans, a2, (const char *)0x6F, 1.0, v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v9);
  int v18 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v14, v7, v8 - v7, 0, *(_DWORD *)(v14 + 16));
  uint64_t v19 = *(void *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v19, 0, v8 - v7, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v17, (uint64_t)&v46, CblasTrans, (uint64_t)&v43, (const char *)0x6F, 1.0, v15);
  uint64_t v43 = off_26C2096F8;
  long long v44 = 0u;
  long long v45 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
  uint64_t v46 = off_26C2096F8;
  long long v47 = 0u;
  long long v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v20, v14, 1.0, v15, v21, v22, v23);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v24 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
    }
    unsigned int v26 = *(_DWORD *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 32);
    uint64_t v40 = *(void *)(v24 + 8);
    uint64_t v39 = &off_26C209728;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v55, v7, v18, 0, SDWORD2(v56));
    uint64_t v28 = v38 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    uint64_t v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v29 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v30);
    }
    unsigned int v31 = *(_DWORD *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 32);
    uint64_t v40 = *(void *)(v29 + 8) + 4 * *(int *)(v29 + 24);
    uint64_t v39 = &off_26C209728;
    uint64_t v41 = v31;
    uint64_t v42 = v32;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v52, v7, v18, 0, SDWORD2(v53));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    uint64_t v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v33 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
    }
    unsigned int v35 = *(_DWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    *(void *)&long long v47 = *(void *)(v33 + 8) + 8 * *(int *)(v33 + 24);
    uint64_t v46 = &off_26C209728;
    *((void *)&v47 + 1) = v35;
    *(void *)&long long v48 = v36;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v46, (uint64_t)&v49, 112, v28, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v37, *(void *)(a1 + 368) + 48 * v9, CblasTrans, *(void *)(a1 + 320) + 48 * v9, (const char *)0x6F, 1.0, v15);
  }
  uint64_t v49 = off_26C2096F8;
  long long v50 = 0u;
  long long v51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
  uint64_t v52 = off_26C2096F8;
  long long v53 = 0u;
  long long v54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
  uint64_t v55 = off_26C2096F8;
  long long v56 = 0u;
  long long v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
}

void sub_20CE4A9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27,void (**a28)(),long long a29,long long a30,void (**a31)(),long long a32,long long a33)
{
  a25 = off_26C2096F8;
  a26 = 0u;
  a27 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  a28 = off_26C2096F8;
  a29 = 0u;
  a30 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a28);
  a31 = off_26C2096F8;
  a32 = 0u;
  a33 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a31);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_20CE4B39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1116);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = (void *)(a1 + 104);
  if (v7 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v7 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  int v13 = (_DWORD *)(*v8 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6AE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B6, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_26C209728;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DF, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E0, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_26C209728;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E8, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_26C209728;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v23[1] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v25);
}

void sub_20CE4BCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x59A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v8 = a3;
  int v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v23, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 656) + 48 * a2, v8);
      uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 680) + 48 * a2, v8);
      uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(void *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v18 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, v18, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(void *)(a1 + 656) + 48 * v24), v8, v26, v27, v28);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v29, (unsigned int *)(*(void *)(a1 + 680) + 48 * v24), v8, v30, v31, v32);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, (_DWORD *)(*(void *)(a1 + 728) + 32 * v24), v34, v35, v36, v8);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v37, (unsigned int *)(*(void *)(a1 + 704) + 48 * v24), v8, v38, v39, v40);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
      long long v45 = (unsigned int *)(*(void *)(a1 + 752) + 48 * v24);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v41, v45, v8, v42, v43, v44);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v7);
  int v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v7);
  int v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    int v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1532);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Check(uint64_t a1)
{
  unint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    uint64_t v9 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v9);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  int v4 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    uint64_t v15 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v15);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      uint64_t v25 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    if (kaldi::QuantizedMatrixBase<short>::NumRows(v6) == *(_DWORD *)(a1
                                                                                   + *(void *)(*(void *)a1 - 24)
                                                                                   + 12))
    {
      uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      int v31 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      uint64_t v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumRows(v26);
      uint64_t v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_20CE4CB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 904) = xmmword_20D6073D0;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)&off_26C1FF150);
  *(void *)uint64_t v4 = off_26C20A418;
  *(void *)(v4 + 848) = off_26C20A708;
  *(void *)(v4 + 160) = &unk_26C20A5A8;
  *(void *)(v4 + 168) = &unk_26C20A5D0;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_20CE4CD38(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF150, a2);
  *(void *)a1 = off_26C20A418;
  *(void *)(a1 + 848) = off_26C20A708;
  *(void *)(a1 + 160) = &unk_26C20A5A8;
  *(void *)(a1 + 168) = &unk_26C20A5D0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a2 + 192)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    kaldi::NewCuSubOrMat<short>();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = 162;
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = 163;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = 165;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = 168;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE4DCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::nnet1::UpdatableComponent *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *a14;
  if (*a14)
  {
    *((void *)v30 + 64) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *a15;
  if (*a15)
  {
    *((void *)v30 + 61) = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  uint64_t v35 = *((void *)v30 + 27);
  *((void *)v30 + 27) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *((void *)v30 + 25);
  *((void *)v30 + 25) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a19);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v30, (uint64_t *)&off_26C1FF150);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a21);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = &unk_26C20A5A8;
  *(void *)(a1 + 168) = &unk_26C20A5D0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v9 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 168);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_20CE4E47C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_20CE4E518(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_26C2108C8;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_26C20C940;
  *(void *)(a1 + 896) = &off_26C20B6C0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_26C1FF130, a2);
  *(void *)a1 = off_26C209FF8;
  *(void *)(a1 + 848) = off_26C20A2E8;
  *(void *)(a1 + 160) = &unk_26C20A188;
  *(void *)(a1 + 168) = &unk_26C20A1B0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = 259;
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = 260;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = 262;
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = 265;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_20CE4F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,kaldi::nnet1::UpdatableComponent *a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  MEMORY[0x2105595E0](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v34);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  uint64_t v36 = *a15;
  if (*a15)
  {
    *((void *)v33 + 64) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *a23;
  if (*a23)
  {
    *((void *)v33 + 61) = v37;
    operator delete(v37);
  }
  a32 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  uint64_t v38 = *((void *)v33 + 27);
  *((void *)v33 + 27) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
  uint64_t v39 = *((void *)v33 + 25);
  *((void *)v33 + 25) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a31, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v33, (uint64_t *)&off_26C1FF130);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_20CE4F3D4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v72 = -1;
  int v73 = v4;
  int v70 = 0x40000000;
  int v71 = -1073741824;
  int v68 = -1073741824;
  int v69 = 1036831949;
  int v67 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v65);
  memset(v64, 0, sizeof(v64));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v5, v6);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      uint64_t v9 = v64;
      switch(HIBYTE(v64[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v10 = v64[0] == 0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 472);
          if (v10) {
            goto LABEL_202;
          }
          BOOL v12 = v64[0] == 0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (v12) {
            goto LABEL_202;
          }
          BOOL v13 = v64[0] == 0x6C6C654378614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 476);
          if (v13) {
            goto LABEL_202;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v64[0] == 0x6C6C65436D754E3CLL && LOWORD(v64[1]) == 15987) {
            goto LABEL_205;
          }
          if (v64[0] != 0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v64[0] == 0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v64[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v64[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v33 = v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v64[0] == 0x6E6569646172473CLL && v64[1] == 0x7079546D726F4E74 && LOWORD(v64[2]) == 15973) {
            goto LABEL_204;
          }
          if (v64[0] == 0x4374757074754F3CLL && v64[1] == 0x65756C61566C6C65 && LOWORD(v64[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v64[0] != 0x47746567726F463CLL || v64[1] != 0x4D73616942657461 || LODWORD(v64[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v64[0] != 0x47746567726F463CLL
            || v64[1] != 0x5273616942657461
            || *(void *)((char *)&v64[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v22 = v64[0] == 0x7463656A6F72503CLL
             && v64[1] == 0x6E7261654C6E6F69
             && v64[2] == 0x66656F4365746152
             && v65.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v14 = v64[1];
    switch(v64[1])
    {
      case 9:
        BOOL v15 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 472);
        if (!v15)
        {
          BOOL v16 = *(void *)v64[0] == 0x6461724778614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (!v16) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v64[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v64[0] + 8) == 15987)
        {
LABEL_205:
          long long v56 = &v73;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v56, v7, v8);
          break;
        }
        if (*(void *)v64[0] != 0x61654D736169423CLL || *(_WORD *)(v64[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v11 = &v71;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v11, v7, v8);
        break;
      case 0xBLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)(v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v11 = &v70;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)(v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v11 = &v69;
        goto LABEL_202;
      case 0xFLL:
        BOOL v33 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)(v64[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v11 = (int *)(a1 + 464);
        if (!v33) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v64[0] == 0x6E6569646172473CLL
          && *(void *)(v64[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v64[0] + 16) == 15973)
        {
LABEL_204:
          uint64_t v46 = &v65;
          goto LABEL_150;
        }
        if (v64[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v37 = *(void *)v64[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 476);
        if (v37) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v14 = v64[1];
LABEL_121:
        if (v14 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v64[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v64[0] + 8) == 1046766949)
        {
LABEL_206:
          long long v56 = &v72;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v14 = v64[1];
LABEL_127:
        if (v14 == 8)
        {
          if (*(void *)v64[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v14 = v64[1];
        }
        if (v14 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v64[0] != 0x4374757074754F3CLL
          || *(void *)(v64[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v64[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v14 = v64[1];
LABEL_139:
          if (v14 != 19) {
            goto LABEL_209;
          }
          uint64_t v9 = (uint64_t *)v64[0];
LABEL_141:
          uint64_t v41 = *v9;
          uint64_t v42 = v9[1];
          uint64_t v43 = *(uint64_t *)((char *)v9 + 11);
          BOOL v44 = v41 == 0x61725474696E493CLL && v42 == 0x79546D726F66736ELL;
          if (!v44 || v43 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Invalid token ", 14);
              if (v64[2] >= 0) {
                uint64_t v58 = v64;
              }
              else {
                uint64_t v58 = (void *)v64[0];
              }
              if (v64[2] >= 0) {
                uint64_t v59 = HIBYTE(v64[2]);
              }
              else {
                uint64_t v59 = v64[1];
              }
              uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(a1, v73);
          }
          uint64_t v46 = &v66;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v46, v7, v8);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v64[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v11 = &v68;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x5273616942657461
          || *(void *)(v64[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v11 = &v67;
        goto LABEL_202;
      case 0x19:
        BOOL v22 = *(void *)v64[0] == 0x7463656A6F72503CLL
           && *(void *)(v64[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v64[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v64[0] + 24) == 62;
LABEL_200:
        uint64_t v11 = (int *)(a1 + 468);
        if (!v22) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_20CE500D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_20CE50754()
{
}

void sub_20CE50770(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, unsigned int *a4, float a5)
{
  uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
  uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v11, 0, 0);
  unint64_t v12 = 0;
LABEL_2:
  if ((uint64_t)v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v12 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v12 * v26;
        if (v12 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a4, (uint64_t)&v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_20CE50970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v38 = *(_DWORD *)(a1 + 176);
    int v39 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v38 < v39)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      BOOL v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") should not be less than output dim (", 38);
      long long v45 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, ").");
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 184);
      *(unsigned char *)(a1 + 224) = v38 > v39;
      if (!v40) {
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48, v6, v7);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      switch(HIBYTE(v49))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v48 != 0x6C6C65436D754E3CLL || WORD4(v48) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v27 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 464);
          if (v27) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v48 == 0x4374757074754F3CLL
            && *((void *)&v48 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v49 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v49) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v49) != 18) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v48 == 0x6E6569646172473CLL && *((void *)&v48 + 1) == 0x7079546D726F4E74;
          if (!v25 || (unsigned __int16)v49 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v49) != 25) {
            goto LABEL_138;
          }
          BOOL v22 = (void)v48 == 0x7463656A6F72503CLL
             && *((void *)&v48 + 1) == 0x6E7261654C6E6F69
             && v49 == 0x66656F4365746152
             && v50 == 62;
          uint64_t v14 = (float *)(a1 + 468);
          if (v22) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v28 = (void)v48 == 0x6D726F4E78614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 472);
          if (v28) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
          BOOL v29 = (void)v48 == 0x6C6C654378614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 476);
          if (!v29) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 10
      && (*(void *)v48 == 0x6C6C65436D754E3CLL ? (BOOL v12 = *(unsigned __int16 *)(v48 + 8) == 15987) : (BOOL v12 = 0), v12))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v8, v9);
    }
    else
    {
      if (*((void *)&v48 + 1) == 15)
      {
        BOOL v13 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
        uint64_t v14 = (float *)(a1 + 464);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 == 25)
      {
        BOOL v17 = *(void *)v48 == 0x7463656A6F72503CLL
           && *(void *)(v48 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v48 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v48 + 24) == 62;
        uint64_t v14 = (float *)(a1 + 468);
        if (v17) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 != 9) {
        goto LABEL_47;
      }
      BOOL v18 = *(void *)v48 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 472);
      if (v18) {
        goto LABEL_127;
      }
      uint64_t v11 = *((void *)&v48 + 1);
      if (*((void *)&v48 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v19 = *(void *)v48 == 0x6C6C654378614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 476);
      if (v19) {
        goto LABEL_127;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v49) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v49) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v48 != 0x3E706565506F4E3CLL)
        {
          if ((v49 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v11 = *((void *)&v48 + 1);
          if (v11 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v48 == 0x4374757074754F3CLL
            && *(void *)(v48 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v48 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v11 = *((void *)&v48 + 1);
          if (*((void *)&v48 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v48 == 0x6E6569646172473CLL
            && *(void *)(v48 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v48 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v47 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v47) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v49 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v49) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v34 = &v48;
          }
          else
          {
LABEL_120:
            if (v11 != 9) {
              goto LABEL_138;
            }
            uint64_t v34 = (long long *)v48;
          }
          uint64_t v35 = *(void *)v34;
          int v36 = *((unsigned __int8 *)v34 + 8);
          BOOL v37 = v35 == 0x6461724778614D3CLL && v36 == 62;
          uint64_t v14 = (float *)(a1 + 152);
          if (!v37)
          {
LABEL_138:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v49 >= 0) {
              uint64_t v42 = &v48;
            }
            else {
              uint64_t v42 = (long long *)v48;
            }
            if (v49 >= 0) {
              uint64_t v43 = HIBYTE(v49);
            }
            else {
              uint64_t v43 = *((void *)&v48 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v14, v8, v9);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v11 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v48 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_20CE51770()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  }
  return result;
}

void sub_20CE51960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v8, a2, a3, a4);
  uint64_t v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    uint64_t v14 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<short>::Write(v14, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  int v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  uint64_t v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20);
    uint64_t v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16)
                       * v11);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    int v13 = kaldi::QuantizedMatrixBase<short>::NumRows(v12);
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  unsigned int v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  int v11 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v16 = v14 * v12;
  int v38 = *(void **)a2;
  LODWORD(v39) = v10;
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v17);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v18 = v16 + v10;
  if (v16 + v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v10);
  LODWORD(v39) = v16;
  BOOL v19 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v19);
  if (a1[208])
  {
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v20;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    unsigned int v22 = v21 + v18;
    if (v21 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_11;
    }
    int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v39) = v21;
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v23, v24, v25, v26);
    unsigned int v18 = v22;
  }
  int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v27 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v39) = v27;
  BOOL v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v38, v29, v30, v31);
  if (!a1[224]) {
    return;
  }
  unsigned int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v33 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v34 = kaldi::QuantizedMatrixBase<short>::NumRows(v33);
  uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v36 = kaldi::QuantizedMatrixBase<short>::NumCols(v35);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v36 * v34 + v32 > *(_DWORD *)(a2 + 8)) {
LABEL_11:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  int v38 = (void *)(*(void *)a2 + 4 * (int)v32);
  LODWORD(v39) = v36 * v34;
  BOOL v37 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v37);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(void *a1, uint64_t a2)
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(unsigned char *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 208))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x222, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  unsigned int v10 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10);
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  int v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  int v16 = v13 * v11;
  BOOL v33 = *(char **)a2;
  LODWORD(v34) = v9;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v14, &v33);
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v18 = v16 + v9;
  if (v16 + v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v9);
  LODWORD(v34) = v16;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v17, &v33);
  if (a1[208])
  {
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v19;
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if (v20 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_12;
    }
    BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v34) = v20;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v21, &v33);
    v18 += v20;
  }
  unsigned int v22 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v25 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v34) = v25;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v22, (uint64_t)&v33, v23, v24, v15);
  if (!a1[224]) {
    return result;
  }
  unsigned int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v28 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v29 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
  uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v31 = kaldi::QuantizedMatrixBase<short>::NumCols(v30) * v29;
  unsigned int v32 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v31 + v27 > *(_DWORD *)(a2 + 8)) {
LABEL_12:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v27);
  LODWORD(v34) = v31;
  return (_DWORD *)kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v32, &v33);
}

_DWORD *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  uint64_t v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  float v7 = kaldi::QuantizedMatrixBase<short>::Sum(v2, v3, v4, v5, v6);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  float v13 = v7 + kaldi::QuantizedMatrixBase<short>::Sum(v8, v9, v10, v11, v12);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v19 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    float v13 = v13 + kaldi::QuantizedMatrixBase<short>::Sum(v19, v20, v21, v22, v23);
  }
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  double v25 = kaldi::CuVectorBase<float>::Sum(v24);
  return v13 + *(float *)&v25;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v6, v3, v5, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

void sub_20CE523E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v5 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  uint64_t v6 = kaldi::QuantizedMatrixBase<short>::NumRows(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  uint64_t v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((uint64_t)va, v6, v8, 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_20CE5243C()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0) + 20);
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v2, *(unsigned int *)(v3 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v20, 111, v5, v6, v1, 1.0);
  }
  uint64_t v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0) + 16);
  memset(&v19[1], 0, 24);
  v19[0] = off_26C2111C8;
  kaldi::CuVector<float>::Resize((uint64_t)v19, v7, 1u, v8, v9);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v10, (uint64_t)v19, v11, v12, v13, v1, 1.0);
  if (*(unsigned char *)(v0 + 224))
  {
    uint64_t v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    uint64_t v15 = kaldi::QuantizedMatrixBase<short>::NumRows(v14);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    uint64_t v17 = kaldi::QuantizedMatrixBase<short>::NumCols(v16);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v15, v17, 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<short>::AddMat();
  }
  kaldi::CuVector<float>::~CuVector(v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_20CE52578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(void *a1)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  float v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumRows(v13);
  uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  unsigned int v16 = kaldi::QuantizedMatrixBase<short>::NumCols(v15) * v14;
  uint64_t v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v18 = kaldi::QuantizedMatrixBase<short>::NumRows(v17);
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v20 = kaldi::QuantizedMatrixBase<short>::NumCols(v19);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  int v22 = v20;
  long long v57 = *(char **)a4;
  LODWORD(v58) = v16;
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v54, v23, 111, v24, v25);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v57, (uint64_t)&v54);
  int v26 = v22 * v18;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v54);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v27 = v26 + v16;
  if (v26 + v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v54 = *(void *)a4 + 4 * (int)v16;
  LODWORD(v55) = v26;
  uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v28, v29, v30, v31);
  if (a1[208])
  {
    int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v32;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unsigned int v34 = v33 + v27;
    if (v33 + v27 > *(_DWORD *)(a4 + 8)) {
      goto LABEL_14;
    }
    uint64_t v54 = *(void *)a4 + 4 * (int)v27;
    LODWORD(v55) = v33;
    uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v35, v36, v37, v38);
    unsigned int v27 = v34;
  }
  int v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (v39 + v27 > *(_DWORD *)(a4 + 8)) {
LABEL_14:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  uint64_t v54 = *(void *)a4 + 4 * (int)v27;
  LODWORD(v55) = v39;
  uint64_t v40 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v40, (uint64_t)&v54, v41, v42, v43);
  if (a1[224])
  {
    unsigned int v44 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v27;
    long long v45 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v46 = kaldi::QuantizedMatrixBase<short>::NumRows(v45);
    uint64_t v47 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v48 = kaldi::QuantizedMatrixBase<short>::NumCols(v47);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    if (v48 * v46 + v44 <= *(_DWORD *)(a4 + 8))
    {
      uint64_t v54 = *(void *)a4 + 4 * (int)v44;
      LODWORD(v55) = v48 * v46;
      uint64_t v49 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v49, v50, v51, v52);
      return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_20CE5291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v50);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v50, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v3);
  if ((v49 & 0x80u) == 0) {
    unint64_t v4 = v48;
  }
  else {
    unint64_t v4 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v5 = v49;
  }
  else {
    uint64_t v5 = (uint64_t)v48[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v8);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = v46;
  }
  else {
    uint64_t v9 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = (uint64_t)v46[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  float v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v45 & 0x80u) == 0) {
    int v18 = v44;
  }
  else {
    int v18 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v19 = v45;
  }
  else {
    uint64_t v19 = (uint64_t)v44[1];
  }
  int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::CuSubVector<float>::CuSubVector(&v39, v22, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v23);
  kaldi::nnet1::MomentStatistics<float>(&v39, v24, v25, v26, v27);
  if ((v43 & 0x80u) == 0) {
    uint64_t v28 = __p;
  }
  else {
    uint64_t v28 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v29 = v43;
  }
  else {
    uint64_t v29 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    int v32 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v33 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    unsigned int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Projection weights:", 21);
    uint64_t v35 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<short>(v35);
    uint64_t v36 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v37 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  std::stringbuf::str();
  v50[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v50 + *(void *)(v50[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v50[1] = MEMORY[0x263F8C318] + 16;
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v52);
}

void sub_20CE53190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    int v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0) {
          uint64_t v3 = v90;
        }
        else {
          uint64_t v3 = (void **)v90[0];
        }
        if ((v91 & 0x80u) == 0) {
          std::string::size_type v4 = v91;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v90[1];
        }
        uint64_t v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0) {
          uint64_t v7 = v88;
        }
        else {
          uint64_t v7 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v8 = v89;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v88[1];
        }
        uint64_t v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0) {
          uint64_t v11 = v86;
        }
        else {
          uint64_t v11 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v12 = v87;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v86[1];
        }
        float v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0) {
          uint64_t v15 = v84;
        }
        else {
          uint64_t v15 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v16 = v85;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v84[1];
        }
        uint64_t v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v19 = v82;
        }
        else {
          uint64_t v19 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v20 = v83;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v82[1];
        }
        uint64_t v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0) {
          uint64_t v24 = v80;
        }
        else {
          uint64_t v24 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v25 = v81;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v80[1];
        }
        uint64_t v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          uint64_t v28 = v78;
        }
        else {
          uint64_t v28 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v29 = v79;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v78[1];
        }
        uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0) {
          uint64_t v33 = v76;
        }
        else {
          uint64_t v33 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v34 = v77;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v76[1];
        }
        uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v37 = v74;
        }
        else {
          uint64_t v37 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v38 = v75;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v74[1];
        }
        int v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0) {
          int v46 = __p;
        }
        else {
          int v46 = (void **)__p[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v47 = v73;
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        int v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        int64_t v103 = v48->__r_.__value_.__r.__words[2];
        long long v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0) {
          uint64_t v50 = (const std::string::value_type *)&v102;
        }
        else {
          uint64_t v50 = (const std::string::value_type *)v102;
        }
        if (v103 >= 0) {
          std::string::size_type v51 = HIBYTE(v103);
        }
        else {
          std::string::size_type v51 = *((void *)&v102 + 1);
        }
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if ((char)v73 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v91 < 0) {
          operator delete(v90[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v53 = &v100;
          }
          else {
            long long v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          int64_t v103 = v55->__r_.__value_.__r.__words[2];
          long long v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            long long v57 = (const std::string::value_type *)&v102;
          }
          else {
            long long v57 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v58 = HIBYTE(v103);
          }
          else {
            std::string::size_type v58 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v100;
          }
          else {
            uint64_t v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          int64_t v103 = v62->__r_.__value_.__r.__words[2];
          long long v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            uint64_t v64 = (const std::string::value_type *)&v102;
          }
          else {
            uint64_t v64 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v65 = HIBYTE(v103);
          }
          else {
            std::string::size_type v65 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    std::string v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v67 = &v105;
    }
    else {
      int v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
    }
    int v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_20CE53984(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      float v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      uint64_t v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      uint64_t v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        int v39 = __p;
      }
      else {
        int v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      unsigned __int8 v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        uint64_t v43 = (const std::string::value_type *)&v86;
      }
      else {
        uint64_t v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v84;
        }
        else {
          unsigned __int8 v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v89;
  }
  else {
    uint64_t v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_20CE54264(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE54470()
{
}

void sub_20CE54478()
{
}

void sub_20CE54480()
{
}

void sub_20CE54488()
{
}

void sub_20CE54490()
{
}

void sub_20CE54498()
{
}

void sub_20CE544A0()
{
}

void sub_20CE544A8()
{
}

void sub_20CE544B0()
{
}

void sub_20CE544B8()
{
}

void sub_20CE544C0()
{
}

void sub_20CE544C8()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      float v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      uint64_t v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      uint64_t v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v70;
        }
        else {
          uint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          unsigned __int8 v41 = (const std::string::value_type *)&v72;
        }
        else {
          unsigned __int8 v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  int v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_20CE54A54(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_20CE54C20()
{
}

void sub_20CE54C28()
{
}

void sub_20CE54C30()
{
}

void sub_20CE54C38()
{
}

void sub_20CE54C40()
{
}

void sub_20CE54C48()
{
}

void sub_20CE54C50()
{
}

void sub_20CE54C58()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  int v81 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2BB, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    float v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
  }
  uint64_t v14 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, a4, v5, v14);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = a4;
  uint64_t v83 = a4;
  int v78 = a4;
  if (*(void *)(a1 + 112) == v16)
  {
    int v79 = 0;
  }
  else
  {
    int v18 = *(_DWORD *)(v16 + 32 * a4 + 16);
    if (v18 < 1)
    {
      int v79 = 0;
      uint64_t v17 = a4;
    }
    else
    {
      if (v18 != v5) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2C5, "boundary_[batch_index].Dim() == batch_size", v15);
      }
      uint64_t v17 = a4;
      uint64_t v19 = *(void *)(a1 + 128) + 48 * a4;
      *(void *)(v19 + 32) = v14;
      int v79 = 1;
      kaldi::CuMatrix<float>::Resize(v19, v6, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1u, 0);
    }
  }
  uint64_t v20 = *(void *)(a1 + 248) + 48 * v17;
  uint64_t v82 = *(void *)(a1 + 344) + 48 * v17;
  uint64_t v21 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat<short>(v20, a2, 111, v21, (const char *)0x70, 1.0, 0.0);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v20, v22, v23, v24, v25, 1.0, 1.0);
  if (v81 >= 1)
  {
    int v28 = v17;
    int v29 = 0;
    int v30 = 0;
    uint64_t v80 = a1 + 12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v20, v29, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v20, v29, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v20, v29, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      uint64_t v31 = *(void *)(a1 + 272) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v31, v29, v6, 0, *(_DWORD *)(v31 + 16));
      memset(v98, 0, sizeof(v98));
      std::string v97 = off_26C2096F8;
      memset(v96, 0, sizeof(v96));
      std::string v95 = off_26C2096F8;
      if (v30)
      {
        if (v79)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(a1 + 128) + 48 * (int)v83);
          uint64_t v32 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v32, 0, *(_DWORD *)(v32 + 20), 0, *(_DWORD *)(a1 + 176));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v33 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v33, v29 - v6, v6, 0, *(_DWORD *)(v33 + 16));
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v34);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v95, (uint64_t)&v93, (uint64_t)&v90, 1, v35);
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v36 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v36, 0, *(_DWORD *)(v36 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          int v28 = v83;
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v37);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v90, 1, v38);
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          uint64_t v41 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v41, v29 - v6, v6, 0, *(_DWORD *)(v41 + 16));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_26C2096F8;
          memset(v94, 0, sizeof(v94));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
          int v28 = v83;
        }
      }
      else
      {
        int v28 = v83;
        uint64_t v39 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v39, 0, *(_DWORD *)(v39 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
        *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
        v98[0] = v94[0];
        v98[3] = v94[3];
        std::string v93 = off_26C2096F8;
        memset(v94, 0, sizeof(v94));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
        uint64_t v40 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
        v96[0] = v94[0];
        *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
        v96[3] = v94[3];
        std::string v93 = off_26C2096F8;
        memset(v94, 0, sizeof(v94));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, 0, *(_DWORD *)(v20 + 16));
      std::string::size_type v42 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v93, (uint64_t)&v97, 111, v42, (const char *)0x70, 1.0, 1.0);
      std::string v93 = off_26C2096F8;
      memset(v94, 0, sizeof(v94));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v46 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
        }
        unsigned int v48 = *(_DWORD *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 32);
        v94[0] = *(void *)(v46 + 8);
        std::string v93 = &off_26C209728;
        v94[1] = v48;
        v94[2] = v49;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v95, 111, (uint64_t)&v93, v47, 1.0, 1.0);
        uint64_t v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        }
        unsigned int v52 = *(_DWORD *)(v50 + 16);
        uint64_t v53 = *(void *)(v50 + 32);
        v94[0] = *(void *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        std::string v93 = &off_26C209728;
        v94[1] = v52;
        v94[2] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v105, (uint64_t)&v95, 111, (uint64_t)&v93, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v108, (uint64_t)&v108, v43, v44, v45);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v105, (uint64_t)&v105, v54, v55, v56);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v102, v57, v58, v59, v60);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v108, 111, (uint64_t)&v102, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v105, 111, (uint64_t)&v95, (const char *)0x6F, 1.0, 1.0);
      float v61 = *(float *)(a1 + 476);
      if (v61 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v99, v61);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v99, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v65 + 20) <= 2u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v66);
        }
        unsigned int v67 = *(_DWORD *)(v65 + 16);
        uint64_t v68 = *(void *)(v65 + 32);
        *(void *)&long long v91 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
        uint64_t v90 = &off_26C209728;
        *((void *)&v91 + 1) = v67;
        *(void *)&long long v92 = v68;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v93, (uint64_t)&v99, 111, (uint64_t)&v90, v66, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v93, (uint64_t)&v93, v62, v63, v64);
      uint64_t v69 = *(void *)(a1 + 296) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v69, v29, v6, 0, *(_DWORD *)(v69 + 16));
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v90, (uint64_t)&v99, v70, v71, v72);
      uint64_t v73 = *(void *)(a1 + 320) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v73, v29, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v87, (uint64_t)&v93, 111, (uint64_t)&v90, (const char *)0x6F, 1.0, 0.0);
      if (*(unsigned char *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        int v74 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v84, (uint64_t)&v87, 111, v74, (const char *)0x70, 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v84, (uint64_t)&v87, 111, v75, v76);
      }
      std::string v84 = off_26C2096F8;
      long long v85 = 0u;
      long long v86 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
      int64_t v87 = off_26C2096F8;
      long long v88 = 0u;
      long long v89 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
      uint64_t v90 = off_26C2096F8;
      long long v91 = 0u;
      long long v92 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90);
      std::string v93 = off_26C2096F8;
      memset(v94, 0, sizeof(v94));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      std::string v95 = off_26C2096F8;
      memset(v96, 0, sizeof(v96));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v95);
      std::string v97 = off_26C2096F8;
      memset(v98, 0, sizeof(v98));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v97);
      std::string v99 = off_26C2096F8;
      long long v100 = 0u;
      long long v101 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v99);
      long long v102 = off_26C2096F8;
      long long v103 = 0u;
      long long v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      std::string v105 = off_26C2096F8;
      long long v106 = 0u;
      long long v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      v108 = off_26C2096F8;
      long long v109 = 0u;
      long long v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      ++v30;
      v29 += v6;
    }
    while (v81 != v30);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v82, 111, v26, v27);
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(a1, v78);
}

void sub_20CE55A0C(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_20CE55EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  float v13 = off_26C2096F8;
  long long v14 = 0u;
  long long v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  uint64_t v16 = off_26C2096F8;
  long long v17 = 0u;
  long long v18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
  uint64_t v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(void *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(void *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(void *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(void *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  float v13 = off_26C2096F8;
  long long v14 = 0u;
  long long v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  uint64_t v16 = off_26C2096F8;
  long long v17 = 0u;
  long long v18 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16).n128_u64[0];
  return result;
}

void sub_20CE56124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_26C2096F8;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = off_26C2096F8;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, 0, 1, v6);
    uint64_t v8 = *(void *)(a1 + 104);
    if (*(void *)(a1 + 112) != v8)
    {
      int v9 = *(_DWORD *)(v8 + 16);
      if (v9 >= 1)
      {
        if (v9 != 1) {
          kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x325, "boundary_[0].Dim() == 1", v7);
        }
        uint64_t v10 = *(void *)(a1 + 128);
        *(void *)(v10 + 32) = v6;
        kaldi::CuMatrix<float>::Resize(v10, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
      }
    }
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x320, "ropts_.num_sequences == 1", v5);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  uint64_t v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  int v13 = (int)v10 / (int)v11;
  if ((int)v10 % (int)v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x380, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    long long v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151);
  }
  if (v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x384, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v102 = a5;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(a1, a6, v10, v18);
  uint64_t v21 = a6;
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v23 = 3 * a6;
  uint64_t v24 = *(void *)(a1 + 440) + 16 * v23;
  uint64_t v25 = *(void *)(a1 + 368);
  uint64_t v105 = *(void *)(a1 + 416);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v103 = v24;
  if (*(void *)(a1 + 112) == v26 || (int v27 = *(_DWORD *)(v26 + 32 * v21 + 16), v27 < 1))
  {
    int v106 = 0;
  }
  else
  {
    if (v27 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x390, "boundary_[batch_index].Dim() == batch_size", v20);
    }
    uint64_t v28 = *(void *)(a1 + 128) + 48 * (int)v21;
    *(void *)(v28 + 32) = v18;
    int v106 = 1;
    kaldi::CuMatrix<float>::Resize(v28, v11, *(unsigned int *)(v24 + 16), 1u, 0);
  }
  uint64_t v29 = v22 + 16 * v23;
  uint64_t v30 = v25 + 16 * v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v30, a4, 111, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v151, v29, 0, *(_DWORD *)(v29 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v148, v29, 0, *(_DWORD *)(v29 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  uint64_t v31 = v103;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v139, v103, 0, *(_DWORD *)(v103 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v136, v31, 0, *(_DWORD *)(v31 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v133, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v139, (uint64_t)&v151, (uint64_t)&v142, v32, v33);
  int v34 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, v11, v34, 0, SDWORD2(v137));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v148, v11, v34, 0, SDWORD2(v149));
  uint64_t v35 = *(void *)(a1 + 272) + 48 * (int)v21;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, v35, 0, v34, 0, *(_DWORD *)(v35 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v127, (uint64_t)&v124, (uint64_t)&v121, v36, v37);
  uint64_t v121 = off_26C2096F8;
  long long v122 = 0u;
  long long v123 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v121);
  uint64_t v124 = off_26C2096F8;
  long long v125 = 0u;
  long long v126 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
  v127 = off_26C2096F8;
  long long v128 = 0u;
  long long v129 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, 0, v11, 0, SDWORD2(v137));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
  v127 = off_26C2096F8;
  long long v128 = 0u;
  long long v129 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  if (v106)
  {
    uint64_t v40 = *(void *)(a1 + 128) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
    int v41 = v13 - 1;
    int v42 = v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v136, v42, v11, 0, SDWORD2(v137));
      kaldi::CuSubVector<float>::CuSubVector(&v121, *(void *)(a1 + 104) + 32 * v21, v42, v11, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v127, (uint64_t)&v121, 0, v44);
      uint64_t v124 = off_26C2096F8;
      long long v125 = 0u;
      long long v126 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
      v42 += v11;
      --v41;
    }
    while (v41);
    v127 = off_26C2096F8;
    long long v128 = 0u;
    long long v129 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v133, (uint64_t)&v145, *(void *)(a1 + 296) + 48 * (int)v21, v38, v39);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v130, (uint64_t)&v142, (uint64_t)&v151, v45, v46);
  uint64_t v47 = v105 + 16 * v23;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(a1 + 296) + 48 * (int)v21, (uint64_t)&v145, v48, v49);
  int v50 = v13 - 1;
  int v104 = v13 - 1;
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v30, v50 * v11, v11, 0, *(_DWORD *)(v30 + 16));
    uint64_t v51 = *(void *)(a1 + 392) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v51, v50 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v124, (uint64_t)&v127, 111, v54, (const char *)0x6F, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v124, (uint64_t)&v127, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, (uint64_t)&v133, v50 * v11, v11, 0, SDWORD2(v134));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v121, (uint64_t)&v124, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v118, v47, v50 * v11, v11, 0, *(_DWORD *)(v47 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v118, (uint64_t)&v124, v58, v59, v60);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      }
      unsigned int v63 = *(_DWORD *)(v61 + 16);
      uint64_t v64 = *(void *)(v61 + 32);
      v117[0] = *(void *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      uint64_t v116 = &off_26C209728;
      v117[1] = v63;
      v117[2] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v121, 111, (uint64_t)&v116, v62, 1.0, 1.0);
    }
    if (v50 < v104)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v47, v11 + v11 * v50, v11, 0, *(_DWORD *)(v47 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, (uint64_t)&v148, v11 + v11 * v50, v11, 0, SDWORD2(v149));
      if (v106)
      {
        uint64_t v65 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, v65, 0, *(_DWORD *)(v65 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v112);
        kaldi::CuSubVector<float>::CuSubVector(&v110, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v66);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v110, 1, v67);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v113[1];
        v117[0] = v113[0];
        v117[3] = v113[3];
        uint64_t v68 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, v68, 0, *(_DWORD *)(v68 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v110);
        kaldi::CuSubVector<float>::CuSubVector(v109, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v69);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v110, (uint64_t)&v114, (uint64_t)v109, 1, v70);
        v115[0] = v111[0];
        *(_OWORD *)&v115[1] = *(_OWORD *)&v111[1];
        v115[3] = v111[3];
        long long v110 = off_26C2096F8;
        memset(v111, 0, sizeof(v111));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v110);
        uint64_t v112 = off_26C2096F8;
        memset(v113, 0, sizeof(v113));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v112);
      }
      if (*(unsigned char *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, (uint64_t)&v136, v11 + v11 * v50, v11, 0, SDWORD2(v137));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, (uint64_t)&v139, v11 + v11 * v50, v11, 0, SDWORD2(v140));
        if (v106)
        {
          uint64_t v71 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v109, v71, 0, *(_DWORD *)(v71 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v109);
          kaldi::CuSubVector<float>::CuSubVector(v108, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v72);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v109, (uint64_t)&v112, (uint64_t)v108, 1, v73);
          *(_OWORD *)&v113[1] = *(_OWORD *)&v109[2];
          v113[0] = v109[1];
          v113[3] = v109[4];
          uint64_t v74 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v108, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v108);
          kaldi::CuSubVector<float>::CuSubVector(v107, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v75);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v108, (uint64_t)&v110, (uint64_t)v107, 1, v76);
          v111[0] = v108[1];
          *(_OWORD *)&v111[1] = *(_OWORD *)&v108[2];
          v111[3] = v108[4];
          v108[0] = off_26C2096F8;
          memset(&v108[1], 0, 32);
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v108);
          v109[0] = off_26C2096F8;
          memset(&v109[1], 0, 32);
          kaldi::CuMatrixBase<float>::~CuMatrixBase(v109);
        }
        uint64_t v77 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v77 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v78);
        }
        unsigned int v79 = *(_DWORD *)(v77 + 16);
        uint64_t v80 = *(void *)(v77 + 32);
        v109[1] = *(void *)(v77 + 8) + 4 * *(int *)(v77 + 24);
        v109[0] = &off_26C209728;
        v109[2] = v79;
        v109[3] = v80;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v112, 111, (uint64_t)v109, v78, 1.0, 1.0);
        uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v81 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v82);
        }
        unsigned int v83 = *(_DWORD *)(v81 + 16);
        uint64_t v84 = *(void *)(v81 + 32);
        v109[1] = *(void *)(v81 + 8);
        v109[0] = &off_26C209728;
        v109[2] = v83;
        v109[3] = v84;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v110, 111, (uint64_t)v109, v82, 1.0, 1.0);
        long long v110 = off_26C2096F8;
        memset(v111, 0, sizeof(v111));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v110);
        uint64_t v112 = off_26C2096F8;
        memset(v113, 0, sizeof(v113));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v112);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v118, (uint64_t)&v116, 111, (uint64_t)&v114, (const char *)0x6F, 1.0, 1.0);
      uint64_t v114 = off_26C2096F8;
      memset(v115, 0, sizeof(v115));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v139, v50 * v11, v11, 0, SDWORD2(v140));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v85, v86, v87);
    uint64_t v116 = off_26C2096F8;
    memset(v117, 0, sizeof(v117));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v130, v50 * v11, v11, 0, SDWORD2(v131));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v88, v89, v90);
    uint64_t v116 = off_26C2096F8;
    memset(v117, 0, sizeof(v117));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    if (v50 <= 0)
    {
      int v97 = v50 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v136, v50 * v11, v11, 0, SDWORD2(v137));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v91, v92, v93);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v103, v50 * v11, v11, 0, *(_DWORD *)(v103 + 16));
      if (v106)
      {
        uint64_t v94 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v94, 0, *(_DWORD *)(v94 + 20), 0, v117[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v114);
        kaldi::CuSubVector<float>::CuSubVector(&v112, *(void *)(a1 + 104) + 32 * v21, v50 * v11, v11, v95);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v112, 1, v96);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v115[1];
        v117[0] = v115[0];
        v117[3] = v115[3];
        uint64_t v114 = off_26C2096F8;
        memset(v115, 0, sizeof(v115));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      }
      int v97 = v50 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v30, (v50 - 1) * v11, v11, 0, *(_DWORD *)(v30 + 16));
      std::string v98 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v114, (uint64_t)&v116, 111, v98, (const char *)0x6F, 1.0, 1.0);
      uint64_t v114 = off_26C2096F8;
      memset(v115, 0, sizeof(v115));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v114);
      uint64_t v116 = off_26C2096F8;
      memset(v117, 0, sizeof(v117));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v116);
    }
    uint64_t v118 = off_26C2096F8;
    long long v119 = 0u;
    long long v120 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v118);
    uint64_t v121 = off_26C2096F8;
    long long v122 = 0u;
    long long v123 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v121);
    uint64_t v124 = off_26C2096F8;
    long long v125 = 0u;
    long long v126 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
    v127 = off_26C2096F8;
    long long v128 = 0u;
    long long v129 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v127);
    BOOL v99 = v50 <= 0;
    int v50 = v97;
  }
  while (!v99);
  if (v102)
  {
    long long v100 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat<short>(v102, v103, 111, v100, (const char *)0x6F, 1.0, 0.0);
  }
  v130 = off_26C2096F8;
  long long v131 = 0u;
  long long v132 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
  v133 = off_26C2096F8;
  long long v134 = 0u;
  long long v135 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v133);
  v136 = off_26C2096F8;
  long long v137 = 0u;
  long long v138 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
  v139 = off_26C2096F8;
  long long v140 = 0u;
  long long v141 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v139);
  v142 = off_26C2096F8;
  long long v143 = 0u;
  long long v144 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v142);
  v145 = off_26C2096F8;
  long long v146 = 0u;
  long long v147 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v145);
  v148 = off_26C2096F8;
  long long v149 = 0u;
  long long v150 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v148);
  v151 = off_26C2096F8;
  long long v152 = 0u;
  long long v153 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v151).n128_u64[0];
  return result;
}

void sub_20CE57CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = off_26C2096F8;
  a72 = 0u;
  *(_OWORD *)&STACK[0x208] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a71);
  STACK[0x218] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x220] = 0u;
  *(_OWORD *)&STACK[0x230] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x218]);
  STACK[0x240] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x248] = 0u;
  *(_OWORD *)&STACK[0x258] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x240]);
  STACK[0x268] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x270] = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x268]);
  STACK[0x290] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x298] = 0u;
  *(_OWORD *)&STACK[0x2A8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x290]);
  STACK[0x2B8] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2B8]);
  STACK[0x2E0] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x2E8] = 0u;
  *(_OWORD *)&STACK[0x2F8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2E0]);
  STACK[0x308] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x308]);
  STACK[0x330] = (unint64_t)off_26C2096F8;
  *(_OWORD *)&STACK[0x338] = 0u;
  *(_OWORD *)&STACK[0x348] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x330]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_20CE58510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 80) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x40D, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x411, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  uint64_t v38 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 440) + 48 * v9;
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, v14, 0, *(_DWORD *)(v14 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, v14, 0, *(_DWORD *)(v14 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v14, 0, *(_DWORD *)(v14 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  }
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, v14, CblasTrans, a2, (const char *)0x6F, 1.0, v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v9);
  int v18 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v14, v7, v8 - v7, 0, *(_DWORD *)(v14 + 16));
  uint64_t v19 = *(void *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v19, 0, v8 - v7, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v17, (uint64_t)&v46, CblasTrans, (uint64_t)&v43, (const char *)0x6F, 1.0, v15);
  uint64_t v43 = off_26C2096F8;
  long long v44 = 0u;
  long long v45 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
  uint64_t v46 = off_26C2096F8;
  long long v47 = 0u;
  long long v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v20, v14, 1.0, v15, v21, v22, v23);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v24 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
    }
    unsigned int v26 = *(_DWORD *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 32);
    uint64_t v40 = *(void *)(v24 + 8);
    uint64_t v39 = &off_26C209728;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v55, v7, v18, 0, SDWORD2(v56));
    uint64_t v28 = v38 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    uint64_t v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v29 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v30);
    }
    unsigned int v31 = *(_DWORD *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 32);
    uint64_t v40 = *(void *)(v29 + 8) + 4 * *(int *)(v29 + 24);
    uint64_t v39 = &off_26C209728;
    uint64_t v41 = v31;
    uint64_t v42 = v32;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v52, v7, v18, 0, SDWORD2(v53));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    uint64_t v46 = off_26C2096F8;
    long long v47 = 0u;
    long long v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v33 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
    }
    unsigned int v35 = *(_DWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    *(void *)&long long v47 = *(void *)(v33 + 8) + 8 * *(int *)(v33 + 24);
    uint64_t v46 = &off_26C209728;
    *((void *)&v47 + 1) = v35;
    *(void *)&long long v48 = v36;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v46, (uint64_t)&v49, 112, v28, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v37, *(void *)(a1 + 368) + 48 * v9, CblasTrans, *(void *)(a1 + 320) + 48 * v9, (const char *)0x6F, 1.0, v15);
  }
  uint64_t v49 = off_26C2096F8;
  long long v50 = 0u;
  long long v51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
  uint64_t v52 = off_26C2096F8;
  long long v53 = 0u;
  long long v54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
  uint64_t v55 = off_26C2096F8;
  long long v56 = 0u;
  long long v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
}

void sub_20CE58C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27,void (**a28)(),long long a29,long long a30,void (**a31)(),long long a32,long long a33)
{
  a25 = off_26C2096F8;
  a26 = 0u;
  a27 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  a28 = off_26C2096F8;
  a29 = 0u;
  a30 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a28);
  a31 = off_26C2096F8;
  a32 = 0u;
  a33 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a31);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_20CE5967C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1116);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = (void *)(a1 + 104);
  if (v7 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v7 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  int v13 = (_DWORD *)(*v8 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6AE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B6, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_26C209728;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DF, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E0, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_26C209728;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E8, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_26C209728;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v23[1] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v25);
}

void sub_20CE59FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x59A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v8 = a3;
  int v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v23, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 656) + 48 * a2, v8);
      uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 680) + 48 * a2, v8);
      uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(void *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v18 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, v18, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(void *)(a1 + 656) + 48 * v24), v8, v26, v27, v28);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v29, (unsigned int *)(*(void *)(a1 + 680) + 48 * v24), v8, v30, v31, v32);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, (_DWORD *)(*(void *)(a1 + 728) + 32 * v24), v34, v35, v36, v8);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v37, (unsigned int *)(*(void *)(a1 + 704) + 48 * v24), v8, v38, v39, v40);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
      long long v45 = (unsigned int *)(*(void *)(a1 + 752) + 48 * v24);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v41, v45, v8, v42, v43, v44);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v7);
  int v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v7);
  int v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    int v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1532);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Check(uint64_t a1)
{
  unint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    uint64_t v9 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v9);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  int v4 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    uint64_t v15 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v15);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      uint64_t v25 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16) != 4
                                                                                               * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    if (kaldi::QuantizedMatrixBase<short>::NumRows(v6) == *(_DWORD *)(a1
                                                                                   + *(void *)(*(void *)a1 - 24)
                                                                                   + 12))
    {
      uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      int v31 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      uint64_t v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumRows(v26);
      uint64_t v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_20CE5AE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6 = *(float *)(a1 + 64);
  float v7 = *(float *)(a1 + 68);
  uint64_t v8 = a1 + *(void *)(*(void *)a1 - 24);
  float v9 = *(float *)(v8 + 72);
  int v10 = *(_DWORD *)(v8 + 76);
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 32) = a2;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 32) = a2;
  }
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 24) = a2;
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 32) = a2;
  }
  int v12 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  if (a3 >= 0) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  if (v12 == 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  if ((int)v14 > v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x476, "batch_index <= opts_.num_subbatches", v11);
  }
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14) + 24) = a2;
  *(void *)(*(void *)(a1 + 656) + 48 * (int)v14 + 32) = a2;
  *(void *)(*(void *)(a1 + 680) + 48 * (int)v14 + 32) = a2;
  *(void *)(*(void *)(a1 + 728) + 32 * (int)v14 + 24) = a2;
  if (*(unsigned char *)(a1 + 208))
  {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14) + 32) = a2;
    *(void *)(*(void *)(a1 + 704) + 48 * (int)v14 + 32) = a2;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14) + 32) = a2;
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14) + 32) = a2;
  }
  uint64_t v18 = a1 + 80;
  if (v14 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
    kaldi::CuMatrixBase<float>::SetZero(v19);
    uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
    kaldi::CuMatrixBase<float>::SetZero(v20);
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14);
    kaldi::CuVectorBase<float>::SetZero(v21);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14);
      kaldi::CuMatrixBase<float>::SetZero(v22);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
      kaldi::CuMatrixBase<float>::SetZero(v23);
    }
    uint64_t v24 = *(void *)a1;
    if (*(int *)(v18 + *(void *)(*(void *)a1 - 24)) >= 1)
    {
      int v25 = 0;
      do
      {
        uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
        uint64_t v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v25);
        kaldi::CuMatrixBase<float>::AddMat(v26, v27, 111, v28, v29, 1.0, 1.0);
        uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
        uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v25);
        kaldi::CuMatrixBase<float>::AddMat(v30, v31, 111, v32, v33, 1.0, 1.0);
        uint64_t v34 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14);
        uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v25);
        kaldi::CuVectorBase<float>::AddVec(v34, v35, v36, v37, v38, 1.0, 1.0);
        if (*(unsigned char *)(a1 + 208))
        {
          uint64_t v39 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14);
          uint64_t v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v25);
          kaldi::CuMatrixBase<float>::AddMat(v39, v40, 111, v41, v42, 1.0, 1.0);
        }
        if (*(unsigned char *)(a1 + 224))
        {
          uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
          uint64_t v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v25);
          kaldi::CuMatrixBase<float>::AddMat(v43, v44, 111, v45, v46, 1.0, 1.0);
        }
        ++v25;
        uint64_t v24 = *(void *)a1;
      }
      while (v25 < *(_DWORD *)(v18 + *(void *)(*(void *)a1 - 24)));
    }
    long long v47 = *(int **)(a1 + 480);
    v47[(int)v14] = 0;
    if ((int)v14 >= 1)
    {
      int v48 = 0;
      uint64_t v49 = v14;
      long long v50 = v47;
      do
      {
        int v51 = *v50++;
        v48 += v51;
        v47[(int)v14] = v48;
        --v49;
      }
      while (v49);
    }
  }
  else
  {
    uint64_t v24 = *(void *)a1;
  }
  uint64_t v52 = a1 + *(void *)(v24 - 24);
  float v53 = *(float *)(v52 + 56);
  if (*(unsigned char *)(v52 + 84)) {
    float v53 = v53 / (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
  }
  uint64_t v54 = *(void *)(a1 + 504);
  if ((int)v14 >= (unint64_t)((*(void *)(a1 + 512) - v54) >> 2))
  {
    LODWORD(v107[0]) = 2143289344;
    std::vector<float>::resize(a1 + 504, (int)v14 + 1, v107);
    uint64_t v54 = *(void *)(a1 + 504);
  }
  *(float *)(v54 + 4 * (int)v14) = v53;
  if (*(float *)(a1 + 152) >= 0.0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 360))(a1, v14);
  }
  if (v6 != 0.0)
  {
    uint64_t v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    float v56 = -(float)(v53 * v6);
    float v57 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
    uint64_t v58 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v55, v58, 111, v59, v60, v57, 1.0);
    uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    float v62 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
    uint64_t v63 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v61, v63, 111, v64, v65, v62, 1.0);
    uint64_t v66 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    uint64_t v67 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::AddVec(v66, v67, v68, v69, v70, v56, 1.0);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v71 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      float v72 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
      uint64_t v73 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v71, v73, 111, v74, v75, v72, 1.0);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v76 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      float v77 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
      uint64_t v78 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v76, v78, 111, v79, v80, v77, 1.0);
    }
  }
  if (v7 != 0.0)
  {
    uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v82 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
    kaldi::cu::RegularizeL1<float>(v81, v82, (float)(v7 * v53) * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14), v53, v83, v84, v85);
    uint64_t v86 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v87 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
    kaldi::cu::RegularizeL1<float>(v86, v87, (float)(v7 * v53) * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14), v53, v88, v89, v90);
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v91 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v92 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
      kaldi::cu::RegularizeL1<float>(v91, v92, (float)(v7 * v53) * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14), v53, v93, v94, v95);
    }
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + *(void *)(*(void *)a1 - 24) + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1208);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v107, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107);
    }
    if (*(void *)(a1 + 784) == *(void *)(a1 + 776)) {
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 776), v10, v9, v15, v16, v17);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v53);
  if (*(float *)(a1 + 472) > 0.0)
  {
    uint64_t v96 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v96, 1, *(float *)(a1 + 472));
    uint64_t v97 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v97, 1, *(float *)(a1 + 472));
    uint64_t v98 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v98, *(float *)(a1 + 472), v99, v100, v101, v102);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v103 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v103, 1, *(float *)(a1 + 472));
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v104 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v104, 1, *(float *)(a1 + 472));
    }
  }
  uint64_t v105 = *(unsigned char **)(a1 + 480);
  if (v14 == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80))
  {
    int v106 = *(unsigned char **)(a1 + 488);
    if (v105 != v106) {
      bzero(v105, ((v106 - v105 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v105[4 * (int)v14] = 0;
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(void *a1, uint64_t a2, int a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(void *a1)
{
  if (!*((unsigned char *)a1 + *(void *)(*a1 - 24) + 16))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v1, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1545);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Performing  vectorization of lstm component", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v1);
    }
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1542);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Weights are already vectorized");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void sub_20CE5C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(void *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs((void *)((char *)a1
                                                                                          + *(void *)(*a1 - 64)));
}

double kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 108) = a2;
  *((_DWORD *)this + 109) = a3;
  *((_WORD *)this + 220) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 59) = &off_26C20B6C0;
  *((_OWORD *)this + 30) = xmmword_20D6073D0;
  *((void *)this + 62) = 0x3BF800000;
  *((_DWORD *)this + 126) = 1;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_26C20E428;
  *((void *)this + 53) = off_26C20E630;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = off_26C211198;
  *((unsigned char *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_26C211198;
  *((unsigned char *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = off_26C211198;
  *((unsigned char *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = off_26C211198;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = off_26C211198;
  *((unsigned char *)this + 256) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = off_26C211198;
  *((unsigned char *)this + 376) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  *(void *)&double result = 257;
  *((_DWORD *)this + 104) = 257;
  *((unsigned char *)this + 420) = 0;
  return result;
}

int *kaldi::CuArray<int>::operator=(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1 != (int *)a2)
  {
    if (!*((void *)a1 + 2)) {
      *((void *)a1 + 2) = *(void *)(a2 + 16);
    }
    kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1u, a4, a5);
    uint64_t v7 = *a1;
    if (v7) {
      memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v7);
    }
  }
  return a1;
}

kaldi::nnet1::MovingAttentionComponent *kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::MovingAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 54) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 220) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 59) = &off_26C20B6C0;
  *((_OWORD *)this + 30) = xmmword_20D6073D0;
  *((_DWORD *)this + 124) = -1082130432;
  *(void *)((char *)this + 500) = 0x100000003;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_26C20E428;
  *((void *)this + 53) = off_26C20E630;
  float v6 = (char *)this + 24;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 3) = off_26C211198;
  *((unsigned char *)this + 64) = 0;
  uint64_t v7 = (char *)this + 72;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_26C211198;
  *((unsigned char *)this + 112) = 0;
  uint64_t v8 = (char *)this + 120;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = off_26C211198;
  *((unsigned char *)this + 160) = 0;
  float v9 = (char *)this + 168;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = off_26C211198;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = off_26C211198;
  *((unsigned char *)this + 256) = 0;
  int v10 = (char *)this + 264;
  uint64_t v11 = (int *)((char *)this + 312);
  int v12 = (char *)this + 336;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = off_26C211198;
  *((unsigned char *)this + 376) = 0;
  uint64_t v19 = (char *)this + 384;
  uint64_t v20 = (char *)this + 288;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  uint64_t v13 = *((void *)a2 + 2);
  if (!v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"MovingAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x33, "src.component_", a5);
  }
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 51) = *((void *)a2 + 51);
  *((void *)this + 2) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  kaldi::CuMatrix<float>::operator=((uint64_t)v6, (uint64_t)a2 + 24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 72);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 120);
  kaldi::CuMatrix<float>::operator=((uint64_t)v9, (uint64_t)a2 + 168);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v10, *((void *)a2 + 33), *((void *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v20, *((void *)a2 + 36), *((void *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 3));
  }
  kaldi::CuArray<int>::operator=(v11, (uint64_t)a2 + 312, v15, v16, v17);
  kaldi::CuMatrix<float>::operator=((uint64_t)v12, (uint64_t)a2 + 336);
  if (this != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v19, *((char **)a2 + 48), *((void *)a2 + 49), (uint64_t)(*((void *)a2 + 49) - *((void *)a2 + 48)) >> 2);
  }
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
  *((unsigned char *)this + 420) = *((unsigned char *)a2 + 420);
  return this;
}

void sub_20CE5C6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::nnet1::UpdatableComponent *a11, void **a12, uint64_t a13, uint64_t a14)
{
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v14 + 392) = v22;
    operator delete(v22);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  uint64_t v23 = *(void **)(v14 + 320);
  if (v23) {
    free(v23);
  }
  *uint64_t v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  a14 = a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v14);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a11);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 2) = 0;
  uint64_t v5 = (void *)*((void *)this + 48);
  if (v5)
  {
    *((void *)this + 49) = v5;
    operator delete(v5);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  float v6 = (void *)*((void *)this + 40);
  if (v6) {
    free(v6);
  }
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  uint64_t v7 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 424);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent((kaldi::nnet1::MovingAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
}

void sub_20CE5CA44(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40F02A9525);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::MovingAttentionComponent::Copy((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

void kaldi::nnet1::MovingAttentionComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(v55, 0, 24);
  uint64_t v7 = a2 + 4;
  uint64_t v8 = a1 + 412;
  uint64_t v9 = a1 + 408;
  uint64_t v10 = a1 + 12;
  uint64_t v11 = a1 + 8;
  while (2)
  {
    if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_100;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v55, a4, a5);
    if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v55[2]))
      {
        case 0xC:
          uint64_t v29 = v55;
          goto LABEL_95;
        case 0xD:
          BOOL v12 = v55[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v55 + 5) == (void *)0x3E747865746E6F43;
          goto LABEL_12;
        case 0xE:
          BOOL v22 = v55[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v55 + 6) == (void *)0x3E747865746E6F43;
          goto LABEL_87;
        case 0xF:
          BOOL v21 = v55[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v55 + 7) == (void *)0x3E736E6F69746E65;
          goto LABEL_82;
        case 0x10:
          if (v55[0] == (void *)0x52656372756F533CLL && v55[1] == (void *)0x3E64657372657665) {
            goto LABEL_61;
          }
          if (v55[0] == (void *)0x65677261546F4E3CLL && v55[1] == (void *)0x3E7461636E6F4374) {
            goto LABEL_91;
          }
          if (v55[0] != (void *)0x636174746165523CLL || v55[1] != (void *)0x3E74656772615468) {
            goto LABEL_115;
          }
          goto LABEL_60;
        case 0x14:
          if (v55[0] != (void *)0x646F7250746F443CLL
            || v55[1] != (void *)0x74616C6552746375
            || LODWORD(v55[2]) != 1047424873)
          {
            goto LABEL_115;
          }
          goto LABEL_78;
        case 0x16:
          BOOL v18 = v55[0] == (void *)0x53656372756F533CLL
             && v55[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v55[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          goto LABEL_68;
        default:
          goto LABEL_115;
      }
    }
    switch((unint64_t)v55[1])
    {
      case 0xCuLL:
        goto LABEL_94;
      case 0xDuLL:
        BOOL v12 = *(void *)v55[0] == 0x6E6F437466654C3CLL && *(void *)((char *)v55[0] + 5) == 0x3E747865746E6F43;
LABEL_12:
        uint64_t v13 = v9;
        if (!v12) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0xEuLL:
        BOOL v22 = *(void *)v55[0] == 0x6F4374686769523CLL && *(void *)((char *)v55[0] + 6) == 0x3E747865746E6F43;
LABEL_87:
        uint64_t v13 = v8;
        if (!v22) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0xFuLL:
        BOOL v21 = *(void *)v55[0] == 0x6574744178614D3CLL && *(void *)((char *)v55[0] + 7) == 0x3E736E6F69746E65;
LABEL_82:
        uint64_t v13 = v10;
        if (!v21) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0x10uLL:
        if (*(void *)v55[0] == 0x52656372756F533CLL && *((void *)v55[0] + 1) == 0x3E64657372657665)
        {
LABEL_61:
          *(unsigned char *)(a1 + 416) = 0;
        }
        else if (*(void *)v55[0] == 0x65677261546F4E3CLL && *((void *)v55[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_91:
          *(unsigned char *)(a1 + 417) = 0;
        }
        else
        {
          if (*(void *)v55[0] != 0x636174746165523CLL || *((void *)v55[0] + 1) != 0x3E74656772615468) {
            goto LABEL_115;
          }
LABEL_60:
          *(unsigned char *)(a1 + 418) = 1;
        }
        goto LABEL_90;
      case 0x14uLL:
        if (*(void *)v55[0] == 0x646F7250746F443CLL
          && *((void *)v55[0] + 1) == 0x74616C6552746375
          && *((_DWORD *)v55[0] + 4) == 1047424873)
        {
LABEL_78:
          *(unsigned char *)(a1 + 419) = 1;
LABEL_90:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
        if (v55[1] != (void *)12) {
          goto LABEL_115;
        }
LABEL_94:
        uint64_t v29 = (void **)v55[0];
LABEL_95:
        uint64_t v30 = *v29;
        int v31 = *((_DWORD *)v29 + 2);
        if (v30 != (void *)0x6E6F706D6F432F3CLL || v31 != 1047817829)
        {
LABEL_115:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 133);
          uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v55[2]) >= 0) {
            uint64_t v45 = v55;
          }
          else {
            uint64_t v45 = (void **)v55[0];
          }
          if (SHIBYTE(v55[2]) >= 0) {
            uint64_t v46 = HIBYTE(v55[2]);
          }
          else {
            uint64_t v46 = (uint64_t)v55[1];
          }
          long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" (SourceStateDimension|MaxAttentions|LeftContext|RightContext)", 62);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
        }
LABEL_100:
        uint64_t v33 = *(void *)(a1 + 16);
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&v52, a4, a5);
        uint64_t v34 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v52);
        uint64_t v51 = 0;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 143, 3);
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Initializing component of type ", 31);
          if (v54 >= 0) {
            uint64_t v36 = (void **)&v52;
          }
          else {
            uint64_t v36 = v52;
          }
          if (v54 >= 0) {
            uint64_t v37 = HIBYTE(v54);
          }
          else {
            uint64_t v37 = v53;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50);
        }
        kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51 + 4, v38, v39);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51, v40, v41);
        kaldi::nnet1::Component::NewComponentOfType(v34);
        *(void *)(a1 + 16) = v43;
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v43 + 96))(v43, a2, a3);
        kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
        if (SHIBYTE(v54) < 0) {
          operator delete(v52);
        }
        if (SHIBYTE(v55[2]) < 0) {
          operator delete(v55[0]);
        }
        return;
      case 0x16uLL:
        BOOL v18 = *(void *)v55[0] == 0x53656372756F533CLL
           && *((void *)v55[0] + 1) == 0x656D694465746174
           && *(void *)((char *)v55[0] + 14) == 0x3E6E6F69736E656DLL;
LABEL_68:
        uint64_t v13 = v11;
        if (!v18) {
          goto LABEL_115;
        }
LABEL_89:
        kaldi::ReadBasicType<int>(a2, 0, v13, a4, a5);
        goto LABEL_90;
      default:
        goto LABEL_115;
    }
  }
}

void sub_20CE5D1F8()
{
}

void *kaldi::nnet1::MovingAttentionComponent::Check(void *this)
{
  if (!*((unsigned char *)this + 420))
  {
    uint64_t v1 = (uint64_t)this;
    unint64_t v2 = (_DWORD *)this[2];
    if (v2)
    {
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 594);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "this is a non-recurrent version, cannot have a recurrent internal component");
        goto LABEL_32;
      }
      if (this)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 597);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "no recursive inclusion");
        goto LABEL_32;
      }
    }
    int v3 = *(_DWORD *)(v1 + 12);
    if (v3 < 1 || (int v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 600);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    int v5 = *(_DWORD *)(v1 + 408);
    if (v5 < 1 || (int v6 = *(_DWORD *)(v1 + 412), v6 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 605);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, left and right context is ", 56);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (*(unsigned char *)(v1 + 417))
    {
      if (*(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) + v4 * v3 != v2[2])
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 610);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is concatenated. component has input dim ", 58);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v4 * v3 != v2[2])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 616);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is not concatenated. component has input dim ", 62);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", attentions ", 13);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", source state dimension ", 25);
      BOOL v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", however, the internal training component has input dim ", 57);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    uint64_t v10 = v1 + *(void *)(*(void *)v1 - 24);
    int v11 = *(_DWORD *)(v10 + 12);
    if (*(unsigned char *)(v1 + 418))
    {
      if (v11 != v2[3] + *(_DWORD *)(v10 + 8))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 624);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has input dim ", 24);
        BOOL v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , and output dim ", 18);
        uint64_t v13 = (void *)std::ostream::operator<<();
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", and you requested to reattch the target, however, ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the internal component has output dim ", 38);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v11 != v2[3])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 629);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has output dim ", 25);
      BOOL v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" does not match the internal component's output dim ", 52);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (v3 == v5 + v6 + 1)
    {
      if (*(unsigned char *)(v1 + 419))
      {
        if (*(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) != v4)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 641);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "the source state must have the same dimension as the input dimension of the component if want to take the dot product between them");
          goto LABEL_32;
        }
        goto LABEL_22;
      }
      if (*(unsigned __int8 *)(v1 + 418) | *(unsigned __int8 *)(v1 + 417))
      {
LABEL_22:
        *(unsigned char *)(v1 + 420) = 1;
        return this;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 646);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "if not taking the dot production relation from the source and target, you must at least concatenate or reattach the target");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 634);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"the maximum attention is ", 25);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" , that does not match the left_context + 1 + right_context, you defined left/right context as ", 95);
      BOOL v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::MovingAttentionComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v46, 0, 24);
  uint64_t v7 = a1 + 412;
  uint64_t v8 = a1 + 408;
  uint64_t v9 = a1 + 12;
  uint64_t v10 = a1 + 8;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v46, v11, v12);
    if (SHIBYTE(v46[2]) < 0)
    {
      uint64_t v19 = v46[1];
      if (v46[1] == (void *)15)
      {
        BOOL v22 = *(void *)v46[0] == 0x6574744178614D3CLL && *(void *)((char *)v46[0] + 7) == 0x3E736E6F69746E65;
        uint64_t v17 = v9;
        if (v22) {
          goto LABEL_69;
        }
        uint64_t v19 = v46[1];
      }
      else if (v46[1] == (void *)22)
      {
        BOOL v20 = *(void *)v46[0] == 0x53656372756F533CLL && *((void *)v46[0] + 1) == 0x656D694465746174;
        BOOL v21 = v20 && *(void *)((char *)v46[0] + 14) == 0x3E6E6F69736E656DLL;
        uint64_t v17 = v10;
        if (v21) {
          goto LABEL_69;
        }
      }
      if (v19 == (void *)13)
      {
        BOOL v23 = *(void *)v46[0] == 0x6E6F437466654C3CLL && *(void *)((char *)v46[0] + 5) == 0x3E747865746E6F43;
        uint64_t v17 = v8;
        if (v23) {
          goto LABEL_69;
        }
        uint64_t v19 = v46[1];
      }
      if (v19 == (void *)14)
      {
        BOOL v24 = *(void *)v46[0] == 0x6F4374686769523CLL && *(void *)((char *)v46[0] + 6) == 0x3E747865746E6F43;
        uint64_t v17 = v7;
        if (v24) {
          goto LABEL_69;
        }
        uint64_t v19 = v46[1];
      }
      if (v19 != (void *)16) {
        goto LABEL_84;
      }
      if (*(void *)v46[0] == 0x52656372756F533CLL && *((void *)v46[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(unsigned char *)(a1 + 416) = 0;
      }
      else
      {
        uint64_t v19 = v46[1];
        if (v46[1] != (void *)16) {
          goto LABEL_84;
        }
        if (*(void *)v46[0] == 0x65677261546F4E3CLL && *((void *)v46[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(unsigned char *)(a1 + 417) = 0;
        }
        else if ((HIBYTE(v46[2]) & 0x80) != 0)
        {
          if (*(void *)v46[0] == 0x636174746165523CLL && *((void *)v46[0] + 1) == 0x3E74656772615468) {
            goto LABEL_102;
          }
          uint64_t v19 = v46[1];
LABEL_84:
          if (v19 != (void *)20) {
            goto LABEL_103;
          }
          uint64_t v15 = (void **)v46[0];
LABEL_86:
          uint64_t v33 = *v15;
          uint64_t v34 = v15[1];
          int v35 = *((_DWORD *)v15 + 4);
          BOOL v36 = v33 == (void *)0x646F7250746F443CLL && v34 == (void *)0x74616C6552746375;
          if (!v36 || v35 != 1047424873) {
            goto LABEL_103;
          }
          *(unsigned char *)(a1 + 419) = 1;
        }
        else
        {
          if (HIBYTE(v46[2]) != 16) {
            goto LABEL_103;
          }
LABEL_79:
          if (v46[0] != (void *)0x636174746165523CLL || v46[1] != (void *)0x3E74656772615468)
          {
LABEL_103:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v46, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 176);
              uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unrecognized token ", 19);
              if (SHIBYTE(v46[2]) >= 0) {
                uint64_t v42 = v46;
              }
              else {
                uint64_t v42 = (void **)v46[0];
              }
              if (SHIBYTE(v46[2]) >= 0) {
                uint64_t v43 = HIBYTE(v46[2]);
              }
              else {
                uint64_t v43 = (uint64_t)v46[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
            }
            break;
          }
LABEL_102:
          *(unsigned char *)(a1 + 418) = 1;
        }
      }
    }
    else
    {
      uint64_t v15 = v46;
      switch(HIBYTE(v46[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          BOOL v16 = v46[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v46 + 7) == (void *)0x3E736E6F69746E65;
          uint64_t v17 = v9;
          if (v16) {
            break;
          }
          if (HIBYTE(v46[2]) == 14)
          {
LABEL_56:
            BOOL v27 = v46[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v46 + 6) == (void *)0x3E747865746E6F43;
            uint64_t v17 = v7;
            if (!v27) {
              goto LABEL_103;
            }
          }
          else
          {
            if (HIBYTE(v46[2]) != 13) {
              goto LABEL_103;
            }
LABEL_11:
            BOOL v18 = v46[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v46 + 5) == (void *)0x3E747865746E6F43;
            uint64_t v17 = v8;
            if (!v18) {
              goto LABEL_103;
            }
          }
          break;
        case 0x10:
          if (v46[0] == (void *)0x52656372756F533CLL && v46[1] == (void *)0x3E64657372657665) {
            goto LABEL_95;
          }
          if (HIBYTE(v46[2]) != 16) {
            goto LABEL_103;
          }
          if (v46[0] != (void *)0x65677261546F4E3CLL || v46[1] != (void *)0x3E7461636E6F4374) {
            goto LABEL_79;
          }
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          BOOL v29 = v46[0] == (void *)0x53656372756F533CLL
             && v46[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v46[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          uint64_t v17 = v10;
          if (!v29) {
            goto LABEL_103;
          }
          break;
        default:
          goto LABEL_103;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, a3, v17, v13, v14);
    }
  }
  uint64_t v39 = *(void *)(a1 + 16);
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v40) {
  *(void *)(a1 + 16) = v40;
  }
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v46[2]) < 0) {
    operator delete(v46[0]);
  }
}

void sub_20CE5DEAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LeftContext>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<RightContext>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if (!*(unsigned char *)(a1 + 416)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<SourceReversed>", v14, v15);
  }
  if (!*(unsigned char *)(a1 + 417)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<NoTargetConcat>", v14, v15);
  }
  if (*(unsigned char *)(a1 + 418)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ReattachTarget>", v14, v15);
  }
  if (*(unsigned char *)(a1 + 419)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<DotProductRelation>", v14, v15);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  BOOL v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v16, &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v17, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_20CE5E0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::MovingAttentionComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteData(void **a1)
{
  ((void (*)(void **))(*a1)[12])(a1);
  unint64_t v2 = *(uint64_t (**)(void))(*a1[2] + 104);
  return v2();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteData(void *a1)
{
  uint64_t v1 = (void **)((char *)a1 + *(void *)(*a1 - 120));
  ((void (*)(void **))(*v1)[12])(v1);
  unint64_t v2 = *(uint64_t (**)(void))(*v1[2] + 104);
  return v2();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 176))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 192) + 16) + 176))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 200) + 16) + 184))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 208) + 16) + 192))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 208))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 224) + 16) + 208))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 216))(a2);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**(void **)((char *)this + *(void *)(*(void *)this - 232) + 16)
                                          + 216))(a2);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::MovingAttentionComponent *, void *, void))(*(void *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0) {
    unint64_t v2 = __p;
  }
  else {
    unint64_t v2 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v7[1] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v9);
}

void sub_20CE5E618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Info((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 72))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 88) + 16) + 72))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(void *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 280);
  long long v3 = &v2[*(void *)(*(void *)v2 - 24)];
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(void))(**((void **)v2 + 2) + 264))();
}

void kaldi::nnet1::MovingAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  float v57 = a3;
  unint64_t v7 = a3[1] - *a3;
  uint64_t v8 = v7 >> 2;
  int v9 = *(_DWORD *)(a2 + 20);
  int v10 = v9 / (int)(v7 >> 2);
  if (v10 * (v7 >> 2) != v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0xED, "seq_size * num_seq == source.NumRows()", v6);
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if (v11 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0xEE, "source.NumCols() == source_vec_dim_", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 24, v8, ((*(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 412) + v10) * v11), 0, 0);
  uint64_t v55 = v7;
  uint64_t v56 = (v7 >> 2);
  if ((int)v8 >= 1)
  {
    unint64_t v12 = 0;
    int v13 = *(_DWORD *)(a1 + 8);
    uint64_t v14 = *v57;
    do
    {
      if (*(int *)(v14 + 4 * v12) >= 1)
      {
        int v15 = 0;
        unint64_t v16 = (v13 * *(_DWORD *)(a1 + 408));
        unsigned int v17 = v12;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)v16, v13);
          if (v12 >= HIDWORD(v60)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
          }
          uint64_t v63 = v60 + 4 * (int)v61 * (int)v12;
          float v62 = &off_26C209728;
          uint64_t v64 = DWORD2(v60);
          uint64_t v65 = *((void *)&v61 + 1);
          if (*(_DWORD *)(a2 + 20) <= v17) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
          }
          unsigned int v21 = *(_DWORD *)(a2 + 16);
          uint64_t v22 = *(void *)(a2 + 32);
          v58[1] = *(void *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v17);
          v58[0] = &off_26C209728;
          void v58[2] = v21;
          v58[3] = v22;
          kaldi::CuVectorBase<float>::CopyFromVec(&v62, (uint64_t)v58, v18, v19, v20);
          float v62 = &off_26C209728;
          uint64_t v63 = 0;
          LODWORD(v64) = 0;
          uint64_t v65 = 0;
          std::string __p = off_26C2096F8;
          long long v60 = 0u;
          long long v61 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
          int v13 = *(_DWORD *)(a1 + 8);
          unint64_t v16 = (v13 + v16);
          ++v15;
          uint64_t v14 = *v57;
          v17 += v8;
        }
        while (v15 < *(_DWORD *)(*v57 + 4 * v12));
      }
      ++v12;
    }
    while (v12 != v56);
  }
  unint64_t v23 = (int)(v55 >> 2);
  std::string __p = 0;
  long long v60 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 264), v23, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v60 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  long long v60 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 288), v23, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v60 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 384), v23);
    if ((int)v8 >= 1)
    {
      uint64_t v24 = 0;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 384) + 4 * v24) = *(_DWORD *)(*v57 + 4 * v24) + *(_DWORD *)(a1 + 408) - 1;
        uint64_t v25 = *(void *)(a1 + 288) + 24 * v24;
        BOOL v27 = (_DWORD **)(v25 + 8);
        uint64_t v26 = *(_DWORD **)(v25 + 8);
        BOOL v29 = (void *)(v25 + 16);
        unint64_t v28 = *(void *)(v25 + 16);
        if ((unint64_t)v26 >= v28)
        {
          int v31 = *(_DWORD **)v25;
          uint64_t v32 = ((uint64_t)v26 - *(void *)v25) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            goto LABEL_58;
          }
          uint64_t v34 = v28 - (void)v31;
          if (v34 >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            BOOL v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v29, v35);
            uint64_t v26 = *v27;
            int v31 = *(_DWORD **)v25;
          }
          else
          {
            BOOL v36 = 0;
          }
          uint64_t v37 = &v36[4 * v32];
          *(_DWORD *)uint64_t v37 = *(_DWORD *)(a1 + 408);
          uint64_t v30 = v37 + 4;
          while (v26 != v31)
          {
            int v38 = *--v26;
            *((_DWORD *)v37 - 1) = v38;
            v37 -= 4;
          }
          *(void *)uint64_t v25 = v37;
          void *v27 = v30;
          void *v29 = &v36[4 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          _DWORD *v26 = *(_DWORD *)(a1 + 408);
          uint64_t v30 = v26 + 1;
        }
        void *v27 = v30;
        ++v24;
      }
      while (v24 != v56);
    }
  }
  else if ((int)v8 >= 1)
  {
    uint64_t v39 = 0;
    do
    {
      uint64_t v40 = *(void *)(a1 + 288) + 24 * v39;
      int v41 = *(_DWORD *)(*v57 + 4 * v39) + *(_DWORD *)(a1 + 408) - 1;
      uint64_t v43 = (int **)(v40 + 8);
      uint64_t v42 = *(int **)(v40 + 8);
      uint64_t v45 = (void *)(v40 + 16);
      unint64_t v44 = *(void *)(v40 + 16);
      if ((unint64_t)v42 >= v44)
      {
        long long v47 = *(int **)v40;
        uint64_t v48 = ((uint64_t)v42 - *(void *)v40) >> 2;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62) {
LABEL_58:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v50 = v44 - (void)v47;
        if (v50 >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v45, v51);
          uint64_t v42 = *v43;
          long long v47 = *(int **)v40;
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v53 = (int *)&v52[4 * v48];
        *uint64_t v53 = v41;
        uint64_t v46 = v53 + 1;
        while (v42 != v47)
        {
          int v54 = *--v42;
          *--uint64_t v53 = v54;
        }
        *(void *)uint64_t v40 = v53;
        *uint64_t v43 = v46;
        void *v45 = &v52[4 * v51];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *uint64_t v42 = v41;
        uint64_t v46 = v42 + 1;
      }
      *uint64_t v43 = v46;
      ++v39;
    }
    while (v39 != v56);
  }
}

void sub_20CE5ECE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::MovingAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  BOOL v27 = a3;
  unint64_t v9 = a3[1] - *a3;
  unint64_t v10 = v9 >> 2;
  int v11 = *(_DWORD *)(a2 + 20);
  int v12 = v11 / (int)(v9 >> 2);
  if (v12 * (v9 >> 2) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x112, "seq_size * num_seq == source.NumRows()", v8);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if (v13 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x113, "source.NumCols() == source_vec_dim_", v8);
  }
  if (*(_DWORD *)(a1 + 140) != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x114, "accumed_source_states_diff_.NumRows() == num_seq", v8);
  }
  int v14 = *(_DWORD *)(a1 + 408);
  if (*(_DWORD *)(a1 + 136) != (v14 + *(_DWORD *)(a1 + 412) + v12) * v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x115, "accumed_source_states_diff_.NumCols() == (left_context_ + seq_size + right_context_) * source_vec_dim_", v8);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, a1 + 120, 0, v10, (const char *)(v14 * v13), v13 * v12);
  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  if ((int)v10 >= 1)
  {
    unint64_t v16 = 0;
    uint64_t v26 = (v9 >> 2);
    do
    {
      if (v16 >= (uint64_t)(v27[1] - *v27) >> 2) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      int v17 = *(_DWORD *)(*v27 + 4 * v16);
      if (v17 >= 1)
      {
        int v18 = 0;
        unsigned int v19 = v16;
        do
        {
          if (*(_DWORD *)(a4 + 20) <= v19) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
          }
          unsigned int v20 = *(_DWORD *)(a4 + 16);
          uint64_t v21 = *(void *)(a4 + 32);
          v35[1] = *(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v19);
          v35[0] = &off_26C209728;
          v35[2] = v20;
          v35[3] = v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, (uint64_t)&v36, 0, SHIDWORD(v37), (const char *)(*(_DWORD *)(a1 + 8) * v18), *(_DWORD *)(a1 + 8));
          if (v16 >= HIDWORD(v29)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
          }
          uint64_t v32 = v29 + 4 * (int)v30 * (int)v16;
          int v31 = &off_26C209728;
          uint64_t v33 = DWORD2(v29);
          uint64_t v34 = *((void *)&v30 + 1);
          kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31, v22, v23, v24);
          int v31 = &off_26C209728;
          uint64_t v32 = 0;
          LODWORD(v33) = 0;
          uint64_t v34 = 0;
          unint64_t v28 = off_26C2096F8;
          long long v29 = 0u;
          long long v30 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v28);
          ++v18;
          v19 += v10;
        }
        while (v17 != v18);
      }
      ++v16;
    }
    while (v16 != v26);
  }
  BOOL v36 = off_26C2096F8;
  long long v37 = 0u;
  long long v38 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v36).n128_u64[0];
  return result;
}

void sub_20CE5F0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27)
{
  a25 = off_26C2096F8;
  a26 = 0u;
  a27 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 264) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4) - *(_DWORD *)(a1 + 408);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t *a2)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  std::vector<std::vector<int>>::resize(a2, v4);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v25 = v4;
    uint64_t v6 = *(void *)(a1 + 264);
    do
    {
      unint64_t v7 = (_DWORD **)(v6 + 24 * v5);
      for (uint64_t i = *v7; i != v7[1]; ++i)
      {
        uint64_t v9 = *a2 + 24 * v5;
        int v10 = *i - *(_DWORD *)(a1 + 408);
        int v12 = (int **)(v9 + 8);
        int v11 = *(int **)(v9 + 8);
        int v14 = (void *)(v9 + 16);
        unint64_t v13 = *(void *)(v9 + 16);
        if ((unint64_t)v11 >= v13)
        {
          unint64_t v16 = *(int **)v9;
          uint64_t v17 = ((uint64_t)v11 - *(void *)v9) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v14, v20);
            int v11 = *v12;
            unint64_t v16 = *(int **)v9;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (int *)&v21[4 * v17];
          int *v22 = v10;
          int v15 = v22 + 1;
          while (v11 != v16)
          {
            int v23 = *--v11;
            *--uint64_t v22 = v23;
          }
          *(void *)uint64_t v9 = v22;
          *int v12 = v15;
          *int v14 = &v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *int v11 = v10;
          int v15 = v11 + 1;
        }
        *int v12 = v15;
        uint64_t v6 = *(void *)(a1 + 264);
        unint64_t v7 = (_DWORD **)(v6 + 24 * v5);
      }
      ++v5;
    }
    while (v5 != v25);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 420) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 420) = 0;
  }
  return this;
}

double kaldi::nnet1::MovingAttentionComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  uint64_t v40 = a2;
  uint64_t v8 = *(void *)a1;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x14A, "in.NumCols() == input_dim_", v7);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x14C, "batch_idx == 0", v7);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 44);
  int v10 = *(_DWORD *)(a2 + 20);
  uint64_t v42 = v9;
  int v38 = v10 / (int)v9;
  if (v10 / (int)v9 * v9 != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x14F, "num_seq * seq_size == in.NumRows()", v7);
  }
  int v11 = (const char *)(*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 12));
  *(void *)(a1 + 104) = *(void *)(a3 + 32);
  if (*(unsigned char *)(a1 + 417)) {
    int v12 = *(_DWORD *)(a1 + *(void *)(v8 - 24) + 8);
  }
  else {
    int v12 = 0;
  }
  kaldi::CuMatrix<float>::Resize(a1 + 72, v9, (v12 + v11), 1u, 0);
  if (v38 >= 1)
  {
    int v14 = 0;
    long long v13 = 0uLL;
    do
    {
      v51[0] = v13;
      v51[1] = v13;
      uint64_t v50 = off_26C2096F8;
      int v41 = v14;
      if (*(unsigned char *)(a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 72, 0, *(_DWORD *)(a1 + 92), v11, *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
        *(void *)&v51[0] = v49[0];
        *(_OWORD *)((char *)v51 + 8) = *(_OWORD *)&v49[1];
        *((void *)&v51[1] + 1) = v49[3];
        uint64_t v48 = off_26C2096F8;
        memset(v49, 0, sizeof(v49));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, v14 * v42, v42, 0, *(_DWORD *)(v40 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v50, (uint64_t)&v48, 111, v15, v16);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, v14 * v42, v42, 0, *(_DWORD *)(v40 + 16));
        *(void *)&v51[0] = v49[0];
        *(_OWORD *)((char *)v51 + 8) = *(_OWORD *)&v49[1];
        *((void *)&v51[1] + 1) = v49[3];
      }
      uint64_t v48 = off_26C2096F8;
      memset(v49, 0, sizeof(v49));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
      if ((int)v42 >= 1)
      {
        unint64_t v18 = 0;
        uint64_t v19 = 8;
        do
        {
          int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 288) + v19) - 4) - *(_DWORD *)(a1 + 408);
          if (v20 < 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x161, "begin >= 0", v17);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 72, 0, *(_DWORD *)(a1 + 92), 0, (int)v11);
          if (v18 >= HIDWORD(v49[1])) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v21);
          }
          *(void *)&long long v44 = v49[0] + 4 * LODWORD(v49[2]) * (int)v18;
          uint64_t v43 = &off_26C209728;
          *((void *)&v44 + 1) = LODWORD(v49[1]);
          *(void *)&long long v45 = v49[3];
          if (v18 >= *(unsigned int *)(a1 + 44)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v21);
          }
          unsigned int v22 = *(_DWORD *)(a1 + 40);
          uint64_t v23 = *(void *)(a1 + 56);
          v46[1] = *(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * (int)v18;
          v46[0] = &off_26C209728;
          v46[2] = v22;
          v46[3] = v23;
          kaldi::CuSubVector<float>::CuSubVector(v47, (uint64_t)v46, *(_DWORD *)(a1 + 8) * v20, (int)v11, v21);
          kaldi::CuVectorBase<float>::CopyFromVec(&v43, (uint64_t)v47, v24, v25, v26);
          uint64_t v43 = &off_26C209728;
          *(void *)&long long v44 = 0;
          DWORD2(v44) = 0;
          *(void *)&long long v45 = 0;
          uint64_t v48 = off_26C2096F8;
          memset(v49, 0, sizeof(v49));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
          ++v18;
          v19 += 24;
        }
        while (v42 != v18);
      }
      if (*(unsigned char *)(a1 + 419) && *(int *)(a1 + 12) >= 1)
      {
        int v27 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 72, 0, *(_DWORD *)(a1 + 92), (const char *)(*(_DWORD *)(a1 + 8) * v27), *(_DWORD *)(a1 + 8));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v48, (uint64_t)&v50, v28, v29, v30);
          uint64_t v48 = off_26C2096F8;
          memset(v49, 0, sizeof(v49));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
          ++v27;
        }
        while (v27 < *(_DWORD *)(a1 + 12));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, a3, v41 * v42, v42, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, (uint64_t)&v43, 0, SHIDWORD(v44), 0, *(_DWORD *)(*(void *)(a1 + 16) + 12));
      uint64_t v43 = off_26C2096F8;
      long long v44 = 0u;
      long long v45 = 0u;
      __n128 v31 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
      (*(void (**)(void, uint64_t, void (***)(), void, __n128))(**(void **)(a1 + 16)
                                                                                                  + 112))(*(void *)(a1 + 16), a1 + 72, &v48, 0, v31);
      kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(a1, a1 + 72, (uint64_t)&v48, v32, v33);
      uint64_t v48 = off_26C2096F8;
      memset(v49, 0, sizeof(v49));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
      uint64_t v50 = off_26C2096F8;
      memset(v51, 0, sizeof(v51));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
      long long v13 = 0uLL;
      int v14 = v41 + 1;
    }
    while (v41 + 1 != v38);
  }
  if (*(unsigned char *)(a1 + 418))
  {
    uint64_t v34 = (unsigned int *)kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(*(void *)(a1 + 16) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v34, v40, 111, v35, v36);
    uint64_t v50 = off_26C2096F8;
    memset(v51, 0, sizeof(v51));
    *(void *)&long long v13 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50).n128_u64[0];
  }
  return *(double *)&v13;
}

void sub_20CE5FA84(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = off_26C2096F8;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 - 128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  if (v5 != *(_DWORD *)(a2 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeAlignments", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x177, "alignments_.size() == num_seq", a5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3) != v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeAlignments", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x178, "current_focal_points_.size() == num_seq", a5);
  }
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  uint64_t v8 = *(unsigned int **)(a1 + 16);
  uint64_t v130 = v7;
  if (!v8)
  {
LABEL_13:
    if ((int)v7 < 1) {
      return;
    }
    uint64_t v21 = 0;
    while (1)
    {
      int v22 = *(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * v21 + 8) - 4);
      uint64_t v23 = *(void *)(a1 + 264) + 24 * v21;
      uint64_t v25 = (_DWORD **)(v23 + 8);
      uint64_t v24 = *(_DWORD **)(v23 + 8);
      int v27 = (void *)(v23 + 16);
      unint64_t v26 = *(void *)(v23 + 16);
      if ((unint64_t)v24 >= v26)
      {
        uint64_t v29 = *(_DWORD **)v23;
        uint64_t v30 = ((uint64_t)v24 - *(void *)v23) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          goto LABEL_163;
        }
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v27, v33);
          uint64_t v24 = *v25;
          uint64_t v29 = *(_DWORD **)v23;
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = &v34[4 * v30];
        *(_DWORD *)uint64_t v35 = v22;
        uint64_t v28 = v35 + 4;
        while (v24 != v29)
        {
          int v36 = *--v24;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *(void *)uint64_t v23 = v35;
        void *v25 = v28;
        void *v27 = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v7 = v130;
      }
      else
      {
        _DWORD *v24 = v22;
        uint64_t v28 = v24 + 1;
      }
      void *v25 = v28;
      uint64_t v37 = *(void *)(a1 + 288);
      int v38 = (void **)(v37 + 24 * v21);
      if (*(unsigned char *)(a1 + 416))
      {
        int v39 = v22 + 1;
        uint64_t v40 = *(void *)(a1 + 384);
        int v41 = *(_DWORD *)(v40 + 4 * v21);
        uint64_t v42 = v37 + 24 * v21;
        long long v45 = *(char **)(v42 + 8);
        uint64_t v44 = v42 + 8;
        uint64_t v43 = v45;
        long long v47 = (void *)(v44 + 8);
        unint64_t v46 = *(void *)(v44 + 8);
        if ((unint64_t)v45 >= v46)
        {
          uint64_t v55 = (char *)*v38;
          uint64_t v56 = (v43 - (unsigned char *)*v38) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            goto LABEL_163;
          }
          uint64_t v58 = v46 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v44 + 8, v59);
            uint64_t v43 = *(char **)v44;
            uint64_t v55 = (char *)*v38;
          }
          else
          {
            long long v60 = 0;
          }
          if (v41 <= v22) {
            int v39 = *(_DWORD *)(v40 + 4 * v21);
          }
          uint64_t v64 = &v60[4 * v56];
          *(_DWORD *)uint64_t v64 = v39;
          int v54 = v64 + 4;
          while (v43 != v55)
          {
            int v65 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
LABEL_70:
          *int v38 = v64;
          *(void *)uint64_t v44 = v54;
          *long long v47 = &v60[4 * v59];
          if (v55) {
            operator delete(v55);
          }
          uint64_t v7 = v130;
          goto LABEL_73;
        }
        if (v41 <= v22) {
          int v48 = *(_DWORD *)(v40 + 4 * v21);
        }
        else {
          int v48 = v22 + 1;
        }
      }
      else
      {
        int v49 = v22 - 1;
        int v50 = *(_DWORD *)(a1 + 408);
        uint64_t v51 = v37 + 24 * v21;
        uint64_t v52 = *(char **)(v51 + 8);
        uint64_t v44 = v51 + 8;
        uint64_t v43 = v52;
        long long v47 = (void *)(v44 + 8);
        unint64_t v53 = *(void *)(v44 + 8);
        if ((unint64_t)v52 >= v53)
        {
          uint64_t v55 = (char *)*v38;
          uint64_t v61 = (v43 - (unsigned char *)*v38) >> 2;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62) {
LABEL_163:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v63 = v53 - (void)v55;
          if (v63 >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v62;
          }
          if (v59)
          {
            long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v44 + 8, v59);
            uint64_t v43 = *(char **)v44;
            uint64_t v55 = (char *)*v38;
          }
          else
          {
            long long v60 = 0;
          }
          if (v22 <= v50) {
            int v49 = *(_DWORD *)(a1 + 408);
          }
          uint64_t v64 = &v60[4 * v61];
          *(_DWORD *)uint64_t v64 = v49;
          int v54 = v64 + 4;
          while (v43 != v55)
          {
            int v66 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v64 - 1) = v66;
            v64 -= 4;
          }
          goto LABEL_70;
        }
        if (v22 <= v50) {
          int v48 = *(_DWORD *)(a1 + 408);
        }
        else {
          int v48 = v22 - 1;
        }
      }
      *(_DWORD *)uint64_t v43 = v48;
      int v54 = v43 + 4;
LABEL_73:
      *(void *)uint64_t v44 = v54;
      if (++v21 == v7) {
        return;
      }
    }
  }
  if (!v11)
  {
    uint64_t v7 = v130;
    if (v14)
    {
      uint64_t v13 = v14[14];
      if (!v13) {
        kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v15);
      }
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  uint64_t v13 = v11[13];
  LODWORD(v7) = v130;
  if (!v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v12);
  }
LABEL_9:
  uint64_t v129 = a1 + 216;
  kaldi::CuMatrix<float>::Resize(a1 + 216, (v7 + v7 * *(_DWORD *)(a1 + 12)), v8[3], 1u, 0);
  uint64_t v16 = *(unsigned int *)(a1 + 12);
  if ((int)v16 < 1)
  {
    uint64_t v19 = v130;
  }
  else
  {
    int v17 = 0;
    int v18 = 0;
    LODWORD(v19) = v130;
    do
    {
      int v20 = (const char *)(*(_DWORD *)(a1 + 8) * v18);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v129, v17, v19, 0, *(_DWORD *)(a1 + 232));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v134, a2, 0, *(_DWORD *)(a2 + 20), v20, *(_DWORD *)(a1 + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v131, v13, 0, *(_DWORD *)(v13 + 20), v20, *(_DWORD *)(a1 + 8));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, (uint64_t)&v134, CblasNoTrans, (uint64_t)&v131, (const char *)0x70, 1.0, 0.0);
      long long v131 = off_26C2096F8;
      long long v132 = 0u;
      long long v133 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v131);
      long long v134 = off_26C2096F8;
      long long v135 = 0u;
      long long v136 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v134);
      __p.__begin_ = (std::vector<int>::pointer)off_26C2096F8;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v138 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      ++v18;
      uint64_t v16 = *(unsigned int *)(a1 + 12);
      uint64_t v19 = v130;
      v17 += v130;
    }
    while (v18 < (int)v16);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 336, v19, v16, 1u, 0);
  int v70 = v130;
  if ((int)v130 >= 1)
  {
    unsigned int v71 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v129, v71, *(_DWORD *)(a1 + 12) * v70, 0, *(_DWORD *)(a1 + 232));
      if (v130 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&__p, *(_DWORD *)(a1 + 240) * v130);
      }
      if (*(_DWORD *)(a1 + 356) <= v71) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v72);
      }
      unsigned int v73 = *(_DWORD *)(a1 + 352);
      uint64_t v74 = *(void *)(a1 + 368);
      *(void *)&long long v135 = *(void *)(a1 + 344) + 4 * (int)(*(_DWORD *)(a1 + 360) * v71);
      long long v134 = &off_26C209728;
      *((void *)&v135 + 1) = v73;
      *(void *)&long long v136 = v74;
      if (*(_DWORD *)(a3 + 20) <= v71) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v72);
      }
      unsigned int v75 = *(_DWORD *)(a3 + 16);
      uint64_t v76 = *(void *)(a3 + 32);
      *(void *)&long long v132 = *(void *)(a3 + 8) + 4 * (int)(*(_DWORD *)(a3 + 24) * v71);
      long long v131 = &off_26C209728;
      *((void *)&v132 + 1) = v75;
      *(void *)&long long v133 = v76;
      kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v134, (uint64_t)&__p, CblasNoTrans, (uint64_t)&v131, v72, 1.0, 0.0);
      __p.__begin_ = (std::vector<int>::pointer)off_26C2096F8;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v138 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      ++v71;
      int v70 = v130;
    }
    while (v130 != v71);
  }
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 336, (int *)(a1 + 312), v67, v68, v69);
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 312), &__p);
  if ((int)v130 >= 1)
  {
    for (uint64_t i = 0; i != v130; ++i)
    {
      int v78 = *(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * i + 8) - 4);
      uint64_t v79 = *(void *)(a1 + 264) + 24 * i;
      int v80 = __p.__begin_[i] + v78 - *(_DWORD *)(a1 + 408);
      uint64_t v82 = (int **)(v79 + 8);
      uint64_t v81 = *(int **)(v79 + 8);
      uint64_t v84 = (void *)(v79 + 16);
      unint64_t v83 = *(void *)(v79 + 16);
      if ((unint64_t)v81 >= v83)
      {
        uint64_t v86 = *(int **)v79;
        uint64_t v87 = ((uint64_t)v81 - *(void *)v79) >> 2;
        unint64_t v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v89 = v83 - (void)v86;
        if (v89 >> 1 > v88) {
          unint64_t v88 = v89 >> 1;
        }
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v88;
        }
        if (v90)
        {
          uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v84, v90);
          uint64_t v81 = *v82;
          uint64_t v86 = *(int **)v79;
        }
        else
        {
          uint64_t v91 = 0;
        }
        uint64_t v92 = (int *)&v91[4 * v87];
        *uint64_t v92 = v80;
        uint64_t v85 = v92 + 1;
        while (v81 != v86)
        {
          int v93 = *--v81;
          *--uint64_t v92 = v93;
        }
        *(void *)uint64_t v79 = v92;
        *uint64_t v82 = v85;
        void *v84 = &v91[4 * v90];
        if (v86) {
          operator delete(v86);
        }
      }
      else
      {
        *uint64_t v81 = v80;
        uint64_t v85 = v81 + 1;
      }
      *uint64_t v82 = v85;
      if (*(unsigned char *)(a1 + 416))
      {
        int v94 = *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 24 * i + 8) - 4);
        LODWORD(v134) = v94;
        uint64_t v95 = *(void *)(a1 + 288);
        if (v94 == v78)
        {
          uint64_t v96 = *(_DWORD **)(v95 + 24 * i + 8);
          if ((unint64_t)v96 - *(void *)(v95 + 24 * i) >= 5 && *(v96 - 2) == v78) {
            LODWORD(v134) = ++v78;
          }
        }
        else
        {
          uint64_t v96 = *(_DWORD **)(v95 + 24 * i + 8);
          int v78 = v94;
        }
        uint64_t v99 = v95 + 24 * i;
        if (*(_DWORD *)(*(void *)(a1 + 384) + 4 * i) >= v78) {
          uint64_t v102 = &v134;
        }
        else {
          uint64_t v102 = (void (***)())(*(void *)(a1 + 384) + 4 * i);
        }
        int v103 = *(_DWORD *)v102;
        int v104 = *(_DWORD *)(a1 + 408);
        if (*(_DWORD *)v102 <= v104) {
          int v105 = *(_DWORD *)(a1 + 408);
        }
        else {
          int v105 = *(_DWORD *)v102;
        }
        int v106 = (_DWORD **)(v99 + 8);
        v108 = (void *)(v99 + 16);
        unint64_t v107 = *(void *)(v99 + 16);
        if ((unint64_t)v96 >= v107)
        {
          uint64_t v100 = *(_DWORD **)v99;
          uint64_t v109 = ((uint64_t)v96 - *(void *)v99) >> 2;
          unint64_t v110 = v109 + 1;
          if ((unint64_t)(v109 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v111 = v107 - (void)v100;
          if (v111 >> 1 > v110) {
            unint64_t v110 = v111 >> 1;
          }
          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v112 = v110;
          }
          if (v112)
          {
            uint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v99 + 16, v112);
            uint64_t v96 = *v106;
            uint64_t v100 = *(_DWORD **)v99;
            uint64_t v114 = (void (***)())(a1 + 408);
            if (v103 >= v104) {
              uint64_t v114 = v102;
            }
            int v105 = *(_DWORD *)v114;
          }
          else
          {
            uint64_t v113 = 0;
          }
          long long v126 = &v113[4 * v109];
          *(_DWORD *)long long v126 = v105;
          uint64_t v121 = v126 + 4;
          while (v96 != v100)
          {
            int v127 = *--v96;
            *((_DWORD *)v126 - 1) = v127;
            v126 -= 4;
          }
LABEL_155:
          *(void *)uint64_t v99 = v126;
          *int v106 = v121;
          void *v108 = &v113[4 * v112];
          if (v100) {
            operator delete(v100);
          }
          goto LABEL_157;
        }
      }
      else
      {
        int v97 = *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 24 * i + 8) - 4);
        LODWORD(v134) = v97;
        uint64_t v98 = *(void *)(a1 + 288);
        uint64_t v99 = v98 + 24 * i;
        if (v97 == v78)
        {
          uint64_t v96 = *(_DWORD **)(v98 + 24 * i + 8);
          uint64_t v100 = *(_DWORD **)v99;
          unint64_t v101 = (unint64_t)v96 - *(void *)v99;
          if (v101 >= 5 && *(_DWORD *)((char *)v100 + v101 - 8) == v78) {
            LODWORD(v134) = --v78;
          }
        }
        else
        {
          uint64_t v100 = *(_DWORD **)v99;
          uint64_t v96 = *(_DWORD **)(v98 + 24 * i + 8);
          int v78 = v97;
        }
        if (*v100 >= v78) {
          uint64_t v115 = &v134;
        }
        else {
          uint64_t v115 = (void (***)())v100;
        }
        int v116 = *(_DWORD *)v115;
        int v117 = *(_DWORD *)(a1 + 408);
        if (*(_DWORD *)v115 <= v117) {
          int v105 = *(_DWORD *)(a1 + 408);
        }
        else {
          int v105 = *(_DWORD *)v115;
        }
        uint64_t v118 = v98 + 24 * i;
        unint64_t v120 = *(void *)(v118 + 16);
        v108 = (void *)(v118 + 16);
        unint64_t v119 = v120;
        int v106 = (_DWORD **)(v108 - 1);
        if ((unint64_t)v96 >= v120)
        {
          uint64_t v122 = v96 - v100;
          unint64_t v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v124 = v119 - (void)v100;
          if (v124 >> 1 > v123) {
            unint64_t v123 = v124 >> 1;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v112 = v123;
          }
          if (v112)
          {
            uint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v108, v112);
            uint64_t v96 = *v106;
            uint64_t v100 = *(_DWORD **)v99;
            long long v125 = (void (***)())(a1 + 408);
            if (v116 >= v117) {
              long long v125 = v115;
            }
            int v105 = *(_DWORD *)v125;
          }
          else
          {
            uint64_t v113 = 0;
          }
          long long v126 = &v113[4 * v122];
          *(_DWORD *)long long v126 = v105;
          uint64_t v121 = v126 + 4;
          while (v96 != v100)
          {
            int v128 = *--v96;
            *((_DWORD *)v126 - 1) = v128;
            v126 -= 4;
          }
          goto LABEL_155;
        }
      }
      *uint64_t v96 = v105;
      uint64_t v121 = v96 + 1;
LABEL_157:
      *int v106 = v121;
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_20CE606D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::MovingAttentionComponent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4);
}

double kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  uint64_t v52 = a2;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1CB, "in.NumCols() == input_dim_", v9);
  }
  if (a6) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1CC, "batch_idx == 0", v9);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 44);
  int v11 = *(_DWORD *)(a2 + 20);
  uint64_t v12 = (v11 / (int)v10);
  if (v12 * v10 != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1CF, "num_seq * seq_size == in.NumRows()", v9);
  }
  int v13 = *(_DWORD *)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 12);
  uint64_t v15 = *(void *)(a5 + 32);
  *(void *)(a1 + 152) = v15;
  *(void *)(a1 + 200) = v15;
  kaldi::CuMatrix<float>::Resize(a1 + 120, v10, *(unsigned int *)(a1 + 40), 0, 0);
  uint64_t v54 = a1 + 168;
  kaldi::CuMatrix<float>::Resize(a1 + 168, v10, *(unsigned int *)(*(void *)(a1 + 16) + 8), 0, 0);
  if ((int)v12 >= 1)
  {
    uint64_t v17 = 0;
    unsigned int v55 = v13 * v14;
    uint64_t v49 = v12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, v52, v10 * v17, v10, 0, *(_DWORD *)(v52 + 16));
      uint64_t v18 = *(void *)(a1 + 16);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, a3, v10 * v17, v10, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, (uint64_t)&v70, 0, SHIDWORD(v71), 0, *(_DWORD *)(*(void *)(a1 + 16) + 12));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v64, a4, v10 * v17, v10, 0, *(_DWORD *)(a4 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, (uint64_t)&v64, 0, SHIDWORD(v65), 0, *(_DWORD *)(*(void *)(a1 + 16) + 12));
      (*(void (**)(uint64_t, void (***)(), void (***)(), void (***)(), uint64_t, void))(*(void *)v18 + 128))(v18, &v76, &v73, &v67, v54, 0);
      uint64_t v67 = off_26C2096F8;
      long long v68 = 0u;
      long long v69 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
      uint64_t v64 = off_26C2096F8;
      long long v65 = 0u;
      long long v66 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v64);
      unsigned int v73 = off_26C2096F8;
      long long v74 = 0u;
      long long v75 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
      int v70 = off_26C2096F8;
      long long v71 = 0u;
      long long v72 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v70);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, a5, v10 * v17, v10, 0, *(_DWORD *)(a5 + 16));
      if (*(unsigned char *)(a1 + 419) && (int)v10 >= 1)
      {
        for (unint64_t i = 0; i != v10; ++i)
        {
          int v21 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * i) + 4 * v17) - *(_DWORD *)(a1 + 408))
              * *(_DWORD *)(a1 + 8);
          if (v21 < 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1E9, "begin >= 0", v19);
          }
          if (*(int *)(a1 + 12) >= 1)
          {
            int v22 = 0;
            do
            {
              if (i >= HIDWORD(v74)) {
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
              }
              *(void *)&long long v71 = v74 + 4 * (int)v75 * (int)i;
              int v70 = &off_26C209728;
              *((void *)&v71 + 1) = DWORD2(v74);
              *(void *)&long long v72 = *((void *)&v75 + 1);
              if (i >= *(unsigned int *)(a1 + 44)) {
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
              }
              unsigned int v23 = *(_DWORD *)(a1 + 40);
              uint64_t v24 = *(void *)(a1 + 56);
              *(void *)&long long v65 = *(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * (int)i;
              uint64_t v64 = &off_26C209728;
              *((void *)&v65 + 1) = v23;
              *(void *)&long long v66 = v24;
              kaldi::CuSubVector<float>::CuSubVector(&v67, (uint64_t)&v64, v21 + *(_DWORD *)(a1 + 8) * v22, *(_DWORD *)(a1 + 8), v19);
              if (i >= *(unsigned int *)(a1 + 188)) {
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
              }
              unsigned int v26 = *(_DWORD *)(a1 + 184);
              uint64_t v27 = *(void *)(a1 + 200);
              uint64_t v57 = *(void *)(a1 + 176) + 4 * *(_DWORD *)(a1 + 192) * (int)i;
              uint64_t v56 = &off_26C209728;
              uint64_t v58 = v26;
              uint64_t v59 = v27;
              kaldi::CuSubVector<float>::CuSubVector(&v60, (uint64_t)&v56, *(_DWORD *)(a1 + 8) * v22, *(_DWORD *)(a1 + 8), v25);
              kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v70, (uint64_t)&v67, (uint64_t)&v60, v28, v29, 1.0, 1.0);
              ++v22;
            }
            while (v22 < *(_DWORD *)(a1 + 12));
          }
        }
      }
      if (*(unsigned char *)(a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, v54, 0, *(_DWORD *)(a1 + 188), (const char *)v55, *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v73, (uint64_t)&v70, 111, v30, v31, 1.0, 1.0);
        int v70 = off_26C2096F8;
        long long v71 = 0u;
        long long v72 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v70);
      }
      if ((int)v10 >= 1)
      {
        for (unint64_t j = 0; j != v10; ++j)
        {
          int v33 = *(_DWORD *)(a1 + 8);
          int v34 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * j) + 4 * v17) - *(_DWORD *)(a1 + 408)) * v33;
          if (*(unsigned char *)(a1 + 419))
          {
            if (*(int *)(a1 + 12) >= 1)
            {
              int v35 = 0;
              do
              {
                if (j >= *(unsigned int *)(a1 + 140)) {
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
                }
                unsigned int v36 = *(_DWORD *)(a1 + 136);
                uint64_t v37 = *(void *)(a1 + 152);
                *(void *)&long long v68 = *(void *)(a1 + 128) + 4 * *(_DWORD *)(a1 + 144) * (int)j;
                uint64_t v67 = &off_26C209728;
                *((void *)&v68 + 1) = v36;
                *(void *)&long long v69 = v37;
                kaldi::CuSubVector<float>::CuSubVector(&v70, (uint64_t)&v67, v34 + *(_DWORD *)(a1 + 8) * v35, *(_DWORD *)(a1 + 8), v19);
                if (j >= HIDWORD(v77)) {
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v38);
                }
                *(void *)&long long v65 = v77 + 4 * (int)v78 * (int)j;
                uint64_t v64 = &off_26C209728;
                *((void *)&v65 + 1) = DWORD2(v77);
                *(void *)&long long v66 = *((void *)&v78 + 1);
                if (j >= *(unsigned int *)(a1 + 188)) {
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v38);
                }
                unsigned int v39 = *(_DWORD *)(a1 + 184);
                uint64_t v40 = *(void *)(a1 + 200);
                uint64_t v57 = *(void *)(a1 + 176) + 4 * *(_DWORD *)(a1 + 192) * (int)j;
                uint64_t v56 = &off_26C209728;
                uint64_t v58 = v39;
                uint64_t v59 = v40;
                kaldi::CuSubVector<float>::CuSubVector(&v60, (uint64_t)&v56, *(_DWORD *)(a1 + 8) * v35, *(_DWORD *)(a1 + 8), v38);
                kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v70, (uint64_t)&v64, (uint64_t)&v60, v41, v42, 1.0, 1.0);
                ++v35;
              }
              while (v35 < *(_DWORD *)(a1 + 12));
            }
          }
          else
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, a1 + 120, 0, *(_DWORD *)(a1 + 140), (const char *)((*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * j) + 4 * v17)- *(_DWORD *)(a1 + 408))* v33), v55);
            if (j >= HIDWORD(v71)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v43);
            }
            *(void *)&long long v65 = v71 + 4 * (int)v72 * (int)j;
            uint64_t v64 = &off_26C209728;
            *((void *)&v65 + 1) = DWORD2(v71);
            *(void *)&long long v66 = *((void *)&v72 + 1);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, v54, 0, *(_DWORD *)(a1 + 188), 0, v55);
            if (j >= HIDWORD(v68)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v46);
            }
            uint64_t v61 = v68 + 4 * (int)v69 * (int)j;
            long long v60 = &off_26C209728;
            uint64_t v62 = DWORD2(v68);
            uint64_t v63 = *((void *)&v69 + 1);
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v64, (uint64_t)&v60, v44, v45, v46, 1.0, 1.0);
            long long v60 = &off_26C209728;
            uint64_t v61 = 0;
            LODWORD(v62) = 0;
            uint64_t v63 = 0;
            uint64_t v67 = off_26C2096F8;
            long long v68 = 0u;
            long long v69 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
            uint64_t v64 = &off_26C209728;
            *(void *)&long long v65 = 0;
            DWORD2(v65) = 0;
            *(void *)&long long v66 = 0;
            int v70 = off_26C2096F8;
            long long v71 = 0u;
            long long v72 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v70);
          }
        }
      }
      unsigned int v73 = off_26C2096F8;
      long long v74 = 0u;
      long long v75 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
      uint64_t v76 = off_26C2096F8;
      long long v77 = 0u;
      long long v78 = 0u;
      *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v76).n128_u64[0];
      ++v17;
    }
    while (v17 != v49);
  }
  if (*(unsigned char *)(a1 + 418))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(*(void *)(a1 + 16) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8));
    kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&v76, 111, v47, v48, 1.0, 1.0);
    uint64_t v76 = off_26C2096F8;
    long long v77 = 0u;
    long long v78 = 0u;
    *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v76).n128_u64[0];
  }
  return result;
}

void sub_20CE612C0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = off_26C2096F8;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 - 128);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 256) + 16) + 240))();
}

void kaldi::nnet1::MovingAttentionComponent::AccumGradients(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  uint64_t v40 = a2;
  uint64_t v10 = *a1;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x218, "input.NumCols() == input_dim_", v9);
  }
  if (a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x219, "batch_idx == 0", v9);
  }
  uint64_t v11 = *((unsigned int *)a1 + 11);
  int v12 = *(_DWORD *)(a2 + 20);
  uint64_t v13 = (v12 / (int)v11);
  if (v13 * v11 != v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x21C, "num_seq * seq_size == input.NumRows()", v9);
  }
  int v14 = (const char *)(*((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3));
  a1[13] = a4;
  if (*((unsigned char *)a1 + 417)) {
    int v15 = *(_DWORD *)((char *)a1 + *(void *)(v10 - 24) + 8);
  }
  else {
    int v15 = 0;
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 9), v11, (v15 + v14), 1u, 0);
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)a1[2] + 272))();
  int v50 = &off_26C20B6C0;
  long long v17 = *(_OWORD *)(v16 + 23);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)(v16 + 8);
  *(_OWORD *)((char *)&v51[3] + 3) = v17;
  float v18 = v51[0];
  v51[0] = v51[0] / (float)(int)v13;
  (*(void (**)(void))(*(void *)a1[2] + 264))();
  uint64_t v38 = v13;
  if ((int)v13 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v37 = a4;
    do
    {
      memset(v49, 0, sizeof(v49));
      int v48 = off_26C2096F8;
      if (*((unsigned char *)a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), v14, *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8));
        v49[0] = v47[0];
        *(_OWORD *)&v49[1] = *(_OWORD *)&v47[1];
        v49[3] = v47[3];
        unint64_t v46 = off_26C2096F8;
        memset(v47, 0, sizeof(v47));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v40, v11 * v19, v11, 0, *(_DWORD *)(v40 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v48, (uint64_t)&v46, 111, v20, v21);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v40, v11 * v19, v11, 0, *(_DWORD *)(v40 + 16));
        v49[0] = v47[0];
        *(_OWORD *)&v49[1] = *(_OWORD *)&v47[1];
        v49[3] = v47[3];
      }
      unint64_t v46 = off_26C2096F8;
      memset(v47, 0, sizeof(v47));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
      if ((int)v11 >= 1)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          int v24 = *(_DWORD *)(*(void *)(a1[36] + 24 * i) + 4 * v19) - *((_DWORD *)a1 + 102);
          if (v24 < 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x231, "begin >= 0", v22);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), 0, (int)v14);
          if (i >= HIDWORD(v47[1])) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          }
          *(void *)&long long v42 = v47[0] + 4 * LODWORD(v47[2]) * (int)i;
          uint64_t v41 = &off_26C209728;
          *((void *)&v42 + 1) = LODWORD(v47[1]);
          *(void *)&long long v43 = v47[3];
          if (i >= *((unsigned int *)a1 + 11)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          }
          unsigned int v26 = *((_DWORD *)a1 + 10);
          uint64_t v27 = a1[7];
          v44[1] = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)i;
          v44[0] = &off_26C209728;
          v44[2] = v26;
          v44[3] = v27;
          kaldi::CuSubVector<float>::CuSubVector(v45, (uint64_t)v44, *((_DWORD *)a1 + 2) * v24, (int)v14, v25);
          kaldi::CuVectorBase<float>::CopyFromVec(&v41, (uint64_t)v45, v28, v29, v30);
          uint64_t v41 = &off_26C209728;
          *(void *)&long long v42 = 0;
          DWORD2(v42) = 0;
          *(void *)&long long v43 = 0;
          unint64_t v46 = off_26C2096F8;
          memset(v47, 0, sizeof(v47));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
        }
      }
      if (*((unsigned char *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        int v31 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), (const char *)(*((_DWORD *)a1 + 2) * v31), *((_DWORD *)a1 + 2));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v46, (uint64_t)&v48, v32, v33, v34);
          unint64_t v46 = off_26C2096F8;
          memset(v47, 0, sizeof(v47));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
          ++v31;
        }
        while (v31 < *((_DWORD *)a1 + 3));
      }
      uint64_t v35 = a1[2];
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, a3, v11 * v19, v11, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v41, 0, SHIDWORD(v42), 0, *(_DWORD *)(a1[2] + 12));
      (*(void (**)(uint64_t, uint64_t *, void (***)(), uint64_t, void))(*(void *)v35 + 232))(v35, a1 + 9, &v46, v37, 0);
      unint64_t v46 = off_26C2096F8;
      memset(v47, 0, sizeof(v47));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
      uint64_t v41 = off_26C2096F8;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v36 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v41);
      (*(void (**)(__n128))(*(void *)a1[2] + 256))(v36);
      int v48 = off_26C2096F8;
      memset(v49, 0, sizeof(v49));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
      ++v19;
    }
    while (v19 != v38);
  }
  v51[0] = v18;
  (*(void (**)(uint64_t, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(void *)a1[2] + 264))(a1[2], &v50);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v50);
}

void sub_20CE61D58(_Unwind_Exception *a1)
{
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)(v1 - 144));
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetGradient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 224))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetGradient(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 240) + 16) + 224))();
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(const void ***this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  for (unint64_t i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v7);
        if (v9)
        {
          uint64_t v10 = (const void *)v9;
          kaldi::nnet1::Component::Delete(v11, (kaldi::nnet1::Component *)1);
          *unint64_t i = v10;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::Nnet::CheckDimensions(uint64_t *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *this;
  uint64_t v5 = this[1];
  if ((unint64_t)(v5 - *this) >= 9)
  {
    uint64_t v7 = this;
    uint64_t v8 = 0;
    while (1)
    {
      this = *(uint64_t **)(v6 + 8 * v8);
      if (!this) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x57A, "components_[i] != NULL", a5);
      }
      if (*((_DWORD *)this + 3) != *(_DWORD *)(*(void *)(v6 + 8 * v8 + 8) + 8)) {
        break;
      }
      if (v8)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 24))(this);
        switch(this)
        {
          case 0x10C:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1414);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word vec component can only be the first component");
            goto LABEL_33;
          case 0x10E:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1416);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word multivec component can only be the first component");
            goto LABEL_33;
          case 0x10F:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1418);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The compressed word vec component can only be the first component");
            goto LABEL_33;
        }
        uint64_t v6 = *v7;
        uint64_t v5 = v7[1];
      }
      unint64_t v9 = v8 + 2;
      ++v8;
      if (v9 >= (v5 - v6) >> 3)
      {
        if ((unint64_t)(v5 - v6) <= 8) {
          return this;
        }
        this = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v5 - 8) + 24))(*(void *)(v5 - 8));
        switch(this)
        {
          case 0x10F:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1429);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The compressed word vec component can only be the first component");
            break;
          case 0x10E:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1427);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word multivec component can only be the first component");
            break;
          case 0x10C:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1425);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word vec component can only be the first component");
            break;
          default:
            return this;
        }
LABEL_33:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
    uint64_t v22 = v8;
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1406);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Dimension mismatch between output/input of components ", 54);
    uint64_t v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*v7 + 8 * v22) + 24))(*(void *)(*v7 + 8 * v22));
    kaldi::nnet1::Component::TypeToMarker(v11, &v24);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v24;
    }
    else {
      int v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" and ", 5);
    uint64_t v16 = *(void *)(*v7 + 8 * v22 + 8);
    long long v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    kaldi::nnet1::Component::TypeToMarker(v17, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v18 = &v23;
    }
    else {
      float v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v23.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    int v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" <--> ", 6);
    std::ostream::operator<<();
    std::string::~string(&v23);
    std::string::~string(&v24);
    goto LABEL_33;
  }
  return this;
}

void sub_20CE623CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a23);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(const void ***this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  for (unint64_t i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(v7);
        if (v9)
        {
          uint64_t v10 = (const void *)v9;
          kaldi::nnet1::Component::Delete(v11, (kaldi::nnet1::Component *)1);
          *unint64_t i = v10;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
}

void kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions(kaldi::nnet1::NnetTrainOptions *this)
{
}

void kaldi::nnet1::HistoryOptions::~HistoryOptions(kaldi::nnet1::HistoryOptions *this)
{
}

void kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
}

void non-virtual thunk to'kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
}

double kaldi::nnet1::NnetCorrPacker::NnetCorrPacker(kaldi::nnet1::NnetCorrPacker *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = -1082130432;
  return result;
}

uint64_t kaldi::nnet1::Nnet::GetComponent(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a2 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x384, "static_cast<size_t>(component) < components_.size()", a5);
  }
  return *(void *)(*(void *)this + 8 * a2);
}

{
  if (a2 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x37F, "static_cast<size_t>(component) < components_.size()", a5);
  }
  return *(void *)(*(void *)this + 8 * a2);
}

void kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this, const kaldi::nnet1::Nnet *a2)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  operator new();
}

void sub_20CE62888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)(v12 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v12 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  int v14 = *(void **)(v12 + 48);
  if (v14)
  {
    *(void *)(v12 + 56) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(v12 + 24);
  if (v15)
  {
    *(void *)(v12 + 32) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetTrainOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::NnetTrainOptions *lpsrc, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = a3;
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    int v8 = 0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(this, v8, a3, a4, a5);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 32))(Component))
      {
        uint64_t v10 = kaldi::nnet1::Nnet::GetComponent(this, v8, a3, a4, a5);
        (*(void (**)(uint64_t, const kaldi::nnet1::NnetTrainOptions *))(*(void *)v10 + 264))(v10, lpsrc);
      }
      ++v8;
    }
    while (v8 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  uint64_t v16 = *((void *)this + 18);
  if (v15)
  {
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    operator new();
  }
  long long v17 = *(_OWORD *)((char *)lpsrc + 8);
  *(_OWORD *)(v16 + 23) = *(_OWORD *)((char *)lpsrc + 23);
  *(_OWORD *)(v16 + 8) = v17;
  if (v5 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19, "SetTrainOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1536, 2);
    float v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"a regular trainer option. ", 26);
    kaldi::nnet1::operator<<(v18, *((void *)this + 18));
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19);
  }
  if (v5)
  {
    kaldi::nnet1::Nnet::ResetInternalBuffers(this, v11, v12, v13, v14);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
}

void sub_20CE62C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::ResetBuffersAndStates(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v14 = 0;
  int v4 = (kaldi::Input *)kaldi::Input::Input(v13, a2, &v14);
  int v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::nnet1::Nnet::Read((uint64_t **)a1, v5, v14, 0);
  kaldi::Input::Close((kaldi::Input *)v13);
  if (((*(void *)(a1 + 8) - *(void *)a1) & 0x7FFFFFFF8) == 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1241);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"The network '", 13);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is empty.", 11);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  kaldi::Input::~Input((kaldi::Input *)v13);
}

void sub_20CE62DE4(_Unwind_Exception *a1)
{
  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Nnet::SetGradientNormalization(void *result, uint64_t a2, int a3, int a4, float a5)
{
  uint64_t v7 = result;
  if (a3)
  {
    int v8 = (const void **)result[3];
    if (v8 != (const void **)result[4])
    {
      do
      {
        uint64_t v9 = (char *)*v8;
        uint64_t v10 = *(void *)*v8;
        if (v11) {
          double result = (void *)kaldi::nnet1::ParallelComponent::SetGradientNormalization((uint64_t)v11, a2, 1, a5);
        }
        else {
          double result = (void *)(*(uint64_t (**)(char *, uint64_t, float))(*(void *)&v9[*(void *)(v10 - 24)]
        }
                                                                               + 240))(&v9[*(void *)(v10 - 24)], a2, a5);
        ++v8;
      }
      while (v8 != (const void **)v7[4]);
    }
  }
  else
  {
    if (a4) {
      int v12 = -2;
    }
    else {
      int v12 = -1;
    }
    int v13 = v12 + ((result[1] - *result) >> 3);
    if (v13 >= 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (v13 + 1);
      do
      {
        double result = *(void **)(*v7 + 8 * v14);
        if (result)
        {
          if (result) {
            double result = (void *)(*(uint64_t (**)(void *, uint64_t, float))(*result + 240))(result, a2, a5);
          }
        }
        ++v14;
      }
      while (v15 != v14);
    }
  }
  return result;
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::operator=(kaldi::nnet1::Nnet *this, uint64_t a2)
{
  if ((kaldi::nnet1::Nnet *)a2 != this)
  {
    kaldi::nnet1::Nnet::Destroy(this);
    if ((int)((*(void *)(a2 + 8) - *(void *)a2) >> 3) < 1)
    {
      *((void *)this + 1) = *(void *)this;
    }
    else
    {
      int v7 = 0;
      do
      {
        uint64_t Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)a2, v7, v4, v5, v6);
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)Component + 16))(Component);
        uint64_t v10 = v9;
        int v12 = (uint64_t *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = ((uint64_t)v12 - *(void *)this) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v11 - *(void *)this;
          uint64_t v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v17);
          }
          else {
            float v18 = 0;
          }
          std::string::size_type v19 = (uint64_t *)&v18[8 * v14];
          *std::string::size_type v19 = v10;
          int v13 = v19 + 1;
          int v21 = *(char **)this;
          uint64_t v20 = (char *)*((void *)this + 1);
          if (v20 != *(char **)this)
          {
            do
            {
              uint64_t v22 = *((void *)v20 - 1);
              v20 -= 8;
              *--std::string::size_type v19 = v22;
            }
            while (v20 != v21);
            uint64_t v20 = *(char **)this;
          }
          *(void *)this = v19;
          *((void *)this + 1) = v13;
          *((void *)this + 2) = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *int v12 = v9;
          int v13 = v12 + 1;
        }
        *((void *)this + 1) = v13;
        ++v7;
      }
      while (v7 < (int)((*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    kaldi::nnet1::Nnet::SetTrainOptions(this, *(const kaldi::nnet1::NnetTrainOptions **)(a2 + 144), 1, v5, v6);
    kaldi::nnet1::Nnet::ResetInternalBuffers(this, v23, v24, v25, v26);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::Destroy(kaldi::nnet1::Nnet *this)
{
  uint64_t v2 = *(void *)this;
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      kaldi::nnet1::Component::Delete(*(void **)(v2 + 8 * v3++), (kaldi::nnet1::Component *)1);
      uint64_t v2 = *(void *)this;
    }
    while (v3 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  uint64_t v4 = (kaldi::CuWorkspace **)*((void *)this + 44);
  uint64_t v5 = (kaldi::CuWorkspace **)*((void *)this + 45);
  while (v4 != v5)
  {
    if (*v4)
    {
      kaldi::CuWorkspace::~CuWorkspace(*v4);
      MEMORY[0x2105595E0]();
    }
    ++v4;
  }
  std::vector<kaldi::nnet1::Component *>::resize((uint64_t)this, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, 0);
  std::vector<kaldi::nnet1::Component *>::resize((uint64_t)this + 352, 0);
  uint64_t result = *((void *)this + 20);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 20) = 0;
  }
  return result;
}

void kaldi::nnet1::Nnet::~Nnet(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::Destroy(this);
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 44);
  if (v3)
  {
    *((void *)this + 45) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 40);
  if (v4) {
    free(v4);
  }
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  uint64_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  uint64_t v10 = (void **)((char *)this + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  kaldi::CuVector<float>::~CuVector((void *)this + 28);
  kaldi::CuVector<float>::~CuVector((void *)this + 24);
  uint64_t v6 = (void *)*((void *)this + 21);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v10 = (void **)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 96);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  int v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v9;
    operator delete(v9);
  }
}

void *kaldi::nnet1::Nnet::ResetHistoryStateIfExists(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || (uint64_t v6 = result, *(_DWORD *)(result[18] + 32) <= (int)a4)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryStateIfExists", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x19B, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  }
  int v7 = (uint64_t *)result[6];
  if (v7 != (uint64_t *)result[7])
  {
    do
    {
      uint64_t v10 = *v7++;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a2, a3, a4);
    }
    while (v7 != (uint64_t *)v6[7]);
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 48);
  if (v1 != *(uint64_t **)(this + 56))
  {
    uint64_t v2 = this;
    do
    {
      uint64_t v3 = *v1++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    }
    while (v1 != *(uint64_t **)(v2 + 56));
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::HistoryStateSize(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 6);
  if (v1 == *((uint64_t **)this + 7)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v4 = *v1++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) + v3;
  }
  while (v1 != *((uint64_t **)this + 7));
  return v3;
}

uint64_t kaldi::nnet1::Nnet::GetHistoryState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(result + 48);
  uint64_t v3 = *(uint64_t **)(result + 56);
  if (v4 != v3)
  {
    if ((char *)v3 - (char *)v4 == 8)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)*v4 + 40);
      return v7();
    }
    else
    {
      uint64_t v8 = result;
      LODWORD(v9) = 0;
      do
      {
        uint64_t v11 = *v4++;
        uint64_t v9 = (*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11) + v9;
      }
      while (v4 != *(uint64_t **)(v8 + 56));
      kaldi::CuMatrix<float>::Resize(a2, v10, v9, 1u, 0);
      long long v23 = 0u;
      long long v22 = 0u;
      int v21 = off_26C211198;
      char v24 = 0;
      int v13 = *(void **)(v8 + 48);
      if (v13 == *(void **)(v8 + 56))
      {
        LODWORD(v14) = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          (*(void (**)(void, uint64_t (***)(), uint64_t))(*(void *)*v13 + 40))(*v13, &v21, a3);
          if (HIDWORD(v22) != v10) {
            kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1C5, "comp_history.NumRows() == num_seq", v15);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v14, SDWORD2(v22));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, (uint64_t)&v21, 111, v16, v17);
          float v18 = off_26C2096F8;
          long long v19 = 0u;
          long long v20 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
          uint64_t v14 = (const char *)(DWORD2(v22) + v14);
          ++v13;
        }
        while (v13 != *(void **)(v8 + 56));
      }
      if (v14 != v9) {
        kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1C9, "count == history_size", v12);
      }
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
    }
  }
  return result;
}

void sub_20CE637D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Nnet::GetHistoryState(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (uint64_t *)result[6];
  uint64_t v5 = (uint64_t *)result[7];
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)*v6 + 48);
      return (void *)v11();
    }
    else
    {
      int v12 = result;
      if (v6 == v5)
      {
        uint64_t v13 = 0;
      }
      else
      {
        LODWORD(v13) = 0;
        do
        {
          uint64_t v14 = *v6++;
          uint64_t v13 = (*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14) + v13;
        }
        while (v6 != (uint64_t *)v12[7]);
      }
      kaldi::CuVector<float>::Resize(a2, v13, 1u, a4, a5);
      v23[1] = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      v23[0] = off_26C2111C8;
      uint64_t v16 = (void *)v12[6];
      if (v16 == (void *)v12[7])
      {
        int v17 = 0;
      }
      else
      {
        int v17 = 0;
        do
        {
          (*(void (**)(void, void *, uint64_t, uint64_t))(*(void *)*v16 + 48))(*v16, v23, a3, a4);
          kaldi::CuSubVector<float>::CuSubVector(v22, a2, v17, v24, v18);
          kaldi::CuVectorBase<float>::CopyFromVec(v22, (uint64_t)v23, v19, v20, v21);
          v17 += v24;
          ++v16;
        }
        while (v16 != (void *)v12[7]);
      }
      if (v17 != v13) {
        kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1DE, "count == history_size", v15);
      }
      return kaldi::CuVector<float>::~CuVector(v23);
    }
  }
  return result;
}

void sub_20CE63A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::SetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(uint64_t **)(result + 48);
  uint64_t v5 = *(uint64_t **)(result + 56);
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)*v6 + 56);
      return v10();
    }
    else
    {
      uint64_t v11 = result;
      if (v6 == v5)
      {
        int v12 = 0;
        uint64_t v6 = *(uint64_t **)(result + 56);
      }
      else
      {
        int v12 = 0;
        do
        {
          uint64_t v13 = *v6++;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
          v12 += result;
        }
        while (v6 != *(uint64_t **)(v11 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 490);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"the network has history size ", 29);
        float v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19);
      }
      uint64_t v14 = *(uint64_t **)(v11 + 48);
      if (v14 == v6)
      {
        LODWORD(v15) = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          int v16 = (*(uint64_t (**)(void))(*(void *)*v14 + 16))();
          uint64_t v17 = *v14;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a2, 0, *(_DWORD *)(a2 + 20), v15, v16);
          (*(void (**)(uint64_t, void (***)(), uint64_t))(*(void *)v17 + 56))(v17, &v19, a3);
          uint64_t v19 = off_26C2096F8;
          long long v20 = 0u;
          long long v21 = 0u;
          uint64_t result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v19);
          uint64_t v15 = (const char *)(v16 + v15);
          ++v14;
        }
        while (v14 != *(uint64_t **)(v11 + 56));
      }
      if (v15 != v12) {
        kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1F6, "count == history_size", a5);
      }
    }
  }
  return result;
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v11)(void);
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void v21[34];
  uint64_t vars8;

  uint64_t v6 = *(uint64_t **)(result + 48);
  uint64_t v5 = *(uint64_t **)(result + 56);
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)*v6 + 64);
      return v11();
    }
    else
    {
      int v12 = result;
      if (v6 == v5)
      {
        uint64_t v13 = 0;
        uint64_t v6 = *(uint64_t **)(result + 56);
      }
      else
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v14 = *v6++;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
          v13 += result;
        }
        while (v6 != *(uint64_t **)(v12 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v13)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 514);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"the network has history size ", 29);
        long long v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
      }
      uint64_t v15 = *(uint64_t **)(v12 + 48);
      if (v15 == v6)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = 0;
        do
        {
          uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v15 + 16))();
          float v18 = *v15++;
          kaldi::CuSubVector<float>::CuSubVector(v21, a2, v16, v17, v19);
          uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v18 + 64))(v18, v21, a3, a4);
          v16 += v17;
        }
        while (v15 != *(uint64_t **)(v12 + 56));
      }
      if (v16 != v13) {
        kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x20E, "count == history_size", a5);
      }
    }
  }
  return result;
}

void sub_20CE63CC4(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_20CE63CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_26C2096F8;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void sub_20CE63F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Nnet::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(result + 24);
  if (v3 != *(uint64_t **)(result + 32))
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, a3);
    }
    while (v3 != *(uint64_t **)(v6 + 32));
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetGradientNormalization(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)(result + 184);
  if (v4 != *(void *)(result + 192))
  {
    uint64_t v8 = result;
    do
    {
      uint64_t result = kaldi::nnet1::Nnet::SetGradientNormalization(v4, a2, a3, 0, a4);
      v4 += 376;
    }
    while (v4 != *(void *)(v8 + 192));
  }
  return result;
}

void ***kaldi::nnet1::Nnet::Backpropagate(void ***result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || (uint64_t v6 = result, *((_DWORD *)result[18] + 8) <= (int)a4)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x233, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  }
  uint64_t v10 = *result;
  uint64_t v9 = result[1];
  unint64_t v11 = (char *)v9 - (char *)*result;
  unint64_t v12 = v11 >> 3;
  if ((v11 >> 3))
  {
    if (a3) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v14 = *(void *)(v13 + 32);
    unsigned int v15 = a4;
    int v16 = (uint64_t *)&result[9][3 * a4];
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    if (*v16 != v18)
    {
      uint64_t v19 = *v16;
      do
      {
        *(void *)(v19 + 32) = v14;
        v19 += 48;
      }
      while (v19 != v18);
    }
    long long v20 = &result[15][3 * a4];
    long long v21 = *v20;
    long long v22 = v20[1];
    if (v21 != v22)
    {
      long long v23 = v21;
      do
      {
        v23[4] = v14;
        v23 += 6;
      }
      while (v23 != (void *)v22);
    }
    if ((int)v12 >= (int)(-1431655765 * ((unint64_t)(v18 - v17) >> 4))) {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x24F, "(int32)propagate_buf_[batch_idx].size() >= NumComponents() + 1", a5);
    }
    if ((int)v12 - 1 > (int)(-1431655765 * ((unint64_t)(v22 - v21) >> 4))) {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x251, "(int32)backpropagate_buf_[batch_idx].size() >= NumComponents() - 1", a5);
    }
    if (v12 == 1)
    {
      kaldi::nnet1::Component::Backpropagate(*v10, v17, v17 + 48, a2, a3, a4);
      uint64_t result = (void ***)(*(uint64_t (**)(void *))(*(void *)**v6 + 32))(**v6);
      if (!result) {
        return result;
      }
      uint64_t v24 = **v6;
      if (v24) {
      uint64_t v25 = *(uint64_t (**)(void))(*(void *)v24 + 232);
      }
      goto LABEL_39;
    }
    uint64_t v26 = (v11 << 29) - 0x100000000;
    kaldi::nnet1::Component::Backpropagate(*(v9 - 1), v17 + 48 * SHIDWORD(v26), v17 + 48 * (int)v12, a2, (uint64_t)&v21[48 * (((v11 << 29) - 0x200000000) >> 32)], a4);
    if ((*(unsigned int (**)(void))(**(void **)((char *)*v6 + (v26 >> 29)) + 32))(*(void **)((char *)*v6 + (v26 >> 29))))
    {
      uint64_t v27 = (*v6)[v26 >> 32];
      if (v27) {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v27 + 232))(v27, (uint64_t)v6[9][3 * v15] + 48 * SHIDWORD(v26), a2, v14, a4);
      }
    }
    uint64_t v28 = (v12 - 2);
    if ((int)v28 >= 1)
    {
      uint64_t v29 = 48 * (v12 - 2);
      do
      {
        uint64_t v30 = (uint64_t)v6[9][3 * a4] + v29;
        int v31 = v6[15][3 * a4];
        uint64_t v32 = v28 - 1;
        kaldi::nnet1::Component::Backpropagate((*v6)[v28], v30, v30 + 48, (uint64_t)v31 + v29, (uint64_t)v31 + 48 * (v28 - 1), a4);
        if ((*(unsigned int (**)(void *))(*(void *)(*v6)[v28] + 32))((*v6)[v28]))
        {
          uint64_t v33 = (*v6)[v28];
          if (v33) {
          (*(void (**)(void *, char *, char *, uint64_t, uint64_t))(*(void *)v33 + 232))(v33, (char *)v6[9][3 * a4] + v29, (char *)v6[15][3 * a4] + v29, v14, a4);
          }
        }
        v29 -= 48;
        --v28;
      }
      while ((unint64_t)(v32 + 1) > 1);
    }
    uint64_t v34 = (uint64_t)v6[9][3 * a4];
    kaldi::nnet1::Component::Backpropagate(**v6, v34, v34 + 48, (uint64_t)v6[15][3 * a4], a3, a4);
    uint64_t result = (void ***)(*(uint64_t (**)(void *))(*(void *)**v6 + 32))(**v6);
    if (result)
    {
      uint64_t v35 = **v6;
      if (v35) {
      uint64_t v25 = *(uint64_t (**)(void))(*(void *)v35 + 232);
      }
LABEL_39:
      return (void ***)v25();
    }
  }
  else if (a3)
  {
    return (void ***)kaldi::CuMatrix<float>::operator=(a3, a2);
  }
  return result;
}

void kaldi::nnet1::Nnet::Update(kaldi::nnet1::Nnet *this, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this != v3)
  {
    unint64_t v8 = 0;
    do
    {
      if (*((void *)this + 22) == (v3 - *(void *)this) >> 3
        && ((*(void *)(*((void *)this + 21) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "Update", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 652, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"freezing component ", 19);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (1-based) in this Update", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
        }
      }
      else if ((*(unsigned int (**)(void))(**(void **)v4 + 32))())
      {
        uint64_t v10 = *(void **)v4;
        if (*(void *)v4) {
        (*(void (**)(void *, void *, uint64_t))(*(void *)v10 + 256))(v10, a2, a3);
        }
      }
      v4 += 8;
      ++v8;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v4 != v3);
  }
}

void sub_20CE647CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Nnet::Feedforward(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x326, "NULL != out", a5);
  }
  if (*(_DWORD *)(a1[18] + 32) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x327, "opts_->num_subbatches == 1", a5);
  }
  int v6 = (int)a5;
  unint64_t v7 = (unint64_t)(a1[1] - *a1) >> 3;
  if (a4 == -1) {
    int v8 = (unint64_t)(a1[1] - *a1) >> 3;
  }
  else {
    int v8 = a4;
  }
  int v9 = v8 + a5;
  if (v8 + (int)a5 > (int)v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 812);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Components to propagate (startCompIdx=", 38);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", num_comps=", 12);
    uint64_t v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") must not be greater than ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"#components in the network (", 28);
    uint64_t v30 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  if (v8) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, v13, v14);
  }
  else if (v8 == 1)
  {
    unsigned int v15 = *(_DWORD **)(*a1 + 8 * (int)a5);
    kaldi::nnet1::Component::Propagate(v15, a2, a3, 0);
  }
  else
  {
    std::vector<kaldi::CuMatrix<float>>::vector(v31, 2uLL);
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v17 = v31[0];
    *(void *)(v31[0] + 32) = v16;
    *(void *)(v17 + 80) = v16;
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * v6), a2, v17, 0);
    BOOL v18 = 0;
    uint64_t v19 = v6;
    int v20 = v9 - 2;
    if (v6 > v9 - 2) {
      int v20 = v6;
    }
    uint64_t v21 = v20;
    for (uint64_t i = ((uint64_t)v6 << 32) + 0x100000000; ; i += 0x100000000)
    {
      uint64_t v23 = *a1;
      uint64_t v24 = v31[0] + 48 * v18;
      if (v21 == v19) {
        break;
      }
      BOOL v25 = ~v18;
      BOOL v18 = !v18;
      uint64_t v26 = *(_DWORD **)(v23 + 8 * v19++ + 8);
      kaldi::nnet1::Component::Propagate(v26, v24, v31[0] + 48 * v25, 0);
    }
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(v23 + (i >> 29)), v24, a3, 0);
    uint64_t v32 = (void **)v31;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v32);
  }
}

uint64_t kaldi::nnet1::Nnet::OutputDim(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)this == v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"OutputDim", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x371, "!components_.empty()", a5);
  }
  return *(unsigned int *)(*(void *)(v5 - 8) + 12);
}

uint64_t kaldi::nnet1::Nnet::InputDim(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)this == *((void *)this + 1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InputDim", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x376, "!components_.empty()", a5);
  }
  return *(unsigned int *)(**(void **)this + 8);
}

void *kaldi::nnet1::Nnet::GetHistoricalComponents@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a2, *((const void **)this + 6), *((void *)this + 7), (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3);
}

void std::vector<BOOL>::insert(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v10 >= v11 << 6)
  {
    uint64_t v35 = 0;
    long long v36 = 0uLL;
    if ((uint64_t)(v10 + 1) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = v11 << 6;
    unint64_t v17 = v11 << 7;
    unint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v17 > v18) {
      unint64_t v18 = v17;
    }
    if (v16 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve(&v35, v19);
    int v20 = *(unint64_t **)a1;
    *(void *)&long long v36 = *(void *)(a1 + 8) + 1;
    uint64_t v37 = v35;
    int v38 = 0;
    std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v20, 0, a2, a3, (uint64_t)&v37, (uint64_t)&v33);
    uint64_t v21 = v33;
    *(void *)a5 = v33;
    char v22 = v34;
    *(_DWORD *)(a5 + 8) = v34;
    unint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = (void *)(*(void *)a1 + 8 * (v23 >> 6));
    unsigned int v25 = v23 & 0x3F;
    uint64_t v37 = &v35[8 * ((unint64_t)v36 >> 6)];
    int v38 = v36 & 0x3F;
    if (v38 == v25) {
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    }
    else {
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    }
    uint64_t v28 = *(char **)a1;
    *(void *)a1 = v35;
    uint64_t v35 = v28;
    long long v29 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v36;
    long long v36 = v29;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    BOOL v12 = *(unint64_t **)a1;
    uint64_t v13 = (void *)(*(void *)a1 + 8 * (v10 >> 6));
    uint64_t v14 = *(void *)(a1 + 8) & 0x3FLL;
    unsigned int v15 = v10 & 0x3F;
    *(void *)(a1 + 8) = v10 + 1;
    uint64_t v35 = (char *)&v12[(v10 + 1) >> 6];
    if ((((_BYTE)v10 + 1) & 0x3F) == v14)
    {
      LODWORD(v36) = v14;
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    else
    {
      LODWORD(v36) = ((_BYTE)v10 + 1) & 0x3F;
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    uint64_t v26 = 8 * (a2 - *(void *)a1) + a3;
    if (v26 < 0)
    {
      uint64_t v30 = v26 - 63;
      if (v26 - 63 < 0) {
        uint64_t v30 = 8 * (a2 - *(void *)a1) + a3;
      }
      uint64_t v27 = v30 >> 6;
    }
    else
    {
      uint64_t v27 = (unint64_t)v26 >> 6;
    }
    uint64_t v21 = (uint64_t *)(*(void *)a1 + 8 * v27);
    char v22 = v26 & 0x3F;
    *(void *)a5 = v21;
    *(_DWORD *)(a5 + 8) = v26 & 0x3F;
  }
  uint64_t v31 = 1 << v22;
  if (*a4) {
    uint64_t v32 = *v21 | v31;
  }
  else {
    uint64_t v32 = *v21 & ~v31;
  }
  *uint64_t v21 = v32;
}

void sub_20CE64DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::AppendComponent(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = a2;
  unint64_t v7 = (uint64_t *)*((void *)this + 1);
  if (*((void *)this + 22) == ((uint64_t)v7 - *(void *)this) >> 3)
  {
    char v19 = 0;
    std::vector<BOOL>::push_back((uint64_t)this + 168, &v19);
    unint64_t v7 = (uint64_t *)*((void *)this + 1);
  }
  unint64_t v8 = *((void *)this + 2);
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((uint64_t)v7 - *(void *)this) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - *(void *)this;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      a2 = v12;
    }
    if (a2) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, a2);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (uint64_t *)&v13[8 * v10];
    unsigned int v15 = &v13[8 * a2];
    *uint64_t v14 = v5;
    int v9 = v14 + 1;
    unint64_t v17 = *(char **)this;
    unint64_t v16 = (char *)*((void *)this + 1);
    if (v16 != *(char **)this)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--uint64_t v14 = v18;
      }
      while (v16 != v17);
      unint64_t v16 = *(char **)this;
    }
    *(void *)this = v14;
    *((void *)this + 1) = v9;
    *((void *)this + 2) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v7 = v5;
    int v9 = v7 + 1;
  }
  *((void *)this + 1) = v9;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  unint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  unint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

uint64_t kaldi::nnet1::Nnet::ReleaseComponent(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(void *)this;
  uint64_t v5 = (char *)*((void *)this + 1);
  uint64_t v7 = (uint64_t)&v5[-*(void *)this];
  if ((int)((unint64_t)v7 >> 3) <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReleaseComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x3B5, "component < NumComponents()", a5);
  }
  unint64_t v10 = *((void *)this + 22);
  if (v10 == v7 >> 3)
  {
    uint64_t v11 = *((void *)this + 21);
    uint64_t v12 = a2 >> 6;
    if (a2 < 0) {
      uint64_t v12 = -(uint64_t)((63 - a2) >> 6);
    }
    uint64_t v13 = v11 + 8 * v12;
    uint64_t v14 = a2 & 0x3F;
    uint64_t v15 = v14 | (v12 << 6);
    uint64_t v16 = v15 - 63;
    if (v15 < 63) {
      uint64_t v16 = v14 | (v12 << 6);
    }
    uint64_t v17 = v16 >> 6;
    uint64_t v18 = v12 & 0x3FFFFFFFFFFFFFFLL;
    if (v15 < 0) {
      uint64_t v18 = v17;
    }
    char v19 = (unint64_t *)(v13 + (((unint64_t)(v14 + 1) >> 3) & 8));
    unsigned int v20 = (v14 + 1) & 0x3F;
    uint64_t v21 = v11 + 8 * (v10 >> 6);
    unsigned int v22 = v10 & 0x3F;
    uint64_t v29 = v11 + 8 * v18;
    int v30 = v14;
    if (v14 == v20) {
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v19, v20, v21, v22, (uint64_t)&v29, (uint64_t)v28);
    }
    else {
      std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v19, v20, v21, v22, (uint64_t)&v29, (uint64_t)v28);
    }
    --*((void *)this + 22);
    uint64_t v6 = *(void *)this;
    uint64_t v5 = (char *)*((void *)this + 1);
  }
  unint64_t v23 = (uint64_t *)(v6 + 8 * a2);
  uint64_t v24 = v23 + 1;
  uint64_t v25 = *v23;
  int64_t v26 = v5 - (char *)(v23 + 1);
  if (v5 != (char *)(v23 + 1)) {
    memmove(v23, v24, v5 - (unsigned char *)v24);
  }
  *((void *)this + 1) = (char *)v23 + v26;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, (uint64_t)v24, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  return v25;
}

uint64_t kaldi::nnet1::Nnet::GetParams(kaldi::nnet1::Nnet *a1, uint64_t a2)
{
  uint64_t v4 = kaldi::nnet1::Nnet::NumParams(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v7 = *(void *)a1;
  if (*((void *)a1 + 1) == *(void *)a1)
  {
    int v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    int v9 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v7 + 8 * v8) + 32))(*(void *)(v7 + 8 * v8)))
      {
        if (!v10) {
          __cxa_bad_cast();
        }
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        (*(void (**)(void *, uint64_t *))(*(void *)v10 + 184))(v10, &v20);
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        if ((v21 + v9) > *(_DWORD *)(a2 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
        }
        uint64_t v17 = *(void *)a2 + 4 * v9;
        LODWORD(v18) = v21;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v17, (uint64_t)&v20, v11, v12, v13);
        int v14 = v21;
        kaldi::Vector<float>::Destroy((uint64_t)&v20);
        v9 += v14;
      }
      ++v8;
      uint64_t v7 = *(void *)a1;
    }
    while (v8 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  uint64_t result = kaldi::nnet1::Nnet::NumParams(a1);
  if (v9 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x40B, "pos == NumParams()", v16);
  }
  return result;
}

void sub_20CE652D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::NumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3)))
    {
      uint64_t v5 = *(void **)(*(void *)this + 8 * v3);
      if (v5) {
      uint64_t v4 = (*(unsigned int (**)(void *))(*(void *)v5 + 176))(v5) + v4;
      }
    }
    ++v3;
    uint64_t v1 = *(void *)this;
  }
  while (v3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  return v4;
}

uint64_t kaldi::nnet1::Nnet::SetParams(kaldi::nnet1::Nnet *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != kaldi::nnet1::Nnet::NumParams(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x40F, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = *(void *)a1;
  if (*((void *)a1 + 1) == *(void *)a1)
  {
    int v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    int v8 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v6 + 8 * v7) + 32))(*(void *)(v6 + 8 * v7)))
      {
        if (!v9) {
          __cxa_bad_cast();
        }
        unint64_t v10 = v9;
        int v11 = (*(uint64_t (**)(void *))(*(void *)v9 + 176))(v9);
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        int v13 = v11 + v8;
        if ((v11 + v8) > *(_DWORD *)(a2 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v12);
        }
        uint64_t v16 = *(void *)a2 + 4 * v8;
        LODWORD(v17) = v11;
        (*(void (**)(void *, uint64_t *))(*(void *)v10 + 192))(v10, &v16);
        int v8 = v13;
      }
      ++v7;
      uint64_t v6 = *(void *)a1;
    }
    while (v7 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  uint64_t result = kaldi::nnet1::Nnet::NumParams(a1);
  if (v8 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x419, "pos == NumParams()", v15);
  }
  return result;
}

float kaldi::nnet1::Nnet::SumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0.0;
  }
  unint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3)))
    {
      if (!v5) {
        __cxa_bad_cast();
      }
      float v4 = v4 + (*(float (**)(void *))(*(void *)v5 + 208))(v5);
    }
    ++v3;
    uint64_t v1 = *(void *)this;
  }
  while (v3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  return v4;
}

void kaldi::nnet1::Nnet::ResetInternalBuffers(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *(unsigned int *)(*((void *)this + 18) + 32);
  if ((int)v5 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x434, "opts_->num_subbatches > 0", a5);
  }
  unint64_t v7 = (void *)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, v5);
  int v8 = (void *)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, *(int *)(*((void *)this + 18) + 32));
  unint64_t v9 = *((void *)this + 1) - *(void *)this;
  int v10 = *(_DWORD *)(*((void *)this + 18) + 32);
  if ((int)(v9 >> 3) <= 0)
  {
    if (v10 >= 1)
    {
      uint64_t v31 = 0;
      do
      {
        uint64_t v32 = *v7 + 24 * v31;
        uint64_t v35 = *(void **)(v32 + 8);
        int v34 = (void *)(v32 + 8);
        uint64_t v33 = v35;
        long long v36 = *(void **)(*v7 + 24 * v31);
        if (v35 != v36)
        {
          uint64_t v37 = v33 - 6;
          int v38 = v33 - 6;
          unsigned int v39 = v33 - 6;
          do
          {
            uint64_t v40 = *v39;
            v39 -= 6;
            (*(void (**)(void *))(v40 + 16))(v38);
            v37 -= 6;
            BOOL v21 = v38 == v36;
            int v38 = v39;
          }
          while (!v21);
        }
        *int v34 = v36;
        uint64_t v41 = *v8 + 24 * v31;
        uint64_t v44 = *(void **)(v41 + 8);
        long long v43 = (void *)(v41 + 8);
        long long v42 = v44;
        uint64_t v45 = *(void **)(*v8 + 24 * v31);
        if (v44 != v45)
        {
          unint64_t v46 = v42 - 6;
          uint64_t v47 = v42 - 6;
          int v48 = v42 - 6;
          do
          {
            uint64_t v49 = *v48;
            v48 -= 6;
            (*(void (**)(void *))(v49 + 16))(v47);
            v46 -= 6;
            BOOL v21 = v47 == v45;
            uint64_t v47 = v48;
          }
          while (!v21);
        }
        *long long v43 = v45;
        ++v31;
      }
      while (v31 < *(int *)(*((void *)this + 18) + 32));
    }
    uint64_t v51 = (void *)*((void *)this + 12);
    int v50 = (void *)*((void *)this + 13);
    if (v50 != v51)
    {
      uint64_t v52 = v50 - 4;
      unint64_t v53 = v50 - 4;
      uint64_t v54 = v50 - 4;
      do
      {
        uint64_t v55 = *v54;
        v54 -= 4;
        (*(void (**)(void *))(v55 + 8))(v53);
        v52 -= 4;
        BOOL v21 = v53 == v51;
        unint64_t v53 = v54;
      }
      while (!v21);
    }
    *((void *)this + 13) = v51;
  }
  else
  {
    if (v10 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *v7 + 24 * v11;
        uint64_t v15 = *(void **)(v12 + 8);
        int v14 = (void *)(v12 + 8);
        int v13 = v15;
        uint64_t v16 = *(void **)(*v7 + 24 * v11);
        if (v15 != v16)
        {
          uint64_t v17 = v13 - 6;
          uint64_t v18 = v13 - 6;
          uint64_t v19 = v13 - 6;
          do
          {
            uint64_t v20 = *v19;
            v19 -= 6;
            (*(void (**)(void *))(v20 + 16))(v18);
            v17 -= 6;
            BOOL v21 = v18 == v16;
            uint64_t v18 = v19;
          }
          while (!v21);
        }
        *int v14 = v16;
        uint64_t v22 = *v8 + 24 * v11;
        uint64_t v25 = *(void **)(v22 + 8);
        uint64_t v24 = (void *)(v22 + 8);
        unint64_t v23 = v25;
        int64_t v26 = *(void **)(*v8 + 24 * v11);
        if (v25 != v26)
        {
          uint64_t v27 = v23 - 6;
          uint64_t v28 = v23 - 6;
          uint64_t v29 = v23 - 6;
          do
          {
            uint64_t v30 = *v29;
            v29 -= 6;
            (*(void (**)(void *))(v30 + 16))(v28);
            v27 -= 6;
            BOOL v21 = v28 == v26;
            uint64_t v28 = v29;
          }
          while (!v21);
        }
        void *v24 = v26;
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((void *)this + 9) + 24 * v11), (((*((void *)this + 1) - *(void *)this) << 29) + 0x100000000) >> 32);
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((void *)this + 15) + 24 * v11++), (((*((void *)this + 1) - *(void *)this) << 29) - 0x100000000) >> 32);
      }
      while (v11 < *(int *)(*((void *)this + 18) + 32));
      unint64_t v9 = *((void *)this + 1) - *(void *)this;
    }
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 12, (uint64_t)((v9 << 29) + 0x100000000) >> 32);
  }
}

void *kaldi::nnet1::Nnet::CheckInternalBuffers(void *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(this[18] + 32);
  if ((int)v5 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x44C, "opts_->num_subbatches > 0", a5);
  }
  uint64_t v6 = this[9];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((this[10] - v6) >> 3);
  if (v7 != v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x44D, "propagate_buf_.size() == opts_->num_subbatches", a5);
  }
  uint64_t v8 = this[15];
  if (0xAAAAAAAAAAAAAAABLL * ((this[16] - v8) >> 3) != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x44E, "backpropagate_buf_.size() == opts_->num_subbatches", a5);
  }
  unint64_t v9 = this[1] - *this;
  if ((int)(v9 >> 3) <= 0)
  {
    int v14 = (void *)(v6 + 8);
    uint64_t v15 = (void *)(v8 + 8);
    do
    {
      if (*v14 != *(v14 - 1)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x457, "propagate_buf_[i].size() == 0", a5);
      }
      if (*v15 != *(v15 - 1)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x458, "backpropagate_buf_[i].size() == 0", a5);
      }
      v14 += 3;
      v15 += 3;
      --v7;
    }
    while (v7);
    if (this[13] != this[12]) {
      kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x45A, "propagate_vec_buf_.size() == 0", a5);
    }
  }
  else
  {
    uint64_t v10 = (v9 << 29) - 0x100000000;
    uint64_t v11 = (uint64_t)((v9 << 29) + 0x100000000) >> 32;
    uint64_t v12 = (void *)(v6 + 8);
    int v13 = (void *)(v8 + 8);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v12 - *(v12 - 1)) >> 4) != v11) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x451, "propagate_buf_[i].size() == NumComponents() + 1", a5);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *(v13 - 1)) >> 4) != v10 >> 32) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x452, "backpropagate_buf_[i].size() == NumComponents() - 1", a5);
      }
      v12 += 3;
      v13 += 3;
      --v7;
    }
    while (v7);
    if (v11 != (uint64_t)(this[13] - this[12]) >> 5) {
      kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x454, "propagate_vec_buf_.size() == NumComponents() + 1", a5);
    }
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::IsComponentFrozen(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"IsComponentFrozen", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x479, "index < NumComponents()", a5);
  }
  if (*((void *)this + 22) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return (*(void *)(*((void *)this + 21) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  }
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input::Input(v6, a2, 0);
  uint64_t v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v6);
  kaldi::nnet1::Nnet::Init(a1, v5, a3);
  kaldi::Input::Close((kaldi::Input *)v6);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_20CE65D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::ExpectToken(a2, 0, (kaldi *)"<NnetProto>");
  uint64_t v25 = 0;
  size_t v26 = 0;
  uint64_t v27 = 0;
  int v7 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
  if ((v7 & 2) != 0)
  {
LABEL_27:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1221);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing </NnetProto> at the end.", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  uint64_t v8 = (std::locale::id *)MEMORY[0x263F8C108];
  while (1)
  {
    if (v7) {
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x4C6, "is.good()", v6);
    }
    if (kaldi::PeekToken(a2, 0) == 47) {
      break;
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    unint64_t v9 = std::locale::use_facet((const std::locale *)__p, v8);
    unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale((std::locale *)__p);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v25, v10);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1228, 1);
      if (v27 >= 0) {
        uint64_t v11 = (void **)&v25;
      }
      else {
        uint64_t v11 = v25;
      }
      if (v27 >= 0) {
        uint64_t v12 = HIBYTE(v27);
      }
      else {
        uint64_t v12 = v26;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v11, v12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (v27 >= 0) {
      size_t v13 = HIBYTE(v27);
    }
    else {
      size_t v13 = v26;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 1);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = __p;
    }
    else {
      int v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if (v27 >= 0) {
        uint64_t v15 = (void **)&v25;
      }
      else {
        uint64_t v15 = v25;
      }
      memmove(v14, v15, v13);
    }
    *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 10;
    uint64_t v16 = kaldi::nnet1::Component::Init(__p, a3);
    kaldi::nnet1::Nnet::AppendComponent(a1, v16, v17, v18, v19);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    int v7 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
    if ((v7 & 2) != 0) {
      goto LABEL_27;
    }
  }
  kaldi::ExpectToken(a2, 0, (kaldi *)"</NnetProto>");
  kaldi::nnet1::Nnet::ResetInternalBuffers(a1, v20, v21, v22, v23);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(a1);
  if (SHIBYTE(v27) < 0) {
    operator delete(v25);
  }
}

void sub_20CE66070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 97) < 0) {
    operator delete(*(void **)(v14 - 120));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::Read(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v8)
  {
    uint64_t v13 = v8;
    uint64_t v14 = a1 + 2;
    while (1)
    {
      uint64_t v15 = a1[1];
      uint64_t v16 = (char *)v15 - (char *)*a1;
      if ((int)((unint64_t)v16 >> 3) >= 1 && *(_DWORD *)(*(v15 - 1) + 12) != *(_DWORD *)(v13 + 8)) {
        break;
      }
      if ((unint64_t)v15 >= *v14)
      {
        uint64_t v18 = v16 >> 3;
        unint64_t v19 = (v16 >> 3) + 1;
        if (v19 >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = *v14 - (void)*a1;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = (uint64_t *)&v22[8 * v18];
        uint64_t *v23 = v13;
        uint64_t v17 = v23 + 1;
        uint64_t v25 = (char *)*a1;
        uint64_t v24 = (char *)a1[1];
        if (v24 != (char *)*a1)
        {
          do
          {
            uint64_t v26 = *((void *)v24 - 1);
            v24 -= 8;
            *--unint64_t v23 = v26;
          }
          while (v24 != v25);
          uint64_t v24 = (char *)*a1;
        }
        *a1 = v23;
        a1[1] = v17;
        a1[2] = (uint64_t *)&v22[8 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v15 = v13;
        uint64_t v17 = v15 + 1;
      }
      a1[1] = v17;
      uint64_t v13 = kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v13) {
        goto LABEL_22;
      }
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1260);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Dimensionality mismatch!", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" Previous layer output:", 23);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" Current layer input:", 21);
    std::ostream::operator<<();
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
LABEL_22:
  if ((int)((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1267);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "Could not read any components");
    goto LABEL_29;
  }
  *((_DWORD *)a1[18] + 2) = 0;
  kaldi::nnet1::Nnet::ResetInternalBuffers((kaldi::nnet1::Nnet *)a1, v9, v10, v11, v12);
  kaldi::nnet1::Nnet::ResetRecurrentFlag((kaldi::nnet1::Nnet *)a1);
}

void *kaldi::nnet1::Nnet::Write(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::CheckDimensions(a1, (uint64_t)a2, a3, a4, a5);
  kaldi::WriteToken(a2, (const char *)a3, (kaldi *)"<Nnet>", v9, v10);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v13 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v14 = *a1;
  if ((int)((unint64_t)(a1[1] - *a1) >> 3) >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      kaldi::nnet1::Component::Write(*(void *)(v14 + 8 * v15++), a2, a3, a4);
      uint64_t v14 = *a1;
    }
    while (v15 < (int)((unint64_t)(a1[1] - *a1) >> 3));
  }
  uint64_t result = kaldi::WriteToken(a2, (const char *)a3, (kaldi *)"</Nnet>", v11, v12);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v17 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    return (void *)std::ostream::flush();
  }
  return result;
}

void sub_20CE664C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::nnet1::Nnet::Info(kaldi::nnet1::Nnet *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"num-components ", 15);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  unint64_t v3 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"input-dim ", 10);
  if (*(void *)this == *((void *)this + 1))
  {
    uint64_t v29 = 886;
    uint64_t v30 = "InputDim";
    goto LABEL_27;
  }
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"output-dim ", 11);
  if (*(void *)this == *((void *)this + 1))
  {
    uint64_t v29 = 881;
    uint64_t v30 = "OutputDim";
LABEL_27:
    kaldi::KaldiAssertFailure_((kaldi *)v30, "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)v29, "!components_.empty()", v4);
  }
  int v7 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"number-of-parameters ", 21);
  kaldi::nnet1::Nnet::NumParams(this);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" millions", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"component ", 10);
      uint64_t v14 = v12 + 1;
      uint64_t v15 = (void *)std::ostream::operator<<();
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" : ", 3);
      uint64_t v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v12)
                                                                         + 24))(*(void *)(*(void *)this + 8 * v12));
      kaldi::nnet1::Component::TypeToMarker(v17, &v33);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::locale v18 = &v33;
      }
      else {
        std::locale v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", input-dim ", 12);
      unint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", output-dim ", 13);
      uint64_t v22 = (void *)std::ostream::operator<<();
      unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(void **)(*(void *)this + 8 * v12) + 64))(__p);
      if ((v32 & 0x80u) == 0) {
        uint64_t v24 = __p;
      }
      else {
        uint64_t v24 = (void **)__p[0];
      }
      if ((v32 & 0x80u) == 0) {
        uint64_t v25 = v32;
      }
      else {
        uint64_t v25 = (uint64_t)__p[1];
      }
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      uint64_t v27 = std::locale::use_facet(&v37, v13);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v37);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v32 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      ++v12;
    }
    while (v14 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  std::stringbuf::str();
  v34[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v34[1] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v36);
}

void sub_20CE66B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoGradient@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (uint64_t *)*((void *)this + 15);
  if (*((uint64_t **)this + 16) == v3
    || (uint64_t v4 = *v3, *(void *)(*((void *)this + 15) + 8) == v4)
    || !(4 * *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"### Gradient stats :\n", 21);
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v6 = 0;
      int v7 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Component ", 10);
        uint64_t v8 = v6 + 1;
        uint64_t v9 = (void *)std::ostream::operator<<();
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" : ", 3);
        uint64_t v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v6)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v6));
        kaldi::nnet1::Component::TypeToMarker(v11, &v23);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v23;
        }
        else {
          uint64_t v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
        (*(void (**)(void **__return_ptr))(**(void **)(*(void *)this + 8 * v6) + 72))(__p);
        if ((v22 & 0x80u) == 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = (void **)__p[0];
        }
        if ((v22 & 0x80u) == 0) {
          uint64_t v17 = v22;
        }
        else {
          uint64_t v17 = (uint64_t)__p[1];
        }
        std::locale v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        unint64_t v19 = std::locale::use_facet(&v27, v7);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v22 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        ++v6;
      }
      while (v8 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    v24[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v24[1] = MEMORY[0x263F8C318] + 16;
    if (v25 < 0) {
      operator delete((void *)v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x210559500](&v26);
  }
}

void sub_20CE66F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 9);
  if (*((uint64_t **)this + 10) == v2
    || (uint64_t v3 = *v2, *(void *)(*((void *)this + 9) + 8) == v3)
    || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"### Forward propagation buffer content, note in the parallel GPU training, this only includes the first subbatch content :\n", 123);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[0] output of <Input> ", 22);
    kaldi::nnet1::MomentStatistics<float>(**((void **)this + 9));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v9 = std::locale::use_facet(&v32, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 48;
      uint64_t v12 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[", 1);
        uint64_t v13 = v10 + 1;
        uint64_t v14 = (void *)std::ostream::operator<<();
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] output of ", 12);
        uint64_t v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v10)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v10));
        kaldi::nnet1::Component::TypeToMarker(v16, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &__p;
        }
        else {
          uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
        }
        unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
        kaldi::nnet1::MomentStatistics<float>(**((void **)this + 9) + v11);
        if ((v34 & 0x80u) == 0) {
          locale = &v32;
        }
        else {
          locale = v32.__locale_;
        }
        if ((v34 & 0x80u) == 0) {
          uint64_t v21 = v34;
        }
        else {
          uint64_t v21 = v33;
        }
        unsigned __int8 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)locale, v21);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        std::string v23 = std::locale::use_facet(&v39, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v39);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v34 < 0) {
          operator delete(v32.__locale_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v10) + 24))(*(void *)(*(void *)this + 8 * v10)) == 2055)
        {
          uint64_t v24 = *(void **)(*(void *)this + 8 * v10);
          if (v24) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 248))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v25 = &__p;
          }
          else {
            char v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v25, v26);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v10) + 24))(*(void *)(*(void *)this + 8 * v10)) == 274)
        {
          std::locale v27 = *(void **)(*(void *)this + 8 * v10);
          if (v27) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v27 + 280))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v28 = &__p;
          }
          else {
            uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v28, v29);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v11 += 48;
        ++v10;
      }
      while (v13 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    v36[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v36 + *(void *)(v36[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v36[1] = MEMORY[0x263F8C318] + 16;
    if (v37 < 0) {
      operator delete((void *)v36[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x210559500](&v38);
  }
}

void sub_20CE6756C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoBackPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 15);
  if (*((uint64_t **)this + 16) == v2
    || (uint64_t v3 = *v2, *(void *)(*((void *)this + 15) + 8) == v3)
    || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"### Backward propagation buffer content, Note in multi subbatch case, only the first subbatch is reported :\n", 108);
    if (*(void *)(*((void *)this + 15) + 8) != **((void **)this + 15))
    {
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[0] diff of <Input> ", 20);
      kaldi::nnet1::MomentStatistics<float>(**((void **)this + 15));
      uint64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
      uint64_t v9 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v34);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[", 1);
        uint64_t v13 = v11 + 1;
        uint64_t v14 = (void *)std::ostream::operator<<();
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] diff-output of ", 17);
        uint64_t v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v11)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v11));
        kaldi::nnet1::Component::TypeToMarker(v16, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v11 < (((*((void *)this + 1) - *(void *)this) << 29) - 0x100000000) >> 32)
        {
          kaldi::nnet1::MomentStatistics<float>(**((void **)this + 15) + v10);
          unint64_t v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          uint64_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p.__r_.__value_.__r.__words[2])
              : __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v19, v20);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
        uint64_t v21 = std::locale::use_facet((const std::locale *)&__p, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v11) + 24))(*(void *)(*(void *)this + 8 * v11)) == 2055)
        {
          unsigned __int8 v22 = *(void **)(*(void *)this + 8 * v11);
          if (v22) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v22 + 256))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v23 = &__p;
          }
          else {
            std::string v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v23, v24);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v11) + 24))(*(void *)(*(void *)this + 8 * v11)) == 274)
        {
          char v25 = *(void **)(*(void *)this + 8 * v11);
          if (v25) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v25 + 288))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = &__p;
          }
          else {
            std::string::size_type v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v26, v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v10 += 48;
        ++v11;
      }
      while (v13 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    v31[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v31[1] = MEMORY[0x263F8C318] + 16;
    if (v32 < 0) {
      operator delete((void *)v31[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x210559500](&v33);
  }
}

void sub_20CE67C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t kaldi::nnet1::Nnet::IsRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 152);
}

BOOL kaldi::nnet1::Nnet::HasHistory(kaldi::nnet1::Nnet *this)
{
  return *((void *)this + 6) != *((void *)this + 7);
}

uint64_t kaldi::nnet1::Nnet::IsBidirectionalRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 153);
}

void kaldi::nnet1::Nnet::CheckWeights(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) - *(void *)this >= 9uLL)
  {
    uint64_t v3 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3))) {
        kaldi::nnet1::UpdatableComponent::CheckParams(*(kaldi::nnet1::UpdatableComponent **)(*(void *)this + 8 * v3));
      }
      uint64_t v1 = *(void *)this;
      unint64_t v4 = v3 + 2;
      ++v3;
    }
    while (v4 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  }
}

float kaldi::nnet1::UpdatableComponent::CheckParams(kaldi::nnet1::UpdatableComponent *this)
{
  float result = (*(float (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 208))(this);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CheckParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 427);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "'inf' in component parameters (weight explosion, try lower learning rate?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void kaldi::nnet1::Nnet::ResetRecurrentFlag(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = (char **)((char *)this + 24);
  uint64_t v3 = (char **)((char *)this + 48);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 7) = v2;
  *((_WORD *)this + 76) = 0;
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v6 = 0;
    long long v42 = (char *)this + 64;
    long long v43 = (char *)this + 40;
    while (1)
    {
      uint64_t v7 = *(const void **)(v4 + 8 * v6);
      if (!v7) {
        goto LABEL_38;
      }
      if (!v8) {
        break;
      }
      uint64_t v9 = v8;
      kaldi::nnet1::ParallelComponent::GetHistoricalComponents(v8, &v46);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v3, *((void *)this + 7), (char *)v46, v47, (v47 - (unsigned char *)v46) >> 3);
      if (*((unsigned char *)this + 153))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v16 = *((void *)v9 + 23);
        uint64_t v17 = *((void *)v9 + 24);
        if (v16 == v17)
        {
          BOOL v10 = 0;
        }
        else
        {
          BOOL v10 = 0;
          do
          {
            BOOL v10 = v10 || *(unsigned char *)(v16 + 153) != 0;
            v16 += 376;
          }
          while (v16 != v17);
        }
      }
      *((unsigned char *)this + 153) = v10;
      kaldi::nnet1::ParallelComponent::GetRecurrentComponents(v9, &__p);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v1, *((void *)this + 4), (char *)__p, v45, (v45 - (unsigned char *)__p) >> 3);
      if (__p)
      {
        uint64_t v45 = (char *)__p;
        operator delete(__p);
      }
      if (v46)
      {
        uint64_t v47 = (char *)v46;
        operator delete(v46);
      }
LABEL_59:
      ++v6;
      uint64_t v4 = *(void *)this;
      if (v6 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)
      {
        if (*((void *)this + 3) != *((void *)this + 4)) {
          *((unsigned char *)this + 152) = 1;
        }
        return;
      }
    }
    if (v11)
    {
      uint64_t v12 = v11;
      if ((*(int (**)(void *))(*(void *)v11 + 16))(v11) >= 1)
      {
        uint64_t v14 = (void *)*((void *)this + 7);
        unint64_t v13 = *((void *)this + 8);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v18 = ((char *)v14 - *v3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)*v3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unsigned __int8 v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v42, v21);
          }
          else {
            unsigned __int8 v22 = 0;
          }
          std::string v23 = &v22[8 * v18];
          *(void *)std::string v23 = v12;
          uint64_t v15 = v23 + 8;
          char v25 = (char *)*((void *)this + 6);
          std::string::size_type v24 = (char *)*((void *)this + 7);
          if (v24 != v25)
          {
            do
            {
              uint64_t v26 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            std::string::size_type v24 = *v3;
          }
          *((void *)this + 6) = v23;
          *((void *)this + 7) = v15;
          *((void *)this + 8) = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *uint64_t v14 = v12;
          uint64_t v15 = v14 + 1;
        }
        *((void *)this + 7) = v15;
      }
    }
LABEL_38:
    std::string::size_type v27 = *(const void **)(*(void *)this + 8 * v6);
    if (v27)
    {
      if (v28)
      {
        std::string::size_type v29 = v28;
        if ((*(int (**)(void *))(*(void *)v28 + 16))(v28) >= 1)
        {
          uint64_t v31 = (void *)*((void *)this + 4);
          unint64_t v30 = *((void *)this + 5);
          if ((unint64_t)v31 >= v30)
          {
            uint64_t v33 = ((char *)v31 - *v1) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v34 = v30 - (void)*v1;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              char v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v43, v36);
            }
            else {
              char v37 = 0;
            }
            uint64_t v38 = &v37[8 * v33];
            *(void *)uint64_t v38 = v29;
            char v32 = v38 + 8;
            uint64_t v40 = (char *)*((void *)this + 3);
            std::locale v39 = (char *)*((void *)this + 4);
            if (v39 != v40)
            {
              do
              {
                uint64_t v41 = *((void *)v39 - 1);
                v39 -= 8;
                *((void *)v38 - 1) = v41;
                v38 -= 8;
              }
              while (v39 != v40);
              std::locale v39 = *v1;
            }
            *((void *)this + 3) = v38;
            *((void *)this + 4) = v32;
            *((void *)this + 5) = &v37[8 * v36];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *uint64_t v31 = v29;
            char v32 = v31 + 1;
          }
          *((void *)this + 4) = v32;
          {
            *((unsigned char *)this + 153) = 1;
          }
        }
      }
    }
    goto LABEL_59;
  }
}

void sub_20CE6823C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetHistoricalComponents(kaldi::nnet1::ParallelComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v2 != i; v2 += 376)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, *(const void **)(v2 + 48), *(void *)(v2 + 56), (uint64_t)(*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      unint64_t v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20CE68308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetRecurrentComponents(kaldi::nnet1::ParallelComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v2 != i; v2 += 376)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, *(const void **)(v2 + 24), *(void *)(v2 + 32), (uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      unint64_t v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20CE683D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::Nnet::ValidateNnet(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::CheckWeights(this);
  return kaldi::nnet1::Nnet::CheckInternalBuffers(this, v6, v7, v8, v9);
}

void std::vector<kaldi::nnet1::Component *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<kaldi::nnet1::Component *>::__append((void **)a1, a2 - v2);
  }
}

void kaldi::nnet1::Nnet::SetHistoryOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::HistoryOptions *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)*((void *)this + 6);
  uint64_t v7 = (uint64_t *)*((void *)this + 7);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, const kaldi::nnet1::HistoryOptions *))(*(void *)v8 + 80))(v8, a2);
  }
  if (v9)
  {
    long long v12 = *(_OWORD *)(v9 + 8);
    *(_OWORD *)&v15[15] = *(_OWORD *)(v9 + 23);
    *(_OWORD *)uint64_t v15 = v12;
    uint64_t v14 = &off_26C20EA58;
    uint64_t v16 = &off_26C20EA78;
    int v13 = *((_DWORD *)v9 + 13);
    int v17 = *((_DWORD *)a2 + 2);
    int v18 = v13;
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)&v14, a3, v10, v11);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14, "SetHistoryOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1509);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
  }
}

void sub_20CE685F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Nnet::GetTrainOptions(kaldi::nnet1::Nnet *this)
{
  return *((void *)this + 18);
}

void *kaldi::nnet1::operator<<(void *a1, uint64_t a2)
{
  uint64_t v3 = kaldi::nnet1::operator<<(a1, a2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", and Recurrent style components have additional configurations ", 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_sequences ", 14);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"bptt_steps ", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;

  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NnetTrainOptions : ", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"learn_rate ", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"momentum ", 9);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"l2_penalty ", 11);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"l1_penalty ", 11);
  uint64_t v11 = (void *)std::ostream::operator<<();
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"qtype_compact_grad ", 19);
  int v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"step_compact_grad ", 18);
  uint64_t v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"num_subbatches ", 15);
  int v17 = (void *)std::ostream::operator<<();
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"average_gradients ", 18);
  if (*(unsigned char *)(a2 + 36)) {
    uint64_t v20 = "true";
  }
  else {
    uint64_t v20 = "false";
  }
  if (*(unsigned char *)(a2 + 36)) {
    unint64_t v21 = 4;
  }
  else {
    unint64_t v21 = 5;
  }
  unsigned __int8 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  std::string v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  std::string::size_type v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"vectorize_weights ", 18);
  if (*(unsigned char *)(a2 + 37)) {
    char v25 = "true";
  }
  else {
    char v25 = "false";
  }
  if (*(unsigned char *)(a2 + 37)) {
    uint64_t v26 = 4;
  }
  else {
    uint64_t v26 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  return a1;
}

void kaldi::Timer::Reset(kaldi::Timer *this, clockid_t a2)
{
  *(double *)this = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
  if (*((unsigned char *)this + 24)) {
    *((double *)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)0xC, v3);
  }
  *((double *)this + 2) = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v3);
}

double kaldi::Timer::GetSeconds(kaldi::Timer *this, clockid_t a2)
{
  if (clock_gettime((clockid_t)this, &__tp) && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8, "GetSeconds", "../engine/common/libquasar/libkaldi/src/base/timer.h", 111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not read clock ", 21);
    unint64_t v2 = (void *)std::ostream::operator<<();
    clockid_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": ", 2);
    uint64_t v4 = __error();
    uint64_t v5 = strerror(*v4);
    size_t v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  }
  return (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
}

void sub_20CE68984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    }
    else {
      int v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    unint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    uint64_t v5 = std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[8 * a5];
    std::string v23 = *(char **)(v9 - 8);
LABEL_17:
    std::string::size_type v24 = &v5[8 * a5];
    char v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  std::string v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20CE68B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  size_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<kaldi::CuMatrix<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 48 * a2;
    uint64_t v6 = 48 * a2;
    uint64_t v7 = v4;
    do
    {
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(void *)uint64_t v7 = off_26C211198;
      *(unsigned char *)(v7 + 40) = 0;
      v7 += 48;
      v4 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20CE68D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * ((void)a3 - a1);
  float result = *(void **)a5;
  if (v8 >= 1)
  {
    if (a4)
    {
      if (v8 >= (unint64_t)a4) {
        int64_t v10 = a4;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      unint64_t v11 = (-1 << (a4 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4);
      *float result = *result & ~v11 | *a3 & v11;
      *(_DWORD *)(a5 + 8) = (*(_DWORD *)(a5 + 8) - (_BYTE)v10) & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 63;
    }
    uint64_t v13 = v12 >> 6;
    result -= v12 >> 6;
    *(void *)a5 = result;
    unint64_t v14 = &a3[-(v12 >> 6)];
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, v14, 8 * v13);
      float result = *(void **)a5;
    }
    if (v8 - (v13 << 6) >= 1)
    {
      uint64_t v15 = -1 << (((_BYTE)v13 << 6) - v8);
      uint64_t v16 = *(v14 - 1) & v15;
      uint64_t v17 = *--result;
      *(void *)a5 = result;
      *float result = v17 & ~v15 | v16;
      *(_DWORD *)(a5 + 8) = -(int)v8 & 0x3F;
    }
  }
  *(void *)a6 = result;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return result;
}

unint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * ((void)a3 - result);
  if (v6 <= 0)
  {
    unint64_t v11 = *(unint64_t **)a5;
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a4)
    {
      if (v6 >= (unint64_t)a4) {
        int64_t v7 = a4;
      }
      else {
        int64_t v7 = a4 - (unint64_t)a2 + 8 * ((void)a3 - result);
      }
      v6 -= v7;
      unint64_t v8 = (-1 << (a4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4) & *a3;
      unint64_t v9 = *(unsigned int *)(a5 + 8);
      if (v7 >= v9) {
        int64_t v10 = *(unsigned int *)(a5 + 8);
      }
      else {
        int64_t v10 = v7;
      }
      unint64_t v11 = *(unint64_t **)a5;
      if (v10)
      {
        unint64_t v12 = v8 >> (a4 - v9);
        if (v9 > a4) {
          unint64_t v12 = v8 << (v9 - a4);
        }
        *unint64_t v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
        LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        uint64_t v13 = *--v11;
        *(void *)a5 = v11;
        LODWORD(v9) = -(int)v7 & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        *unint64_t v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a4 + (-(char)v7 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a5 + 8);
      unint64_t v11 = *(unint64_t **)a5;
    }
    char v14 = 64 - v9;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (v6 >= 64)
    {
      unint64_t v16 = *v11;
      do
      {
        unint64_t v17 = v6;
        unint64_t v19 = *--a3;
        unint64_t v18 = v19;
        float result = v19 >> v14;
        *unint64_t v11 = v16 & ~v15 | (v19 >> v14);
        uint64_t v20 = *--v11;
        unint64_t v16 = v20 & v15 | (v18 << v9);
        *unint64_t v11 = v16;
        int64_t v6 = v17 - 64;
      }
      while (v17 > 0x7F);
      *(void *)a5 = v11;
    }
    if (v6 >= 1)
    {
      unint64_t v21 = *(a3 - 1) & (-1 << -(char)v6);
      if (v6 >= (unint64_t)v9) {
        int64_t v22 = v9;
      }
      else {
        int64_t v22 = v6;
      }
      *unint64_t v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
      *(_DWORD *)(a5 + 8) = v9;
      if (v6 - v22 >= 1)
      {
        uint64_t v23 = *--v11;
        *(void *)a5 = v11;
        *(_DWORD *)(a5 + 8) = (v22 - v6) & 0x3F;
        *unint64_t v11 = v23 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
        LODWORD(v9) = (v22 - v6) & 0x3F;
      }
    }
  }
  *(void *)a6 = v11;
  *(_DWORD *)(a6 + 8) = v9;
  return result;
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
  if (v6 <= 0)
  {
    unint64_t v18 = *(unint64_t **)a5;
    unsigned int v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      char v7 = a2;
      if (v6 >= (unint64_t)(64 - a2)) {
        unint64_t v8 = 64 - a2;
      }
      else {
        unint64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
      }
      v6 -= v8;
      unint64_t v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      uint64_t v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10)) {
        unint64_t v11 = (64 - v10);
      }
      else {
        unint64_t v11 = v8;
      }
      unint64_t v12 = *(unint64_t **)a5;
      unint64_t v13 = v9 >> (a2 - v10);
      BOOL v14 = v10 >= a2;
      int v16 = v10 - a2;
      BOOL v15 = v16 != 0 && v14;
      unint64_t v17 = v9 << v16;
      if (!v15) {
        unint64_t v17 = v13;
      }
      *unint64_t v12 = **(void **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      unint64_t v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v20 = v8 - v11;
      if (v20 >= 1)
      {
        *unint64_t v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        unsigned int v19 = v20;
      }
      ++result;
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(a5 + 8);
      unint64_t v18 = *(unint64_t **)a5;
    }
    unsigned int v21 = 64 - v19;
    uint64_t v22 = -1 << v19;
    if (v6 >= 64)
    {
      uint64_t v23 = *v18;
      do
      {
        unint64_t v24 = v6;
        unint64_t v26 = *result++;
        unint64_t v25 = v26;
        *unint64_t v18 = v23 & ~v22 | (v26 << v19);
        unint64_t v27 = v18[1];
        ++v18;
        uint64_t v23 = v27 & v22 | (v25 >> v21);
        *unint64_t v18 = v23;
        int64_t v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(void *)a5 = v18;
    }
    if (v6 >= 1)
    {
      unint64_t v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21) {
        int64_t v29 = 64 - v19;
      }
      else {
        int64_t v29 = v6;
      }
      *unint64_t v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      unint64_t v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v30 = v6 - v29;
      if (v30 >= 1)
      {
        *unint64_t v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        unsigned int v19 = v30;
      }
    }
  }
  *(void *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

void std::vector<kaldi::nnet1::Component *>::__append(void **a1, unint64_t a2)
{
  int64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v10];
    BOOL v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    int v16 = &v14[8 * a2];
    unint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  clockid_t v3 = *(void **)(a1 + 8);
  *clockid_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  float result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20CE693A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  BOOL v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20CE694B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t kaldi::InitKaldiInputStream(uint64_t a1, unsigned char *a2)
{
  if (std::istream::peek())
  {
    *a2 = 0;
    return 1;
  }
  else
  {
    std::istream::get();
    if (std::istream::peek() << 24 == 1107296256)
    {
      std::istream::get();
      uint64_t result = 1;
      *a2 = 1;
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5, "InitKaldiInputStream", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 402);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Was looking for B, but got ", 27);
        unint64_t v4 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      }
      return 0;
    }
  }
  return result;
}

void sub_20CE69700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20CE6983C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *kaldi::nnet1::NormalizeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, a4, a5);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  v15[2] = 0;
  uint64_t v16 = 0;
  v15[0] = off_26C2111C8;
  v15[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v15, v7, 0, v8, v9);
  uint64_t v16 = *(void *)(a3 + 32);
  float v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v15, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v15, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v15, -0.5);
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)v15, v11, v12, v13);
  return kaldi::CuVector<float>::~CuVector(v15);
}

void sub_20CE69AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::NormalizeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  void v23[2] = 0;
  uint64_t v24 = 0;
  v23[0] = off_26C2111C8;
  v23[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v23, v8, 0, a4, (const char *)a5);
  uint64_t v24 = *(void *)(a5 + 32);
  uint64_t v9 = v24;
  float v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v23, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v23, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v23, -0.5);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v23, a4, 111, v11, 1.0, 0.0);
  kaldi::CuVectorBase<float>::ReplaceValue((uint64_t)v23, 8589900000.0, 0.0);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v23, 3.0);
  uint64_t v12 = *(unsigned int *)(a5 + 20);
  v21[2] = 0;
  uint64_t v22 = 0;
  v21[0] = off_26C2111C8;
  v21[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v21, v12, 0, v13, v14);
  uint64_t v22 = v9;
  kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)v21, a4, 111, a2, 112, 1.0, 0.0);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)v21, (uint64_t)v23, v15, v16, v17);
  float v18 = -1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v21, a2, 111, v19, v18, 1.0);
  kaldi::CuVector<float>::~CuVector(v21);
  return kaldi::CuVector<float>::~CuVector(v23);
}

void sub_20CE69C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::~NormalizeComponent(kaldi::nnet1::NormalizeComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::NormalizeComponent::Copy(kaldi::nnet1::NormalizeComponent *this)
{
}

uint64_t kaldi::nnet1::NormalizeComponent::GetType(kaldi::nnet1::NormalizeComponent *this)
{
  return 1034;
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 56) = xmmword_20D6073D0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26C20CF98;
  *(void *)(a1 + 88) = off_26C20D0C8;
  *(_DWORD *)(a1 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_26C211198;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_26C211198;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 56) = xmmword_20D6073D0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26C20CF98;
  *(void *)(a1 + 88) = off_26C20D0C8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_26C211198;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_26C211198;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v17);
        }
        else {
          float v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v18[8 * v14];
        *uint64_t v19 = v10;
        uint64_t v13 = v19 + 1;
        unsigned int v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(void *)(a2 + 280), *(void *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_20CE6A334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>()
{
}

void sub_20CE6A498(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "InitResidualAggregator", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 939);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    unint64_t v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3);
  }
}

void *kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"DeletePointers", "../engine/common/libquasar/libkaldi/src/util/stl-utils.h", (const char *)0xB8, "v != NULL", a5);
  }
  uint64_t v5 = (void **)*result;
  int v6 = (void **)result[1];
  while (v5 != v6)
  {
    double result = *v5;
    if (*v5)
    {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      void *v5 = 0;
    }
    ++v5;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = off_26C20CF98;
  uint64_t v6 = a1 + 88;
  *(void *)(a1 + 88) = off_26C20D0C8;
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), a2, a3, a4, a5);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  uint64_t v12 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void **)(a1 + 256);
  if (v7)
  {
    *(void *)(a1 + 264) = v7;
    operator delete(v7);
  }
  uint64_t v12 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8)
  {
    *(void *)(a1 + 184) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  if (v9)
  {
    *(void *)(a1 + 160) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 128);
  if (v10)
  {
    *(void *)(a1 + 136) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 104);
  if (v11)
  {
    *(void *)(a1 + 112) = v11;
    operator delete(v11);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v6);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1, a2, a3, a4, a5);
  JUMPOUT(0x2105595E0);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88, a2, a3, a4, a5);
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_20CE6A7F8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed()
{
}

void sub_20CE6A864(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v150 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v149);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v148);
  char v128 = 0;
  int v147 = -1;
  *(unsigned char *)(a1 + 460) = 1;
  memset(v146, 0, sizeof(v146));
  uint64_t v129 = (std::vector<int> *)(a1 + 176);
  uint64_t v130 = (std::vector<int> *)(a1 + 104);
  long long v131 = (std::vector<int> *)(a1 + 152);
  long long v132 = (int *)(a1 + 96);
  long long v133 = (int *)(a1 + 200);
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_193;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v146, v8, v9);
    if ((SHIBYTE(v146[2]) & 0x80000000) == 0) {
      break;
    }
    unint64_t v11 = v146[1];
    switch((unint64_t)v146[1])
    {
      case 9uLL:
        BOOL v10 = *(void *)v146[0] == 0x6461724778614D3CLL && *((unsigned char *)v146[0] + 8) == 62;
LABEL_12:
        uint64_t v7 = (float *)(a1 + 452);
        if (!v10) {
          goto LABEL_284;
        }
        goto LABEL_164;
      case 0xAuLL:
        if (*(void *)v146[0] != 0x6D65744978614D3CLL || *((_WORD *)v146[0] + 4) != 15987) {
          goto LABEL_284;
        }
LABEL_109:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<int> *)(a1 + 128), v34);
        goto LABEL_179;
      case 0xBuLL:
        BOOL v31 = *(void *)v146[0] == 0x756F72476D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E7370756F72476DLL;
        uint64_t v20 = (int *)(a1 + 96);
        if (!v31)
        {
          BOOL v21 = *(void *)v146[0] == 0x6C6261546D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E73656C6261546DLL;
LABEL_96:
          uint64_t v20 = (int *)(a1 + 200);
          if (!v21) {
            goto LABEL_284;
          }
        }
        goto LABEL_177;
      case 0xCuLL:
        if (*(void *)v146[0] == 0x536D6F646E61523CLL && *((_DWORD *)v146[0] + 2) == 1046766949)
        {
LABEL_176:
          uint64_t v20 = &v147;
LABEL_177:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v20, v8, v9);
          goto LABEL_181;
        }
        if (*(void *)v146[0] != 0x69536261636F563CLL || *((_DWORD *)v146[0] + 2) != 1047750010) {
          goto LABEL_187;
        }
LABEL_157:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v130, v46);
        goto LABEL_179;
      case 0xDuLL:
        if (*(void *)v146[0] != 0x74536D617261503CLL || *(void *)((char *)v146[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_284;
        }
LABEL_163:
        uint64_t v7 = (float *)&v150;
LABEL_164:
        kaldi::ReadBasicType<float>(a2, 0, v7, v8, v9);
        goto LABEL_181;
      case 0xFuLL:
        BOOL v32 = *(void *)v146[0] == 0x61526E7261654C3CLL && *(void *)((char *)v146[0] + 7) == 0x3E66656F43657461;
        uint64_t v7 = (float *)(a1 + 456);
        if (!v32) {
          goto LABEL_118;
        }
        goto LABEL_164;
      case 0x11uLL:
        if (*(void *)v146[0] == 0x69446465626D453CLL
          && *((void *)v146[0] + 1) == 0x736E6F69736E656DLL
          && *((unsigned char *)v146[0] + 16) == 62)
        {
LABEL_59:
          std::string __p = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v131, v24);
          goto LABEL_179;
        }
        if (v146[1] == (void *)15)
        {
LABEL_118:
          if (*(void *)v146[0] == 0x656E67697373413CLL && *(void *)((char *)v146[0] + 7) == 0x3E656C6261546465)
          {
LABEL_178:
            std::string __p = 0;
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v129, v50);
LABEL_179:
            if (SHIBYTE(v143) < 0) {
              operator delete(__p);
            }
            goto LABEL_181;
          }
LABEL_122:
          unint64_t v11 = v146[1];
        }
LABEL_123:
        if (v11 == (void *)20)
        {
          if (*(void *)v146[0] == 0x6C616974696E493CLL
            && *((void *)v146[0] + 1) == 0x6E6F436F54657A69
            && *((_DWORD *)v146[0] + 4) == 1047814499)
          {
LABEL_175:
            char v128 = 1;
            goto LABEL_181;
          }
          unint64_t v11 = v146[1];
        }
        if (v11 != (void *)14) {
          goto LABEL_186;
        }
        if (*(void *)v146[0] != 0x6E6172546573553CLL || *(void *)((char *)v146[0] + 6) != 0x3E6D726F66736E61)
        {
LABEL_185:
          unint64_t v11 = v146[1];
LABEL_186:
          if (v11 == (void *)12)
          {
LABEL_187:
            uint64_t v51 = (void **)v146[0];
            goto LABEL_188;
          }
LABEL_284:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 271);
          uint64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v146[2]) >= 0) {
            unint64_t v123 = v146;
          }
          else {
            unint64_t v123 = (void **)v146[0];
          }
          if (SHIBYTE(v146[2]) >= 0) {
            uint64_t v124 = HIBYTE(v146[2]);
          }
          else {
            uint64_t v124 = (uint64_t)v146[1];
          }
          long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
          long long v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)", a typo in config? ", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_138:
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460), v8, v9);
LABEL_181:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0x12uLL:
        if (*(void *)v146[0] != 0x6E6569646172473CLL
          || *((void *)v146[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v146[0] + 8) != 15973)
        {
          goto LABEL_284;
        }
LABEL_147:
        long long v43 = &v148;
        goto LABEL_174;
      case 0x13uLL:
        if (*(void *)v146[0] != 0x61725474696E493CLL
          || *((void *)v146[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v146[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_284;
        }
LABEL_173:
        long long v43 = &v149;
LABEL_174:
        kaldi::ReadToken(a2, 0, (uint64_t)v43, v8, v9);
        goto LABEL_181;
      default:
        goto LABEL_123;
    }
  }
  switch(HIBYTE(v146[2]))
  {
    case 9:
      BOOL v10 = v146[0] == (void *)0x6461724778614D3CLL && LOBYTE(v146[1]) == 62;
      goto LABEL_12;
    case 0xA:
      if (v146[0] != (void *)0x6D65744978614D3CLL || LOWORD(v146[1]) != 15987) {
        goto LABEL_284;
      }
      goto LABEL_109;
    case 0xB:
      BOOL v19 = v146[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E7370756F72476DLL;
      uint64_t v20 = (int *)(a1 + 96);
      if (v19) {
        goto LABEL_177;
      }
      BOOL v21 = v146[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E73656C6261546DLL;
      goto LABEL_96;
    case 0xC:
      if (v146[0] == (void *)0x536D6F646E61523CLL && LODWORD(v146[1]) == 1046766949) {
        goto LABEL_176;
      }
      if (v146[0] != (void *)0x69536261636F563CLL || LODWORD(v146[1]) != 1047750010) {
        goto LABEL_184;
      }
      goto LABEL_157;
    case 0xD:
      if (v146[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v146 + 5) != (void *)0x3E7665646474536DLL) {
        goto LABEL_284;
      }
      goto LABEL_163;
    case 0xE:
      goto LABEL_84;
    case 0xF:
      BOOL v28 = v146[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v146 + 7) == (void *)0x3E66656F43657461;
      uint64_t v7 = (float *)(a1 + 456);
      if (v28) {
        goto LABEL_164;
      }
      if (v146[0] == (void *)0x656E67697373413CLL && *(void **)((char *)v146 + 7) == (void *)0x3E656C6261546465) {
        goto LABEL_178;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_122;
      }
LABEL_83:
      if (HIBYTE(v146[2]) != 14) {
        goto LABEL_183;
      }
LABEL_84:
      if (v146[0] == (void *)0x6E6172546573553CLL && *(void **)((char *)v146 + 6) == (void *)0x3E6D726F66736E61) {
        goto LABEL_138;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_185;
      }
LABEL_183:
      if (HIBYTE(v146[2]) != 12) {
        goto LABEL_284;
      }
LABEL_184:
      uint64_t v51 = v146;
      break;
    case 0x11:
      if (v146[0] != (void *)0x69446465626D453CLL || v146[1] != (void *)0x736E6F69736E656DLL || LOBYTE(v146[2]) != 62) {
        goto LABEL_284;
      }
      goto LABEL_59;
    case 0x12:
      if (v146[0] != (void *)0x6E6569646172473CLL
        || v146[1] != (void *)0x7079546D726F4E74
        || LOWORD(v146[2]) != 15973)
      {
        goto LABEL_284;
      }
      goto LABEL_147;
    case 0x13:
      if (v146[0] != (void *)0x61725474696E493CLL
        || v146[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v146[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        goto LABEL_284;
      }
      goto LABEL_173;
    case 0x14:
      if (v146[0] != (void *)0x6C616974696E493CLL
        || v146[1] != (void *)0x6E6F436F54657A69
        || LODWORD(v146[2]) != 1047814499)
      {
        goto LABEL_83;
      }
      goto LABEL_175;
    default:
      goto LABEL_284;
  }
LABEL_188:
  uint64_t v52 = *v51;
  uint64_t v53 = *((unsigned int *)v51 + 2);
  if (v52 != (void *)0x6E6F706D6F432F3CLL || v53 != 1047817829) {
    goto LABEL_284;
  }
LABEL_193:
  uint64_t v55 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v6, (uint64_t)v7, v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    if (*v132 >= 1)
    {
      int v56 = 0;
      do
      {
        long long v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        LODWORD(v138) = 0;
        LODWORD(v151[0]) = 0;
        kaldi::ExpectToken(a2, 0, (kaldi *)"<FeatureTransform>");
        kaldi::ReadToken(a2, 0, (uint64_t)&v134, v57, v58);
        uint64_t v59 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v134);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v138, v60, v61);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v151, v62, v63);
        kaldi::nnet1::Component::NewComponentOfType(v59);
        if (!v64
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 293);
          unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
          if (v136 >= 0) {
            unint64_t v120 = &v134;
          }
          else {
            unint64_t v120 = v134;
          }
          if (v136 >= 0) {
            uint64_t v121 = HIBYTE(v136);
          }
          else {
            uint64_t v121 = v135;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        long long v66 = v65;
        (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(void *)v65 + 96))(v65, a2, a3);
        long long v68 = *(void **)(a1 + 264);
        unint64_t v67 = *(void *)(a1 + 272);
        if ((unint64_t)v68 >= v67)
        {
          uint64_t v70 = ((char *)v68 - *v55) >> 3;
          if ((unint64_t)(v70 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v67 - (void)*v55;
          uint64_t v72 = v71 >> 2;
          if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
            uint64_t v72 = v70 + 1;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73) {
            long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v73);
          }
          else {
            long long v74 = 0;
          }
          long long v75 = &v74[8 * v70];
          *(void *)long long v75 = v66;
          long long v69 = v75 + 8;
          long long v77 = *(char **)(a1 + 256);
          uint64_t v76 = *(char **)(a1 + 264);
          if (v76 != v77)
          {
            do
            {
              uint64_t v78 = *((void *)v76 - 1);
              v76 -= 8;
              *((void *)v75 - 1) = v78;
              v75 -= 8;
            }
            while (v76 != v77);
            uint64_t v76 = *v55;
          }
          *(void *)(a1 + 256) = v75;
          *(void *)(a1 + 264) = v69;
          *(void *)(a1 + 272) = &v74[8 * v73];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *long long v68 = v66;
          long long v69 = v68 + 1;
        }
        *(void *)(a1 + 264) = v69;
        if (SHIBYTE(v136) < 0) {
          operator delete(v134);
        }
        ++v56;
      }
      while (v56 < *v132);
    }
    if (v128)
    {
      uint64_t v79 = *(uint64_t **)(a1 + 256);
      int v80 = *(uint64_t **)(a1 + 264);
      if (v79 == v80)
      {
        if (!*(_DWORD *)(*v79 + 12))
        {
LABEL_232:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 332);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          goto LABEL_234;
        }
      }
      else
      {
        int v81 = 0;
        uint64_t v82 = *(uint64_t **)(a1 + 256);
        do
        {
          uint64_t v83 = *v82++;
          v81 += *(_DWORD *)(v83 + 8);
        }
        while (v82 != v80);
        if (v81 == *(_DWORD *)(*v79 + 12))
        {
          uint64_t v84 = 0;
          do
          {
            uint64_t v85 = (const void *)*v79;
            if (!*v79)
            {
LABEL_291:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 326);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            if (v86)
            {
              uint64_t v87 = v86;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v86[3], v86[2], 0, 0);
              uint64_t v88 = v87[3];
              long long v138 = 0;
              v139 = 0;
              unint64_t v140 = 0;
              kaldi::Vector<float>::Resize((void **)&v138, v88, 0, v89, v90);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, v87[2], 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v134);
              kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&__p);
              kaldi::nnet1::AffineTransform::SetBias((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&v138);
              unsigned int v91 = v87[2];
              kaldi::Vector<float>::Destroy((uint64_t)&v138);
            }
            else
            {
              if (!v92) {
                goto LABEL_291;
              }
              uint64_t v93 = (uint64_t)v92;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v92[3], v92[2], 0, 0);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, *(unsigned int *)(v93 + 8), 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v134);
              kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v93, (uint64_t)&__p);
              unsigned int v91 = *(_DWORD *)(v93 + 8);
            }
            kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
            uint64_t v84 = v91 + v84;
            ++v79;
          }
          while (v79 != v80);
          if (v84 != v81) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x14B, "shift == total_dim", v94);
          }
          goto LABEL_232;
        }
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 304);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
      int v127 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" actual dim is ", 15);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
LABEL_234:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v149);
  *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v148);
  if (!inited)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v139 = 0;
  unint64_t v140 = 0;
  long long v138 = &v139;
  if (*v132 < 1)
  {
    unint64_t v102 = 0;
  }
  else
  {
    uint64_t v97 = 0;
    do
    {
      LODWORD(v134) = 0;
      int v98 = v129->__begin_[v97];
      LODWORD(v134) = v98;
      if (v98 < 0 || v98 >= *v133) {
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x159, "table_idx >= 0 && table_idx < num_tables_", v96);
      }
      int v99 = v130->__begin_[v97];
      int v100 = v131->__begin_[v97];
      std::string __p = &v134;
      unint64_t v101 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, (int *)&v134, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v101 + 8) = v99;
      *((_DWORD *)v101 + 9) = v100;
      ++v97;
    }
    while (v97 < *v132);
    unint64_t v102 = v140;
  }
  if (v102 != *v133) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x15C, "table_dims.size() == num_tables_", v96);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), v102);
  if (v147 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v147);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
  int v137 = 0;
  if (*v133 >= 1)
  {
    v151[0] = &v137;
    int v103 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, &v137, (uint64_t)&std::piecewise_construct, v151);
    uint64_t v104 = *((unsigned int *)v103 + 8);
    uint64_t v105 = *((unsigned int *)v103 + 9);
    kaldi::Matrix<float>::Matrix((uint64_t)&v134, v104, v105, 0, 0);
    if ((int)v104 < 1) {
LABEL_265:
    }
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>();
    unsigned int v109 = 0;
    while ((int)v105 < 1)
    {
LABEL_264:
      if (++v109 == v104) {
        goto LABEL_265;
      }
    }
    unint64_t v110 = 0;
    while (inited != 2)
    {
      if (inited == 1)
      {
        float v111 = *(float *)&v150;
        float v112 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v106, v107, v108);
        if (HIDWORD(v135) <= v109 || v110 >= v135) {
          goto LABEL_275;
        }
        uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
        float v115 = (v112 + -0.5) * (float)(v111 + v111);
LABEL_262:
        *(float *)&v114[4 * v110] = v115;
      }
      if (v105 == ++v110) {
        goto LABEL_264;
      }
    }
    float v116 = *(float *)&v150;
    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0, v106, v107, v108);
    if (HIDWORD(v135) <= v109 || v110 >= v135) {
LABEL_275:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v108);
    uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
    float v115 = v116 * v117;
    goto LABEL_262;
  }
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  long long v134 = &v143;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v138, v139);
  if (SHIBYTE(v146[2]) < 0) {
    operator delete(v146[0]);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
}

void sub_20CE6BC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  a17 = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&a23, a24);
  if (*(char *)(v32 - 177) < 0) {
    operator delete(*(void **)(v32 - 200));
  }
  if (*(char *)(v32 - 145) < 0) {
    operator delete(*(void **)(v32 - 168));
  }
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_20CE6BC84()
{
}

void sub_20CE6BC8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CE6BCECLL);
}

void sub_20CE6BCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x20CE6BCBCLL);
}

unsigned int *kaldi::nnet1::AffineTransform::SetLinearity(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  if (v4 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x26A, "linearity.NumRows() == Linearity().NumRows()", v5);
  }
  int v6 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x26B, "linearity.NumCols() == Linearity().NumCols()", v7);
  }
  uint64_t v8 = kaldi::nnet1::AffineTransform::Linearity(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat(v8, a2, 111, v9, v10);
}

_DWORD *kaldi::nnet1::AffineTransform::SetBias(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetBias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x25F, "bias.Dim() == Bias().Dim()", v5);
  }
  int v6 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias(a1);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v6, a2, v7, v8, v9);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>()
{
}

void sub_20CE6BF24(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t result)
{
  if (!*(unsigned char *)(result + 544))
  {
    uint64_t v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 503);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 506);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 509);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        BOOL v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        uint64_t v3 = *(void *)(result + 104);
        uint64_t v4 = (*(void *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          uint64_t v5 = *(void *)(result + 128);
          if (v4 == (*(void *)(result + 136) - v5) >> 2)
          {
            uint64_t v6 = *(void *)(result + 152);
            if (v4 == (*(void *)(result + 160) - v6) >> 2)
            {
              uint64_t v7 = *(void *)(result + 176);
              if (v4 == (*(void *)(result + 184) - v7) >> 2)
              {
                uint64_t v8 = *(void *)(result + 208);
                if (v2 == (*(void *)(result + 216) - v8) >> 3)
                {
                  if (*(unsigned char *)(result + 460)
                    && v4 != (uint64_t)(*(void *)(result + 264) - *(void *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 528);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    uint64_t v40 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    uint64_t v9 = 0;
                    int v10 = 0;
                    int v11 = 0;
                    do
                    {
                      uint64_t v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 537);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v22 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has assigned table index ", 35);
                        uint64_t v23 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 542);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        unint64_t v25 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 545);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        unint64_t v26 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 548);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v24 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      uint64_t v16 = *(void *)(v8 + 8 * v12);
                      if (*(_DWORD *)(v16 + 20) != v13)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 553);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v20 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        BOOL v21 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_DWORD *)(v16 + 16) != v15)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 557);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        float v18 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        BOOL v19 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(unsigned char *)(result + 460))
                      {
                        uint64_t v17 = *(void *)(*(void *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 561);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          int64_t v29 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          uint64_t v30 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 565);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          unint64_t v27 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          BOOL v28 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(unsigned char *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(unsigned char *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 575);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      uint64_t v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      long long v42 = (void *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 571);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      std::locale v39 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  uint64_t v38 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 521);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                unint64_t v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                uint64_t v37 = (void *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 518);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              uint64_t v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 515);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            uint64_t v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 512);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          uint64_t v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_35:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_20CE6C8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v82 = 0uLL;
  uint64_t v83 = 0;
  uint64_t v8 = (char *)(a1 + 460);
  *(unsigned char *)(a1 + 460) = 1;
  uint64_t v9 = (float *)(a1 + 452);
  long long v75 = (std::vector<int> *)(a1 + 176);
  uint64_t v76 = (float *)(a1 + 456);
  long long v74 = (std::vector<int> *)(a1 + 152);
  long long v77 = (std::vector<int> *)(a1 + 104);
  uint64_t v78 = (std::vector<int> *)(a1 + 128);
  int v10 = (int *)(a1 + 200);
  int v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v82, v12, v13);
    if (SHIBYTE(v83) < 0)
    {
      uint64_t v20 = *((void *)&v82 + 1);
      if (*((void *)&v82 + 1) != 11) {
        goto LABEL_25;
      }
      BOOL v21 = *(void *)v82 == 0x756F72476D754E3CLL && *(void *)(v82 + 3) == 0x3E7370756F72476DLL;
      uint64_t v18 = (uint64_t)v11;
      if (v21
        || (*(void *)v82 == 0x6C6261546D754E3CLL ? (BOOL v22 = *(void *)(v82 + 3) == 0x3E73656C6261546DLL) : (BOOL v22 = 0),
            uint64_t v18 = (uint64_t)v10,
            v22))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v18, v14, v15);
      }
      else
      {
        uint64_t v20 = *((void *)&v82 + 1);
LABEL_25:
        if (v20 == 12)
        {
          if (*(void *)v82 == 0x69536261636F563CLL && *(_DWORD *)(v82 + 8) == 1047750010)
          {
LABEL_94:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v77, v37);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
        }
        if (v20 != 10) {
          goto LABEL_37;
        }
        if (*(void *)v82 == 0x6D65744978614D3CLL && *(_WORD *)(v82 + 8) == 15987)
        {
LABEL_93:
          std::string __p = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v78, v36);
LABEL_137:
          if (SHIBYTE(v81) < 0) {
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_37:
          if (v20 == 17)
          {
            if (*(void *)v82 == 0x69446465626D453CLL
              && *(void *)(v82 + 8) == 0x736E6F69736E656DLL
              && *(unsigned char *)(v82 + 16) == 62)
            {
LABEL_135:
              std::string __p = 0;
              uint64_t v80 = 0;
              uint64_t v81 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v74, v48);
              goto LABEL_137;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 15) {
            goto LABEL_52;
          }
          if (*(void *)v82 == 0x656E67697373413CLL && *(void *)(v82 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v75, v47);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_52:
          if (v20 != 18) {
            goto LABEL_61;
          }
          if (*(void *)v82 == 0x6E6569646172473CLL
            && *(void *)(v82 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v82 + 16) == 15973)
          {
LABEL_136:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_61:
          if (v20 == 9)
          {
            BOOL v30 = *(void *)v82 == 0x6461724778614D3CLL && *(unsigned char *)(v82 + 8) == 62;
            BOOL v31 = v9;
            if (v30) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 == 15)
          {
            BOOL v32 = *(void *)v82 == 0x61526E7261654C3CLL && *(void *)(v82 + 7) == 0x3E66656F43657461;
            BOOL v31 = v76;
            if (v32) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 14) {
            goto LABEL_167;
          }
          uint64_t v16 = (uint64_t *)v82;
LABEL_128:
          uint64_t v44 = *v16;
          uint64_t v45 = *(uint64_t *)((char *)v16 + 6);
          if (v44 != 0x6E6172546573553CLL || v45 != 0x3E6D726F66736E61) {
            goto LABEL_167;
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8, v14, v15);
        }
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)&v82;
      switch(HIBYTE(v83))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          BOOL v17 = (void)v82 == 0x756F72476D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E7370756F72476DLL;
          uint64_t v18 = (uint64_t)v11;
          if (!v17)
          {
            BOOL v19 = (void)v82 == 0x6C6261546D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E73656C6261546DLL;
            uint64_t v18 = (uint64_t)v10;
            if (!v19) {
              goto LABEL_80;
            }
          }
          goto LABEL_75;
        case 0xC:
          if ((void)v82 == 0x69536261636F563CLL && DWORD2(v82) == 1047750010) {
            goto LABEL_94;
          }
LABEL_80:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) != 10) {
            goto LABEL_167;
          }
LABEL_82:
          if ((void)v82 == 0x6D65744978614D3CLL && WORD4(v82) == 15987) {
            goto LABEL_93;
          }
LABEL_86:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          goto LABEL_167;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((void)v82 == 0x69446465626D453CLL
            && *((void *)&v82 + 1) == 0x736E6F69736E656DLL
            && v83 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          if (HIBYTE(v83) != 15) {
            goto LABEL_167;
          }
LABEL_115:
          if ((void)v82 == 0x656E67697373413CLL && *(void *)((char *)&v82 + 7) == 0x3E656C6261546465) {
            goto LABEL_134;
          }
          switch(HIBYTE(v83))
          {
            case 9u:
LABEL_87:
              BOOL v35 = (void)v82 == 0x6461724778614D3CLL && BYTE8(v82) == 62;
              BOOL v31 = v9;
              if (!v35) {
                goto LABEL_167;
              }
              break;
            case 0xEu:
LABEL_127:
              uint64_t v16 = (uint64_t *)&v82;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              BOOL v43 = (void)v82 == 0x61526E7261654C3CLL && *(void *)((char *)&v82 + 7) == 0x3E66656F43657461;
              BOOL v31 = v76;
              if (!v43)
              {
LABEL_167:
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 408);
                uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v83 >= 0) {
                  uint64_t v71 = &v82;
                }
                else {
                  uint64_t v71 = (long long *)v82;
                }
                if (v83 >= 0) {
                  uint64_t v72 = HIBYTE(v83);
                }
                else {
                  uint64_t v72 = *((void *)&v82 + 1);
                }
                unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_167;
          }
          return;
        case 0x12:
          if ((void)v82 == 0x6E6569646172473CLL
            && *((void *)&v82 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v83 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v83) == 15) {
            goto LABEL_122;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          goto LABEL_86;
        default:
          goto LABEL_167;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v31, v14, v15);
    }
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1) {
    operator new();
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  uint64_t v49 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v50, v51, v52, v53);
  if (*v8 && *v11 >= 1)
  {
    int v54 = 0;
    do
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureTransform>");
      uint64_t v55 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v55
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 425);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      uint64_t v57 = v56;
      kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
      uint64_t v59 = *(void **)(a1 + 264);
      unint64_t v58 = *(void *)(a1 + 272);
      if ((unint64_t)v59 >= v58)
      {
        uint64_t v61 = ((char *)v59 - *v49) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v62 = v58 - (void)*v49;
        uint64_t v63 = v62 >> 2;
        if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
          uint64_t v63 = v61 + 1;
        }
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          long long v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v64);
        }
        else {
          long long v65 = 0;
        }
        long long v66 = &v65[8 * v61];
        *(void *)long long v66 = v57;
        uint64_t v60 = v66 + 8;
        long long v68 = *(char **)(a1 + 256);
        unint64_t v67 = *(char **)(a1 + 264);
        if (v67 != v68)
        {
          do
          {
            uint64_t v69 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v66 - 1) = v69;
            v66 -= 8;
          }
          while (v67 != v68);
          unint64_t v67 = *v49;
        }
        *(void *)(a1 + 256) = v66;
        *(void *)(a1 + 264) = v60;
        *(void *)(a1 + 272) = &v65[8 * v64];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *uint64_t v59 = v57;
        uint64_t v60 = v59 + 1;
      }
      *(void *)(a1 + 264) = v60;
      ++v54;
    }
    while (v54 < *(_DWORD *)(a1 + 96));
  }
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
}

void sub_20CE6D3C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumGroups>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumTables>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSizes>", v10, v11);
  kaldi::JoinVectorToString<int>((void *)(a1 + 104), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxItems>", v14, v15);
  kaldi::JoinVectorToString<int>((void *)(a1 + 128), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v16, v17);
  kaldi::WriteToken(a2, a3, (kaldi *)"<EmbedDimensions>", v18, v19);
  kaldi::JoinVectorToString<int>((void *)(a1 + 152), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v20, v21);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AssignedTable>", v22, v23);
  kaldi::JoinVectorToString<int>((void *)(a1 + 176), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v24, v25);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v28, v29);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v32, v33);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UseTransform>", v34, v35);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
}

void sub_20CE6D62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<int>(void *a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      uint64_t v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        size_t v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v8);
        uint64_t v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v12;
  uint64_t v9 = (void *)MEMORY[0x263F8C2B8];
  *(void *)(a3 + 16) = v13;
  v14[0] = *v9;
  uint64_t v10 = v9[9];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = v9[8];
  v15[0] = v10;
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210559500](&v17);
}

void sub_20CE6D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)a1 + 168))(a1, a2, a3);
  uint64_t v10 = *(uint64_t **)(a1 + 208);
  int v11 = *(uint64_t **)(a1 + 216);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    kaldi::CuMatrixBase<float>::Write(v12, a2, (int)a3, a4);
  }
  double result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    char v16 = *(uint64_t **)(a1 + 256);
    for (i = *(uint64_t **)(a1 + 264); v16 != i; double result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v19, v20))
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureTransform>", v14, v15);
      uint64_t v18 = *v16++;
      kaldi::nnet1::Component::Write(v18, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::NumParams(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[26];
  uint64_t v2 = (uint64_t *)a1[27];
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = *v1++;
      uint64_t v3 = (v3 + *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20));
    }
    while (v1 != v2);
  }
  uint64_t v5 = (uint64_t *)a1[32];
  unint64_t v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  uint64_t v10 = (uint64_t *)a1[26];
  int v11 = (uint64_t *)a1[27];
  if (v10 == v11)
  {
    int v15 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = *v10;
      int v14 = *(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      int v15 = v14 + v12;
      if ((v14 + v12) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      }
      uint64_t v24 = *(void *)a2 + 4 * v12;
      LODWORD(v25) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v24, v13, v7, v8, v9);
      ++v10;
      int v12 = v15;
    }
    while (v10 != v11);
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v17 = (void *)a1[32];
  char v16 = (void *)a1[33];
  while (v17 != v16)
  {
    (*(void (**)(void, uint64_t *))(*(void *)*v17 + 184))(*v17, &v24);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    if ((v25 + v15) > *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
    }
    uint64_t v21 = *(void *)a2 + 4 * v15;
    LODWORD(v22) = v25;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v21, (uint64_t)&v24, v18, v19, v20);
    v15 += v25;
    ++v17;
  }
  if (v15 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x27E, "shift == wei_copy->Dim()", v9);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v24);
}

void sub_20CE6DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

int *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  int v4 = *(_DWORD *)(a2 + 8);
  double result = (int *)(*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v4 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x284, "wei_src.Dim() == NumParams()", v6);
  }
  uint64_t v7 = (uint64_t *)a1[26];
  uint64_t v8 = (uint64_t *)a1[27];
  if (v7 != v8)
  {
    int v9 = 0;
    while (1)
    {
      uint64_t v10 = *v7;
      int v11 = *(_DWORD *)(*v7 + 16) * *(_DWORD *)(*v7 + 20);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v12 = v11 + v9;
      if ((v11 + v9) > *(_DWORD *)(a2 + 8)) {
        break;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v9);
      LODWORD(v19) = v11;
      double result = kaldi::CuMatrixBase<float>::CopyRowsFromVec(v10, &v18);
      ++v7;
      int v9 = v12;
      if (v7 == v8) {
        goto LABEL_8;
      }
    }
LABEL_15:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  int v12 = 0;
LABEL_8:
  int v14 = (uint64_t *)a1[32];
  uint64_t v13 = (uint64_t *)a1[33];
  if (v14 != v13)
  {
    while (1)
    {
      int v15 = (*(uint64_t (**)(void))(*(void *)*v14 + 176))();
      uint64_t v16 = *v14;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v17 = v15 + v12;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8)) {
        goto LABEL_15;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v12);
      LODWORD(v19) = v15;
      double result = (int *)(*(uint64_t (**)(uint64_t, char **))(*(void *)v16 + 192))(v16, &v18);
      ++v14;
      int v12 = v17;
      if (v14 == v13) {
        goto LABEL_13;
      }
    }
  }
  int v17 = v12;
LABEL_13:
  if (v17 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x290, "shift == wei_src.Dim()", v6);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SumParams(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (uint64_t *)a1[26];
  uint64_t v7 = (uint64_t *)a1[27];
  float v8 = 0.0;
  while (v6 != v7)
  {
    uint64_t v9 = *v6++;
    float v8 = v8 + kaldi::CuMatrixBase<float>::Sum(v9, a2, a3, a4, a5);
  }
  int v11 = (uint64_t *)a1[32];
  uint64_t v10 = (uint64_t *)a1[33];
  while (v11 != v10)
  {
    uint64_t v12 = *v11++;
    float v8 = v8 + (*(float (**)(uint64_t))(*(void *)v12 + 208))(v12);
  }
  return v8;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v18, 0);
  uint64_t v2 = (uint64_t *)a1[26];
  for (uint64_t i = (uint64_t *)a1[27]; v2 != i; ++v2)
  {
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics<float>(*v2);
    if ((v17 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v6 = v17;
    }
    else {
      uint64_t v6 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v7 = a1[32];
  for (uint64_t j = a1[33]; v7 != j; v7 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", output-dim ", 13);
    uint64_t v10 = (void *)std::ostream::operator<<();
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(void **)v7 + 64))(&__p);
    if ((v17 & 0x80u) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v18[1] = MEMORY[0x263F8C318] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v20);
}

void sub_20CE6E148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  uint64_t v2 = *(void *)(a1 + 256);
  for (uint64_t i = *(void *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v12);
}

void sub_20CE6E358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  uint64_t v3 = *(uint64_t **)(result + 256);
  for (uint64_t i = *(uint64_t **)(result + 264);
        v3 != i;
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2))
  {
    uint64_t v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AC, "in.NumCols() == input_dim_", v8);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AE, "batch_idx == 0", v8);
  }
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  uint64_t v34 = a3;
  if (*(unsigned char *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    LODWORD(v12) = *(_DWORD *)(a1 + 96);
    if ((int)v12 < 1)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(a1 + 280) + v13;
        *(void *)(v16 + 32) = v9;
        kaldi::CuMatrix<float>::Resize(v16, v10, *(unsigned int *)(*(void *)(a1 + 152) + 4 * v14), 0, 0);
        uint64_t v17 = *(void *)(a1 + 280) + v13;
        uint64_t v18 = *(void *)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v14));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a2, 0, *(_DWORD *)(a2 + 20), v15, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v14));
        kaldi::CuMatrixBase<float>::SummarizeVec(v17, v18, (uint64_t)&v38, v19, v20);
        uint64_t v38 = off_26C2096F8;
        long long v39 = 0u;
        long long v40 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
        int v15 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v14++) + v15);
        uint64_t v12 = *(int *)(a1 + 96);
        v13 += 48;
      }
      while (v14 < v12);
    }
    if (v15 != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2BC, "shift == input_dim_", v11);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), (int)v12);
    if (*(int *)(a1 + 96) >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        uint64_t v31 = *(void *)(a1 + 304) + v29;
        *(void *)(v31 + 32) = v9;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v30), *(void *)(a1 + 280) + v29, v31, 0);
        kaldi::CuMatrixBase<float>::AddMat(v34, *(void *)(a1 + 304) + v29, 111, v32, v33, 1.0, 1.0);
        ++v30;
        v29 += 48;
      }
      while (v30 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v21 = a3;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a1 + 152);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v21, 0, *(_DWORD *)(v21 + 20), v23, *(_DWORD *)(v25 + 4 * v22));
      uint64_t v26 = *(void *)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v22));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), v24, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v22));
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v38, v26, (uint64_t)&v35, v27, v28);
      BOOL v35 = off_26C2096F8;
      long long v36 = 0u;
      long long v37 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
      uint64_t v38 = off_26C2096F8;
      long long v39 = 0u;
      long long v40 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
      uint64_t v25 = *(void *)(a1 + 152);
      uint64_t v23 = (const char *)(*(_DWORD *)(v25 + 4 * v22) + v23);
      uint64_t v24 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v22++) + v24);
      uint64_t v21 = a3;
    }
    while (v22 < *(int *)(a1 + 96));
  }
}

void sub_20CE6E774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)())
{
  a11 = off_26C2096F8;
  *uint64_t v17 = 0u;
  v17[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a11);
  a16 = off_26C2096F8;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  uint64_t v6 = *(uint64_t **)(a1 + 256);
  uint64_t v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(void *)v8 + 240))(v8, a2, a3);
  }
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9, "SetGradientNormalization", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 735);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_20CE6E908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1) {
    return NAN;
  }
  else {
    return *(float *)(a1 + 56) / (float)v1;
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v37 = 0u;
  long long v36 = 0u;
  BOOL v35 = off_26C211198;
  char v38 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v11, a2, (uint64_t)&v35, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 232))(v11, a2, a3, 0, 0);
  int v15 = *(uint64_t **)(v11 + 232);
  uint64_t v16 = *(uint64_t **)(v11 + 240);
  if (v15 == v16)
  {
    int v19 = 0;
  }
  else
  {
    int v17 = 0;
    do
    {
      int v18 = *(_DWORD *)(*v15 + 16) * *(_DWORD *)(*v15 + 20);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v19 = v18 + v17;
      if ((v18 + v17) > *(_DWORD *)(a4 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
      }
      uint64_t v32 = *(void *)a4 + 4 * v17;
      LODWORD(v33) = v18;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, *v15++, v12, v13, v14);
      int v17 = v19;
    }
    while (v15 != v16);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v21, a2, (uint64_t)&v35, 0);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v21)
      {
LABEL_15:
        kaldi::Vector<float>::Destroy((uint64_t)&v32);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(*(void *)(v21 + 256) + 8 * v23);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v24 + 224))(v24, *(void *)(v21 + 280) + v22, a3, &v32);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        if ((v33 + v19) > *(_DWORD *)(a4 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
        }
        uint64_t v29 = *(void *)a4 + 4 * v19;
        LODWORD(v30) = v33;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (uint64_t)&v32, v25, v26, v27);
        v19 += v33;
        ++v23;
        v22 += 48;
      }
      while (v23 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    goto LABEL_15;
  }
LABEL_16:
  if (v19 != *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x392, "shift == gradient_out->Dim()", v20);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
}

void sub_20CE6ECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 920);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  *a3 = 0;
  uint64_t v10 = *(char **)(a1 + 208);
  uint64_t v11 = *(char **)(a1 + 216);
  uint64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    int v13 = 0;
    unint64_t v14 = v12 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    do
    {
      uint64_t v15 = *(void *)v10;
      v10 += 8;
      v13 += *(_DWORD *)(v15 + 16) * *(_DWORD *)(v15 + 20);
      *a3 = v13;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *(void *)(a1 + 232);
  uint64_t v17 = *(void *)(a1 + 240);
  *a2 = 0;
  if (v17 != v16)
  {
    unint64_t v18 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v16 + 8 * v18++), v6, v7, v8, v9);
      uint64_t v16 = *(void *)(a1 + 232);
    }
    while (v18 < (*(void *)(a1 + 240) - v16) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(void *a1)
{
  unint64_t v1 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v1 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 29, v1);
    if (a1[27] != a1[26]) {
      operator new();
    }
  }
}

void sub_20CE6EEE0(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 56) = xmmword_20D6073D0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26C20D0F0;
  *(void *)(a1 + 88) = off_26C20D220;
  *(_DWORD *)(a1 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_26C211198;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_26C211198;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 56) = xmmword_20D6073D0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26C20D0F0;
  *(void *)(a1 + 88) = off_26C20D220;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_26C211198;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_26C211198;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v10;
        int v13 = v19 + 1;
        uint64_t v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        int v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(void *)(a2 + 280), *(void *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_20CE6F4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (kaldi::CompressedMatrix **)(*a1 + 8 * a2));
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(a1, a2 - v2);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>()
{
}

void sub_20CE6F66C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "InitResidualAggregator", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 939);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    unint64_t v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = off_26C20D0F0;
  uint64_t v6 = a1 + 88;
  *(void *)(a1 + 88) = off_26C20D220;
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), a2, a3, a4, a5);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  uint64_t v12 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void **)(a1 + 256);
  if (v7)
  {
    *(void *)(a1 + 264) = v7;
    operator delete(v7);
  }
  uint64_t v12 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8)
  {
    *(void *)(a1 + 184) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  if (v9)
  {
    *(void *)(a1 + 160) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 128);
  if (v10)
  {
    *(void *)(a1 + 136) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 104);
  if (v11)
  {
    *(void *)(a1 + 112) = v11;
    operator delete(v11);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v6);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1, a2, a3, a4, a5);
  JUMPOUT(0x2105595E0);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88, a2, a3, a4, a5);
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Copy()
{
}

void sub_20CE6F948(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed()
{
}

void sub_20CE6F9B4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v150 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v149);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v148);
  char v128 = 0;
  int v147 = -1;
  *(unsigned char *)(a1 + 460) = 1;
  memset(v146, 0, sizeof(v146));
  uint64_t v129 = (std::vector<int> *)(a1 + 176);
  uint64_t v130 = (std::vector<int> *)(a1 + 104);
  long long v131 = (std::vector<int> *)(a1 + 152);
  long long v132 = (int *)(a1 + 96);
  long long v133 = (int *)(a1 + 200);
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_193;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v146, v8, v9);
    if ((SHIBYTE(v146[2]) & 0x80000000) == 0) {
      break;
    }
    unint64_t v11 = v146[1];
    switch((unint64_t)v146[1])
    {
      case 9uLL:
        BOOL v10 = *(void *)v146[0] == 0x6461724778614D3CLL && *((unsigned char *)v146[0] + 8) == 62;
LABEL_12:
        uint64_t v7 = (float *)(a1 + 452);
        if (!v10) {
          goto LABEL_284;
        }
        goto LABEL_164;
      case 0xAuLL:
        if (*(void *)v146[0] != 0x6D65744978614D3CLL || *((_WORD *)v146[0] + 4) != 15987) {
          goto LABEL_284;
        }
LABEL_109:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<int> *)(a1 + 128), v34);
        goto LABEL_179;
      case 0xBuLL:
        BOOL v31 = *(void *)v146[0] == 0x756F72476D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E7370756F72476DLL;
        uint64_t v20 = (int *)(a1 + 96);
        if (!v31)
        {
          BOOL v21 = *(void *)v146[0] == 0x6C6261546D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E73656C6261546DLL;
LABEL_96:
          uint64_t v20 = (int *)(a1 + 200);
          if (!v21) {
            goto LABEL_284;
          }
        }
        goto LABEL_177;
      case 0xCuLL:
        if (*(void *)v146[0] == 0x536D6F646E61523CLL && *((_DWORD *)v146[0] + 2) == 1046766949)
        {
LABEL_176:
          uint64_t v20 = &v147;
LABEL_177:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v20, v8, v9);
          goto LABEL_181;
        }
        if (*(void *)v146[0] != 0x69536261636F563CLL || *((_DWORD *)v146[0] + 2) != 1047750010) {
          goto LABEL_187;
        }
LABEL_157:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v130, v46);
        goto LABEL_179;
      case 0xDuLL:
        if (*(void *)v146[0] != 0x74536D617261503CLL || *(void *)((char *)v146[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_284;
        }
LABEL_163:
        uint64_t v7 = (float *)&v150;
LABEL_164:
        kaldi::ReadBasicType<float>(a2, 0, v7, v8, v9);
        goto LABEL_181;
      case 0xFuLL:
        BOOL v32 = *(void *)v146[0] == 0x61526E7261654C3CLL && *(void *)((char *)v146[0] + 7) == 0x3E66656F43657461;
        uint64_t v7 = (float *)(a1 + 456);
        if (!v32) {
          goto LABEL_118;
        }
        goto LABEL_164;
      case 0x11uLL:
        if (*(void *)v146[0] == 0x69446465626D453CLL
          && *((void *)v146[0] + 1) == 0x736E6F69736E656DLL
          && *((unsigned char *)v146[0] + 16) == 62)
        {
LABEL_59:
          std::string __p = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v131, v24);
          goto LABEL_179;
        }
        if (v146[1] == (void *)15)
        {
LABEL_118:
          if (*(void *)v146[0] == 0x656E67697373413CLL && *(void *)((char *)v146[0] + 7) == 0x3E656C6261546465)
          {
LABEL_178:
            std::string __p = 0;
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v129, v50);
LABEL_179:
            if (SHIBYTE(v143) < 0) {
              operator delete(__p);
            }
            goto LABEL_181;
          }
LABEL_122:
          unint64_t v11 = v146[1];
        }
LABEL_123:
        if (v11 == (void *)20)
        {
          if (*(void *)v146[0] == 0x6C616974696E493CLL
            && *((void *)v146[0] + 1) == 0x6E6F436F54657A69
            && *((_DWORD *)v146[0] + 4) == 1047814499)
          {
LABEL_175:
            char v128 = 1;
            goto LABEL_181;
          }
          unint64_t v11 = v146[1];
        }
        if (v11 != (void *)14) {
          goto LABEL_186;
        }
        if (*(void *)v146[0] != 0x6E6172546573553CLL || *(void *)((char *)v146[0] + 6) != 0x3E6D726F66736E61)
        {
LABEL_185:
          unint64_t v11 = v146[1];
LABEL_186:
          if (v11 == (void *)12)
          {
LABEL_187:
            uint64_t v51 = (void **)v146[0];
            goto LABEL_188;
          }
LABEL_284:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 271);
          uint64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v146[2]) >= 0) {
            unint64_t v123 = v146;
          }
          else {
            unint64_t v123 = (void **)v146[0];
          }
          if (SHIBYTE(v146[2]) >= 0) {
            uint64_t v124 = HIBYTE(v146[2]);
          }
          else {
            uint64_t v124 = (uint64_t)v146[1];
          }
          long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
          long long v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)", a typo in config? ", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_138:
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460), v8, v9);
LABEL_181:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0x12uLL:
        if (*(void *)v146[0] != 0x6E6569646172473CLL
          || *((void *)v146[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v146[0] + 8) != 15973)
        {
          goto LABEL_284;
        }
LABEL_147:
        BOOL v43 = &v148;
        goto LABEL_174;
      case 0x13uLL:
        if (*(void *)v146[0] != 0x61725474696E493CLL
          || *((void *)v146[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v146[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_284;
        }
LABEL_173:
        BOOL v43 = &v149;
LABEL_174:
        kaldi::ReadToken(a2, 0, (uint64_t)v43, v8, v9);
        goto LABEL_181;
      default:
        goto LABEL_123;
    }
  }
  switch(HIBYTE(v146[2]))
  {
    case 9:
      BOOL v10 = v146[0] == (void *)0x6461724778614D3CLL && LOBYTE(v146[1]) == 62;
      goto LABEL_12;
    case 0xA:
      if (v146[0] != (void *)0x6D65744978614D3CLL || LOWORD(v146[1]) != 15987) {
        goto LABEL_284;
      }
      goto LABEL_109;
    case 0xB:
      BOOL v19 = v146[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E7370756F72476DLL;
      uint64_t v20 = (int *)(a1 + 96);
      if (v19) {
        goto LABEL_177;
      }
      BOOL v21 = v146[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E73656C6261546DLL;
      goto LABEL_96;
    case 0xC:
      if (v146[0] == (void *)0x536D6F646E61523CLL && LODWORD(v146[1]) == 1046766949) {
        goto LABEL_176;
      }
      if (v146[0] != (void *)0x69536261636F563CLL || LODWORD(v146[1]) != 1047750010) {
        goto LABEL_184;
      }
      goto LABEL_157;
    case 0xD:
      if (v146[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v146 + 5) != (void *)0x3E7665646474536DLL) {
        goto LABEL_284;
      }
      goto LABEL_163;
    case 0xE:
      goto LABEL_84;
    case 0xF:
      BOOL v28 = v146[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v146 + 7) == (void *)0x3E66656F43657461;
      uint64_t v7 = (float *)(a1 + 456);
      if (v28) {
        goto LABEL_164;
      }
      if (v146[0] == (void *)0x656E67697373413CLL && *(void **)((char *)v146 + 7) == (void *)0x3E656C6261546465) {
        goto LABEL_178;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_122;
      }
LABEL_83:
      if (HIBYTE(v146[2]) != 14) {
        goto LABEL_183;
      }
LABEL_84:
      if (v146[0] == (void *)0x6E6172546573553CLL && *(void **)((char *)v146 + 6) == (void *)0x3E6D726F66736E61) {
        goto LABEL_138;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_185;
      }
LABEL_183:
      if (HIBYTE(v146[2]) != 12) {
        goto LABEL_284;
      }
LABEL_184:
      uint64_t v51 = v146;
      break;
    case 0x11:
      if (v146[0] != (void *)0x69446465626D453CLL || v146[1] != (void *)0x736E6F69736E656DLL || LOBYTE(v146[2]) != 62) {
        goto LABEL_284;
      }
      goto LABEL_59;
    case 0x12:
      if (v146[0] != (void *)0x6E6569646172473CLL
        || v146[1] != (void *)0x7079546D726F4E74
        || LOWORD(v146[2]) != 15973)
      {
        goto LABEL_284;
      }
      goto LABEL_147;
    case 0x13:
      if (v146[0] != (void *)0x61725474696E493CLL
        || v146[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v146[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        goto LABEL_284;
      }
      goto LABEL_173;
    case 0x14:
      if (v146[0] != (void *)0x6C616974696E493CLL
        || v146[1] != (void *)0x6E6F436F54657A69
        || LODWORD(v146[2]) != 1047814499)
      {
        goto LABEL_83;
      }
      goto LABEL_175;
    default:
      goto LABEL_284;
  }
LABEL_188:
  uint64_t v52 = *v51;
  uint64_t v53 = *((unsigned int *)v51 + 2);
  if (v52 != (void *)0x6E6F706D6F432F3CLL || v53 != 1047817829) {
    goto LABEL_284;
  }
LABEL_193:
  uint64_t v55 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v6, (uint64_t)v7, v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    if (*v132 >= 1)
    {
      int v56 = 0;
      do
      {
        long long v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        LODWORD(v138) = 0;
        LODWORD(v151[0]) = 0;
        kaldi::ExpectToken(a2, 0, (kaldi *)"<FeatureTransform>");
        kaldi::ReadToken(a2, 0, (uint64_t)&v134, v57, v58);
        uint64_t v59 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v134);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v138, v60, v61);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v151, v62, v63);
        kaldi::nnet1::Component::NewComponentOfType(v59);
        if (!v64
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 293);
          unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
          if (v136 >= 0) {
            unint64_t v120 = &v134;
          }
          else {
            unint64_t v120 = v134;
          }
          if (v136 >= 0) {
            uint64_t v121 = HIBYTE(v136);
          }
          else {
            uint64_t v121 = v135;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        long long v66 = v65;
        (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(void *)v65 + 96))(v65, a2, a3);
        long long v68 = *(void **)(a1 + 264);
        unint64_t v67 = *(void *)(a1 + 272);
        if ((unint64_t)v68 >= v67)
        {
          uint64_t v70 = ((char *)v68 - *v55) >> 3;
          if ((unint64_t)(v70 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v67 - (void)*v55;
          uint64_t v72 = v71 >> 2;
          if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
            uint64_t v72 = v70 + 1;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73) {
            long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v73);
          }
          else {
            long long v74 = 0;
          }
          long long v75 = &v74[8 * v70];
          *(void *)long long v75 = v66;
          uint64_t v69 = v75 + 8;
          long long v77 = *(char **)(a1 + 256);
          uint64_t v76 = *(char **)(a1 + 264);
          if (v76 != v77)
          {
            do
            {
              uint64_t v78 = *((void *)v76 - 1);
              v76 -= 8;
              *((void *)v75 - 1) = v78;
              v75 -= 8;
            }
            while (v76 != v77);
            uint64_t v76 = *v55;
          }
          *(void *)(a1 + 256) = v75;
          *(void *)(a1 + 264) = v69;
          *(void *)(a1 + 272) = &v74[8 * v73];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *long long v68 = v66;
          uint64_t v69 = v68 + 1;
        }
        *(void *)(a1 + 264) = v69;
        if (SHIBYTE(v136) < 0) {
          operator delete(v134);
        }
        ++v56;
      }
      while (v56 < *v132);
    }
    if (v128)
    {
      uint64_t v79 = *(uint64_t **)(a1 + 256);
      uint64_t v80 = *(uint64_t **)(a1 + 264);
      if (v79 == v80)
      {
        if (!*(_DWORD *)(*v79 + 12))
        {
LABEL_232:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 332);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          goto LABEL_234;
        }
      }
      else
      {
        int v81 = 0;
        long long v82 = *(uint64_t **)(a1 + 256);
        do
        {
          uint64_t v83 = *v82++;
          v81 += *(_DWORD *)(v83 + 8);
        }
        while (v82 != v80);
        if (v81 == *(_DWORD *)(*v79 + 12))
        {
          uint64_t v84 = 0;
          do
          {
            uint64_t v85 = (const void *)*v79;
            if (!*v79)
            {
LABEL_291:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 326);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            if (v86)
            {
              uint64_t v87 = v86;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v86[3], v86[2], 0, 0);
              uint64_t v88 = v87[3];
              long long v138 = 0;
              v139 = 0;
              unint64_t v140 = 0;
              kaldi::Vector<float>::Resize((void **)&v138, v88, 0, v89, v90);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, v87[2], 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v134);
              kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&__p);
              kaldi::nnet1::AffineTransform::SetBias((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&v138);
              unsigned int v91 = v87[2];
              kaldi::Vector<float>::Destroy((uint64_t)&v138);
            }
            else
            {
              if (!v92) {
                goto LABEL_291;
              }
              uint64_t v93 = (uint64_t)v92;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v92[3], v92[2], 0, 0);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, *(unsigned int *)(v93 + 8), 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              kaldi::CuMatrixBase<float>::~CuMatrixBase(&v134);
              kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v93, (uint64_t)&__p);
              unsigned int v91 = *(_DWORD *)(v93 + 8);
            }
            kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
            uint64_t v84 = v91 + v84;
            ++v79;
          }
          while (v79 != v80);
          if (v84 != v81) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x14B, "shift == total_dim", v94);
          }
          goto LABEL_232;
        }
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 304);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
      int v127 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" actual dim is ", 15);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
LABEL_234:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v149);
  *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v148);
  if (!inited)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v139 = 0;
  unint64_t v140 = 0;
  long long v138 = &v139;
  if (*v132 < 1)
  {
    unint64_t v102 = 0;
  }
  else
  {
    uint64_t v97 = 0;
    do
    {
      LODWORD(v134) = 0;
      int v98 = v129->__begin_[v97];
      LODWORD(v134) = v98;
      if (v98 < 0 || v98 >= *v133) {
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x159, "table_idx >= 0 && table_idx < num_tables_", v96);
      }
      int v99 = v130->__begin_[v97];
      int v100 = v131->__begin_[v97];
      std::string __p = &v134;
      unint64_t v101 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, (int *)&v134, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v101 + 8) = v99;
      *((_DWORD *)v101 + 9) = v100;
      ++v97;
    }
    while (v97 < *v132);
    unint64_t v102 = v140;
  }
  if (v102 != *v133) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x15C, "table_dims.size() == num_tables_", v96);
  }
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), v102);
  if (v147 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v147);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
  int v137 = 0;
  if (*v133 >= 1)
  {
    v151[0] = &v137;
    int v103 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, &v137, (uint64_t)&std::piecewise_construct, v151);
    uint64_t v104 = *((unsigned int *)v103 + 8);
    uint64_t v105 = *((unsigned int *)v103 + 9);
    kaldi::Matrix<float>::Matrix((uint64_t)&v134, v104, v105, 0, 0);
    if ((int)v104 < 1) {
LABEL_265:
    }
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>();
    unsigned int v109 = 0;
    while ((int)v105 < 1)
    {
LABEL_264:
      if (++v109 == v104) {
        goto LABEL_265;
      }
    }
    unint64_t v110 = 0;
    while (inited != 2)
    {
      if (inited == 1)
      {
        float v111 = *(float *)&v150;
        float v112 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v106, v107, v108);
        if (HIDWORD(v135) <= v109 || v110 >= v135) {
          goto LABEL_275;
        }
        uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
        float v115 = (v112 + -0.5) * (float)(v111 + v111);
LABEL_262:
        *(float *)&v114[4 * v110] = v115;
      }
      if (v105 == ++v110) {
        goto LABEL_264;
      }
    }
    float v116 = *(float *)&v150;
    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0, v106, v107, v108);
    if (HIDWORD(v135) <= v109 || v110 >= v135) {
LABEL_275:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v108);
    uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
    float v115 = v116 * v117;
    goto LABEL_262;
  }
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  long long v134 = &v143;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v138, v139);
  if (SHIBYTE(v146[2]) < 0) {
    operator delete(v146[0]);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
}

void sub_20CE70D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  a17 = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&a23, a24);
  if (*(char *)(v32 - 177) < 0) {
    operator delete(*(void **)(v32 - 200));
  }
  if (*(char *)(v32 - 145) < 0) {
    operator delete(*(void **)(v32 - 168));
  }
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_20CE70D9C()
{
}

void sub_20CE70DA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CE70E04);
}

void sub_20CE70DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x20CE70DD4);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>()
{
}

void sub_20CE70EF4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(uint64_t result)
{
  if (!*(unsigned char *)(result + 544))
  {
    uint64_t v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 503);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 506);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 509);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        BOOL v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        uint64_t v3 = *(void *)(result + 104);
        uint64_t v4 = (*(void *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          uint64_t v5 = *(void *)(result + 128);
          if (v4 == (*(void *)(result + 136) - v5) >> 2)
          {
            uint64_t v6 = *(void *)(result + 152);
            if (v4 == (*(void *)(result + 160) - v6) >> 2)
            {
              uint64_t v7 = *(void *)(result + 176);
              if (v4 == (*(void *)(result + 184) - v7) >> 2)
              {
                uint64_t v8 = *(void *)(result + 208);
                if (v2 == (*(void *)(result + 216) - v8) >> 3)
                {
                  if (*(unsigned char *)(result + 460)
                    && v4 != (uint64_t)(*(void *)(result + 264) - *(void *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 528);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    long long v40 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    uint64_t v9 = 0;
                    int v10 = 0;
                    int v11 = 0;
                    do
                    {
                      uint64_t v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 537);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v23 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-th group has assigned table index ", 35);
                        uint64_t v24 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 542);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v20 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 545);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        BOOL v21 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 548);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        BOOL v19 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      uint64_t v16 = **(void **)(v8 + 8 * v12);
                      if (!v16 || *(_DWORD *)(v16 + 8) != v13)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 553);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        unint64_t v18 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        uint64_t v29 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_DWORD *)(v16 + 12) != v15)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 557);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v22 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        uint64_t v30 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(unsigned char *)(result + 460))
                      {
                        uint64_t v17 = *(void *)(*(void *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 561);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          uint64_t v25 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          uint64_t v26 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 565);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          uint64_t v27 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          BOOL v28 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(unsigned char *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(unsigned char *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 575);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      uint64_t v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      long long v42 = (void *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 571);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      long long v39 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  char v38 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 521);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                long long v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                long long v37 = (void *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 518);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              BOOL v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 515);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            uint64_t v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 512);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          uint64_t v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_20CE718C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v82 = 0uLL;
  uint64_t v83 = 0;
  uint64_t v8 = (char *)(a1 + 460);
  *(unsigned char *)(a1 + 460) = 1;
  uint64_t v9 = (float *)(a1 + 452);
  long long v75 = (std::vector<int> *)(a1 + 176);
  uint64_t v76 = (float *)(a1 + 456);
  long long v74 = (std::vector<int> *)(a1 + 152);
  long long v77 = (std::vector<int> *)(a1 + 104);
  uint64_t v78 = (std::vector<int> *)(a1 + 128);
  int v10 = (int *)(a1 + 200);
  int v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v82, v12, v13);
    if (SHIBYTE(v83) < 0)
    {
      uint64_t v20 = *((void *)&v82 + 1);
      if (*((void *)&v82 + 1) != 11) {
        goto LABEL_25;
      }
      BOOL v21 = *(void *)v82 == 0x756F72476D754E3CLL && *(void *)(v82 + 3) == 0x3E7370756F72476DLL;
      uint64_t v18 = (uint64_t)v11;
      if (v21
        || (*(void *)v82 == 0x6C6261546D754E3CLL ? (BOOL v22 = *(void *)(v82 + 3) == 0x3E73656C6261546DLL) : (BOOL v22 = 0),
            uint64_t v18 = (uint64_t)v10,
            v22))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v18, v14, v15);
      }
      else
      {
        uint64_t v20 = *((void *)&v82 + 1);
LABEL_25:
        if (v20 == 12)
        {
          if (*(void *)v82 == 0x69536261636F563CLL && *(_DWORD *)(v82 + 8) == 1047750010)
          {
LABEL_94:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v77, v37);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
        }
        if (v20 != 10) {
          goto LABEL_37;
        }
        if (*(void *)v82 == 0x6D65744978614D3CLL && *(_WORD *)(v82 + 8) == 15987)
        {
LABEL_93:
          std::string __p = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v78, v36);
LABEL_137:
          if (SHIBYTE(v81) < 0) {
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_37:
          if (v20 == 17)
          {
            if (*(void *)v82 == 0x69446465626D453CLL
              && *(void *)(v82 + 8) == 0x736E6F69736E656DLL
              && *(unsigned char *)(v82 + 16) == 62)
            {
LABEL_135:
              std::string __p = 0;
              uint64_t v80 = 0;
              uint64_t v81 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v74, v48);
              goto LABEL_137;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 15) {
            goto LABEL_52;
          }
          if (*(void *)v82 == 0x656E67697373413CLL && *(void *)(v82 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v75, v47);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_52:
          if (v20 != 18) {
            goto LABEL_61;
          }
          if (*(void *)v82 == 0x6E6569646172473CLL
            && *(void *)(v82 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v82 + 16) == 15973)
          {
LABEL_136:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_61:
          if (v20 == 9)
          {
            BOOL v30 = *(void *)v82 == 0x6461724778614D3CLL && *(unsigned char *)(v82 + 8) == 62;
            BOOL v31 = v9;
            if (v30) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 == 15)
          {
            BOOL v32 = *(void *)v82 == 0x61526E7261654C3CLL && *(void *)(v82 + 7) == 0x3E66656F43657461;
            BOOL v31 = v76;
            if (v32) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 14) {
            goto LABEL_167;
          }
          uint64_t v16 = (uint64_t *)v82;
LABEL_128:
          uint64_t v44 = *v16;
          uint64_t v45 = *(uint64_t *)((char *)v16 + 6);
          if (v44 != 0x6E6172546573553CLL || v45 != 0x3E6D726F66736E61) {
            goto LABEL_167;
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8, v14, v15);
        }
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)&v82;
      switch(HIBYTE(v83))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          BOOL v17 = (void)v82 == 0x756F72476D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E7370756F72476DLL;
          uint64_t v18 = (uint64_t)v11;
          if (!v17)
          {
            BOOL v19 = (void)v82 == 0x6C6261546D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E73656C6261546DLL;
            uint64_t v18 = (uint64_t)v10;
            if (!v19) {
              goto LABEL_80;
            }
          }
          goto LABEL_75;
        case 0xC:
          if ((void)v82 == 0x69536261636F563CLL && DWORD2(v82) == 1047750010) {
            goto LABEL_94;
          }
LABEL_80:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) != 10) {
            goto LABEL_167;
          }
LABEL_82:
          if ((void)v82 == 0x6D65744978614D3CLL && WORD4(v82) == 15987) {
            goto LABEL_93;
          }
LABEL_86:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          goto LABEL_167;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((void)v82 == 0x69446465626D453CLL
            && *((void *)&v82 + 1) == 0x736E6F69736E656DLL
            && v83 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          if (HIBYTE(v83) != 15) {
            goto LABEL_167;
          }
LABEL_115:
          if ((void)v82 == 0x656E67697373413CLL && *(void *)((char *)&v82 + 7) == 0x3E656C6261546465) {
            goto LABEL_134;
          }
          switch(HIBYTE(v83))
          {
            case 9u:
LABEL_87:
              BOOL v35 = (void)v82 == 0x6461724778614D3CLL && BYTE8(v82) == 62;
              BOOL v31 = v9;
              if (!v35) {
                goto LABEL_167;
              }
              break;
            case 0xEu:
LABEL_127:
              uint64_t v16 = (uint64_t *)&v82;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              BOOL v43 = (void)v82 == 0x61526E7261654C3CLL && *(void *)((char *)&v82 + 7) == 0x3E66656F43657461;
              BOOL v31 = v76;
              if (!v43)
              {
LABEL_167:
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 408);
                uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v83 >= 0) {
                  uint64_t v71 = &v82;
                }
                else {
                  uint64_t v71 = (long long *)v82;
                }
                if (v83 >= 0) {
                  uint64_t v72 = HIBYTE(v83);
                }
                else {
                  uint64_t v72 = *((void *)&v82 + 1);
                }
                unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_167;
          }
          return;
        case 0x12:
          if ((void)v82 == 0x6E6569646172473CLL
            && *((void *)&v82 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v83 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v83) == 15) {
            goto LABEL_122;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          goto LABEL_86;
        default:
          goto LABEL_167;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v31, v14, v15);
    }
  }
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1) {
    operator new();
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  uint64_t v49 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v50, v51, v52, v53);
  if (*v8 && *v11 >= 1)
  {
    int v54 = 0;
    do
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureTransform>");
      uint64_t v55 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v55
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 425);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      uint64_t v57 = v56;
      kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
      uint64_t v59 = *(void **)(a1 + 264);
      unint64_t v58 = *(void *)(a1 + 272);
      if ((unint64_t)v59 >= v58)
      {
        uint64_t v61 = ((char *)v59 - *v49) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v62 = v58 - (void)*v49;
        uint64_t v63 = v62 >> 2;
        if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
          uint64_t v63 = v61 + 1;
        }
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          long long v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v64);
        }
        else {
          long long v65 = 0;
        }
        long long v66 = &v65[8 * v61];
        *(void *)long long v66 = v57;
        uint64_t v60 = v66 + 8;
        long long v68 = *(char **)(a1 + 256);
        unint64_t v67 = *(char **)(a1 + 264);
        if (v67 != v68)
        {
          do
          {
            uint64_t v69 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v66 - 1) = v69;
            v66 -= 8;
          }
          while (v67 != v68);
          unint64_t v67 = *v49;
        }
        *(void *)(a1 + 256) = v66;
        *(void *)(a1 + 264) = v60;
        *(void *)(a1 + 272) = &v65[8 * v64];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *uint64_t v59 = v57;
        uint64_t v60 = v59 + 1;
      }
      *(void *)(a1 + 264) = v60;
      ++v54;
    }
    while (v54 < *(_DWORD *)(a1 + 96));
  }
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
}

void sub_20CE7237C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumGroups>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumTables>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSizes>", v10, v11);
  kaldi::JoinVectorToString<int>((void *)(a1 + 104), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxItems>", v14, v15);
  kaldi::JoinVectorToString<int>((void *)(a1 + 128), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v16, v17);
  kaldi::WriteToken(a2, a3, (kaldi *)"<EmbedDimensions>", v18, v19);
  kaldi::JoinVectorToString<int>((void *)(a1 + 152), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v20, v21);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AssignedTable>", v22, v23);
  kaldi::JoinVectorToString<int>((void *)(a1 + 176), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v24, v25);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v28, v29);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v32, v33);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UseTransform>", v34, v35);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
}

void sub_20CE725E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)a1 + 168))(a1, a2, a3);
  uint64_t v10 = *(uint64_t ***)(a1 + 208);
  int v11 = *(uint64_t ***)(a1 + 216);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    kaldi::CompressedMatrix::Write(v12, a2, (int)a3, a4, v9);
  }
  double result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v16 = *(uint64_t **)(a1 + 256);
    for (i = *(uint64_t **)(a1 + 264); v16 != i; double result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v19, v20))
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureTransform>", v14, v15);
      uint64_t v18 = *v16++;
      kaldi::nnet1::Component::Write(v18, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::NumParams(void *a1)
{
  uint64_t v1 = (uint64_t **)a1[26];
  uint64_t v2 = (uint64_t **)a1[27];
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = **v1;
      if (v4) {
        LODWORD(v4) = *(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8);
      }
      uint64_t v3 = (v4 + v3);
      ++v1;
    }
    while (v1 != v2);
  }
  uint64_t v5 = (uint64_t *)a1[32];
  uint64_t v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  int v11 = (uint64_t **)a1[26];
  uint64_t v12 = (uint64_t **)a1[27];
  if (v11 == v12)
  {
    int v16 = 0;
  }
  else
  {
    int v13 = 0;
    do
    {
      uint64_t v14 = *v11;
      uint64_t v15 = **v11;
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 8);
      }
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      int v16 = v15 + v13;
      if ((v15 + v13) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      }
      uint64_t v25 = *(void *)a2 + 4 * v13;
      LODWORD(v26) = v15;
      v10.n128_f64[0] = kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v25, v14, v7, v8, v9);
      ++v11;
      int v13 = v16;
    }
    while (v11 != v12);
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v18 = (void *)a1[32];
  BOOL v17 = (void *)a1[33];
  while (v18 != v17)
  {
    (*(void (**)(void, uint64_t *, __n128))(*(void *)*v18 + 184))(*v18, &v25, v10);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    if ((v26 + v16) > *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
    }
    uint64_t v22 = *(void *)a2 + 4 * v16;
    LODWORD(v23) = v26;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, (uint64_t)&v25, v19, v20, v21);
    v16 += v26;
    ++v18;
  }
  if (v16 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x27E, "shift == wei_copy->Dim()", v9);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v25);
}

void sub_20CE729B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetParams(void *a1, uint64_t a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check((uint64_t)a1);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v4 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x284, "wei_src.Dim() == NumParams()", v6);
  }
  uint64_t v7 = (uint64_t **)a1[26];
  uint64_t v8 = (uint64_t **)a1[27];
  if (v7 != v8)
  {
    int v9 = 0;
    while (1)
    {
      __n128 v10 = *v7;
      uint64_t v11 = **v7;
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v11 + 12) * *(_DWORD *)(v11 + 8);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v12 = v11 + v9;
      if ((v11 + v9) > *(_DWORD *)(a2 + 8)) {
        break;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v9);
      LODWORD(v19) = v11;
      uint64_t result = kaldi::CompressedMatrix::CopyRowsFromVec<float>(v10, &v18);
      ++v7;
      int v9 = v12;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
LABEL_17:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  int v12 = 0;
LABEL_10:
  uint64_t v14 = (uint64_t *)a1[32];
  int v13 = (uint64_t *)a1[33];
  if (v14 != v13)
  {
    while (1)
    {
      int v15 = (*(uint64_t (**)(void))(*(void *)*v14 + 176))();
      uint64_t v16 = *v14;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v17 = v15 + v12;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8)) {
        goto LABEL_17;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v12);
      LODWORD(v19) = v15;
      uint64_t result = (*(uint64_t (**)(uint64_t, char **))(*(void *)v16 + 192))(v16, &v18);
      ++v14;
      int v12 = v17;
      if (v14 == v13) {
        goto LABEL_15;
      }
    }
  }
  int v17 = v12;
LABEL_15:
  if (v17 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x290, "shift == wei_src.Dim()", v6);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SumParams(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (kaldi::CompressedMatrix **)a1[26];
  uint64_t v7 = (kaldi::CompressedMatrix **)a1[27];
  float v8 = 0.0;
  while (v6 != v7)
  {
    int v9 = *v6++;
    float v8 = v8 + kaldi::CompressedMatrix::Sum(v9, a2, a3, a4, a5);
  }
  uint64_t v11 = (uint64_t *)a1[32];
  __n128 v10 = (uint64_t *)a1[33];
  while (v11 != v10)
  {
    uint64_t v12 = *v11++;
    float v8 = v8 + (*(float (**)(uint64_t))(*(void *)v12 + 208))(v12);
  }
  return v8;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PerturbParams()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "PerturbParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 661);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v19, 0);
  uint64_t v2 = (kaldi::nnet1 **)a1[26];
  for (uint64_t i = (kaldi::nnet1 **)a1[27]; v2 != i; ++v2)
  {
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics((uint64_t *)&__p, *v2, v5);
    if ((v18 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v7 = v18;
    }
    else {
      uint64_t v7 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v7);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = a1[32];
  for (uint64_t j = a1[33]; v8 != j; v8 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    __n128 v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", output-dim ", 13);
    uint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(void **)v8 + 64))(&__p);
    if ((v18 & 0x80u) == 0) {
      int v13 = &__p;
    }
    else {
      int v13 = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v14 = v18;
    }
    else {
      uint64_t v14 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v19[1] = MEMORY[0x263F8C318] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v21);
}

void sub_20CE72F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::MomentStatistics(kaldi::nnet1 *this, const kaldi::CompressedMatrix *a2)
{
  kaldi::Matrix<float>::Matrix(v12, this);
  int v2 = kaldi::MatrixBase<float>::NumRows((uint64_t)v12);
  int v3 = kaldi::MatrixBase<float>::NumCols((uint64_t)v12);
  memset(v11, 0, sizeof(v11));
  kaldi::Vector<float>::Resize((void **)v11, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat(v11, (uint64_t)v12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v11, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v11);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v12);
}

void sub_20CE7303C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InfoGradient(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  uint64_t v2 = *(void *)(a1 + 256);
  for (uint64_t i = *(void *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x210559500](&v12);
}

void sub_20CE73234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  int v3 = *(uint64_t **)(result + 256);
  for (uint64_t i = *(uint64_t **)(result + 264);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2))
  {
    uint64_t v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AC, "in.NumCols() == input_dim_", v8);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AE, "batch_idx == 0", v8);
  }
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  uint64_t v34 = a3;
  if (*(unsigned char *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    LODWORD(v12) = *(_DWORD *)(a1 + 96);
    if ((int)v12 < 1)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(a1 + 280) + v13;
        *(void *)(v16 + 32) = v9;
        kaldi::CuMatrix<float>::Resize(v16, v10, *(unsigned int *)(*(void *)(a1 + 152) + 4 * v14), 0, 0);
        uint64_t v17 = *(void *)(a1 + 280) + v13;
        unsigned __int8 v18 = *(uint64_t **)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v14));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a2, 0, *(_DWORD *)(a2 + 20), v15, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v14));
        kaldi::CuMatrixBase<float>::SummarizeVec(v17, v18, (uint64_t)&v38, v19, v20);
        uint64_t v38 = off_26C2096F8;
        long long v39 = 0u;
        long long v40 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
        int v15 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v14++) + v15);
        uint64_t v12 = *(int *)(a1 + 96);
        v13 += 48;
      }
      while (v14 < v12);
    }
    if (v15 != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2BC, "shift == input_dim_", v11);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), (int)v12);
    if (*(int *)(a1 + 96) >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        uint64_t v31 = *(void *)(a1 + 304) + v29;
        *(void *)(v31 + 32) = v9;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v30), *(void *)(a1 + 280) + v29, v31, 0);
        kaldi::CuMatrixBase<float>::AddMat(v34, *(void *)(a1 + 304) + v29, 111, v32, v33, 1.0, 1.0);
        ++v30;
        v29 += 48;
      }
      while (v30 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v21 = a3;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a1 + 152);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v21, 0, *(_DWORD *)(v21 + 20), v23, *(_DWORD *)(v25 + 4 * v22));
      uint64_t v26 = *(uint64_t **)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v22));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), v24, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v22));
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v38, v26, (uint64_t)&v35, v27, v28);
      BOOL v35 = off_26C2096F8;
      long long v36 = 0u;
      long long v37 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
      uint64_t v38 = off_26C2096F8;
      long long v39 = 0u;
      long long v40 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
      uint64_t v25 = *(void *)(a1 + 152);
      uint64_t v23 = (const char *)(*(_DWORD *)(v25 + 4 * v22) + v23);
      uint64_t v24 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v22++) + v24);
      uint64_t v21 = a3;
    }
    while (v22 < *(int *)(a1 + 96));
  }
}

void sub_20CE73650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)())
{
  a11 = off_26C2096F8;
  *uint64_t v17 = 0u;
  v17[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a11);
  a16 = off_26C2096F8;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  uint64_t v6 = *(uint64_t **)(a1 + 256);
  uint64_t v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(void *)v8 + 240))(v8, a2, a3);
  }
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9, "SetGradientNormalization", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 735);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_20CE737E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetNormalizedLearningRate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1) {
    return NAN;
  }
  else {
    return *(float *)(a1 + 56) / (float)v1;
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::AccumGradients()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 762);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 846);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v37 = 0u;
  long long v36 = 0u;
  BOOL v35 = off_26C211198;
  char v38 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v11, a2, (uint64_t)&v35, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 232))(v11, a2, a3, 0, 0);
  int v15 = *(uint64_t **)(v11 + 232);
  uint64_t v16 = *(uint64_t **)(v11 + 240);
  if (v15 == v16)
  {
    int v19 = 0;
  }
  else
  {
    int v17 = 0;
    do
    {
      int v18 = *(_DWORD *)(*v15 + 16) * *(_DWORD *)(*v15 + 20);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v19 = v18 + v17;
      if ((v18 + v17) > *(_DWORD *)(a4 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
      }
      uint64_t v32 = *(void *)a4 + 4 * v17;
      LODWORD(v33) = v18;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, *v15++, v12, v13, v14);
      int v17 = v19;
    }
    while (v15 != v16);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v21, a2, (uint64_t)&v35, 0);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v21)
      {
LABEL_15:
        kaldi::Vector<float>::Destroy((uint64_t)&v32);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(*(void *)(v21 + 256) + 8 * v23);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v24 + 224))(v24, *(void *)(v21 + 280) + v22, a3, &v32);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        if ((v33 + v19) > *(_DWORD *)(a4 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
        }
        uint64_t v29 = *(void *)a4 + 4 * v19;
        LODWORD(v30) = v33;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (uint64_t)&v32, v25, v26, v27);
        v19 += v33;
        ++v23;
        v22 += 48;
      }
      while (v23 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    goto LABEL_15;
  }
LABEL_16:
  if (v19 != *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x392, "shift == gradient_out->Dim()", v20);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
}

void sub_20CE73C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 920);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  *a3 = 0;
  uint64_t v10 = *(char **)(a1 + 208);
  uint64_t v11 = *(char **)(a1 + 216);
  uint64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    int v13 = 0;
    unint64_t v14 = v12 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    do
    {
      uint64_t v15 = **(void **)v10;
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 8);
      }
      v13 += v15;
      *a3 = v13;
      v10 += 8;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *(void *)(a1 + 232);
  uint64_t v17 = *(void *)(a1 + 240);
  *a2 = 0;
  if (v17 != v16)
  {
    unint64_t v18 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v16 + 8 * v18++), v6, v7, v8, v9);
      uint64_t v16 = *(void *)(a1 + 232);
    }
    while (v18 < (*(void *)(a1 + 240) - v16) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs(void *a1)
{
  unint64_t v1 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v1 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 29, v1);
    if (a1[27] != a1[26]) {
      operator new();
    }
  }
}

void sub_20CE73E94(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 949);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetType()
{
  return 272;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 270;
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PerturbParams(void *a1, float a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  memset(&v25[1], 0, 24);
  v25[0] = off_26C2111C8;
  int v21 = 1729;
  unsigned int v6 = 5489;
  char v22 = 0;
  int v23 = 5489;
  uint64_t v7 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v9 = 1812433253 * (v6 ^ (v6 >> 30));
    unsigned int v6 = v9 + v7;
    *(&v21 + i) = i + v9 - 2;
    ++v7;
  }
  uint64_t v24 = 0;
  uint64_t v10 = (uint64_t *)a1[26];
  for (uint64_t j = (uint64_t *)a1[27]; v10 != j; ++v10)
  {
    kaldi::CuVector<float>::Resize((uint64_t)v25, (*(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20)), 1u, v4, v5);
    kaldi::CuRandom::RandGauss<float>(&v21, (uint64_t)v25, 0.0, 1.0);
    uint64_t v12 = *v10;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, (uint64_t)v25, *(_DWORD *)(*v10 + 20));
    kaldi::CuMatrixBase<float>::AddMat(v12, (uint64_t)&v18, 111, v13, v14, a2, 1.0);
    unint64_t v18 = off_26C2096F8;
    long long v19 = 0u;
    long long v20 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
  }
  uint64_t v16 = a1[32];
  uint64_t v15 = a1[33];
  while (v16 != v15)
  {
    (*(void (**)(float))(**(void **)v16 + 216))(a2);
    v16 += 8;
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v21);
  return kaldi::CuVector<float>::~CuVector(v25);
}

void sub_20CE740E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(va);
  kaldi::CuVector<float>::~CuVector((void *)(v7 - 112));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  int v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 464) = v11;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x306, "input.NumCols() == input_dim_", v10);
  }
  if (*(_DWORD *)(a3 + 20) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x307, "diff.NumRows() == batch_size", v10);
  }
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x308, "diff.NumCols() == output_dim_", v10);
  }
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), *(int *)(a1 + 96));
  if (*(unsigned char *)(a1 + 460) && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 328) + v13;
      *(void *)(v15 + 32) = a4;
      kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v14), *(void *)(a1 + 280) + v13, *(void *)(a1 + 304) + v13, a3, v15, a5);
      uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 232))(v16, *(void *)(a1 + 280) + v13, a3, a4, a5);
      ++v14;
      v13 += 48;
    }
    while (v14 < *(int *)(a1 + 96));
  }
  if (*(int *)(a1 + 80) > 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 787);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "WordMultiVecComponent doesn't support multi-batches yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43);
  }
  memset(v44, 0, sizeof(v44));
  BOOL v43 = off_26C2096F8;
  uint64_t v17 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 240) != v17)
  {
    unint64_t v18 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::SetZero(*(void *)(v17 + 8 * v18++));
      uint64_t v17 = *(void *)(a1 + 232);
    }
    while (v18 < (*(void *)(a1 + 240) - v17) >> 3);
  }
  if (*(int *)(a1 + 96) < 1)
  {
    int v20 = 0;
  }
  else
  {
    uint64_t v37 = a3;
    uint64_t v40 = a4;
    uint64_t v19 = 0;
    unsigned int v38 = 0;
    int v20 = 0;
    uint64_t v39 = a1 + 352;
    long long v36 = (unsigned int *)(a1 + 400);
    float v21 = (float)v11;
    do
    {
      if (*(unsigned char *)(a1 + 460))
      {
        char v22 = (void (***)())(*(void *)(a1 + 328) + 48 * v19);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, v37, 0, *(_DWORD *)(v37 + 20), (const char *)v38, *(_DWORD *)(*(void *)(a1 + 152) + 4 * v19));
        *(void *)&v44[0] = v42[0];
        *(_OWORD *)((char *)v44 + 8) = *(_OWORD *)&v42[1];
        *((void *)&v44[1] + 1) = v42[3];
        uint64_t v41 = off_26C2096F8;
        memset(v42, 0, sizeof(v42));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v41);
        v38 += *(_DWORD *)(*(void *)(a1 + 152) + 4 * v19);
        char v22 = &v43;
      }
      float v23 = *(float *)(a1 + 452);
      if (v23 > 0.0)
      {
        *(void *)(a1 + 384) = v40;
        kaldi::CuMatrix<float>::operator=(v39, (uint64_t)v22);
        int v24 = *(_DWORD *)(a1 + 448);
        if (v24 == 2)
        {
          int v26 = *(unsigned __int8 *)(a1 + 84);
          *(void *)(a1 + 432) = v40;
          kaldi::CuMatrix<float>::Resize((uint64_t)v36, *(unsigned int *)(a1 + 372), *(unsigned int *)(a1 + 368), 1u, 0);
          if (v26) {
            float v30 = v21;
          }
          else {
            float v30 = 1.0;
          }
          char v22 = (void (***)())(a1 + 352);
          kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v39, v36, v23 * v30, v27, v28, v29);
        }
        else
        {
          char v22 = (void (***)())(a1 + 352);
          if (v24 == 1)
          {
            if (*(unsigned char *)(a1 + 84)) {
              float v25 = v21;
            }
            else {
              float v25 = 1.0;
            }
            char v22 = (void (***)())(a1 + 352);
            kaldi::nnet1::UpdatableComponent::ClipGradient(v39, v23 * v25);
          }
        }
      }
      uint64_t v31 = *(int *)(*(void *)(a1 + 176) + 4 * v19);
      *(void *)(*(void *)(*(void *)(a1 + 232) + 8 * v31) + 32) = v40;
      if (*(int *)(*(void *)(a1 + 128) + 4 * v19) >= 1)
      {
        int v32 = 0;
        do
        {
          uint64_t v33 = *(void *)(*(void *)(a1 + 232) + 8 * v31);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v20 + v32), 1);
          kaldi::CuMatrixBase<float>::AddIndexedRows(v33, (uint64_t)&v41, (uint64_t)v22, v34, v35, 1.0);
          uint64_t v41 = off_26C2096F8;
          memset(v42, 0, sizeof(v42));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v41);
          ++v32;
        }
        while (v32 < *(_DWORD *)(*(void *)(a1 + 128) + 4 * v19));
        v20 += v32;
      }
      ++v19;
    }
    while (v19 < *(int *)(a1 + 96));
  }
  if (v20 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x33E, "shift == input_dim_", v12);
  }
  BOOL v43 = off_26C2096F8;
  memset(v44, 0, sizeof(v44));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
}

void sub_20CE7460C()
{
}

void sub_20CE74620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  a22 = a9;
  *a10 = 0u;
  a10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  float v9 = *(float *)(a1 + 72);
  int v10 = *(_DWORD *)(a1 + 76);
  if (v9 > 0.0 && *(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 857);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Using transform with gradient compression is not supported yet");
    goto LABEL_19;
  }
  int v11 = *(uint64_t **)(a1 + 256);
  uint64_t v12 = *(uint64_t **)(a1 + 264);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 256))(v13, a2, a3);
  }
  float v14 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v14 = v14 / (float)*(int *)(a1 + 464);
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + 80) < 2)
    {
      if (*(void *)(a1 + 480) == *(void *)(a1 + 472)) {
        kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
      }
      kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 472), v10, v9, v6, v7, v8);
      goto LABEL_13;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 868);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "the multi batch gradient quantization does not work yet");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
LABEL_13:
  uint64_t v15 = *(void *)(a1 + 208);
  if (*(void *)(a1 + 216) != v15)
  {
    unint64_t v16 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat(*(void *)(v15 + 8 * v16), *(void *)(*(void *)(a1 + 232) + 8 * v16), 111, v7, v8, *(float *)(a1 + 456) * (float)-v14, 1.0);
      ++v16;
      uint64_t v15 = *(void *)(a1 + 208);
    }
    while (v16 < (*(void *)(a1 + 216) - v15) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 957);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Not implemented yet when transforms are used");
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 960);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Weights are already vectorized");
LABEL_14:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 963);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Performing vectorization of WordMultiVecComponent", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::CuSubVector<float>::CuSubVector(v10, a3, 0, v7, v8);
  kaldi::CuVectorBase<float>::Set((uint64_t)v10, *(float *)(a1 + 456));
  int v9 = *(_DWORD *)(a3 + 16) - v7;
  *(void *)(a3 + 8) += 4 * v7;
  *(_DWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (a4[1] - *a4 != 32)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 983);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "veccorrs->size() == 1");
    goto LABEL_14;
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  *(unsigned char *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 994);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Done  vectorization of WordMultiVecComponent", 44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
}

void sub_20CE74BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<kaldi::CuMatrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, v13, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  unint64_t v16 = *(void **)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = v16 - 6;
    unint64_t v18 = v16 - 6;
    uint64_t v19 = v16 - 6;
    do
    {
      uint64_t v20 = *v19;
      v19 -= 6;
      uint64_t result = (*(uint64_t (**)(void *))(v20 + 16))(v18);
      v17 -= 6;
      BOOL v21 = v18 == v15;
      unint64_t v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_20CE74D78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20CE74D80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 48;
      uint64_t v6 = v3 - 48;
      int v7 = v3 - 48;
      do
      {
        uint64_t v8 = *(void *)v7;
        v7 -= 48;
        (*(void (**)(char *))(v8 + 16))(v6);
        v5 -= 48;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::CuMatrix<float>::operator=(a3, v4);
      v4 += 48;
      a3 += 48;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &off_26C20B6C0;
  *(_OWORD *)(a1 + 56) = xmmword_20D6073D0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26C20D0F0;
  *(void *)(a1 + 88) = off_26C20D220;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  uint64_t v25 = a1 + 304;
  uint64_t v26 = a1 + 280;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v24 = a1 + 328;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_26C211198;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_26C211198;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v18[8 * v14];
        *uint64_t v19 = v10;
        uint64_t v13 = v19 + 1;
        BOOL v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (v26 != a2 + 280) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v26, *(void *)(a2 + 280), *(void *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
  }
  if (v25 != a2 + 304) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v25, *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
  }
  if (v24 != a2 + 328) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v24, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_20CE75330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  float v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>()
{
}

void sub_20CE75490(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v7, a2, 111, a4, a5);
  kaldi::CompressedMatrix::CopyFromMat<float>(a1, (uint64_t)v7);
  kaldi::Matrix<float>::~Matrix((uint64_t)v7);
  return a1;
}

void sub_20CE75508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((void *)v11 + 4) = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (kaldi::CompressedMatrix ***)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, kaldi::CompressedMatrix **a2)
{
  int v4 = *(kaldi::CompressedMatrix ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      int v6 = *v5;
      char *v5 = 0;
      if (v6) {
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    unint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_20CE757DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(kaldi::CompressedMatrix ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(kaldi::CompressedMatrix ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *v1;
    char *v1 = 0;
    if (v3) {
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(kaldi::CompressedMatrix **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](int a1, kaldi::CompressedMatrix *this)
{
  if (this)
  {
    kaldi::CompressedMatrix::Destroy(this);
    JUMPOUT(0x2105595E0);
  }
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this, const kaldi::nnet1::SimplerSimpleRecurrentUnit *a2)
{
  *((void *)this + 7) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 40) + 8);
  *((_WORD *)this + 32) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = &off_26C20AB20;
  *((_DWORD *)this + 36) = 1;
  *((void *)this + 6) = off_26C20EEC0;
  *(void *)this = off_26C20ED70;
  *((void *)this + 12) = off_26C20EF90;
  *((void *)this + 13) = off_26C20F010;
  *((void *)this + 14) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = off_26C2111C8;
  *((void *)this + 3) = 0;
  operator new();
}

void sub_20CE75BF0(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v6);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc(uint64_t **a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *a1;
  if (v5 != *(_DWORD *)((char *)a1 + *(*a1 - 8) + 40)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x15, "batch_size == num_utts", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 23, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    unint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44);
    uint64_t v6 = *a1;
  }
  ((void (*)(uint64_t **))v6[18])(a1);
  uint64_t v15 = (uint64_t)&(*(uint64_t **)((char *)a1 + *(*a1 - 8) + 8))[6 * (int)a4];
  if (!*(_DWORD *)(v15 + 20))
  {
    uint64_t v16 = ((uint64_t (*)(uint64_t **))(*a1)[9])(a1);
    kaldi::CuMatrix<float>::Resize(v15, v5, v16, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v15, (uint64_t)(a1 + 2));
  }
  long long v46 = 0u;
  long long v45 = 0u;
  uint64_t v44 = off_26C211198;
  char v47 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(a1[1], a2, (uint64_t)&v44, a4, v14);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, v5, *(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), 1u, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, (uint64_t)&v44, 0, SHIDWORD(v45), 0, *(_DWORD *)((char *)a1 + *(*a1 - 5) + 12));
  kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)v43, (uint64_t)&v37, v17, v18, v19);
  uint64_t v37 = off_26C2096F8;
  long long v38 = 0u;
  long long v39 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v37);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, (uint64_t)&v44, 0, SHIDWORD(v45), (const char *)*(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), *(_DWORD *)((char *)a1 + *(*a1 - 5) + 12));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v37, v5, *(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::Set((uint64_t)&v37, v20, v21, v22, v23, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v37, (uint64_t)v43, 111, v24, v25, -1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v37, (uint64_t)&v40, v26, v27, v28);
  kaldi::CuMatrixBase<float>::MulElements(v15, (uint64_t)v43, v29, v30, v31);
  kaldi::CuMatrixBase<float>::AddMat(v15, (uint64_t)&v37, 111, v32, v33, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, v15, 111, v34, v35);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v37);
  uint64_t v40 = off_26C2096F8;
  long long v41 = 0u;
  long long v42 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
}

void sub_20CE76048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(), long long a16, long long a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  a15 = off_26C2096F8;
  a16 = 0u;
  a17 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a15);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc((uint64_t **)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SimplerSimpleRecurrentUnit::Info@<X0>(kaldi::nnet1::Nnet **this@<X0>, uint64_t *a2@<X8>)
{
  return kaldi::nnet1::Nnet::Info(a2, this[1]);
}

uint64_t *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::Info@<X0>(kaldi::nnet1::SimplerSimpleRecurrentUnit *this@<X0>, uint64_t *a2@<X8>)
{
  return kaldi::nnet1::Nnet::Info(a2, *(kaldi::nnet1::Nnet **)((char *)this + *(void *)(*(void *)this - 80) + 8));
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized8Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void sub_20CE761AC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C4082FA86A8);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void sub_20CE76234(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C4082FA86A8);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 70, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Reading SimplerSimpleRecurrentUnit component", 44);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
  }
  std::string __p = 0;
  uint64_t v40 = 0;
  uint64_t v6 = (kaldi::nnet1::Nnet **)(a1 + 8);
  uint64_t v41 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_47;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v7, v8);
    if (SHIBYTE(v41) < 0) {
      break;
    }
    if (HIBYTE(v41) != 5)
    {
      if (HIBYTE(v41) != 16)
      {
        if (HIBYTE(v41) == 29)
        {
          p_p = (uint64_t *)&__p;
          goto LABEL_36;
        }
        goto LABEL_59;
      }
      if (__p != (void *)0x72547475706E493CLL || v40 != 0x3E6D726F66736E61) {
        goto LABEL_59;
      }
LABEL_13:
      operator new();
    }
    if (__p != 811557692 || BYTE4(__p) != 62) {
      goto LABEL_59;
    }
LABEL_31:
    kaldi::CuVector<float>::Read(a1 + 16, a2, a3, v9, v8);
  }
  uint64_t v11 = v40;
  if (v40 == 5)
  {
    if (*(_DWORD *)__p != 811557692 || *((unsigned char *)__p + 4) != 62)
    {
      uint64_t v11 = v40;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v40 == 16 && *(void *)__p == 0x72547475706E493CLL && *((void *)__p + 1) == 0x3E6D726F66736E61) {
    goto LABEL_13;
  }
LABEL_34:
  if (v11 != 29) {
    goto LABEL_59;
  }
  p_p = (uint64_t *)__p;
LABEL_36:
  uint64_t v16 = *p_p;
  uint64_t v17 = p_p[1];
  uint64_t v18 = p_p[2];
  uint64_t v19 = *(uint64_t *)((char *)p_p + 21);
  BOOL v20 = v16 == 0x656C706D69532F3CLL && v17 == 0x52656C706D695372;
  BOOL v21 = v20 && v18 == 0x746E657272756365;
  if (!v21 || v19 != 0x3E74696E55746E65)
  {
LABEL_59:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 87);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Unrecognized token ", 19);
    if (v41 >= 0) {
      BOOL v35 = &__p;
    }
    else {
      BOOL v35 = __p;
    }
    if (v41 >= 0) {
      uint64_t v36 = HIBYTE(v41);
    }
    else {
      uint64_t v36 = v40;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
LABEL_47:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 90, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
  }
  if (!*v6)
  {
    uint64_t v37 = "input_transform_";
    uint64_t v38 = 92;
    goto LABEL_71;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*v6, &v42);
  uint64_t v27 = v42;
  uint64_t v28 = v43;
  if (v42)
  {
    BOOL v43 = v42;
    operator delete(v42);
  }
  if (v27 != v28)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Another recurrent neural networks are not supported inside SSRU component.", 74);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  int v29 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12);
  if (kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 8), v23, v24, v25, v26) != 2 * v29)
  {
    uint64_t v37 = "OutputDim()*2 == input_transform_->OutputDim()";
    uint64_t v38 = 97;
    goto LABEL_71;
  }
  int v33 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 8);
  if (v33 != kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 8), v30, v31, v32, v8))
  {
    uint64_t v37 = "InputDim() == input_transform_->InputDim()";
    uint64_t v38 = 98;
    goto LABEL_71;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12))
  {
    uint64_t v37 = "hidden_init_.Dim() == OutputDim()";
    uint64_t v38 = 99;
LABEL_71:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)v38, v37, v8);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
}

void sub_20CE767C0()
{
  MEMORY[0x2105595E0](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x20CE767F0);
}

void sub_20CE767EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void *kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (!*(void *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x67, "input_transform_", a5);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<InputTransform>", a4, a5);
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 8), a2, (uint64_t)a3, a4, v9);
  kaldi::WriteToken(a2, a3, (kaldi *)"<c_0>", v10, v11);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 16), a2, (int)a3, v12, v13);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</SimplerSimpleRecurrentUnit>", v14, v15);
}

void *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SimplerSimpleRecurrentUnit::EnsureBuffers(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)((char *)this + *(void *)(*(void *)this - 64) + 8), 1uLL);
}

uint64_t *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::EnsureBuffers(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)((char *)this+ *(void *)(*(void *)this - 104)+ *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 104)) - 64)+ 8), 1uLL);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::HistoryStateSize(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 40) + 12);
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::HistoryStateSize(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this
                         + *(void *)(*(void *)this - 32)
                         + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 32)) - 40)
                         + 12);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(uint64_t *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x75, "batch_idx == 0", v8);
  }
  uint64_t v9 = a2[1];
  uint64_t v10 = *a1;
  uint64_t v11 = (uint64_t)a1 + *(void *)(*a1 - 64);
  if (v9 != *(_DWORD *)(v11 + 40)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x76, "sequence_idx.size() == hopts_.num_sequences", v8);
  }
  *(void *)(*(void *)(v11 + 8) + 32) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 123);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "ResetHistoryState for SimplerSimpleRecurrentUnit makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
      }
    }
  }
  long long v16 = 0u;
  long long v15 = 0u;
  uint64_t v14 = off_26C211198;
  char v17 = 0;
  kaldi::CuMatrix<float>::operator=(*(uint64_t *)((char *)a1 + *(void *)(v10 - 64) + 8), (uint64_t)&v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v14);
}

void sub_20CE76B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20CE76B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(void *a1, void *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState((void *)((char *)a1 + *(void *)(*a1 - 40)), a2, a3, a4);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 64);
  uint64_t v5 = (void *)*((void *)v3 + 1);
  uint64_t v4 = (void *)*((void *)v3 + 2);
  if (v4 != v5)
  {
    uint64_t v6 = v4 - 6;
    uint64_t v7 = v4 - 6;
    uint64_t v8 = v4 - 6;
    do
    {
      uint64_t v9 = *v8;
      v8 -= 6;
      (*(void (**)(void *))(v9 + 16))(v7);
      v6 -= 6;
      BOOL v10 = v7 == v5;
      uint64_t v7 = v8;
    }
    while (!v10);
    uint64_t v2 = *(void *)this;
  }
  *((void *)v3 + 2) = v5;
  uint64_t v11 = *(uint64_t (**)(kaldi::nnet1::SimplerSimpleRecurrentUnit *))(v2 + 144);
  return v11(this);
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 48)));
}

unsigned int *kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(void *a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x88, "batch_idx == 0", a5);
  }
  uint64_t v7 = *(void *)((char *)a1 + *(void *)(*a1 - 64) + 8);
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 20), *(unsigned int *)(v7 + 16), 0, 0);
  uint64_t v10 = *(void *)((char *)a1 + *(void *)(*a1 - 64) + 8);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v10, 111, v8, v9);
}

unsigned int *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(void *a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState((void *)((char *)a1 + *(void *)(*a1 - 56)), a2, a3, a4, a5);
}

_DWORD *kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x8E, "batch_idx == 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 64) + 40) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x8F, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v8, 0, v9, v10);
  uint64_t v14 = *(void *)(a1 + *(void *)(*(void *)a1 - 64) + 8);
  int v15 = *(_DWORD *)(v14 + 20);
  if (v15 < 1)
  {
    return kaldi::CuVectorBase<float>::CopyFromVec(a2, a1 + 16, v11, v12, v13);
  }
  else
  {
    if (v15 <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
    }
    uint64_t v16 = *(void *)(v14 + 8) + 4 * (int)(*(_DWORD *)(v14 + 24) * a3);
    unsigned int v17 = *(_DWORD *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 32);
    v20[1] = v16;
    v20[0] = &off_26C209728;
    v20[2] = v17;
    v20[3] = v18;
    return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v20, v11, v12, v13);
  }
}

_DWORD *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(void *a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState((uint64_t)a1 + *(void *)(*a1 - 64), a2, a3, a4, a5);
}

unsigned int *kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x9A, "batch_idx == 0", v6);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + *(void *)(*(void *)a1 - 64) + 8), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v9 = *(unsigned int **)(a1 + *(void *)(*(void *)a1 - 64) + 8);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v9, a2, 111, v7, v8);
}

unsigned int *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(void *a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState((uint64_t)a1 + *(void *)(*a1 - 72), a2, a3);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0xA1, "batch_idx == 0", v8);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 64) + 40) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0xA2, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0xA3, "history.Dim() == HistoryStateSize()", v10);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = a1 + *(void *)(*(void *)a1 - 64);
  uint64_t v13 = *(void *)(v12 + 8);
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v13, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v13, *(unsigned int *)(v12 + 40), v11, 2u, 0);
    uint64_t v17 = *(void *)(a1 + *(void *)(*(void *)a1 - 64) + 8);
    if (*(_DWORD *)(v17 + 20) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
    }
    uint64_t v18 = *(void *)(v17 + 8) + 4 * (int)(*(_DWORD *)(v17 + 24) * a3);
    unsigned int v19 = *(_DWORD *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 32);
    v21[1] = v18;
    v21[0] = &off_26C209728;
    v21[2] = v19;
    void v21[3] = v20;
    kaldi::CuVectorBase<float>::CopyFromVec(v21, a2, v14, v15, v16);
  }
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(void *a1, uint64_t a2, unsigned int a3, int a4)
{
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::HistoricalComponent *)(v2 + 104));
  kaldi::CuMatrixBase<float>::~CuMatrixBase((char *)this + 96);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + 48));
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void sub_20CE7737C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10A1C4082FA86A8);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::GetType(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return 278;
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.h", 54);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x2105595E0);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this
                                                                                            + *(void *)(*(void *)this - 32)));
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc()
{
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x2105595E0);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  kaldi::CuVector<float>::~CuVector((void *)this + 2);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 1, 0);
}

void kaldi::PrintableRxfilename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v2 = (unsigned char *)a1;
      if (*(unsigned char *)(a1 + 23) != 1) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(a2, "standard input");
    return;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 != 1) {
    goto LABEL_10;
  }
  uint64_t v2 = *(unsigned char **)a1;
LABEL_8:
  if (*v2 == 45) {
    goto LABEL_9;
  }
LABEL_10:
  kaldi::ParseOptions::Escape((unsigned __int8 *)a1, a2);
}

uint64_t kaldi::ClassifyRxfilename(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (char *)a1;
  }
  else {
    uint64_t v1 = *(char **)a1;
  }
  int v2 = *v1;
  if (!*v1) {
    return 2;
  }
  if (v2 == 124) {
    return 0;
  }
  if (v2 == 45)
  {
    if (v1[1])
    {
      unsigned int v4 = 45;
      goto LABEL_11;
    }
    return 2;
  }
  unsigned int v4 = (char)v2;
  if (((char)v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v4 + 60) & 0x4000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (__maskrune((char)v2, 0x4000uLL)) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  unsigned int v7 = v1[v6 - 1];
  if ((v7 & 0x80000000) != 0)
  {
    if (__maskrune(v7, 0x4000uLL))
    {
LABEL_18:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 123);
        uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Cannot have leading or trailing space in filename \"", 51);
        int v9 = *(char *)(a1 + 23);
        if (v9 >= 0) {
          uint64_t v10 = a1;
        }
        else {
          uint64_t v10 = *(void *)a1;
        }
        if (v9 >= 0) {
          uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v11 = *(void *)(a1 + 8);
        }
LABEL_25:
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\".", 2);
LABEL_26:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      }
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v7 + 60) & 0x4000) != 0)
  {
    goto LABEL_18;
  }
  int v13 = *v1;
  if (v13 == 98 || v13 == 116)
  {
    if (v1[1] == 44)
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 131);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found what looks like an rspecifier instead of a filename \"", 59);
      int v19 = *(char *)(a1 + 23);
      if (v19 >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *(void *)a1;
      }
      if (v19 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a1 + 8);
      }
      goto LABEL_25;
    }
  }
  else if (v13 == 126)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 134);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found ~ at the beginning of filename \"", 38);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\". Shell like path expansions not supported.", 44);
    goto LABEL_26;
  }
  uint64_t v20 = v1 - 1;
  do
  {
    int v21 = v20[2];
    ++v20;
  }
  while (v21);
  unsigned int v22 = *v20;
  if (v22 == 124) {
    return 4;
  }
  if ((v22 & 0x80000000) != 0) {
    int v23 = __maskrune(v22, 0x4000uLL);
  }
  else {
    int v23 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v22 + 60) & 0x4000;
  }
  if (v23) {
    return 0;
  }
  if ((*v20 & 0x80000000) == 0
    && (uint64_t v24 = *v20, (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v24 + 60) & 0x400) != 0))
  {
    do
    {
      if (v20 <= v1) {
        break;
      }
      if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v24 + 60) & 0x400) == 0) {
        break;
      }
      int v29 = *--v20;
      uint64_t v24 = v29;
    }
    while ((v29 & 0x80000000) == 0);
    if (v24 == 58) {
      return 3;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (strchr(v1, 124))
    {
      if (kaldi::g_kaldi_verbose_level < -1) {
        return 0;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 153);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Trying to classify rxfilename with pipe symbol in the wrong place (pipe without | at the end?): ", 96);
      int v26 = *(char *)(a1 + 23);
      if (v26 >= 0) {
        uint64_t v27 = a1;
      }
      else {
        uint64_t v27 = *(void *)a1;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v28 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      goto LABEL_26;
    }
    return 1;
  }
}

void sub_20CE77AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::FileInputImpl::~FileInputImpl(kaldi::FileInputImpl *this)
{
  *(void *)this = &off_26C209750;
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *((void *)this + 1) = *MEMORY[0x263F8C2A8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 8) = *(void *)(v2 + 24);
  MEMORY[0x210558FE0]((char *)this + 24);
  std::istream::~istream();
  MEMORY[0x210559500]((char *)this + 432);
}

{
  uint64_t vars8;

  kaldi::FileInputImpl::~FileInputImpl(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::StandardInputImpl::~StandardInputImpl(kaldi::StandardInputImpl *this)
{
}

void kaldi::PipeInputImpl::~PipeInputImpl(void **this)
{
  *this = &off_26C209790;
  if (this[6]) {
    kaldi::PipeInputImpl::Close((kaldi::PipeInputImpl *)this);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  kaldi::PipeInputImpl::~PipeInputImpl(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(kaldi::OffsetFileInputImpl *this)
{
  *(void *)this = &off_26C209890;
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *((void *)this + 5) = *MEMORY[0x263F8C2A8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 40) = *(void *)(v2 + 24);
  MEMORY[0x210558FE0]((char *)this + 56);
  std::istream::~istream();
  MEMORY[0x210559500]((char *)this + 464);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(this);
  JUMPOUT(0x2105595E0);
}

void *kaldi::Input::Input(void *a1, uint64_t a2, unsigned char *a3)
{
  *a1 = 0;
  if ((kaldi::Input::OpenInternal(a1, a2, 1, a3) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "Input", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 711);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error opening input stream ", 27);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v8);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v8);
    std::string::~string(&v8);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

uint64_t kaldi::Input::Close(kaldi::Input *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    *(void *)this = 0;
  }
  return result;
}

uint64_t kaldi::Input::OpenInternal(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int v8 = kaldi::ClassifyRxfilename(a2);
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_9;
  }
  if (v8 != 3)
  {
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
    *a1 = 0;
LABEL_9:
    switch(v8)
    {
      case 1:
        operator new();
      case 2:
        operator new();
      case 3:
        goto LABEL_11;
      case 4:
        operator new();
      default:
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18, "OpenInternal", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 755);
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Invalid input filename format ", 30);
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v16 = *(std::string *)a2;
          }
          kaldi::PrintableRxfilename((uint64_t)&v16, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        }
        return 0;
    }
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  uint64_t v9 = *a1;
  if (v10 != 3)
  {
    if (!v9) {
LABEL_11:
    }
      operator new();
    goto LABEL_8;
  }
  if ((**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v9)(v9, a2, a3))
  {
    if (a4)
    {
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a1 + 8))();
      return kaldi::InitKaldiInputStream(v13, a4);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (*a1) {
      (*(void (**)(void))(*(void *)*a1 + 40))(*a1);
    }
    uint64_t result = 0;
    *a1 = 0;
  }
  return result;
}

void sub_20CE784D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void kaldi::Input::~Input(kaldi::Input *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    *(void *)this = 0;
  }
}

uint64_t kaldi::Input::Stream(kaldi::Input *this)
{
  uint64_t v1 = *(void *)this;
  if (!v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 774);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Input::Stream(), not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 8);
  return v2();
}

BOOL kaldi::FileInputImpl::Open(uint64_t a1)
{
  if (*(void *)(a1 + 144))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 355);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"FileInputImpl::Open(), ", 23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  std::ifstream::open();
  return *(void *)(a1 + 144) != 0;
}

uint64_t kaldi::FileInputImpl::Stream(kaldi::FileInputImpl *this)
{
  if (!*((void *)this + 18))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 363);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 8;
}

void kaldi::FileInputImpl::Close(kaldi::FileInputImpl *this)
{
  if (!*((void *)this + 18))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 369);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 1) - 24) + 8);
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

uint64_t kaldi::StandardInputImpl::Open(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 392);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Open(), open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  *(unsigned char *)(a1 + 8) = 1;
  return 1;
}

uint64_t kaldi::StandardInputImpl::Stream(kaldi::StandardInputImpl *this)
{
  if (!*((unsigned char *)this + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 403);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return fst::cin(this);
}

uint64_t kaldi::StandardInputImpl::Close(uint64_t this)
{
  if (!*(unsigned char *)(this + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 411);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "StandardInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t kaldi::StandardInputImpl::MyType(kaldi::StandardInputImpl *this)
{
  return 2;
}

uint64_t kaldi::PipeInputImpl::Open(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  if (*(void *)(a1 + 32)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", (const char *)0x1AB, "f_ == NULL", v4);
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      goto LABEL_27;
    }
  }
  else
  {
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_27;
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v7 = v6 - 1;
  if ((v5 & 0x80) != 0)
  {
    if (*(unsigned char *)(*(void *)a2 + v7) != 124) {
      goto LABEL_27;
    }
    uint64_t v5 = *(void *)(a2 + 8);
  }
  else if (*(unsigned char *)(a2 + v7) != 124)
  {
LABEL_27:
    kaldi::KaldiAssertFailure_((kaldi *)"Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", (const char *)0x1AD, "rxfilename.length() != 0 && rxfilename[rxfilename.length()-1] == '|'", v4);
  }
  std::string::basic_string(&v20, (const std::string *)a2, 0, v5 - 1, (std::allocator<char> *)v19);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v20;
  }
  else {
    int v8 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  uint64_t v9 = popen((const char *)v8, "r");
  *(void *)(a1 + 32) = v9;
  if (v9) {
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 438);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Failed opening pipe for reading, command is: ", 45);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v20;
    }
    else {
      uint64_t v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v20.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, size);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", errno is ", 11);
    int v15 = __error();
    std::string v16 = strerror(*v15);
    size_t v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_20CE78D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::PipeInputImpl::Stream(kaldi::PipeInputImpl *this)
{
  uint64_t result = *((void *)this + 6);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 464);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PipeInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::PipeInputImpl::Close(kaldi::PipeInputImpl *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 470);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "PipeInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *((void *)this + 6) = 0;
  if (pclose(*((FILE **)this + 4))) {
    BOOL v3 = kaldi::g_kaldi_verbose_level < -1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 480);
    unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Pipe ", 5);
    int v5 = *((char *)this + 31);
    if (v5 >= 0) {
      uint64_t v6 = (char *)this + 8;
    }
    else {
      uint64_t v6 = (char *)*((void *)this + 1);
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v7 = *((void *)this + 2);
    }
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" had nonzero return status ", 27);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  *((void *)this + 4) = 0;
  uint64_t result = *((void *)this + 5);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 5) = 0;
  return result;
}

void sub_20CE7902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::PipeInputImpl::MyType(kaldi::PipeInputImpl *this)
{
  return 4;
}

BOOL kaldi::OffsetFileInputImpl::Open(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = (void *)(a1 + 40);
  if (!*(void *)(a1 + 176))
  {
    __s1.__r_.__value_.__r.__words[0] = 0;
    kaldi::OffsetFileInputImpl::SplitFilename(a2, a1 + 8, (uint64_t *)&__s1);
    *(unsigned char *)(a1 + 32) = a3;
    std::ifstream::open();
    return *(void *)(a1 + 176)
        && kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, __s1.__r_.__value_.__r.__words[0]);
  }
  memset(&__s1, 0, sizeof(__s1));
  unint64_t v14 = 0;
  kaldi::OffsetFileInputImpl::SplitFilename(a2, (uint64_t)&__s1, (uint64_t *)&v14);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 31);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  if (size == v8)
  {
    if (v9 >= 0) {
      int v10 = (unsigned __int8 *)(a1 + 8);
    }
    else {
      int v10 = *(unsigned __int8 **)(a1 + 8);
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_23;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      goto LABEL_23;
    }
LABEL_21:
    if (*(unsigned __int8 *)(a1 + 32) == a3)
    {
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)), 0);
LABEL_26:
      BOOL v12 = kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, v14);
      goto LABEL_28;
    }
  }
LABEL_23:
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)), *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 32) | 4);
  }
  std::string::operator=((std::string *)(a1 + 8), &__s1);
  std::ifstream::open();
  if (*(void *)(a1 + 176)) {
    goto LABEL_26;
  }
  BOOL v12 = 0;
LABEL_28:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_20CE79258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OffsetFileInputImpl::Stream(kaldi::OffsetFileInputImpl *this)
{
  if (!*((void *)this + 22))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 598);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 40;
}

void kaldi::OffsetFileInputImpl::Close(kaldi::OffsetFileInputImpl *this)
{
  if (!*((void *)this + 22))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 604);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 5) - 24) + 40);
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

uint64_t kaldi::OffsetFileInputImpl::MyType(kaldi::OffsetFileInputImpl *this)
{
  return 3;
}

kaldi::OffsetFileInputImpl *kaldi::OffsetFileInputImpl::OffsetFileInputImpl(kaldi::OffsetFileInputImpl *this)
{
  *(void *)this = &off_26C209890;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  std::ios_base::iostate v3 = (uint64_t *)((char *)this + 464);
  uint64_t v4 = MEMORY[0x263F8C308] + 64;
  *((void *)this + 58) = MEMORY[0x263F8C308] + 64;
  int v5 = (char *)this + 56;
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *((void *)this + 5) = v7;
  *(uint64_t *)((char *)v2 + *(void *)(v7 - 24)) = v6;
  *((void *)this + 6) = 0;
  uint64_t v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 5) - 24) + 40);
  std::ios_base::init(v8, (char *)this + 56);
  uint64_t v9 = MEMORY[0x263F8C308] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *uint64_t v2 = v9;
  *std::ios_base::iostate v3 = v4;
  MEMORY[0x210558FD0](v5);
  return this;
}

void sub_20CE7952C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x210559500](v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v6 = a2[1];
    if (v6 < a3) {
      goto LABEL_15;
    }
    uint64_t v4 = (uint64_t *)*a2;
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3) {
LABEL_15:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v7;
    uint64_t v8 = __dst;
    if (v6 == a3) {
      goto LABEL_14;
    }
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((unsigned char *)v8 + v7) = 0;
  return __dst;
}

void kaldi::basic_pipebuf<char>::~basic_pipebuf()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x2105595E0);
}

uint64_t kaldi::basic_pipebuf<char>::sync(uint64_t a1)
{
  if (fflush(*(FILE **)(a1 + 64))) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t kaldi::basic_pipebuf<char>::underflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 0);
}

uint64_t kaldi::basic_pipebuf<char>::uflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 1);
}

uint64_t kaldi::basic_pipebuf<char>::pbackfail(uint64_t a1, uint64_t a2)
{
  *(void *)&v9[7] = *MEMORY[0x263EF8340];
  if (a2 != -1)
  {
    uint64_t v3 = a2;
    if (*(unsigned char *)(a1 + 76))
    {
      char v8 = *(_DWORD *)(a1 + 72);
      uint64_t v4 = v9;
      while (v4 > &v8)
      {
        int v5 = *--v4;
        if (ungetc(v5, *(FILE **)(a1 + 64)) == -1) {
          return 0xFFFFFFFFLL;
        }
      }
    }
    *(_DWORD *)(a1 + 72) = v3;
    BOOL v6 = 1;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a1 + 76))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 72);
    BOOL v6 = v3 != -1;
LABEL_11:
    *(unsigned char *)(a1 + 76) = v6;
    return v3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t kaldi::basic_pipebuf<char>::overflow(uint64_t a1, uint64_t a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v2 = a2;
  *(void *)(a1 + 40) = &__ptr;
  uint64_t v3 = (void *)(a1 + 40);
  char __ptr = a2;
  *(void *)(a1 + 48) = &v6;
  *(void *)(a1 + 56) = &v6;
  if (fwrite(&__ptr, 1uLL, 1uLL, *(FILE **)(a1 + 64)) != 1) {
    return 0xFFFFFFFFLL;
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return v2;
}

uint64_t kaldi::basic_pipebuf<char>::__getchar(uint64_t a1, int a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 76))
  {
    int v5 = getc(*(FILE **)(a1 + 64));
    if (v5 != -1)
    {
      uint64_t v4 = v5;
      if (v2)
      {
        *(_DWORD *)(a1 + 72) = v5;
        return v4;
      }
      if (ungetc(v5, *(FILE **)(a1 + 64)) != -1) {
        return v4;
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 72);
  if (a2)
  {
    *(_DWORD *)(a1 + 72) = -1;
    *(unsigned char *)(a1 + 76) = 0;
  }
  return v4;
}

void kaldi::OffsetFileInputImpl::SplitFilename(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type v6 = std::string::rfind((const std::string *)a1, 58, 0xFFFFFFFFFFFFFFFFLL);
  if (v6 == -1) {
    kaldi::KaldiAssertFailure_((kaldi *)"SplitFilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", (const char *)0x213, "pos != std::string::npos", v7);
  }
  std::string::size_type v8 = v6;
  std::string::basic_string(&v16, (const std::string *)a1, 0, v6, (std::allocator<char> *)__dst);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v16;
  uint64_t v9 = std::string::basic_string[abi:ne180100](__dst, (uint64_t *)a1, v8 + 1);
  if ((kaldi::ConvertStringToInteger<unsigned long>((uint64_t)v9, a3) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v16, "SplitFilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 538);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Cannot get offset from filename ", 32);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(void *)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (possibly you compiled in 32-bit and have a >32-bit", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" byte offset into a file; you'll have to compile 64-bit.",
      56);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v16);
  }
  if (v18 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_20CE799F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::OffsetFileInputImpl::Seek(kaldi::OffsetFileInputImpl *this, unint64_t a2)
{
  uint64_t v3 = (void *)((char *)this + 40);
  std::istream::tellg();
  unint64_t v4 = v8;
  if (v8 == a2) {
    return 1;
  }
  if (v8 < a2 && v8 + 100 > a2)
  {
    do
    {
      std::istream::get();
      ++v4;
    }
    while (a2 != v4);
    std::istream::tellg();
    return v8 == a2;
  }
  else
  {
    std::istream::seekg();
    size_t v7 = (std::ios_base *)((char *)v3 + *(void *)(*v3 - 24));
    if ((v7->__rdstate_ & 5) == 0)
    {
      std::ios_base::clear(v7, 0);
      return 1;
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    }
    return 0;
  }
}

uint64_t kaldi::ConvertStringToInteger<unsigned long>(uint64_t a1, uint64_t *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  __endptr = 0;
  *__error() = 0;
  uint64_t v4 = strtoll(v3, &__endptr, 10);
  if (__endptr == v3) {
    return 0;
  }
  uint64_t v5 = v4;
  std::string::size_type v6 = __endptr - 1;
  uint64_t v7 = MEMORY[0x263EF8318];
  do
  {
    unsigned int v8 = v6[1];
    if ((v8 & 0x80000000) != 0) {
      int v9 = __maskrune(v8, 0x4000uLL);
    }
    else {
      int v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000;
    }
    ++v6;
  }
  while (v9);
  if (v6 == v3 || *v6) {
    return 0;
  }
  int v11 = __error();
  uint64_t result = 0;
  if (!*v11 && (v5 & 0x8000000000000000) == 0)
  {
    *a2 = v5;
    return 1;
  }
  return result;
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (char *)result;
  }
  else {
    uint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unsigned int v8 = a1;
    }
    else {
      unsigned int v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  uint64_t v9 = &v7[v5];
  char *v9 = a2;
  v9[1] = 0;
  return result;
}

void kaldi::ParseOptions::Escape(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  int v4 = (char)a1[23];
  size_t v5 = *(char **)a1;
  if (v4 >= 0) {
    std::string::size_type v6 = (char *)a1;
  }
  else {
    std::string::size_type v6 = *(char **)a1;
  }
  char v7 = *v6;
  if (!*v6)
  {
LABEL_16:
    if ((v4 & 0x80u) == 0) {
      uint64_t v12 = (char *)a1;
    }
    else {
      uint64_t v12 = v5;
    }
    int v13 = 39;
    char v14 = "'\\''";
    if (strchr(v12, 39))
    {
      {
        int v13 = 39;
      }
      else
      {
        char v14 = "\\\"";
        int v13 = 34;
      }
    }
    __s[1] = 0;
    __s[0] = v13;
    std::string::basic_string[abi:ne180100]<0>(a2, __s);
    long long v15 = *(unsigned char **)a1;
    if ((a1[23] & 0x80u) == 0) {
      long long v15 = a1;
    }
    int v16 = *v15;
    if (*v15)
    {
      size_t v17 = v15 + 1;
      do
      {
        char v18 = (std::string::value_type *)v14;
        if (v16 != v13)
        {
          __s[0] = v16;
          char v18 = __s;
        }
        std::string::append(a2, v18);
        int v19 = *v17++;
        int v16 = v19;
      }
      while (v19);
    }
    __s[0] = v13;
    std::string::append(a2, __s);
    return;
  }
  uint64_t v8 = MEMORY[0x263EF8318];
  do
  {
    if (v7 < 0)
    {
      if (__maskrune(v7, 0x500uLL)) {
        goto LABEL_10;
      }
    }
    else if ((*(_DWORD *)(v8 + 4 * v7 + 60) & 0x500) != 0)
    {
      goto LABEL_10;
    }
    unsigned __int8 v10 = 91;
    uint64_t v11 = 1u;
    while (*v6 != v10)
    {
      unsigned __int8 v10 = asc_20D5AFB67[v11++];
      if (v11 == 14)
      {
        LOBYTE(v4) = a1[23];
        size_t v5 = *(char **)a1;
        goto LABEL_16;
      }
    }
LABEL_10:
    int v9 = *++v6;
    char v7 = v9;
  }
  while (v9);
  if ((char)a1[23] < 0)
  {
    std::string v20 = *(const std::string::value_type **)a1;
    std::string::size_type v21 = *((void *)a1 + 1);
    std::string::__init_copy_ctor_external(a2, v20, v21);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
  }
}

void sub_20CE7A0C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  std::string::size_type v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x210558FD0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  std::string::size_type v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x210558FD0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_20CE7A26C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x210558FE0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x210559500](a1 + 53);
  return a1;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  std::string::size_type v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    std::ios_base *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *int v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    long long v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        int v16 = v7;
      }
      else
      {
        long long v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      size_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  std::string v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    std::string v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *std::string v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void kaldi::SplitStringToVector(const std::string *a1, const char *a2, int a3, uint64_t a4)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v32 = size;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a4);
  std::string::size_type v9 = 0;
  do
  {
    int v10 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v10 >= 0) {
      std::string::size_type v11 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v11 = a1->__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      std::string::size_type v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = a1->__r_.__value_.__l.__size_;
    }
    size_t v13 = strlen(a2);
    if (v12 <= v9 || v13 == 0)
    {
      uint64_t v15 = -1;
      if (a3) {
        goto LABEL_26;
      }
    }
    else
    {
      int v16 = (unsigned __int8 *)(v11 + v9);
      size_t v17 = (unsigned __int8 *)(v11 + v12);
LABEL_17:
      size_t v18 = v13;
      int v19 = a2;
      while (*v16 != *(unsigned __int8 *)v19)
      {
        ++v19;
        if (!--v18)
        {
          if (++v16 != v17) {
            goto LABEL_17;
          }
          int v16 = (unsigned __int8 *)(v11 + v12);
          break;
        }
      }
      if (v16 == v17) {
        uint64_t v15 = -1;
      }
      else {
        uint64_t v15 = (uint64_t)&v16[-v11];
      }
      if (a3)
      {
LABEL_26:
        if (v15 == v9 || v9 == v32) {
          goto LABEL_41;
        }
      }
    }
    std::string::basic_string(&v33, a1, v9, v15 - v9, (std::allocator<char> *)&__v);
    unint64_t v21 = *(void *)(a4 + 8);
    unint64_t v20 = *(void *)(a4 + 16);
    if (v21 >= v20)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)a4) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(void *)a4) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
      if (v26) {
        uint64_t v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a4 + 16, v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = v27 + v23;
      __v.__first_ = v27;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v27[v26];
      long long v29 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      v28->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      memset(&v33, 0, sizeof(v33));
      __v.__end_ = v28 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
      uint64_t v30 = *(void *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v31 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      *(void *)(a4 + 8) = v30;
      if (v31 < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      *(void *)(v21 + 16) = *((void *)&v33.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v21 = v22;
      *(void *)(a4 + 8) = v21 + 24;
    }
LABEL_41:
    std::string::size_type v9 = v15 + 1;
  }
  while (v15 != -1);
}

void sub_20CE7A92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::__split_buffer<std::string> *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SplitStringOnString(uint64_t a1, char *a2, uint64_t *a3)
{
  std::vector<std::string>::__clear[abi:ne180100](a3);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
  int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int v8 = a2[23];
  if (v8 >= 0) {
    std::string::size_type v9 = a2;
  }
  else {
    std::string::size_type v9 = *(char **)a2;
  }
  if (v8 >= 0) {
    int64_t v10 = a2[23];
  }
  else {
    int64_t v10 = *((void *)a2 + 1);
  }
  if (!v10)
  {
    std::string::size_type v17 = 0;
    goto LABEL_26;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  if (size >= v10)
  {
    std::string::size_type v11 = (char *)p_str + size;
    int v12 = *v9;
    size_t v13 = p_str;
    do
    {
      int64_t v14 = size - v10;
      if (v14 == -1) {
        break;
      }
      uint64_t v15 = (char *)memchr(v13, v12, v14 + 1);
      if (!v15) {
        break;
      }
      int v16 = v15;
      if (!memcmp(v15, v9, v10))
      {
        if (v16 != v11)
        {
          std::string::size_type v17 = v16 - (char *)p_str;
          while (v17 != -1)
          {
LABEL_26:
            std::string::basic_string(&v39, &__str, 0, v17, (std::allocator<char> *)&v41);
            kaldi::Trim(&v39);
            unint64_t v18 = a3[1];
            if (v18 >= a3[2])
            {
              uint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&v39);
            }
            else
            {
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v19 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                *(void *)(v18 + 16) = *((void *)&v39.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v18 = v19;
              }
              uint64_t v20 = v18 + 24;
              a3[1] = v18 + 24;
            }
            a3[1] = v20;
            uint64_t v21 = a2[23];
            if ((v21 & 0x80u) != 0) {
              uint64_t v21 = *((void *)a2 + 1);
            }
            long long v22 = std::string::erase(&__str, 0, v21 + v17);
            std::string::operator=(&__str, v22);
            int64_t v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v24 = &__str;
            }
            else {
              unint64_t v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v25 = a2[23];
            if (v25 >= 0) {
              unint64_t v26 = a2;
            }
            else {
              unint64_t v26 = *(char **)a2;
            }
            if (v25 >= 0) {
              int64_t v27 = a2[23];
            }
            else {
              int64_t v27 = *((void *)a2 + 1);
            }
            if (v27)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int64_t v23 = __str.__r_.__value_.__l.__size_;
              }
              uint64_t v28 = (char *)v24 + v23;
              if (v23 >= v27)
              {
                int v34 = *v26;
                BOOL v35 = v24;
                do
                {
                  int64_t v36 = v23 - v27;
                  if (v36 == -1) {
                    break;
                  }
                  uint64_t v37 = (char *)memchr(v35, v34, v36 + 1);
                  if (!v37) {
                    break;
                  }
                  long long v29 = v37;
                  if (!memcmp(v37, v26, v27)) {
                    goto LABEL_48;
                  }
                  BOOL v35 = (std::string *)(v29 + 1);
                  int64_t v23 = v28 - (v29 + 1);
                }
                while (v23 >= v27);
              }
              long long v29 = v28;
LABEL_48:
              if (v29 == v28) {
                std::string::size_type v17 = -1;
              }
              else {
                std::string::size_type v17 = v29 - (char *)v24;
              }
            }
            else
            {
              std::string::size_type v17 = 0;
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
          }
        }
        break;
      }
      size_t v13 = (std::string *)(v16 + 1);
      int64_t size = v11 - (v16 + 1);
    }
    while (size >= v10);
  }
  kaldi::Trim(&__str);
  std::string::size_type v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v30 = __str.__r_.__value_.__l.__size_;
  }
  if (v30)
  {
    unint64_t v32 = a3[1];
    if (v32 >= a3[2])
    {
      uint64_t v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v33 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v32 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v32 = v33;
      }
      uint64_t v38 = v32 + 24;
      a3[1] = v32 + 24;
    }
    a3[1] = v38;
    char v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v31 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20CE7AC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *kaldi::Trim(std::string *this)
{
  uint64_t v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v3 = this;
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  int v5 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
  }
  while (memchr(" \t\n\r\f\v", v5[size--], 6uLL));
  if (size == -1)
  {
LABEL_11:
    if ((v2 & 0x80) != 0)
    {
      std::string::size_type v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      int64_t v10 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    }
    else
    {
      int64_t v10 = (char *)this + v2;
      std::string::size_type v11 = this;
    }
    std::string::size_type v12 = v10 - (char *)v11;
    size_t v13 = this;
    goto LABEL_15;
  }
  uint64_t result = std::string::erase(this, size + 1, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v8 = this->__r_.__value_.__l.__size_;
    if (!v8) {
      return result;
    }
  }
  else
  {
    std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = this;
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return result;
    }
  }
  std::string::size_type v14 = 0;
  while (1)
  {
    uint64_t result = (std::string *)memchr(" \t\n\r\f\v", v9->__r_.__value_.__s.__data_[v14], 6uLL);
    if (!result) {
      break;
    }
    if (v8 == ++v14) {
      return result;
    }
  }
  if (v14 != -1)
  {
    size_t v13 = this;
    std::string::size_type v12 = v14;
LABEL_15:
    return std::string::erase(v13, 0, v12);
  }
  return result;
}

uint64_t kaldi::quasar::Vocab::Vocab(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v8 = a1 + 8;
  uint64_t v9 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v10 = a1 + 56;
  std::string::size_type v11 = (void *)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  std::string::size_type v12 = (uint64_t *)(a1 + 120);
  uint64_t v57 = (void **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  int v54 = (unsigned __int8 *)(a1 + 32);
  uint64_t v55 = (unsigned __int8 *)(a1 + 8);
  uint64_t v53 = (unsigned __int8 *)(a1 + 56);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<VocabSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1, v13, v14);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<UnknownWord>");
  kaldi::ReadToken(a2, a3, v8, v15, v16);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<BeginOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v9, v17, v18);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<EndOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v10, v19, v20);
  if (*(int *)a1 >= 1)
  {
    int v23 = 0;
    uint64_t v56 = a1 + 160;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      long double __x = 0.0;
      kaldi::ReadToken(a2, a3, (uint64_t)__p, v21, v22);
      kaldi::ReadBasicType<double>(a2, a3, &__x, v24, v25);
      uint64_t v61 = __p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v61)+ 10) = v23;
      unint64_t v26 = *(void *)(a1 + 128);
      if (v26 >= *(void *)(a1 + 136))
      {
        uint64_t v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v12, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v60) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 128), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v27 = *(_OWORD *)__p;
          *(void *)(v26 + 16) = v60;
          *(_OWORD *)unint64_t v26 = v27;
        }
        uint64_t v28 = v26 + 24;
        *(void *)(a1 + 128) = v26 + 24;
      }
      *(void *)(a1 + 128) = v28;
      if (a4)
      {
        double v29 = log(__x);
        double v30 = v29;
        unint64_t v32 = *(double **)(a1 + 152);
        unint64_t v31 = *(void *)(a1 + 160);
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v37 = (double *)*v57;
          uint64_t v38 = ((char *)v32 - (unsigned char *)*v57) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v31 - (void)v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v56, v41);
            uint64_t v37 = *(double **)(a1 + 144);
            unint64_t v32 = *(double **)(a1 + 152);
          }
          else
          {
            long long v42 = 0;
          }
          long long v46 = (long double *)&v42[8 * v38];
          long double *v46 = v30;
          int64_t v36 = v46 + 1;
          while (v32 != v37)
          {
            uint64_t v47 = *((void *)v32-- - 1);
            *((void *)v46-- - 1) = v47;
          }
LABEL_39:
          *(void *)(a1 + 144) = v46;
          *(void *)(a1 + 152) = v36;
          *(void *)(a1 + 160) = &v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
          goto LABEL_41;
        }
        *unint64_t v32 = v29;
        long long v33 = v32 + 1;
      }
      else
      {
        BOOL v35 = *(double **)(a1 + 152);
        unint64_t v34 = *(void *)(a1 + 160);
        if ((unint64_t)v35 >= v34)
        {
          uint64_t v37 = (double *)*v57;
          uint64_t v43 = ((char *)v35 - (unsigned char *)*v57) >> 3;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v34 - (void)v37;
          if (v45 >> 2 > v44) {
            unint64_t v44 = v45 >> 2;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v44;
          }
          if (v41)
          {
            long long v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v56, v41);
            uint64_t v37 = *(double **)(a1 + 144);
            BOOL v35 = *(double **)(a1 + 152);
          }
          else
          {
            long long v42 = 0;
          }
          long long v46 = (long double *)&v42[8 * v43];
          long double *v46 = __x;
          int64_t v36 = v46 + 1;
          while (v35 != v37)
          {
            uint64_t v48 = *((void *)v35-- - 1);
            *((void *)v46-- - 1) = v48;
          }
          goto LABEL_39;
        }
        *BOOL v35 = __x;
        long long v33 = v35 + 1;
      }
      int64_t v36 = v33;
LABEL_41:
      *(void *)(a1 + 152) = v36;
      if (SHIBYTE(v60) < 0) {
        operator delete(__p[0]);
      }
      ++v23;
    }
    while (v23 < *(_DWORD *)a1);
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v55))
  {
    uint64_t v51 = "all_words_and_indices_.count(oov_word_) > 0";
    uint64_t v52 = 212;
    goto LABEL_53;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v54))
  {
    uint64_t v51 = "all_words_and_indices_.count(bos_word_) > 0";
    uint64_t v52 = 213;
    goto LABEL_53;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v53))
  {
    uint64_t v51 = "all_words_and_indices_.count(eos_word_) > 0";
    uint64_t v52 = 214;
LABEL_53:
    kaldi::KaldiAssertFailure_((kaldi *)"Vocab", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnlm/vocab.cc", (const char *)v52, v51, v49);
  }
  uint64_t v61 = (void **)v55;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, v55, (uint64_t)&std::piecewise_construct, (long long **)&v61)+ 10);
  return a1;
}

void sub_20CE7B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v24 = *a14;
  if (*a14)
  {
    *(void *)(v21 + 152) = v24;
    operator delete(v24);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v22);
  if (*(char *)(v21 + 79) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v21 + 55) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*a12);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::OOvWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void kaldi::quasar::Vocab::BosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

void kaldi::quasar::Vocab::EosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

uint64_t kaldi::quasar::Vocab::GetWordId(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 80), a2);
  uint64_t v4 = (unsigned int *)(v3 + 40);
  if (!v3) {
    uint64_t v4 = (unsigned int *)(a1 + 168);
  }
  return *v4;
}

uint64_t kaldi::quasar::Vocab::GetWord(kaldi::quasar::Vocab *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)this <= (signed int)a2) {
    return (uint64_t)this + 8;
  }
  else {
    return *((void *)this + 15) + 24 * a2;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string::size_type v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20CE7B62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20CE7B6E0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_20CE7B754(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20CE7BABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20CE7BB68(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string::size_type v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20CE7BDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20CE7BEAC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  int8x8_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int8x8_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int8x8_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  long long v27 = *(void **)(a1 + 8);
  if (*(void **)a1 != v27)
  {
    do
    {
      if (v1[1] != *v1)
      {
        unint64_t v2 = *(void *)(*v1 + 144) - *(void *)(*v1 + 136);
        if ((int)(v2 >> 2) >= 1)
        {
          uint64_t v3 = 0;
          uint64_t v4 = (v2 >> 2);
          do
          {
            uint64_t v5 = v1[1];
            if (*v1 == v5)
            {
              int v6 = 0;
            }
            else
            {
              int v6 = 0;
              int v7 = 0;
              float v8 = 0.0;
              uint64_t v9 = *v1;
              do
              {
                uint64_t v10 = *(void *)(v9 + 136);
                if (*(float *)(v10 + 4 * v3) > v8)
                {
                  int v6 = v7;
                  float v8 = *(float *)(v10 + 4 * v3);
                }
                ++v7;
                v9 += 240;
              }
              while (v9 != v5);
            }
            uint64_t v11 = *v1 + 240 * v6;
            unint64_t v14 = *(void *)(v11 + 128);
            unint64_t v13 = (void *)(v11 + 128);
            unint64_t v12 = v14;
            unint64_t v16 = (char **)(v13 - 1);
            unint64_t v15 = (char *)*(v13 - 1);
            if ((unint64_t)v15 >= v14)
            {
              float v18 = (void **)(v13 - 2);
              BOOL v19 = (char *)*(v13 - 2);
              uint64_t v20 = (v15 - v19) >> 2;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v22 = v12 - (void)v19;
              if (v22 >> 1 > v21) {
                unint64_t v21 = v22 >> 1;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v13, v23);
                unint64_t v15 = *v16;
                BOOL v19 = (char *)*v18;
              }
              else
              {
                unint64_t v24 = 0;
              }
              int v25 = &v24[4 * v20];
              *(_DWORD *)int v25 = v3;
              float v17 = v25 + 4;
              while (v15 != v19)
              {
                int v26 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v25 - 1) = v26;
                v25 -= 4;
              }
              *float v18 = v25;
              *unint64_t v16 = v17;
              *unint64_t v13 = &v24[4 * v23];
              if (v19) {
                operator delete(v19);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v15 = v3;
              float v17 = v15 + 4;
            }
            *unint64_t v16 = v17;
            ++v3;
          }
          while (v3 != v4);
        }
      }
      v1 += 34;
    }
    while (v1 != v27);
  }
}

void kaldi::quasar::TranslationUtil::MergeAlignments(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v85 = *(void **)(a1 + 8);
  if (*(void **)a1 != v85)
  {
    while (1)
    {
      uint64_t v86 = v1;
      uint64_t v3 = (char *)*v1;
      unint64_t v2 = (char *)v1[1];
      if ((char *)*v1 != v2) {
        break;
      }
LABEL_65:
      unsigned int v9 = 0;
LABEL_66:
      int v32 = -286331153 * ((v2 - v3) >> 4);
      int v33 = v9;
      v97[0] = 0;
      std::vector<BOOL>::vector(__p, v32, v97);
      std::vector<std::vector<BOOL>>::vector(v98, v9, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      LOBYTE(v96[0]) = 0;
      std::vector<BOOL>::vector(__p, v32, (unsigned __int8 *)v96);
      std::vector<std::vector<BOOL>>::vector(v97, v9, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(v96, v9, (unsigned __int8 *)__p);
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(&v95, v32, (unsigned __int8 *)__p);
      long long v93 = 0u;
      long long v94 = 0u;
      *(_OWORD *)std::string __p = 0u;
      uint64_t v89 = 0;
      unint64_t v90 = 0;
      unsigned int v91 = 0;
      unint64_t v34 = (void *)*v86;
      BOOL v35 = (void *)v86[1];
      if ((void *)*v86 != v35)
      {
        unint64_t v36 = 0;
        do
        {
          uint64_t v37 = (int *)v34[11];
          uint64_t v38 = (int *)v34[12];
          unint64_t v39 = v36 >> 6;
          if (v37 != v38)
          {
            uint64_t v40 = v98[0];
            unint64_t v41 = (int *)v34[11];
            do
            {
              int v42 = *v41++;
              *(void *)(*(void *)(v40 + 24 * v42) + 8 * v39) |= 1 << v36;
            }
            while (v41 != v38);
          }
          uint64_t v43 = (int *)v34[14];
          unint64_t v44 = (int *)v34[15];
          if (v43 != v44)
          {
            uint64_t v45 = 1 << v36;
            do
            {
              uint64_t v46 = *v43;
              *(void *)(*(void *)(*(void *)v97 + 24 * v46) + 8 * v39) |= v45;
              if ((*(void *)(*(void *)(v98[0] + 24 * v46) + 8 * v39) & v45) != 0)
              {
                unint64_t v88 = __PAIR64__(v36, v46);
                std::deque<std::pair<int,int>>::push_back(__p, &v88);
                *(void *)((char *)v96[0] + (((unint64_t)*v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v43;
                *((void *)v95 + v39) |= v45;
              }
              ++v43;
            }
            while (v43 != v44);
            uint64_t v37 = (int *)v34[11];
            uint64_t v43 = (int *)v34[14];
          }
          v34[12] = v37;
          v34[15] = v43;
          ++v36;
          v34 += 30;
        }
        while (v34 != v35);
        while (*((void *)&v94 + 1))
        {
          unint64_t v47 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)v94 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v94 & 0x1FF));
          *(void *)&long long v94 = v94 + 1;
          --*((void *)&v94 + 1);
          if ((unint64_t)v94 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(void *)&long long v94 = v94 - 512;
          }
          uint64_t v48 = v90;
          if (v90 >= v91)
          {
            uint64_t v50 = (v90 - v89) >> 3;
            if ((unint64_t)(v50 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v51 = (v91 - v89) >> 2;
            if (v51 <= v50 + 1) {
              unint64_t v51 = v50 + 1;
            }
            if ((unint64_t)(v91 - v89) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v52) {
              uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v52);
            }
            else {
              uint64_t v53 = 0;
            }
            int v54 = &v53[8 * v50];
            *(void *)int v54 = v47;
            uint64_t v49 = v54 + 8;
            uint64_t v56 = v89;
            uint64_t v55 = v90;
            if (v90 != v89)
            {
              do
              {
                uint64_t v57 = *((void *)v55 - 1);
                v55 -= 8;
                *((void *)v54 - 1) = v57;
                v54 -= 8;
              }
              while (v55 != v56);
              uint64_t v55 = v89;
            }
            uint64_t v89 = v54;
            unint64_t v90 = v49;
            unsigned int v91 = &v53[8 * v52];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)unint64_t v90 = v47;
            uint64_t v49 = v48 + 8;
          }
          unint64_t v58 = HIDWORD(v47);
          unint64_t v90 = v49;
          int v59 = -1;
          int v87 = v47;
          do
          {
            unint64_t v60 = (v59 + v47);
            uint64_t v61 = 1 << (v59 + v47);
            int v62 = -3;
            do
            {
              if ((v60 & 0x80000000) == 0 && (int)v60 < v33)
              {
                unint64_t v63 = (v58 + v62 + 2);
                if ((v63 & 0x80000000) == 0 && (int)v63 < v32)
                {
                  unint64_t v64 = v63 >> 6;
                  uint64_t v65 = 1 << (v58 + v62 + 2);
                  if ((*((void *)v95 + (v63 >> 6)) & v65) == 0
                    && ((*(void *)(*(void *)(v98[0] + 24 * v60) + 8 * v64) & v65) != 0
                     || (*(void *)(*(void *)(*(void *)v97 + 24 * v60) + 8 * v64) & v65) != 0))
                  {
                    LODWORD(v88) = v60;
                    HIDWORD(v88) = v58 + v62 + 2;
                    std::deque<std::pair<int,int>>::push_back(__p, &v88);
                    *((void *)v96[0] + (v60 >> 6)) |= v61;
                    *((void *)v95 + v64) |= v65;
                  }
                }
              }
              v62 += 2;
            }
            while (v62 < 0);
            ++v59;
            LODWORD(v47) = v87;
          }
          while (v59 != 2);
        }
      }
      unint64_t v67 = v89;
      long long v66 = v90;
      long long v68 = v86;
      if (v89 != v90)
      {
        do
        {
          uint64_t v69 = *v68 + 240 * *((int *)v67 + 1);
          unint64_t v72 = *(void *)(v69 + 104);
          uint64_t v71 = (void *)(v69 + 104);
          unint64_t v70 = v72;
          long long v74 = (char **)(v71 - 1);
          unint64_t v73 = (char *)*(v71 - 1);
          if ((unint64_t)v73 >= v72)
          {
            uint64_t v76 = (void **)(v71 - 2);
            long long v77 = (char *)*(v71 - 2);
            uint64_t v78 = (v73 - v77) >> 2;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v80 = v70 - (void)v77;
            if (v80 >> 1 > v79) {
              unint64_t v79 = v80 >> 1;
            }
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v79;
            }
            if (v81)
            {
              long long v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v71, v81);
              unint64_t v73 = *v74;
              long long v77 = (char *)*v76;
            }
            else
            {
              long long v82 = 0;
            }
            uint64_t v83 = &v82[4 * v78];
            *(_DWORD *)uint64_t v83 = *(_DWORD *)v67;
            long long v75 = v83 + 4;
            while (v73 != v77)
            {
              int v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            *uint64_t v76 = v83;
            std::vector<int> *v74 = v75;
            *uint64_t v71 = &v82[4 * v81];
            if (v77) {
              operator delete(v77);
            }
            long long v68 = v86;
          }
          else
          {
            *(_DWORD *)unint64_t v73 = *(_DWORD *)v67;
            long long v75 = v73 + 4;
          }
          std::vector<int> *v74 = v75;
          v67 += 8;
        }
        while (v67 != v66);
        unint64_t v67 = v89;
      }
      if (v67)
      {
        unint64_t v90 = v67;
        operator delete(v67);
      }
      std::deque<char *>::~deque[abi:ne180100](__p);
      if (v95) {
        operator delete(v95);
      }
      if (v96[0]) {
        operator delete(v96[0]);
      }
      __p[0] = v97;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v98;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v1 = v68 + 34;
      if (v1 == v85) {
        return;
      }
    }
    uint64_t v4 = (char *)*v1;
    while (1)
    {
      uint64_t v5 = (_DWORD *)*((void *)v4 + 11);
      int v6 = (_DWORD *)*((void *)v4 + 12);
      if (v5 != v6)
      {
        while ((*v5 & 0x80000000) == 0)
        {
          if (++v5 == v6) {
            goto LABEL_9;
          }
        }
      }
      if (v5 != v6) {
        break;
      }
LABEL_9:
      int v7 = (_DWORD *)*((void *)v4 + 14);
      float v8 = (_DWORD *)*((void *)v4 + 15);
      if (v7 != v8)
      {
        while ((*v7 & 0x80000000) == 0)
        {
          if (++v7 == v8) {
            goto LABEL_14;
          }
        }
      }
      if (v7 != v8) {
        return;
      }
LABEL_14:
      v4 += 240;
      if (v4 == v2)
      {
        if (v3 == v2) {
          goto LABEL_65;
        }
        unsigned int v9 = 0;
        uint64_t v10 = (char *)*v1;
        do
        {
          unint64_t v12 = (int *)*((void *)v10 + 11);
          uint64_t v11 = (int *)*((void *)v10 + 12);
          if (v12 == v11)
          {
            uint64_t v11 = (int *)*((void *)v10 + 11);
          }
          else
          {
            while ((*v12 & 0x80000000) == 0)
            {
              if (++v12 == v11) {
                goto LABEL_30;
              }
            }
            if (v12 != v11)
            {
              for (uint64_t i = v12 + 1; i != v11; ++i)
              {
                if ((*i & 0x80000000) == 0) {
                  *v12++ = *i;
                }
              }
            }
            if (v12 != v11)
            {
              uint64_t v11 = v12;
              *((void *)v10 + 12) = v12;
            }
          }
LABEL_30:
          unint64_t v15 = (int *)*((void *)v10 + 14);
          unint64_t v14 = (int *)*((void *)v10 + 15);
          if (v15 != v14)
          {
            while ((*v15 & 0x80000000) == 0)
            {
              if (++v15 == v14) {
                goto LABEL_42;
              }
            }
            if (v15 != v14)
            {
              for (uint64_t j = v15 + 1; j != v14; ++j)
              {
                if ((*j & 0x80000000) == 0) {
                  *v15++ = *j;
                }
              }
            }
            if (v15 != v14)
            {
              *((void *)v10 + 15) = v15;
              goto LABEL_43;
            }
LABEL_42:
            unint64_t v15 = v14;
          }
LABEL_43:
          float v17 = (int *)*((void *)v10 + 11);
          if (v17 != v11)
          {
            float v18 = v17 + 1;
            if (v17 + 1 != v11)
            {
              int v19 = *v17;
              uint64_t v20 = v17 + 1;
              do
              {
                int v22 = *v20++;
                int v21 = v22;
                BOOL v23 = v19 < v22;
                if (v19 <= v22) {
                  int v19 = v21;
                }
                if (v23) {
                  float v17 = v18;
                }
                float v18 = v20;
              }
              while (v20 != v11);
            }
            if ((int)v9 <= *v17 + 1) {
              unsigned int v9 = *v17 + 1;
            }
          }
          unint64_t v24 = (int *)*((void *)v10 + 14);
          if (v24 != v15)
          {
            int v25 = v24 + 1;
            if (v24 + 1 != v15)
            {
              int v26 = *v24;
              long long v27 = v24 + 1;
              do
              {
                int v29 = *v27++;
                int v28 = v29;
                BOOL v30 = v26 < v29;
                if (v26 <= v29) {
                  int v26 = v28;
                }
                if (v30) {
                  unint64_t v24 = v25;
                }
                int v25 = v27;
              }
              while (v27 != v15);
            }
            int v31 = *v24;
            if ((int)v9 <= v31 + 1) {
              unsigned int v9 = v31 + 1;
            }
          }
          v10 += 240;
        }
        while (v10 != v2);
        goto LABEL_66;
      }
    }
  }
}

void sub_20CE7C8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  a17 = (void *)(v27 - 136);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (void *)(v27 - 112);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<std::vector<BOOL>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20CE7CAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v5 = *(void **)(i - 24);
    uint64_t v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::deque<std::pair<int,int>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<std::pair<int,int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char **>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char **>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char **>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20CE7D084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Shortlist::Clear(kaldi::quasar::Shortlist *this)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 11);
  std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, *(void *)this);
  std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 64, *((void *)this + 8));
  std::vector<kaldi::MappableVector<int>>::resize((uint64_t *)this, 3uLL);
  std::vector<kaldi::MappableVector<int>>::resize((uint64_t *)this + 8, 2uLL);
  kaldi::Matrix<float>::Resize((uint64_t)this + 24, 0, 0, 0, 0);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_20CE7D39C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MappableVector<int>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) && *(void *)a1) {
    MEMORY[0x2105595C0]();
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return a1;
}

uint64_t kaldi::quasar::Shortlist::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::quasar::Shortlist::Clear((kaldi::quasar::Shortlist *)a1);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<ShortlistTable>");
  long long v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v30, v8, v9);
    if (SHIBYTE(v32) < 0)
    {
      if (v31 == 16)
      {
        uint64_t v12 = (uint64_t *)v30;
LABEL_8:
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        if (v14 == 0x6853746F7669503CLL && v13 == 0x3E7473696C74726FLL) {
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 520), v10, v11);
        }
      }
    }
    else if (SHIBYTE(v32) == 16)
    {
      uint64_t v12 = (uint64_t *)&v30;
      goto LABEL_8;
    }
  }
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      int64_t v33 = 0;
      uint64_t v34 = 0;
      kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v34, &v33);
      if (__p.__begin_ != __p.__end_)
      {
        int64_t v28 = __p.__end_ - __p.__begin_;
        char v29 = 1;
        operator new[]();
      }
      int64_t v28 = v33;
      char v29 = 0;
      uint64_t v27 = v34;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      kaldi::MappableVector<int>::operator=(*(void *)a1 + v16, (uint64_t)&v27);
      if (v29 && v27) {
        MEMORY[0x2105595C0](v27, 0x1000C8077774924);
      }
      if (!*(void *)(*(void *)a1 + v16 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", (const char *)0x88, "!shortlist_cond_table_flat_[i].empty()", v18);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  }
  if (*(unsigned char *)(a1 + 520))
  {
    kaldi::Matrix<float>::Read(a1 + 24, a2, a3, 0, a4);
    if (!(4 * *(int *)(a1 + 36) * (uint64_t)*(int *)(a1 + 40))) {
      kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", (const char *)0x8D, "shortlist_cond_probs_flat_.SizeInBytes() != 0", v19);
    }
  }
  if (*(void *)(a1 + 72) != *(void *)(a1 + 64))
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      int64_t v33 = 0;
      uint64_t v34 = 0;
      kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v34, &v33);
      if (__p.__begin_ != __p.__end_)
      {
        int64_t v28 = __p.__end_ - __p.__begin_;
        char v29 = 1;
        operator new[]();
      }
      int64_t v28 = v33;
      char v29 = 0;
      uint64_t v27 = v34;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      kaldi::MappableVector<int>::operator=(*(void *)(a1 + 64) + v20, (uint64_t)&v27);
      if (v29 && v27) {
        MEMORY[0x2105595C0](v27, 0x1000C8077774924);
      }
      uint64_t v23 = *(void *)(a1 + 64);
      if (!*(void *)(v23 + v20 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", (const char *)0x92, "!shortlist_freq_word_flat_[i].empty()", v22);
      }
      ++v21;
      v20 += 24;
    }
    while (v21 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v23) >> 3));
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<ShortlistLangPairs>");
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadToken(a2, a3, (uint64_t)&__p, v24, v25);
  kaldi::SplitStringToVector((const std::string *)&__p, ",", 0, a1 + 88);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  return 1;
}

void sub_20CE7D884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(void *a1, uint64_t a2, int **a3, int a4, int a5, int a6, int a7)
{
  uint64_t v12 = (uint64_t *)a1[8];
  if (v12[1] <= (unint64_t)(a5 + 1))
  {
    int v14 = *((_DWORD *)v12 + 8);
    uint64_t v13 = *v12;
  }
  else
  {
    uint64_t v13 = *v12;
    int v14 = *(_DWORD *)(v13 + 4 * (a5 + 1));
  }
  int v15 = v14 - *(_DWORD *)(v13 + 4 * a5);
  if (v15 >= a7) {
    int v15 = a7;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v15;
    do
    {
      v96[0] = *(_DWORD *)(*(void *)(a1[8] + 24) + 4 * ((int)v16 + *(_DWORD *)(*(void *)a1[8] + 4 * a5)));
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, v96, v96);
      ++v16;
    }
    while (v17 != v16);
  }
  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v96, *a3, a3[1]);
  uint64_t v18 = v97;
  if (v97)
  {
    int v85 = a6;
    do
    {
      int v19 = *(_DWORD *)(v18 + 16);
      int v20 = kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>((uint64_t)a1, a4, v19);
      unint64_t v88 = (uint64_t *)v18;
      long long v93 = 0u;
      long long v94 = 0u;
      int v95 = 1065353216;
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>((uint64_t)&v93, v20 * a6);
      if (v20 >= 1)
      {
        unint64_t v23 = *(int *)(*(void *)(*a1 + 24) + 4 * (*(_DWORD *)(*(void *)*a1 + 4 * a4) + v19));
        if (v23 < (int)v23 + v20)
        {
          unint64_t v24 = (int)v23 + v20;
          do
          {
            int v25 = *(_DWORD *)(*(void *)(*a1 + 48) + 4 * v23);
            float v26 = *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)(a1 + 3), v23, 0, v21, v22);
            int v27 = kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>((uint64_t)a1, a5, v25);
            if (v27 >= 1)
            {
              unint64_t v28 = *(int *)(*(void *)(*a1 + 24) + 4 * (*(_DWORD *)(*(void *)*a1 + 4 * a5) + v25));
              if (v28 < (int)v28 + v27)
              {
                unint64_t v29 = (int)v28 + v27;
                double v30 = v26;
                do
                {
                  int v92 = 0;
                  int v92 = *(_DWORD *)(*(void *)(*a1 + 48) + 4 * v28);
                  float v31 = *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)(a1 + 3), v28, 0, v21, v22);
                  uint64_t v32 = std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::find<int>(&v93, &v92);
                  double v33 = v30 * v31;
                  if (v32)
                  {
                    *((double *)v32 + 3) = v33 + *((double *)v32 + 3);
                  }
                  else
                  {
                    std::vector<int> __p = &v92;
                    *((double *)std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v93, &v92, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 3) = v33;
                  }
                  ++v28;
                }
                while (v28 < v29);
              }
            }
            ++v23;
          }
          while (v23 < v24);
        }
      }
      unint64_t v90 = 0;
      uint64_t v91 = 0;
      std::vector<int> __p = 0;
      unint64_t v34 = 0;
      if ((void)v94)
      {
        BOOL v35 = (void *)v94;
        do
        {
          ++v34;
          BOOL v35 = (void *)*v35;
        }
        while (v35);
      }
      std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>>((char *)&__p, (uint64_t *)v94, 0, v34);
      uint64_t v37 = (double *)__p;
      uint64_t v36 = v90;
      unint64_t v38 = (unint64_t)((char *)v90 - (unsigned char *)__p) >> 4;
      if ((int)v38 >= a6) {
        LODWORD(v38) = a6;
      }
      int v87 = v38;
      uint64_t v39 = (char *)__p + 16 * (int)v38;
      if (v39 != (char *)v90)
      {
        do
        {
          unint64_t v40 = ((char *)v36 - (char *)v37) >> 4;
          if (v40 < 2) {
            break;
          }
          if (v40 == 3)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(std::unordered_set<int> &,std::vector<int> const&,int,int,int,int)::$_0 &,std::__wrap_iter<std::pair<int,double> *>>(v37, v37 + 2, v36 - 2);
            break;
          }
          if (v40 == 2)
          {
            double v74 = *(v36 - 1);
            double v75 = v37[1];
            if (v74 > v75)
            {
              int v76 = *(_DWORD *)v37;
              *(_DWORD *)uint64_t v37 = *((_DWORD *)v36 - 4);
              *((_DWORD *)v36 - 4) = v76;
              v37[1] = v74;
              *(v36 - 1) = v75;
            }
            break;
          }
          if ((char *)v36 - (char *)v37 <= 127)
          {
            while (v37 != v36 - 2)
            {
              long long v77 = v37;
              v37 += 2;
              if (v77 != v36 && v37 != v36)
              {
                uint64_t v78 = v37;
                unint64_t v79 = v77;
                do
                {
                  if (v78[1] > v79[1]) {
                    unint64_t v79 = v78;
                  }
                  v78 += 2;
                }
                while (v78 != v36);
                if (v79 != v77)
                {
                  int v80 = *(_DWORD *)v77;
                  *(_DWORD *)long long v77 = *(_DWORD *)v79;
                  *(_DWORD *)unint64_t v79 = v80;
                  uint64_t v81 = *((void *)v77 + 1);
                  v77[1] = v79[1];
                  *((void *)v79 + 1) = v81;
                }
              }
            }
            break;
          }
          unint64_t v41 = &v37[2 * (v40 >> 1)];
          uint64_t v42 = v36 - 2;
          int v43 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(std::unordered_set<int> &,std::vector<int> const&,int,int,int,int)::$_0 &,std::__wrap_iter<std::pair<int,double> *>>(v37, v41, v36 - 2);
          double v44 = v37[1];
          double v45 = v41[1];
          if (v44 <= v45)
          {
            uint64_t v47 = v36 - 2;
            while (1)
            {
              unint64_t v46 = (unint64_t)(v47 - 2);
              if (v47 - 2 == v37) {
                break;
              }
              double v48 = *(v47 - 1);
              v47 -= 2;
              if (v48 > v45)
              {
                int v49 = *(_DWORD *)v37;
                *(_DWORD *)uint64_t v37 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v49;
                v37[1] = v48;
                *(double *)(v46 + 8) = v44;
                ++v43;
                goto LABEL_38;
              }
            }
            unint64_t v63 = v37 + 2;
            double v64 = *(v36 - 1);
            if (v44 <= v64)
            {
              while (v63 != v42)
              {
                double v65 = v63[1];
                if (v44 > v65)
                {
                  int v69 = *(_DWORD *)v63;
                  *(_DWORD *)unint64_t v63 = *((_DWORD *)v36 - 4);
                  *((_DWORD *)v36 - 4) = v69;
                  v63[1] = v64;
                  *(v36 - 1) = v65;
                  v63 += 2;
                  goto LABEL_70;
                }
                v63 += 2;
              }
              break;
            }
LABEL_70:
            if (v63 == v42) {
              break;
            }
            while (1)
            {
              double v70 = v37[1];
              unint64_t v60 = v63 - 2;
              do
              {
                double v71 = v60[3];
                v60 += 2;
              }
              while (v70 <= v71);
              unint64_t v63 = v60 + 2;
              do
              {
                double v72 = *(v42 - 1);
                v42 -= 2;
              }
              while (v70 > v72);
              if (v60 >= v42) {
                break;
              }
              int v73 = *(_DWORD *)v60;
              *(_DWORD *)unint64_t v60 = *(_DWORD *)v42;
              *(_DWORD *)uint64_t v42 = v73;
              v60[1] = v72;
              v42[1] = v71;
            }
            if (v60 > (double *)v39) {
              break;
            }
          }
          else
          {
            unint64_t v46 = (unint64_t)(v36 - 2);
LABEL_38:
            uint64_t v50 = v37 + 2;
            if ((unint64_t)(v37 + 2) >= v46)
            {
              uint64_t v53 = v37 + 2;
            }
            else
            {
              unint64_t v51 = v37 + 2;
              while (1)
              {
                double v52 = v41[1];
                uint64_t v53 = v51 - 2;
                do
                {
                  double v54 = v53[3];
                  v53 += 2;
                }
                while (v54 > v52);
                unint64_t v51 = v53 + 2;
                do
                {
                  double v55 = *(double *)(v46 - 8);
                  v46 -= 16;
                }
                while (v55 <= v52);
                if ((unint64_t)v53 >= v46) {
                  break;
                }
                int v56 = *(_DWORD *)v53;
                *(_DWORD *)uint64_t v53 = *(_DWORD *)v46;
                *(_DWORD *)unint64_t v46 = v56;
                v53[1] = v55;
                *(double *)(v46 + 8) = v54;
                ++v43;
                if (v53 == v41) {
                  unint64_t v41 = (double *)v46;
                }
              }
            }
            if (v53 != v41)
            {
              double v57 = v41[1];
              double v58 = v53[1];
              if (v57 > v58)
              {
                int v59 = *(_DWORD *)v53;
                *(_DWORD *)uint64_t v53 = *(_DWORD *)v41;
                *(_DWORD *)unint64_t v41 = v59;
                v53[1] = v57;
                v41[1] = v58;
                ++v43;
              }
            }
            if (v53 == (double *)v39) {
              break;
            }
            if (!v43)
            {
              if (v53 <= (double *)v39)
              {
                long long v66 = v53 + 2;
                while (v66 != v36)
                {
                  double v67 = v66[1];
                  double v68 = *(v66 - 1);
                  v66 += 2;
                  if (v67 > v68) {
                    goto LABEL_54;
                  }
                }
              }
              else
              {
                while (v50 != v53)
                {
                  double v61 = v50[1];
                  double v62 = *(v50 - 1);
                  v50 += 2;
                  if (v61 > v62) {
                    goto LABEL_54;
                  }
                }
              }
              break;
            }
LABEL_54:
            if (v53 <= (double *)v39)
            {
              unint64_t v60 = v53 + 2;
            }
            else
            {
              uint64_t v36 = v53;
              unint64_t v60 = v37;
            }
          }
          uint64_t v37 = v60;
        }
        while (v36 != (double *)v39);
      }
      uint64_t v82 = v87;
      if (v87)
      {
        uint64_t v83 = 0;
        do
        {
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, (int *)((char *)__p + v83), (char *)__p + v83);
          v83 += 16;
          --v82;
        }
        while (v82);
      }
      if (__p)
      {
        unint64_t v90 = (double *)__p;
        operator delete(__p);
      }
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v93);
      uint64_t v18 = *v88;
      a6 = v85;
    }
    while (*v88);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v96);
}

void sub_20CE7DF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(int *)(**(void **)a1 + 4 * a2) + (uint64_t)a3;
  if (*(void *)(*(void *)a1 + 32) <= (unint64_t)(v4 + 1))
  {
    int v6 = *((_DWORD *)v3 + 14);
    uint64_t v5 = v3[3];
  }
  else
  {
    uint64_t v5 = v3[3];
    int v6 = *(_DWORD *)(v5 + 4 * (v4 + 1));
  }
  return (v6 - *(_DWORD *)(v5 + 4 * (int)v4));
}

uint64_t kaldi::quasar::Shortlist::GetConstrainedIdxFromDirectShortlist(uint64_t result, uint64_t a2, uint64_t *a3, int a4, int a5, int a6)
{
  uint64_t v10 = (void *)result;
  uint64_t v11 = *(uint64_t **)(result + 64);
  if (v11[1] <= (unint64_t)(a4 + 1))
  {
    int v13 = *((_DWORD *)v11 + 8);
    uint64_t v12 = *v11;
  }
  else
  {
    uint64_t v12 = *v11;
    int v13 = *(_DWORD *)(v12 + 4 * (a4 + 1));
  }
  int v14 = v13 - *(_DWORD *)(v12 + 4 * a4);
  if (v14 >= a6) {
    int v14 = a6;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v14;
    do
    {
      int v24 = *(_DWORD *)(*(void *)(v10[8] + 24) + 4 * ((int)v15 + *(_DWORD *)(*(void *)v10[8] + 4 * a4)));
      uint64_t result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, &v24, &v24);
      ++v15;
    }
    while (v16 != v15);
  }
  uint64_t v17 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v18 = 0;
    do
    {
      int v19 = *(_DWORD *)(v17 + 4 * v18);
      uint64_t result = kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>((uint64_t)v10, a4, v19);
      if ((int)result >= a5) {
        int v20 = a5;
      }
      else {
        int v20 = result;
      }
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)(*(void *)(*v10 + 48)
                          + 4
                          * ((int)v21
                           + *(_DWORD *)(*(void *)(*v10 + 24) + 4
                                                                  * (*(_DWORD *)(*(void *)*v10 + 4 * a4) + v19))));
          uint64_t result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, &v23, &v23);
          ++v21;
        }
        while (v22 != v21);
      }
      ++v18;
      uint64_t v17 = *a3;
    }
    while (v18 < (a3[1] - *a3) >> 2);
  }
  return result;
}

uint64_t kaldi::quasar::Shortlist::MapShortlist(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, uint64_t *a7, int **a8, void *a9, char a10)
{
  int v134 = a4;
  int v135 = a3;
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 == v13)
  {
    BOOL v119 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = (v12 - v13) / 24;
    uint64_t v16 = a2[23];
    uint64_t v17 = *(const void **)a2;
    size_t v18 = *((void *)a2 + 1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v19 = a2[23];
    }
    else {
      uint64_t v19 = *((void *)a2 + 1);
    }
    if (v15 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = (v12 - v13) / 24;
    }
    BOOL v119 = 1;
    do
    {
      uint64_t v122 = v14;
      uint64_t v21 = (unsigned __int8 *)(v13 + 24 * v14);
      uint64_t v22 = v21[23];
      int v23 = (char)v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *((void *)v21 + 1);
      }
      if (v19 == v22)
      {
        if (v23 >= 0) {
          int v24 = v21;
        }
        else {
          int v24 = *(unsigned __int8 **)v21;
        }
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp(v17, v24, v18)) {
            goto LABEL_26;
          }
        }
        else
        {
          if (!v16) {
            goto LABEL_26;
          }
          int v25 = a2;
          uint64_t v26 = v16;
          while (*v25 == *v24)
          {
            ++v25;
            ++v24;
            if (!--v26) {
              goto LABEL_26;
            }
          }
        }
      }
      uint64_t v14 = v122 + 1;
      BOOL v119 = v15 > v122 + 1;
    }
    while (v122 + 1 != v20);
  }
  LODWORD(v122) = -1;
LABEL_26:
  int v27 = *(unsigned __int8 *)(a1 + 520);
  if (*(unsigned char *)(a1 + 520))
  {
    if (v12 != v13)
    {
      unint64_t v28 = 0;
      char v123 = 0;
      int v120 = -1;
      int v121 = -1;
      while (v12 == v13)
      {
LABEL_145:
        if ((v123 & 1) == 0)
        {
          ++v28;
          uint64_t v13 = *(void *)(a1 + 88);
          uint64_t v12 = *(void *)(a1 + 96);
          if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) > v28) {
            continue;
          }
        }
        goto LABEL_150;
      }
      uint64_t v29 = 0;
      while (1)
      {
        if (v28 == v29) {
          goto LABEL_139;
        }
        __p[0] = 0;
        __p[1] = 0;
        v126[0] = 0;
        memset(__s1, 0, 24);
        long long v129 = 0uLL;
        *(void *)&long long v130 = 0;
        memset(&v133, 0, sizeof(v133));
        double v30 = (const std::string *)(v13 + 24 * v28);
        if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v32 = (const std::string *)v30->__r_.__value_.__r.__words[0];
          int64_t size = v30->__r_.__value_.__l.__size_;
        }
        else
        {
          int64_t size = HIBYTE(v30->__r_.__value_.__r.__words[2]);
          uint64_t v32 = v30;
        }
        double v33 = (char *)v32 + size;
        if (size >= 1)
        {
          unint64_t v34 = (std::string *)v32;
          do
          {
            BOOL v35 = (char *)memchr(v34, 45, size);
            if (!v35) {
              break;
            }
            if (*v35 == 45) {
              goto LABEL_41;
            }
            unint64_t v34 = (std::string *)(v35 + 1);
            int64_t size = v33 - (char *)v34;
          }
          while (v33 - (char *)v34 > 0);
        }
        BOOL v35 = v33;
LABEL_41:
        if (v35 == v33) {
          std::string::size_type v36 = -1;
        }
        else {
          std::string::size_type v36 = v35 - (char *)v32;
        }
        std::string::basic_string(&v132, v30, 0, v36, (std::allocator<char> *)v136);
        if (SHIBYTE(v126[0]) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::vector<int> __p = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        v126[0] = *((void *)&v132.__r_.__value_.__l + 2);
        uint64_t v37 = *(void *)(a1 + 88) + 24 * v28;
        if (*(char *)(v37 + 23) < 0)
        {
          uint64_t v39 = *(void *)v37;
          int64_t v38 = *(void *)(v37 + 8);
        }
        else
        {
          int64_t v38 = *(unsigned __int8 *)(v37 + 23);
          uint64_t v39 = *(void *)(a1 + 88) + 24 * v28;
        }
        unint64_t v40 = (unsigned char *)(v39 + v38);
        if (v38 >= 1)
        {
          unint64_t v41 = (void *)v39;
          do
          {
            uint64_t v42 = memchr(v41, 45, v38);
            if (!v42) {
              break;
            }
            if (*v42 == 45) {
              goto LABEL_55;
            }
            unint64_t v41 = v42 + 1;
            int64_t v38 = v40 - (unsigned char *)v41;
          }
          while (v40 - (unsigned char *)v41 > 0);
        }
        uint64_t v42 = v40;
LABEL_55:
        if (v42 == v40) {
          std::string::size_type v43 = 0;
        }
        else {
          std::string::size_type v43 = (std::string::size_type)&v42[-v39 + 1];
        }
        std::string::basic_string(&v132, (const std::string *)v37, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v136);
        if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1[0].__r_.__value_.__l.__data_);
        }
        __s1[0] = v132;
        uint64_t v44 = *(void *)(a1 + 88) + 24 * v29;
        if (*(char *)(v44 + 23) < 0)
        {
          uint64_t v46 = *(void *)v44;
          int64_t v45 = *(void *)(v44 + 8);
        }
        else
        {
          int64_t v45 = *(unsigned __int8 *)(v44 + 23);
          uint64_t v46 = *(void *)(a1 + 88) + 24 * v29;
        }
        uint64_t v47 = (unsigned char *)(v46 + v45);
        if (v45 >= 1)
        {
          double v48 = (void *)v46;
          do
          {
            int v49 = memchr(v48, 45, v45);
            if (!v49) {
              break;
            }
            if (*v49 == 45) {
              goto LABEL_69;
            }
            double v48 = v49 + 1;
            int64_t v45 = v47 - (unsigned char *)v48;
          }
          while (v47 - (unsigned char *)v48 > 0);
        }
        int v49 = v47;
LABEL_69:
        if (v49 == v47) {
          std::string::size_type v50 = -1;
        }
        else {
          std::string::size_type v50 = (std::string::size_type)&v49[-v46];
        }
        std::string::basic_string(&v132, (const std::string *)v44, 0, v50, (std::allocator<char> *)v136);
        if (SBYTE7(v130) < 0) {
          operator delete((void *)v129);
        }
        long long v129 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *(void *)&long long v130 = *((void *)&v132.__r_.__value_.__l + 2);
        uint64_t v51 = *(void *)(a1 + 88) + 24 * v29;
        if (*(char *)(v51 + 23) < 0)
        {
          uint64_t v53 = *(void *)v51;
          int64_t v52 = *(void *)(v51 + 8);
        }
        else
        {
          int64_t v52 = *(unsigned __int8 *)(v51 + 23);
          uint64_t v53 = *(void *)(a1 + 88) + 24 * v29;
        }
        double v54 = (unsigned char *)(v53 + v52);
        if (v52 >= 1)
        {
          double v55 = (void *)v53;
          do
          {
            int v56 = memchr(v55, 45, v52);
            if (!v56) {
              break;
            }
            if (*v56 == 45) {
              goto LABEL_83;
            }
            double v55 = v56 + 1;
            int64_t v52 = v54 - (unsigned char *)v55;
          }
          while (v54 - (unsigned char *)v55 > 0);
        }
        int v56 = v54;
LABEL_83:
        if (v56 == v54) {
          std::string::size_type v57 = -1;
        }
        else {
          std::string::size_type v57 = (std::string::size_type)&v56[-v53];
        }
        std::string::basic_string(&v132, (const std::string *)v51, v57, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v136);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        std::string v133 = v132;
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)&v133.__r_.__value_.__l.__data_, (uint64_t)&v132);
        uint64_t v58 = a2[23];
        if ((v58 & 0x80u) == 0) {
          uint64_t v59 = a2[23];
        }
        else {
          uint64_t v59 = *((void *)a2 + 1);
        }
        std::string::size_type v60 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        int v61 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v60 = v132.__r_.__value_.__l.__size_;
        }
        if (v59 != v60) {
          goto LABEL_104;
        }
        double v62 = (void *)v132.__r_.__value_.__r.__words[0];
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v63 = &v132;
        }
        else {
          unint64_t v63 = (std::string *)v132.__r_.__value_.__r.__words[0];
        }
        if ((v58 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v63, *((void *)a2 + 1))) {
            goto LABEL_104;
          }
        }
        else if (a2[23])
        {
          double v64 = a2;
          while (*v64 == v63->__r_.__value_.__s.__data_[0])
          {
            ++v64;
            unint64_t v63 = (std::string *)((char *)v63 + 1);
            if (!--v58) {
              goto LABEL_106;
            }
          }
LABEL_104:
          if (v61 < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
LABEL_128:
          int v77 = 1;
          goto LABEL_129;
        }
LABEL_106:
        if ((__s1[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v65 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v65 = __s1[0].__r_.__value_.__l.__size_;
        }
        uint64_t v66 = BYTE7(v130);
        if (SBYTE7(v130) < 0) {
          uint64_t v66 = *((void *)&v129 + 1);
        }
        if (v65 == v66)
        {
          if ((SBYTE7(v130) & 0x80u) == 0) {
            double v67 = (unsigned __int8 *)&v129;
          }
          else {
            double v67 = (unsigned __int8 *)v129;
          }
          if ((*((unsigned char *)&__s1[0].__r_.__value_.__s + 23) & 0x80) != 0)
          {
            BOOL v76 = memcmp(__s1[0].__r_.__value_.__l.__data_, v67, __s1[0].__r_.__value_.__l.__size_) == 0;
            if ((v61 & 0x80000000) == 0) {
              goto LABEL_124;
            }
          }
          else if (*((unsigned char *)&__s1[0].__r_.__value_.__s + 23))
          {
            uint64_t v68 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]) - 1;
            int v69 = __s1;
            do
            {
              int v71 = v69->__r_.__value_.__s.__data_[0];
              int v69 = (std::string *)((char *)v69 + 1);
              int v70 = v71;
              int v73 = *v67++;
              int v72 = v73;
              BOOL v75 = v68-- != 0;
              BOOL v76 = v70 == v72;
            }
            while (v70 == v72 && v75);
            if ((v61 & 0x80000000) == 0)
            {
LABEL_124:
              if (!v76) {
                goto LABEL_128;
              }
              goto LABEL_125;
            }
          }
          else
          {
            BOOL v76 = 1;
            if ((v61 & 0x80000000) == 0) {
              goto LABEL_124;
            }
          }
        }
        else
        {
          BOOL v76 = 0;
          if ((v61 & 0x80000000) == 0) {
            goto LABEL_124;
          }
        }
        operator delete(v62);
        if (!v76) {
          goto LABEL_128;
        }
LABEL_125:
        int v77 = 0;
        char v123 = 1;
        int v120 = v29;
        int v121 = v28;
LABEL_129:
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v130) < 0) {
          operator delete((void *)v129);
        }
        if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v126[0]) < 0) {
          operator delete(__p[0]);
        }
        if (!v77) {
          goto LABEL_145;
        }
        uint64_t v13 = *(void *)(a1 + 88);
        uint64_t v12 = *(void *)(a1 + 96);
LABEL_139:
        if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) <= ++v29) {
          goto LABEL_145;
        }
      }
    }
    char v123 = 0;
    int v120 = -1;
    int v121 = -1;
LABEL_150:
    int v27 = v123 & 1;
    int v78 = v120;
    int v79 = v121;
  }
  else
  {
    int v78 = -1;
    int v79 = -1;
  }
  if (((v119 | v27) & 1) == 0 || (a6 + a5 < 0) ^ __OFADD__(a6, a5) | (a6 + a5 == 0))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 306);
      int v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Has shortlist, but dissabled due to shortlist-lang-pair = ", 58);
      int v81 = (char)a2[23];
      if (v81 >= 0) {
        uint64_t v82 = (uint64_t)a2;
      }
      else {
        uint64_t v82 = *(void *)a2;
      }
      if (v81 >= 0) {
        uint64_t v83 = a2[23];
      }
      else {
        uint64_t v83 = *((void *)a2 + 1);
      }
      int v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)", lp = ", 7);
      int v85 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)", shortlist-cond-n = ", 21);
      uint64_t v86 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", shortlist-freq-n = ", 21);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    if (!a10)
    {
      uint64_t result = 0;
      *(void *)(a1 + 120) = *(void *)(a1 + 112);
      return result;
    }
    uint64_t v87 = *(void *)a1;
    if (*(void *)(*(void *)a1 + 8) < 2uLL)
    {
      int v89 = *(_DWORD *)(v87 + 32);
      unint64_t v88 = *(_DWORD **)v87;
    }
    else
    {
      unint64_t v88 = *(_DWORD **)v87;
      int v89 = v88[1];
    }
    int v110 = v89 - *v88 - 1;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 313);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shortlist is disabled, and fallback to use full vocab (", 55);
      float v111 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)") instead.", 10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 112), v110);
    float v112 = *(_DWORD **)(a1 + 112);
    uint64_t v113 = *(_DWORD **)(a1 + 120);
    if (v112 != v113)
    {
      int v114 = 0;
      do
        *v112++ = v114++;
      while (v112 != v113);
    }
    *(_DWORD *)(a1 + 136) = v135;
  }
  else
  {
    long long v129 = 0u;
    long long v130 = 0u;
    int v131 = 1065353216;
    if (v119) {
      kaldi::quasar::Shortlist::GetConstrainedIdxFromDirectShortlist(a1, (uint64_t)&v129, a7, v122, a5, a6);
    }
    else {
      kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist((void *)a1, (uint64_t)&v129, (int **)a7, v79, v78, a5, a6);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, &v135, &v135);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, &v134, &v134);
    unint64_t v90 = (int *)*a7;
    uint64_t v91 = (int *)a7[1];
    while (v90 != v91)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, v90, v90);
      ++v90;
    }
    int v92 = *a8;
    long long v93 = a8[1];
    while (v92 != v93)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, v92, v92);
      ++v92;
    }
    long long v94 = (void *)*a9;
    if ((void *)*a9 != a9 + 1)
    {
      do
      {
        LODWORD(__p[0]) = *((_DWORD *)v94 + 7);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(&v129, (int *)__p);
        int v95 = (void *)v94[1];
        if (v95)
        {
          do
          {
            uint64_t v96 = v95;
            int v95 = (void *)*v95;
          }
          while (v95);
        }
        else
        {
          do
          {
            uint64_t v96 = (void *)v94[2];
            BOOL v97 = *v96 == (void)v94;
            long long v94 = v96;
          }
          while (!v97);
        }
        long long v94 = v96;
      }
      while (v96 != a9 + 1);
    }
    int v98 = *(int **)(a1 + 112);
    *(void *)(a1 + 120) = v98;
    if ((void)v130)
    {
      uint64_t v99 = 0;
      int v100 = (void *)v130;
      do
      {
        ++v99;
        int v100 = (void *)*v100;
      }
      while (v100);
    }
    else
    {
      uint64_t v99 = 0;
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>((std::vector<int> *)(a1 + 112), v98, (void *)v130, 0, v99);
    std::__sort<std::__less<int,int> &,int *>();
    unint64_t v102 = *(__int32 **)(a1 + 120);
    int v103 = wmemchr(*(__int32 **)(a1 + 112), v135, ((uint64_t)v102 - *(void *)(a1 + 112)) >> 2);
    if (v103) {
      uint64_t v104 = v103;
    }
    else {
      uint64_t v104 = v102;
    }
    *(_DWORD *)(a1 + 136) = ((unint64_t)v104 - *(void *)(a1 + 112)) >> 2;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 353);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using shortlist, reducing Voc size to ", 38);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"Shortlisted vocabulary:", 23);
        uint64_t v105 = *(void *)(a1 + 112);
        for (uint64_t i = *(void *)(a1 + 120); v105 != i; v105 += 4)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)" ", 1);
          std::ostream::operator<<();
        }
        if (kaldi::g_kaldi_verbose_level > 4)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__s1, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 361, 5);
          std::stringbuf::str();
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v107 = &v133;
          }
          else {
            uint64_t v107 = (std::string *)v133.__r_.__value_.__r.__words[0];
          }
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v108 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v108 = v133.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)v107, v108);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__s1);
        }
        __p[0] = *(void **)MEMORY[0x263F8C2B8];
        uint64_t v109 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
        v126[0] = v109;
        v126[1] = MEMORY[0x263F8C318] + 16;
        if (v127 < 0) {
          operator delete((void *)v126[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x210559500](&v128);
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v129);
  }
  return 1;
}

void sub_20CE7ECF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a56);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v61 - 208);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t kaldi::quasar::Shortlist::ConstrainSoftmax(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, uint64_t *a7, uint64_t a8, int **a9, void *a10)
{
  if (kaldi::quasar::Shortlist::MapShortlist(a1, a2, a3, a4, a5, a6, a7, a9, a10, 0)) {
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v11);
  }
  return 0;
}

void sub_20CE7F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::QuantizedAffineTransform<signed char>>(int a1, void *lpsrc)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20CE7F454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::QuantizedAffineTransform<short>>(int a1, void *lpsrc)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20CE7F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::AffineTransform>(int a1, void *lpsrc)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20CE7FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>>(int a1, void *lpsrc)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20CE7FC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>>(int a1, void *lpsrc)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20CE7FDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>>(int a1, void *lpsrc)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20CE80014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Shortlist::ConstructNnet(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v3);
}

void sub_20CE80170(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::MappableVector<int>>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3) {
    return (uint64_t *)std::vector<kaldi::MappableVector<int>>::__append(result, v4);
  }
  if (!v3) {
    return (uint64_t *)std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)result, *result + 24 * a2);
  }
  return result;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  unint64_t v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_20CE80348(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20CE80350(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      size_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20CE80440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        size_t v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    size_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_20CE806FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    size_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      size_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    }
    else {
      size_t v18 = 0;
    }
    unint64_t v28 = &v18[4 * v15];
    std::vector<int> __p = v18;
    unint64_t v34 = v28;
    std::string::size_type v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    double v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)unint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    BOOL v35 = v30;
    uint64_t v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    int v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[4 * a5];
    int v25 = &v23[-4 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)uint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  int v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20CE808E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  size_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<std::string>::pointer end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  size_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20CE80CB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20CE80D34(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_20CE81058(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(_DWORD *)uint64_t v7 = *((_DWORD *)a2 + 4);
      *(void *)(v7 + 8) = a2[3];
      a2 = (uint64_t *)*a2;
      v7 += 16;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20CE810D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(std::unordered_set<int> &,std::vector<int> const&,int,int,int,int)::$_0 &,std::__wrap_iter<std::pair<int,double> *>>(double *a1, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a1[1];
  double v5 = a3[1];
  if (v3 > v4)
  {
    int v6 = *(_DWORD *)a1;
    if (v5 > v3)
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    double v11 = a3[1];
    if (v11 <= v4) {
      return 1;
    }
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    int v7 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    double v8 = a2[1];
    double v9 = a1[1];
    if (v8 <= v9) {
      return 1;
    }
    int v10 = *(_DWORD *)a1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(void *a1, int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  double v3 = __p;
  std::vector<int> __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  int v6 = *(void **)(*result + 8 * v4);
  do
  {
    int v7 = v6;
    int v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *int v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>(std::vector<int> *a1, int *__src, void *a3, void *a4, uint64_t a5)
{
  uint8x8_t v5 = __src;
  if (a5 >= 1)
  {
    int v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
    uint64_t v10 = value;
    unint64_t v12 = *((void *)p_end_cap - 1);
    if (a5 <= (uint64_t)((uint64_t)value - v12) >> 2)
    {
      unint64_t v19 = a5 + 1;
      unint64_t v20 = a3;
      do
      {
        unint64_t v20 = (void *)*v20;
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)__src) >> 2;
      if (v21 >= a5)
      {
        int v23 = (int *)*((void *)p_end_cap - 1);
        uint64_t v21 = a5;
      }
      else
      {
        if ((uint64_t)(v12 - (void)__src) < 1)
        {
          unint64_t v20 = a3;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          unint64_t v20 = a3;
          do
          {
            unint64_t v20 = (void *)*v20;
            --v22;
          }
          while (v22 > 1);
        }
        int v23 = (int *)*((void *)p_end_cap - 1);
        if (v20 != a4)
        {
          int v27 = v20;
          unint64_t v28 = (_DWORD *)*((void *)p_end_cap - 1);
          do
          {
            *v28++ = *((_DWORD *)v27 + 4);
            int v27 = (void *)*v27;
            ++v23;
          }
          while (v27 != a4);
        }
        a1->__end_ = v23;
      }
      if (v21 >= 1)
      {
        uint64_t v29 = (char *)&__src[a5];
        double v30 = &v23[-a5];
        int v31 = v23;
        if ((unint64_t)v30 < v12)
        {
          int v31 = v23;
          do
          {
            int v32 = *v30++;
            *v31++ = v32;
          }
          while ((unint64_t)v30 < v12);
        }
        a1->__end_ = v31;
        if (v23 != (int *)v29) {
          memmove(&v23[-(((char *)v23 - v29) >> 2)], __src, (char *)v23 - v29);
        }
        if (v20 != v7)
        {
          double v33 = v5;
          do
          {
            *v33++ = *((_DWORD *)v7 + 4);
            int v7 = (void *)*v7;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      std::vector<int>::pointer begin = (char *)a1->__begin_;
      unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
      if (v14 >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((char *)__src - begin) >> 2;
      uint64_t v16 = (char *)v10 - begin;
      if (v16 >> 1 > v14) {
        unint64_t v14 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v17) {
        size_t v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
      }
      else {
        size_t v18 = 0;
      }
      int v24 = &v18[v15];
      __v.__first_ = v18;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v18[v17];
      uint64_t v25 = 4 * a5;
      uint64_t v26 = &v24[a5];
      do
      {
        *v24++ = *((_DWORD *)v7 + 4);
        int v7 = (void *)*v7;
        v25 -= 4;
      }
      while (v25);
      __v.__end_ = v26;
      uint8x8_t v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
      if (__v.__end_ != __v.__begin_) {
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
      }
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
    }
  }
  return v5;
}

void sub_20CE81618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::SetLinearity(uint64_t a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  uint8x8_t v5 = (unsigned int *)(a1 + 48);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(v5)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x78, "linearity.NumRows() == linearity_.NumRows()", v6);
  }
  int v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v7 != kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)v5)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x79, "linearity.NumCols() == linearity_.NumCols()", v8);
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)v5, a2);
}

_DWORD *kaldi::nnet1::QuantizedAffineTransform<signed char>::SetBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 112)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetBias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x6D, "bias.Dim() == bias_.Dim()", a5);
  }
  uint8x8_t v5 = (_DWORD *)(a1 + 96);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v5, a2, a3, a4, a5);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::SetLinearity(uint64_t a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  uint8x8_t v5 = (unsigned int *)(a1 + 48);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(v5)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x78, "linearity.NumRows() == linearity_.NumRows()", v6);
  }
  int v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v7 != kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)v5)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x79, "linearity.NumCols() == linearity_.NumCols()", v8);
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)v5, a2);
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      int v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int v6 = a3[1];
    }
    if (v5 >= 0) {
      int v7 = (unsigned __int8 *)a3;
    }
    else {
      int v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        unint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        unint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  int v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  int v4 = this;
  char v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        int v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      int v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20CE81AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    if (*(unsigned char *)(i - 8))
    {
      uint64_t result = *(void *)(i - 24);
      if (result) {
        uint64_t result = MEMORY[0x2105595C0](result, 0x1000C8077774924);
      }
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<kaldi::MappableVector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      uint64_t v14 = 24 * a2;
      uint64_t v15 = (unsigned char *)(v7 + 16);
      do
      {
        *((void *)v15 - 1) = 0;
        *uint64_t v15 = 0;
        v15 += 24;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = *(void *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v19 = v12;
    unint64_t v20 = &v12[24 * v8];
    unint64_t v22 = &v12[24 * v11];
    uint64_t v16 = &v20[24 * a2];
    uint64_t v17 = 24 * a2;
    size_t v18 = v20 + 16;
    do
    {
      *((void *)v18 - 1) = 0;
      *size_t v18 = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    uint64_t v21 = v16;
    std::vector<kaldi::MappableVector<int>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<kaldi::MappableVector<int>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_20CE81D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::MappableVector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::MappableVector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(unsigned char *)(v9 - 8) = 0;
      v7 -= 24;
    }
    while (a3 + v7 != a5);
    *((void *)&v15 + 1) = a7 + v7;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 + 16))
    {
      uint64_t result = *(void *)v1;
      if (*(void *)v1) {
        uint64_t result = MEMORY[0x2105595C0](result, 0x1000C8077774924);
      }
    }
    v1 += 24;
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::MappableVector<int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<kaldi::MappableVector<int>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      int v5 = *((unsigned __int8 *)v2 - 8);
      v2 -= 3;
      *(void *)(v4 + 16) = v2;
      if (v5)
      {
        uint64_t result = *v2;
        if (*v2)
        {
          uint64_t result = MEMORY[0x2105595C0](result, 0x1000C8077774924);
          uint64_t v2 = *(uint64_t **)(v4 + 16);
        }
      }
    }
    while (v2 != a2);
  }
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this)
{
  *(void *)this = off_26C211020;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8));
}

void sub_20CE820A8(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet::~Nnet(v2);
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this)
{
  *(void *)this = off_26C211020;
  uint64_t v2 = (kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 1144);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet(v2);
}

{
  uint64_t vars8;

  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = a1 + 1144;
  if (*(int *)(a2 + 20) < 1)
  {
    kaldi::CuMatrix<float>::Resize(v5, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v5, a4, *(unsigned int *)(a2 + 16), 2u, 0);
    if (*(_DWORD *)(a1 + 1164) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    }
    unsigned int v11 = *(_DWORD *)(a1 + 1160);
    uint64_t v12 = *(void *)(a1 + 1176);
    v16[1] = *(void *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * a3);
    v16[0] = &off_26C209728;
    v16[2] = v11;
    v16[3] = v12;
    if (!*(_DWORD *)(a2 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    }
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 32);
    v15[1] = *(void *)(a2 + 8);
    v15[0] = &off_26C209728;
    v15[2] = v13;
    void v15[3] = v14;
    kaldi::CuVectorBase<float>::CopyFromVec(v16, (uint64_t)v15, v8, v9, v10);
  }
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::CuMatrix<float>::Resize(a2, *(_DWORD *)(a1 + 1164) > 0, *(unsigned int *)(a1 + 1160), 0, 0);
  if (*(int *)(a2 + 20) >= 1)
  {
    uint64_t v6 = operator new(4uLL);
    std::vector<int> __p = v6;
    _DWORD *v6 = a3;
    uint64_t v10 = v6 + 1;
    unsigned int v11 = v6 + 1;
    kaldi::CuMatrixBase<float>::CopyRows(a2, a1 + 1144, &__p, v7, v8);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
  }
}

void sub_20CE82374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 1137))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 105, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading Whe_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 107, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Whe_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 8), v8, v9, v10, v11);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 8), v13, v14, v15, v16);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
    if (*(unsigned char *)(a1 + 1137)) {
      goto LABEL_8;
    }
  }
  if (*(unsigned char *)(a1 + 1138))
  {
LABEL_8:
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 110, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading Whd_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 384), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 112, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Whd_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384), v17, v18, v19, v20);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384), v22, v23, v24, v25);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 113, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading Whc_", 12);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
      }
    }
    uint64_t v26 = (uint64_t **)(a1 + 760);
    kaldi::nnet1::Nnet::Read(v26, a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 115, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Whc_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)v26, v27, v28, v29, v30);
      int v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)v26, v32, v33, v34, v35);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
  }
}

void sub_20CE826B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::vector<int> *a6@<X8>)
{
  uint64_t v12 = *(unsigned int *)(a3 + 20);
  long long v83 = 0u;
  long long v82 = 0u;
  int v81 = off_26C211198;
  char v84 = 0;
  if (*(unsigned char *)(a1 + 1138))
  {
    long long v79 = 0uLL;
    long long v78 = 0uLL;
    int v77 = (void (**)())off_26C211198;
    char v80 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, (uint64_t)&v77, -1, 0);
    kaldi::CuMatrix<float>::Resize((uint64_t)&v81, *(unsigned int *)(a2 + 20), v12, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v81, a2, CblasNoTrans, (uint64_t)&v77, (const char *)0x70, 1.0, 1.0);
LABEL_5:
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v77);
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 1137))
  {
    long long v79 = 0uLL;
    long long v78 = 0uLL;
    int v77 = (void (**)())off_26C211198;
    char v80 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, (uint64_t)&v77, -1, 0);
    long long v74 = 0u;
    long long v75 = 0u;
    int v73 = off_26C211198;
    char v76 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, (uint64_t)&v73, -1, 0);
    kaldi::CuMatrix<float>::Resize((uint64_t)&v81, HIDWORD(v78), v12, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v81, (uint64_t)&v77, CblasNoTrans, (uint64_t)&v73, (const char *)0x70, 1.0, 1.0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v73);
    goto LABEL_5;
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)&v81, *(unsigned int *)(a2 + 20), v12, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v81, a2, CblasNoTrans, a3, (const char *)0x70, 1.0, 1.0);
LABEL_6:
  kaldi::CuMatrix<float>::Transpose((uint64_t)&v81);
  uint64_t v66 = a3;
  std::vector<int>::size_type __sz = 0;
  __src = 0;
  uint64_t v72 = 0;
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v81, (int *)&__sz, v13, v14, v15);
  kaldi::CuMatrix<float>::Resize(a4, v12, *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrix<float>::Resize(a5, v12, DWORD2(v82), 0, 0);
  if ((int)v12 >= 1)
  {
    unsigned int v18 = 0;
    do
    {
      long long v74 = 0uLL;
      int v73 = off_26C2111C8;
      *(void *)&long long v75 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)&v73, DWORD2(v82), 0, v16, v17);
      if (HIDWORD(v82) <= v18) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v21);
      }
      *(void *)&long long v78 = v82 + 4 * (int)(v83 * v18);
      int v77 = &off_26C209728;
      *((void *)&v78 + 1) = DWORD2(v82);
      *(void *)&long long v79 = *((void *)&v83 + 1);
      kaldi::CuVector<float>::operator=((uint64_t)&v73, (uint64_t)&v77, v19, v20, v21);
      if (*(unsigned char *)(a1 + 1136))
      {
        kaldi::CuVectorBase<float>::ApplyExp((uint64_t)&v73);
        if (*(_DWORD *)(a1 + 1164) <= (signed int)v18)
        {
          kaldi::CuMatrix<float>::Resize(a1 + 1144, v18 + 1, DWORD2(v74), 2u, 0);
          if (*(_DWORD *)(a1 + 1164) <= v18) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v40);
          }
          unsigned int v41 = *(_DWORD *)(a1 + 1160);
          uint64_t v42 = *(void *)(a1 + 1176);
          *(void *)&long long v78 = *(void *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * v18);
          int v77 = &off_26C209728;
          *((void *)&v78 + 1) = v41;
          *(void *)&long long v79 = v42;
          kaldi::CuVectorBase<float>::CopyFromVec(&v77, (uint64_t)&v73, v38, v39, v40);
        }
        else
        {
          kaldi::CuVector<float>::CuVector((uint64_t)&v77, (uint64_t)&v73, v22, v23, v24);
          if (*(_DWORD *)(a1 + 1164) <= v18) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
          }
          unsigned int v28 = *(_DWORD *)(a1 + 1160);
          uint64_t v29 = *(void *)(a1 + 1176);
          *(void *)&long long v68 = *(void *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * v18);
          double v67 = &off_26C209728;
          *((void *)&v68 + 1) = v28;
          *(void *)&long long v69 = v29;
          kaldi::CuVectorBase<float>::DivElements((uint64_t)&v73, (uint64_t)&v67, v25, v26, v27);
          if (*(_DWORD *)(a1 + 1164) <= v18) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v32);
          }
          unsigned int v33 = *(_DWORD *)(a1 + 1160);
          uint64_t v34 = *(void *)(a1 + 1176);
          *(void *)&long long v68 = *(void *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * v18);
          double v67 = &off_26C209728;
          *((void *)&v68 + 1) = v33;
          *(void *)&long long v69 = v34;
          kaldi::CuVectorBase<float>::AddVec((uint64_t)&v67, (uint64_t)&v77, v30, v31, v32, 1.0, 1.0);
          kaldi::CuVector<float>::~CuVector(&v77);
        }
        double v43 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v73);
        kaldi::CuVectorBase<float>::Scale((uint64_t)&v73, 1.0 / *(float *)&v43);
      }
      else
      {
        kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)&v73);
      }
      if (*(_DWORD *)(a5 + 20) <= v18) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v37);
      }
      unsigned int v44 = *(_DWORD *)(a5 + 16);
      uint64_t v45 = *(void *)(a5 + 32);
      *(void *)&long long v78 = *(void *)(a5 + 8) + 4 * (int)(*(_DWORD *)(a5 + 24) * v18);
      int v77 = &off_26C209728;
      *((void *)&v78 + 1) = v44;
      *(void *)&long long v79 = v45;
      kaldi::CuVectorBase<float>::CopyFromVec(&v77, (uint64_t)&v73, v35, v36, v37);
      kaldi::CuMatrix<float>::CuMatrix(&v77, a2, 111);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v77, (uint64_t)&v73, v46, v47, v48);
      if (*(_DWORD *)(a4 + 20) <= v18) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
      }
      unsigned int v52 = *(_DWORD *)(a4 + 16);
      uint64_t v53 = *(void *)(a4 + 32);
      *(void *)&long long v68 = *(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v18);
      double v67 = &off_26C209728;
      *((void *)&v68 + 1) = v52;
      *(void *)&long long v69 = v53;
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v67, (uint64_t)&v77, 1.0, 111.0, v49, v50, v51);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v77);
      kaldi::CuVector<float>::~CuVector(&v73);
      ++v18;
    }
    while (v12 != v18);
  }
  if (*(unsigned char *)(a1 + 1138))
  {
    long long v79 = 0u;
    long long v78 = 0u;
    int v77 = (void (**)())off_26C211198;
    char v80 = 0;
    kaldi::CuMatrix<float>::Resize((uint64_t)&v77, v12, (*(_DWORD *)(a3 + 16) + *(_DWORD *)(a4 + 16)), 0, 0);
    double v54 = a6;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, (uint64_t)&v77, 0, SHIDWORD(v78), 0, *(_DWORD *)(a4 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v73, a4, 111, v55, v56);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, (uint64_t)&v77, 0, SHIDWORD(v78), (const char *)*(unsigned int *)(a4 + 16), *(_DWORD *)(v66 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v67, v66, 111, v57, v58);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), (uint64_t)&v77, a4, -1, 0);
    kaldi::CuMatrixBase<float>::ApplyTanh(a4, v59, v60, v61, v62);
    double v67 = off_26C2096F8;
    long long v68 = 0u;
    long long v69 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
    int v73 = (uint64_t (**)())off_26C2096F8;
    long long v74 = 0u;
    long long v75 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
  }
  else
  {
    double v54 = a6;
    if (!*(unsigned char *)(a1 + 1137)) {
      goto LABEL_26;
    }
    long long v79 = 0u;
    long long v78 = 0u;
    int v77 = (void (**)())off_26C211198;
    char v80 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), a4, (uint64_t)&v77, -1, 0);
    kaldi::CuMatrix<float>::operator=(a4, (uint64_t)&v77);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v77);
LABEL_26:
  v54->__begin_ = 0;
  v54->__end_ = 0;
  v54->__end_cap_.__value_ = 0;
  if (__sz)
  {
    std::vector<int>::resize(v54, (int)__sz);
    std::vector<int>::pointer begin = v54->__begin_;
    size_t v64 = 4 * (int)__sz;
  }
  else
  {
    size_t v64 = 0;
    std::vector<int>::pointer begin = 0;
  }
  memcpy(begin, __src, v64);
  if (__src) {
    free(__src);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v81);
}

void sub_20CE82F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, long long a19, long long a20,uint64_t a21,char a22)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a22);
  kaldi::CuMatrix<float>::~CuMatrix(v22 - 152);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this)
{
  *(void *)this = off_26C211040;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
}

void sub_20CE83428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, kaldi::quasar::Shortlist *a15, kaldi::quasar::TorchEncoderDecoder::AttentionModel *a16, uint64_t a17, kaldi::nnet1::Nnet *a18, kaldi::nnet1::Nnet *a19, uint64_t a20,kaldi::nnet1::Nnet *a21,kaldi::nnet1::Nnet *a22,kaldi::nnet1::Nnet *a23)
{
  kaldi::CuMatrix<float>::~CuMatrix(v31);
  uint64_t v34 = *v26;
  if (*v26)
  {
    *(void *)(v25 + 4512) = v34;
    operator delete(v34);
  }
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v25, v29, v30, v23);
  kaldi::quasar::Shortlist::~Shortlist(a15);
  uint64_t v35 = *(std::__shared_weak_count **)(v25 + 3648);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = *(void *)(v25 + 3632);
  *(void *)(v25 + 3632) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *v24;
  uint64_t *v24 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v25 + 3600, *(void **)(v25 + 3608));
  if (*(char *)(v25 + 3599) < 0) {
    operator delete(*(void **)(v25 + 3576));
  }
  if (*(char *)(v25 + 3575) < 0) {
    operator delete(*(void **)(v25 + 3552));
  }
  kaldi::Vector<float>::Destroy(a17);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  *(void *)(v32 - 104) = v25 + 3408;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 104));
  kaldi::CuMatrix<float>::~CuMatrix(v28);
  kaldi::CuMatrix<float>::~CuMatrix(v27);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(a12);
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  kaldi::CuMatrix<float>::~CuMatrix(a14);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(a16);
  kaldi::nnet1::Nnet::~Nnet(a18);
  kaldi::nnet1::Nnet::~Nnet(a19);
  std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(a20, *(void **)(v25 + 1160));
  uint64_t v38 = *(std::__shared_weak_count **)(v25 + 1144);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  kaldi::nnet1::Nnet::~Nnet(a21);
  kaldi::nnet1::Nnet::~Nnet(a22);
  kaldi::nnet1::Nnet::~Nnet(a23);
  _Unwind_Resume(a1);
}

void sub_20CE835E0()
{
}

void sub_20CE835E8()
{
}

void kaldi::quasar::Shortlist::~Shortlist(kaldi::quasar::Shortlist *this)
{
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::Shortlist *)((char *)this + 144));
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 64);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
  uint64_t v3 = (void **)this;
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (char *)this + 4441;
  *(void *)this = off_26C211040;
  if (*((unsigned char *)this + 4441) && (int)((*((void *)this + 96) - *((void *)this + 95)) >> 3) >= 1) {
    kaldi::nnet1::Nnet::ReleaseComponent((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760), 0, a3, a4, a5);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 4528);
  uint64_t v7 = (void *)*((void *)this + 563);
  if (v7)
  {
    *((void *)this + 564) = v7;
    operator delete(v7);
  }
  if (v6[54] < 0) {
    operator delete(*((void **)this + 559));
  }
  if (v6[30] < 0) {
    operator delete(*((void **)this + 556));
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 4192));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 3800));
  uint64_t v8 = (void *)*((void *)this + 471);
  if (v8)
  {
    *((void *)this + 472) = v8;
    operator delete(v8);
  }
  uint64_t v13 = (void **)((char *)this + 3744);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = (void **)((char *)this + 3720);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v13);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 3680);
  uint64_t v13 = (void **)((char *)this + 3656);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 456);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *((void *)this + 454);
  *((void *)this + 454) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 453);
  *((void *)this + 453) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 3600, *((void **)this + 451));
  if (*((char *)this + 3599) < 0) {
    operator delete(*((void **)this + 447));
  }
  if (*((char *)this + 3575) < 0) {
    operator delete(*((void **)this + 444));
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 3480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3432);
  uint64_t v13 = (void **)((char *)this + 3408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3360);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3312);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3120);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1928));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1552));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1176));
  std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy((uint64_t)this + 1152, *((void **)this + 145));
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 143);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
}

{
  uint64_t vars8;

  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this, a2, a3, a4, a5);
  JUMPOUT(0x2105595E0);
}

void kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  if (a2) {
    kaldi::nnet1::Nnet::ResetHistoryStateIfExists((uint64_t)this + 8);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 3072, 0, 0, 0, 0);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((void *)this + 142));
  *(void *)((char *)this + 3508) = 0;
  kaldi::nnet1::Nnet::GetHistoricalComponents(*((kaldi::nnet1::Nnet **)this + 142), &v8);
  uint64_t v3 = v9;
  if (v9 != v8)
  {
    uint64_t v4 = 0;
    uint64_t v3 = v8;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*v3[v4] + 72))(v3[v4]);
      uint64_t v6 = &off_26C20AB20;
      int v7 = *(_DWORD *)(v5 + 8);
      if (v7 != 1)
      {
        int v7 = 1;
        (*(void (**)(void *, void (***)(kaldi::nnet1::HistoryOptions *__hidden)))(*v8[v4] + 80))(v8[v4], &v6);
      }
      kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v6);
      ++v4;
      uint64_t v3 = v8;
    }
    while (v4 != v9 - v8);
  }
  if (v3)
  {
    uint64_t v9 = v3;
    operator delete(v3);
  }
}

void sub_20CE83A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (double *)(a1 + 4576);
  uint64_t v7 = a1 + 4632;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v36, v6, v7, &__p);
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8 != *a2)
  {
    uint64_t v10 = v8 - 48;
    uint64_t v11 = (void *)(v8 - 48);
    uint64_t v12 = (void *)(v8 - 48);
    do
    {
      uint64_t v13 = *v12;
      v12 -= 6;
      (*(void (**)(void *))(v13 + 16))(v11);
      v10 -= 48;
      BOOL v14 = v11 == (void *)v9;
      uint64_t v11 = v12;
    }
    while (!v14);
  }
  a2[1] = v9;
  if (kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v29);
    std::vector<kaldi::CuMatrix<float>>::resize(a2, (uint64_t)(v30 - (void)v29) >> 3);
    uint64_t v15 = (void (**)())v30;
    if ((void (**)())v30 != v29)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v15 = v29;
      do
      {
        *((void *)&__p + 1) = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        *(void *)&long long __p = off_26C2111C8;
        (*(void (**)(void (*)(), long long *, uint64_t, void))(*(void *)v15[v17]
                                                                                              + 48))(v15[v17], &__p, a3, 0);
        uint64_t v18 = *a2 + v16;
        if ((int)v34 < 1)
        {
          kaldi::CuMatrix<float>::Resize(v18, 0, 0, 0, 0);
        }
        else
        {
          kaldi::CuMatrix<float>::Resize(v18, 1, v34, 0, 0);
          kaldi::CuMatrixBase<float>::CopyRowsFromVec(*a2 + v16, (uint64_t)&__p);
        }
        kaldi::CuVector<float>::~CuVector(&__p);
        ++v17;
        uint64_t v15 = v29;
        v16 += 48;
      }
      while (v17 < (uint64_t)(v30 - (void)v29) >> 3);
    }
    if (v15)
    {
      *(void *)&long long v30 = v15;
      operator delete(v15);
    }
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v29, a1 + 3312, a3, 1, 0, *(_DWORD *)(a1 + 3328));
  kaldi::CuMatrix<float>::CuMatrix(&__p, &v29, 111);
  unint64_t v19 = a2[1];
  if (v19 >= a2[2])
  {
    uint64_t v20 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    uint64_t v20 = v19 + 48;
    a2[1] = v19 + 48;
  }
  a2[1] = v20;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  uint64_t v29 = off_26C2096F8;
  long long v30 = 0u;
  long long v31 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v29);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, 1, 2, 0, 0, 0);
  if (!HIDWORD(v34) || (int v22 = v34) == 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v21);
  }
  uint64_t v23 = *((void *)&__p + 1);
  **((float **)&__p + 1) = (float)*(int *)(a1 + 3508);
  if (v22 == 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v21);
  }
  *(float *)(v23 + 4) = (float)*(int *)(a1 + 3512);
  unint64_t v24 = a2[1];
  if (v24 >= a2[2])
  {
    uint64_t v25 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    uint64_t v25 = v24 + 48;
    a2[1] = v24 + 48;
  }
  a2[1] = v25;
  if (*(unsigned char *)(a1 + 4434))
  {
    long long v31 = 0u;
    long long v30 = 0u;
    uint64_t v29 = (void (**)())off_26C211198;
    char v32 = 0;
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(a1 + 1928, (uint64_t)&v29, a3);
    unint64_t v26 = a2[1];
    if (v26 >= a2[2])
    {
      uint64_t v27 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&v29);
    }
    else
    {
      kaldi::CuMatrix<float>::CuMatrix(a2[1], &v29, 111);
      uint64_t v27 = v26 + 48;
      a2[1] = v26 + 48;
    }
    a2[1] = v27;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v29);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v36, v28);
}

void sub_20CE83E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, long long a10, long long a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  *(void *)(v22 + 8) = v23;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a13);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, v25);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::SetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (double *)(a1 + 4576);
  uint64_t v9 = a1 + 4640;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v47, v8, v9, &__p);
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)__p);
  }
  if (!kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    unint64_t v12 = 0;
    goto LABEL_18;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v38);
  uint64_t v10 = v39;
  if (v39 == v38)
  {
    unint64_t v12 = 0;
    if (!v39) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v10 = v38;
  do
  {
    uint64_t v13 = (*(uint64_t (**)(void (*)()))(*(void *)v10[v12] + 72))(v10[v12]);
    uint64_t v45 = &off_26C20AB20;
    int v46 = *(_DWORD *)(v13 + 8);
    if (v46 != a4)
    {
      int v46 = a4;
      (*(void (**)(void (*)(), void (***)(kaldi::nnet1::HistoryOptions *__hidden)))(*(void *)v38[v12] + 80))(v38[v12], &v45);
    }
    uint64_t v15 = *a2 + v11;
    int v16 = *(_DWORD *)(v15 + 16);
    if (v16 < 1)
    {
      *((void *)&__p + 1) = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      *(void *)&long long __p = off_26C2111C8;
      (*(void (**)(void (*)(), long long *, uint64_t, void))(*(void *)v38[v12] + 64))(v38[v12], &__p, a3, 0);
      kaldi::CuVector<float>::~CuVector(&__p);
    }
    else
    {
      if (!*(_DWORD *)(v15 + 20)) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v14);
      }
      unint64_t v17 = v38[v12];
      uint64_t v18 = *a2 + v11;
      uint64_t v19 = *(void *)(v18 + 8);
      uint64_t v20 = *(void *)(v18 + 32);
      *((void *)&__p + 1) = v19;
      *(void *)&long long __p = &off_26C209728;
      uint64_t v43 = v16;
      uint64_t v44 = v20;
      (*(void (**)(void (*)(), long long *, uint64_t, void))(*(void *)v17 + 64))(v17, &__p, a3, 0);
    }
    kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v45);
    ++v12;
    uint64_t v10 = v38;
    v11 += 48;
  }
  while (v12 < v39 - v38);
  if (v38)
  {
LABEL_17:
    uint64_t v39 = v10;
    operator delete(v10);
  }
LABEL_18:
  kaldi::CuMatrix<float>::Resize(a1 + 3312, a4, *(unsigned int *)(*a2 + 48 * v12 + 16), 2u, 0);
  if (*(_DWORD *)(a1 + 3332) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v23);
  }
  unsigned int v24 = *(_DWORD *)(a1 + 3328);
  uint64_t v25 = *(void *)(a1 + 3344);
  *((void *)&__p + 1) = *(void *)(a1 + 3320) + 4 * *(_DWORD *)(a1 + 3336) * (int)a3;
  *(void *)&long long __p = &off_26C209728;
  uint64_t v43 = v24;
  uint64_t v44 = v25;
  uint64_t v26 = *a2 + 48 * v12;
  if (!*(_DWORD *)(v26 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v23);
  }
  uint64_t v27 = *(void (***)())(v26 + 8);
  unsigned int v28 = *(_DWORD *)(v26 + 16);
  uint64_t v29 = *(void *)(v26 + 32);
  uint64_t v39 = v27;
  uint64_t v38 = &off_26C209728;
  uint64_t v40 = v28;
  uint64_t v41 = v29;
  kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)&v38, v21, v22, v23);
  unint64_t v32 = v12 + 1;
  uint64_t v33 = *a2;
  uint64_t v34 = *a2 + 48 * (v12 + 1);
  if (!*(_DWORD *)(v34 + 20) || *(_DWORD *)(v34 + 16) <= 1u) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v31);
  }
  int v35 = *(_DWORD *)(a1 + 3512);
  if (*(float *)(*(void *)(v34 + 8) + 4) != (float)v35
    && (uint64_t v36 = *(void *)(a1 + 3408) + 48 * v35,
        kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((void *)a1, v36, v36, *(kaldi::nnet1::Nnet **)(a1 + 1136), v31), uint64_t v33 = *a2, !*(_DWORD *)(*a2 + 48 * v32 + 20))|| (v37 = v33 + 48 * v32, *(_DWORD *)(v37 + 16) <= 1u))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v31);
  }
  *(int32x2_t *)(a1 + 3508) = vcvt_s32_f32(**(float32x2_t **)(v37 + 8));
  if (*(unsigned char *)(a1 + 4434)) {
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState(a1 + 1928, v33 + 48 * v12 + 96, a3, a4);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v47, v30);
}

void sub_20CE84438(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
}

void *kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(void *result, uint64_t a2, uint64_t a3, kaldi::nnet1::Nnet *a4, const char *a5)
{
  if ((int)((*((void *)a4 + 1) - *(void *)a4) >> 3) >= 1)
  {
    uint64_t v8 = result;
    int v9 = 0;
    do
    {
      uint64_t Component = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v9, a3, (uint64_t)a4, a5);
      if (v11)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*(void *)v11 + 24))(v11, a2, a3, 0);
      }
      else
      {
        uint64_t v15 = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v9, v12, v13, v14);
        if (result)
        {
          int v16 = result;
          uint64_t v17 = result[23];
          if ((int)(1736263375 * ((unint64_t)(result[24] - v17) >> 3)) >= 1)
          {
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            do
            {
              uint64_t result = (void *)kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(v8, a2, a3, v17 + v18);
              ++v19;
              uint64_t v17 = v16[23];
              v18 += 376;
            }
            while (v19 < (int)(1736263375 * ((unint64_t)(v16[24] - v17) >> 3)));
          }
        }
      }
      ++v9;
    }
    while (v9 < (int)((*((void *)a4 + 1) - *(void *)a4) >> 3));
  }
  return result;
}

double kaldi::quasar::TorchEncoderDecoder::AddTag(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddTag", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x151, "in.NumCols() == 1", a5);
  }
  int v5 = (int)a5;
  kaldi::CuMatrix<float>::Resize(a4, (*(_DWORD *)(a2 + 20) + 1), 1, 0, 0);
  float v11 = (float)a3;
  if ((*(unsigned char *)(a1 + 4440) == 0) == v5)
  {
    if (*(_DWORD *)(a4 + 20))
    {
      int v16 = *(_DWORD *)(a4 + 16);
      if (v16)
      {
        **(float **)(a4 + 8) = v11;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a4, 1, *(_DWORD *)(a2 + 20), 0, v16);
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v20, a2, 111, v17, v18);
        goto LABEL_9;
      }
    }
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a4 + 20) <= v12) {
    goto LABEL_10;
  }
  int v13 = *(_DWORD *)(a4 + 16);
  if (!v13) {
    goto LABEL_10;
  }
  *(float *)(*(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v12)) = v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a4, 0, v12, 0, v13);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v20, a2, 111, v14, v15);
LABEL_9:
  uint64_t v20 = off_26C2096F8;
  long long v21 = 0u;
  long long v22 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20).n128_u64[0];
  return result;
}

void sub_20CE84810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_26C2096F8;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::TorchEncoderDecoder::Reverse(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned char *)this + 4440) == 0;
}

double kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a3 + 20), (*(_DWORD *)(a3 + 16) + 1), 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a4, 0, *(_DWORD *)(a4 + 20), 0, *(_DWORD *)(a3 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v22, a3, 111, v9, v10);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(a3 + 16), 1);
  uint64_t v12 = *(unsigned int *)(a3 + 20);
  if ((int)v12 >= 1)
  {
    unint64_t v13 = 0;
    uint64_t v14 = (float *)v20;
    unint64_t v15 = HIDWORD(v20);
    uint64_t v16 = 4 * (int)v21;
    do
    {
      if (v13 >= v15 || !DWORD2(v20)) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v11);
      }
      if (a5) {
        int v17 = v13;
      }
      else {
        int v17 = 0;
      }
      *uint64_t v14 = (float)(v17 + a2);
      ++v13;
      uint64_t v14 = (float *)((char *)v14 + v16);
    }
    while (v12 != v13);
  }
  uint64_t v19 = off_26C2096F8;
  long long v20 = 0u;
  long long v21 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v19);
  long long v22 = off_26C2096F8;
  long long v23 = 0u;
  long long v24 = 0u;
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v22).n128_u64[0];
  return result;
}

void sub_20CE849E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(), long long a15, long long a16)
{
  a14 = off_26C2096F8;
  a15 = 0u;
  a16 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::StartFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 4438);
  uint64_t v7 = *(void *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 3416) - v7) >> 4) <= a3) {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
  }
  else {
    kaldi::CuMatrix<float>::Resize(v7 + 48 * a3, 0, 0, 0, 0);
  }
  kaldi::CuMatrix<float>::CuMatrix(v13, a2, 111);
  if (*v6)
  {
    long long v11 = 0u;
    long long v10 = 0u;
    uint64_t v9 = off_26C211198;
    char v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, a2, *(_DWORD *)(a1 + 3516) - 1, (uint64_t)&v9, 0);
    kaldi::CuMatrix<float>::operator=((uint64_t)v13, (uint64_t)&v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  if (v6[1])
  {
    long long v11 = 0u;
    long long v10 = 0u;
    uint64_t v9 = off_26C211198;
    char v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, (uint64_t)v13, *(_DWORD *)(a1 + 3520) - 1, (uint64_t)&v9, (const char *)1);
    kaldi::CuMatrix<float>::operator=((uint64_t)v13, (uint64_t)&v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  kaldi::quasar::TorchEncoderDecoder::EncFeedforward(a1, (uint64_t)v13, a3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_20CE84BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::EncFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (double *)(a1 + 4576);
  uint64_t v7 = a1 + 4624;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  uint64_t v8 = kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v107, v6, v7, (long long *)&__p);
  if (SHIBYTE(v100) < 0) {
    operator delete(__p);
  }
  uint64_t v9 = *(void *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 3416) - v9) >> 4) <= a3)
  {
    uint64_t v8 = (uint64_t)std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
    uint64_t v9 = *(void *)(a1 + 3408);
  }
  *(_DWORD *)(a1 + 3512) = a3;
  int v10 = *(_DWORD *)(v9 + 48 * a3 + 20);
  if (*(unsigned char *)(a1 + 4436))
  {
    long long v101 = 0u;
    long long v100 = 0u;
    long long __p = off_26C211198;
    char v102 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(v8, v10, a2, (uint64_t)&__p, 1);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), (uint64_t)&__p, a1 + 3120, -1, 0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  }
  else
  {
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, a1 + 3120, -1, 0);
  }
  int v78 = v10;
  kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)(a1 + 8), &v105);
  int v77 = (kaldi::nnet1::Nnet *)(a1 + 8);
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v103);
  if (*(unsigned char *)(a1 + 3504))
  {
    if (v10 >= 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 408);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Handover is not supported for stream input.", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (*(unsigned char *)(a1 + 3506))
    {
      if (*(_DWORD *)(a1 + 3548) == 3)
      {
        if (*(unsigned char *)(a1 + 3505))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 412);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Model type requires full handover.", 34);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        long long v11 = v105;
        if (v106 != (unsigned char *)v105)
        {
          uint64_t v12 = 0;
          do
          {
            long long v100 = 0u;
            long long v101 = 0u;
            long long __p = off_26C211198;
            char v102 = 0;
            (*(void (**)(void *, void **, void))(*v11[v12] + 40))(v11[v12], &__p, 0);
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v95, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v92, (uint64_t)&v95, 0, SHIDWORD(v96), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, (uint64_t)&__p, 0, SHIDWORD(v100), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v92, (uint64_t)&v88, 111, v13, v14);
            unint64_t v88 = off_26C2096F8;
            long long v89 = 0u;
            long long v90 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
            int v92 = off_26C2096F8;
            long long v93 = 0u;
            long long v94 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v92);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v92, (uint64_t)&v95, 0, SHIDWORD(v96), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, (uint64_t)&__p, 0, SHIDWORD(v100), (const char *)(2 * *(_DWORD *)(a1 + 4496)), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v92, (uint64_t)&v88, 111, v15, v16);
            unint64_t v88 = off_26C2096F8;
            long long v89 = 0u;
            long long v90 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
            int v92 = off_26C2096F8;
            long long v93 = 0u;
            long long v94 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v92);
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v92, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, (uint64_t)&v92, 0, SHIDWORD(v93), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, (uint64_t)&__p, 0, SHIDWORD(v100), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v88, (uint64_t)&v84, 111, v17, v18);
            char v84 = off_26C2096F8;
            long long v85 = 0u;
            long long v86 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
            unint64_t v88 = off_26C2096F8;
            long long v89 = 0u;
            long long v90 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, (uint64_t)&v92, 0, SHIDWORD(v93), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, (uint64_t)&__p, 0, SHIDWORD(v100), (const char *)(3 * *(_DWORD *)(a1 + 4496)), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v88, (uint64_t)&v84, 111, v19, v20);
            char v84 = off_26C2096F8;
            long long v85 = 0u;
            long long v86 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
            unint64_t v88 = off_26C2096F8;
            long long v89 = 0u;
            long long v90 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
            long long v89 = 0u;
            long long v90 = 0u;
            unint64_t v88 = (void (**)())off_26C211198;
            char v91 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1552), (uint64_t)&v95, (uint64_t)&v88, -1, 0);
            long long v85 = 0u;
            long long v86 = 0u;
            char v84 = (void (**)())off_26C211198;
            char v87 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&v92, (uint64_t)&v84, -1, 0);
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)v82, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v79, (uint64_t)v82, 0, v83, 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v79, (uint64_t)&v88, 111, v21, v22);
            long long v79 = off_26C2096F8;
            long long v80 = 0u;
            long long v81 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v79);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v79, (uint64_t)v82, 0, v83, (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v79, (uint64_t)&v84, 111, v23, v24);
            long long v79 = off_26C2096F8;
            long long v80 = 0u;
            long long v81 = 0u;
            __n128 v25 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v79);
            (*(void (**)(void *, unsigned char *, void, __n128))(*v103[v12] + 56))(v103[v12], v82, 0, v25);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v82);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v84);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v88);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v92);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v95);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
            ++v12;
            long long v11 = v105;
          }
          while (v12 != (v106 - (unsigned char *)v105) >> 3);
        }
        goto LABEL_33;
      }
      long long v101 = 0u;
      long long v100 = 0u;
      long long __p = off_26C211198;
      char v102 = 0;
      int v31 = *(_DWORD *)(a1 + 4496) << (*(unsigned char *)(a1 + 3505) == 0);
      kaldi::CuMatrix<float>::Resize((uint64_t)&__p, 1, v31 * ((unint64_t)(v106 - (unsigned char *)v105) >> 3), 0, 0);
      unint64_t v32 = v105;
      if (v106 != (unsigned char *)v105)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        long long v35 = 0uLL;
        do
        {
          long long v96 = v35;
          long long v97 = v35;
          int v95 = (void (**)())off_26C211198;
          char v98 = 0;
          (*(void (**)(void *, void (***)(), void))(*v32[v34] + 40))(v32[v34], &v95, 0);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v92, (uint64_t)&__p, 0, SHIDWORD(v100), v33, v31);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, (uint64_t)&v95, 0, SHIDWORD(v96), 0, v31);
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v92, (uint64_t)&v88, 111, v36, v37);
          unint64_t v88 = off_26C2096F8;
          long long v89 = 0u;
          long long v90 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
          int v92 = off_26C2096F8;
          long long v93 = 0u;
          long long v94 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v92);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v95);
          long long v35 = 0uLL;
          ++v34;
          unint64_t v32 = v105;
          uint64_t v33 = (const char *)(v33 + v31);
        }
        while (v34 != (v106 - (unsigned char *)v105) >> 3);
      }
      long long v97 = 0u;
      long long v96 = 0u;
      int v95 = (void (**)())off_26C211198;
      char v98 = 0;
      kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&__p, (uint64_t)&v95, -1, 0);
      uint64_t v38 = v103;
      if (v104 != (unsigned char *)v103)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        do
        {
          if (*(unsigned char *)(a1 + 3505))
          {
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v92, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, (uint64_t)&v92, 0, SHIDWORD(v93), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, (uint64_t)&v95, 0, SHIDWORD(v96), v39, v31);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v88, (uint64_t)&v84, 111, v41, v42);
            char v84 = off_26C2096F8;
            long long v85 = 0u;
            long long v86 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v84);
            unint64_t v88 = off_26C2096F8;
            long long v89 = 0u;
            long long v90 = 0u;
            __n128 v43 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
            (*(void (**)(void *, void (***)(), void, __n128))(*v103[v40] + 56))(v103[v40], &v92, 0, v43);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v92);
          }
          else
          {
            uint64_t v44 = v38[v40];
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v92, (uint64_t)&v95, 0, SHIDWORD(v96), v39, v31);
            (*(void (**)(void *, void (***)(), void))(*v44 + 56))(v44, &v92, 0);
            int v92 = off_26C2096F8;
            long long v93 = 0u;
            long long v94 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v92);
          }
          ++v40;
          uint64_t v38 = v103;
          uint64_t v39 = (const char *)(v39 + v31);
        }
        while (v40 != (v104 - (unsigned char *)v103) >> 3);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v95);
LABEL_32:
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      goto LABEL_33;
    }
    if (*(unsigned char *)(a1 + 3505))
    {
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, 1, *(unsigned int *)(a1 + 4496), 0, 0, 0);
      uint64_t v26 = v105;
      if (v106 != (unsigned char *)v105)
      {
        uint64_t v27 = 0;
        do
        {
          long long v96 = 0u;
          long long v97 = 0u;
          int v95 = (void (**)())off_26C211198;
          char v98 = 0;
          (*(void (**)(void *, void (***)(), void))(*v26[v27] + 40))(v26[v27], &v95, 0);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v92, (uint64_t)&v95, 0, SHIDWORD(v96), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v92, (uint64_t)&__p, 111, v28, v29);
          int v92 = off_26C2096F8;
          long long v93 = 0u;
          long long v94 = 0u;
          __n128 v30 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v92);
          (*(void (**)(void *, void (***)(), void, __n128))(*v103[v27] + 56))(v103[v27], &v95, 0, v30);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v95);
          ++v27;
          uint64_t v26 = v105;
        }
        while (v27 != (v106 - (unsigned char *)v105) >> 3);
      }
      goto LABEL_32;
    }
    int v71 = v105;
    if (v106 != (unsigned char *)v105)
    {
      uint64_t v72 = 0;
      long long v73 = 0uLL;
      do
      {
        long long v100 = v73;
        long long v101 = v73;
        long long __p = off_26C211198;
        char v102 = 0;
        (*(void (**)(void *, void **, void))(*v71[v72] + 40))(v71[v72], &__p, 0);
        long long v74 = v103[v72];
        unsigned int v75 = 2 * *(_DWORD *)(a1 + 4496);
        if (*(unsigned char *)(a1 + 4440)) {
          char v76 = (const char *)v75;
        }
        else {
          char v76 = 0;
        }
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v95, (uint64_t)&__p, 0, SHIDWORD(v100), v76, v75);
        (*(void (**)(void *, void (***)(), void))(*v74 + 56))(v74, &v95, 0);
        int v95 = off_26C2096F8;
        long long v96 = 0u;
        long long v97 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v95);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
        long long v73 = 0uLL;
        ++v72;
        int v71 = v105;
      }
      while (v72 != (v106 - (unsigned char *)v105) >> 3);
    }
  }
LABEL_33:
  if (kaldi::nnet1::Nnet::IsBidirectionalRnn(v77) && *(_DWORD *)(a1 + 3548) != 3)
  {
    if (v10 >= 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 488);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"BidirectionalEncoder is not supported for stream input.", 55);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), *(unsigned int *)(a1 + 3140), (*(_DWORD *)(a1 + 3136) / 2), 0, 0);
    int v48 = *(_DWORD *)(a1 + 3512);
    uint64_t v49 = *(void *)(a1 + 3408);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 3120, 0, *(_DWORD *)(a1 + 3140), 0, *(_DWORD *)(a1 + 3136) / 2);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(v49 + 48 * v48), (uint64_t)&__p, 111, v50, v51);
    long long __p = off_26C2096F8;
    long long v100 = 0u;
    long long v101 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
    int v52 = *(_DWORD *)(a1 + 3512);
    uint64_t v53 = *(void *)(a1 + 3408);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 3120, 0, *(_DWORD *)(a1 + 3140), (const char *)(*(_DWORD *)(a1 + 3136) / 2), *(_DWORD *)(a1 + 3136) / 2);
    kaldi::CuMatrixBase<float>::AddMat(v53 + 48 * v52, (uint64_t)&__p, 111, v54, v55, 1.0, 1.0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), (*(_DWORD *)(a1 + 3140) + v10), *(unsigned int *)(a1 + 3136), 2u, 0);
    uint64_t v45 = *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v45, v10, *(_DWORD *)(a1 + 3140), 0, *(_DWORD *)(v45 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&__p, a1 + 3120, 111, v46, v47);
  }
  long long __p = off_26C2096F8;
  long long v100 = 0u;
  long long v101 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  uint64_t v56 = *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
  kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((void *)a1, v56, v56, *(kaldi::nnet1::Nnet **)(a1 + 1136), v57);
  if (*(unsigned char *)(a1 + 4440))
  {
    int v62 = 0;
    if (v78) {
      goto LABEL_43;
    }
  }
  else
  {
    int v62 = *(_DWORD *)(a1 + 3140) - 1;
    if (v78) {
      goto LABEL_43;
    }
  }
  uint64_t v63 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v58, v59, v60, v61);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, 1, v63, 0, 0);
LABEL_43:
  if (!*(unsigned char *)(a1 + 3504)) {
    goto LABEL_53;
  }
  if (kaldi::nnet1::Nnet::IsBidirectionalRnn(v77))
  {
    if (*(_DWORD *)(a1 + 3548) == 3)
    {
      kaldi::CuMatrixBase<float>::SetZero(a1 + 3312);
      goto LABEL_53;
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v95, a1 + 3120, v62, 1, 0, *(_DWORD *)(a1 + 3136));
    unsigned int v67 = *(_DWORD *)(a1 + 3136) / 2;
    if (*(unsigned char *)(a1 + 4440)) {
      long long v68 = (const char *)v67;
    }
    else {
      long long v68 = 0;
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, (uint64_t)&v95, 0, SHIDWORD(v96), v68, v67);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 3312), (uint64_t)&__p, 111, v69, v70);
    long long __p = off_26C2096F8;
    long long v100 = 0u;
    long long v101 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
    int v95 = off_26C2096F8;
    long long v96 = 0u;
    long long v97 = 0u;
    p_p = (void **)&v95;
  }
  else
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 3120, v62, 1, 0, *(_DWORD *)(a1 + 3136));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 3312), (uint64_t)&__p, 111, v64, v65);
    long long __p = off_26C2096F8;
    long long v100 = 0u;
    long long v101 = 0u;
    p_p = &__p;
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(p_p);
LABEL_53:
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v107, (clockid_t)v58);
}

void sub_20CE85E70()
{
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  JUMPOUT(0x20CE85EC8);
}

void sub_20CE85ED4()
{
}

void sub_20CE85EE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CE86248);
}

void sub_20CE85EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_20CE85F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void (**a38)())
{
  a38 = off_26C2096F8;
  *uint64_t v38 = 0u;
  v38[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a38);
  JUMPOUT(0x20CE86210);
}

void sub_20CE85F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void (**a44)())
{
  a44 = off_26C2096F8;
  *uint64_t v44 = 0u;
  v44[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a44);
  JUMPOUT(0x20CE86218);
}

void sub_20CE85F90()
{
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  JUMPOUT(0x20CE86160);
}

void sub_20CE86000(_Unwind_Exception *a1, clockid_t a2)
{
  uint64_t v4 = *(void **)(v2 - 184);
  if (v4)
  {
    *(void *)(v2 - 176) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(v2 - 160);
  if (v5)
  {
    *(void *)(v2 - 152) = v5;
    operator delete(v5);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v2 - 136), a2);
  _Unwind_Resume(a1);
}

void sub_20CE8600C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x20CE86178);
}

void sub_20CE86064()
{
}

void sub_20CE86070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void (**a38)())
{
  a38 = off_26C2096F8;
  *uint64_t v38 = 0u;
  v38[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a38);
  JUMPOUT(0x20CE86210);
}

void sub_20CE860F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_20CE8619C()
{
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  JUMPOUT(0x20CE86200);
}

void sub_20CE8620C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Feedforward(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long v11 = 0u;
  long long v10 = 0u;
  uint64_t v9 = off_26C211198;
  char v12 = 0;
  if (*(unsigned char *)(a1 + 4437)) {
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(a1, *(_DWORD *)(a1 + 3508), a2, (uint64_t)&v9, 0);
  }
  else {
    kaldi::CuMatrix<float>::operator=((uint64_t)&v9, a2);
  }
  switch(*(_DWORD *)(a1 + 3548))
  {
    case 0:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(a1, (uint64_t)&v9, a3, a4);
      break;
    case 1:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(a1, (uint64_t)&v9, a3, a4);
      break;
    case 2:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(a1, (uint64_t)&v9, a3, a4);
      break;
    case 3:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(a1, (uint64_t)&v9, a3, a4);
      break;
    default:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 568);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Un-supported model type : ", 26);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  ++*(_DWORD *)(a1 + 3508);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
}

void sub_20CE863D8(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v1 - 80);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4576);
  uint64_t v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v51, v8, v9, (long long *)__p);
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (long long *)&v43);
  if (SHIBYTE(v44) < 0) {
    operator delete(v43);
  }
  uint64_t v14 = *(unsigned int *)(a2 + 20);
  if (!v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelN", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x270, "target_in.NumRows() != 0", v13);
  }
  uint64_t v15 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v10, v11, v12, v13);
  kaldi::CuMatrix<float>::Resize(a1 + 3264, v14, v15, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3264, 0, v16);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v17);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (long long *)&v43);
  if (SHIBYTE(v44) < 0) {
    operator delete(v43);
  }
  uint64_t v22 = *(unsigned int *)(a1 + 3284);
  uint64_t v23 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v18, v19, v20, v21);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, v22, v23, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3264, a1 + 3312, 0, v24);
  kaldi::CuMatrix<float>::operator=(a1 + 3216, a1 + 3312);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v25);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (long long *)&v43);
  if (SHIBYTE(v44) < 0) {
    operator delete(v43);
  }
  if (*(unsigned char *)(a1 + 4443))
  {
    uint64_t Component = (const void *)kaldi::nnet1::Nnet::GetComponent(*(kaldi::nnet1::Nnet **)(a1 + 1136), *(_DWORD *)(a1 + 3540), v27, v28, v29);
    if (!v31) {
      kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelN", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x282, "attn_component", v32);
    }
    std::vector<int>::size_type __sz = 0;
    __src = 0;
    uint64_t v48 = 0;
    uint64_t AttnProbabilities = kaldi::nnet1::SupervisedMultiHeadAttention::GetAttnProbabilities(v31);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, AttnProbabilities, 0, *(_DWORD *)(AttnProbabilities + 20), (const char *)*(unsigned __int8 *)(a1 + 4438), *(_DWORD *)(AttnProbabilities + 16) - *(unsigned __int8 *)(a1 + 4439));
    kaldi::CuMatrix<float>::operator=(a1 + 4528, (uint64_t)&v43);
    __n128 v43 = off_26C2096F8;
    long long v44 = 0u;
    long long v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 4528, (int *)&__sz, v34, v35, v36);
    uint64_t v37 = *(void **)(a1 + 4504);
    uint64_t v38 = (*(void *)(a1 + 4512) - (void)v37) >> 2;
    if (__sz != v38)
    {
      std::vector<int>::resize((std::vector<int> *)(a1 + 4504), (int)__sz);
      uint64_t v37 = *(void **)(a1 + 4504);
      LODWORD(v38) = __sz;
    }
    memcpy(v37, __src, 4 * (int)v38);
    if (__src) {
      free(__src);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v26);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (long long *)&v43);
  if (SHIBYTE(v44) < 0)
  {
    operator delete(v43);
    if (a4) {
      goto LABEL_18;
    }
  }
  else if (a4)
  {
LABEL_18:
    int v39 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_21;
  }
  int v39 = -1;
LABEL_21:
  if (*(void *)(a1 + 4184)) {
    uint64_t v40 = *(uint64_t **)(a1 + 4184);
  }
  else {
    uint64_t v40 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v40, a1 + 3216, a3, v39, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v41);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v51, v42);
}

void sub_20CE867E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**__p)(), long long a10, long long a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  long long __p = off_26C2096F8;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a15, v25);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a24, v26);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4576);
  uint64_t v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v66, v8, v9, (long long *)__p);
  if (v65 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  std::string::basic_string[abi:ne180100]<0>(&v62, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (long long *)&v62);
  if (SHIBYTE(v62.__end_cap_.__value_) < 0) {
    operator delete(v62.__begin_);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, a1 + 3360, a1 + 3432, &v62);
  uint64_t v12 = (void *)(a1 + 4504);
  uint64_t v13 = *(void **)(a1 + 4504);
  if (v13)
  {
    *(void *)(a1 + 4512) = v13;
    operator delete(v13);
    *uint64_t v12 = 0;
    *(void *)(a1 + 4512) = 0;
    *(void *)(a1 + 4520) = 0;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v62.__begin_;
  *(void *)(a1 + 4520) = v62.__end_cap_.__value_;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v11);
  std::string::basic_string[abi:ne180100]<0>(&v62, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (long long *)&v62);
  if (SHIBYTE(v62.__end_cap_.__value_) < 0) {
    operator delete(v62.__begin_);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3168, 0, v14);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v15);
  int v20 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v16, v17, v18, v19);
  int v25 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v21, v22, v23, v24);
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelM", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x2AE, "num_sequences != 0", v26);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 3264, v10, (v25 + v20), 0, 0);
  int v31 = (const char *)kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v27, v28, v29, v30);
  int v36 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v32, v33, v34, v35);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v62, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), v31, v36);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v62, a1 + 3360, 111, v37, v38);
  int v43 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v39, v40, v41, v42);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v59, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), 0, v43);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v59, a1 + 3168, 111, v44, v45);
  uint64_t v50 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v46, v47, v48, v49);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, v10, v50, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v57, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (long long *)v57);
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3264, a1 + 3312, 0, v51);
  kaldi::CuMatrix<float>::operator=(a1 + 3216, a1 + 3312);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v52);
  std::string::basic_string[abi:ne180100]<0>(v57, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (long long *)v57);
  if (v58 < 0)
  {
    operator delete(v57[0]);
    if (a4) {
      goto LABEL_14;
    }
  }
  else if (a4)
  {
LABEL_14:
    int v53 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_17;
  }
  int v53 = -1;
LABEL_17:
  if (*(void *)(a1 + 4184)) {
    uint64_t v54 = *(uint64_t **)(a1 + 4184);
  }
  else {
    uint64_t v54 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v54, a1 + 3216, a3, v53, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v55);
  uint64_t v59 = off_26C2096F8;
  long long v60 = 0u;
  long long v61 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v59);
  v62.__begin_ = (std::vector<int>::pointer)off_26C2096F8;
  *(_OWORD *)&v62.__end_ = 0u;
  long long v63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v62);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v66, v56);
}

void sub_20CE86C90(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void (**a17)(), long long a18, long long a19, void (**a20)(),long long a21,long long a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a23, a2);
  a17 = off_26C2096F8;
  a18 = 0u;
  a19 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a17);
  a20 = off_26C2096F8;
  a21 = 0u;
  a22 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v28 - 136), v30);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4576);
  uint64_t v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v55, v8, v9, (long long *)__p);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  std::string::basic_string[abi:ne180100]<0>(&v50, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (long long *)&v50);
  if (SHIBYTE(v51) < 0) {
    operator delete(v50);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3168, 0, v11);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  std::string::basic_string[abi:ne180100]<0>(&v50, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (long long *)&v50);
  if (SHIBYTE(v51) < 0) {
    operator delete(v50);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3168, a1 + 3312, 0, v13);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v14);
  int v19 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v15, v16, v17, v18);
  kaldi::CuMatrix<float>::Resize(a1 + 3216, v10, (2 * v19), 0, 0);
  int v24 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v20, v21, v22, v23);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, a1 + 3216, 0, *(_DWORD *)(a1 + 3236), 0, v24);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v50, a1 + 3312, 111, v25, v26);
  std::string::basic_string[abi:ne180100]<0>(&v48, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (long long *)&v48);
  if (SHIBYTE(v48.__end_cap_.__value_) < 0) {
    operator delete(v48.__begin_);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, a1 + 3360, a1 + 3432, &v48);
  uint64_t v28 = (void *)(a1 + 4504);
  uint64_t v29 = *(void **)(a1 + 4504);
  if (v29)
  {
    *(void *)(a1 + 4512) = v29;
    operator delete(v29);
    *uint64_t v28 = 0;
    *(void *)(a1 + 4512) = 0;
    *(void *)(a1 + 4520) = 0;
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)&v48.__begin_;
  *(void *)(a1 + 4520) = v48.__end_cap_.__value_;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v27);
  uint64_t v34 = (const char *)kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v30, v31, v32, v33);
  int v39 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v35, v36, v37, v38);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 3216, 0, *(_DWORD *)(a1 + 3236), v34, v39);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v48, a1 + 3360, 111, v40, v41);
  std::string::basic_string[abi:ne180100]<0>(v46, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (long long *)v46);
  if (v47 < 0)
  {
    operator delete(v46[0]);
    if (a4) {
      goto LABEL_13;
    }
  }
  else if (a4)
  {
LABEL_13:
    int v42 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_16;
  }
  int v42 = -1;
LABEL_16:
  if (*(void *)(a1 + 4184)) {
    int v43 = *(uint64_t **)(a1 + 4184);
  }
  else {
    int v43 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v43, a1 + 3216, a3, v42, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v44);
  v48.__begin_ = (std::vector<int>::pointer)off_26C2096F8;
  *(_OWORD *)&v48.__end_ = 0u;
  long long v49 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
  uint64_t v50 = off_26C2096F8;
  long long v51 = 0u;
  long long v52 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v55, v45);
}

void sub_20CE87114(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void (**a16)(), long long a17, long long a18, void (**a19)(), long long a20,long long a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, a2);
  a16 = off_26C2096F8;
  a17 = 0u;
  a18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  a19 = off_26C2096F8;
  a20 = 0u;
  a21 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a19);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v27 - 128), v29);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4576);
  uint64_t v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v62, v8, v9, (long long *)__p);
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  std::string::basic_string[abi:ne180100]<0>(&v57, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (long long *)&v57);
  if (SHIBYTE(v58) < 0) {
    operator delete(v57);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3168, 0, v11);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  int v17 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v13, v14, v15, v16);
  int v22 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v18, v19, v20, v21);
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelF", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x334, "num_sequences != 0", v23);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 3264, v10, (v22 + v17), 0, 0);
  int v28 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v24, v25, v26, v27);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), 0, v28);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v57, a1 + 3168, 111, v29, v30);
  uint64_t v35 = (const char *)kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v31, v32, v33, v34);
  int v40 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v36, v37, v38, v39);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), v35, v40);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v54, a1 + 3312, 111, v41, v42);
  std::string::basic_string[abi:ne180100]<0>(&v53, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (long long *)&v53);
  if (SHIBYTE(v53.__end_cap_.__value_) < 0) {
    operator delete(v53.__begin_);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3264, a1 + 3312, 0, v43);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v44);
  std::string::basic_string[abi:ne180100]<0>(&v53, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (long long *)&v53);
  if (SHIBYTE(v53.__end_cap_.__value_) < 0) {
    operator delete(v53.__begin_);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, a1 + 3360, a1 + 3432, &v53);
  uint64_t v46 = (void *)(a1 + 4504);
  char v47 = *(void **)(a1 + 4504);
  if (v47)
  {
    *(void *)(a1 + 4512) = v47;
    operator delete(v47);
    void *v46 = 0;
    *(void *)(a1 + 4512) = 0;
    *(void *)(a1 + 4520) = 0;
  }
  *(_OWORD *)uint64_t v46 = *(_OWORD *)&v53.__begin_;
  *(void *)(a1 + 4520) = v53.__end_cap_.__value_;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v45);
  uint64_t v48 = kaldi::CuMatrix<float>::operator=(a1 + 3216, a1 + 3360);
  kaldi::CuMatrix<float>::operator=(a1 + 3312, v48);
  std::string::basic_string[abi:ne180100]<0>(&v53, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (long long *)&v53);
  if (SHIBYTE(v53.__end_cap_.__value_) < 0)
  {
    operator delete(v53.__begin_);
    if (a4) {
      goto LABEL_14;
    }
  }
  else if (a4)
  {
LABEL_14:
    int v49 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_17;
  }
  int v49 = -1;
LABEL_17:
  if (*(void *)(a1 + 4184)) {
    uint64_t v50 = *(uint64_t **)(a1 + 4184);
  }
  else {
    uint64_t v50 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v50, a1 + 3216, a3, v49, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v51);
  char v54 = off_26C2096F8;
  long long v55 = 0u;
  long long v56 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v54);
  uint64_t v57 = off_26C2096F8;
  long long v58 = 0u;
  long long v59 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v57);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v62, v52);
}

void sub_20CE8760C(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void (**a16)(), long long a17, long long a18, void (**a19)(), long long a20,long long a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, a2);
  a16 = off_26C2096F8;
  a17 = 0u;
  a18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  a19 = off_26C2096F8;
  a20 = 0u;
  a21 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a19);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v27 - 128), v29);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::Start(void *a1, clockid_t a2, uint64_t a3)
{
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_3;
    }
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Start", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 714);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  if (*(void *)(a3 + 8)) {
    goto LABEL_9;
  }
LABEL_3:
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 572), a2);
  uint64_t v4 = (void *)a1[427];
  int v5 = (void *)a1[426];
  if (v4 != v5)
  {
    uint64_t v6 = v4 - 6;
    uint64_t v7 = v4 - 6;
    uint64_t v8 = v4 - 6;
    do
    {
      uint64_t v9 = *v8;
      v8 -= 6;
      (*(void (**)(void *))(v9 + 16))(v7);
      v6 -= 6;
      BOOL v10 = v7 == v5;
      uint64_t v7 = v8;
    }
    while (!v10);
  }
  a1[427] = v5;
}

double kaldi::quasar::TorchEncoderDecoder::Finish(kaldi::quasar::TorchEncoderDecoder *this, clockid_t a2)
{
  double result = *((double *)this + 577) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 572);
  *((double *)this + 577) = result;
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::GetTiming(const void **this@<X0>, uint64_t a2@<X8>)
{
  v13[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v5, "time total");
  v5[3] = this[577];
  std::string::basic_string[abi:ne180100]<0>(v6, "time start feedforward");
  v6[3] = this[578];
  std::string::basic_string[abi:ne180100]<0>(v7, "time get history state");
  void v7[3] = this[579];
  std::string::basic_string[abi:ne180100]<0>(v8, "time set history state");
  v8[3] = this[580];
  std::string::basic_string[abi:ne180100]<0>(v9, "time feed forward");
  void v9[3] = this[581];
  std::string::basic_string[abi:ne180100]<0>(v10, "time decoder");
  v10[3] = this[582];
  std::string::basic_string[abi:ne180100]<0>(v11, "time attention");
  void v11[3] = this[583];
  std::string::basic_string[abi:ne180100]<0>(v12, "time readout");
  void v12[3] = this[584];
  std::string::basic_string[abi:ne180100]<0>(v13, "time output embedding");
  void v13[3] = this[585];
  std::map<std::string,double>::map[abi:ne180100](a2, v5, 9);
  uint64_t v4 = 36;
  do
  {
    if (*((char *)&v5[v4 - 1] - 1) < 0) {
      operator delete((void *)v5[v4 - 4]);
    }
    v4 -= 4;
  }
  while (v4 * 8);
}

void sub_20CE87A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 288;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0) {
      operator delete(*(void **)(v10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }
}

unsigned int *kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = a1 + 3216;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(a1 + 3236), *(unsigned int *)(a1 + 3232), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v3, 111, v4, v5);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Symbolize(uint64_t a1, long long **a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5 = 3624;
  if (a4) {
    uint64_t v5 = 3632;
  }
  uint64_t v6 = 3524;
  if (a4) {
    uint64_t v6 = 3536;
  }
  int v7 = *(_DWORD *)(a1 + v6);
  if (v7 == -1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Symbolize", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 867);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Unknown label not described in the model");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + v5);
  uint64_t v14 = a3 + 16;
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v15 = *v8;
      __p[0].__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
    }
    int v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v13 + 96))(v13, __p);
    if (v16 == -1) {
      int v17 = v7;
    }
    else {
      int v17 = v16;
    }
    if (v17 != v7 || (uint64_t v12 = (v12 + 1), (a5 & 1) == 0))
    {
      uint64_t v19 = *(_DWORD **)(a3 + 8);
      unint64_t v18 = *(void *)(a3 + 16);
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v21 = *(_DWORD **)a3;
        uint64_t v22 = ((uint64_t)v19 - *(void *)a3) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v25);
          uint64_t v21 = *(_DWORD **)a3;
          uint64_t v19 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v27 = &v26[4 * v22];
        *(_DWORD *)uint64_t v27 = v17;
        uint64_t v20 = v27 + 4;
        while (v19 != v21)
        {
          int v28 = *--v19;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *(void *)a3 = v27;
        *(void *)(a3 + 8) = v20;
        *(void *)(a3 + 16) = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *uint64_t v19 = v17;
        uint64_t v20 = v19 + 1;
      }
      *(void *)(a3 + 8) = v20;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v8 = (long long *)((char *)v8 + 24);
  }
  while (v8 != v9);
  return v12;
}

void sub_20CE87CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 884);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkSourceId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 881);
}

float kaldi::quasar::TorchEncoderDecoder::Align(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  clockid_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  long long __p = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  int v9 = *(_DWORD *)(a1 + 3532);
  uint64_t v10 = v24;
  if ((unint64_t)v24 >= v25)
  {
    uint64_t v12 = (char *)__p;
    uint64_t v13 = (v24 - (unsigned char *)__p) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v25 - (void)__p;
    if ((uint64_t)(v25 - (void)__p) >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v25, v16);
      uint64_t v12 = (char *)__p;
      uint64_t v10 = v24;
    }
    else
    {
      int v17 = 0;
    }
    unint64_t v18 = &v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *(_DWORD *)unint64_t v18 = v9;
    clockid_t v11 = v18 + 4;
    while (v10 != v12)
    {
      int v20 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    long long __p = v18;
    uint64_t v24 = v11;
    unint64_t v25 = (unint64_t)v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v24 = v9;
    clockid_t v11 = v10 + 4;
  }
  uint64_t v24 = v11;
  float v21 = kaldi::quasar::TorchEncoderDecoder::AlignImpl(a1, a2, (uint64_t *)&__p, (uint64_t)&v29, (uint64_t)&v26, a5, 1, a4);
  if (__p)
  {
    uint64_t v24 = (char *)__p;
    operator delete(__p);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  return v21;
}

void sub_20CE87E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::EosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 883);
}

float kaldi::quasar::TorchEncoderDecoder::AlignImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v136);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132, "AlignImpl", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 940, 1);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Left symbol sequence : ", 23);
    if (v138 >= 0) {
      unint64_t v16 = (void **)&v136;
    }
    else {
      unint64_t v16 = v136;
    }
    if (v138 >= 0) {
      uint64_t v17 = HIBYTE(v138);
    }
    else {
      uint64_t v17 = v137;
    }
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (# ", 4);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v136);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132, "AlignImpl", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 943, 1);
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Right symbol sequence : ", 24);
    if (v138 >= 0) {
      float v21 = (void **)&v136;
    }
    else {
      float v21 = v136;
    }
    if (v138 >= 0) {
      uint64_t v22 = HIBYTE(v138);
    }
    else {
      uint64_t v22 = v137;
    }
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (# ", 4);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" including </s>) ", 17);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132);
  }
  long long v130 = 0u;
  long long v129 = 0u;
  uint64_t v128 = off_26C211198;
  char v131 = 0;
  kaldi::CuMatrix<float>::Resize((uint64_t)&v128, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  uint64_t v28 = v27 - *a2;
  if (v27 != *a2)
  {
    unint64_t v29 = 0;
    unint64_t v30 = v28 >> 2;
    uint64_t v31 = (float *)v129;
    unint64_t v32 = HIDWORD(v129);
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    uint64_t v33 = 4 * (int)v130;
    do
    {
      if (v29 >= v32 || !DWORD2(v129)) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v25);
      }
      *uint64_t v31 = (float)(*(_DWORD *)(v26 + 4 * v29++) - 1);
      uint64_t v31 = (float *)((char *)v31 + v33);
    }
    while (v30 != v29);
  }
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1, 1);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward(a1, (uint64_t)&v128, 0);
  long long v126 = 0u;
  long long v125 = 0u;
  uint64_t v124 = off_26C211198;
  char v127 = 0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v120, 1, 1, 0, 0, 0);
  if (!v123 || !v122) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v37);
  }
  *int v121 = (float)(*(_DWORD *)(a1 + 3528) - 1);
  memset(&v119[1], 0, 24);
  v119[0] = off_26C2111C8;
  uint64_t v39 = *a3;
  uint64_t v38 = a3[1];
  if (a7) {
    uint64_t v40 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384), v34, v35, v36, v37) + 1;
  }
  else {
    uint64_t v40 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384), v34, v35, v36, v37);
  }
  kaldi::Matrix<float>::Resize(a6, ((unint64_t)(v38 - v39) >> 2) - 1, v40, 0, 0);
  if (*(void *)(a1 + 4184))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v132, "AlignImpl", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 965);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Constrained Softmax with force alignment decoding is not Supported!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v132);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v132);
  if (a3[1] == *a3)
  {
    float v42 = 0.0;
LABEL_89:
    if (a8) {
      goto LABEL_92;
    }
  }
  else
  {
    int v110 = (kaldi::nnet1::Nnet *)(a1 + 384);
    unint64_t v41 = 0;
    float v42 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward(a1, (uint64_t)v120, (uint64_t)&v124, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)&v116, HIDWORD(v125), DWORD2(v125), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v124, (unsigned int *)&v116, 111, v43, v44);
      if (!v123 || !v122) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v45);
      }
      int v46 = *(_DWORD *)(*a3 + 4 * v41);
      unsigned int v47 = v46 - 1;
      *int v121 = (float)(v46 - 1);
      std::ostream::operator<<();
      if (((a3[1] - *a3) >> 2) - 1 > v41) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)", ", 2);
      }
      if (!v118 || v117 <= v47) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v48);
      }
      float v49 = logf(*(float *)(v116 + 4 * (int)v47));
      float v42 = v42 - v49;
      if (v46 == *(_DWORD *)(a1 + 3532)) {
        break;
      }
      float v50 = v49;
      if (a6)
      {
        kaldi::SubMatrix<float>::SubMatrix(v113, a6, v41, 1, 0, *(unsigned int *)(a6 + 8));
        if (a7) {
          uint64_t v55 = kaldi::nnet1::Nnet::InputDim(v110, v51, v52, v53, v54);
        }
        else {
          uint64_t v55 = kaldi::nnet1::Nnet::OutputDim(v110, v51, v52, v53, v54);
        }
        kaldi::SubMatrix<float>::SubMatrix(v115, v113, 0, v114, 0, v55);
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v113);
        if (a7)
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>(a1 + 3216, v115, 111, v56, v57);
          unsigned int v62 = kaldi::nnet1::Nnet::InputDim(v110, v58, v59, v60, v61);
          *(float *)kaldi::MatrixBase<float>::operator()(a6, v41, v62, v63, v64) = -v50;
        }
        else
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v124, v115, 111, v56, v57);
        }
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v115);
      }
      if (a5)
      {
        float v65 = -v50;
        unsigned int v67 = *(float **)(a5 + 8);
        unint64_t v66 = *(void *)(a5 + 16);
        if ((unint64_t)v67 >= v66)
        {
          uint64_t v69 = *(float **)a5;
          uint64_t v70 = ((uint64_t)v67 - *(void *)a5) >> 2;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = v66 - (void)v69;
          if (v72 >> 1 > v71) {
            unint64_t v71 = v72 >> 1;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v73);
            uint64_t v69 = *(float **)a5;
            unsigned int v67 = *(float **)(a5 + 8);
          }
          else
          {
            long long v74 = 0;
          }
          unsigned int v75 = (float *)&v74[4 * v70];
          *unsigned int v75 = v65;
          long long v68 = v75 + 1;
          while (v67 != v69)
          {
            int v76 = *((_DWORD *)v67-- - 1);
            *((_DWORD *)v75-- - 1) = v76;
          }
          *(void *)a5 = v75;
          *(void *)(a5 + 8) = v68;
          *(void *)(a5 + 16) = &v74[4 * v73];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *unsigned int v67 = v65;
          long long v68 = v67 + 1;
        }
        *(void *)(a5 + 8) = v68;
      }
      if (a4)
      {
        int v77 = *(int **)(a1 + 4504);
        if (v77 == *(int **)(a1 + 4512)) {
          int v78 = -1;
        }
        else {
          int v78 = *v77;
        }
        long long v80 = *(int **)(a4 + 8);
        unint64_t v79 = *(void *)(a4 + 16);
        if ((unint64_t)v80 >= v79)
        {
          long long v82 = *(int **)a4;
          uint64_t v83 = ((uint64_t)v80 - *(void *)a4) >> 2;
          unint64_t v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v85 = v79 - (void)v82;
          if (v85 >> 1 > v84) {
            unint64_t v84 = v85 >> 1;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v84;
          }
          if (v86)
          {
            char v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v86);
            long long v82 = *(int **)a4;
            long long v80 = *(int **)(a4 + 8);
          }
          else
          {
            char v87 = 0;
          }
          unint64_t v88 = (int *)&v87[4 * v83];
          int *v88 = v78;
          long long v81 = v88 + 1;
          while (v80 != v82)
          {
            int v89 = *--v80;
            *--unint64_t v88 = v89;
          }
          *(void *)a4 = v88;
          *(void *)(a4 + 8) = v81;
          *(void *)(a4 + 16) = &v87[4 * v86];
          if (v82) {
            operator delete(v82);
          }
        }
        else
        {
          *long long v80 = v78;
          long long v81 = v80 + 1;
        }
        *(void *)(a4 + 8) = v81;
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)&v116);
      if (++v41 >= (a3[1] - *a3) >> 2) {
        goto LABEL_89;
      }
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v116);
    if (a8)
    {
LABEL_92:
      if (a7)
      {
        uint64_t v90 = kaldi::MatrixBase<float>::NumRows(a6);
        int v91 = kaldi::MatrixBase<float>::NumCols(a6);
        kaldi::Matrix<float>::Matrix((uint64_t)&v116, v90, (v91 - 1), 0, 0);
        uint64_t v92 = *a3;
        if (a3[1] - *a3 != 4)
        {
          unint64_t v93 = 0;
          do
          {
            int v94 = *(_DWORD *)(v92 + 4 * v93);
            kaldi::SubMatrix<float>::SubMatrix(v115, &v116, v93, 1, 0, v117);
            uint64_t v95 = (v94 - 1);
            kaldi::SubMatrix<float>::SubMatrix(v113, a8, v95, 1, 0, *(unsigned int *)(a8 + 8));
            kaldi::SubMatrix<float>::SubMatrix(v112, a8, v95, 1, 0, *(unsigned int *)(a8 + 8));
            kaldi::MatrixBase<float>::CopyFromMat<float>(v115, (uint64_t)v112, 111, v96, v97);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v112);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v113);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v115);
            ++v93;
            uint64_t v92 = *a3;
          }
          while (((a3[1] - *a3) >> 2) - 1 > v93);
        }
        int v98 = kaldi::MatrixBase<float>::NumCols(a6);
        kaldi::SubMatrix<float>::SubMatrix(v115, a6, 0, *(unsigned int *)(a6 + 12), 0, (v98 - 1));
        kaldi::MatrixBase<float>::MulElements((uint64_t)v115, (uint64_t)&v116, v99, v100, v101);
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v115);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v116);
      }
    }
  }
  if (a4)
  {
    if (!*(unsigned char *)(a1 + 4440))
    {
      int v103 = *(int **)a4;
      uint64_t v102 = *(void *)(a4 + 8);
      if (*(void *)a4 != v102)
      {
        uint64_t v104 = (int *)(v102 - 4);
        if (v104 > v103)
        {
          unint64_t v105 = (unint64_t)(v103 + 1);
          do
          {
            int v106 = *(_DWORD *)(v105 - 4);
            *(_DWORD *)(v105 - 4) = *v104;
            *v104-- = v106;
            BOOL v107 = v105 >= (unint64_t)v104;
            v105 += 4;
          }
          while (!v107);
        }
      }
    }
  }
  v132[0] = *MEMORY[0x263F8C2B8];
  uint64_t v108 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v132 + *(void *)(v132[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v133[0] = v108;
  v133[1] = MEMORY[0x263F8C318] + 16;
  if (v134 < 0) {
    operator delete((void *)v133[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x210559500](&v135);
  kaldi::CuVector<float>::~CuVector(v119);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v124);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v128);
  if (SHIBYTE(v138) < 0) {
    operator delete(v136);
  }
  return v42;
}

void sub_20CE88990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a27);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
  kaldi::CuVector<float>::~CuVector(&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a36);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a48);
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 882);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  uint64_t v2 = *((void *)this + 563);
  if (v2 == *((void *)this + 564)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v2 + 4 * a2);
  }
}

uint64_t kaldi::quasar::TorchEncoderDecoder::CheckHasHandover(kaldi::nnet1::Nnet **this)
{
  uint64_t result = kaldi::nnet1::Nnet::IsRnn((kaldi::nnet1::Nnet *)(this + 1));
  if (result) {
    uint64_t result = kaldi::nnet1::Nnet::IsRnn(this[142]);
  }
  *((unsigned char *)this + 3504) = result;
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::InputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((void *)this + 453);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::OutputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((void *)this + 454);
}

void *kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(void *result, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*((int *)result + 1136) >= 1)
  {
    if (*((_DWORD *)result + 1137) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
    }
    kaldi::CuVector<float>::CuVector(v19);
    if (v20 >= 1)
    {
      uint64_t v6 = 0;
      int v7 = (void *)(a2 + 16);
      uint64_t v8 = *(_DWORD **)(a2 + 8);
      do
      {
        int v9 = *(_DWORD *)(v19[1] + 4 * v6);
        if ((unint64_t)v8 >= *v7)
        {
          clockid_t v11 = *(_DWORD **)a2;
          uint64_t v12 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = *v7 - (void)v11;
          if (v14 >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v15);
            clockid_t v11 = *(_DWORD **)a2;
            uint64_t v8 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            unint64_t v16 = 0;
          }
          uint64_t v17 = &v16[4 * v12];
          *(_DWORD *)uint64_t v17 = v9;
          uint64_t v10 = v17 + 4;
          while (v8 != v11)
          {
            int v18 = *--v8;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v10;
          *(void *)(a2 + 16) = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *uint64_t v8 = v9;
          uint64_t v10 = v8 + 1;
        }
        *(void *)(a2 + 8) = v10;
        ++v6;
        uint64_t v8 = v10;
      }
      while (v6 < v20);
    }
    return kaldi::CuVector<float>::~CuVector(v19);
  }
  return result;
}

void sub_20CE88CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(uint64_t a1, void **a2, unsigned int a3, uint64_t a4, const char *a5)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 3448), 0, a4, a5);
  int v11 = *(_DWORD *)(a1 + 3448);
  if (v11 >= 1)
  {
    if (*(_DWORD *)(a1 + 3452) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    }
    uint64_t v12 = *(void *)(a1 + 3464);
    v13[1] = *(void *)(a1 + 3440) + 4 * (int)(*(_DWORD *)(a1 + 3456) * a3);
    v13[0] = &off_26C209728;
    v13[2] = v11;
    void v13[3] = v12;
    kaldi::CuVectorBase<float>::CopyToVec<float>(v13, (uint64_t)a2, v8, v9, v10);
  }
}

uint64_t kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(uint64_t result, unsigned __int8 *a2, int a3, int a4, uint64_t *a5, int **a6, void *a7)
{
  if (*(unsigned char *)(result + 4433))
  {
    uint64_t v7 = result;
    uint64_t result = kaldi::quasar::Shortlist::ConstrainSoftmax(result + 3656, a2, *(_DWORD *)(v7 + 3532) - 1, *(_DWORD *)(v7 + 3536) - 1, a3, a4, a5, v7 + 384, a6, a7);
    *(void *)(v7 + 4184) = result;
  }
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(kaldi::quasar::TorchEncoderDecoder *this)
{
  if (*((void *)this + 523)) {
    return *((unsigned int *)this + 948);
  }
  else {
    return (*((_DWORD *)this + 883) - 1);
  }
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(kaldi::quasar::TorchEncoderDecoder *this, uint64_t a2)
{
  if (*((void *)this + 523)) {
    return *(unsigned int *)(*((void *)this + 471) + 4 * (int)a2);
  }
  return a2;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable(uint64_t a1, uint64_t *a2, int a3, const std::string *a4)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SymbolTable>");
  if (!a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
    memset(&__p, 0, sizeof(__p));
    uint64_t v9 = (std::locale::id *)MEMORY[0x263F8C108];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      uint64_t v10 = std::locale::use_facet(&v24, v9);
      unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v24);
      uint64_t v12 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v11);
      if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0)
      {
        char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_22:
        if (v13 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
        fst::SymbolTable::ReadText((uint64_t)v22);
      }
      kaldi::Trim(&__p);
      char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 14) {
          goto LABEL_14;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 14) {
          goto LABEL_14;
        }
        p_p = &__p;
      }
      std::string::size_type v15 = p_p->__r_.__value_.__r.__words[0];
      uint64_t v16 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 6);
      if (v15 == 0x6C6F626D79532F3CLL && v16 == 0x3E656C6261546C6FLL) {
        goto LABEL_22;
      }
LABEL_14:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v18 = &__p;
      }
      else {
        int v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)v18, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    }
  }
  uint64_t v7 = fst::SymbolTable::Read(a2, a4);
  kaldi::ExpectToken(a2, 1, (kaldi *)"</SymbolTable>");
  return v7;
}

void sub_20CE89188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTable::Read(void *a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  std::string::operator=((std::string *)&__p[1], a2);
  uint64_t v3 = fst::SymbolTable::Read(a1);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  return v3;
}

void sub_20CE8924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void fst::SymbolTable::ReadText(uint64_t a1)
{
}

uint64_t kaldi::quasar::TorchEncoderDecoder::ModelFileMap(kaldi::quasar::TorchEncoderDecoder *this)
{
  {
    operator new();
  }
  return kaldi::quasar::TorchEncoderDecoder::ModelFileMap(void)::modelFileMap;
}

void sub_20CE8933C(_Unwind_Exception *a1)
{
}

void kaldi::quasar::TorchEncoderDecoder::Read(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  kaldi::ExpectToken(a2, a3, (kaldi *)"<ModelType>");
  unsigned int v103 = a3;
  kaldi::ReadToken(a2, a3, a1 + 3576, v7, v8);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1187);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Full ModelType ", 15);
    int v10 = *(char *)(a1 + 3599);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 3576;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 3576);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 3599);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 3584);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
  }
  BOOL v107 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  kaldi::SplitStringToVector((const std::string *)(a1 + 3576), "_", 1, (uint64_t)&v107);
  if (v107 == v108)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1192);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Undefined Torch model type", 26);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v111);
  }
  uint64_t v13 = a1 + 3552;
  std::string::operator=((std::string *)(a1 + 3552), v107);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1195);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"ModelType ", 10);
    int v15 = *(char *)(a1 + 3575);
    if (v15 >= 0) {
      uint64_t v16 = a1 + 3552;
    }
    else {
      uint64_t v16 = *(void *)(a1 + 3552);
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 3575);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 3560);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
  }
  int v18 = *(char *)(a1 + 3575);
  if (v18 < 0)
  {
    if (*(void *)(a1 + 3560) != 6) {
      goto LABEL_326;
    }
    uint64_t v22 = *(_DWORD **)v13;
    if (**(_DWORD **)v13 != 1668443988 || *(_WORD *)(*(void *)v13 + 4) != 20072)
    {
      if (*v22 != 1668443988 || *((_WORD *)v22 + 2) != 19816)
      {
        if (*v22 != 1668443988 || *((_WORD *)v22 + 2) != 21608) {
          goto LABEL_32;
        }
LABEL_52:
        int v26 = 2;
LABEL_55:
        *(_DWORD *)(a1 + 3548) = v26;
        *(_WORD *)(a1 + 4432) = 0;
        *(unsigned char *)(a1 + 4434) = 0;
        unint64_t v30 = v107;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3) < 2)
        {
LABEL_323:
          kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), a2, v103, a4);
          uint64_t TrainOptions = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8));
          *(void *)std::string __str = &off_26C20B6C0;
          long long v95 = *(_OWORD *)(TrainOptions + 8);
          *(_OWORD *)&__str[23] = *(_OWORD *)(TrainOptions + 23);
          *(_OWORD *)&__str[8] = v95;
          __str[38] = 1;
          kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8), (const kaldi::nnet1::NnetTrainOptions *)__str, 1, v96, v97);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1288);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"dot attention ", 14);
            std::ostream::operator<<();
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
          }
          kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)&v111);
        }
        uint64_t v31 = 0;
        unint64_t v32 = (void **)(a1 + 4472);
        uint64_t v33 = (void **)(a1 + 4448);
        unint64_t v34 = 1;
        while (1)
        {
          uint64_t v35 = &v30[v31];
          uint64_t v36 = (uint64_t)&v30[v31 + 1];
          if (SHIBYTE(v35[1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v36, v35[1].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v37 = *(_OWORD *)v36;
            *(void *)&__str[16] = *(void *)(v36 + 16);
            *(_OWORD *)std::string __str = v37;
          }
          if ((__str[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
          }
          else {
            std::string v106 = *(std::string *)__str;
          }
          memset(&v105, 0, sizeof(v105));
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1216);
            uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Processing token ", 17);
            if (__str[23] >= 0) {
              uint64_t v39 = __str;
            }
            else {
              uint64_t v39 = *(unsigned char **)__str;
            }
            if (__str[23] >= 0) {
              uint64_t v40 = __str[23];
            }
            else {
              uint64_t v40 = *(void *)&__str[8];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
          }
          LODWORD(v41) = __str[23];
          if ((__str[23] & 0x80000000) == 0)
          {
            switch(__str[23])
            {
              case 3:
                if (*(unsigned __int16 *)__str != 20546 || __str[2] != 69) {
                  goto LABEL_137;
                }
                goto LABEL_153;
              case 4:
                goto LABEL_134;
              case 5:
                goto LABEL_122;
              case 6:
LABEL_116:
                if (*(_DWORD *)__str == 1095781716 && *(unsigned __int16 *)&__str[4] == 21588) {
                  goto LABEL_150;
                }
                if (__str[23] == 4) {
                  goto LABEL_134;
                }
                if (__str[23] != 5) {
                  goto LABEL_137;
                }
LABEL_122:
                if (*(_DWORD *)__str == 1279871043 && __str[4] == 68) {
                  goto LABEL_127;
                }
LABEL_133:
                if (__str[23] != 4) {
                  goto LABEL_137;
                }
LABEL_134:
                if (*(_DWORD *)__str == 1416916804) {
                  goto LABEL_135;
                }
LABEL_137:
                unint64_t v43 = __str[23];
                break;
              case 7:
LABEL_129:
                if (*(_DWORD *)__str != 1867807056 || *(_DWORD *)&__str[3] != 1751347823) {
                  goto LABEL_133;
                }
                goto LABEL_163;
              case 9:
                if (*(void *)__str != 0x53494C54524F4853 || __str[8] != 84)
                {
                  switch(__str[23])
                  {
                    case 4:
                      goto LABEL_134;
                    case 5:
                      goto LABEL_122;
                    case 6:
                      goto LABEL_116;
                    case 7:
                      goto LABEL_129;
                    default:
                      goto LABEL_137;
                  }
                }
                goto LABEL_147;
              default:
                goto LABEL_137;
            }
LABEL_138:
            if (v43 <= 8) {
              goto LABEL_166;
            }
            std::string::basic_string(&v111, (const std::string *)__str, 0, 7uLL, (std::allocator<char> *)&v110);
            if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) == 7)
              {
                BOOL v53 = LODWORD(v111.__r_.__value_.__l.__data_) == 1415865409
                   && *(_DWORD *)((char *)v111.__r_.__value_.__r.__words + 3) == 979853652;
                LODWORD(v41) = __str[23];
                unint64_t v54 = *(void *)&__str[8];
                if (v53) {
                  goto LABEL_222;
                }
                goto LABEL_167;
              }
              LODWORD(v41) = __str[23];
LABEL_166:
              unint64_t v54 = *(void *)&__str[8];
              goto LABEL_167;
            }
            BOOL v56 = v111.__r_.__value_.__l.__size_ == 7
               && *(_DWORD *)v111.__r_.__value_.__l.__data_ == 1415865409
               && *(_DWORD *)(v111.__r_.__value_.__r.__words[0] + 3) == 979853652;
            operator delete(v111.__r_.__value_.__l.__data_);
            LODWORD(v41) = __str[23];
            unint64_t v54 = *(void *)&__str[8];
            if (v56)
            {
LABEL_222:
              unint64_t v41 = v41;
              if ((v41 & 0x80u) != 0) {
                unint64_t v41 = v54;
              }
              std::string::basic_string(&v111, (const std::string *)__str, 7uLL, v41 - 7, (std::allocator<char> *)&v110);
              if (*(char *)(a1 + 4471) < 0) {
                operator delete(*v33);
              }
              *(_OWORD *)uint64_t v33 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
              *(void *)(a1 + 4464) = *((void *)&v111.__r_.__value_.__l + 2);
              MEMORY[0x210558E70](&v106, "AddTag");
              if (*(char *)(a1 + 4471) < 0)
              {
                std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)(a1 + 4448), *(void *)(a1 + 4456));
              }
              else
              {
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *(_OWORD *)v33;
                v111.__r_.__value_.__r.__words[2] = *(void *)(a1 + 4464);
              }
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v105, &v111, v112, 1uLL);
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1239);
                int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Extracted add tag : ", 20);
                int v78 = *(char *)(a1 + 4471);
                if (v78 >= 0) {
                  uint64_t v79 = a1 + 4448;
                }
                else {
                  uint64_t v79 = *(void *)(a1 + 4448);
                }
                if (v78 >= 0) {
                  uint64_t v80 = *(unsigned __int8 *)(a1 + 4471);
                }
                else {
                  uint64_t v80 = *(void *)(a1 + 4456);
                }
                long long v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
                long long v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" from ", 6);
                if (__str[23] >= 0) {
                  uint64_t v83 = __str;
                }
                else {
                  uint64_t v83 = *(unsigned char **)__str;
                }
                if (__str[23] >= 0) {
                  uint64_t v84 = __str[23];
                }
                else {
                  uint64_t v84 = *(void *)&__str[8];
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
              }
              LODWORD(v110) = kaldi::quasar::ToAddTag(a1 + 4448);
              kaldi::quasar::FromAddTag((int *)&v110, &v111);
              if (*(char *)(a1 + 4471) < 0) {
                operator delete(*v33);
              }
              *(_OWORD *)uint64_t v33 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
              *(void *)(a1 + 4464) = *((void *)&v111.__r_.__value_.__l + 2);
              *(unsigned char *)(a1 + 4442) = 1;
              if (kaldi::g_kaldi_verbose_level < 0) {
                goto LABEL_304;
              }
              kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1242);
              uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"AddTag value ", 13);
              int v86 = *(char *)(a1 + 4471);
              if (v86 >= 0) {
                uint64_t v87 = a1 + 4448;
              }
              else {
                uint64_t v87 = *(void *)(a1 + 4448);
              }
              if (v86 >= 0) {
                uint64_t v88 = *(unsigned __int8 *)(a1 + 4471);
              }
              else {
                uint64_t v88 = *(void *)(a1 + 4456);
              }
              goto LABEL_302;
            }
LABEL_167:
            if ((v41 & 0x80u) == 0) {
              unint64_t v54 = v41;
            }
            if (v54 >= 0xC)
            {
              std::string::basic_string(&v111, (const std::string *)__str, 0, 0xAuLL, (std::allocator<char> *)&v110);
              if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) == 10)
                {
                  BOOL v57 = v111.__r_.__value_.__r.__words[0] == 0x616D726F46676154
                     && LOWORD(v111.__r_.__value_.__r.__words[1]) == 14964;
                  LODWORD(v41) = __str[23];
                  if (v57) {
                    goto LABEL_198;
                  }
                  goto LABEL_176;
                }
LABEL_229:
                LODWORD(v41) = __str[23];
                if ((__str[23] & 0x80) != 0)
                {
LABEL_230:
                  if (*(void *)&__str[8] != 6)
                  {
                    if (*(void *)&__str[8] == 10
                      && **(void **)__str == 0x626D456572616853
                      && *(_WORD *)(*(void *)__str + 8) == 25701)
                    {
LABEL_256:
                      *(unsigned char *)(a1 + 4441) = 1;
                      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                      {
                        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1253);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found shared embeddings token", 29);
                        goto LABEL_303;
                      }
                      goto LABEL_304;
                    }
                    goto LABEL_246;
                  }
                  if (**(_DWORD **)__str == 1348693573 && *(_WORD *)(*(void *)__str + 4) == 29551)
                  {
LABEL_254:
                    *(unsigned char *)(a1 + 4436) = 1;
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1256);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found encoder position embedding token", 38);
                      goto LABEL_303;
                    }
                    goto LABEL_304;
                  }
                  uint64_t v60 = *(unsigned char **)__str;
LABEL_242:
                  int v73 = *(_DWORD *)v60;
                  int v74 = *((unsigned __int16 *)v60 + 2);
                  if (v73 == 1348691268 && v74 == 29551)
                  {
                    *(unsigned char *)(a1 + 4437) = 1;
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1259);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found decoder position embedding token", 38);
                      goto LABEL_303;
                    }
                    goto LABEL_304;
                  }
                  goto LABEL_246;
                }
LABEL_177:
                if (v41 == 6)
                {
                  if (*(_DWORD *)__str == 1348693573 && *(unsigned __int16 *)&__str[4] == 29551) {
                    goto LABEL_254;
                  }
                  uint64_t v60 = __str;
                  goto LABEL_242;
                }
                if (v41 == 10
                  && *(void *)__str == 0x626D456572616853
                  && *(unsigned __int16 *)&__str[8] == 25701)
                {
                  goto LABEL_256;
                }
LABEL_246:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcBos"))
                {
                  *(unsigned char *)(a1 + 4438) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1262);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found add beginning of sentence tag", 35);
                    goto LABEL_303;
                  }
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcEos"))
                {
                  *(unsigned char *)(a1 + 4439) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1265);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found add end of sentence tag", 29);
                    goto LABEL_303;
                  }
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AlignModel"))
                {
                  *(unsigned char *)(a1 + 4443) = 1;
                }
                else
                {
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "ShiftedAlignments"))
                  {
                    *(unsigned char *)(a1 + 4444) = 1;
                    if (!*(unsigned char *)(a1 + 4443)) {
                      kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x4F6, "supervised_align_model_", v76);
                    }
                    goto LABEL_304;
                  }
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "MultipleDecoders"))
                  {
                    *(unsigned char *)(a1 + 4445) = 1;
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1273);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found multiple decoders token", 29);
                      goto LABEL_303;
                    }
                  }
                  else
                  {
                    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "NoSymbolTables"))
                    {
                      if (kaldi::g_kaldi_verbose_level >= -1)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1278);
                        int v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Unknown model sub tag ", 22);
                        if (__str[23] >= 0) {
                          uint64_t v92 = __str;
                        }
                        else {
                          uint64_t v92 = *(unsigned char **)__str;
                        }
                        if (__str[23] >= 0) {
                          uint64_t v93 = __str[23];
                        }
                        else {
                          uint64_t v93 = *(void *)&__str[8];
                        }
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v92, v93);
                        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v111);
                      }
                      goto LABEL_304;
                    }
                    *(unsigned char *)(a1 + 4446) = 1;
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1276);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found 'NoSymbolTables' token", 28);
                      goto LABEL_303;
                    }
                  }
                }
                goto LABEL_304;
              }
              if (v111.__r_.__value_.__l.__size_ != 10)
              {
                operator delete(v111.__r_.__value_.__l.__data_);
                goto LABEL_229;
              }
              BOOL v62 = *(void *)v111.__r_.__value_.__l.__data_ != 0x616D726F46676154
                 || *(_WORD *)(v111.__r_.__value_.__r.__words[0] + 8) != 14964;
              operator delete(v111.__r_.__value_.__l.__data_);
              LODWORD(v41) = __str[23];
              if (!v62)
              {
LABEL_198:
                unint64_t v41 = v41;
                if ((v41 & 0x80u) != 0) {
                  unint64_t v41 = *(void *)&__str[8];
                }
                std::string::basic_string(&v111, (const std::string *)__str, 0xAuLL, v41 - 10, (std::allocator<char> *)&v110);
                if (*(char *)(a1 + 4495) < 0) {
                  operator delete(*v32);
                }
                *(_OWORD *)unint64_t v32 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
                *(void *)(a1 + 4488) = *((void *)&v111.__r_.__value_.__l + 2);
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1245);
                  uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Extracted tag format : ", 23);
                  int v64 = *(char *)(a1 + 4495);
                  if (v64 >= 0) {
                    uint64_t v65 = a1 + 4472;
                  }
                  else {
                    uint64_t v65 = *(void *)(a1 + 4472);
                  }
                  if (v64 >= 0) {
                    uint64_t v66 = *(unsigned __int8 *)(a1 + 4495);
                  }
                  else {
                    uint64_t v66 = *(void *)(a1 + 4480);
                  }
                  unsigned int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
                  long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" from ", 6);
                  if (__str[23] >= 0) {
                    uint64_t v69 = __str;
                  }
                  else {
                    uint64_t v69 = *(unsigned char **)__str;
                  }
                  if (__str[23] >= 0) {
                    uint64_t v70 = __str[23];
                  }
                  else {
                    uint64_t v70 = *(void *)&__str[8];
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
                  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
                }
                LODWORD(v110) = kaldi::quasar::ToTagFormat((void *)(a1 + 4472));
                kaldi::quasar::FromTagFormat((int *)&v110, &v111);
                if (*(char *)(a1 + 4495) < 0) {
                  operator delete(*v32);
                }
                *(_OWORD *)unint64_t v32 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
                *(void *)(a1 + 4488) = *((void *)&v111.__r_.__value_.__l + 2);
                MEMORY[0x210558E70](&v106, "TagFormat");
                if (*(char *)(a1 + 4495) < 0)
                {
                  std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)(a1 + 4472), *(void *)(a1 + 4480));
                }
                else
                {
                  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *(_OWORD *)v32;
                  v111.__r_.__value_.__r.__words[2] = *(void *)(a1 + 4488);
                }
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v105, &v111, v112, 1uLL);
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v111.__r_.__value_.__l.__data_);
                }
                *(unsigned char *)(a1 + 4442) = 1;
                if (kaldi::g_kaldi_verbose_level < 0) {
                  goto LABEL_304;
                }
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1250);
                uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"TagFormat value ", 16);
                int v89 = *(char *)(a1 + 4495);
                if (v89 >= 0) {
                  uint64_t v87 = a1 + 4472;
                }
                else {
                  uint64_t v87 = *(void *)(a1 + 4472);
                }
                if (v89 >= 0) {
                  uint64_t v88 = *(unsigned __int8 *)(a1 + 4495);
                }
                else {
                  uint64_t v88 = *(void *)(a1 + 4480);
                }
LABEL_302:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v87, v88);
LABEL_303:
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
                goto LABEL_304;
              }
            }
LABEL_176:
            if ((v41 & 0x80) != 0) {
              goto LABEL_230;
            }
            goto LABEL_177;
          }
          unint64_t v43 = *(void *)&__str[8];
          if (*(void *)&__str[8] == 3 && **(_WORD **)__str == 20546 && *(unsigned char *)(*(void *)__str + 2) == 69)
          {
LABEL_153:
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1218);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found BPE token", 15);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
            }
            *(unsigned char *)(a1 + 4432) = 1;
            goto LABEL_304;
          }
          if (*(void *)&__str[8] == 9)
          {
            if (**(void **)__str == 0x53494C54524F4853 && *(unsigned char *)(*(void *)__str + 8) == 84)
            {
LABEL_147:
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1221);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found SHORTLIST token", 21);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
              }
              *(unsigned char *)(a1 + 4433) = 1;
              goto LABEL_304;
            }
            unint64_t v43 = *(void *)&__str[8];
          }
          if (v43 == 6)
          {
            if (**(_DWORD **)__str == 1095781716 && *(_WORD *)(*(void *)__str + 4) == 21588)
            {
LABEL_150:
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1224);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found TMPATT token", 18);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v111);
              }
              *(unsigned char *)(a1 + 4434) = 1;
              goto LABEL_304;
            }
            unint64_t v43 = *(void *)&__str[8];
          }
          if (v43 == 5)
          {
            if (**(_DWORD **)__str == 1279871043 && *(unsigned char *)(*(void *)__str + 4) == 68)
            {
LABEL_127:
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1227);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found CHILD token", 17);
                goto LABEL_303;
              }
              goto LABEL_304;
            }
            unint64_t v43 = *(void *)&__str[8];
          }
          if (v43 == 7)
          {
            if (**(_DWORD **)__str == 1867807056 && *(_DWORD *)(*(void *)__str + 3) == 1751347823)
            {
LABEL_163:
              *(unsigned char *)(a1 + 4440) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1230);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found PyTorch token", 19);
                goto LABEL_303;
              }
              goto LABEL_304;
            }
            unint64_t v43 = *(void *)&__str[8];
          }
          if (v43 != 4) {
            goto LABEL_138;
          }
          if (**(_DWORD **)__str != 1416916804) {
            goto LABEL_166;
          }
LABEL_135:
          *(unsigned char *)(a1 + 4435) = 1;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1233);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Found DotT token", 16);
            goto LABEL_303;
          }
LABEL_304:
          int v110 = &v106;
          uint64_t v90 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 3600), (const void **)&v106.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v110)+ 7);
          if (v90 != &v105) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v90, v105.__begin_, (long long *)v105.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v105.__end_ - (char *)v105.__begin_) >> 3));
          }
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          ++v34;
          unint64_t v30 = v107;
          ++v31;
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3) <= v34) {
            goto LABEL_323;
          }
        }
      }
LABEL_54:
      int v26 = 1;
      goto LABEL_55;
    }
  }
  else
  {
    if (v18 != 6) {
      goto LABEL_326;
    }
    if (*(_DWORD *)v13 != 1668443988 || *(_WORD *)(a1 + 3556) != 20072)
    {
      if (*(_DWORD *)v13 != 1668443988 || *(_WORD *)(a1 + 3556) != 19816)
      {
        BOOL v21 = *(_DWORD *)v13 == 1668443988 && *(_WORD *)(a1 + 3556) == 21608;
        uint64_t v22 = (_DWORD *)(a1 + 3552);
        if (!v21)
        {
LABEL_32:
          int v23 = *v22;
          int v24 = *((unsigned __int16 *)v22 + 2);
          if (v23 != 1668443988 || v24 != 18024)
          {
LABEL_326:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v111, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1205);
            int v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Unsupported Torch model type : ", 31);
            int v99 = *(char *)(a1 + 3575);
            if (v99 >= 0) {
              uint64_t v100 = a1 + 3552;
            }
            else {
              uint64_t v100 = *(void *)(a1 + 3552);
            }
            if (v99 >= 0) {
              uint64_t v101 = *(unsigned __int8 *)(a1 + 3575);
            }
            else {
              uint64_t v101 = *(void *)(a1 + 3560);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, v100, v101);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v111);
          }
          int v26 = 3;
          goto LABEL_55;
        }
        goto LABEL_52;
      }
      goto LABEL_54;
    }
  }
  int v26 = 0;
  goto LABEL_55;
}

void sub_20CE8B758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_20CE8B768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_20CE8B79C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20CE8B8B4);
}

void sub_20CE8B7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_20CE8B7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_20CE8B7CC()
{
}

void sub_20CE8B7D4()
{
}

void sub_20CE8B7EC()
{
  MEMORY[0x2105595E0](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x20CE8B854);
}

void sub_20CE8B80C()
{
}

void sub_20CE8B81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  JUMPOUT(0x20CE8B8A4);
}

void sub_20CE8B824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_20CE8B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    JUMPOUT(0x20CE8B860);
  }
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a17);
  JUMPOUT(0x20CE8B8A4);
}

void sub_20CE8B870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  a39 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  a39 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

void std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v2, a2);
}

void kaldi::quasar::TorchEncoderDecoder::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 3640))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5, "SetMappedFile", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1178, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5);
    }
  }
  else
  {
    uint64_t v2 = *a2;
    uint64_t v3 = a2[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 3640) = v2;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 3648);
    *(void *)(a1 + 3648) = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_20CE8B9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BPE::Read(uint64_t a1, uint64_t *a2, int a3)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1 + 24);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 64));
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v63, v6, v7);
  int v10 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    if (v64 != 9) {
      goto LABEL_16;
    }
    uint64_t v11 = v63;
  }
  else
  {
    if (HIBYTE(v65) != 9)
    {
LABEL_11:
      if (v10 != 10)
      {
LABEL_23:
        if (v10 != 9)
        {
LABEL_33:
          if (v10 != 8) {
            goto LABEL_79;
          }
          uint64_t v27 = (void **)&v63;
          goto LABEL_38;
        }
        BOOL v21 = (void **)&v63;
        goto LABEL_28;
      }
      int v15 = (void **)&v63;
      goto LABEL_18;
    }
    uint64_t v11 = (void **)&v63;
  }
  uint64_t v12 = *v11;
  int v13 = *((unsigned __int8 *)v11 + 8);
  if (v12 == (void *)0x65646F4D6B6E553CLL && v13 == 62)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v62 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
    *(_DWORD *)(a1 + 184) = kaldi::quasar::BPE::StringToUnkMode((uint64_t)__p);
    kaldi::ReadToken(a2, a3, (uint64_t)&v63, v16, v17);
    if (SHIBYTE(v62) < 0) {
      operator delete(__p[0]);
    }
    int v10 = HIBYTE(v65);
    if ((v65 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((v65 & 0x8000000000000000) == 0)
  {
    goto LABEL_11;
  }
LABEL_16:
  if (v64 != 10) {
    goto LABEL_26;
  }
  int v15 = v63;
LABEL_18:
  int v18 = *v15;
  int v19 = *((unsigned __int16 *)v15 + 4);
  if (v18 == (void *)0x656B6F546B6E553CLL && v19 == 15982)
  {
    kaldi::ReadToken(a2, a3, a1 + 192, v8, v9);
    kaldi::ReadToken(a2, a3, (uint64_t)&v63, v22, v23);
    int v10 = HIBYTE(v65);
    if ((v65 & 0x8000000000000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_23;
  }
LABEL_26:
  if (v64 != 9) {
    goto LABEL_36;
  }
  BOOL v21 = v63;
LABEL_28:
  int v24 = *v21;
  int v25 = *((unsigned __int8 *)v21 + 8);
  if (v24 == (void *)0x6E6F69737265563CLL && v25 == 62)
  {
    kaldi::ReadToken(a2, a3, a1 + 216, v8, v9);
    kaldi::ReadToken(a2, a3, (uint64_t)&v63, v28, v29);
    int v10 = HIBYTE(v65);
    if ((v65 & 0x8000000000000000) == 0) {
      goto LABEL_33;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_33;
  }
LABEL_36:
  if (v64 != 8) {
    goto LABEL_79;
  }
  uint64_t v27 = v63;
LABEL_38:
  if (*v27 != (void *)0x3E6570426D754E3CLL)
  {
LABEL_79:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 203);
    unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected to read number of BPE units now, but got ", 50);
    if (v65 >= 0) {
      uint64_t v55 = (void **)&v63;
    }
    else {
      uint64_t v55 = v63;
    }
    if (v65 >= 0) {
      uint64_t v56 = HIBYTE(v65);
    }
    else {
      uint64_t v56 = v64;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  int v60 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v60, v8, v9);
  if ((a3 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v60)
  {
    int v30 = 0;
    uint64_t v31 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v62 = 0;
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      unint64_t v32 = std::locale::use_facet(&v57, v31);
      unsigned __int8 v33 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v57);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)__p, v33);
      unint64_t v34 = *(void *)(a1 + 72);
      if (v34 >= *(void *)(a1 + 80))
      {
        uint64_t v36 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 64), (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v62) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 72), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v35 = *(_OWORD *)__p;
          *(void *)(v34 + 16) = v62;
          *(_OWORD *)unint64_t v34 = v35;
        }
        uint64_t v36 = v34 + 24;
        *(void *)(a1 + 72) = v34 + 24;
      }
      *(void *)(a1 + 72) = v36;
      kaldi::quasar::BPE::ProcessLine(a1, (uint64_t)__p, (float)v30);
      if (SHIBYTE(v62) < 0) {
        operator delete(__p[0]);
      }
      ++v30;
    }
    while (v30 != v60);
  }
  kaldi::quasar::BPE::GetUniqueChars((kaldi::quasar::BPE *)a1);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 217);
    long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model version: ", 19);
    int v38 = *(char *)(a1 + 239);
    uint64_t v39 = v38 >= 0 ? a1 + 216 : *(void *)(a1 + 216);
    uint64_t v40 = v38 >= 0 ? *(unsigned __int8 *)(a1 + 239) : *(void *)(a1 + 224);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 218);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of BPE model entries : ", 25);
      unint64_t v41 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" # of chars ", 12);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 219);
        float v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model unk mode = ", 21);
        kaldi::quasar::BPE::UnkModeToString(*(_DWORD *)(a1 + 184), &v57);
        if ((v59 & 0x80u) == 0) {
          locale = &v57;
        }
        else {
          locale = v57.__locale_;
        }
        if ((v59 & 0x80u) == 0) {
          uint64_t v44 = v59;
        }
        else {
          uint64_t v44 = v58;
        }
        clockid_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)locale, v44);
        int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", unk token = ", 14);
        uint64_t v49 = *(void *)(a1 + 192);
        uint64_t v48 = a1 + 192;
        uint64_t v47 = v49;
        int v50 = *(char *)(v48 + 23);
        if (v50 >= 0) {
          uint64_t v51 = v48;
        }
        else {
          uint64_t v51 = v47;
        }
        if (v50 >= 0) {
          uint64_t v52 = *(unsigned __int8 *)(v48 + 23);
        }
        else {
          uint64_t v52 = *(void *)(v48 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v51, v52);
        if ((char)v59 < 0) {
          operator delete(v57.__locale_);
        }
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
    }
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v63);
  }
  return 1;
}

void sub_20CE8BFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (*(char *)(v6 - 65) < 0) {
    operator delete(*(void **)(v6 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_20CE8BFC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_20CE8BFD0()
{
  *(void *)(v0 + 72) = v1;
  JUMPOUT(0x20CE8BFF0);
}

void sub_20CE8BFDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::quasar::BPE::StringToUnkMode(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (v1 != 4)
    {
      if (v1 != 8) {
        goto LABEL_25;
      }
      if (*(void *)a1 != 0x6B6E753272616863)
      {
        if (*(void *)a1 != 0x6B6E753264726F77)
        {
          uint64_t v2 = (void *)a1;
          if (*(void *)a1 == 0x72616863706F7264) {
            return 3;
          }
LABEL_18:
          if (*v2 == 0x64726F77706F7264) {
            return 4;
          }
LABEL_25:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "StringToUnkMode", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 99);
          uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown unk mode : ", 19);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, a1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
        }
        return 2;
      }
      return 1;
    }
    if (*(_DWORD *)a1 != 1885693291) {
      goto LABEL_25;
    }
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == 4 && **(_DWORD **)a1 == 1885693291) {
    return 0;
  }
  if (v3 != 8) {
    goto LABEL_25;
  }
  if (**(void **)a1 == 0x6B6E753272616863) {
    return 1;
  }
  if (*(void *)(a1 + 8) != 8) {
    goto LABEL_25;
  }
  if (**(void **)a1 == 0x6B6E753264726F77) {
    return 2;
  }
  if (*(void *)(a1 + 8) != 8) {
    goto LABEL_25;
  }
  uint64_t v2 = *(void **)a1;
  if (**(void **)a1 != 0x72616863706F7264)
  {
    if ((v1 & 0x80) == 0)
    {
      uint64_t v2 = (void *)a1;
      if (v1 != 8) {
        goto LABEL_25;
      }
    }
    goto LABEL_18;
  }
  return 3;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::HasBpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned __int8 *)this + 4432);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return (uint64_t)this + 4192;
}

void kaldi::quasar::TorchEncoderDecoder::SelectModel(void *a1@<X0>, long long *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 144);
  if (a1 + 145 == (void *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)(a1 + 144), (const void **)a2))
  {
    uint64_t v11 = a1[144];
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v12 = *(void *)(v11 + 64);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    a1[142] = v13;
    uint64_t v14 = (std::__shared_weak_count *)a1[143];
    a1[143] = v12;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    int v15 = a2;
    uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v15);
    uint64_t v9 = v7[7];
    uint64_t v8 = v7[8];
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    a1[142] = v9;
    int v10 = (std::__shared_weak_count *)a1[143];
    a1[143] = v8;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      uint64_t v8 = a1[143];
      uint64_t v9 = a1[142];
    }
    *a3 = v9;
    a3[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void kaldi::quasar::Shortlist::Shortlist(kaldi::quasar::Shortlist *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 24);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 34) = -1;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::Shortlist *)((char *)this + 144));
}

void sub_20CE8C398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = *(void **)(v10 + 112);
  if (v13)
  {
    *(void *)(v10 + 120) = v13;
    operator delete(v13);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::Matrix<float>::~Matrix(v11);
  a10 = (void **)v10;
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t kaldi::quasar::BPE::BPE(uint64_t a1, int a2, long long *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_DWORD *)(a1 + 128) = 2139095039;
  *(void *)(a1 + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "@@");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 160), "</w>");
  *(_DWORD *)(a1 + 184) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 208) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 192) = v6;
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 216), "0.1");
  return a1;
}

void sub_20CE8C534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void kaldi::quasar::BPE::~BPE(kaldi::quasar::BPE *this)
{
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 88);
  uint64_t v2 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::string>::destroy((uint64_t)this, *((char **)this + 1));
}

uint64_t kaldi::quasar::TimeBlock::TimeBlock(uint64_t a1, double *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(a1 + 40) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(double *)(a1 + 16) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2) - *a2;
  return a1;
}

void sub_20CE8C7F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TimeBlock::~TimeBlock(kaldi::quasar::TimeBlock *this, clockid_t a2)
{
  uint64_t v3 = *(double **)this;
  **((double **)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2)
                          - *v3
                          - *((double *)this + 2)
                          + **((double **)this + 1);
  int v4 = *((char *)this + 47);
  if (v4 < 0) {
    uint64_t v5 = *((void *)this + 4);
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)this + 47);
  }
  if (v5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v14, "~TimeBlock", "../engine/common/libquasar/libkaldi/src/nnmt/torch-translator.h", 60);
    int v6 = *((char *)this + 47);
    if (v6 >= 0) {
      uint64_t v7 = (char *)this + 24;
    }
    else {
      uint64_t v7 = (char *)*((void *)this + 3);
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)this + 47);
    }
    else {
      uint64_t v8 = *((void *)this + 4);
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v10);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" diff ", 6);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    LOBYTE(v4) = *((unsigned char *)this + 47);
  }
  if ((v4 & 0x80) != 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t fst::SymbolTable::Read(void *a1)
{
  uint64_t result = fst::SymbolTableImpl::Read(a1);
  if (result) {
    operator new();
  }
  return result;
}

void fst::SymbolTableReadOptions::~SymbolTableReadOptions(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void kaldi::quasar::BPE::ProcessLine(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, " ", 1, (uint64_t)&v12);
  if (v13 - (void)v12 == 48)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v12 + 3, (uint64_t)__p);
    int v15 = __p;
    *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 10) = a3;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "ProcessLine", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 147);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Wrong number of fields, ignoring : ", 35);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_20CE8CB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::string __p = (void *)(v15 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetUniqueChars(kaldi::quasar::BPE *this)
{
  uint64_t v1 = (const std::string *)*((void *)this + 8);
  for (uint64_t i = (const std::string *)*((void *)this + 9); v1 != i; ++v1)
  {
    kaldi::quasar::BPE::StripSeparator((uint64_t)this, v1, &__p);
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    kaldi::quasar::BPE::SplitUtfString((int)this, &__p, (uint64_t)&v6);
    int v4 = v6;
    uint64_t v5 = v7;
    while (v4 != v5)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this, v4, (uint64_t)v4);
      v4 += 3;
    }
    clockid_t v10 = &v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20CE8CC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *kaldi::quasar::BPE::UnkModeToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 5)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "UnkModeToString", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 116);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unknown BPE unknown mode");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = off_264105420[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void kaldi::quasar::BPE::StripSeparator(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
  }
  int v8 = *(char *)(a1 + 159);
  if (v8 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 159);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 144);
  }
  std::string::size_type v10 = v7 - v9;
  if (v7 < v9) {
    goto LABEL_34;
  }
  if ((v5 & 0x80) != 0)
  {
    if (v9 == -1 || size < v10) {
LABEL_41:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    size_t v12 = size - v10 >= v9 ? v9 : size - v10;
    uint64_t v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v9 == -1 || v5 < v10) {
      goto LABEL_41;
    }
    size_t v12 = v5 - v10 >= v9 ? v9 : v5 - v10;
    uint64_t v13 = a2;
  }
  uint64_t v15 = v8 >= 0 ? (const void *)(a1 + 136) : *(const void **)(a1 + 136);
  int v16 = memcmp((char *)v13 + v10, v15, v12);
  if (v12 == v9 && v16 == 0)
  {
    std::string::basic_string(a3, a2, 0, v10, (std::allocator<char> *)&v19);
  }
  else
  {
LABEL_34:
    if ((v5 & 0x80) != 0)
    {
      int v18 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external(a3, v18, size);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    }
  }
}

unint64_t kaldi::quasar::BPE::SplitUtfString(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  BOOL v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __str->__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    std::string::size_type v9 = 0;
    do
    {
      std::string::size_type v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!v5) {
        std::string::size_type v10 = __str;
      }
      std::string::value_type v11 = v10->__r_.__value_.__s.__data_[v9];
      if ((v11 & 0xF8) == 0xF0)
      {
        uint64_t v12 = 4;
      }
      else if ((v11 & 0xF0) == 0xE0)
      {
        uint64_t v12 = 3;
      }
      else
      {
        BOOL v13 = (v11 & 0xE0) == 192;
        uint64_t v12 = 1;
        if (v13) {
          uint64_t v12 = 2;
        }
      }
      if (v5) {
        std::string::size_type v4 = size;
      }
      if (v9 + v12 > v4) {
        std::string::size_type v14 = 1;
      }
      else {
        std::string::size_type v14 = v12;
      }
      std::string::basic_string(&__p, __str, v9, v14, (std::allocator<char> *)&__v);
      unint64_t v16 = *(void *)(a3 + 8);
      unint64_t v15 = *(void *)(a3 + 16);
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a3) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a3) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21) {
          uint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        int v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v25 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 8) = v25;
        if (v26 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v16 = v17;
        *(void *)(a3 + 8) = v16 + 24;
      }
      v9 += v14;
      std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      BOOL v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
      }
    }
    while (v9 < v27);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
}

void sub_20CE8D0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  BOOL v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20CE8D214(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::map<std::string,double>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  std::string::size_type v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20CE8D3EC(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      std::string::size_type v14 = (const void **)a2[1];
      do
      {
        unint64_t v15 = v14;
        std::string::size_type v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = (const void **)a2;
      do
      {
        unint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  std::string::value_type v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      std::string::value_type v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    unint64_t v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      unint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

double std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  double result = *(double *)(a2 + 24);
  *((double *)v6 + 7) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20CE8D6C0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20CE8D744(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  unint64_t v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_20CE8D974(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20CE8D97C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  std::string::size_type v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    std::string::size_type v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20CE8DAB0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20CE8DB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)va, 0);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Nnet *std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(kaldi::nnet1::Nnet **)(a1 + 24);
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  std::string::size_type v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    std::string::size_type v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20CE8DD60(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(uint64_t a1, void **a2, void **a3, kaldi::quasar::BPE *this)
{
  uint64_t v6 = (char *)(a1 + 4471);
  if (*(char *)(a1 + 4495) < 0) {
    operator delete(*a2);
  }
  if (*v6 < 0) {
    operator delete(*a3);
  }
  kaldi::quasar::BPE::~BPE(this);
}

uint64_t std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t kaldi::quasar::ToAddTag(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 == 5)
    {
      uint64_t v8 = *(int **)a1;
      if (**(_DWORD **)a1 == 1768383810 && *(unsigned char *)(*(void *)a1 + 4) == 110) {
        return 0;
      }
      int v10 = *v8;
      int v11 = *((unsigned __int8 *)v8 + 4);
      if (v10 == 1768383842 && v11 == 110) {
        return 0;
      }
      uint64_t v7 = *(void *)(a1 + 8);
    }
    if (v7 == 3)
    {
      if (**(_WORD **)a1 == 28229 && *(unsigned char *)(*(void *)a1 + 2) == 100) {
        return 1;
      }
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7 == 3)
      {
        if (**(_WORD **)a1 == 28261 && *(unsigned char *)(*(void *)a1 + 2) == 100) {
          return 1;
        }
        if ((v2 & 0x80) == 0) {
          goto LABEL_53;
        }
      }
    }
    if (v7 != 4) {
      goto LABEL_54;
    }
    if (**(_DWORD **)a1 != 1752461122)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7 != 4) {
        goto LABEL_54;
      }
      if (**(_DWORD **)a1 != 1752461154) {
        goto LABEL_55;
      }
    }
    return 2;
  }
  if (v2 != 3)
  {
    if (v2 != 4)
    {
      if (v2 != 5) {
        goto LABEL_53;
      }
      if ((*(_DWORD *)a1 != 1768383810 || *(unsigned char *)(a1 + 4) != 110)
        && (*(_DWORD *)a1 != 1768383842 || *(unsigned char *)(a1 + 4) != 110))
      {
        goto LABEL_53;
      }
      return 0;
    }
    if (*(_DWORD *)a1 != 1752461122 && *(_DWORD *)a1 != 1752461154)
    {
LABEL_53:
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
LABEL_54:
      if (!v7) {
        return 3;
      }
LABEL_55:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a1, "None")
        && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a1, "none"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "ToAddTag", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.cc", 20);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Unknown AddTag format");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
      return 3;
    }
    return 2;
  }
  if ((*(_WORD *)a1 != 28229 || *(unsigned char *)(a1 + 2) != 100) && (*(_WORD *)a1 != 28261 || *(unsigned char *)(a1 + 2) != 100)) {
    goto LABEL_53;
  }
  return 1;
}

int *kaldi::quasar::FromAddTag@<X0>(int *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  if (v3 < 4) {
    return (int *)MEMORY[0x210558E70](a2, off_264105448[v3]);
  }
  return result;
}

void sub_20CE8E10C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ToTagFormat(void *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v2 != 3)
    {
      if (v2 != 9)
      {
        if (v2 != 12) {
          goto LABEL_66;
        }
        if ((*a1 != 0x6170655368746F62 || *((_DWORD *)a1 + 2) != 1702125938)
          && (*a1 != 0x6170657368746F62 || *((_DWORD *)a1 + 2) != 1702125938))
        {
          goto LABEL_66;
        }
        return 3;
      }
      if ((*a1 != 0x6E4F734168746F62 || *((unsigned char *)a1 + 8) != 101)
        && (*a1 != 0x6E6F736168746F62 || *((unsigned char *)a1 + 8) != 101))
      {
        goto LABEL_66;
      }
      return 2;
    }
    if (*(_WORD *)a1 != 29299 || *((unsigned char *)a1 + 2) != 99)
    {
      if (*(_WORD *)a1 != 24948 || *((unsigned char *)a1 + 2) != 114) {
        goto LABEL_66;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v5 = a1[1];
  if (v5 != 3)
  {
LABEL_25:
    if (v5 == 9)
    {
      if (*(void *)*a1 == 0x6E4F734168746F62 && *(unsigned char *)(*a1 + 8) == 101) {
        return 2;
      }
      uint64_t v5 = a1[1];
      if (v5 == 9)
      {
        if (*(void *)*a1 == 0x6E6F736168746F62 && *(unsigned char *)(*a1 + 8) == 101) {
          return 2;
        }
        if ((v2 & 0x80) == 0)
        {
LABEL_66:
          uint64_t v5 = *((unsigned __int8 *)a1 + 23);
LABEL_67:
          if (!v5) {
            return 4;
          }
LABEL_68:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "None")
            && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "none"))
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "ToTagFormat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.cc", 56);
            unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unknown tag format ", 19);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)a1);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
          }
          return 4;
        }
      }
    }
    if (v5 != 12) {
      goto LABEL_67;
    }
    if (*(void *)*a1 != 0x6170655368746F62 || *(_DWORD *)(*a1 + 8) != 1702125938)
    {
      uint64_t v5 = a1[1];
      if (v5 != 12) {
        goto LABEL_67;
      }
      if (*(void *)*a1 != 0x6170657368746F62 || *(_DWORD *)(*a1 + 8) != 1702125938) {
        goto LABEL_68;
      }
    }
    return 3;
  }
  uint64_t v6 = (unsigned __int16 *)*a1;
  if (*(_WORD *)*a1 == 29299 && *(unsigned char *)(*a1 + 2) == 99) {
    return 0;
  }
  int v8 = *v6;
  int v9 = *((unsigned __int8 *)v6 + 2);
  if (v8 != 24948 || v9 != 114)
  {
    uint64_t v5 = a1[1];
    goto LABEL_25;
  }
  return 1;
}

int *kaldi::quasar::FromTagFormat@<X0>(int *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  if (v3 < 5) {
    return (int *)MEMORY[0x210558E70](a2, off_264105468[v3]);
  }
  return result;
}

void sub_20CE8E474(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelFileMap(kaldi::quasar::Encdec *this)
{
  {
    operator new();
  }
  return kaldi::quasar::Encdec::ModelFileMap(void)::modelFileMap;
}

void sub_20CE8E510(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::Encdec::ComputeEngineFileMap(kaldi::quasar::Encdec *this)
{
  {
    operator new();
  }
  return kaldi::quasar::Encdec::ComputeEngineFileMap(void)::fileMap;
}

void sub_20CE8E5A8(_Unwind_Exception *a1)
{
}

void kaldi::quasar::Encdec::Encdec(uint64_t a1, char *a2, char a3, char a4)
{
  uint64_t v7 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v10, a2);
  int v8 = std::__fs::filesystem::path::remove_filename[abi:ne180100](v7);
  if (SHIBYTE(v8->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, v8->__pn_.__r_.__value_.__l.__data_, v8->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v9 = *(_OWORD *)&v8->__pn_.__r_.__value_.__l.__data_;
    *(void *)(a1 + 16) = *((void *)&v8->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 25) = a4;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a1 + 352;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 400;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v10, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 472, 1, (long long *)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 712) = 953267991;
  *(void *)(a1 + 716) = -1;
  *(void *)(a1 + 724) = -1;
  *(void *)(a1 + 732) = -1;
  *(void *)(a1 + 740) = 0x100000004;
  *(unsigned char *)(a1 + 748) = 0;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 808) = 1024;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 816), "main_");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 840), "CPU");
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 924) = 0u;
  *(_OWORD *)(a1 + 940) = xmmword_20D608490;
  *(_DWORD *)(a1 + 956) = 1;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 960));
}

void sub_20CE8EA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,uint64_t a24,kaldi::nnet1::Nnet *a25,void **a26)
{
  kaldi::quasar::Shortlist::~Shortlist(v31);
  kaldi::CuMatrix<float>::~CuMatrix(v29);
  uint64_t v36 = *(void **)(v26 + 1952);
  if (v36)
  {
    *(void *)(v26 + 1960) = v36;
    operator delete(v36);
  }
  *(void *)(v35 - 112) = v26 + 1864;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(void *)(v35 - 112) = v26 + 1840;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(void *)(v35 - 112) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  if (*(char *)(v26 + 1815) < 0) {
    operator delete(*v28);
  }
  if (*(char *)(v26 + 1791) < 0) {
    operator delete(*v30);
  }
  if (*(char *)(v26 + 1767) < 0) {
    operator delete(*v34);
  }
  if (*(char *)(v26 + 1743) < 0) {
    operator delete(*v33);
  }
  if (*(char *)(v26 + 1719) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v26 + 1695) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v26 + 1671) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v26 + 1647) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v26 + 1623) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v26 + 1599) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v26 + 1575) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(v26 + 1551) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v26 + 1527) < 0) {
    operator delete(*a19);
  }
  *(void *)(v35 - 112) = a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  if (*(char *)(v26 + 1479) < 0) {
    operator delete(*a20);
  }
  *(void *)(v35 - 112) = v26 + 1432;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(void *)(v35 - 112) = v26 + 1408;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(void *)(v35 - 112) = v26 + 1384;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(void *)(v35 - 112) = v26 + 1360;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  kaldi::nnet1::Nnet::~Nnet(a25);
  if (*(char *)(v26 + 935) < 0) {
    operator delete(*(void **)(v26 + 912));
  }
  if (*(char *)(v26 + 911) < 0) {
    operator delete(*(void **)(v26 + 888));
  }
  if (*(char *)(v26 + 887) < 0) {
    operator delete(*a21);
  }
  if (*(char *)(v26 + 863) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(v26 + 839) < 0) {
    operator delete(*a23);
  }
  *(void *)(v35 - 112) = v26 + 784;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  long long v37 = *a26;
  if (*a26)
  {
    *(void *)(v26 + 768) = v37;
    operator delete(v37);
  }
  kaldi::quasar::BPE::~BPE(*(kaldi::quasar::BPE **)(v35 - 128));
  uint64_t v38 = *(void *)(v26 + 464);
  *(void *)(v26 + 464) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = *(void *)(v26 + 456);
  *(void *)(v26 + 456) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v26 + 448);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 48), *(void **)(v26 + 424));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 45), *(void **)(v26 + 400));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 42), *(void **)(v26 + 376));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 39), *(void **)(v26 + 352));
  *(void *)(v35 - 112) = v32 + 36;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)(v32 + 33), *(void **)(v26 + 304));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)(v32 + 30), *(void **)(v26 + 280));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(*(void *)(v35 - 120), *(void **)(v26 + 256));
  unint64_t v41 = *(std::__shared_weak_count **)(v26 + 240);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  float v42 = *(std::__shared_weak_count **)(v26 + 224);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  unint64_t v43 = *(std::__shared_weak_count **)(v26 + 208);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v44 = *(std::__shared_weak_count **)(v26 + 192);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  clockid_t v45 = *(std::__shared_weak_count **)(v26 + 176);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  int v46 = *(std::__shared_weak_count **)(v26 + 160);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (*(char *)(v26 + 151) < 0) {
    operator delete(*(void **)(v26 + 128));
  }
  if (*(char *)(v26 + 127) < 0) {
    operator delete(*(void **)(v26 + 104));
  }
  if (*(char *)(v26 + 103) < 0) {
    operator delete(*(void **)(v26 + 80));
  }
  if (*(char *)(v26 + 79) < 0) {
    operator delete(*(void **)(v26 + 56));
  }
  if (*(char *)(v26 + 55) < 0) {
    operator delete(*v32);
  }
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(a1);
}

void sub_20CE8EE44()
{
}

void sub_20CE8EE4C()
{
}

void sub_20CE8EE54()
{
}

void sub_20CE8EE5C()
{
}

void sub_20CE8EE64()
{
}

void sub_20CE8EE6C()
{
}

void sub_20CE8EE74()
{
}

void sub_20CE8EE7C()
{
}

void sub_20CE8EE84()
{
}

void sub_20CE8EE8C()
{
}

void sub_20CE8EE94()
{
}

void sub_20CE8EE9C()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x20CE8ECACLL);
}

void sub_20CE8EEB4()
{
}

void sub_20CE8EEBC()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x20CE8EE38);
  }
  JUMPOUT(0x20CE8EE3CLL);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::remove_filename[abi:ne180100](std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v2 = std::__fs::filesystem::path::__filename(a1);
  if (v2.__size_)
  {
    std::string::size_type v3 = (std::string::size_type)a1;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v3 = a1->__pn_.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&a1->__pn_, (std::string::size_type)&v2.__data_[-v3], 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

void kaldi::quasar::Encdec::CreateEspressoModel(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, const std::string *a4@<X3>, uint64_t a5@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v26, (char *)a1);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v25.__pn_, a2);
  std::string v10 = std::__fs::filesystem::operator/[abi:ne180100](&v25, (uint64_t)&v26, __p);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, __p[0].__pn_.__r_.__value_.__l.__data_, __p[0].__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string pn = __p[0].__pn_;
  }
  if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  int v11 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)v10);
  __p[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (const void **)&pn.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)__p);
  uint64_t v13 = (std::__shared_weak_count *)v12[8];
  if (v13 && (std::string::size_type v14 = std::__shared_weak_count::lock(v13)) != 0)
  {
    unint64_t v15 = v14;
    uint64_t v16 = v12[7];
    *(void *)a5 = v16;
    *(void *)(a5 + 8) = v14;
    if (v16) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v15 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)a5 = 0;
  }
  if (a3 == 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "CreateEspressoModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"E5 not supported!", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig(__p, &pn);
  std::string::operator=(v24, a4);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,std::allocator<kaldi::quasar::MTESNetworkPlan>,kaldi::quasar::ESNetworkConfig &,void>((kaldi::quasar::ESNetworkConfig *)__p, &v26);
  long long v17 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)a5 = v17;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (v26.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
    }
  }
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)&__p[0].__pn_.__r_.__value_.__l.__data_);
LABEL_19:
  if (!*(unsigned char *)(a1 + 24)) {
    std::string::size_type v14 = (std::__shared_weak_count *)std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::push_back[abi:ne180100]((uint64_t *)(a1 + 320), (long long *)a5);
  }
  if (*(unsigned char *)(a1 + 25))
  {
    unint64_t v18 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)v14);
    __p[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
    unint64_t v19 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (const void **)&pn.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)__p);
    uint64_t v21 = *(void *)a5;
    uint64_t v20 = *(void *)(a5 + 8);
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)v19[8];
    v19[7] = v21;
    v19[8] = v20;
    if (v22) {
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
}

void sub_20CE8F184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 - 121) < 0) {
    operator delete(*(void **)(v14 - 144));
  }
  if (*(char *)(v14 - 97) < 0) {
    operator delete(*(void **)(v14 - 120));
  }
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_20CE8F274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20CE8F398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ReadSymbolTable@<X0>(void *a1@<X0>, int a2@<W1>, const std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  if (!a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
    memset(&__s1, 0, sizeof(__s1));
    uint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v8 = std::locale::use_facet(v31, v7);
      unsigned __int8 v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale(v31);
      uint64_t v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1, v9);
      if ((*((unsigned char *)v10 + *(void *)(*v10 - 24) + 32) & 5) != 0)
      {
        char v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
LABEL_40:
        if (v25 < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__s1);
        fst::SymbolTable::ReadText((uint64_t)v33);
      }
      kaldi::Trim(&__s1);
      std::operator+<char>();
      unint64_t v11 = std::string::append(&v30, ">");
      int64_t v32 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31[0].__locale_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      locale = (std::locale::__imp *)HIBYTE(v32);
      int v14 = SHIBYTE(v32);
      if (v32 < 0) {
        locale = v31[1].__locale_;
      }
      if ((std::locale::__imp *)size != locale) {
        break;
      }
      if (v32 >= 0) {
        unint64_t v15 = (unsigned __int8 *)v31;
      }
      else {
        unint64_t v15 = (unsigned __int8 *)v31[0].__locale_;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        BOOL v24 = memcmp(__s1.__r_.__value_.__l.__data_, v15, __s1.__r_.__value_.__l.__size_) == 0;
        if (v14 < 0) {
          goto LABEL_34;
        }
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        uint64_t v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          int v19 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          int v18 = v19;
          int v21 = *v15++;
          int v20 = v21;
          BOOL v23 = v16-- != 0;
          BOOL v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
        if (SHIBYTE(v32) < 0) {
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v24 = 1;
        if (SHIBYTE(v32) < 0) {
          goto LABEL_34;
        }
      }
LABEL_23:
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      char v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if (v24) {
        goto LABEL_40;
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v26 = &__s1;
      }
      else {
        std::string v26 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
    }
    BOOL v24 = 0;
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_34:
    operator delete(v31[0].__locale_);
    goto LABEL_23;
  }
  uint64_t result = fst::SymbolTable::Read(a1, a3);
  *a4 = result;
  return result;
}

void sub_20CE8F764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 440))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5, "SetMappedFile", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 162, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5);
    }
  }
  else
  {
    uint64_t v3 = *a2;
    uint64_t v2 = a2[1];
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 448);
    *(void *)(a1 + 440) = v3;
    *(void *)(a1 + 448) = v2;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_20CE8F894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v247 = (char)a5;
  uint64_t v271 = *MEMORY[0x263EF8340];
  memset(v268, 0, sizeof(v268));
  v266[1] = 0;
  v266[0] = 0;
  uint64_t v267 = 0;
  v264[1] = 0;
  v264[0] = 0;
  uint64_t v265 = 0;
  uint64_t v262 = 0;
  v261 = 0;
  uint64_t v263 = 0;
  *(_WORD *)(a1 + 1340) = 0;
  uint64_t v8 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  char v250 = 0;
  v236 = (uint64_t **)(a1 + 960);
  uint64_t v238 = a1 + 2024;
  v240 = (long long *)(a1 + 1696);
  v241 = (long long *)(a1 + 1456);
  v242 = (long long *)(a1 + 1504);
  uint64_t v239 = a1 + 472;
  v246 = (uint64_t **)(a1 + 392);
  v243 = (uint64_t **)(a1 + 344);
  v244 = (std::string *)(a1 + 888);
  v245 = (std::string *)(a1 + 864);
  std::string __str = (std::string *)(a1 + 840);
  while ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v268, a4, a5);
    if (SHIBYTE(v268[2]) < 0)
    {
      unint64_t v13 = v268[1];
      switch((unint64_t)v268[1])
      {
        case 0xAuLL:
          if (*(void *)v268[0] == 0x636F567475706E49 && *((_WORD *)v268[0] + 4) == 25185)
          {
LABEL_21:
            kaldi::ReadToken(a2, a3, (uint64_t)v266, v10, v11);
            v252[0] = 0;
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v266);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&v254);
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)v254.__r_.__value_.__r.__words[2];
            }
            kaldi::Input::Input(&v258, &__p, v252);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v254.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            uint64_t v100 = kaldi::Input::Stream((kaldi::Input *)&v258);
            kaldi::quasar::Vocab::Vocab(&v254, v100, v252[0], 1);
            operator new();
          }
          goto LABEL_311;
        case 0xBuLL:
          if (*(void *)v268[0] == 0x6F5674757074754FLL && *(void *)((char *)v268[0] + 3) == 0x6261636F56747570)
          {
LABEL_171:
            kaldi::ReadToken(a2, a3, (uint64_t)v264, v10, v11);
            v252[0] = 0;
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v264);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&v254);
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)v254.__r_.__value_.__r.__words[2];
            }
            kaldi::Input::Input(&v258, &__p, v252);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v254.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            uint64_t v101 = kaldi::Input::Stream((kaldi::Input *)&v258);
            kaldi::quasar::Vocab::Vocab(&v254, v101, v252[0], 1);
            operator new();
          }
          goto LABEL_311;
        case 0xCuLL:
          if (*(void *)v268[0] == 0x4774756F64616552 && *((_DWORD *)v268[0] + 2) == 1752195442)
          {
LABEL_299:
            *(unsigned char *)(a1 + 1340) = 1;
            uint64_t v27 = a1 + 128;
            goto LABEL_305;
          }
          if (v268[1] != (void *)15) {
            goto LABEL_207;
          }
LABEL_202:
          BOOL v56 = *(void *)v268[0] == 0x5374756F64616552 && *(void *)((char *)v268[0] + 7) == 0x7864497472617453;
          uint64_t v22 = a1 + 1908;
          if (v56) {
            goto LABEL_318;
          }
          unint64_t v13 = v268[1];
LABEL_207:
          if (v13 != (void *)18) {
            goto LABEL_216;
          }
LABEL_208:
          BOOL v58 = *(void *)v268[0] == 0x5774756F64616552
             && *((void *)v268[0] + 1) == 0x6D74666F53687469
             && *((_WORD *)v268[0] + 8) == 30817;
          uint64_t v34 = (char *)(a1 + 1912);
          if (v58) {
            goto LABEL_316;
          }
          unint64_t v13 = v268[1];
LABEL_216:
          if (v13 != (void *)15) {
            goto LABEL_222;
          }
          BOOL v59 = *(void *)v268[0] == 0x4974756F64616552 && *(void *)((char *)v268[0] + 7) == 0x7274537475706E49;
          uint64_t v27 = a1 + 1768;
          if (v59) {
            goto LABEL_305;
          }
          unint64_t v13 = v268[1];
LABEL_222:
          if (v13 != (void *)16) {
            goto LABEL_228;
          }
          BOOL v60 = *(void *)v268[0] == 0x4F74756F64616552 && *((void *)v268[0] + 1) == 0x7274537475707475;
          uint64_t v27 = a1 + 1792;
          if (v60) {
            goto LABEL_305;
          }
          unint64_t v13 = v268[1];
LABEL_228:
          if (v13 != (void *)12) {
            goto LABEL_239;
          }
          BOOL v61 = *(void *)v268[0] == 0x477265646F636E45 && *((_DWORD *)v268[0] + 2) == 1752195442;
          uint64_t v27 = a1 + 80;
          if (v61) {
            goto LABEL_305;
          }
LABEL_233:
          unint64_t v13 = v268[1];
          if (v268[1] != (void *)12) {
            goto LABEL_239;
          }
          BOOL v62 = *(void *)v268[0] == 0x477265646F636544 && *((_DWORD *)v268[0] + 2) == 1752195442;
          uint64_t v27 = a1 + 104;
          if (v62) {
            goto LABEL_305;
          }
          if ((HIBYTE(v268[2]) & 0x80) == 0) {
            goto LABEL_311;
          }
LABEL_239:
          if (v13 != (void *)16) {
            goto LABEL_245;
          }
          if (*(void *)v268[0] == 0x4C7265646F636544 && *((void *)v268[0] + 1) == 0x6870617247676E61)
          {
LABEL_385:
            memset(&v254, 0, sizeof(v254));
            memset(&__s, 0, sizeof(__s));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
            kaldi::ReadToken(a2, a3, (uint64_t)&__s, v104, v105);
            std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&v254, (long long *)&__s);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v243, (const void **)&__p.__first_, (uint64_t)&__p);
            goto LABEL_386;
          }
          unint64_t v13 = v268[1];
LABEL_245:
          if (v13 == (void *)17)
          {
            if (*(void *)v268[0] == 0x7265766F646E6148
              && *((void *)v268[0] + 1) == 0x70617247676E614CLL
              && *((unsigned char *)v268[0] + 16) == 104)
            {
LABEL_301:
              memset(&v254, 0, sizeof(v254));
              memset(&__s, 0, sizeof(__s));
              kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
              kaldi::ReadToken(a2, a3, (uint64_t)&__s, v77, v78);
              std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&v254, (long long *)&__s);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 368), (const void **)&__p.__first_, (uint64_t)&__p);
              goto LABEL_386;
            }
            unint64_t v13 = v268[1];
          }
          if (v13 == (void *)14) {
            goto LABEL_264;
          }
          goto LABEL_269;
        case 0xEuLL:
          if (*(void *)v268[0] == 0x6F73736572707345 && *(void *)((char *)v268[0] + 6) == 0x656E69676E456F73)
          {
LABEL_297:
            memset(&v254, 0, sizeof(v254));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v257, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
            }
            else {
              std::string v257 = v254;
            }
            kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v257, (uint64_t *)&__p);
            *(void *)(a1 + 936) = __p.__first_;
            if (*(char *)(a1 + 863) < 0) {
              operator delete(__str->__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&__str->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__begin_;
            *(void *)(a1 + 856) = __p.__end_cap_.__value_;
            HIBYTE(__p.__end_cap_.__value_) = 0;
            LOBYTE(__p.__begin_) = 0;
            if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
            {
              long long v97 = (void *)v257.__r_.__value_.__r.__words[0];
              goto LABEL_407;
            }
            break;
          }
          if (*(void *)v268[0] == 0x6E69646465626D45 && *(void *)((char *)v268[0] + 6) == 0x6870617247676E69)
          {
LABEL_304:
            *(unsigned char *)(a1 + 1341) = 1;
            uint64_t v27 = a1 + 56;
            goto LABEL_305;
          }
LABEL_264:
          if (*(void *)v268[0] == 0x6E614C7475706E49 && *(void *)((char *)v268[0] + 6) == 0x6870617247676E61)
          {
LABEL_300:
            memset(&v254, 0, sizeof(v254));
            memset(&__s, 0, sizeof(__s));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
            kaldi::ReadToken(a2, a3, (uint64_t)&__s, v75, v76);
            std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&v254, (long long *)&__s);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v246, (const void **)&__p.__first_, (uint64_t)&__p);
LABEL_386:
            if (v270 < 0) {
              operator delete(__p.__end_cap_.__value_);
            }
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
          }
          else
          {
            unint64_t v13 = v268[1];
LABEL_269:
            if (v13 != (void *)15) {
              goto LABEL_311;
            }
            long long v37 = (void **)v268[0];
LABEL_307:
            uint64_t v79 = *v37;
            uint64_t v80 = *(uint64_t *)((char *)v37 + 7);
            if (v79 != (void *)0x4C7265646F636E45 || v80 != 0x636E7546676E614CLL) {
              goto LABEL_311;
            }
            memset(&v254, 0, sizeof(v254));
            memset(&__s, 0, sizeof(__s));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
            kaldi::ReadToken(a2, a3, (uint64_t)&__s, v92, v93);
            std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)&__p, (long long *)&v254, (long long *)&__s);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 416), (const void **)&__p.__first_, (uint64_t)&__p);
            std::pair<std::string,std::string>::~pair((uint64_t)&__p);
          }
          if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            break;
          }
          long long v97 = (void *)__s.__r_.__value_.__r.__words[0];
          goto LABEL_407;
        case 0xFuLL:
          goto LABEL_202;
        case 0x12uLL:
          if (*(void *)v268[0] != 0x79537475706E493CLL
            || *((void *)v268[0] + 1) != 0x6C6261546C6F626DLL
            || *((_WORD *)v268[0] + 8) != 15973)
          {
            goto LABEL_208;
          }
LABEL_160:
          std::string::basic_string[abi:ne180100]<0>(&__p, "InputSymbolTable");
          kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)&__p, (uint64_t *)&v254);
          uint64_t v48 = *(void *)(a1 + 456);
          *(void *)(a1 + 456) = v254.__r_.__value_.__r.__words[0];
          if (v48) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          *(_DWORD *)(a1 + 716) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 456) + 104))(*(void *)(a1 + 456), "<s>");
          *(_DWORD *)(a1 + 720) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 456) + 104))(*(void *)(a1 + 456), "</s>");
          *(_DWORD *)(a1 + 724) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 456) + 104))(*(void *)(a1 + 456), "<unk>");
          if (kaldi::g_kaldi_verbose_level < 2) {
            goto LABEL_411;
          }
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 261, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input symbol table size ", 24);
          (*(void (**)(void))(**(void **)(a1 + 456) + 120))(*(void *)(a1 + 456));
          std::ostream::operator<<();
          goto LABEL_384;
        case 0x13uLL:
          if (*(void *)v268[0] != 0x5374757074754F3CLL
            || *((void *)v268[0] + 1) != 0x6261546C6F626D79
            || *(void *)((char *)v268[0] + 11) != 0x3E656C6261546C6FLL)
          {
            goto LABEL_311;
          }
LABEL_181:
          std::string::basic_string[abi:ne180100]<0>(&__p, "OutputSymbolTable");
          kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)&__p, (uint64_t *)&v254);
          uint64_t v52 = *(void *)(a1 + 464);
          *(void *)(a1 + 464) = v254.__r_.__value_.__r.__words[0];
          if (v52) {
            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
          }
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          *(_DWORD *)(a1 + 728) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 464) + 104))(*(void *)(a1 + 464), "<s>");
          *(_DWORD *)(a1 + 732) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 464) + 104))(*(void *)(a1 + 464), "</s>");
          *(_DWORD *)(a1 + 736) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 464) + 104))(*(void *)(a1 + 464), "<unk>");
          if (kaldi::g_kaldi_verbose_level < 2) {
            goto LABEL_411;
          }
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 267, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Output symbol table size ", 25);
          (*(void (**)(void))(**(void **)(a1 + 464) + 120))(*(void *)(a1 + 464));
          std::ostream::operator<<();
          goto LABEL_384;
        case 0x14uLL:
          if (*(void *)v268[0] != 0x6D79537475706E49
            || *((void *)v268[0] + 1) != 0x656C6261546C6F62
            || *((_DWORD *)v268[0] + 4) != 1701603654)
          {
            goto LABEL_311;
          }
LABEL_195:
          kaldi::ReadToken(a2, a3, (uint64_t)v266, v10, v11);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v258.__pn_, (char *)v266);
          std::__fs::filesystem::operator/[abi:ne180100](&v258, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v254, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v254 = __s;
          }
          fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
          uint64_t Text = fst::SymbolTable::ReadText((uint64_t)&v254);
          uint64_t v103 = *(void *)(a1 + 456);
          *(void *)(a1 + 456) = Text;
          if (v103) {
            (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
          }
          if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
            operator delete(__p.__begin_);
          }
          if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v254.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v258.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(exception_object.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(a1 + 716) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 456) + 104))(*(void *)(a1 + 456), "<s>");
          *(_DWORD *)(a1 + 720) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 456) + 104))(*(void *)(a1 + 456), "</s>");
          *(_DWORD *)(a1 + 724) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 456) + 104))(*(void *)(a1 + 456), "<unk>");
          if (kaldi::g_kaldi_verbose_level < 2) {
            goto LABEL_411;
          }
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 248, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input symbol table size ", 24);
          (*(void (**)(void))(**(void **)(a1 + 456) + 120))(*(void *)(a1 + 456));
          std::ostream::operator<<();
          goto LABEL_384;
        case 0x15uLL:
          if (*(void *)v268[0] == 0x795374757074754FLL
            && *((void *)v268[0] + 1) == 0x6C6261546C6F626DLL
            && *(void *)((char *)v268[0] + 13) == 0x656C6946656C6261)
          {
LABEL_295:
            kaldi::ReadToken(a2, a3, (uint64_t)v264, v10, v11);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v258.__pn_, (char *)v264);
            std::__fs::filesystem::operator/[abi:ne180100](&v258, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v254, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v254 = __s;
            }
            fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
            uint64_t v98 = fst::SymbolTable::ReadText((uint64_t)&v254);
            uint64_t v99 = *(void *)(a1 + 464);
            *(void *)(a1 + 464) = v98;
            if (v99) {
              (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
            }
            if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
              operator delete(__p.__begin_);
            }
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v254.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v258.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            *(_DWORD *)(a1 + 728) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 464) + 104))(*(void *)(a1 + 464), "<s>");
            *(_DWORD *)(a1 + 732) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 464) + 104))(*(void *)(a1 + 464), "</s>");
            *(_DWORD *)(a1 + 736) = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 464) + 104))(*(void *)(a1 + 464), "<unk>");
            if (kaldi::g_kaldi_verbose_level >= 2)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 255, 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Output symbol table size ", 25);
              (*(void (**)(void))(**(void **)(a1 + 464) + 120))(*(void *)(a1 + 464));
              std::ostream::operator<<();
LABEL_384:
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            goto LABEL_411;
          }
          if (*(void *)v268[0] == 0x457265646F636E45
            && *((void *)v268[0] + 1) == 0x456F737365727073
            && *(void *)((char *)v268[0] + 13) == 0x656E69676E456F73)
          {
LABEL_302:
            memset(&v254, 0, sizeof(v254));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v256, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
            }
            else {
              std::string v256 = v254;
            }
            kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v256, (uint64_t *)&__p);
            *(void *)(a1 + 944) = __p.__first_;
            if (*(char *)(a1 + 887) < 0) {
              operator delete(v245->__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v245->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__begin_;
            *(void *)(a1 + 880) = __p.__end_cap_.__value_;
            HIBYTE(__p.__end_cap_.__value_) = 0;
            LOBYTE(__p.__begin_) = 0;
            if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
            {
              long long v97 = (void *)v256.__r_.__value_.__r.__words[0];
LABEL_407:
              operator delete(v97);
              break;
            }
          }
          else
          {
            if (*(void *)v268[0] != 0x457265646F636544
              || *((void *)v268[0] + 1) != 0x456F737365727073
              || *(void *)((char *)v268[0] + 13) != 0x656E69676E456F73)
            {
              goto LABEL_311;
            }
LABEL_293:
            memset(&v254, 0, sizeof(v254));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v10, v11);
            if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v255, v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_);
            }
            else {
              std::string v255 = v254;
            }
            kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v255, (uint64_t *)&__p);
            *(void *)(a1 + 952) = __p.__first_;
            if (*(char *)(a1 + 911) < 0) {
              operator delete(v244->__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v244->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__begin_;
            *(void *)(a1 + 904) = __p.__end_cap_.__value_;
            HIBYTE(__p.__end_cap_.__value_) = 0;
            LOBYTE(__p.__begin_) = 0;
            if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
            {
              long long v97 = (void *)v255.__r_.__value_.__r.__words[0];
              goto LABEL_407;
            }
          }
          break;
        default:
          goto LABEL_207;
      }
LABEL_408:
      if ((SHIBYTE(v254.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_411;
      }
      std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)v254.__r_.__value_.__r.__words[0];
      goto LABEL_410;
    }
    switch(HIBYTE(v268[2]))
    {
      case 0xA:
        BOOL v12 = v268[0] == (void *)0x636F567475706E49 && LOWORD(v268[1]) == 25185;
        if (!v12) {
          break;
        }
        goto LABEL_21;
      case 0xB:
        if (v268[0] != (void *)0x6F5674757074754FLL || *(void **)((char *)v268 + 3) != (void *)0x6261636F56747570) {
          break;
        }
        goto LABEL_171;
      case 0xC:
        if (v268[0] != (void *)0x4774756F64616552 || LODWORD(v268[1]) != 1752195442) {
          goto LABEL_68;
        }
        goto LABEL_299;
      case 0xE:
        if (v268[0] == (void *)0x6F73736572707345 && *(void **)((char *)v268 + 6) == (void *)0x656E69676E456F73) {
          goto LABEL_297;
        }
        if (v268[0] != (void *)0x6E69646465626D45 || *(void **)((char *)v268 + 6) != (void *)0x6870617247676E69) {
          goto LABEL_128;
        }
        goto LABEL_304;
      case 0xF:
        BOOL v21 = v268[0] == (void *)0x5374756F64616552 && *(void **)((char *)v268 + 7) == (void *)0x7864497472617453;
        uint64_t v22 = a1 + 1908;
        if (v21) {
          goto LABEL_318;
        }
        if (HIBYTE(v268[2]) == 12) {
          goto LABEL_68;
        }
        if (HIBYTE(v268[2]) == 14) {
          goto LABEL_128;
        }
        if (HIBYTE(v268[2]) != 15) {
          break;
        }
LABEL_101:
        BOOL v35 = v268[0] == (void *)0x4974756F64616552 && *(void **)((char *)v268 + 7) == (void *)0x7274537475706E49;
        uint64_t v27 = a1 + 1768;
        if (v35) {
          goto LABEL_305;
        }
        if (HIBYTE(v268[2]) == 12)
        {
LABEL_68:
          BOOL v26 = v268[0] == (void *)0x477265646F636E45 && LODWORD(v268[1]) == 1752195442;
          uint64_t v27 = a1 + 80;
          if (v26) {
            goto LABEL_305;
          }
          if ((HIBYTE(v268[2]) & 0x80) != 0) {
            goto LABEL_233;
          }
          if (HIBYTE(v268[2]) == 12)
          {
            BOOL v28 = v268[0] == (void *)0x477265646F636544 && LODWORD(v268[1]) == 1752195442;
            uint64_t v27 = a1 + 104;
            if (v28) {
              goto LABEL_305;
            }
          }
        }
        else
        {
LABEL_116:
          if (HIBYTE(v268[2]) != 14)
          {
            if (HIBYTE(v268[2]) != 15) {
              break;
            }
LABEL_306:
            long long v37 = v268;
            goto LABEL_307;
          }
LABEL_128:
          if (v268[0] == (void *)0x6E614C7475706E49 && *(void **)((char *)v268 + 6) == (void *)0x6870617247676E61) {
            goto LABEL_300;
          }
        }
        break;
      case 0x10:
LABEL_107:
        BOOL v36 = v268[0] == (void *)0x4F74756F64616552 && v268[1] == (void *)0x7274537475707475;
        uint64_t v27 = a1 + 1792;
        if (!v36)
        {
          long long v37 = v268;
          switch(HIBYTE(v268[2]))
          {
            case 0xC:
              goto LABEL_68;
            case 0xE:
              goto LABEL_128;
            case 0xF:
              goto LABEL_307;
            case 0x10:
              if (v268[0] != (void *)0x4C7265646F636544 || v268[1] != (void *)0x6870617247676E61) {
                goto LABEL_116;
              }
              goto LABEL_385;
            default:
              goto LABEL_311;
          }
        }
        goto LABEL_305;
      case 0x11:
LABEL_119:
        if (v268[0] == (void *)0x7265766F646E6148
          && v268[1] == (void *)0x70617247676E614CLL
          && LOBYTE(v268[2]) == 104)
        {
          goto LABEL_301;
        }
        if (HIBYTE(v268[2]) == 15) {
          goto LABEL_306;
        }
        if (HIBYTE(v268[2]) == 14) {
          goto LABEL_128;
        }
        break;
      case 0x12:
        if (v268[0] == (void *)0x79537475706E493CLL
          && v268[1] == (void *)0x6C6261546C6F626DLL
          && LOWORD(v268[2]) == 15973)
        {
          goto LABEL_160;
        }
        BOOL v33 = v268[0] == (void *)0x5774756F64616552
           && v268[1] == (void *)0x6D74666F53687469
           && LOWORD(v268[2]) == 30817;
        uint64_t v34 = (char *)(a1 + 1912);
        if (!v33)
        {
          switch(HIBYTE(v268[2]))
          {
            case 0xC:
              goto LABEL_68;
            case 0xE:
              goto LABEL_128;
            case 0xF:
              goto LABEL_101;
            case 0x10:
              goto LABEL_107;
            case 0x11:
              goto LABEL_119;
            default:
              goto LABEL_311;
          }
        }
        goto LABEL_316;
      case 0x13:
        if (v268[0] != (void *)0x5374757074754F3CLL
          || v268[1] != (void *)0x6261546C6F626D79
          || *(void **)((char *)&v268[1] + 3) != (void *)0x3E656C6261546C6FLL)
        {
          break;
        }
        goto LABEL_181;
      case 0x14:
        if (v268[0] != (void *)0x6D79537475706E49
          || v268[1] != (void *)0x656C6261546C6F62
          || LODWORD(v268[2]) != 1701603654)
        {
          break;
        }
        goto LABEL_195;
      case 0x15:
        if (v268[0] == (void *)0x795374757074754FLL
          && v268[1] == (void *)0x6C6261546C6F626DLL
          && *(void **)((char *)&v268[1] + 5) == (void *)0x656C6946656C6261)
        {
          goto LABEL_295;
        }
        if (v268[0] == (void *)0x457265646F636E45
          && v268[1] == (void *)0x456F737365727073
          && *(void **)((char *)&v268[1] + 5) == (void *)0x656E69676E456F73)
        {
          goto LABEL_302;
        }
        if (v268[0] != (void *)0x457265646F636544
          || v268[1] != (void *)0x456F737365727073
          || *(void **)((char *)&v268[1] + 5) != (void *)0x656E69676E456F73)
        {
          break;
        }
        goto LABEL_293;
      default:
        break;
    }
LABEL_311:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "Mmap"))
    {
      LOBYTE(__p.__first_) = 0;
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&__p, v82, v83);
      goto LABEL_411;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "AddSrcBos"))
    {
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 1343), v84, v85);
      char v250 = 1;
      goto LABEL_411;
    }
    BOOL v86 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "AddSrcEos");
    uint64_t v34 = (char *)(a1 + 1344);
    if (v86) {
      goto LABEL_316;
    }
    BOOL v87 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "PadSrc");
    uint64_t v22 = a1 + 752;
    if (v87) {
      goto LABEL_318;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "PadSrcConfigs"))
    {
      memset(&__p, 0, 24);
      memset(&v254, 0, sizeof(v254));
      kaldi::ReadToken(a2, a3, (uint64_t)&__p, v88, v89);
      kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, (uint64_t)&v254);
      std::string::size_type size = v254.__r_.__value_.__l.__size_;
      for (uint64_t i = (const std::string *)v254.__r_.__value_.__r.__words[0]; i != (const std::string *)size; ++i)
      {
        LODWORD(__s.__r_.__value_.__l.__data_) = std::stoi(i, 0, 10);
        std::vector<int>::push_back[abi:ne180100](a1 + 760, &__s);
      }
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
      goto LABEL_327;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ConfigNames"))
    {
      memset(&__p, 0, 24);
      kaldi::ReadToken(a2, a3, (uint64_t)&__p, v94, v95);
      kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, a1 + 784);
      goto LABEL_327;
    }
    BOOL v106 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "MaxSrcTokens");
    uint64_t v22 = a1 + 808;
    if (v106) {
      goto LABEL_318;
    }
    BOOL v107 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "Reverse");
    uint64_t v34 = (char *)(a1 + 1336);
    if (v107) {
      goto LABEL_316;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "IsRNN"))
    {
      v254.__r_.__value_.__s.__data_[0] = 0;
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v254, v108, v109);
      if (v254.__r_.__value_.__s.__data_[0])
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 371);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "UseAttention"))
    {
      v254.__r_.__value_.__s.__data_[0] = 0;
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v254, v110, v111);
      if (v254.__r_.__value_.__s.__data_[0])
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 375);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "UseTopK"))
    {
      v254.__r_.__value_.__s.__data_[0] = 0;
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v254, v112, v113);
      if (v254.__r_.__value_.__s.__data_[0])
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 379);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    else
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ModelBatchSize"))
      {
        kaldi::ReadBasicType<int>(a2, a3, a1 + 744, v114, v115);
        *(unsigned char *)(a1 + 748) = 1;
        goto LABEL_411;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "BPEEncoder"))
      {
        kaldi::ReadToken(a2, a3, (uint64_t)&v261, v116, v117);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v258.__pn_, (char *)&v261);
        std::__fs::filesystem::operator/[abi:ne180100](&v258, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v254, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v254 = __s;
        }
        std::ifstream::basic_ifstream((uint64_t *)&__p);
        if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v254.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v258.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(exception_object.__r_.__value_.__l.__data_);
        }
        if ((kaldi::quasar::BPE::Read(v239, (uint64_t *)&__p, 1) & 1) == 0)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v254, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 387);
          v233 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v254, (uint64_t)"Failed to read BPE model from : ", 32);
          if (v263 >= 0) {
            v234 = &v261;
          }
          else {
            v234 = v261;
          }
          if (v263 >= 0) {
            uint64_t v235 = HIBYTE(v263);
          }
          else {
            uint64_t v235 = v262;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)v234, v235);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v254);
        }
        *(unsigned char *)(a1 + 1337) = 1;
        std::ifstream::~ifstream(&__p);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "<BPE>"))
      {
        if ((kaldi::quasar::BPE::Read(v239, a2, a3) & 1) == 0)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 392);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read embedded BPE model", 33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 394, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"BPE read - entries: ", 20);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        }
        *(unsigned char *)(a1 + 1337) = 1;
      }
      else
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "AddTag"))
        {
          kaldi::ReadToken(a2, a3, a1 + 2688, v118, v119);
LABEL_443:
          *(unsigned char *)(a1 + 2680) = 1;
          goto LABEL_411;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "TagFormat"))
        {
          kaldi::ReadToken(a2, a3, a1 + 2712, v120, v121);
          goto LABEL_443;
        }
        BOOL v122 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "IsEspresso");
        uint64_t v34 = (char *)(a1 + 1345);
        if (v122) {
          goto LABEL_316;
        }
        BOOL v123 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "SourceInputStr");
        uint64_t v27 = a1 + 1528;
        if (v123) {
          goto LABEL_305;
        }
        BOOL v124 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "TargetInputStr");
        uint64_t v27 = a1 + 1552;
        if (v124) {
          goto LABEL_305;
        }
        BOOL v125 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "EncoderValuesStr");
        uint64_t v27 = a1 + 1456;
        if (v125
          || (v126 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "InputNetValuesStr"), uint64_t v27 = a1 + 1744, v126)|| (v127 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ScoresStr"), uint64_t v27 = a1 + 1504, v127)|| (v128 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ShortlistStr"), uint64_t v27 = a1 + 1672, v128))
        {
LABEL_305:
          kaldi::ReadToken(a2, a3, v27, v10, v11);
          goto LABEL_411;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ShortlistFile"))
        {
          memset(&v254, 0, sizeof(v254));
          kaldi::ReadToken(a2, a3, (uint64_t)&v254, v129, v130);
          unsigned __int8 v253 = 0;
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v258.__pn_, (char *)&v254);
          std::__fs::filesystem::operator/[abi:ne180100](&v258, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__p.__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            __p.__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
          }
          kaldi::Input::Input(v252, &__p, &v253);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v258.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(exception_object.__r_.__value_.__l.__data_);
          }
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 421, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading Shortlist file...", 25);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
          std::string v133 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v252);
          kaldi::quasar::Shortlist::Read(v238, v133, v253, 0);
          *(unsigned char *)(a1 + 1338) = 1;
          goto LABEL_473;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "<Shortlist>"))
        {
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 425, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading Shortlist...", 20);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
          kaldi::quasar::Shortlist::Read(v238, a2, a3, a4);
          *(unsigned char *)(a1 + 1338) = 1;
        }
        else
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ReadoutNnetFile"))
          {
            memset(&v254, 0, sizeof(v254));
            kaldi::ReadToken(a2, a3, (uint64_t)&v254, v131, v132);
            unsigned __int8 v253 = 0;
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v258.__pn_, (char *)&v254);
            std::__fs::filesystem::operator/[abi:ne180100](&v258, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
            }
            kaldi::Input::Input(v252, &__p, &v253);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v258.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v258.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(exception_object.__r_.__value_.__l.__data_);
            }
            if (kaldi::g_kaldi_verbose_level >= 2)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 433, 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading readout Nnet file...", 28);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            uint64_t v136 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v252);
            kaldi::nnet1::Nnet::Read(v236, v136, v253, 0);
            *(unsigned char *)(a1 + 1339) = 1;
LABEL_473:
            kaldi::Input::~Input((kaldi::Input *)v252);
            goto LABEL_408;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "<ReadoutNnet>"))
          {
            if (kaldi::g_kaldi_verbose_level >= 2)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 437, 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading readout Nnet...", 23);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            kaldi::nnet1::Nnet::Read(v236, a2, a3, a4);
            *(unsigned char *)(a1 + 1339) = 1;
          }
          else
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "AlignmentLayerStr"))
            {
              BOOL v137 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "AlignmentHeads");
              uint64_t v22 = a1 + 1936;
              if (v137) {
                goto LABEL_318;
              }
              BOOL v138 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ShiftedAlignments");
              uint64_t v34 = (char *)(a1 + 1949);
              if (v138) {
                goto LABEL_316;
              }
              BOOL v139 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "TransposeSourceInput");
              uint64_t v34 = (char *)(a1 + 1346);
              if (v139) {
                goto LABEL_316;
              }
              BOOL v140 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "TwoDimSourceInput");
              uint64_t v34 = (char *)(a1 + 1347);
              if (v140) {
                goto LABEL_316;
              }
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "HandoverStrings"))
              {
                memset(&__p, 0, 24);
                kaldi::ReadToken(a2, a3, (uint64_t)&__p, v141, v142);
                kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, a1 + 1840);
              }
              else
              {
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "StateStrings"))
                {
                  BOOL v145 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "StateWidth");
                  uint64_t v22 = a1 + 2760;
                  if (!v145)
                  {
                    BOOL v146 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "StateLayoutND");
                    uint64_t v34 = (char *)(a1 + 2764);
                    if (!v146)
                    {
                      BOOL v147 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "NeedsPosition");
                      uint64_t v34 = (char *)(a1 + 1348);
                      if (!v147)
                      {
                        BOOL v148 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "NeedsEncoderPositions");
                        uint64_t v34 = (char *)(a1 + 1349);
                        if (!v148)
                        {
                          BOOL v149 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "NeedsEncoderOut");
                          uint64_t v34 = (char *)(a1 + 1350);
                          if (!v149)
                          {
                            BOOL v150 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "PositionZeroBased");
                            uint64_t v34 = (char *)(a1 + 1351);
                            if (!v150)
                            {
                              BOOL v151 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "ApplyLog");
                              uint64_t v34 = (char *)(a1 + 1352);
                              if (!v151)
                              {
                                BOOL v152 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "PositionScaleStr");
                                uint64_t v27 = a1 + 1648;
                                if (v152) {
                                  goto LABEL_305;
                                }
                                BOOL v153 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v268, "NoSymbolTables");
                                uint64_t v34 = (char *)(a1 + 2765);
                                if (!v153)
                                {
                                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 478);
                                  v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                                  if (SHIBYTE(v268[2]) >= 0) {
                                    v155 = v268;
                                  }
                                  else {
                                    v155 = (void **)v268[0];
                                  }
                                  if (SHIBYTE(v268[2]) >= 0) {
                                    uint64_t v156 = HIBYTE(v268[2]);
                                  }
                                  else {
                                    uint64_t v156 = (uint64_t)v268[1];
                                  }
                                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v155, v156);
                                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_316:
                    kaldi::ReadBasicType<BOOL>(a2, a3, v34, v10, v11);
                    goto LABEL_411;
                  }
LABEL_318:
                  kaldi::ReadBasicType<int>(a2, a3, v22, v10, v11);
                  goto LABEL_411;
                }
                memset(&__p, 0, 24);
                kaldi::ReadToken(a2, a3, (uint64_t)&__p, v143, v144);
                kaldi::SplitStringToVector((const std::string *)&__p, ",", 1, a1 + 1864);
              }
LABEL_327:
              if ((SHIBYTE(__p.__end_) & 0x80000000) == 0) {
                goto LABEL_411;
              }
              std::__split_buffer<std::string>::pointer first = __p.__first_;
LABEL_410:
              operator delete(first);
              goto LABEL_411;
            }
            kaldi::ReadToken(a2, a3, (uint64_t)v240, v134, v135);
            *(unsigned char *)(a1 + 1948) = 1;
          }
        }
      }
    }
LABEL_411:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v247) {
    goto LABEL_517;
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_531;
    }
    goto LABEL_532;
  }
  if (*(unsigned char *)(a1 + 103)) {
    goto LABEL_532;
  }
LABEL_531:
  if (!*(void *)(a1 + 408))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      goto LABEL_541;
    }
    goto LABEL_540;
  }
LABEL_532:
  if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 127)) {
      goto LABEL_536;
    }
    goto LABEL_541;
  }
  if (*(void *)(a1 + 112)) {
    goto LABEL_541;
  }
LABEL_536:
  if (!*(void *)(a1 + 360) && kaldi::g_kaldi_verbose_level > -2)
  {
LABEL_540:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 487);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Both EncoderGraph (or at least one InputLangGraph) and DecoderGraph (or at least one DecoderLangGraph) must be specified in model file", 134);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
LABEL_541:
  if (!*(void *)(a1 + 456))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 491);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input symbol table must be specified", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_517;
  }
  if (!*(void *)(a1 + 464))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 496);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Output symbol table must be specified", 37);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_517;
  }
  if ((v250 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 501);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"AddSrcBos must be set in model config file", 42);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
LABEL_517:
    uint64_t v157 = 0;
    goto LABEL_518;
  }
  if (*(unsigned char *)(a1 + 1350) || *(void *)(a1 + 384))
  {
    v159 = (std::vector<std::string> *)(a1 + 1480);
    v160 = *(std::string **)(a1 + 1488);
    if ((unint64_t)v160 >= *(void *)(a1 + 1496))
    {
      v161 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1480), v241);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 1480, v241);
      v161 = v160 + 1;
    }
    *(void *)(a1 + 1488) = v161;
    uint64_t v162 = *(void *)(a1 + 384);
    v249 = (_DWORD *)(a1 + 1888);
    v251 = (void *)(a1 + 384);
    *(_DWORD *)(a1 + 1888) = -1431655765 * (((unint64_t)v161 - *(void *)(a1 + 1480)) >> 3);
    if (!v162) {
      goto LABEL_558;
    }
  }
  else
  {
    v159 = (std::vector<std::string> *)(a1 + 1480);
    v161 = *(std::string **)(a1 + 1488);
    v249 = (_DWORD *)(a1 + 1888);
    v251 = (void *)(a1 + 384);
    *(_DWORD *)(a1 + 1888) = -1431655765 * (((unint64_t)v161 - *(void *)(a1 + 1480)) >> 3);
LABEL_558:
    v163 = *(std::string **)(a1 + 1840);
    v164 = *(long long **)(a1 + 1848);
    if (v163 != (std::string *)v164) {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v159, v161, v163, v164, 0xAAAAAAAAAAAAAAABLL * (((char *)v164 - (char *)v163) >> 3));
    }
  }
  v165 = (void *)(a1 + 1816);
  unint64_t v166 = *(void *)(a1 + 1824);
  if (v166 >= *(void *)(a1 + 1832))
  {
    unint64_t v167 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1816), v242);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 1816, v242);
    unint64_t v167 = v166 + 24;
  }
  *(void *)(a1 + 1824) = v167;
  *(_DWORD *)(a1 + 1940) = 0;
  if (*(unsigned char *)(a1 + 1948))
  {
    if (v167 >= *(void *)(a1 + 1832))
    {
      unint64_t v167 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1816), v240);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 1816, v240);
      v167 += 24;
    }
    *(void *)(a1 + 1824) = v167;
    *(_DWORD *)(a1 + 1932) = 1;
  }
  v168 = *(long long **)(a1 + 1864);
  v169 = *(long long **)(a1 + 1872);
  if (v168 == v169)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 525);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported MT Espresso model: Missing required StateStrings field!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  *(_DWORD *)(a1 + 1892) = -1431655765 * ((v167 - *(void *)(a1 + 1816)) >> 3);
  do
  {
    if (*((char *)v168 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)v168, *((void *)v168 + 1));
    }
    else
    {
      long long v170 = *v168;
      v254.__r_.__value_.__r.__words[2] = *((void *)v168 + 2);
      *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v170;
    }
    if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v171 = HIBYTE(v254.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v171 = v254.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v171 + 5);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v171)
    {
      if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v173 = &v254;
      }
      else {
        v173 = (std::string *)v254.__r_.__value_.__r.__words[0];
      }
      memmove(p_s, v173, v171);
    }
    strcpy((char *)p_s + v171, ".next");
    unint64_t v174 = *(void *)(a1 + 1824);
    unint64_t v175 = *(void *)(a1 + 1832);
    if (v174 >= v175)
    {
      unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - *v165) >> 3);
      unint64_t v178 = v177 + 1;
      if (v177 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v175 - *v165) >> 3);
      if (2 * v179 > v178) {
        unint64_t v178 = 2 * v179;
      }
      if (v179 >= 0x555555555555555) {
        unint64_t v180 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v180 = v178;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 1832);
      if (v180) {
        v181 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 1832, v180);
      }
      else {
        v181 = 0;
      }
      v182 = v181 + v177;
      __p.__first_ = v181;
      __p.__begin_ = v182;
      __p.__end_cap_.__value_ = &v181[v180];
      long long v183 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v182->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
      memset(&__s, 0, sizeof(__s));
      __p.__end_ = v182 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 1816), &__p);
      uint64_t v184 = *(void *)(a1 + 1824);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      int v185 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 1824) = v184;
      if (v185 < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v176 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(void *)(v174 + 16) = *((void *)&__s.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v174 = v176;
      *(void *)(a1 + 1824) = v174 + 24;
    }
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v254.__r_.__value_.__l.__data_);
    }
    v168 = (long long *)((char *)v168 + 24);
  }
  while (v168 != v169);
  if (*(char *)(a1 + 887) < 0)
  {
    if (!*(void *)(a1 + 872))
    {
LABEL_604:
      if (*(_DWORD *)(a1 + 944) == 2)
      {
        std::string::operator=(v245, __str);
        *(void *)(a1 + 944) = *(void *)(a1 + 936);
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 887))
  {
    goto LABEL_604;
  }
  if (*(char *)(a1 + 911) < 0)
  {
    if (!*(void *)(a1 + 896))
    {
LABEL_610:
      if (*(_DWORD *)(a1 + 952) == 2)
      {
        std::string::operator=(v244, __str);
        *(void *)(a1 + 952) = *(void *)(a1 + 936);
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 911))
  {
    goto LABEL_610;
  }
  if (*(unsigned char *)(a1 + 1339) && *(unsigned char *)(a1 + 1340))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 544);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Either Readout Espreso Graph or Readout Nnet is supported", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (!*(unsigned char *)(a1 + 1345))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 601);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"TensorFlow not supported", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_630;
    }
  }
  else if (!*(unsigned char *)(a1 + 103))
  {
    goto LABEL_630;
  }
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 550, 2);
    v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading ENCODER ", 16);
    char v187 = *(unsigned char *)(a1 + 103);
    if (v187 >= 0) {
      uint64_t v188 = a1 + 80;
    }
    else {
      uint64_t v188 = *(void *)(a1 + 80);
    }
    if (v187 >= 0) {
      uint64_t v189 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      uint64_t v189 = *(void *)(a1 + 88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, v188, v189);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 80), *(void *)(a1 + 944), v245, (uint64_t)&__p);
  long long v190 = *(_OWORD *)&__p.__first_;
  __p.__begin_ = 0;
  __p.__first_ = 0;
  v191 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v190;
  if (v191)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v191);
    if (__p.__begin_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
    }
  }
LABEL_630:
  if (*(unsigned char *)(a1 + 1341))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 555, 2);
      v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading EMBEDDING ", 18);
      char v193 = *(unsigned char *)(a1 + 79);
      if (v193 >= 0) {
        uint64_t v194 = a1 + 56;
      }
      else {
        uint64_t v194 = *(void *)(a1 + 56);
      }
      if (v193 >= 0) {
        uint64_t v195 = *(unsigned __int8 *)(a1 + 79);
      }
      else {
        uint64_t v195 = *(void *)(a1 + 64);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, v194, v195);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 56), *(void *)(a1 + 952), v244, (uint64_t)&__p);
    long long v196 = *(_OWORD *)&__p.__first_;
    __p.__begin_ = 0;
    __p.__first_ = 0;
    v197 = *(std::__shared_weak_count **)(a1 + 176);
    *(_OWORD *)(a1 + 168) = v196;
    if (v197)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v197);
      if (__p.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1340))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 561, 2);
      v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading READOUT ", 16);
      char v199 = *(unsigned char *)(a1 + 151);
      if (v199 >= 0) {
        uint64_t v200 = a1 + 128;
      }
      else {
        uint64_t v200 = *(void *)(a1 + 128);
      }
      if (v199 >= 0) {
        uint64_t v201 = *(unsigned __int8 *)(a1 + 151);
      }
      else {
        uint64_t v201 = *(void *)(a1 + 136);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, v200, v201);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 128), *(void *)(a1 + 952), v244, (uint64_t)&__p);
    long long v202 = *(_OWORD *)&__p.__first_;
    __p.__begin_ = 0;
    __p.__first_ = 0;
    v203 = *(std::__shared_weak_count **)(a1 + 208);
    *(_OWORD *)(a1 + 200) = v202;
    if (v203)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v203);
      if (__p.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
      }
    }
  }
  if (*(void *)(a1 + 360))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      v204 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      if (v204) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v204);
      }
      v205 = *(std::__shared_weak_count **)(a1 + 224);
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      if (v205) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v205);
      }
      v206 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      if (v206) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v206);
      }
    }
    else
    {
      if (*(void *)(a1 + 408))
      {
        v213 = *v246;
        if (*((char *)*v246 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)v213[4], v213[5]);
        }
        else
        {
          *(_OWORD *)&__p.__first_ = *((_OWORD *)v213 + 2);
          __p.__end_ = (std::__split_buffer<std::string>::pointer)v213[6];
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
      }
      v214 = *(void **)(a1 + 344);
      if (v214 != (void *)(a1 + 352))
      {
        do
        {
          kaldi::quasar::Encdec::LoadSubmodels(a1, (uint64_t)&__p, (uint64_t)(v214 + 4));
          v215 = (void *)v214[1];
          if (v215)
          {
            do
            {
              v216 = v215;
              v215 = (void *)*v215;
            }
            while (v215);
          }
          else
          {
            do
            {
              v216 = (void *)v214[2];
              BOOL v12 = *v216 == (void)v214;
              v214 = v216;
            }
            while (!v12);
          }
          v214 = v216;
        }
        while (v216 != (void *)(a1 + 352));
      }
      uint64_t v217 = *(void *)(a1 + 248);
      v218 = *(std::__shared_weak_count **)(v217 + 64);
      if (v218 && (v218 = std::__shared_weak_count::lock(v218)) != 0) {
        uint64_t v219 = *(void *)(v217 + 56);
      }
      else {
        uint64_t v219 = 0;
      }
      v220 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = v219;
      *(void *)(a1 + 192) = v218;
      if (v220) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v220);
      }
      if (*(void *)(a1 + 288))
      {
        uint64_t v221 = *(void *)(a1 + 272);
        v222 = *(std::__shared_weak_count **)(v221 + 64);
        if (v222 && (v222 = std::__shared_weak_count::lock(v222)) != 0) {
          uint64_t v223 = *(void *)(v221 + 56);
        }
        else {
          uint64_t v223 = 0;
        }
        v224 = *(std::__shared_weak_count **)(a1 + 224);
        *(void *)(a1 + 216) = v223;
        *(void *)(a1 + 224) = v222;
        if (v224) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v224);
        }
      }
      if (*(void *)(a1 + 408))
      {
        v225 = *v243;
        if (*((char *)*v243 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v254, (const std::string::value_type *)v225[4], v225[5]);
        }
        else {
          std::string v254 = *(std::string *)(v225 + 4);
        }
        v226 = *(void **)(a1 + 392);
        if (v226 != (void *)(a1 + 400))
        {
          do
          {
            kaldi::quasar::Encdec::LoadSubmodels(a1, (uint64_t)(v226 + 4), (uint64_t)&v254);
            v227 = (void *)v226[1];
            if (v227)
            {
              do
              {
                v228 = v227;
                v227 = (void *)*v227;
              }
              while (v227);
            }
            else
            {
              do
              {
                v228 = (void *)v226[2];
                BOOL v12 = *v228 == (void)v226;
                v226 = v228;
              }
              while (!v12);
            }
            v226 = v228;
          }
          while (v228 != (void *)(a1 + 400));
        }
        uint64_t v229 = *(void *)(a1 + 296);
        v230 = *(std::__shared_weak_count **)(v229 + 64);
        if (v230 && (v230 = std::__shared_weak_count::lock(v230)) != 0) {
          uint64_t v231 = *(void *)(v229 + 56);
        }
        else {
          uint64_t v231 = 0;
        }
        v232 = *(std::__shared_weak_count **)(a1 + 240);
        *(void *)(a1 + 232) = v231;
        *(void *)(a1 + 240) = v230;
        if (v232) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v232);
        }
        if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v254.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
    }
    if (*v251) {
      _DWORD *v249 = 0;
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 566, 2);
      v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Loading DECODER ", 16);
      char v208 = *(unsigned char *)(a1 + 127);
      if (v208 >= 0) {
        uint64_t v209 = a1 + 104;
      }
      else {
        uint64_t v209 = *(void *)(a1 + 104);
      }
      if (v208 >= 0) {
        uint64_t v210 = *(unsigned __int8 *)(a1 + 127);
      }
      else {
        uint64_t v210 = *(void *)(a1 + 112);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, v209, v210);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 104), *(void *)(a1 + 952), v244, (uint64_t)&__p);
    long long v211 = *(_OWORD *)&__p.__first_;
    __p.__begin_ = 0;
    __p.__first_ = 0;
    v212 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v211;
    if (v212)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v212);
      if (__p.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__begin_);
      }
    }
  }
  uint64_t v157 = 1;
LABEL_518:
  if (SHIBYTE(v263) < 0) {
    operator delete(v261);
  }
  if (SHIBYTE(v265) < 0) {
    operator delete(v264[0]);
  }
  if (SHIBYTE(v267) < 0) {
    operator delete(v266[0]);
  }
  if (SHIBYTE(v268[2]) < 0) {
    operator delete(v268[0]);
  }
  return v157;
}

void sub_20CE931AC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE931BC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE931F0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE93204(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE93228(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20CE935A4);
}

void sub_20CE9323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    JUMPOUT(0x20CE9353CLL);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE93268(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE93270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE9327C()
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  JUMPOUT(0x20CE93508);
}

void sub_20CE932BC()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  JUMPOUT(0x20CE93508);
}

void sub_20CE932E4()
{
}

void sub_20CE93308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  JUMPOUT(0x20CE933A0);
}

void sub_20CE93390()
{
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    JUMPOUT(0x20CE9353CLL);
  }
  JUMPOUT(0x20CE93564);
}

void sub_20CE933B4()
{
}

void sub_20CE933DC()
{
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  JUMPOUT(0x20CE93428);
}

void sub_20CE933F4()
{
}

void sub_20CE933FC()
{
  MEMORY[0x2105595E0](v0, 0xA1C40BD48D6D6);
  JUMPOUT(0x20CE93554);
}

void sub_20CE93424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    JUMPOUT(0x20CE9353CLL);
  }
  JUMPOUT(0x20CE93564);
}

void sub_20CE93468()
{
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  JUMPOUT(0x20CE93554);
}

void sub_20CE93498()
{
}

void sub_20CE934AC()
{
}

void sub_20CE934CC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE934E0()
{
  if (SLOBYTE(STACK[0x37F]) < 0) {
    JUMPOUT(0x20CE934F0);
  }
  JUMPOUT(0x20CE93508);
}

void sub_20CE934F8()
{
}

void sub_20CE93504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

void sub_20CE9351C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x368] = (unint64_t)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x368]);
  JUMPOUT(0x20CE93530);
}

void sub_20CE93544(_Unwind_Exception *exception_object)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(exception_object);
}

void sub_20CE93550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::quasar::Vocab::~Vocab((kaldi::quasar::Vocab *)&a67);
  kaldi::Input::~Input((kaldi::Input *)&STACK[0x338]);
  JUMPOUT(0x20CE93564);
}

void kaldi::quasar::Encdec::ParseEnginePlatform(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  kaldi::SplitStringToVector((const std::string *)a1, ":", 1, (uint64_t)&v38);
  uint64_t v4 = v38;
  switch(0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3))
  {
    case 0uLL:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid empty platform spec.", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    case 1uLL:
      *a2 = 0x100000000;
      unint64_t v5 = (std::string *)(a2 + 1);
      if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
        goto LABEL_49;
      }
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
      goto LABEL_50;
    case 2uLL:
      if (*(char *)(v38 + 23) < 0)
      {
        uint64_t v8 = *(void *)(v38 + 8);
        if (v8 != 2 || **(_WORD **)v38 != 13637)
        {
          if (v8 != 10) {
            goto LABEL_60;
          }
          unint64_t v6 = *(_WORD **)v38;
          goto LABEL_16;
        }
      }
      else
      {
        if (*(unsigned char *)(v38 + 23) != 2)
        {
          unint64_t v6 = (_WORD *)v38;
          if (*(unsigned char *)(v38 + 23) != 10) {
            goto LABEL_60;
          }
LABEL_16:
          uint64_t v9 = *(void *)v6;
          int v10 = (unsigned __int16)v6[4];
          if (v9 != 0x6F73736572707345 || v10 != 12630)
          {
LABEL_60:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 198);
            char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
            int v26 = *(char *)(v38 + 23);
            if (v26 >= 0) {
              uint64_t v27 = v38;
            }
            else {
              uint64_t v27 = *(void *)v38;
            }
            if (v26 >= 0) {
              uint64_t v28 = *(unsigned __int8 *)(v38 + 23);
            }
            else {
              uint64_t v28 = *(void *)(v38 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
          }
          *a2 = 0x100000000;
          unint64_t v5 = (std::string *)(a2 + 1);
          if (*(char *)(v4 + 47) < 0) {
            goto LABEL_22;
          }
          goto LABEL_35;
        }
        if (*(_WORD *)v38 != 13637) {
          goto LABEL_60;
        }
      }
      *a2 = 0x100000001;
      unint64_t v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 47) < 0)
      {
LABEL_22:
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 24), *(void *)(v4 + 32));
        goto LABEL_50;
      }
LABEL_35:
      v4 += 24;
      goto LABEL_49;
    case 3uLL:
      if ((*(char *)(v38 + 23) & 0x80000000) == 0)
      {
        if (*(unsigned char *)(v38 + 23) != 2)
        {
          uint64_t v7 = v38;
          if (*(unsigned char *)(v38 + 23) != 10) {
            goto LABEL_67;
          }
          goto LABEL_27;
        }
        if (*(_WORD *)v38 != 13637) {
          goto LABEL_67;
        }
LABEL_37:
        uint64_t v16 = 1;
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v38 + 8);
      if (v12 == 2 && **(_WORD **)v38 == 13637) {
        goto LABEL_37;
      }
      if (v12 != 10) {
        goto LABEL_67;
      }
      uint64_t v7 = *(void *)v38;
LABEL_27:
      uint64_t v13 = *(void *)v7;
      int v14 = *(unsigned __int16 *)(v7 + 8);
      if (v13 != 0x6F73736572707345 || v14 != 12630)
      {
LABEL_67:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 209);
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
        int v30 = *(char *)(v38 + 23);
        if (v30 >= 0) {
          uint64_t v31 = v38;
        }
        else {
          uint64_t v31 = *(void *)v38;
        }
        if (v30 >= 0) {
          uint64_t v32 = *(unsigned __int8 *)(v38 + 23);
        }
        else {
          uint64_t v32 = *(void *)(v38 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      uint64_t v16 = 0;
LABEL_38:
      long long v17 = (void *)(v38 + 24);
      int v18 = *(char *)(v38 + 47);
      if (v18 < 0)
      {
        if (*(void *)(v38 + 32) != 4) {
          goto LABEL_53;
        }
        long long v17 = (void *)*v17;
      }
      else if (v18 != 4)
      {
LABEL_53:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 216);
        BOOL v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported precision: ", 23);
        int v22 = *(char *)(v38 + 47);
        if (v22 >= 0) {
          uint64_t v23 = v38 + 24;
        }
        else {
          uint64_t v23 = *(void *)(v38 + 24);
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v38 + 47);
        }
        else {
          uint64_t v24 = *(void *)(v38 + 32);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      if (*(_DWORD *)v17 == 909201478)
      {
        uint64_t v19 = 0;
      }
      else
      {
        if (*(_DWORD *)v17 != 842223686) {
          goto LABEL_53;
        }
        uint64_t v19 = 0x100000000;
      }
      *a2 = v19 | v16;
      unint64_t v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 48), *(void *)(v4 + 56));
      }
      else
      {
        v4 += 48;
LABEL_49:
        long long v20 = *(_OWORD *)v4;
        v5->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v20;
      }
LABEL_50:
      v37[0] = (void **)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
      return;
    default:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 222);
      BOOL v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid platform spec: ", 23);
      int v34 = *(char *)(a1 + 23);
      if (v34 >= 0) {
        uint64_t v35 = a1;
      }
      else {
        uint64_t v35 = *(void *)a1;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v36 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
}

void sub_20CE93ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTable::ReadText(uint64_t a1)
{
  v14[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v12);
  if (!*(_DWORD *)&v13[*(void *)(v12[0] - 24) + 16]) {
    fst::SymbolTable::ReadText((uint64_t)v12);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::ReadText: Can't open file ", 39);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  v12[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](v13);
  std::istream::~istream();
  MEMORY[0x210559500](v14);
  return 0;
}

void sub_20CE93CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
}

void kaldi::quasar::Vocab::~Vocab(kaldi::quasar::Vocab *this)
{
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 80);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      uint64_t v8 = *(_DWORD **)a1;
      uint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *(_DWORD *)int v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t kaldi::quasar::Encdec::LoadSubmodels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 360))
  {
    uint64_t v6 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 344, (const void **)a3);
    if (a1 + 352 == v6) {
      return 0;
    }
    uint64_t v7 = v6;
    *(void *)&v80[0] = a3;
    uint64_t v8 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)v80);
    uint64_t v9 = (std::__shared_weak_count *)v8[8];
    if (v9 && (uint64_t v9 = std::__shared_weak_count::lock(v9)) != 0) {
      uint64_t v10 = v8[7];
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 192);
    *(void *)(a1 + 184) = v10;
    *(void *)(a1 + 192) = v9;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      uint64_t v10 = *(void *)(a1 + 184);
    }
    if (v10)
    {
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 618, 2);
        unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Using loaded decoder net for: ", 30);
        int v13 = *(char *)(a3 + 23);
        if (v13 >= 0) {
          int v14 = (const void *)a3;
        }
        else {
          int v14 = *(const void **)a3;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a3 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
      }
      if (a1 + 376 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 368, (const void **)a3))
      {
        *(void *)&v80[0] = a3;
        int v16 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)v80);
        long long v17 = (std::__shared_weak_count *)v16[8];
        if (v17 && (long long v17 = std::__shared_weak_count::lock(v17)) != 0) {
          uint64_t v18 = v16[7];
        }
        else {
          uint64_t v18 = 0;
        }
        long long v20 = *(std::__shared_weak_count **)(a1 + 224);
        *(void *)(a1 + 216) = v18;
        *(void *)(a1 + 224) = v17;
        if (v20)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          uint64_t v18 = *(void *)(a1 + 216);
        }
        if (!v18)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v80, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 623);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v80, "Handover plan required but not loaded!");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v80);
        }
      }
    }
    if (a1 + 400 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 392, (const void **)a2))
    {
      *(void *)&v80[0] = a2;
      BOOL v21 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v80);
      int v22 = (std::__shared_weak_count *)v21[8];
      if (v22 && (int v22 = std::__shared_weak_count::lock(v22)) != 0) {
        uint64_t v23 = v21[7];
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = v23;
      *(void *)(a1 + 240) = v22;
      if (v24)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        uint64_t v23 = *(void *)(a1 + 232);
      }
      if (v23 && kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 632, 2);
        char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Using loaded input net for: ", 28);
        int v26 = *(char *)(a2 + 23);
        if (v26 >= 0) {
          uint64_t v27 = (const void *)a2;
        }
        else {
          uint64_t v27 = *(const void **)a2;
        }
        if (v26 >= 0) {
          uint64_t v28 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v28 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
      }
    }
    if (*(void *)(a1 + 408)) {
      BOOL v29 = *(void *)(a1 + 232) == 0;
    }
    else {
      BOOL v29 = 0;
    }
    uint64_t v30 = *(void *)(a1 + 184);
    if (v29 || !v30)
    {
      if (!v30)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 645, 2);
          uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Loading DECODER for '", 21);
          int v49 = *(char *)(a3 + 23);
          if (v49 >= 0) {
            int v50 = (const void *)a3;
          }
          else {
            int v50 = *(const void **)a3;
          }
          if (v49 >= 0) {
            uint64_t v51 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v51 = *(void *)(a3 + 8);
          }
          uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
          BOOL v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
          int v54 = *(char *)(v7 + 79);
          if (v54 >= 0) {
            uint64_t v55 = v7 + 56;
          }
          else {
            uint64_t v55 = *(void *)(v7 + 56);
          }
          if (v54 >= 0) {
            uint64_t v56 = *(unsigned __int8 *)(v7 + 79);
          }
          else {
            uint64_t v56 = *(void *)(v7 + 64);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
        }
        kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(v7 + 56), *(void *)(a1 + 952), (const std::string *)(a1 + 888), (uint64_t)v80);
        long long v57 = v80[0];
        v80[0] = 0uLL;
        BOOL v58 = *(std::__shared_weak_count **)(a1 + 192);
        *(_OWORD *)(a1 + 184) = v57;
        if (v58)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          if (*((void *)&v80[0] + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80[0] + 1));
          }
        }
        *(void *)&v80[0] = a3;
        BOOL v59 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)v80);
        uint64_t v61 = *(void *)(a1 + 184);
        uint64_t v60 = *(void *)(a1 + 192);
        if (v60) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 16), 1uLL, memory_order_relaxed);
        }
        BOOL v62 = (std::__shared_weak_count *)v59[8];
        v59[7] = v61;
        v59[8] = v60;
        if (v62) {
          std::__shared_weak_count::__release_weak(v62);
        }
        uint64_t v63 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 368, (const void **)a3);
        if (a1 + 376 != v63)
        {
          uint64_t v64 = v63;
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 651, 2);
            uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Loading HANDOVER for '", 22);
            int v66 = *(char *)(a3 + 23);
            if (v66 >= 0) {
              unsigned int v67 = (const void *)a3;
            }
            else {
              unsigned int v67 = *(const void **)a3;
            }
            if (v66 >= 0) {
              uint64_t v68 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              uint64_t v68 = *(void *)(a3 + 8);
            }
            uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v67, v68);
            uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": ", 2);
            int v71 = *(char *)(v64 + 79);
            if (v71 >= 0) {
              uint64_t v72 = v64 + 56;
            }
            else {
              uint64_t v72 = *(void *)(v64 + 56);
            }
            if (v71 >= 0) {
              uint64_t v73 = *(unsigned __int8 *)(v64 + 79);
            }
            else {
              uint64_t v73 = *(void *)(v64 + 64);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
          }
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(v64 + 56), *(void *)(a1 + 952), (const std::string *)(a1 + 888), (uint64_t)v80);
          long long v74 = v80[0];
          v80[0] = 0uLL;
          uint64_t v75 = *(std::__shared_weak_count **)(a1 + 224);
          *(_OWORD *)(a1 + 216) = v74;
          if (v75)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v75);
            if (*((void *)&v80[0] + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80[0] + 1));
            }
          }
          *(void *)&v80[0] = a3;
          int v76 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (long long **)v80);
          uint64_t v78 = *(void *)(a1 + 216);
          uint64_t v77 = *(void *)(a1 + 224);
          if (v77) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 16), 1uLL, memory_order_relaxed);
          }
          uint64_t v79 = (std::__shared_weak_count *)v76[8];
          v76[7] = v78;
          v76[8] = v77;
          if (v79) {
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
      if (v29)
      {
        uint64_t v31 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 392, (const void **)a2);
        if (a1 + 400 != v31)
        {
          uint64_t v32 = v31;
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 660, 2);
            BOOL v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Loading INPUT NET for '", 23);
            int v34 = *(char *)(a2 + 23);
            if (v34 >= 0) {
              uint64_t v35 = (const void *)a2;
            }
            else {
              uint64_t v35 = *(const void **)a2;
            }
            if (v34 >= 0) {
              uint64_t v36 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v36 = *(void *)(a2 + 8);
            }
            long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
            uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"': ", 3);
            int v39 = *(char *)(v32 + 79);
            if (v39 >= 0) {
              uint64_t v40 = v32 + 56;
            }
            else {
              uint64_t v40 = *(void *)(v32 + 56);
            }
            if (v39 >= 0) {
              uint64_t v41 = *(unsigned __int8 *)(v32 + 79);
            }
            else {
              uint64_t v41 = *(void *)(v32 + 64);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v80);
          }
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(v32 + 56), *(void *)(a1 + 952), (const std::string *)(a1 + 888), (uint64_t)v80);
          long long v42 = v80[0];
          v80[0] = 0uLL;
          unint64_t v43 = *(std::__shared_weak_count **)(a1 + 240);
          *(_OWORD *)(a1 + 232) = v42;
          if (v43)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            if (*((void *)&v80[0] + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80[0] + 1));
            }
          }
          *(void *)&v80[0] = a2;
          uint64_t v44 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v80);
          uint64_t v46 = *(void *)(a1 + 232);
          uint64_t v45 = *(void *)(a1 + 240);
          if (v45) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 16), 1uLL, memory_order_relaxed);
          }
          uint64_t v47 = (std::__shared_weak_count *)v44[8];
          v44[7] = v46;
          v44[8] = v45;
          if (v47) {
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
    }
  }
  return 1;
}

void sub_20CE9452C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::Encdec::ResetHistoryState(kaldi::quasar::Encdec *this)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 170);
  uint64_t v2 = *((void *)this + 174);
  uint64_t v3 = *((void *)this + 173);
  while (v2 != v3)
  {
    v2 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1400, v2);
  }
  *((void *)this + 174) = v3;
  uint64_t v4 = *((void *)this + 177);
  uint64_t v5 = *((void *)this + 176);
  while (v4 != v5)
  {
    v4 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1424, v4);
  }
  *((void *)this + 177) = v5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 179);
  uint64_t v6 = (void **)*((void *)this + 343);
  uint64_t v7 = (void **)*((void *)this + 342);
  if (v6 != v7)
  {
    do
    {
      v6 -= 3;
      uint64_t v8 = v6;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    while (v6 != v7);
    uint64_t v6 = (void **)*((void *)this + 342);
  }
  *((void *)this + 343) = v7;
  while (v7 != v6)
  {
    v7 -= 3;
    uint64_t v8 = v7;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  *((void *)this + 343) = v6;
}

void kaldi::quasar::Encdec::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (double *)(a1 + 2560);
  uint64_t v7 = a1 + 2640;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v15, v6, v7, (long long *)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(void *)(a1 + 2736);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 2744) - v10) >> 3) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", (const char *)0x39C, "sequence_idx < history_.size()", v9);
  }
  uint64_t v11 = (uint64_t **)(v10 + 24 * a3);
  if (v11 != (uint64_t **)a2)
  {
    unint64_t v12 = *(uint64_t **)(v10 + 24 * a3 + 8);
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(a2, *v11, v12, ((char *)v12 - (char *)*v11) >> 4);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v15, v8);
}

void sub_20CE94740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::SetHistoryState(uint64_t a1, uint64_t **a2, int a3, int a4)
{
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2736), a4);
  uint64_t v7 = *(void *)(a1 + 2736) + 24 * a3;
  if ((uint64_t **)v7 != a2)
  {
    clockid_t v8 = *a2;
    uint64_t v9 = a2[1];
    unint64_t v10 = ((char *)v9 - (char *)*a2) >> 4;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(v7, v8, v9, v10);
  }
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      clockid_t v8 = v3;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void kaldi::quasar::Encdec::Start(uint64_t a1, int a2, const std::string *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 740) = a2;
  uint64_t v5 = *(void *)(a1 + 160);
  v22[0] = *(void ***)(a1 + 152);
  v22[1] = (void **)v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 176);
  void v22[2] = *(void ***)(a1 + 168);
  v22[3] = (void **)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  void v22[4] = *(void ***)(a1 + 184);
  v22[5] = (void **)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 208);
  v22[6] = *(void ***)(a1 + 200);
  v22[7] = (void **)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 224);
  v22[8] = *(void ***)(a1 + 216);
  v22[9] = (void **)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  v22[10] = *(void ***)(a1 + 232);
  v22[11] = (void **)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v20[0] = 0;
  v20[1] = &v18;
  char v21 = 0;
  uint64_t v18 = (const void **)operator new(0x60uLL);
  uint64_t v19 = v18;
  v20[0] = v18 + 12;
  uint64_t v19 = (const void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>((uint64_t)v20, v22, &v23, v18);
  for (uint64_t i = 11; i != -1; i -= 2)
  {
    int v13 = (std::__shared_weak_count *)v22[i];
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  char v14 = v18;
  for (uint64_t j = v19; v14 != j; v14 += 2)
  {
    if (*v14)
    {
      if (v16)
      {
        long long v17 = (std::__shared_weak_count *)v14[1];
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::operator=((std::string *)(v16 + 328), a3);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
    }
  }
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 2560), v11);
  v22[0] = (void **)&v18;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](v22);
}

void sub_20CE94AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::StartFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  *((void *)&v524 + 1) = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 152;
  uint64_t v7 = 232;
  if (*(void *)(a1 + 152))
  {
    uint64_t v7 = 152;
    uint64_t v8 = (kaldi::quasar::ComputeEngineItf **)(a1 + 152);
  }
  else
  {
    uint64_t v8 = (kaldi::quasar::ComputeEngineItf **)(a1 + 232);
  }
  uint64_t v503 = v7;
  if (*(void *)(a1 + 168)) {
    uint64_t v9 = 168;
  }
  else {
    uint64_t v9 = v7;
  }
  v497 = v8;
  if (*(void *)(a1 + 168)) {
    uint64_t v10 = (kaldi::quasar::ComputeEngineItf **)(a1 + 168);
  }
  else {
    uint64_t v10 = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  clockid_t v11 = (double *)(v6 + 2408);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v519, (double *)(v6 + 2408), v6 + 2456, &__p);
  if (SHIBYTE(v506) < 0) {
    operator delete((void *)__p);
  }
  if (a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 961);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Model does not support n-best inputs", 36);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  memset(&v518, 0, sizeof(v518));
  v496 = v10;
  uint64_t v499 = v9;
  if (*(unsigned char *)(a1 + 1343))
  {
    int v13 = *(_DWORD *)(a1 + 716);
    char v14 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v518.__end_cap_, 1uLL);
    std::vector<int>::pointer begin = v518.__begin_;
    std::vector<int>::pointer end = v518.__end_;
    uint64_t v18 = &v14[v17];
    *char v14 = v13 - 1;
    uint64_t v19 = v14 + 1;
    while (end != begin)
    {
      int v20 = *--end;
      *--char v14 = v20;
    }
    v518.__begin_ = v14;
    v518.__end_ = v19;
    v518.__end_cap_.__value_ = v18;
    if (begin) {
      operator delete(begin);
    }
    v518.__end_ = v19;
    int v21 = *(unsigned __int8 *)(a1 + 1343);
  }
  else
  {
    uint64_t v19 = 0;
    int v21 = 0;
  }
  int v22 = *(_DWORD *)(a2 + 20);
  int v23 = *(unsigned __int8 *)(a1 + 1344);
  int v24 = *(_DWORD *)(a1 + 808) - (v23 + v21);
  if (v24 >= v22) {
    int v24 = *(_DWORD *)(a2 + 20);
  }
  if (v24 >= 1)
  {
    uint64_t v501 = v6;
    char v25 = (double *)(v6 + 2408);
    int v26 = 0;
    do
    {
      if (v22 <= v26 || !*(_DWORD *)(a2 + 16)) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v12);
      }
      int v27 = (int)*(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v26);
      if (v19 >= v518.__end_cap_.__value_)
      {
        std::vector<int>::pointer v28 = v518.__begin_;
        uint64_t v29 = v19 - v518.__begin_;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v31 = (char *)v518.__end_cap_.__value_ - (char *)v518.__begin_;
        if (((char *)v518.__end_cap_.__value_ - (char *)v518.__begin_) >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          BOOL v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v518.__end_cap_, v32);
          std::vector<int>::pointer v28 = v518.__begin_;
          uint64_t v19 = v518.__end_;
        }
        else
        {
          BOOL v33 = 0;
        }
        int v34 = (int *)&v33[4 * v29];
        *int v34 = v27;
        uint64_t v35 = v34 + 1;
        while (v19 != v28)
        {
          int v36 = *--v19;
          *--int v34 = v36;
        }
        v518.__begin_ = v34;
        v518.__end_ = v35;
        v518.__end_cap_.__value_ = (int *)&v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
        uint64_t v19 = v35;
      }
      else
      {
        *v19++ = v27;
      }
      v518.__end_ = v19;
      ++v26;
      int v22 = *(_DWORD *)(a2 + 20);
      int v23 = *(unsigned __int8 *)(a1 + 1344);
      int v37 = *(_DWORD *)(a1 + 808) - (v23 + *(unsigned __int8 *)(a1 + 1343));
      if (v37 >= v22) {
        int v37 = *(_DWORD *)(a2 + 20);
      }
    }
    while (v26 < v37);
    clockid_t v11 = v25;
    uint64_t v6 = v501;
  }
  if (v23)
  {
    int v38 = *(_DWORD *)(a1 + 720) - 1;
    if (v19 >= v518.__end_cap_.__value_)
    {
      std::vector<int>::pointer v40 = v518.__begin_;
      uint64_t v41 = v19 - v518.__begin_;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v43 = (char *)v518.__end_cap_.__value_ - (char *)v518.__begin_;
      if (((char *)v518.__end_cap_.__value_ - (char *)v518.__begin_) >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v518.__end_cap_, v44);
        std::vector<int>::pointer v40 = v518.__begin_;
        uint64_t v19 = v518.__end_;
      }
      else
      {
        uint64_t v45 = 0;
      }
      uint64_t v46 = (int *)&v45[4 * v41];
      uint64_t v47 = (int *)&v45[4 * v44];
      int *v46 = v38;
      int v39 = v46 + 1;
      while (v19 != v40)
      {
        int v48 = *--v19;
        *--uint64_t v46 = v48;
      }
      v518.__begin_ = v46;
      v518.__end_ = v39;
      v518.__end_cap_.__value_ = v47;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *uint64_t v19 = v38;
      int v39 = v19 + 1;
    }
    v518.__end_ = v39;
    uint64_t v19 = v39;
  }
  v515 = 0;
  v516 = 0;
  uint64_t v517 = 0;
  uint64_t v49 = (char *)v19 - (char *)v518.__begin_;
  unint64_t v502 = (unint64_t)((char *)v19 - (char *)v518.__begin_) >> 2;
  int v50 = *(_DWORD *)(a1 + 752);
  uint64_t v51 = *(int **)(a1 + 760);
  uint64_t v52 = *(int **)(a1 + 768);
  if (v51 == v52)
  {
    unsigned int v53 = 0;
LABEL_72:
    if (v50) {
      goto LABEL_75;
    }
  }
  else
  {
    unsigned int v53 = 0;
    while (*v51 < (int)v502)
    {
      ++v53;
      if (++v51 == v52) {
        goto LABEL_72;
      }
    }
    int v50 = *v51;
    if (*v51)
    {
LABEL_75:
      LODWORD(__p) = 0;
      std::vector<float>::resize((uint64_t)&v515, (int)(v49 >> 2), &__p);
      if (v50 >= 1)
      {
        if (v50 >= (int)v502) {
          int v54 = v502;
        }
        else {
          int v54 = v50;
        }
        LODWORD(v502) = v54;
        std::vector<float>::resize((uint64_t)&v515, v50, &kaldi::quasar::kSmallLogProb);
        LODWORD(__p) = 0;
        std::vector<int>::resize(&v518, v50, (std::vector<int>::const_reference)&__p);
      }
    }
  }
  v512 = 0;
  v513 = 0;
  v514 = 0;
  if (*(unsigned char *)(a1 + 1346))
  {
    uint64_t v55 = *(void *)(a1 + v499);
    std::vector<int>::pointer v57 = v518.__begin_;
    std::vector<int>::pointer v56 = v518.__end_;
    BOOL v58 = (char *)operator new(0x10uLL);
    v523.__end_ = (std::vector<int>::pointer)(v58 + 16);
    v523.__end_cap_.__value_ = (int *)(v58 + 16);
    *(void *)BOOL v58 = (int)(v56 - v57);
    *((void *)v58 + 1) = 1;
    v523.__begin_ = (std::vector<int>::pointer)v58;
    (*(void (**)(void ***__return_ptr, uint64_t, std::vector<int> *))(*(void *)v55 + 48))(&p_p, v55, &v523);
    if (*(char *)(a1 + 1551) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1528), *(void *)(a1 + 1536));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1528);
    }
    BOOL v59 = p_p;
    p_p = 0;
    *(void *)&long long v522 = v59;
    uint64_t v60 = v513;
    if (v513 >= v514)
    {
      uint64_t v64 = ((char *)v513 - (unsigned char *)v512) >> 5;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v66 = (char *)v514 - (unsigned char *)v512;
      if (((char *)v514 - (unsigned char *)v512) >> 4 > v65) {
        unint64_t v65 = v66 >> 4;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v67 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      v508 = &v514;
      uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v67);
      uint64_t v69 = &v68[32 * v64];
      *(void *)&long long __p = v68;
      *((void *)&__p + 1) = v69;
      v507 = &v68[32 * v70];
      long long v71 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *((void *)v69 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v69 = v71;
      memset(&v521, 0, sizeof(v521));
      uint64_t v72 = v522;
      *(void *)&long long v522 = 0;
      *((void *)v69 + 3) = v72;
      v506 = v69 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &__p);
      uint64_t v63 = v513;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      int64x2_t v61 = *(int64x2_t *)&v521.__r_.__value_.__l.__data_;
      v513[1].i64[0] = v521.__r_.__value_.__r.__words[2];
      *uint64_t v60 = v61;
      memset(&v521, 0, sizeof(v521));
      uint64_t v62 = v522;
      *(void *)&long long v522 = 0;
      v60[1].i64[1] = v62;
      uint64_t v63 = v60 + 2;
    }
    v513 = v63;
    uint64_t v73 = v522;
    *(void *)&long long v522 = 0;
    if (v73) {
      (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    long long v74 = p_p;
    p_p = 0;
    if (v74) {
      (*((void (**)(void **))*v74 + 1))(v74);
    }
    if (v523.__begin_)
    {
      v523.__end_ = v523.__begin_;
      operator delete(v523.__begin_);
    }
    (*(void (**)(uint64_t))(*(void *)v513[-1].i64[1] + 80))(v513[-1].i64[1]);
  }
  else
  {
    (*(void (**)(std::vector<int> *__return_ptr))(**(void **)(a1 + v499) + 16))(&v523);
    if (*(char *)(a1 + 1551) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1528), *(void *)(a1 + 1536));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1528);
    }
    std::vector<int>::pointer v75 = v523.__begin_;
    v523.__begin_ = 0;
    *(void *)&long long v522 = v75;
    int v76 = v513;
    if (v513 >= v514)
    {
      uint64_t v80 = ((char *)v513 - (unsigned char *)v512) >> 5;
      unint64_t v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v82 = (char *)v514 - (unsigned char *)v512;
      if (((char *)v514 - (unsigned char *)v512) >> 4 > v81) {
        unint64_t v81 = v82 >> 4;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v83 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      v508 = &v514;
      uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v83);
      uint64_t v85 = &v84[32 * v80];
      *(void *)&long long __p = v84;
      *((void *)&__p + 1) = v85;
      v507 = &v84[32 * v86];
      long long v87 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *((void *)v85 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v85 = v87;
      memset(&v521, 0, sizeof(v521));
      uint64_t v88 = v522;
      *(void *)&long long v522 = 0;
      *((void *)v85 + 3) = v88;
      v506 = v85 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &__p);
      uint64_t v79 = v513;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      int64x2_t v77 = *(int64x2_t *)&v521.__r_.__value_.__l.__data_;
      v513[1].i64[0] = v521.__r_.__value_.__r.__words[2];
      *int v76 = v77;
      memset(&v521, 0, sizeof(v521));
      uint64_t v78 = v522;
      *(void *)&long long v522 = 0;
      v76[1].i64[1] = v78;
      uint64_t v79 = v76 + 2;
    }
    v513 = v79;
    uint64_t v89 = v522;
    *(void *)&long long v522 = 0;
    if (v89) {
      (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    std::vector<int>::pointer v90 = v523.__begin_;
    v523.__begin_ = 0;
    if (v90) {
      (*(void (**)(std::vector<int>::pointer))(*(void *)v90 + 8))(v90);
    }
  }
  if (*(unsigned char *)(a1 + 1349))
  {
    std::vector<int>::vector(&v523, v518.__end_ - v518.__begin_);
    std::vector<int>::pointer v91 = v523.__begin_;
    std::vector<int>::pointer v92 = v523.__end_;
    if (v523.__begin_ != v523.__end_)
    {
      int v93 = 0;
      do
        *v91++ = v93++;
      while (v91 != v92);
    }
    (*(void (**)(void ***__return_ptr))(*(void *)*v496 + 16))(&p_p);
    if (*(char *)(a1 + 1599) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1576), *(void *)(a1 + 1584));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1576);
    }
    uint64_t v94 = p_p;
    p_p = 0;
    *(void *)&long long v522 = v94;
    long long v95 = v513;
    if (v513 >= v514)
    {
      uint64_t v99 = ((char *)v513 - (unsigned char *)v512) >> 5;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v101 = (char *)v514 - (unsigned char *)v512;
      if (((char *)v514 - (unsigned char *)v512) >> 4 > v100) {
        unint64_t v100 = v101 >> 4;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v102 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      v508 = &v514;
      uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v102);
      uint64_t v104 = &v103[32 * v99];
      *(void *)&long long __p = v103;
      *((void *)&__p + 1) = v104;
      v507 = &v103[32 * v105];
      long long v106 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *((void *)v104 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v104 = v106;
      memset(&v521, 0, sizeof(v521));
      uint64_t v107 = v522;
      *(void *)&long long v522 = 0;
      *((void *)v104 + 3) = v107;
      v506 = v104 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &__p);
      uint64_t v98 = v513;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      int64x2_t v96 = *(int64x2_t *)&v521.__r_.__value_.__l.__data_;
      v513[1].i64[0] = v521.__r_.__value_.__r.__words[2];
      *long long v95 = v96;
      memset(&v521, 0, sizeof(v521));
      uint64_t v97 = v522;
      *(void *)&long long v522 = 0;
      v95[1].i64[1] = v97;
      uint64_t v98 = v95 + 2;
    }
    v513 = v98;
    uint64_t v108 = v522;
    *(void *)&long long v522 = 0;
    if (v108) {
      (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    uint64_t v109 = p_p;
    p_p = 0;
    if (v109) {
      (*((void (**)(void **))*v109 + 1))(v109);
    }
    if (v523.__begin_)
    {
      v523.__end_ = v523.__begin_;
      operator delete(v523.__begin_);
    }
  }
  if (*(unsigned char *)(a1 + 1341))
  {
    memset(&v523, 0, sizeof(v523));
    uint64_t v110 = *(void *)(a1 + 168);
    std::string v111 = (_OWORD *)(a1 + 1720);
    if (*(char *)(a1 + 1743) < 0)
    {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
    }
    else
    {
      *(_OWORD *)&v521.__r_.__value_.__l.__data_ = *v111;
      v521.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1736);
    }
    long long __p = 0uLL;
    v506 = 0;
    p_p = (void **)&__p;
    LOBYTE(v510) = 0;
    *(void *)&long long __p = operator new(0x18uLL);
    *((void *)&__p + 1) = __p;
    v506 = (void *)(__p + 24);
    *((void *)&__p + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v506, (long long *)&v521, &v522, (std::string *)__p);
    p_p = 0;
    unint64_t v510 = 0;
    unint64_t v511 = 0;
    (*(void (**)(uint64_t, void **, long long *, void ***, std::vector<int> *))(*(void *)v110 + 112))(v110, &v512, &__p, &p_p, &v523);
    p_p_p = &p_p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
    p_p = (void **)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    uint64_t v112 = (int64x2_t *)v512;
    uint64_t v113 = (uint64_t)v513;
    if (v513 != v512)
    {
      do
      {
        v113 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v514, v113);
      }
      while ((int64x2_t *)v113 != v112);
    }
    v513 = v112;
    if (*(_DWORD *)(a1 + 948))
    {
      if (*(_DWORD *)(a1 + 944) == *(_DWORD *)(a1 + 952))
      {
        std::vector<int>::pointer v114 = v523.__begin_;
        if (*(char *)(a1 + 1743) < 0)
        {
          std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
        }
        else
        {
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = *v111;
          v521.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1736);
        }
        uint64_t v121 = *(void *)v114;
        *(void *)std::vector<int>::pointer v114 = 0;
        *(void *)&long long v522 = v121;
        BOOL v122 = v513;
        if (v513 >= v514)
        {
          uint64_t v126 = ((char *)v513 - (unsigned char *)v512) >> 5;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v128 = (char *)v514 - (unsigned char *)v512;
          if (((char *)v514 - (unsigned char *)v512) >> 4 > v127) {
            unint64_t v127 = v128 >> 4;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v129 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v129 = v127;
          }
          v508 = &v514;
          long long v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v129);
          uint64_t v131 = &v130[32 * v126];
          *(void *)&long long __p = v130;
          *((void *)&__p + 1) = v131;
          v507 = &v130[32 * v132];
          long long v133 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
          *((void *)v131 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v131 = v133;
          memset(&v521, 0, sizeof(v521));
          uint64_t v134 = v522;
          *(void *)&long long v522 = 0;
          *((void *)v131 + 3) = v134;
          v506 = v131 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &__p);
          BOOL v125 = v513;
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          int64x2_t v123 = *(int64x2_t *)&v521.__r_.__value_.__l.__data_;
          v513[1].i64[0] = v521.__r_.__value_.__r.__words[2];
          int64x2_t *v122 = v123;
          memset(&v521, 0, sizeof(v521));
          uint64_t v124 = v522;
          *(void *)&long long v522 = 0;
          v122[1].i64[1] = v124;
          BOOL v125 = v122 + 2;
        }
        v513 = v125;
        uint64_t v135 = v522;
        *(void *)&long long v522 = 0;
        if (v135) {
          (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
        }
        if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v521.__r_.__value_.__l.__data_);
        }
LABEL_198:
        *(void *)&long long __p = &v523;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_199;
      }
      kaldi::quasar::ComputeEngineItf::CreateCopyFloat(*v497, *(const kaldi::quasar::ComputeEngineBufferItf **)v523.__begin_, &p_p);
      if (*(char *)(a1 + 1743) < 0)
      {
        std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
      }
      else
      {
        *(_OWORD *)&v521.__r_.__value_.__l.__data_ = *v111;
        v521.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1736);
      }
      uint64_t v136 = p_p;
      p_p = 0;
      *(void *)&long long v522 = v136;
      uint64_t v116 = v513;
      if (v513 < v514) {
        goto LABEL_184;
      }
      uint64_t v117 = ((char *)v513 - (unsigned char *)v512) >> 5;
      unint64_t v140 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v141 = (char *)v514 - (unsigned char *)v512;
      if (((char *)v514 - (unsigned char *)v512) >> 4 > v140) {
        unint64_t v140 = v141 >> 4;
      }
      if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v120 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v120 = v140;
      }
    }
    else
    {
      (*(void (**)(void ***__return_ptr))(*(void *)*v497 + 72))(&p_p);
      if (*(char *)(a1 + 1743) < 0)
      {
        std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
      }
      else
      {
        *(_OWORD *)&v521.__r_.__value_.__l.__data_ = *v111;
        v521.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1736);
      }
      float v115 = p_p;
      p_p = 0;
      *(void *)&long long v522 = v115;
      uint64_t v116 = v513;
      if (v513 < v514)
      {
LABEL_184:
        int64x2_t v137 = *(int64x2_t *)&v521.__r_.__value_.__l.__data_;
        v116[1].i64[0] = v521.__r_.__value_.__r.__words[2];
        *uint64_t v116 = v137;
        memset(&v521, 0, sizeof(v521));
        uint64_t v138 = v522;
        *(void *)&long long v522 = 0;
        v116[1].i64[1] = v138;
        BOOL v139 = v116 + 2;
LABEL_192:
        v513 = v139;
        uint64_t v147 = v522;
        *(void *)&long long v522 = 0;
        if (v147) {
          (*(void (**)(uint64_t))(*(void *)v147 + 8))(v147);
        }
        if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v521.__r_.__value_.__l.__data_);
        }
        BOOL v148 = p_p;
        p_p = 0;
        if (v148) {
          (*((void (**)(void **))*v148 + 1))(v148);
        }
        goto LABEL_198;
      }
      uint64_t v117 = ((char *)v513 - (unsigned char *)v512) >> 5;
      unint64_t v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v119 = (char *)v514 - (unsigned char *)v512;
      if (((char *)v514 - (unsigned char *)v512) >> 4 > v118) {
        unint64_t v118 = v119 >> 4;
      }
      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v120 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v120 = v118;
      }
    }
    v508 = &v514;
    uint64_t v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v120);
    uint64_t v143 = &v142[32 * v117];
    *(void *)&long long __p = v142;
    *((void *)&__p + 1) = v143;
    v507 = &v142[32 * v144];
    long long v145 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
    *((void *)v143 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v143 = v145;
    memset(&v521, 0, sizeof(v521));
    uint64_t v146 = v522;
    *(void *)&long long v522 = 0;
    *((void *)v143 + 3) = v146;
    v506 = v143 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &__p);
    BOOL v139 = v513;
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    goto LABEL_192;
  }
LABEL_199:
  if (v50)
  {
    uint64_t v149 = *(void *)(a1 + v503);
    BOOL v151 = v515;
    BOOL v150 = v516;
    BOOL v152 = (char *)operator new(0x10uLL);
    v523.__end_ = (std::vector<int>::pointer)(v152 + 16);
    v523.__end_cap_.__value_ = (int *)(v152 + 16);
    *(void *)BOOL v152 = (int)((v150 - v151) >> 2);
    *((void *)v152 + 1) = 1;
    v523.__begin_ = (std::vector<int>::pointer)v152;
    (*(void (**)(void ***__return_ptr, uint64_t, std::vector<int> *))(*(void *)v149 + 56))(&p_p, v149, &v523);
    if (*(char *)(a1 + 1623) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1600), *(void *)(a1 + 1608));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1600);
    }
    BOOL v153 = p_p;
    p_p = 0;
    *(void *)&long long v522 = v153;
    v154 = v513;
    if (v513 >= v514)
    {
      uint64_t v158 = ((char *)v513 - (unsigned char *)v512) >> 5;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v160 = (char *)v514 - (unsigned char *)v512;
      if (((char *)v514 - (unsigned char *)v512) >> 4 > v159) {
        unint64_t v159 = v160 >> 4;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v161 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      v508 = &v514;
      uint64_t v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v161);
      v163 = &v162[32 * v158];
      *(void *)&long long __p = v162;
      *((void *)&__p + 1) = v163;
      v507 = &v162[32 * v164];
      long long v165 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *((void *)v163 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)v163 = v165;
      memset(&v521, 0, sizeof(v521));
      uint64_t v166 = v522;
      *(void *)&long long v522 = 0;
      *((void *)v163 + 3) = v166;
      v506 = v163 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &__p);
      uint64_t v157 = v513;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      int64x2_t v155 = *(int64x2_t *)&v521.__r_.__value_.__l.__data_;
      v513[1].i64[0] = v521.__r_.__value_.__r.__words[2];
      int64x2_t *v154 = v155;
      memset(&v521, 0, sizeof(v521));
      uint64_t v156 = v522;
      *(void *)&long long v522 = 0;
      v154[1].i64[1] = v156;
      uint64_t v157 = v154 + 2;
    }
    v513 = v157;
    uint64_t v167 = v522;
    *(void *)&long long v522 = 0;
    if (v167) {
      (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    v168 = p_p;
    p_p = 0;
    if (v168) {
      (*((void (**)(void **))*v168 + 1))(v168);
    }
    if (v523.__begin_)
    {
      v523.__end_ = v523.__begin_;
      operator delete(v523.__begin_);
    }
    (*(void (**)(uint64_t))(*(void *)v513[-1].i64[1] + 88))(v513[-1].i64[1]);
    if (!*(_DWORD *)(a1 + 948))
    {
      (*(void (**)(long long *__return_ptr))(*(void *)*v497 + 72))(&__p);
      uint64_t v169 = __p;
      *(void *)&long long __p = 0;
      uint64_t v170 = v513[-1].i64[1];
      v513[-1].i64[1] = v169;
      if (v170) {
        (*(void (**)(uint64_t))(*(void *)v170 + 8))(v170);
      }
      uint64_t v171 = __p;
      *(void *)&long long __p = 0;
      if (v171) {
        (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
      }
    }
  }
  if (*(void *)(a1 + 312))
  {
    std::string::basic_string[abi:ne180100]<0>(&v521, &byte_20D5A22AE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v11, a1 + 2624, (long long *)&v521);
    v172 = v11;
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    uint64_t v173 = *(void *)(a1 + 232);
    unint64_t v174 = (_OWORD *)(a1 + 1744);
    if (*(char *)(a1 + 1767) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v523, *(const std::string::value_type **)(a1 + 1744), *(void *)(a1 + 1752));
    }
    else
    {
      *(_OWORD *)&v523.__begin_ = *v174;
      v523.__end_cap_.__value_ = *(int **)(a1 + 1760);
    }
    memset(&v521, 0, sizeof(v521));
    p_p = (void **)&v521;
    LOBYTE(v510) = 0;
    v521.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
    v521.__r_.__value_.__r.__words[2] = v521.__r_.__value_.__r.__words[0] + 24;
    v521.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v521.__r_.__value_.__r.__words[2], (long long *)&v523, &v524, (std::string *)v521.__r_.__value_.__l.__data_);
    p_p = 0;
    unint64_t v510 = 0;
    unint64_t v511 = 0;
    (*(void (**)(uint64_t, void **, std::string *, void ***, uint64_t))(*(void *)v173 + 112))(v173, &v512, &v521, &p_p, a1 + 1360);
    p_p_p = &p_p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
    p_p = (void **)&v521;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    if (SHIBYTE(v523.__end_cap_.__value_) < 0) {
      operator delete(v523.__begin_);
    }
    if (*(void *)v6)
    {
      long long v176 = (int64x2_t *)v512;
      uint64_t v177 = (uint64_t)v513;
      if (v513 != v512)
      {
        do
        {
          v177 -= 32;
          std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v514, v177);
        }
        while ((int64x2_t *)v177 != v176);
      }
      v513 = v176;
      unint64_t v178 = *(uint64_t **)(a1 + 1360);
      if (*(char *)(a1 + 1767) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v523, *(const std::string::value_type **)(a1 + 1744), *(void *)(a1 + 1752));
      }
      else
      {
        *(_OWORD *)&v523.__begin_ = *v174;
        v523.__end_cap_.__value_ = *(int **)(a1 + 1760);
      }
      uint64_t v179 = *v178;
      *unint64_t v178 = 0;
      *(void *)&long long v524 = v179;
      unint64_t v180 = v513;
      if (v513 >= v514)
      {
        uint64_t v184 = ((char *)v513 - (unsigned char *)v512) >> 5;
        unint64_t v185 = v184 + 1;
        if ((unint64_t)(v184 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v186 = (char *)v514 - (unsigned char *)v512;
        if (((char *)v514 - (unsigned char *)v512) >> 4 > v185) {
          unint64_t v185 = v186 >> 4;
        }
        if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v187 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v187 = v185;
        }
        *((void *)&v522 + 1) = &v514;
        uint64_t v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v514, v187);
        std::string::size_type v189 = (std::string::size_type)&v188[32 * v184];
        v521.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
        v521.__r_.__value_.__l.__size_ = v189;
        *(void *)&long long v522 = &v188[32 * v190];
        long long v191 = *(_OWORD *)&v523.__begin_;
        *(void *)(v189 + 16) = v523.__end_cap_.__value_;
        *(_OWORD *)std::string::size_type v189 = v191;
        memset(&v523, 0, sizeof(v523));
        uint64_t v192 = v524;
        *(void *)&long long v524 = 0;
        *(void *)(v189 + 24) = v192;
        v521.__r_.__value_.__r.__words[2] = v189 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v512, &v521);
        long long v183 = v513;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v521.__r_.__value_.__l.__data_);
      }
      else
      {
        int64x2_t v181 = *(int64x2_t *)&v523.__begin_;
        v513[1].i64[0] = (uint64_t)v523.__end_cap_.__value_;
        *unint64_t v180 = v181;
        memset(&v523, 0, sizeof(v523));
        uint64_t v182 = v524;
        *(void *)&long long v524 = 0;
        v180[1].i64[1] = v182;
        long long v183 = v180 + 2;
      }
      v513 = v183;
      uint64_t v193 = v524;
      *(void *)&long long v524 = 0;
      if (v193) {
        (*(void (**)(uint64_t))(*(void *)v193 + 8))(v193);
      }
      if (SHIBYTE(v523.__end_cap_.__value_) < 0) {
        operator delete(v523.__begin_);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v175);
    clockid_t v11 = v172;
  }
  if (*(void *)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v521, &byte_20D5A22AE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v11, a1 + 2616, (long long *)&v521);
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    uint64_t v194 = *(void *)(a1 + 784);
    uint64_t v195 = *(void *)(a1 + v503);
    if (v194 == *(void *)(a1 + 792))
    {
      memset(&v521, 0, sizeof(v521));
      (*(void (**)(uint64_t, void **, uint64_t, std::string *, uint64_t))(*(void *)v195 + 112))(v195, &v512, a1 + 1480, &v521, a1 + 1360);
      v523.__begin_ = (std::vector<int>::pointer)&v521;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v523);
    }
    else
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), (const void **)(v194 + 24 * v53), (uint64_t)&v521);
      memset(&v523, 0, sizeof(v523));
      (*(void (**)(uint64_t, std::string *, void **, uint64_t, std::vector<int> *, uint64_t))(*(void *)v195 + 136))(v195, &v521, &v512, a1 + 1480, &v523, a1 + 1360);
      p_p = (void **)&v523;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v521.__r_.__value_.__l.__data_);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v196);
  }
  int v498 = v50;
  if (*(void *)(a1 + 288))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v521, v11, a1 + 2632, &__p);
    if (SHIBYTE(v506) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v197 = 0;
    p_p = 0;
    unint64_t v510 = 0;
    unint64_t v511 = 0;
    if (*(_DWORD *)(a1 + 948)
      || ((*(void (**)(long long *__return_ptr))(**(void **)(a1 + v503) + 80))(&__p),
          uint64_t v197 = __p,
          v198 = (kaldi::quasar::ComputeEngineBufferItf *)__p,
          *(_DWORD *)(a1 + 948)))
    {
      v198 = **(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 1360);
    }
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1070, 3);
      char v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encoder Out: ", 13);
      kaldi::quasar::ComputeEngineBufferItf::GetShapeString(v198, &v523);
      if (SHIBYTE(v523.__end_cap_.__value_) >= 0) {
        uint64_t v200 = &v523;
      }
      else {
        uint64_t v200 = v523.__begin_;
      }
      if (SHIBYTE(v523.__end_cap_.__value_) >= 0) {
        uint64_t value_high = HIBYTE(v523.__end_cap_.__value_);
      }
      else {
        uint64_t value_high = (uint64_t)v523.__end_;
      }
      long long v202 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)v200, value_high);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)" [ ", 3);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)v198 + 112))(v198, 0);
      v203 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v198 + 112))(v198, 1);
      v204 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v198 + 112))(v198, 2);
      v205 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)" ...", 4);
      if (SHIBYTE(v523.__end_cap_.__value_) < 0) {
        operator delete(v523.__begin_);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if ((*(unsigned int (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v198 + 144))(v198) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1076);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v198 + 144))(v198);
      v495 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v495, (uint64_t)" for encoder output", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    int v206 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)v198 + 152))(v198, 0);
    int v207 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v198 + 152))(v198, 1);
    int v208 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v198 + 152))(v198, 2);
    uint64_t v209 = *(void *)(a1 + 216);
    uint64_t v210 = operator new(0x18uLL);
    *((void *)&__p + 1) = v210 + 3;
    v506 = v210 + 3;
    *uint64_t v210 = v206;
    v210[1] = (int)v502;
    v210[2] = v208;
    *(void *)&long long __p = v210;
    (*(void (**)(void ****__return_ptr, uint64_t, long long *))(*(void *)v209 + 56))(&p_p_p, v209, &__p);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v206 >= 1)
    {
      uint64_t v211 = 0;
      uint64_t v212 = 0;
      int v213 = v502 * v208;
      int v214 = v207 * v208;
      do
      {
        ((void (*)(void ***, kaldi::quasar::ComputeEngineBufferItf *, uint64_t, void, uint64_t))(*p_p_p)[9])(p_p_p, v198, v212, (v213 + v212), v211);
        uint64_t v212 = (v212 + v214);
        uint64_t v211 = (v211 + v213);
        --v206;
      }
      while (v206);
    }
    if (*(char *)(a1 + 1479) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&v523, *(const std::string::value_type **)(a1 + 1456), *(void *)(a1 + 1464));
    }
    else {
      std::vector<int> v523 = *(std::vector<int> *)(a1 + 1456);
    }
    v215 = (void **)p_p_p;
    p_p_p = 0;
    *(void *)&long long v524 = v215;
    unint64_t v216 = v510;
    if (v510 >= v511)
    {
      uint64_t v220 = (uint64_t)(v510 - (void)p_p) >> 5;
      unint64_t v221 = v220 + 1;
      if ((unint64_t)(v220 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v222 = v511 - (void)p_p;
      if ((uint64_t)(v511 - (void)p_p) >> 4 > v221) {
        unint64_t v221 = v222 >> 4;
      }
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v223 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v223 = v221;
      }
      v508 = (int64x2_t **)&v511;
      v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v511, v223);
      v225 = &v224[32 * v220];
      *(void *)&long long __p = v224;
      *((void *)&__p + 1) = v225;
      v507 = &v224[32 * v226];
      long long v227 = *(_OWORD *)&v523.__begin_;
      *((void *)v225 + 2) = v523.__end_cap_.__value_;
      *(_OWORD *)v225 = v227;
      memset(&v523, 0, sizeof(v523));
      uint64_t v228 = v524;
      *(void *)&long long v524 = 0;
      *((void *)v225 + 3) = v228;
      v506 = v225 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&p_p, &__p);
      unint64_t v219 = v510;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      long long v217 = *(_OWORD *)&v523.__begin_;
      *(void *)(v510 + 16) = v523.__end_cap_.__value_;
      *(_OWORD *)unint64_t v216 = v217;
      memset(&v523, 0, sizeof(v523));
      uint64_t v218 = v524;
      *(void *)&long long v524 = 0;
      *(void *)(v216 + 24) = v218;
      unint64_t v219 = v216 + 32;
    }
    unint64_t v510 = v219;
    uint64_t v229 = v524;
    *(void *)&long long v524 = 0;
    if (v229) {
      (*(void (**)(uint64_t))(*(void *)v229 + 8))(v229);
    }
    if (SHIBYTE(v523.__end_cap_.__value_) < 0) {
      operator delete(v523.__begin_);
    }
    uint64_t v230 = *(void *)(a1 + 216);
    long long __p = 0uLL;
    v506 = 0;
    (*(void (**)(uint64_t, void ***, uint64_t, long long *, uint64_t))(*(void *)v230 + 112))(v230, &p_p, a1 + 1840, &__p, a1 + 1360);
    v523.__begin_ = (std::vector<int>::pointer)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v523);
    uint64_t v231 = (void **)p_p_p;
    p_p_p = 0;
    if (v231) {
      (*((void (**)(void **))*v231 + 1))(v231);
    }
    if (v197) {
      (*(void (**)(uint64_t))(*(void *)v197 + 8))(v197);
    }
    *(void *)&long long __p = &p_p;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v521, v232);
  }
  *(void *)&long long __p = &v512;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v504 = (uint64_t *)(a1 + 1384);
  *(_DWORD *)(a1 + 1916) = (*(void *)(a1 + 1392) - *(void *)(a1 + 1384)) >> 5;
  if (!*(unsigned char *)(a1 + 1341))
  {
    uint64_t v235 = *(void *)(a1 + 184);
    v236 = (int *)operator new(8uLL);
    v523.__begin_ = v236;
    *(void *)v236 = 1;
    v523.__end_ = v236 + 2;
    v523.__end_cap_.__value_ = v236 + 2;
    (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(void *)v235 + 56))(&v512, v235, &v523);
    if (*(char *)(a1 + 1575) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1552), *(void *)(a1 + 1560));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1552);
    }
    uint64_t v265 = v512;
    v512 = 0;
    *(void *)&long long v522 = v265;
    unint64_t v258 = *(void *)(a1 + 1392);
    unint64_t v266 = *(void *)(a1 + 1400);
    if (v258 >= v266)
    {
      uint64_t v260 = (uint64_t)(v258 - *v504) >> 5;
      unint64_t v270 = v260 + 1;
      if ((unint64_t)(v260 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v262 = a1 + 1400;
      uint64_t v271 = v266 - *v504;
      if (v271 >> 4 > v270) {
        unint64_t v270 = v271 >> 4;
      }
      if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v264 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v264 = v270;
      }
      goto LABEL_346;
    }
LABEL_339:
    long long v267 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
    *(void *)(v258 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v258 = v267;
    memset(&v521, 0, sizeof(v521));
    uint64_t v268 = v522;
    *(void *)&long long v522 = 0;
    *(void *)(v258 + 24) = v268;
    unint64_t v269 = v258 + 32;
    *(void *)(a1 + 1392) = v258 + 32;
    goto LABEL_347;
  }
  uint64_t v233 = *(void *)(a1 + 184);
  v234 = (int *)operator new(8uLL);
  v523.__begin_ = v234;
  *(void *)v234 = 1;
  v523.__end_ = v234 + 2;
  v523.__end_cap_.__value_ = v234 + 2;
  (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(void *)v233 + 56))(&v512, v233, &v523);
  if (*(char *)(a1 + 1551) < 0) {
    std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1528), *(void *)(a1 + 1536));
  }
  else {
    std::string v521 = *(std::string *)(a1 + 1528);
  }
  v237 = v512;
  v512 = 0;
  *(void *)&long long v522 = v237;
  unint64_t v238 = *(void *)(a1 + 1416);
  unint64_t v239 = *(void *)(a1 + 1424);
  if (v238 >= v239)
  {
    uint64_t v243 = *(void *)(a1 + 1408);
    uint64_t v244 = (uint64_t)(v238 - v243) >> 5;
    unint64_t v245 = v244 + 1;
    if ((unint64_t)(v244 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v246 = v239 - v243;
    if (v246 >> 4 > v245) {
      unint64_t v245 = v246 >> 4;
    }
    if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v247 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v247 = v245;
    }
    v508 = (int64x2_t **)(a1 + 1424);
    v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1424, v247);
    v249 = &v248[32 * v244];
    *(void *)&long long __p = v248;
    *((void *)&__p + 1) = v249;
    v507 = &v248[32 * v250];
    long long v251 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
    *((void *)v249 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
    *(_OWORD *)v249 = v251;
    memset(&v521, 0, sizeof(v521));
    uint64_t v252 = v522;
    *(void *)&long long v522 = 0;
    *((void *)v249 + 3) = v252;
    v506 = v249 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1408), &__p);
    unint64_t v242 = *(void *)(a1 + 1416);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    long long v240 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
    *(void *)(v238 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v238 = v240;
    memset(&v521, 0, sizeof(v521));
    uint64_t v241 = v522;
    *(void *)&long long v522 = 0;
    *(void *)(v238 + 24) = v241;
    unint64_t v242 = v238 + 32;
    *(void *)(a1 + 1416) = v238 + 32;
  }
  *(void *)(a1 + 1416) = v242;
  uint64_t v253 = v522;
  *(void *)&long long v522 = 0;
  if (v253) {
    (*(void (**)(uint64_t))(*(void *)v253 + 8))(v253);
  }
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v521.__r_.__value_.__l.__data_);
  }
  std::string v254 = v512;
  v512 = 0;
  if (v254) {
    (*(void (**)(void *))(*(void *)v254 + 8))(v254);
  }
  if (v523.__begin_)
  {
    v523.__end_ = v523.__begin_;
    operator delete(v523.__begin_);
  }
  uint64_t v255 = *(void *)(a1 + 184);
  std::string v256 = (int *)operator new(8uLL);
  v523.__begin_ = v256;
  *(void *)std::string v256 = 1;
  v523.__end_ = v256 + 2;
  v523.__end_cap_.__value_ = v256 + 2;
  (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(void *)v255 + 56))(&v512, v255, &v523);
  if (*(char *)(a1 + 1743) < 0) {
    std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
  }
  else {
    std::string v521 = *(std::string *)(a1 + 1720);
  }
  std::string v257 = v512;
  v512 = 0;
  *(void *)&long long v522 = v257;
  unint64_t v258 = *(void *)(a1 + 1392);
  unint64_t v259 = *(void *)(a1 + 1400);
  if (v258 < v259) {
    goto LABEL_339;
  }
  uint64_t v260 = (uint64_t)(v258 - *v504) >> 5;
  unint64_t v261 = v260 + 1;
  if ((unint64_t)(v260 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v262 = a1 + 1400;
  uint64_t v263 = v259 - *v504;
  if (v263 >> 4 > v261) {
    unint64_t v261 = v263 >> 4;
  }
  if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v264 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v264 = v261;
  }
LABEL_346:
  v508 = (int64x2_t **)(a1 + 1400);
  v272 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(v262, v264);
  v273 = &v272[32 * v260];
  *(void *)&long long __p = v272;
  *((void *)&__p + 1) = v273;
  v507 = &v272[32 * v274];
  long long v275 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
  *((void *)v273 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
  *(_OWORD *)v273 = v275;
  memset(&v521, 0, sizeof(v521));
  uint64_t v276 = v522;
  *(void *)&long long v522 = 0;
  *((void *)v273 + 3) = v276;
  v506 = v273 + 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
  unint64_t v269 = *(void *)(a1 + 1392);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
LABEL_347:
  *(void *)(a1 + 1392) = v269;
  uint64_t v277 = v522;
  *(void *)&long long v522 = 0;
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 8))(v277);
  }
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v521.__r_.__value_.__l.__data_);
  }
  v278 = v512;
  v512 = 0;
  if (v278) {
    (*(void (**)(void *))(*(void *)v278 + 8))(v278);
  }
  if (v523.__begin_)
  {
    v523.__end_ = v523.__begin_;
    operator delete(v523.__begin_);
  }
  *(_DWORD *)(a1 + 1920) = (*(void *)(a1 + 1392) - *(void *)(a1 + 1384)) >> 5;
  if (*(unsigned char *)(a1 + 1348))
  {
    uint64_t v279 = *(void *)(a1 + 184);
    v280 = (int *)operator new(8uLL);
    v523.__begin_ = v280;
    *(void *)v280 = 1;
    v523.__end_ = v280 + 2;
    v523.__end_cap_.__value_ = v280 + 2;
    (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(void *)v279 + 56))(&v512, v279, &v523);
    if (*(char *)(a1 + 1647) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1624), *(void *)(a1 + 1632));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1624);
    }
    v281 = v512;
    v512 = 0;
    *(void *)&long long v522 = v281;
    unint64_t v282 = *(void *)(a1 + 1392);
    unint64_t v283 = *(void *)(a1 + 1400);
    if (v282 >= v283)
    {
      uint64_t v287 = (uint64_t)(v282 - *v504) >> 5;
      unint64_t v288 = v287 + 1;
      if ((unint64_t)(v287 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v289 = v283 - *v504;
      if (v289 >> 4 > v288) {
        unint64_t v288 = v289 >> 4;
      }
      if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v290 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v290 = v288;
      }
      v508 = (int64x2_t **)(a1 + 1400);
      v291 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v290);
      v292 = &v291[32 * v287];
      *(void *)&long long __p = v291;
      *((void *)&__p + 1) = v292;
      v507 = &v291[32 * v293];
      long long v294 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *((void *)v292 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)v292 = v294;
      memset(&v521, 0, sizeof(v521));
      uint64_t v295 = v522;
      *(void *)&long long v522 = 0;
      *((void *)v292 + 3) = v295;
      v506 = v292 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
      unint64_t v286 = *(void *)(a1 + 1392);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      long long v284 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *(void *)(v282 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v282 = v284;
      memset(&v521, 0, sizeof(v521));
      uint64_t v285 = v522;
      *(void *)&long long v522 = 0;
      *(void *)(v282 + 24) = v285;
      unint64_t v286 = v282 + 32;
      *(void *)(a1 + 1392) = v282 + 32;
    }
    *(void *)(a1 + 1392) = v286;
    uint64_t v296 = v522;
    *(void *)&long long v522 = 0;
    if (v296) {
      (*(void (**)(uint64_t))(*(void *)v296 + 8))(v296);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    v297 = v512;
    v512 = 0;
    if (v297) {
      (*(void (**)(void *))(*(void *)v297 + 8))(v297);
    }
    if (v523.__begin_)
    {
      v523.__end_ = v523.__begin_;
      operator delete(v523.__begin_);
    }
    if (*(unsigned char *)(a1 + 1341))
    {
      uint64_t v298 = *(void *)(a1 + 184);
      v299 = (int *)operator new(8uLL);
      v523.__begin_ = v299;
      *(void *)v299 = 1;
      v523.__end_ = v299 + 2;
      v523.__end_cap_.__value_ = v299 + 2;
      (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(void *)v298 + 56))(&v512, v298, &v523);
      if (*(char *)(a1 + 1599) < 0) {
        std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1576), *(void *)(a1 + 1584));
      }
      else {
        std::string v521 = *(std::string *)(a1 + 1576);
      }
      v300 = v512;
      v512 = 0;
      *(void *)&long long v522 = v300;
      unint64_t v301 = *(void *)(a1 + 1416);
      unint64_t v302 = *(void *)(a1 + 1424);
      if (v301 >= v302)
      {
        uint64_t v306 = *(void *)(a1 + 1408);
        uint64_t v307 = (uint64_t)(v301 - v306) >> 5;
        unint64_t v308 = v307 + 1;
        if ((unint64_t)(v307 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v309 = v302 - v306;
        if (v309 >> 4 > v308) {
          unint64_t v308 = v309 >> 4;
        }
        if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v310 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v310 = v308;
        }
        v508 = (int64x2_t **)(a1 + 1424);
        v311 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1424, v310);
        v312 = &v311[32 * v307];
        *(void *)&long long __p = v311;
        *((void *)&__p + 1) = v312;
        v507 = &v311[32 * v313];
        long long v314 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
        *((void *)v312 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
        *(_OWORD *)v312 = v314;
        memset(&v521, 0, sizeof(v521));
        uint64_t v315 = v522;
        *(void *)&long long v522 = 0;
        *((void *)v312 + 3) = v315;
        v506 = v312 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1408), &__p);
        unint64_t v305 = *(void *)(a1 + 1416);
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
      }
      else
      {
        long long v303 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
        *(void *)(v301 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v301 = v303;
        memset(&v521, 0, sizeof(v521));
        uint64_t v304 = v522;
        *(void *)&long long v522 = 0;
        *(void *)(v301 + 24) = v304;
        unint64_t v305 = v301 + 32;
        *(void *)(a1 + 1416) = v301 + 32;
      }
      *(void *)(a1 + 1416) = v305;
      uint64_t v316 = v522;
      *(void *)&long long v522 = 0;
      if (v316) {
        (*(void (**)(uint64_t))(*(void *)v316 + 8))(v316);
      }
      if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v521.__r_.__value_.__l.__data_);
      }
      v317 = v512;
      v512 = 0;
      if (v317) {
        (*(void (**)(void *))(*(void *)v317 + 8))(v317);
      }
      if (v523.__begin_)
      {
        v523.__end_ = v523.__begin_;
        operator delete(v523.__begin_);
      }
    }
  }
  uint64_t v318 = (*(void *)(a1 + 1392) - *(void *)(a1 + 1384)) >> 5;
  *(_DWORD *)(a1 + 1928) = v318;
  if (*(char *)(a1 + 1671) < 0)
  {
    if (!*(void *)(a1 + 1656)) {
      goto LABEL_422;
    }
  }
  else if (!*(unsigned char *)(a1 + 1671))
  {
    goto LABEL_422;
  }
  uint64_t v319 = *(void *)(a1 + 184);
  v320 = (int *)operator new(8uLL);
  v523.__begin_ = v320;
  *(void *)v320 = 1;
  v523.__end_ = v320 + 2;
  v523.__end_cap_.__value_ = v320 + 2;
  (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(void *)v319 + 56))(&v512, v319, &v523);
  if (*(char *)(a1 + 1671) < 0) {
    std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1648), *(void *)(a1 + 1656));
  }
  else {
    std::string v521 = *(std::string *)(a1 + 1648);
  }
  v321 = v512;
  v512 = 0;
  *(void *)&long long v522 = v321;
  unint64_t v322 = *(void *)(a1 + 1392);
  unint64_t v323 = *(void *)(a1 + 1400);
  if (v322 >= v323)
  {
    uint64_t v327 = (uint64_t)(v322 - *v504) >> 5;
    unint64_t v328 = v327 + 1;
    if ((unint64_t)(v327 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v329 = v323 - *v504;
    if (v329 >> 4 > v328) {
      unint64_t v328 = v329 >> 4;
    }
    if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v330 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v330 = v328;
    }
    v508 = (int64x2_t **)(a1 + 1400);
    v331 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v330);
    v332 = &v331[32 * v327];
    *(void *)&long long __p = v331;
    *((void *)&__p + 1) = v332;
    v507 = &v331[32 * v333];
    long long v334 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
    *((void *)v332 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
    *(_OWORD *)v332 = v334;
    memset(&v521, 0, sizeof(v521));
    uint64_t v335 = v522;
    *(void *)&long long v522 = 0;
    *((void *)v332 + 3) = v335;
    v506 = v332 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
    unint64_t v326 = *(void *)(a1 + 1392);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    long long v324 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
    *(void *)(v322 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v322 = v324;
    memset(&v521, 0, sizeof(v521));
    uint64_t v325 = v522;
    *(void *)&long long v522 = 0;
    *(void *)(v322 + 24) = v325;
    unint64_t v326 = v322 + 32;
    *(void *)(a1 + 1392) = v322 + 32;
  }
  *(void *)(a1 + 1392) = v326;
  uint64_t v336 = v522;
  *(void *)&long long v522 = 0;
  if (v336) {
    (*(void (**)(uint64_t))(*(void *)v336 + 8))(v336);
  }
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v521.__r_.__value_.__l.__data_);
  }
  v337 = v512;
  v512 = 0;
  if (v337) {
    (*(void (**)(void *))(*(void *)v337 + 8))(v337);
  }
  if (v523.__begin_)
  {
    v523.__end_ = v523.__begin_;
    operator delete(v523.__begin_);
  }
  uint64_t v318 = (*(void *)(a1 + 1392) - *(void *)(a1 + 1384)) >> 5;
LABEL_422:
  *(_DWORD *)(a1 + 1924) = v318;
  if (*(unsigned char *)(a1 + 1338) && !*(unsigned char *)(a1 + 1339) && !*(unsigned char *)(a1 + 1340))
  {
    if (!*(unsigned char *)(a1 + 1342))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1121);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso shortlist models require active shortlist!", 51);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    (*(void (**)(std::vector<int> *__return_ptr))(**(void **)(a1 + 184) + 16))(&v523);
    if (*(char *)(a1 + 1695) < 0) {
      std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)(a1 + 1672), *(void *)(a1 + 1680));
    }
    else {
      std::string v521 = *(std::string *)(a1 + 1672);
    }
    std::vector<int>::pointer v338 = v523.__begin_;
    v523.__begin_ = 0;
    *(void *)&long long v522 = v338;
    unint64_t v339 = *(void *)(a1 + 1392);
    unint64_t v340 = *(void *)(a1 + 1400);
    if (v339 >= v340)
    {
      uint64_t v344 = (uint64_t)(v339 - *v504) >> 5;
      unint64_t v345 = v344 + 1;
      if ((unint64_t)(v344 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v346 = v340 - *v504;
      if (v346 >> 4 > v345) {
        unint64_t v345 = v346 >> 4;
      }
      if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v347 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v347 = v345;
      }
      v508 = (int64x2_t **)(a1 + 1400);
      v348 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v347);
      v349 = &v348[32 * v344];
      *(void *)&long long __p = v348;
      *((void *)&__p + 1) = v349;
      v507 = &v348[32 * v350];
      long long v351 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *((void *)v349 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)v349 = v351;
      memset(&v521, 0, sizeof(v521));
      uint64_t v352 = v522;
      *(void *)&long long v522 = 0;
      *((void *)v349 + 3) = v352;
      v506 = v349 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
      unint64_t v343 = *(void *)(a1 + 1392);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      long long v341 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *(void *)(v339 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v339 = v341;
      memset(&v521, 0, sizeof(v521));
      uint64_t v342 = v522;
      *(void *)&long long v522 = 0;
      *(void *)(v339 + 24) = v342;
      unint64_t v343 = v339 + 32;
      *(void *)(a1 + 1392) = v339 + 32;
    }
    *(void *)(a1 + 1392) = v343;
    uint64_t v353 = v522;
    *(void *)&long long v522 = 0;
    if (v353) {
      (*(void (**)(uint64_t))(*(void *)v353 + 8))(v353);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    std::vector<int>::pointer v354 = v523.__begin_;
    v523.__begin_ = 0;
    if (v354) {
      (*(void (**)(std::vector<int>::pointer))(*(void *)v354 + 8))(v354);
    }
  }
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2736), 1uLL);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](*(uint64_t **)(a1 + 2736));
  *(_DWORD *)(a1 + 1896) = (*(void *)(a1 + 1392) - *(void *)(a1 + 1384)) >> 5;
  v356 = *(long long **)(a1 + 1864);
  v357 = *(long long **)(a1 + 1872);
  if (v356 != v357)
  {
    int64x2_t v500 = vdupq_n_s64(1uLL);
    do
    {
      if (*(unsigned char *)(a1 + 2764))
      {
        unint64_t v358 = *(int *)(a1 + 2760);
        LODWORD(__p) = 0;
        std::vector<float>::vector(&v523, v358, &__p);
        uint64_t v359 = *(void *)(a1 + 184);
        uint64_t v360 = *(int *)(a1 + 2760);
        v361 = (int64x2_t *)operator new(0x20uLL);
        v513 = v361 + 2;
        v514 = v361 + 2;
        v361->i64[0] = 1;
        v361->i64[1] = v360;
        v361[1] = v500;
        v512 = v361;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(void *)v359 + 56))(&p_p, v359, &v512);
        if (*((char *)v356 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)v356, *((void *)v356 + 1));
        }
        else
        {
          long long v362 = *v356;
          v521.__r_.__value_.__r.__words[2] = *((void *)v356 + 2);
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v362;
        }
        v366 = p_p;
        p_p = 0;
        *(void *)&long long v522 = v366;
        unint64_t v367 = *(void *)(a1 + 1392);
        unint64_t v368 = *(void *)(a1 + 1400);
        if (v367 >= v368)
        {
          uint64_t v372 = (uint64_t)(v367 - *v504) >> 5;
          unint64_t v373 = v372 + 1;
          if ((unint64_t)(v372 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v374 = v368 - *v504;
          if (v374 >> 4 > v373) {
            unint64_t v373 = v374 >> 4;
          }
          if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v375 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v375 = v373;
          }
          v508 = (int64x2_t **)(a1 + 1400);
          v376 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v375);
          v377 = &v376[32 * v372];
          *(void *)&long long __p = v376;
          *((void *)&__p + 1) = v377;
          v507 = &v376[32 * v378];
          long long v379 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
          *((void *)v377 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
          *(_OWORD *)v377 = v379;
          memset(&v521, 0, sizeof(v521));
          uint64_t v380 = v522;
          *(void *)&long long v522 = 0;
          *((void *)v377 + 3) = v380;
          v506 = v377 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
          unint64_t v371 = *(void *)(a1 + 1392);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          long long v369 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
          *(void *)(v367 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v367 = v369;
          memset(&v521, 0, sizeof(v521));
          uint64_t v370 = v522;
          *(void *)&long long v522 = 0;
          *(void *)(v367 + 24) = v370;
          unint64_t v371 = v367 + 32;
          *(void *)(a1 + 1392) = v367 + 32;
        }
        *(void *)(a1 + 1392) = v371;
        uint64_t v381 = v522;
        *(void *)&long long v522 = 0;
        if (v381) {
          (*(void (**)(uint64_t))(*(void *)v381 + 8))(v381);
        }
        if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v521.__r_.__value_.__l.__data_);
        }
        v382 = p_p;
        p_p = 0;
        if (v382) {
          (*((void (**)(void **))*v382 + 1))(v382);
        }
        if (v512)
        {
          v513 = (int64x2_t *)v512;
          operator delete(v512);
        }
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 1392) - 8) + 88))(*(void *)(*(void *)(a1 + 1392) - 8));
        v383 = *(uint64_t **)(a1 + 2736);
        uint64_t v384 = *(void *)(a1 + 184);
        uint64_t v385 = *(int *)(a1 + 2760);
        v386 = (int64x2_t *)operator new(0x20uLL);
        v521.__r_.__value_.__l.__size_ = (std::string::size_type)&v386[2];
        v521.__r_.__value_.__r.__words[2] = (std::string::size_type)&v386[2];
        v386->i64[0] = 1;
        v386->i64[1] = v385;
        v386[1] = vdupq_n_s64(1uLL);
        v521.__r_.__value_.__r.__words[0] = (std::string::size_type)v386;
        (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v384 + 56))(&v512, v384, &v521);
        if (v512) {
          operator new();
        }
        v512 = 0;
        unint64_t v387 = v383[2];
        v388 = (void *)v383[1];
        if ((unint64_t)v388 >= v387)
        {
          uint64_t v390 = ((uint64_t)v388 - *v383) >> 4;
          unint64_t v391 = v390 + 1;
          if ((unint64_t)(v390 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v392 = v387 - *v383;
          if (v392 >> 3 > v391) {
            unint64_t v391 = v392 >> 3;
          }
          if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v393 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v393 = v391;
          }
          v508 = (int64x2_t **)(v383 + 2);
          v394 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v383 + 2), v393);
          v395 = &v394[16 * v390];
          *(void *)&long long __p = v394;
          *((void *)&__p + 1) = v395;
          v507 = &v394[16 * v396];
          *(void *)v395 = 0;
          *((void *)v395 + 1) = 0;
          v506 = v395 + 16;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v383, &__p);
          v389 = (void *)v383[1];
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&__p);
        }
        else
        {
          void *v388 = 0;
          v388[1] = 0;
          v389 = v388 + 2;
          v383[1] = (uint64_t)(v388 + 2);
        }
        v383[1] = (uint64_t)v389;
        v397 = v512;
        v512 = 0;
        if (v397) {
          (*(void (**)(void *))(*(void *)v397 + 8))(v397);
        }
        if (v521.__r_.__value_.__r.__words[0])
        {
          v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
          operator delete(v521.__r_.__value_.__l.__data_);
        }
        uint64_t v398 = *(void *)(*(void *)(*(void *)(a1 + 2736) + 8) - 16);
        (*(void (**)(uint64_t))(*(void *)v398 + 88))(v398);
        std::vector<int>::pointer v399 = v523.__begin_;
        if (!v523.__begin_) {
          goto LABEL_520;
        }
        v523.__end_ = v523.__begin_;
      }
      else
      {
        uint64_t v363 = *(void *)(a1 + 184);
        unint64_t v364 = *(int *)(a1 + 2760);
        LODWORD(p_p) = 0;
        std::vector<float>::vector(&v523, v364, &p_p);
        (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *, void))(*(void *)v363 + 24))(&v512, v363, &v523, 0);
        if (*((char *)v356 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)v356, *((void *)v356 + 1));
        }
        else
        {
          long long v365 = *v356;
          v521.__r_.__value_.__r.__words[2] = *((void *)v356 + 2);
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v365;
        }
        v400 = v512;
        v512 = 0;
        *(void *)&long long v522 = v400;
        unint64_t v401 = *(void *)(a1 + 1392);
        unint64_t v402 = *(void *)(a1 + 1400);
        if (v401 >= v402)
        {
          uint64_t v406 = (uint64_t)(v401 - *v504) >> 5;
          unint64_t v407 = v406 + 1;
          if ((unint64_t)(v406 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v408 = v402 - *v504;
          if (v408 >> 4 > v407) {
            unint64_t v407 = v408 >> 4;
          }
          if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v409 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v409 = v407;
          }
          v508 = (int64x2_t **)(a1 + 1400);
          v410 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v409);
          v411 = &v410[32 * v406];
          *(void *)&long long __p = v410;
          *((void *)&__p + 1) = v411;
          v507 = &v410[32 * v412];
          long long v413 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
          *((void *)v411 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
          *(_OWORD *)v411 = v413;
          memset(&v521, 0, sizeof(v521));
          uint64_t v414 = v522;
          *(void *)&long long v522 = 0;
          *((void *)v411 + 3) = v414;
          v506 = v411 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
          unint64_t v405 = *(void *)(a1 + 1392);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          long long v403 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
          *(void *)(v401 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v401 = v403;
          memset(&v521, 0, sizeof(v521));
          uint64_t v404 = v522;
          *(void *)&long long v522 = 0;
          *(void *)(v401 + 24) = v404;
          unint64_t v405 = v401 + 32;
          *(void *)(a1 + 1392) = v401 + 32;
        }
        *(void *)(a1 + 1392) = v405;
        uint64_t v415 = v522;
        *(void *)&long long v522 = 0;
        if (v415) {
          (*(void (**)(uint64_t))(*(void *)v415 + 8))(v415);
        }
        if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v521.__r_.__value_.__l.__data_);
        }
        v416 = v512;
        v512 = 0;
        if (v416) {
          (*(void (**)(void *))(*(void *)v416 + 8))(v416);
        }
        if (v523.__begin_)
        {
          v523.__end_ = v523.__begin_;
          operator delete(v523.__begin_);
        }
        v417 = *(uint64_t **)(a1 + 2736);
        uint64_t v418 = *(void *)(a1 + 184);
        unint64_t v419 = *(int *)(a1 + 2760);
        LODWORD(v512) = 0;
        std::vector<float>::vector(&v521, v419, &v512);
        (*(void (**)(std::vector<int> *__return_ptr, uint64_t, std::string *, void))(*(void *)v418 + 24))(&v523, v418, &v521, 0);
        if (v523.__begin_) {
          operator new();
        }
        v523.__begin_ = 0;
        unint64_t v420 = v417[2];
        v421 = (void *)v417[1];
        if ((unint64_t)v421 >= v420)
        {
          uint64_t v423 = ((uint64_t)v421 - *v417) >> 4;
          unint64_t v424 = v423 + 1;
          if ((unint64_t)(v423 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v425 = v420 - *v417;
          if (v425 >> 3 > v424) {
            unint64_t v424 = v425 >> 3;
          }
          if ((unint64_t)v425 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v426 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v426 = v424;
          }
          v508 = (int64x2_t **)(v417 + 2);
          v427 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v417 + 2), v426);
          v428 = &v427[16 * v423];
          *(void *)&long long __p = v427;
          *((void *)&__p + 1) = v428;
          v507 = &v427[16 * v429];
          *(void *)v428 = 0;
          *((void *)v428 + 1) = 0;
          v506 = v428 + 16;
          std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v417, &__p);
          v422 = (void *)v417[1];
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&__p);
        }
        else
        {
          void *v421 = 0;
          v421[1] = 0;
          v422 = v421 + 2;
          v417[1] = (uint64_t)(v421 + 2);
        }
        v417[1] = (uint64_t)v422;
        std::vector<int>::pointer v430 = v523.__begin_;
        v523.__begin_ = 0;
        if (v430) {
          (*(void (**)(std::vector<int>::pointer))(*(void *)v430 + 8))(v430);
        }
        std::vector<int>::pointer v399 = (std::vector<int>::pointer)v521.__r_.__value_.__r.__words[0];
        if (!v521.__r_.__value_.__r.__words[0]) {
          goto LABEL_520;
        }
        v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
      }
      operator delete(v399);
LABEL_520:
      v356 = (long long *)((char *)v356 + 24);
    }
    while (v356 != v357);
  }
  int v431 = v498;
  if (*(unsigned char *)(a1 + 1348))
  {
    v432 = *(uint64_t **)(a1 + 2736);
    if (*(unsigned char *)(a1 + 1351))
    {
      uint64_t v433 = *(void *)(a1 + 184);
      v434 = operator new(4uLL);
      v521.__r_.__value_.__r.__words[0] = (std::string::size_type)v434;
      _DWORD *v434 = 0;
      v521.__r_.__value_.__l.__size_ = (std::string::size_type)(v434 + 1);
      v521.__r_.__value_.__r.__words[2] = (std::string::size_type)(v434 + 1);
      (*(void (**)(std::vector<int> *__return_ptr, uint64_t, std::string *, void))(*(void *)v433 + 16))(&v523, v433, &v521, 0);
      if (v523.__begin_) {
        operator new();
      }
      v523.__begin_ = 0;
      uint64_t v437 = (uint64_t)(v432 + 2);
      unint64_t v438 = v432[2];
      v439 = (void *)v432[1];
      if ((unint64_t)v439 >= v438)
      {
        uint64_t v440 = ((uint64_t)v439 - *v432) >> 4;
        unint64_t v441 = v440 + 1;
        if ((unint64_t)(v440 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v442 = v438 - *v432;
        if (v442 >> 3 > v441) {
          unint64_t v441 = v442 >> 3;
        }
        if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v443 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v443 = v441;
        }
LABEL_542:
        v508 = (int64x2_t **)(v432 + 2);
        v448 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v437, v443);
        v449 = &v448[16 * v440];
        *(void *)&long long __p = v448;
        *((void *)&__p + 1) = v449;
        v507 = &v448[16 * v450];
        *(void *)v449 = 0;
        *((void *)v449 + 1) = 0;
        v506 = v449 + 16;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v432, &__p);
        v445 = (void *)v432[1];
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&__p);
        goto LABEL_543;
      }
    }
    else
    {
      uint64_t v435 = *(void *)(a1 + 184);
      v436 = operator new(4uLL);
      v521.__r_.__value_.__r.__words[0] = (std::string::size_type)v436;
      _DWORD *v436 = 1;
      v521.__r_.__value_.__l.__size_ = (std::string::size_type)(v436 + 1);
      v521.__r_.__value_.__r.__words[2] = (std::string::size_type)(v436 + 1);
      (*(void (**)(std::vector<int> *__return_ptr, uint64_t, std::string *, void))(*(void *)v435 + 16))(&v523, v435, &v521, 0);
      if (v523.__begin_) {
        operator new();
      }
      v523.__begin_ = 0;
      uint64_t v437 = (uint64_t)(v432 + 2);
      unint64_t v444 = v432[2];
      v439 = (void *)v432[1];
      if ((unint64_t)v439 >= v444)
      {
        uint64_t v440 = ((uint64_t)v439 - *v432) >> 4;
        unint64_t v446 = v440 + 1;
        if ((unint64_t)(v440 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v447 = v444 - *v432;
        if (v447 >> 3 > v446) {
          unint64_t v446 = v447 >> 3;
        }
        if ((unint64_t)v447 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v443 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v443 = v446;
        }
        goto LABEL_542;
      }
    }
    void *v439 = 0;
    v439[1] = 0;
    v445 = v439 + 2;
    v432[1] = (uint64_t)(v439 + 2);
LABEL_543:
    v432[1] = (uint64_t)v445;
    std::vector<int>::pointer v451 = v523.__begin_;
    v523.__begin_ = 0;
    if (v451) {
      (*(void (**)(std::vector<int>::pointer))(*(void *)v451 + 8))(v451);
    }
    if (v521.__r_.__value_.__r.__words[0])
    {
      v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
      operator delete(v521.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v452 = *(void *)(a1 + 1840);
  if (v452 != *(void *)(a1 + 1848))
  {
    for (unint64_t i = 0; 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1848) - v452) >> 3) > i; ++i)
    {
      if (v431 < 1 || *(void *)(a1 + 384))
      {
        (*(void (**)(std::vector<int> *__return_ptr))(**(void **)(*(void *)(a1 + 1360)
                                                                             + 8 * (*(_DWORD *)(a1 + 1888) + (int)i))
                                                               + 16))(&v523);
        v454 = (long long *)(v452 + 24 * i);
        if (*((char *)v454 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)v454, *((void *)v454 + 1));
        }
        else
        {
          long long v455 = *v454;
          v521.__r_.__value_.__r.__words[2] = *((void *)v454 + 2);
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v455;
        }
        std::vector<int>::pointer v456 = v523.__begin_;
        v523.__begin_ = 0;
        *(void *)&long long v522 = v456;
        unint64_t v457 = *(void *)(a1 + 1392);
        unint64_t v458 = *(void *)(a1 + 1400);
        if (v457 >= v458)
        {
          uint64_t v459 = (uint64_t)(v457 - *v504) >> 5;
          unint64_t v460 = v459 + 1;
          if ((unint64_t)(v459 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v461 = v458 - *v504;
          if (v461 >> 4 > v460) {
            unint64_t v460 = v461 >> 4;
          }
          if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v462 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v462 = v460;
          }
LABEL_578:
          v508 = (int64x2_t **)(a1 + 1400);
          v482 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v462);
          v483 = &v482[32 * v459];
          *(void *)&long long __p = v482;
          *((void *)&__p + 1) = v483;
          v507 = &v482[32 * v484];
          long long v485 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
          *((void *)v483 + 2) = *((void *)&v521.__r_.__value_.__l + 2);
          *(_OWORD *)v483 = v485;
          memset(&v521, 0, sizeof(v521));
          uint64_t v486 = v522;
          *(void *)&long long v522 = 0;
          *((void *)v483 + 3) = v486;
          v506 = v483 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v504, &__p);
          unint64_t v479 = *(void *)(a1 + 1392);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
          goto LABEL_579;
        }
      }
      else
      {
        uint64_t v463 = *(void *)(*(void *)(a1 + 1360) + 8 * (*(_DWORD *)(a1 + 1888) + (int)i));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v463 + 144))(v463) != 3)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1154);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
          (*(void (**)(uint64_t))(*(void *)v463 + 144))(v463);
          v489 = (void *)std::ostream::operator<<();
          v490 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v489, (uint64_t)" for handover ", 14);
          uint64_t v491 = *(void *)(a1 + 1840) + 24 * i;
          int v492 = *(char *)(v491 + 23);
          if (v492 >= 0) {
            uint64_t v493 = *(void *)(a1 + 1840) + 24 * i;
          }
          else {
            uint64_t v493 = *(void *)v491;
          }
          if (v492 >= 0) {
            uint64_t v494 = *(unsigned __int8 *)(v491 + 23);
          }
          else {
            uint64_t v494 = *(void *)(v491 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v490, v493, v494);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        int v464 = (*(uint64_t (**)(uint64_t, void))(*(void *)v463 + 152))(v463, 0);
        int v465 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v463 + 152))(v463, 1);
        int v466 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v463 + 152))(v463, 2);
        uint64_t v467 = *(void *)(a1 + 184);
        v468 = operator new(0x18uLL);
        *((void *)&__p + 1) = v468 + 3;
        v506 = v468 + 3;
        void *v468 = v464;
        v468[1] = (int)v502;
        v468[2] = v466;
        *(void *)&long long __p = v468;
        (*(void (**)(std::vector<int> *__return_ptr, uint64_t, long long *))(*(void *)v467 + 56))(&v523, v467, &__p);
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (v464 >= 1)
        {
          uint64_t v469 = 0;
          uint64_t v470 = 0;
          int v471 = v502 * v466;
          int v472 = v465 * v466;
          do
          {
            (*(void (**)(std::vector<int>::pointer, uint64_t, uint64_t, void, uint64_t))(*(void *)v523.__begin_
                                                                                                 + 72))(v523.__begin_, v463, v470, (v471 + v470), v469);
            uint64_t v470 = (v470 + v472);
            uint64_t v469 = (v469 + v471);
            --v464;
          }
          while (v464);
        }
        uint64_t v473 = *(void *)(a1 + 1840) + 24 * i;
        if (*(char *)(v473 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v521, *(const std::string::value_type **)v473, *(void *)(v473 + 8));
        }
        else
        {
          long long v474 = *(_OWORD *)v473;
          v521.__r_.__value_.__r.__words[2] = *(void *)(v473 + 16);
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v474;
        }
        int v431 = v498;
        std::vector<int>::pointer v475 = v523.__begin_;
        v523.__begin_ = 0;
        *(void *)&long long v522 = v475;
        unint64_t v457 = *(void *)(a1 + 1392);
        unint64_t v476 = *(void *)(a1 + 1400);
        if (v457 >= v476)
        {
          uint64_t v459 = (uint64_t)(v457 - *v504) >> 5;
          unint64_t v480 = v459 + 1;
          if ((unint64_t)(v459 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v481 = v476 - *v504;
          if (v481 >> 4 > v480) {
            unint64_t v480 = v481 >> 4;
          }
          if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v462 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v462 = v480;
          }
          goto LABEL_578;
        }
      }
      long long v477 = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
      *(void *)(v457 + 16) = *((void *)&v521.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v457 = v477;
      memset(&v521, 0, sizeof(v521));
      uint64_t v478 = v522;
      *(void *)&long long v522 = 0;
      *(void *)(v457 + 24) = v478;
      unint64_t v479 = v457 + 32;
      *(void *)(a1 + 1392) = v457 + 32;
LABEL_579:
      *(void *)(a1 + 1392) = v479;
      uint64_t v487 = v522;
      *(void *)&long long v522 = 0;
      if (v487) {
        (*(void (**)(uint64_t))(*(void *)v487 + 8))(v487);
      }
      if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v521.__r_.__value_.__l.__data_);
      }
      std::vector<int>::pointer v488 = v523.__begin_;
      v523.__begin_ = 0;
      if (v488) {
        (*(void (**)(std::vector<int>::pointer))(*(void *)v488 + 8))(v488);
      }
      uint64_t v452 = *(void *)(a1 + 1840);
    }
  }
  if (v515)
  {
    v516 = v515;
    operator delete(v515);
  }
  if (v518.__begin_)
  {
    v518.__end_ = v518.__begin_;
    operator delete(v518.__begin_);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v519, v355);
}

void sub_20CE98AA0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20CE98DFCLL);
}

void sub_20CE98AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  *(void *)(v54 - 128) = &a50;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 128));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v54 - 176), v55);
  *(void *)(v54 - 128) = &a53;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 128));
  JUMPOUT(0x20CE98DD4);
}

void sub_20CE98AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~pair(v53 - 176);
  if (a53) {
    (*(void (**)(uint64_t))(*(void *)a53 + 8))(a53);
  }
  JUMPOUT(0x20CE98D84);
}

void sub_20CE98B38()
{
  if (v0) {
    JUMPOUT(0x20CE98B44);
  }
  JUMPOUT(0x20CE98B80);
}

void sub_20CE98B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x20CE98D90);
  }
  JUMPOUT(0x20CE98DD4);
}

void sub_20CE98B74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x20CE98D84);
}

void sub_20CE98BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (a53) {
    (*(void (**)(uint64_t))(*(void *)a53 + 8))(a53);
  }
  uint64_t v55 = *(void *)(v54 - 176);
  if (v55)
  {
    *(void *)(v54 - 168) = v55;
    JUMPOUT(0x20CE98CE4);
  }
  JUMPOUT(0x20CE98D84);
}

void sub_20CE98BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  JUMPOUT(0x20CE98BF8);
}

void sub_20CE98C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  JUMPOUT(0x20CE98C70);
}

void sub_20CE98C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~pair(v57 - 176);
  uint64_t v60 = *(void *)(v57 - 128);
  *(void *)(v57 - 128) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  if (__p) {
    operator delete(__p);
  }
  int64x2_t v61 = *(void **)(v57 - 256);
  if (v61)
  {
    *(void *)(v57 - 248) = v61;
    operator delete(v61);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v57 - 232), v59);
  _Unwind_Resume(a1);
}

void sub_20CE98D78()
{
}

void sub_20CE98D80()
{
  uint64_t v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(void *)(v0 - 120) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x20CE98DD4);
}

void sub_20CE98D98()
{
}

uint64_t std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat(kaldi::quasar::ComputeEngineItf *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, void *a3@<X8>)
{
  int v6 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 144))(a2);
  std::vector<long long>::vector(__p, v6);
  if (v6 < 1)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6;
    LODWORD(v9) = 1;
    do
    {
      int v10 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)a2 + 152))(a2, v7);
      *((void *)__p[0] + v7) = v10;
      uint64_t v9 = (v10 * v9);
      ++v7;
    }
    while (v8 != v7);
  }
  (*(void (**)(kaldi::quasar::ComputeEngineItf *, void **))(*(void *)this + 56))(this, __p);
  (*(void (**)(void, const kaldi::quasar::ComputeEngineBufferItf *, void, uint64_t, void))(*(void *)*a3 + 72))(*a3, a2, 0, v9, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20CE98FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *v11;
  *clockid_t v11 = 0;
  if (v13) {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::EncFeedforward()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1178);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Model does not support stream-decoding");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::Encdec::Feedforward(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v316 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  uint64_t v293 = (double *)(a1 + 2560);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v312, (double *)(a1 + 2560), a1 + 2656, (long long *)&__p);
  if (SHIBYTE(__src) < 0) {
    operator delete(__p);
  }
  uint64_t v294 = *(int *)(a2 + 20);
  if (*(unsigned char *)(a1 + 1342)) {
    uint64_t v6 = (uint64_t)(*(void *)(a1 + 2144) - *(void *)(a1 + 2136)) >> 2;
  }
  else {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 464) + 120))(*(void *)(a1 + 464)) - 1;
  }
  uint64_t v7 = v294;
  kaldi::CuMatrix<float>::Resize(a3, v294, v6, 0, 0);
  uint64_t v292 = a3;
  if (*(_DWORD *)(a1 + 740) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1196, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam batched, batch size: ", 26);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (*(unsigned char *)(a1 + 1341))
    {
      uint64_t v75 = *(int *)(a1 + 1900);
      uint64_t v76 = *(void *)(a1 + 1408);
      uint64_t v77 = *(void *)(a1 + 168);
      uint64_t v78 = operator new(8uLL);
      long long __p = v78;
      *uint64_t v78 = v294;
      *(void *)&long long __src = v78 + 1;
      *((void *)&__src + 1) = v78 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v77 + 56))(&v304, v77, &__p);
      uint64_t v80 = (void *)(v76 + 32 * v75 + 24);
      unint64_t v81 = v304;
      uint64_t v304 = 0;
      uint64_t v82 = *v80;
      *uint64_t v80 = v81;
      if (v82) {
        (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
      }
      unint64_t v83 = v304;
      uint64_t v304 = 0;
      if (v83) {
        (*(void (**)(void *))(*(void *)v83 + 8))(v83);
      }
      if (__p)
      {
        *(void *)&long long __src = __p;
        operator delete(__p);
      }
      if ((int)v294 >= 1)
      {
        uint64_t v84 = 0;
        do
        {
          if (*(_DWORD *)(a2 + 20) <= v84 || *(_DWORD *)(a2 + 16) == 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v79);
          }
          (*(void (**)(void, uint64_t, float))(*(void *)*v80 + 104))(*v80, v84, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v84));
          uint64_t v84 = (v84 + 1);
        }
        while (v294 != v84);
      }
      uint64_t v86 = *(int *)(a1 + 1904);
      uint64_t v87 = *(void *)(a1 + 1408);
      uint64_t v88 = *(void *)(a1 + 168);
      uint64_t v89 = operator new(8uLL);
      long long __p = v89;
      *uint64_t v89 = v294;
      *(void *)&long long __src = v89 + 1;
      *((void *)&__src + 1) = v89 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v88 + 56))(&v304, v88, &__p);
      std::vector<int>::pointer v90 = (uint64_t *)(v87 + 32 * v86 + 24);
      std::vector<int>::pointer v91 = v304;
      uint64_t v304 = 0;
      uint64_t v92 = *v90;
      *std::vector<int>::pointer v90 = (uint64_t)v91;
      if (v92) {
        (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
      }
      int v93 = v304;
      uint64_t v304 = 0;
      if (v93) {
        (*(void (**)(void *))(*(void *)v93 + 8))(v93);
      }
      if (__p)
      {
        *(void *)&long long __src = __p;
        operator delete(__p);
      }
      if ((int)v294 >= 1)
      {
        uint64_t v94 = 0;
        uint64_t v95 = 8;
        do
        {
          uint64_t v96 = *v90;
          uint64_t v97 = *(void *)(*(void *)(*(void *)(a1 + 2736) + v95) - 16);
          (*(void (**)(uint64_t, void))(*(void *)v97 + 112))(v97, 0);
          if (*(unsigned char *)(a1 + 1351)) {
            float v99 = 0.0;
          }
          else {
            float v99 = 1.0;
          }
          (*(void (**)(uint64_t, uint64_t, float))(*(void *)v96 + 104))(v96, v94++, v98 - v99);
          v95 += 24;
        }
        while (v294 != v94);
      }
      uint64_t v304 = 0;
      long long v305 = 0uLL;
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1217, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Inputs:", 17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        uint64_t v100 = *(void *)(a1 + 1408);
        uint64_t v101 = *(void *)(a1 + 1416);
        while (v100 != v101)
        {
          if (*(char *)(v100 + 23) < 0)
          {
            uint64_t v103 = *(void *)(v100 + 8);
            if (v103 == 8)
            {
              unint64_t v102 = *(void **)v100;
              goto LABEL_134;
            }
            if (v103 != 18
              || (**(void **)v100 == 0x74756F5F76657270
                ? (BOOL v104 = *(void *)(*(void *)v100 + 8) == 0x656B6F745F747570)
                : (BOOL v104 = 0),
                  v104 ? (BOOL v105 = *(unsigned __int16 *)(*(void *)v100 + 16) == 29550) : (BOOL v105 = 0),
                  !v105))
            {
LABEL_135:
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1222, 3);
                long long v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
                int v107 = *(char *)(v100 + 23);
                if (v107 >= 0) {
                  uint64_t v108 = v100;
                }
                else {
                  uint64_t v108 = *(void *)v100;
                }
                if (v107 >= 0) {
                  uint64_t v109 = *(unsigned __int8 *)(v100 + 23);
                }
                else {
                  uint64_t v109 = *(void *)(v100 + 8);
                }
                uint64_t v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, v108, v109);
                std::string v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)": ", 2);
                kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v100 + 24), &v313);
                if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v112 = &v313;
                }
                else {
                  uint64_t v112 = (std::string *)v313.__r_.__value_.__r.__words[0];
                }
                if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v313.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v313.__r_.__value_.__l.__size_;
                }
                std::vector<int>::pointer v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)v112, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)" [ ", 3);
                (*(void (**)(void, void))(**(void **)(v100 + 24) + 112))(*(void *)(v100 + 24), 0);
                float v115 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)" ", 1);
                (*(void (**)(void, uint64_t))(**(void **)(v100 + 24) + 112))(*(void *)(v100 + 24), 1);
                uint64_t v116 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)" ", 1);
                (*(void (**)(void, uint64_t))(**(void **)(v100 + 24) + 112))(*(void *)(v100 + 24), 2);
                uint64_t v117 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" ...", 4);
LABEL_171:
                if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v313.__r_.__value_.__l.__data_);
                }
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                goto LABEL_174;
              }
              goto LABEL_174;
            }
          }
          else
          {
            if (*(unsigned char *)(v100 + 23) != 18)
            {
              unint64_t v102 = (void *)v100;
              if (*(unsigned char *)(v100 + 23) != 8) {
                goto LABEL_135;
              }
LABEL_134:
              if (*v102 != 0x6E6F697469736F70) {
                goto LABEL_135;
              }
              goto LABEL_157;
            }
            if (*(void *)v100 != 0x74756F5F76657270
              || *(void *)(v100 + 8) != 0x656B6F745F747570
              || *(_WORD *)(v100 + 16) != 29550)
            {
              goto LABEL_135;
            }
          }
LABEL_157:
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1220, 3);
            unint64_t v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            int v121 = *(char *)(v100 + 23);
            if (v121 >= 0) {
              uint64_t v122 = v100;
            }
            else {
              uint64_t v122 = *(void *)v100;
            }
            if (v121 >= 0) {
              uint64_t v123 = *(unsigned __int8 *)(v100 + 23);
            }
            else {
              uint64_t v123 = *(void *)(v100 + 8);
            }
            uint64_t v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, v122, v123);
            BOOL v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v100 + 24), &v313);
            if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v126 = &v313;
            }
            else {
              uint64_t v126 = (std::string *)v313.__r_.__value_.__r.__words[0];
            }
            if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v127 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v127 = v313.__r_.__value_.__l.__size_;
            }
            uint64_t v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)v126, v127);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)" [ ", 3);
            (*(void (**)(void, void))(**(void **)(v100 + 24) + 112))(*(void *)(v100 + 24), 0);
            unint64_t v129 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)" ...", 4);
            goto LABEL_171;
          }
LABEL_174:
          v100 += 32;
        }
      }
      uint64_t v130 = *(void *)(a1 + 168);
      if (*(char *)(a1 + 1743) < 0) {
        std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
      }
      else {
        std::string v313 = *(std::string *)(a1 + 1720);
      }
      long long __p = 0;
      long long __src = 0uLL;
      long long __p = operator new(0x18uLL);
      *(void *)&long long __src = __p;
      *((void *)&__src + 1) = (char *)__p + 24;
      *(void *)&long long __src = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__src + 8, (long long *)&v313, &v314, (std::string *)__p);
      p_p = 0;
      uint64_t v298 = 0;
      uint64_t v299 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(void *)v130 + 112))(v130, a1 + 1408, &__p, &p_p, &v304);
      v301[0] = (void **)&p_p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v301);
      p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v313.__r_.__value_.__l.__data_);
      }
      if (kaldi::g_kaldi_verbose_level <= 2)
      {
        uint64_t v142 = (uint64_t *)v304;
      }
      else
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1229, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Outputs:", 18);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        uint64_t v142 = (uint64_t *)v304;
        uint64_t v143 = v305;
        if ((void *)v305 == v304)
        {
          uint64_t v142 = (uint64_t *)v305;
        }
        else
        {
          unint64_t v144 = 0;
          int v145 = kaldi::g_kaldi_verbose_level;
          do
          {
            if (v145 >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1231, 3);
              uint64_t v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              int v147 = *(char *)(a1 + 1743);
              if (v147 >= 0) {
                uint64_t v148 = a1 + 1720;
              }
              else {
                uint64_t v148 = *(void *)(a1 + 1720);
              }
              if (v147 >= 0) {
                uint64_t v149 = *(unsigned __int8 *)(a1 + 1743);
              }
              else {
                uint64_t v149 = *(void *)(a1 + 1728);
              }
              BOOL v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, v148, v149);
              BOOL v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*((kaldi::quasar::ComputeEngineBufferItf **)v304 + v144), &v313);
              if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v152 = &v313;
              }
              else {
                BOOL v152 = (std::string *)v313.__r_.__value_.__r.__words[0];
              }
              if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v153 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v153 = v313.__r_.__value_.__l.__size_;
              }
              v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)v152, v153);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)" [ ", 3);
              (*(void (**)(void, void))(**((void **)v304 + v144) + 112))(*((void *)v304 + v144), 0);
              int64x2_t v155 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**((void **)v304 + v144) + 112))(*((void *)v304 + v144), 1);
              uint64_t v156 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**((void **)v304 + v144) + 112))(*((void *)v304 + v144), 2);
              uint64_t v157 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)" ...", 4);
              if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v313.__r_.__value_.__l.__data_);
              }
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              int v145 = kaldi::g_kaldi_verbose_level;
              uint64_t v142 = (uint64_t *)v304;
              uint64_t v143 = v305;
            }
            ++v144;
          }
          while (v144 < (v143 - (uint64_t)v142) >> 3);
        }
      }
      uint64_t v158 = *(void *)(a1 + 1384);
      uint64_t v159 = *v142;
      *uint64_t v142 = 0;
      uint64_t v160 = *(void *)(v158 + 24);
      *(void *)(v158 + 24) = v159;
      if (v160) {
        (*(void (**)(uint64_t))(*(void *)v160 + 8))(v160);
      }
      long long __p = &v304;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      uint64_t v7 = v294;
    }
    else
    {
      uint64_t v131 = *(int *)(a1 + 1916);
      uint64_t v132 = *(void *)(a1 + 1384);
      uint64_t v133 = *(void *)(a1 + 184);
      uint64_t v134 = operator new(8uLL);
      long long __p = v134;
      *uint64_t v134 = v294;
      *(void *)&long long __src = v134 + 1;
      *((void *)&__src + 1) = v134 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v133 + 56))(&v304, v133, &__p);
      uint64_t v136 = (void *)(v132 + 32 * v131 + 24);
      int64x2_t v137 = v304;
      uint64_t v304 = 0;
      uint64_t v138 = *v136;
      *uint64_t v136 = v137;
      if (v138) {
        (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
      }
      BOOL v139 = v304;
      uint64_t v304 = 0;
      if (v139) {
        (*(void (**)(void *))(*(void *)v139 + 8))(v139);
      }
      if (__p)
      {
        *(void *)&long long __src = __p;
        operator delete(__p);
      }
      if ((int)v294 >= 1)
      {
        uint64_t v140 = 0;
        do
        {
          if (*(_DWORD *)(a2 + 20) <= v140 || *(_DWORD *)(a2 + 16) == 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v135);
          }
          (*(void (**)(void, uint64_t, float))(*(void *)*v136 + 104))(*v136, v140, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v140));
          uint64_t v140 = (v140 + 1);
        }
        while (v294 != v140);
      }
    }
    if (*(void *)(a1 + 1872) != *(void *)(a1 + 1864))
    {
      unint64_t v161 = 0;
      do
      {
        uint64_t v162 = *(int *)(a1 + 1896);
        uint64_t v163 = *(void *)(a1 + 1384);
        uint64_t v164 = *(void *)(a1 + 184);
        uint64_t v165 = *(int *)(a1 + 2760);
        uint64_t v166 = operator new(0x18uLL);
        *(void *)&long long __src = v166 + 3;
        *((void *)&__src + 1) = v166 + 3;
        *uint64_t v166 = 1;
        v166[1] = v294;
        v166[2] = v165;
        long long __p = v166;
        (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v164 + 56))(&v304, v164, &__p);
        uint64_t v167 = (void *)(v163 + 32 * (v162 + (int)v161) + 24);
        v168 = v304;
        uint64_t v304 = 0;
        uint64_t v169 = *v167;
        *uint64_t v167 = v168;
        if (v169) {
          (*(void (**)(uint64_t))(*(void *)v169 + 8))(v169);
        }
        uint64_t v170 = v304;
        uint64_t v304 = 0;
        if (v170) {
          (*(void (**)(void *))(*(void *)v170 + 8))(v170);
        }
        if (__p)
        {
          *(void *)&long long __src = __p;
          operator delete(__p);
        }
        if ((int)v7 >= 1)
        {
          uint64_t v171 = 0;
          int v172 = 0;
          do
          {
            (*(void (**)(void, void, void, void, void))(*(void *)*v167 + 72))(*v167, *(void *)(*(void *)(*(void *)(a1 + 2736) + v171) + 16 * v161), 0, *(unsigned int *)(a1 + 2760), (*(_DWORD *)(a1 + 2760) * v172++));
            v171 += 24;
          }
          while (24 * v7 != v171);
        }
        ++v161;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1872) - *(void *)(a1 + 1864)) >> 3) > v161);
    }
    if (!*(unsigned char *)(a1 + 1348)) {
      goto LABEL_257;
    }
    uint64_t v173 = *(int *)(a1 + 1920);
    uint64_t v174 = *(void *)(a1 + 1384);
    uint64_t v175 = *(void *)(a1 + 184);
    long long v176 = operator new(8uLL);
    long long __p = v176;
    *long long v176 = v294;
    *(void *)&long long __src = v176 + 1;
    *((void *)&__src + 1) = v176 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v175 + 56))(&v304, v175, &__p);
    uint64_t v177 = (uint64_t *)(v174 + 32 * v173 + 24);
    unint64_t v178 = v304;
    uint64_t v304 = 0;
    uint64_t v179 = *v177;
    *uint64_t v177 = (uint64_t)v178;
    if (v179) {
      (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
    }
    unint64_t v180 = v304;
    uint64_t v304 = 0;
    if (v180) {
      (*(void (**)(void *))(*(void *)v180 + 8))(v180);
    }
    if (__p)
    {
      *(void *)&long long __src = __p;
      operator delete(__p);
    }
    if (*(char *)(a1 + 1671) < 0)
    {
      if (!*(void *)(a1 + 1656)) {
        goto LABEL_249;
      }
    }
    else if (!*(unsigned char *)(a1 + 1671))
    {
      goto LABEL_249;
    }
    uint64_t v181 = *(void *)(a1 + 184);
    uint64_t v182 = operator new(8uLL);
    long long __p = v182;
    void *v182 = v294;
    *(void *)&long long __src = v182 + 1;
    *((void *)&__src + 1) = v182 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v181 + 56))(&v304, v181, &__p);
    uint64_t v183 = *(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1928);
    uint64_t v184 = v304;
    uint64_t v304 = 0;
    uint64_t v185 = *(void *)(v183 + 24);
    *(void *)(v183 + 24) = v184;
    if (v185) {
      (*(void (**)(uint64_t))(*(void *)v185 + 8))(v185);
    }
    uint64_t v186 = v304;
    uint64_t v304 = 0;
    if (v186) {
      (*(void (**)(void *))(*(void *)v186 + 8))(v186);
    }
    if (__p)
    {
      *(void *)&long long __src = __p;
      operator delete(__p);
    }
LABEL_249:
    if ((int)v7 >= 1)
    {
      uint64_t v187 = 0;
      uint64_t v188 = 8;
      while (1)
      {
        uint64_t v189 = *v177;
        uint64_t v190 = *(void *)(*(void *)(*(void *)(a1 + 2736) + v188) - 16);
        (*(void (**)(uint64_t, void))(*(void *)v190 + 112))(v190, 0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v189 + 104))(v189, v187);
        if ((*(char *)(a1 + 1671) & 0x80000000) == 0) {
          break;
        }
        if (*(void *)(a1 + 1656)) {
          goto LABEL_255;
        }
LABEL_256:
        ++v187;
        v188 += 24;
        if (v7 == v187) {
          goto LABEL_257;
        }
      }
      if (!*(unsigned char *)(a1 + 1671)) {
        goto LABEL_256;
      }
LABEL_255:
      uint64_t v191 = *(void *)(*(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1920) + 24);
      float v192 = 1.0 / ((*(float (**)(uint64_t, uint64_t))(*(void *)v191 + 112))(v191, v187) + 1.0);
      uint64_t v193 = *(void *)(*(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1928) + 24);
      (*(void (**)(uint64_t, uint64_t, float))(*(void *)v193 + 104))(v193, v187, v192);
      goto LABEL_256;
    }
LABEL_257:
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v304, v293, a1 + 2664, (long long *)&__p);
    if (SHIBYTE(__src) < 0) {
      operator delete(__p);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1281, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Inputs:", 7);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      uint64_t v194 = *(void *)(a1 + 1384);
      uint64_t v195 = *(void *)(a1 + 1392);
      while (v194 != v195)
      {
        if (*(char *)(v194 + 23) < 0)
        {
          uint64_t v197 = *(void *)(v194 + 8);
          if (v197 == 8)
          {
            clockid_t v196 = *(void **)v194;
            goto LABEL_276;
          }
          if (v197 != 18
            || (**(void **)v194 == 0x74756F5F76657270
              ? (BOOL v198 = *(void *)(*(void *)v194 + 8) == 0x656B6F745F747570)
              : (BOOL v198 = 0),
                v198 ? (BOOL v199 = *(unsigned __int16 *)(*(void *)v194 + 16) == 29550) : (BOOL v199 = 0),
                !v199))
          {
LABEL_277:
            if (kaldi::g_kaldi_verbose_level >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1286, 3);
              uint64_t v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              int v201 = *(char *)(v194 + 23);
              if (v201 >= 0) {
                uint64_t v202 = v194;
              }
              else {
                uint64_t v202 = *(void *)v194;
              }
              if (v201 >= 0) {
                uint64_t v203 = *(unsigned __int8 *)(v194 + 23);
              }
              else {
                uint64_t v203 = *(void *)(v194 + 8);
              }
              v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, v202, v203);
              v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v194 + 24), &v313);
              if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v206 = &v313;
              }
              else {
                int v206 = (std::string *)v313.__r_.__value_.__r.__words[0];
              }
              if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v207 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v207 = v313.__r_.__value_.__l.__size_;
              }
              int v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)v206, v207);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)" [ ", 3);
              (*(void (**)(void, void))(**(void **)(v194 + 24) + 112))(*(void *)(v194 + 24), 0);
              uint64_t v209 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**(void **)(v194 + 24) + 112))(*(void *)(v194 + 24), 1);
              uint64_t v210 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)" ", 1);
              (*(void (**)(void, uint64_t))(**(void **)(v194 + 24) + 112))(*(void *)(v194 + 24), 2);
              uint64_t v211 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)" ...", 4);
LABEL_313:
              if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v313.__r_.__value_.__l.__data_);
              }
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              goto LABEL_316;
            }
            goto LABEL_316;
          }
        }
        else
        {
          if (*(unsigned char *)(v194 + 23) != 18)
          {
            clockid_t v196 = (void *)v194;
            if (*(unsigned char *)(v194 + 23) != 8) {
              goto LABEL_277;
            }
LABEL_276:
            if (*v196 != 0x6E6F697469736F70) {
              goto LABEL_277;
            }
            goto LABEL_299;
          }
          if (*(void *)v194 != 0x74756F5F76657270
            || *(void *)(v194 + 8) != 0x656B6F745F747570
            || *(_WORD *)(v194 + 16) != 29550)
          {
            goto LABEL_277;
          }
        }
LABEL_299:
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1284, 3);
          int v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
          int v215 = *(char *)(v194 + 23);
          if (v215 >= 0) {
            uint64_t v216 = v194;
          }
          else {
            uint64_t v216 = *(void *)v194;
          }
          if (v215 >= 0) {
            uint64_t v217 = *(unsigned __int8 *)(v194 + 23);
          }
          else {
            uint64_t v217 = *(void *)(v194 + 8);
          }
          uint64_t v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, v216, v217);
          unint64_t v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)": ", 2);
          kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v194 + 24), &v313);
          if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v220 = &v313;
          }
          else {
            uint64_t v220 = (std::string *)v313.__r_.__value_.__r.__words[0];
          }
          if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v221 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v221 = v313.__r_.__value_.__l.__size_;
          }
          uint64_t v222 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)v220, v221);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)" [ ", 3);
          (*(void (**)(void, void))(**(void **)(v194 + 24) + 112))(*(void *)(v194 + 24), 0);
          unint64_t v223 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)" ...", 4);
          goto LABEL_313;
        }
LABEL_316:
        v194 += 32;
      }
    }
    uint64_t v224 = *(void *)(a1 + 184);
    long long __p = 0;
    long long __src = 0uLL;
    v225 = (void *)(a1 + 1432);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)v224 + 112))(v224, a1 + 1384, a1 + 1816, &__p, a1 + 1432);
    v313.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v313);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1293, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Outputs:", 8);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      uint64_t v227 = *(void *)(a1 + 1440);
      uint64_t v228 = *(void *)(a1 + 1432);
      if (v227 != v228)
      {
        uint64_t v229 = 0;
        unint64_t v230 = 0;
        int v231 = kaldi::g_kaldi_verbose_level;
        do
        {
          if (v231 >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1295, 3);
            clockid_t v232 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            uint64_t v233 = *(void *)(a1 + 1816) + v229;
            int v234 = *(char *)(v233 + 23);
            if (v234 >= 0) {
              uint64_t v235 = *(void *)(a1 + 1816) + v229;
            }
            else {
              uint64_t v235 = *(void *)v233;
            }
            if (v234 >= 0) {
              uint64_t v236 = *(unsigned __int8 *)(v233 + 23);
            }
            else {
              uint64_t v236 = *(void *)(v233 + 8);
            }
            v237 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, v235, v236);
            unint64_t v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v237, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(*v225 + 8 * v230), &v313);
            if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v239 = &v313;
            }
            else {
              unint64_t v239 = (std::string *)v313.__r_.__value_.__r.__words[0];
            }
            if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v240 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v240 = v313.__r_.__value_.__l.__size_;
            }
            uint64_t v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)v239, v240);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)" [ ", 3);
            (*(void (**)(void, void))(**(void **)(*v225 + 8 * v230) + 112))(*(void *)(*v225 + 8 * v230), 0);
            unint64_t v242 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)" ", 1);
            (*(void (**)(void, uint64_t))(**(void **)(*v225 + 8 * v230) + 112))(*(void *)(*v225 + 8 * v230), 1);
            uint64_t v243 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)" ", 1);
            (*(void (**)(void, uint64_t))(**(void **)(*v225 + 8 * v230) + 112))(*(void *)(*v225 + 8 * v230), 2);
            uint64_t v244 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)" ...", 4);
            if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v313.__r_.__value_.__l.__data_);
            }
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            int v231 = kaldi::g_kaldi_verbose_level;
            uint64_t v227 = *(void *)(a1 + 1440);
            uint64_t v228 = *(void *)(a1 + 1432);
          }
          ++v230;
          v229 += 24;
        }
        while (v230 < (v227 - v228) >> 3);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v304, v226);
    if (*(void *)(a1 + 1872) != *(void *)(a1 + 1864))
    {
      unint64_t v245 = 0;
      int64x2_t v296 = vdupq_n_s64(1uLL);
      do
      {
        int v246 = 0;
        uint64_t v247 = *(void *)(a1 + 1432);
        uint64_t v248 = *(int *)(a1 + 1892) + (uint64_t)(int)v245;
        uint64_t v304 = 0;
        long long v305 = 0uLL;
        while ((v294 & ~((int)v294 >> 31)) != v246)
        {
          uint64_t v249 = *(void *)(a1 + 184);
          uint64_t v250 = *(int *)(a1 + 2760);
          long long v251 = (int64x2_t *)operator new(0x18uLL);
          v313.__r_.__value_.__l.__size_ = (std::string::size_type)&v251[1].u64[1];
          v313.__r_.__value_.__r.__words[2] = (std::string::size_type)&v251[1].u64[1];
          int64x2_t *v251 = v296;
          v251[1].i64[0] = v250;
          v313.__r_.__value_.__r.__words[0] = (std::string::size_type)v251;
          (*(void (**)(void ***__return_ptr, uint64_t, std::string *))(*(void *)v249 + 56))(&p_p, v249, &v313);
          uint64_t v252 = v305;
          if ((unint64_t)v305 >= *((void *)&v305 + 1))
          {
            uint64_t v255 = (uint64_t)(v305 - (void)v304) >> 3;
            if ((unint64_t)(v255 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v256 = (uint64_t)(*((void *)&v305 + 1) - (void)v304) >> 2;
            if (v256 <= v255 + 1) {
              unint64_t v256 = v255 + 1;
            }
            if (*((void *)&v305 + 1) - (void)v304 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v257 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v257 = v256;
            }
            *((void *)&v310 + 1) = (char *)&v305 + 8;
            if (v257) {
              unint64_t v258 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v305 + 8, v257);
            }
            else {
              unint64_t v258 = 0;
            }
            unint64_t v259 = (void ***)&v258[8 * v255];
            long long __p = v258;
            *(void *)&long long __src = v259;
            *(void *)&long long v310 = &v258[8 * v257];
            uint64_t v260 = p_p;
            p_p = 0;
            *unint64_t v259 = v260;
            *((void *)&__src + 1) = v259 + 1;
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v304, &__p);
            uint64_t v254 = v305;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&__p);
          }
          else
          {
            uint64_t v253 = p_p;
            p_p = 0;
            *(void *)long long v305 = v253;
            uint64_t v254 = v252 + 8;
          }
          *(void *)&long long v305 = v254;
          unint64_t v261 = p_p;
          p_p = 0;
          if (v261) {
            (*((void (**)(void **))*v261 + 1))(v261);
          }
          if (v313.__r_.__value_.__r.__words[0])
          {
            v313.__r_.__value_.__l.__size_ = v313.__r_.__value_.__r.__words[0];
            operator delete(v313.__r_.__value_.__l.__data_);
          }
          int v262 = *(_DWORD *)(a1 + 2760);
          uint64_t v263 = (v262 * v246++);
          (*(void (**)(void, void, uint64_t, void, void))(**(void **)(v305 - 8) + 72))(*(void *)(v305 - 8), *(void *)(v247 + 8 * v248), v263, (v262 * v246), 0);
        }
        if ((int)v294 >= 1)
        {
          uint64_t v264 = 0;
          do
          {
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((void *)(*(void *)(*(void *)(a1 + 2736) + 24 * v264) + 16 * v245), (uint64_t *)v304 + v264);
            ++v264;
          }
          while (v264 != v294);
        }
        long long __p = &v304;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        ++v245;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1872) - *(void *)(a1 + 1864)) >> 3) > v245);
    }
    if (!*(unsigned char *)(a1 + 1339) && !*(unsigned char *)(a1 + 1340))
    {
      uint64_t v291 = *(void *)(*(void *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v291 + 32))(v291, v292);
LABEL_371:
      if (!*(unsigned char *)(a1 + 1948))
      {
LABEL_381:
        if (*(unsigned char *)(a1 + 1348) && (int)v294 >= 1)
        {
          uint64_t v279 = 0;
          do
          {
            uint64_t v280 = *(void *)(*(void *)(a1 + 2736) + v279 + 8);
            uint64_t v282 = *(void *)(v280 - 16);
            v281 = (uint64_t *)(v280 - 16);
            (*(void (**)(void **__return_ptr))(*(void *)v282 + 16))(&__p);
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(v281, (uint64_t *)&__p);
            unint64_t v283 = __p;
            long long __p = 0;
            if (v283) {
              (*(void (**)(void *))(*(void *)v283 + 8))(v283);
            }
            uint64_t v284 = *v281;
            float v285 = (*(float (**)(uint64_t, void))(*(void *)v284 + 112))(v284, 0);
            (*(void (**)(uint64_t, void, float))(*(void *)v284 + 104))(v284, 0, v285 + 1.0);
            v279 += 24;
          }
          while (24 * v294 != v279);
        }
        goto LABEL_387;
      }
      long long v305 = 0uLL;
      *(void *)&long long v306 = 0;
      uint64_t v304 = off_26C2111C8;
      uint64_t v268 = *(int *)(a1 + 1932);
      uint64_t v269 = *(void *)(a1 + 1432);
      (*(void (**)(void, void **))(**(void **)(v269 + 8 * v268) + 40))(*(void *)(v269 + 8 * v268), &v304);
      uint64_t v270 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v269 + 8 * v268) + 152))(*(void *)(v269 + 8 * v268), 2);
      kaldi::CuMatrix<float>::Resize(a1 + 1976, v294, v270, 1u, 0);
      int v272 = v270 * v294;
      long long __src = 0uLL;
      *(void *)&long long v310 = 0;
      long long __p = &off_26C209728;
      if ((v270 * v294) > DWORD2(v305)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v271);
      }
      *(void *)&long long __src = v305;
      DWORD2(__src) = v270 * v294;
      *(void *)&long long v310 = v306;
      kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1 + 1976, (uint64_t)&__p);
      if (*(int *)(a1 + 1936) >= 2)
      {
        int v273 = 1;
        int v274 = v270 * v294;
        do
        {
          kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, v294, v270, 1u, 0, 0);
          kaldi::CuSubVector<float>::CuSubVector(&v313, (uint64_t)&v304, v274, v272, v275);
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&__p, (uint64_t)&v313);
          kaldi::CuMatrixBase<float>::AddMat(a1 + 1976, (uint64_t)&__p, 111, v276, v277, 1.0, 1.0);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          ++v273;
          v274 += v272;
        }
        while (v273 < *(_DWORD *)(a1 + 1936));
      }
      int v278 = *(unsigned __int8 *)(a1 + 1344);
      if (!*(unsigned char *)(a1 + 1343))
      {
        if (!*(unsigned char *)(a1 + 1344))
        {
LABEL_380:
          kaldi::CuVector<float>::~CuVector(&v304);
          goto LABEL_381;
        }
        int v278 = 1;
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 1976, 0, *(_DWORD *)(a1 + 1996), (const char *)*(unsigned __int8 *)(a1 + 1343), v270 - v278 - *(unsigned __int8 *)(a1 + 1343));
      kaldi::CuMatrix<float>::operator=(a1 + 1976, (uint64_t)&__p);
      long long __p = off_26C2096F8;
      long long __src = 0u;
      long long v310 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      goto LABEL_380;
    }
    long long v306 = 0u;
    long long v305 = 0u;
    uint64_t v304 = off_26C211198;
    char v307 = 0;
    uint64_t v265 = *(void *)(*(void *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
    (*(void (**)(uint64_t, void **))(*(void *)v265 + 32))(v265, &v304);
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v313, v293, a1 + 2672, (long long *)&__p);
    if (SHIBYTE(__src) < 0) {
      operator delete(__p);
    }
    long long v267 = *(uint64_t **)(a1 + 2552);
    if (!v267)
    {
      if (!*(unsigned char *)(a1 + 1339))
      {
        if (*(unsigned char *)(a1 + 1340))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1327);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        goto LABEL_370;
      }
      long long v267 = (uint64_t *)(a1 + 960);
    }
    kaldi::nnet1::Nnet::Feedforward(v267, (uint64_t)&v304, v292, -1, 0);
LABEL_370:
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v313, v266);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v304);
    goto LABEL_371;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1361, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Iterating over batch, batch size: ", 34);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (v294)
  {
    unint64_t v12 = 0;
    uint64_t v295 = (uint64_t *)(a1 + 1384);
    while (1)
    {
      BOOL v14 = v12 < *(unsigned int *)(a2 + 20) && *(_DWORD *)(a2 + 16) != 0;
      if (*(unsigned char *)(a1 + 1341))
      {
        if (!v14) {
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v11);
        }
        uint64_t v15 = *(void *)(*(void *)(a1 + 1408) + 32 * *(int *)(a1 + 1900) + 24);
        (*(void (**)(uint64_t, void, float))(*(void *)v15 + 104))(v15, 0, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v12));
        uint64_t v16 = *(void *)(*(void *)(a1 + 1408) + 32 * *(int *)(a1 + 1904) + 24);
        uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 2736) + 24 * v12 + 8) - 16);
        (*(void (**)(uint64_t, void))(*(void *)v17 + 112))(v17, 0);
        if (*(unsigned char *)(a1 + 1351)) {
          float v19 = 0.0;
        }
        else {
          float v19 = 1.0;
        }
        (*(void (**)(uint64_t, void, float))(*(void *)v16 + 104))(v16, 0, v18 - v19);
        long long __p = 0;
        long long __src = 0uLL;
        uint64_t v20 = *(void *)(a1 + 168);
        if (*(char *)(a1 + 1743) < 0) {
          std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(a1 + 1720), *(void *)(a1 + 1728));
        }
        else {
          std::string v313 = *(std::string *)(a1 + 1720);
        }
        uint64_t v304 = 0;
        long long v305 = 0uLL;
        p_p = &v304;
        LOBYTE(v298) = 0;
        uint64_t v304 = operator new(0x18uLL);
        *(void *)&long long v305 = v304;
        *((void *)&v305 + 1) = (char *)v304 + 24;
        *(void *)&long long v305 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v305 + 8, (long long *)&v313, &v314, (std::string *)v304);
        p_p = 0;
        uint64_t v298 = 0;
        uint64_t v299 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(void *)v20 + 112))(v20, a1 + 1408, &v304, &p_p, &__p);
        v301[0] = (void **)&p_p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v301);
        p_p = &v304;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
        if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v313.__r_.__value_.__l.__data_);
        }
        uint64_t v22 = *v295;
        uint64_t v23 = *(void *)__p;
        *(void *)long long __p = 0;
        uint64_t v24 = *(void *)(v22 + 24);
        *(void *)(v22 + 24) = v23;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        uint64_t v304 = &__p;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
      }
      else
      {
        if (!v14) {
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v11);
        }
        uint64_t v21 = *(void *)(*(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1916) + 24);
        (*(void (**)(uint64_t, void, float))(*(void *)v21 + 104))(v21, 0, *(float *)(*(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v12));
      }
      if (*(void *)(a1 + 1872) != *(void *)(a1 + 1864))
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 2736) + 24 * v12)
                                                                    + v25)
                                                      + 16))(&__p);
          uint64_t v27 = *(void *)(a1 + 1384) + 32 * ((int)v26 + *(_DWORD *)(a1 + 1896));
          std::vector<int>::pointer v28 = __p;
          long long __p = 0;
          uint64_t v29 = *(void *)(v27 + 24);
          *(void *)(v27 + 24) = v28;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          unint64_t v30 = __p;
          long long __p = 0;
          if (v30) {
            (*(void (**)(void *))(*(void *)v30 + 8))(v30);
          }
          ++v26;
          v25 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1872) - *(void *)(a1 + 1864)) >> 3) > v26);
      }
      if (!*(unsigned char *)(a1 + 1348)) {
        goto LABEL_51;
      }
      (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 2736) + 24 * v12 + 8)
                                                                - 16)
                                                  + 16))(&__p);
      uint64_t v31 = *(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1920);
      unint64_t v32 = __p;
      long long __p = 0;
      uint64_t v33 = *(void *)(v31 + 24);
      *(void *)(v31 + 24) = v32;
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      int v34 = __p;
      long long __p = 0;
      if (v34) {
        (*(void (**)(void *))(*(void *)v34 + 8))(v34);
      }
      if (*(char *)(a1 + 1671) < 0) {
        break;
      }
      if (*(unsigned char *)(a1 + 1671)) {
        goto LABEL_48;
      }
LABEL_49:
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1390, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Position input: ", 16);
        uint64_t v38 = *(void *)(*(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1920) + 24);
        (*(void (**)(uint64_t, void))(*(void *)v38 + 112))(v38, 0);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
LABEL_51:
      std::string::basic_string[abi:ne180100]<0>(&v304, &byte_20D5A22AE);
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v293, a1 + 2664, (long long *)&v304);
      if (SHIBYTE(v305) < 0) {
        operator delete(v304);
      }
      uint64_t v39 = *(void *)(a1 + 184);
      uint64_t v304 = 0;
      long long v305 = 0uLL;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **, uint64_t))(*(void *)v39 + 112))(v39, v295, a1 + 1816, &v304, a1 + 1432);
      v313.__r_.__value_.__r.__words[0] = (std::string::size_type)&v304;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v313);
      kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v40);
      if (*(void *)(a1 + 1872) != *(void *)(a1 + 1864))
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 1432)
                                                                    + 8 * ((int)v42 + *(_DWORD *)(a1 + 1892)))
                                                      + 16))(&__p);
          std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((void *)(*(void *)(*(void *)(a1 + 2736) + 24 * v12) + v41), (uint64_t *)&__p);
          int64_t v43 = __p;
          long long __p = 0;
          if (v43) {
            (*(void (**)(void *))(*(void *)v43 + 8))(v43);
          }
          ++v42;
          v41 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1872) - *(void *)(a1 + 1864)) >> 3) > v42);
      }
      v301[1] = 0;
      uint64_t v302 = 0;
      uint64_t v303 = 0;
      v301[0] = (void **)off_26C2111C8;
      if (*(unsigned char *)(a1 + 1339) || *(unsigned char *)(a1 + 1340))
      {
        long long v305 = 0u;
        long long v306 = 0u;
        uint64_t v304 = off_26C211198;
        char v307 = 0;
        *(_OWORD *)&v313.__r_.__value_.__r.__words[1] = 0u;
        long long v314 = 0u;
        v313.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C211198;
        char v315 = 0;
        uint64_t v44 = *(void *)(*(void *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
        (*(void (**)(uint64_t, void **))(*(void *)v44 + 32))(v44, &v304);
        uint64_t v45 = v292;
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
        kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&p_p, v293, a1 + 2672, (long long *)&__p);
        if (SHIBYTE(__src) < 0) {
          operator delete(__p);
        }
        uint64_t v49 = *(uint64_t **)(a1 + 2552);
        if (v49 || (uint64_t v49 = (uint64_t *)(a1 + 960), *(unsigned char *)(a1 + 1339)))
        {
          kaldi::nnet1::Nnet::Feedforward(v49, (uint64_t)&v304, (uint64_t)&v313, -1, 0);
        }
        else if (*(unsigned char *)(a1 + 1340))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1415);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        if (!HIDWORD(v313.__r_.__value_.__r.__words[2])) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v48);
        }
        *(void *)&long long __src = v313.__r_.__value_.__l.__size_;
        long long __p = &off_26C209728;
        *((void *)&__src + 1) = LODWORD(v313.__r_.__value_.__r.__words[2]);
        *(void *)&long long v310 = *((void *)&v314 + 1);
        kaldi::CuVector<float>::operator=((uint64_t)v301, (uint64_t)&__p, v46, v47, v48);
        kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&p_p, v50);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v313);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v304);
      }
      else
      {
        uint64_t v74 = *(void *)(*(void *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
        (*(void (**)(uint64_t, void ***))(*(void *)v74 + 40))(v74, v301);
        uint64_t v45 = v292;
      }
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1423, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"readout layer size: ", 20);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
      uint64_t v53 = v302;
      if (*(_DWORD *)(v45 + 16) < (int)v302) {
        kaldi::CuMatrix<float>::Resize(v45, v294, v302, 2u, 0);
      }
      if (v12 >= *(unsigned int *)(v45 + 20)) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v52);
      }
      unsigned int v54 = *(_DWORD *)(v45 + 16);
      uint64_t v55 = *(void *)(v45 + 32);
      *(void *)&long long __src = *(void *)(v45 + 8) + 4 * *(_DWORD *)(v45 + 24) * (int)v12;
      long long __p = &off_26C209728;
      *((void *)&__src + 1) = v54;
      *(void *)&long long v310 = v55;
      kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)v301, v53, v51, v52);
      if (*(unsigned char *)(a1 + 1948))
      {
        long long __src = 0u;
        long long v310 = 0u;
        long long __p = off_26C211198;
        char v311 = 0;
        uint64_t v56 = *(void *)(*(void *)(a1 + 1432) + 8 * *(int *)(a1 + 1932));
        (*(void (**)(uint64_t, void **))(*(void *)v56 + 32))(v56, &__p);
        int v58 = *(unsigned __int8 *)(a1 + 1343);
        int v59 = DWORD2(__src) - *(unsigned __int8 *)(a1 + 1344);
        uint64_t v60 = (v59 - v58);
        if (*(_DWORD *)(a1 + 1996) != v294 || (unint64_t v61 = v294, *(_DWORD *)(a1 + 1992) != v60))
        {
          kaldi::CuMatrix<float>::Resize(a1 + 1976, v294, v60, 2u, 0);
          unint64_t v61 = *(unsigned int *)(a1 + 1996);
        }
        if (v61 <= v12) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v57);
        }
        unsigned int v62 = *(_DWORD *)(a1 + 1992);
        uint64_t v63 = *(void *)(a1 + 2008);
        *(void *)&long long v305 = *(void *)(a1 + 1984) + 4 * *(_DWORD *)(a1 + 2000) * (int)v12;
        uint64_t v304 = &off_26C209728;
        *((void *)&v305 + 1) = v62;
        *(void *)&long long v306 = v63;
        if (!HIDWORD(__src)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v57);
        }
        uint64_t v298 = __src;
        p_p = (void **)&off_26C209728;
        uint64_t v299 = DWORD2(__src);
        uint64_t v300 = *((void *)&v310 + 1);
        kaldi::CuSubVector<float>::CuSubVector(&v313, (uint64_t)&p_p, v58, v59, v57);
        kaldi::CuVectorBase<float>::CopyFromVec(&v304, (uint64_t)&v313, v64, v65, v66);
        if (*(int *)(a1 + 1936) >= 2)
        {
          int v68 = 1;
          do
          {
            if (v12 >= *(unsigned int *)(a1 + 1996)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
            }
            unsigned int v69 = *(_DWORD *)(a1 + 1992);
            uint64_t v70 = *(void *)(a1 + 2008);
            *(void *)&long long v305 = *(void *)(a1 + 1984) + 4 * *(_DWORD *)(a1 + 2000) * (int)v12;
            uint64_t v304 = &off_26C209728;
            *((void *)&v305 + 1) = v69;
            *(void *)&long long v306 = v70;
            if (HIDWORD(__src) <= v68) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
            }
            uint64_t v298 = __src + 4 * (int)v310 * v68;
            p_p = (void **)&off_26C209728;
            uint64_t v299 = DWORD2(__src);
            uint64_t v300 = *((void *)&v310 + 1);
            kaldi::CuSubVector<float>::CuSubVector(&v313, (uint64_t)&p_p, v58, v59, v67);
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v304, (uint64_t)&v313, v71, v72, v73, 1.0, 1.0);
            ++v68;
          }
          while (v68 < *(_DWORD *)(a1 + 1936));
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      }
      kaldi::CuVector<float>::~CuVector(v301);
      if (++v12 == v294) {
        goto LABEL_381;
      }
    }
    if (!*(void *)(a1 + 1656)) {
      goto LABEL_49;
    }
LABEL_48:
    uint64_t v35 = *(void *)(*(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1920) + 24);
    float v36 = 1.0 / ((*(float (**)(uint64_t, void))(*(void *)v35 + 112))(v35, 0) + 1.0);
    uint64_t v37 = *(void *)(*(void *)(a1 + 1384) + 32 * *(int *)(a1 + 1928) + 24);
    (*(void (**)(uint64_t, void, float))(*(void *)v37 + 104))(v37, 0, v36);
    goto LABEL_49;
  }
LABEL_387:
  if (*(unsigned char *)(a1 + 1948))
  {
    int v286 = *(_DWORD *)(a1 + 1936);
    if (v286 >= 2)
    {
      float v287 = 1.0 / (double)v286;
      kaldi::CuMatrixBase<float>::Scale(a1 + 1976, v287);
    }
    long long __p = 0;
    long long __src = 0uLL;
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 1976, (int *)&__p, v9, v10, v11);
    std::vector<int>::pointer begin = *(std::vector<int>::pointer *)(a1 + 1952);
    uint64_t v289 = (*(void *)(a1 + 1960) - (void)begin) >> 2;
    if (__p != v289)
    {
      unint64_t v290 = (std::vector<int> *)(a1 + 1952);
      std::vector<int>::resize(v290, (int)__p);
      std::vector<int>::pointer begin = v290->__begin_;
      LODWORD(v289) = __p;
    }
    memcpy(begin, (const void *)__src, 4 * (int)v289);
    if ((void)__src) {
      free((void *)__src);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v312, v8);
}

void sub_20CE9BFE8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20CE9C388);
}

void sub_20CE9C014(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  if (a47) {
    free(a47);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v47 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_20CE9C028(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CE9C388);
}

void sub_20CE9C044()
{
}

void sub_20CE9C064()
{
}

void sub_20CE9C080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  a40 = &a46;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a40);
  JUMPOUT(0x20CE9C380);
}

void sub_20CE9C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a46);
  a46 = (void **)&a40;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a46);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240), v48);
  _Unwind_Resume(a1);
}

void sub_20CE9C090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void sub_20CE9C098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

void sub_20CE9C0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a46);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a40, v48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240), v49);
  _Unwind_Resume(a1);
}

void sub_20CE9C10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void ***a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  a36 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a30 = (void **)&a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a30);
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  a40 = &a46;
  JUMPOUT(0x20CE9C350);
}

void sub_20CE9C188()
{
}

void sub_20CE9C198(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CE9C1BCLL);
}

void sub_20CE9C1B0(uint64_t a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a30, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v40 - 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a40);
  JUMPOUT(0x20CE9C314);
}

void sub_20CE9C1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a46);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240), v48);
  _Unwind_Resume(a1);
}

void sub_20CE9C1E0(_Unwind_Exception *a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46) {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(a46);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_20CE9C1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

void sub_20CE9C20C()
{
}

void sub_20CE9C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    JUMPOUT(0x20CE9C224);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v45 - 240));
  _Unwind_Resume(a1);
}

void sub_20CE9C22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  *(void *)(v40 - 192) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 192));
  JUMPOUT(0x20CE9C2A0);
}

void sub_20CE9C24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t *a46)
{
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a46);
  a46 = &a40;
  JUMPOUT(0x20CE9C350);
}

void sub_20CE9C280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a46);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a40, v47);
  JUMPOUT(0x20CE9C380);
}

void sub_20CE9C2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  uint64_t v41 = *(void **)(v40 - 192);
  if (v41)
  {
    *(void *)(v40 - 184) = v41;
    operator delete(v41);
  }
  *(void *)(v40 - 192) = &a40;
  JUMPOUT(0x20CE9C350);
}

void sub_20CE9C304()
{
}

void sub_20CE9C31C()
{
}

void sub_20CE9C358(_Unwind_Exception *a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46) {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(a46);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240), a2);
  _Unwind_Resume(a1);
}

void sub_20CE9C370()
{
}

void *std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::shared_ptr[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

double kaldi::quasar::Encdec::Finish(kaldi::quasar::Encdec *this, clockid_t a2)
{
  double result = *((double *)this + 325) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 320);
  *((double *)this + 325) = result;
  return result;
}

uint64_t kaldi::quasar::Encdec::ConstrainSoftmax(uint64_t result, unsigned __int8 *a2, int a3, int a4, uint64_t *a5, int **a6, void *a7)
{
  *(void *)&long long v51 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 1338))
  {
    uint64_t v11 = result;
    if (*(unsigned char *)(result + 1339))
    {
      double result = kaldi::quasar::Shortlist::ConstrainSoftmax(result + 2024, a2, *(_DWORD *)(result + 732) - 1, *(_DWORD *)(result + 736) - 1, a3, a4, a5, result + 960, a6, a7);
      *(void *)(v11 + 2552) = result;
      *(unsigned char *)(v11 + 1342) = result != 0;
    }
    else
    {
      int v12 = *(_DWORD *)(result + 732) - 1;
      int v13 = *(_DWORD *)(result + 736) - 1;
      if (*(unsigned char *)(result + 1340))
      {
        if (kaldi::quasar::Shortlist::MapShortlist(result + 2024, a2, v12, v13, a3, a4, a5, a6, a7, 1))
        {
          long long __p = 0;
          unint64_t v42 = 0;
          uint64_t v43 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v11 + 2136), *(void *)(v11 + 2144), (uint64_t)(*(void *)(v11 + 2144) - *(void *)(v11 + 2136)) >> 2);
          v14.n128_f64[0] = kaldi::Matrix<float>::Matrix((uint64_t)v40);
          uint64_t v15 = *(void *)(v11 + 200);
          uint64_t v37 = 0;
          unint64_t v38 = 0;
          unint64_t v39 = 0;
          if (*(_DWORD *)(v11 + 1908))
          {
            uint64_t v16 = __p;
            if (v42 != __p)
            {
              unint64_t v17 = (v42 - (unsigned char *)__p) >> 2;
              if (v17 <= 1) {
                unint64_t v17 = 1;
              }
              do
              {
                *v16++ += *(_DWORD *)(v11 + 1908);
                --v17;
              }
              while (v17);
            }
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, void **, void, __n128))(*(void *)v15 + 16))(&v50, v15, &__p, 0, v14);
          if (*(char *)(v11 + 1791) < 0) {
            std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v11 + 1768), *(void *)(v11 + 1776));
          }
          else {
            std::string v35 = *(std::string *)(v11 + 1768);
          }
          std::string::size_type v18 = v50.__r_.__value_.__r.__words[0];
          v50.__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v36 = v18;
          unint64_t v19 = v38;
          if (v38 >= v39)
          {
            uint64_t v23 = (uint64_t)(v38 - v37) >> 5;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v25 = v39 - v37;
            if ((uint64_t)(v39 - v37) >> 4 > v24) {
              unint64_t v24 = v25 >> 4;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            clockid_t v48 = &v39;
            uint64_t v27 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v39, v26);
            std::vector<int>::pointer v28 = &v27[4 * v23];
            uint64_t v44 = v27;
            uint64_t v45 = v28;
            clockid_t v47 = &v27[4 * v29];
            long long v30 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
            v28[2] = v35.__r_.__value_.__r.__words[2];
            *(_OWORD *)std::vector<int>::pointer v28 = v30;
            memset(&v35, 0, sizeof(v35));
            std::string::size_type v31 = v36;
            std::string::size_type v36 = 0;
            v28[3] = v31;
            uint64_t v46 = (char *)(v28 + 4);
            std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v37, &v44);
            unint64_t v22 = v38;
            std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v44);
          }
          else
          {
            long long v20 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
            *(void *)(v38 + 16) = *((void *)&v35.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v19 = v20;
            memset(&v35, 0, sizeof(v35));
            std::string::size_type v21 = v36;
            std::string::size_type v36 = 0;
            *(void *)(v19 + 24) = v21;
            unint64_t v22 = v19 + 32;
          }
          unint64_t v38 = v22;
          std::string::size_type v32 = v36;
          std::string::size_type v36 = 0;
          if (v32) {
            (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          std::string::size_type v33 = v50.__r_.__value_.__r.__words[0];
          v50.__r_.__value_.__r.__words[0] = 0;
          if (v33) {
            (*(void (**)(std::string::size_type))(*(void *)v33 + 8))(v33);
          }
          (*(void (**)(void))(**(void **)(v38 - 8) + 80))(*(void *)(v38 - 8));
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          if (*(char *)(v11 + 1815) < 0) {
            std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v11 + 1792), *(void *)(v11 + 1800));
          }
          else {
            std::string v50 = *(std::string *)(v11 + 1792);
          }
          memset(&v35, 0, sizeof(v35));
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v35.__r_.__value_.__l.__size_ = v35.__r_.__value_.__r.__words[0];
          v35.__r_.__value_.__r.__words[2] = v35.__r_.__value_.__r.__words[0] + 24;
          v35.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35.__r_.__value_.__r.__words[2], (long long *)&v50, &v51, (std::string *)v35.__r_.__value_.__l.__data_);
          memset(v34, 0, sizeof(v34));
          (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, uint64_t **))(*(void *)v15 + 112))(v15, &v37, &v35, v34, &v44);
          clockid_t v49 = v34;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
          v34[0] = (void **)&v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v34);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          (*(void (**)(uint64_t, unsigned char *))(*(void *)*v44 + 24))(*v44, v40);
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
          uint64_t v44 = &v37;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
          kaldi::quasar::Shortlist::ConstructNnet(v11 + 2024, (uint64_t)v40);
        }
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44, "ConstrainSoftmax", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1523);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "Map shortlist error!");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
      }
      double result = kaldi::quasar::Shortlist::MapShortlist(result + 2024, a2, v12, v13, a3, a4, a5, a6, a7, 0);
      *(unsigned char *)(v11 + 1342) = result;
    }
  }
  return result;
}

void sub_20CE9C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::GetSoftmaxEosId(kaldi::quasar::Encdec *this)
{
  if (*((unsigned char *)this + 1342)) {
    return *((unsigned int *)this + 540);
  }
  else {
    return (*((_DWORD *)this + 183) - 1);
  }
}

uint64_t kaldi::quasar::Encdec::GetVocabWordIdx(kaldi::quasar::Encdec *this, uint64_t a2)
{
  if (*((unsigned char *)this + 1342)) {
    return *(unsigned int *)(*((void *)this + 267) + 4 * (int)a2);
  }
  return a2;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      uint64_t v5 = this;
    }
    else {
      uint64_t v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v4 >= 0) {
      std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

void kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(void **this)
{
  *this = off_26C210F30;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  uint64_t vars8;

  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(this);
  JUMPOUT(0x2105595E0);
}

fst *fst::LogMessage::LogMessage(fst *a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(void *)(a2 + 8) != 5)
    {
LABEL_12:
      BOOL v9 = 0;
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)a2;
  }
  else
  {
    uint64_t v5 = a2;
    if (v4 != 5) {
      goto LABEL_12;
    }
  }
  int v6 = *(_DWORD *)v5;
  int v7 = *(unsigned __int8 *)(v5 + 4);
  BOOL v9 = v6 == 1096040774 && v7 == 76;
LABEL_13:
  *(unsigned char *)a1 = v9;
  uint64_t v10 = (void *)fst::cerr(a1);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  __n128 v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
  return a1;
}

void fst::LogMessage::~LogMessage(fst::LogMessage *this)
{
  uint64_t v2 = (void *)fst::cerr(this);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*(unsigned char *)this) {
    exit(1);
  }
}

void sub_20CE9CD10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  int v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_20CE9CDA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    std::locale v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    std::locale v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20CE9CE20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf> const*,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  std::locale v4 = a4;
  uint64_t v10 = a4;
  BOOL v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    std::locale v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_20CE9D034(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    BOOL v4 = (void *)*--v3;
    double result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 4);
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20CE9D454(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,std::allocator<kaldi::quasar::MTESNetworkPlan>,kaldi::quasar::ESNetworkConfig &,void>@<X0>(kaldi::quasar::ESNetworkConfig *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  double result = std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::ESNetworkConfig &,std::allocator<kaldi::quasar::MTESNetworkPlan>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20CE9D50C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::ESNetworkConfig &,std::allocator<kaldi::quasar::MTESNetworkPlan>,0>(void *a1, kaldi::quasar::ESNetworkConfig *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26C219380;
  std::allocator<kaldi::quasar::MTESNetworkPlan>::construct[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::ESNetworkConfig &>((int)&v4, (kaldi::quasar::ESNetworkPlan *)(a1 + 3), a2);
  return a1;
}

void sub_20CE9D57C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocator<kaldi::quasar::MTESNetworkPlan>::construct[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::ESNetworkConfig &>(int a1, kaldi::quasar::ESNetworkPlan *this, kaldi::quasar::ESNetworkConfig *a3)
{
  *(void *)this = off_26C210F70;
  return std::string::basic_string[abi:ne180100]<0>((void *)this + 41, &byte_20D5A22AE);
}

void sub_20CE9D684(_Unwind_Exception *a1)
{
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::MTESNetworkPlan::~MTESNetworkPlan(void **this)
{
  *this = off_26C210F70;
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
}

{
  uint64_t vars8;

  *this = off_26C210F70;
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
  JUMPOUT(0x2105595E0);
}

void kaldi::quasar::ComputeEngineItf::CreateZeroedDataFloat16()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "CreateZeroedDataFloat16", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 83);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat16(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CreateCopyFloat16", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 100);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat32(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CreateCopyFloat32", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 103);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::MTESNetworkPlan::Run(uint64_t a1, long long **a2, long long **a3, uint64_t a4, uint64_t *a5)
{
  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

{
  uint64_t vars8;

  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

void kaldi::quasar::ComputeEngineItf::RunFunction()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "RunFunction", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 136);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "RunFunction", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 142);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::quasar::MTESNetworkPlan::prepare_network(uint64_t this)
{
  if ((*(char *)(this + 351) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(this + 351)) {
      return this;
    }
LABEL_5:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "prepare_network", "../engine/common/libquasar/libkaldi/src/nnmt/mt-es-model.h", 40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  if (*(void *)(this + 336)) {
    goto LABEL_5;
  }
  return this;
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    char v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void fst::SymbolTable::SymbolTable(fst::SymbolTable *this)
{
  *(void *)this = off_26C207868;
  operator new();
}

void sub_20CE9DD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v15, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[6].__r_.__value_.__l.__size_;
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_20CE9DDD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

__n128 std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((void *)v6 + 9) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20CE9DF14(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    uint64_t v10 = value;
    uint64_t v12 = (std::string *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        std::string::size_type v21 = (long long *)&a3[a5];
      }
      else
      {
        std::string::size_type v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      std::vector<std::string>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        unint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (long long *)a3, a5);
      uint64_t v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_20CE9E128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>(uint64_t a1, long long *a2, uint64_t a3)
{
  char v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    uint64_t v6 = &v4[a3];
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    char v4 = v6;
  }
  *(void *)(a1 + 16) = v4;
}

void sub_20CE9E1D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *>((uint64_t)&v20, a2, v15, v9);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      unint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_20CE9E320(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20CE9E328(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v15);
  }
}

void sub_20CE9E604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    long long v3 = v1;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 32;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 + 16) = *(void *)(a3 - 16);
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v10 = *(void *)(a3 - 8);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(v8 + 24) = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v4, i - 32);
  }
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20CE9EAD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::shared_ptr[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    long long v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::reverse_iterator<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    kaldi::quasar::ESNetworkPlan *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t kaldi::quasar::ComputeEngineItf::CreateCopyFloat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_20CE9F0FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x210559110](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20CE9F0DCLL);
}

void sub_20CE9F150(_Unwind_Exception *a1)
{
}

void sub_20CE9F2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20CE9F3F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst()
{
}

{
  operator new();
}

void sub_20CE9F46C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_20CE9F500(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_20CE9F628(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Read()
{
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Read()
{
}

void sub_20CE9FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a22);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)std::string::size_type v33 = 0u;
  *(_OWORD *)int v34 = 0u;
  uint64_t v6 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = -1;
  uint64_t v37 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v38 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v38 = (int)fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    goto LABEL_6;
  }
  uint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v32);
  uint64_t v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        uint64_t v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    char v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    char v21 = (void *)fst::cerr(v20);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    std::vector<int>::pointer v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    uint64_t v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  return updated;
}

void sub_20CE9FF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          uint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                  + 24);
      MEMORY[0x210558FE0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x210559500](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_20CEA0330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v6, a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMutableArcIterator()
{
}

void sub_20CEA051C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_20CEA05D4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetValue(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = v4[3];
  int v7 = (int *)(v6 + 16 * v5);
  int v8 = *v7;
  int v9 = v7[1];
  if (v8 != v9) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v8)
  {
    if (!v9)
    {
      uint64_t v10 = *(unint64_t **)(a1 + 16);
      unint64_t v11 = *v10;
LABEL_8:
      *uint64_t v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (!v9)
    {
      unint64_t v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
      *uint64_t v10 = v11;
      goto LABEL_8;
    }
  }
  if (*(float *)(v6 + 16 * v5 + 8) != INFINITY && *(float *)(v6 + 16 * v5 + 8) != 0.0) {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v13 = 0x30FC30007;
  BOOL v14 = a2->n128_u32[0] == v8 && a2->n128_u32[1] == v9;
  if (v14 && a2->n128_u32[3] == *(_DWORD *)(v6 + 16 * v5 + 12)) {
    uint64_t v13 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(v4, a2, v5);
  unsigned __int32 v15 = a2->n128_u32[0];
  unsigned __int32 v16 = a2->n128_u32[1];
  if (a2->n128_u32[0] != v16) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v15)
  {
    if (!v16)
    {
      char v17 = *(unint64_t **)(a1 + 16);
      unint64_t v18 = *v17;
LABEL_26:
      *char v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    char v17 = *(unint64_t **)(a1 + 16);
    unint64_t v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *char v17 = v19;
    if (!v16)
    {
      unint64_t v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *char v17 = v18;
      goto LABEL_26;
    }
  }
  if (a2->n128_f32[2] != INFINITY && a2->n128_f32[2] != 0.0) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v13;
}

__n128 fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(void *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v3 = (__n128 *)(a1[3] + 16 * a3);
  if (!v3->n128_u32[0]) {
    --a1[1];
  }
  if (!v3->n128_u32[1]) {
    --a1[2];
  }
  if (!a2->n128_u32[0]) {
    ++a1[1];
  }
  if (!a2->n128_u32[1]) {
    ++a1[2];
  }
  __n128 result = *a2;
  *uint64_t v3 = *a2;
  return result;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags_()
{
  return 15;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(v4, a2);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MutableArcIterator()
{
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(void *a1)
{
  *a1 = off_26C208C98;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20CEA1120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20CEA121C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_20CEA1300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20CEA142C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = off_26C2088C8;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = off_26C207BB0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_20CEA151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = off_26C208308;
  uint64_t v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = off_26C2088C8;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C2088C8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = off_26C207BB0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v16);
  while (1)
  {
    if (!v16)
    {
      if ((int)v18 >= v17) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v18;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16)) {
      break;
    }
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v16 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState((void *)a1);
    **(float **)(*v5 + 8 * (int)v9) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((void **)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        unint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      unint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else {
      ++v18;
    }
  }
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 8))();
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_20CEA1C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result != a2)
  {
    if (result) {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (a2) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 40) = result;
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result != a2)
  {
    if (result) {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (a2) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 48) = result;
  }
  return result;
}

uint64_t fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 152);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_20CEA1FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  unint64_t v3 = a1[10];
  *(_DWORD *)uint64_t v2 = 2139095040;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + ++*(void *)(result + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = a1[8];
    uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v3 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 10), v10);
    }
    else {
      unint64_t v11 = 0;
    }
    char v12 = &v11[8 * v7];
    char v13 = &v11[8 * v10];
    *(void *)char v12 = v2;
    uint64_t v5 = v12 + 8;
    std::string::size_type v15 = (char *)a1[8];
    uint64_t v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    void *v4 = v2;
    uint64_t v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]()
{
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = a1[5];
  uint64_t v6 = (_OWORD *)a1[4];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[3];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v14 = &v13[16 * v9];
    std::string::size_type v15 = &v13[16 * v12];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    uint64_t v7 = v14 + 16;
    int v17 = (char *)a1[3];
    uint64_t v16 = (char *)a1[4];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[3];
    }
    a1[3] = v14;
    a1[4] = v7;
    a1[5] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    _OWORD *v6 = *(_OWORD *)a2;
    uint64_t v7 = v6 + 1;
  }
  a1[4] = v7;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReadHeader(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 + 24);
  if (v10)
  {
    *(_DWORD *)a5 = *(_DWORD *)v10;
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v10 + 8));
    std::string::operator=((std::string *)(a5 + 32), (const std::string *)(v10 + 32));
    uint64_t v11 = *(void *)(v10 + 88);
    long long v12 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(a5 + 72) = v12;
    *(void *)(a5 + 88) = v11;
  }
  else
  {
    int v13 = fst::FstHeader::Read(a5, (uint64_t)a2, a3, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    std::string::size_type v15 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    uint64_t v16 = (void *)fst::cerr(v15);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"FstImpl::ReadHeader: source: ", 29);
    int v18 = *(char *)(a3 + 23);
    uint64_t v19 = v18 >= 0 ? a3 : *(void *)a3;
    uint64_t v20 = v18 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
    __int16 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", fst_type: ", 12);
    int v23 = *(char *)(a5 + 31);
    uint64_t v24 = v23 >= 0 ? a5 + 8 : *(void *)(a5 + 8);
    uint64_t v25 = v23 >= 0 ? *(unsigned __int8 *)(a5 + 31) : *(void *)(a5 + 16);
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", arc_type: ", 12);
    uint64_t v28 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    int v29 = *(char *)(v28 + 23);
    uint64_t v30 = v29 >= 0 ? v28 : *(void *)v28;
    uint64_t v31 = v29 >= 0 ? *(unsigned __int8 *)(v28 + 23) : *(void *)(v28 + 8);
    std::string::size_type v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", version: ", 11);
    std::string::size_type v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", flags: ", 9);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v34 = *(unsigned __int8 *)(a5 + 31);
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = *(unsigned __int8 *)(a5 + 31);
  }
  else {
    uint64_t v35 = *(void *)(a5 + 16);
  }
  uint64_t v36 = *(unsigned __int8 *)(a1 + 39);
  int v37 = (char)v36;
  if ((v36 & 0x80u) != 0) {
    uint64_t v36 = *(void *)(a1 + 24);
  }
  if (v35 != v36) {
    goto LABEL_40;
  }
  uint64_t v38 = (const void **)(a5 + 8);
  if (v37 >= 0) {
    uint64_t v39 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    uint64_t v39 = *(unsigned __int8 **)(a1 + 16);
  }
  if ((v34 & 0x80) != 0)
  {
    if (memcmp(*v38, v39, *(void *)(a5 + 16)))
    {
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      uint64_t v40 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      uint64_t v41 = (void *)fst::cerr(v40);
      uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"FstImpl::ReadHeader: Fst not of type \"", 38);
      int v43 = *(char *)(a1 + 39);
      if (v43 >= 0) {
        uint64_t v44 = a1 + 16;
      }
      else {
        uint64_t v44 = *(void *)(a1 + 16);
      }
      if (v43 >= 0) {
        uint64_t v45 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v45 = *(void *)(a1 + 24);
      }
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      clockid_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\": ", 3);
      int v48 = *(char *)(a3 + 23);
      if (v48 >= 0) {
        uint64_t v49 = a3;
      }
      else {
        uint64_t v49 = *(void *)a3;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v50 = *(void *)(a3 + 8);
      }
      goto LABEL_79;
    }
  }
  else if (*(unsigned char *)(a5 + 31))
  {
    while (*(unsigned __int8 *)v38 == *v39)
    {
      uint64_t v38 = (const void **)((char *)v38 + 1);
      ++v39;
      if (!--v34) {
        goto LABEL_52;
      }
    }
    goto LABEL_40;
  }
LABEL_52:
  uint64_t v51 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
  uint64_t v52 = *(unsigned __int8 *)(a5 + 55);
  if ((v52 & 0x80u) == 0) {
    uint64_t v53 = *(unsigned __int8 *)(a5 + 55);
  }
  else {
    uint64_t v53 = *(void *)(a5 + 40);
  }
  uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
  int v55 = (char)v54;
  if ((v54 & 0x80u) != 0) {
    uint64_t v54 = *(void *)(v51 + 8);
  }
  if (v53 != v54) {
    goto LABEL_67;
  }
  uint64_t v56 = (const void **)(a5 + 32);
  if (v55 >= 0) {
    uint64_t v57 = (unsigned __int8 *)v51;
  }
  else {
    uint64_t v57 = *(unsigned __int8 **)v51;
  }
  if ((v52 & 0x80) != 0)
  {
    if (memcmp(*v56, v57, *(void *)(a5 + 40)))
    {
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      int v58 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      int v59 = (void *)fst::cerr(v58);
      uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"FstImpl::ReadHeader: Arc not of type \"", 38);
      uint64_t v61 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
      int v62 = *(char *)(v61 + 23);
      if (v62 >= 0) {
        uint64_t v63 = v61;
      }
      else {
        uint64_t v63 = *(void *)v61;
      }
      if (v62 >= 0) {
        uint64_t v64 = *(unsigned __int8 *)(v61 + 23);
      }
      else {
        uint64_t v64 = *(void *)(v61 + 8);
      }
      uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
      clockid_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\": ", 3);
      int v66 = *(char *)(a3 + 23);
      if (v66 >= 0) {
        uint64_t v49 = a3;
      }
      else {
        uint64_t v49 = *(void *)a3;
      }
      if (v66 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v50 = *(void *)(a3 + 8);
      }
      goto LABEL_79;
    }
  }
  else if (*(unsigned char *)(a5 + 55))
  {
    while (*(unsigned __int8 *)v56 == *v57)
    {
      uint64_t v56 = (const void **)((char *)v56 + 1);
      ++v57;
      if (!--v52) {
        goto LABEL_83;
      }
    }
    goto LABEL_67;
  }
LABEL_83:
  if (*(_DWORD *)(a5 + 56) < a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v67 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    int v68 = (void *)fst::cerr(v67);
    unsigned int v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"FstImpl::ReadHeader: Obsolete ", 30);
    int v70 = *(char *)(a1 + 39);
    if (v70 >= 0) {
      uint64_t v71 = a1 + 16;
    }
    else {
      uint64_t v71 = *(void *)(a1 + 16);
    }
    if (v70 >= 0) {
      uint64_t v72 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v72 = *(void *)(a1 + 24);
    }
    uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
    clockid_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" Fst version: ", 14);
    int v74 = *(char *)(a3 + 23);
    if (v74 >= 0) {
      uint64_t v49 = a3;
    }
    else {
      uint64_t v49 = *(void *)a3;
    }
    if (v74 >= 0) {
      uint64_t v50 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v50 = *(void *)(a3 + 8);
    }
LABEL_79:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  *(void *)(a1 + 8) = *(void *)(a5 + 64);
  if (*(unsigned char *)(a5 + 60)) {
    *(void *)(a1 + 40) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  }
  if (!*(unsigned char *)(a3 + 52))
  {
    uint64_t v75 = *(void *)(a1 + 40);
    if (v75)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v75 + 8))(v75, v57);
      *(void *)(a1 + 40) = 0;
    }
  }
  if ((*(unsigned char *)(a5 + 60) & 2) != 0) {
    *(void *)(a1 + 48) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  }
  if (!*(unsigned char *)(a3 + 53))
  {
    uint64_t v76 = *(void *)(a1 + 48);
    if (v76)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v76 + 8))(v76, v57);
      *(void *)(a1 + 48) = 0;
    }
  }
  uint64_t v77 = *(void *)(a3 + 32);
  if (v77)
  {
    uint64_t v78 = *(void *)(a1 + 40);
    if (v78)
    {
      (*(void (**)(void, unsigned __int8 *))(*(void *)v78 + 8))(*(void *)(a1 + 40), v57);
      uint64_t v77 = *(void *)(a3 + 32);
    }
    *(void *)(a1 + 40) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v77 + 16))(v77, v57);
  }
  uint64_t v79 = *(void *)(a3 + 40);
  if (v79)
  {
    uint64_t v80 = *(void *)(a1 + 48);
    if (v80)
    {
      (*(void (**)(void, unsigned __int8 *))(*(void *)v80 + 8))(*(void *)(a1 + 48), v57);
      uint64_t v79 = *(void *)(a3 + 40);
    }
    *(void *)(a1 + 48) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v79 + 16))(v79, v57);
  }
  return 1;
}

void sub_20CEA27DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::FstHeader::~FstHeader(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type(void)::type;
}

void sub_20CEA2930(_Unwind_Exception *a1)
{
}

uint64_t fst::TropicalWeightTpl<float>::Type()
{
  {
    operator new();
  }
  return fst::TropicalWeightTpl<float>::Type(void)::type;
}

void sub_20CEA2A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    int v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    char v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  MEMORY[0x210559100](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x210559110](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x210559100](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x210559110](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      int v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_20CEA3038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  unint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x210558FD0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  unint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x210558FD0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  unint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x210558FD0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_20CEA3228(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x210558FE0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x210559500](a1 + 52);
  return a1;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 1);
  }
}

void sub_20CEA35C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v73 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      uint64_t v71 = &v73;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t)&v68);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v61 = a3;
      uint64_t v11 = a2 & 0xC0000;
      uint64_t v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v12 = 0x10425A850000;
      }
      unint64_t v13 = v8 | v12;
      uint64_t v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v13 |= 0x100000uLL;
      }
      unint64_t v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      unsigned int v65 = 0;
      uint64_t v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v63);
      int v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
        {
          if (v63)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v63 + 24))();
LABEL_18:
            std::vector<int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11) {
              std::vector<int>::reserve(&v67, v18);
            }
            if (v14) {
              std::vector<int>::reserve(&v66, v18);
            }
            unint64_t v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v68);
            char v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(void *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71) {
                      --*(_DWORD *)v71;
                    }
                  }
                  uint64_t v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<int>::pointer)5))
                  {
                    unint64_t v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2) {
                      unint64_t v46 = 2;
                    }
                    std::vector<int>::pointer v47 = v67.__begin_ + 1;
                    int v48 = *v67.__begin_;
                    unint64_t v49 = v46 - 1;
                    while (1)
                    {
                      int v51 = *v47++;
                      int v50 = v51;
                      if (v51 == v48) {
                        break;
                      }
                      int v48 = v50;
                      if (!--v49) {
                        goto LABEL_101;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1) {
                        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      float v58 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v17);
                      *(float *)&uint64_t v68 = v58;
                      int v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)a1 + 40))(a1, v17, INFINITY, v58) != 1)unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
                      }
                        }
                      else
                      {
                        *(float *)&uint64_t v68 = v58;
                        int v75 = 0;
                        if (v58 != 0.0) {
                          unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (v63) {
                        (*(void (**)(uint64_t))(*(void *)v63 + 32))(v63);
                      }
                      else {
                        ++v65;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14) {
                      goto LABEL_112;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<int>::pointer)5)
                  {
                    unint64_t v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2) {
                      unint64_t v52 = 2;
                    }
                    std::vector<int>::pointer v53 = v66.__begin_ + 1;
                    int v54 = *v66.__begin_;
                    unint64_t v55 = v52 - 1;
                    while (1)
                    {
                      int v57 = *v53++;
                      int v56 = v57;
                      if (v57 == v54) {
                        break;
                      }
                      int v54 = v56;
                      if (!--v55) {
                        goto LABEL_112;
                      }
                    }
                    unint64_t v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              uint64_t v20 = v69 + 16 * v72;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                unint64_t v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22) {
                    goto LABEL_39;
                  }
                  goto LABEL_35;
                }
                unint64_t v23 = v73;
              }
              else
              {
                unint64_t v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                unint64_t v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_35:
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v8) {
                unint64_t v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < (int)a2) {
                unint64_t v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              int v75 = 0;
              float v24 = *(float *)(v20 + 8);
              int v75 = LODWORD(v24);
              int v74 = 0;
              if (v24 != 0.0)
              {
                int v75 = LODWORD(v24);
                int v74 = 2139095040;
                if (v24 != INFINITY) {
                  unint64_t v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17) {
                unint64_t v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v25 != v17 + 1) {
                unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                std::vector<int>::pointer end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  std::vector<int>::pointer begin = v67.__begin_;
                  int64_t v29 = v67.__end_ - v67.__begin_;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    goto LABEL_135;
                  }
                  int64_t v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    std::string::size_type v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    std::vector<int>::pointer begin = v67.__begin_;
                    std::vector<int>::pointer end = v67.__end_;
                  }
                  else
                  {
                    std::string::size_type v33 = 0;
                  }
                  uint64_t v34 = (int *)&v33[4 * v29];
                  *uint64_t v34 = *(_DWORD *)v20;
                  uint64_t v27 = v34 + 1;
                  while (end != begin)
                  {
                    int v35 = *--end;
                    *--uint64_t v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (int *)&v33[4 * v32];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v67.__end_ = v8;
                  uint64_t v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                std::vector<int>::pointer v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  std::vector<int>::pointer v38 = v66.__begin_;
                  int64_t v39 = v66.__end_ - v66.__begin_;
                  unint64_t v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62) {
LABEL_135:
                  }
                    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
                  int64_t v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40) {
                    unint64_t v40 = v41 >> 1;
                  }
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42)
                  {
                    uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    std::vector<int>::pointer v38 = v66.__begin_;
                    std::vector<int>::pointer v36 = v66.__end_;
                  }
                  else
                  {
                    uint64_t v43 = 0;
                  }
                  uint64_t v44 = (int *)&v43[4 * v39];
                  *uint64_t v44 = *(_DWORD *)(v20 + 4);
                  long long v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    int v45 = *--v36;
                    *--uint64_t v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (int *)&v43[4 * v42];
                  if (v38) {
                    operator delete(v38);
                  }
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  long long v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(void *)v68 + 40))(v68);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v65;
          goto LABEL_18;
        }
        if (v63) {
          (*(void (**)(void))(*(void *)v63 + 8))();
        }
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        unint64_t v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      unint64_t v8 = v73;
    }
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_20CEA3F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::CompatProperties(unint64_t this, unint64_t a2)
{
  unint64_t v2 = (((2 * a2) & 0x2AAAAAAA0000 | a2 & 0x3FFFFFFF0000 | (a2 >> 1) & 0x155555550000) & ((this >> 1) & 0x155555550000 | (2 * this) & 0x2AAAAAAA0000 | this) | 7) & (a2 ^ this);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        unint64_t v7 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
        unint64_t v8 = (void *)fst::cerr(v7);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"CompatProperties: mismatch: ", 28);
        size_t v10 = strlen(fst::PropertyNames[v5]);
        uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)fst::PropertyNames[v5], v10);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": props1 = ", 11);
        if ((v6 & this) != 0) {
          unint64_t v13 = "true";
        }
        else {
          unint64_t v13 = "false";
        }
        if ((v6 & this) != 0) {
          uint64_t v14 = 4;
        }
        else {
          uint64_t v14 = 5;
        }
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0) {
          uint64_t v17 = "true";
        }
        else {
          uint64_t v17 = "false";
        }
        if ((v6 & a2) != 0) {
          uint64_t v18 = 4;
        }
        else {
          uint64_t v18 = 5;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_20CEA419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    unint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;
  uint64_t vars8;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    unint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(a2, a1);
  }
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
}

void sub_20CEA4B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool((uint64_t *)va);
  std::deque<char *>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(uint64_t result)
{
  uint64_t v1 = (void *)result;
  if (*(void *)result)
  {
    unint64_t v2 = **(_DWORD ***)result;
    uint64_t v3 = *(void *)(*(void *)result + 8) - (void)v2;
    if (v3)
    {
      unint64_t v4 = v3 >> 2;
      if (v4 <= 1) {
        unint64_t v4 = 1;
      }
      do
      {
        *unint64_t v2 = *(_DWORD *)(result + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(unsigned char *)(result + 52))
  {
    int v5 = *(void ***)(result + 16);
    if (v5)
    {
      if (*v5) {
        operator delete(*v5);
      }
      uint64_t result = MEMORY[0x2105595E0](v5, 0x1010C40113C0ABBLL);
    }
  }
  uint64_t v6 = v1[7];
  if (v6)
  {
    unint64_t v7 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(v6 + 8) = v7;
      operator delete(v7);
    }
    uint64_t result = MEMORY[0x2105595E0](v6, 0x10C402FEFCB83);
  }
  uint64_t v8 = v1[8];
  if (v8)
  {
    uint64_t v9 = *(void **)v8;
    if (*(void *)v8)
    {
      *(void *)(v8 + 8) = v9;
      operator delete(v9);
    }
    uint64_t result = MEMORY[0x2105595E0](v8, 0x10C402FEFCB83);
  }
  size_t v10 = (void **)v1[9];
  if (v10)
  {
    if (*v10) {
      operator delete(*v10);
    }
    uint64_t result = MEMORY[0x2105595E0](v10, 0x1010C40113C0ABBLL);
  }
  uint64_t v11 = v1[10];
  if (v11)
  {
    uint64_t v12 = *(void **)v11;
    if (*(void *)v11)
    {
      *(void *)(v11 + 8) = v12;
      operator delete(v12);
    }
    JUMPOUT(0x2105595E0);
  }
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = a1[10];
  unint64_t v7 = *(_DWORD **)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    size_t v10 = *(_DWORD **)v6;
    uint64_t v11 = ((uint64_t)v7 - *(void *)v6) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      size_t v10 = *(_DWORD **)v6;
      unint64_t v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = a2;
    uint64_t v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)uint64_t v6 = v16;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *unint64_t v7 = a2;
    uint64_t v9 = v7 + 1;
  }
  *(void *)(v6 + 8) = v9;
  unint64_t v19 = a2;
  uint64_t v20 = *(void *)a1[7];
  if (a2 >= (unint64_t)((*(void *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      uint64_t v21 = *a1;
      if (*a1)
      {
        unint64_t v22 = *(void *)(v21 + 16);
        unint64_t v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          int v25 = *(_DWORD **)v21;
          uint64_t v26 = ((uint64_t)v23 - *(void *)v21) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_78;
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            int v25 = *(_DWORD **)v21;
            unint64_t v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            unint64_t v30 = 0;
          }
          int64_t v31 = &v30[4 * v26];
          *(_DWORD *)int64_t v31 = -1;
          float v24 = v31 + 4;
          while (v23 != v25)
          {
            int v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(void *)uint64_t v21 = v31;
          *(void *)(v21 + 8) = v24;
          *(void *)(v21 + 16) = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          _DWORD *v23 = -1;
          float v24 = v23 + 1;
        }
        *(void *)(v21 + 8) = v24;
      }
      uint64_t v33 = a1[1];
      if (v33)
      {
        char v67 = 0;
        std::vector<BOOL>::push_back(v33, &v67);
      }
      uint64_t v34 = a1[2];
      char v66 = 0;
      std::vector<BOOL>::push_back(v34, &v66);
      uint64_t v35 = a1[7];
      std::vector<int>::pointer v36 = *(_DWORD **)(v35 + 8);
      unint64_t v37 = *(void *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        int64_t v39 = *(_DWORD **)v35;
        uint64_t v40 = ((uint64_t)v36 - *(void *)v35) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_78;
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          int64_t v39 = *(_DWORD **)v35;
          std::vector<int>::pointer v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          uint64_t v44 = 0;
        }
        int v45 = &v44[4 * v40];
        *(_DWORD *)int v45 = -1;
        std::vector<int>::pointer v38 = v45 + 4;
        while (v36 != v39)
        {
          int v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(void *)uint64_t v35 = v45;
        *(void *)(v35 + 8) = v38;
        *(void *)(v35 + 16) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *std::vector<int>::pointer v36 = -1;
        std::vector<int>::pointer v38 = v36 + 1;
      }
      *(void *)(v35 + 8) = v38;
      uint64_t v47 = a1[8];
      int v48 = *(_DWORD **)(v47 + 8);
      unint64_t v49 = *(void *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        int v51 = *(_DWORD **)v47;
        uint64_t v52 = ((uint64_t)v48 - *(void *)v47) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
LABEL_78:
        }
          std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
        uint64_t v54 = v49 - (void)v51;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          int v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          int v51 = *(_DWORD **)v47;
          int v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          int v56 = 0;
        }
        int v57 = &v56[4 * v52];
        *(_DWORD *)int v57 = -1;
        int v50 = v57 + 4;
        while (v48 != v51)
        {
          int v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(void *)uint64_t v47 = v57;
        *(void *)(v47 + 8) = v50;
        *(void *)(v47 + 16) = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        _DWORD *v48 = -1;
        int v50 = v48 + 1;
      }
      *(void *)(v47 + 8) = v50;
      uint64_t v59 = a1[9];
      char v65 = 0;
      std::vector<BOOL>::push_back(v59, &v65);
      uint64_t v20 = *(void *)a1[7];
    }
    while (v19 >= (*(void *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  uint64_t v60 = (void *)a1[9];
  *(_DWORD *)(*(void *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  unint64_t v61 = v19 >> 6;
  uint64_t v62 = 1 << v19;
  *(void *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  uint64_t v63 = (void *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) |= v62;
    }
  }
  else
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) &= ~v62;
    }
    *(void *)a1[3] = *(void *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32)) == INFINITY)
  {
    unint64_t v6 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6)) {
    goto LABEL_17;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  unint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  unint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_14;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  int v4 = *(_DWORD *)(**(void **)(a1 + 56) + 4 * v3);
  uint64_t v5 = **(void **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2)) {
    *(_DWORD *)(v5 + 4 * a2) = v4;
  }
  uint64_t v6 = **(void **)(a1 + 16);
  if ((*(void *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
    *(void *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = *(unint64_t **)(a1 + 24);
  unint64_t v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *uint64_t v7 = v8;
  if (*(_DWORD *)(a3 + 12) == *(_DWORD *)(a1 + 40)) {
    *uint64_t v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  }
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc(void **a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(a3 + 12);
  uint64_t v4 = *a1[7];
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
  }
  else
  {
    unint64_t v6 = v3 >> 6;
    uint64_t v7 = 1 << v3;
    if ((*(void *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      uint64_t v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2)) {
        *(_DWORD *)(v8 + 4 * a2) = v5;
      }
    }
  }
  uint64_t v9 = *a1[2];
  if ((*(void *)(v9 + 8 * v6) & v7) != 0) {
    *(void *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return 1;
}

double fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2071F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_26C2071F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_20CEA5650(_Unwind_Exception *a1)
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2071F0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_26C207818;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_20CEA5768(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Size()
{
  return 56;
}

void *std::__list_imp<char *>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

double fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207818;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4 = __n;
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      unint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<int>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[v8];
    uint64_t v15 = &v12[v8 + v4];
    uint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    std::vector<char>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--unint64_t v14 = v18;
      }
      while (end != begin);
      std::vector<int>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;
  uint64_t vars8;

  std::vector<char>::size_type v4 = __n;
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      unint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<int>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[v8];
    uint64_t v15 = &v12[v8 + v4];
    uint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    std::vector<char>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--unint64_t v14 = v18;
      }
      while (end != begin);
      std::vector<int>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  long long v35;
  void *v36;
  long long v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  void *v79;
  char *v80;
  unsigned char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  long long v107;
  long long v108;
  uint64_t v109;
  long long v110;
  uint64_t v111;
  long long v112;

  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  unint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      unint64_t v13 = *(void *)v5;
      size_t v11 = v5 + 8;
      unint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        unint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            uint64_t v42 = 1;
          }
          else {
            uint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v42);
          int v45 = &v43[8 * (v42 >> 2)];
          int v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            int v48 = 8 * (v47 >> 3);
            unint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              int v50 = *v46++;
              *(void *)unint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          int v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          uint64_t v16 = v14 >> 3 < -1;
          unint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            char v18 = v17;
          }
          else {
            char v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          int v21 = &v11[-8 * v20];
          unint64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            unint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            unint64_t v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    float v24 = v6 >> 3;
    int v25 = (char *)a1[3];
    uint64_t v26 = (char *)*a1;
    unint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      unint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            uint64_t v52 = 1;
          }
          else {
            uint64_t v52 = v27 >> 2;
          }
          unint64_t v53 = 2 * v52;
          uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v56 = (uint64_t *)a1[1];
          int v57 = v5;
          int v58 = a1[2] - (void)v56;
          if (v58)
          {
            int v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            uint64_t v60 = v5;
            do
            {
              unint64_t v61 = *v56++;
              *(void *)uint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          uint64_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        int v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        char v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          char v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              uint64_t v97 = 1;
            }
            else {
              uint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            float v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v97);
            uint64_t v100 = &v98[8 * (v97 >> 2)];
            uint64_t v101 = (uint64_t *)a1[1];
            int v64 = v100;
            unint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              int v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              BOOL v104 = &v98[8 * (v97 >> 2)];
              do
              {
                BOOL v105 = *v101++;
                *(void *)BOOL v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            long long v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              int v64 = (char *)a1[2];
            }
          }
          else
          {
            char v67 = v66 >> 3;
            uint64_t v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            unint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            unint64_t v72 = &v63[-8 * v71];
            unint64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            int v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)int v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    int64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v24];
    *(void *)&uint64_t v35 = v31;
    *((void *)&v35 + 1) = v34;
    uint64_t v110 = v35;
    std::vector<int>::pointer v36 = operator new(0x1000uLL);
    *(void *)&unint64_t v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      std::vector<int>::pointer v38 = 8 * v24;
      *(void *)&int64_t v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&unint64_t v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      int v74 = v38 >> 2;
      if (v4 == v5) {
        int v75 = 1;
      }
      else {
        int v75 = v74;
      }
      uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v75);
      uint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&int64_t v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&unint64_t v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      int v107 = v37;
      uint64_t v110 = v39;
      operator delete(v31);
      unint64_t v37 = v107;
    }
    int64_t v39 = v110;
LABEL_56:
    *(void *)uint64_t v34 = v36;
    *(void *)&unint64_t v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        unint64_t v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            uint64_t v86 = 1;
          }
          else {
            uint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v86);
          uint64_t v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = v80;
          std::vector<int>::pointer v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            std::vector<int>::pointer v91 = 8 * (v90 >> 3);
            uint64_t v92 = v80;
            int v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&int64_t v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&unint64_t v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            uint64_t v108 = v37;
            uint64_t v112 = v39;
            operator delete(v79);
            unint64_t v37 = v108;
            int64_t v39 = v112;
          }
        }
        else
        {
          char v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            char v83 = v82 + 1;
          }
          else {
            char v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          uint64_t v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            unint64_t v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            std::string v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&int64_t v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&unint64_t v37 = &v81[8 * v84];
        }
      }
      else
      {
        uint64_t v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    uint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      std::vector<int>::pointer v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char **>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char **>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char **>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20CEA5D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 56 * a2;
  unint64_t v4 = a1[1];
  if (224 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

void sub_20CEA5FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
    uint64_t v12 = a5;
    if (!a4) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + v12;
    if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(void *)a1) {
        free(*(void **)a1);
      }
      uint64_t v23 = 0x4000;
      if (v13 > 0x4000) {
        uint64_t v23 = v13;
      }
      *(void *)(a1 + 8) = v23;
      uint64_t v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(void *)a1 = v15;
      *(void *)(a1 + 16) = v15;
      BOOL v14 = v15;
    }
    else
    {
      BOOL v14 = *(_OWORD **)(a1 + 16);
      uint64_t v15 = *(_OWORD **)a1;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = &v14[v13];
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    unint64_t v19 = v26;
    uint64_t v18 = v27;
    if (v27) {
      ++*v27;
    }
    unint64_t v20 = 0;
    if (!v16) {
      goto LABEL_15;
    }
    while (1)
    {
      int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      uint64_t v22 = *v16;
      if (v21) {
        break;
      }
      *uint64_t v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16) {
          break;
        }
LABEL_15:
        if (v20 >= v19)
        {
          if (v18) {
            --*v18;
          }
          return;
        }
        *uint64_t v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    uint64_t v10 = v25 + 16 * v26;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_20CEA6280(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(void *a1, int a2, float a3)
{
  uint64_t v5 = *(float **)(a1[8] + 8 * a2);
  float v6 = *v5;
  float *v5 = a3;
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v7, v6, a3);
  a1[1] = a1[1] & 4 | result;
  return result;
}

uint64_t fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(unint64_t a1, float a2, float a3)
{
  if (a2 != INFINITY && a2 != 0.0) {
    a1 &= ~0x100000000uLL;
  }
  if (a3 != INFINITY && a3 != 0.0) {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, a2, a3, v7);
  unint64_t v9 = *(void **)(a1[8] + 8 * a2);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4 = *a3;
  int v5 = *((_DWORD *)a3 + 1);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5) {
    unint64_t v6 = a1;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5) {
    unint64_t v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v4 == 0.0) {
    unint64_t v6 = v7;
  }
  if (!v5) {
    unint64_t v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 > SLODWORD(v4)) {
      unint64_t v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v5) {
      unint64_t v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
  }
  if (a3[2] != INFINITY && a3[2] != 0.0) {
    unint64_t v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 3) <= a2) {
    unint64_t v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v6 & 0x4000000000) != 0) {
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v6 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  float v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v32.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v30 = *(int64x2_t *)(v16 + 8);
        uint64_t v26 = 0;
        uint64_t v27 = v20 >> 4;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v26 = 0;
        uint64_t v22 = *(void *)(v16 + 24);
        do
        {
          int v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(void *)v22;
            v24.i64[1] = HIDWORD(*(void *)v22);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              uint64_t v14 = *v4;
            }
            ++v26;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v21;
          uint64_t v25 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        int64x2_t v30 = v19;
        uint64_t v27 = v25 >> 4;
      }
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs((void *)v16, v27 - v26);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    unint64_t v29 = v32.__begin_;
    if (!v32.__begin_) {
      return;
    }
  }
  else
  {
    unint64_t v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_20CEA6784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v2);
  }
}

void *fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[4];
    uint64_t v3 = -16 * a2;
    float v4 = (_DWORD *)(v2 - 16);
    std::vector<int>::size_type v5 = (_DWORD *)(v2 - 16);
    do
    {
      int v6 = *v5;
      v5 -= 4;
      if (!v6) {
        --result[1];
      }
      if (!v4[1]) {
        --result[2];
      }
      float v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void sub_20CEA6890(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  std::vector<int>::size_type v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    unint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != *(void *)(a1 + 64))
  {
    unint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v2 + 8 * v3++));
      uint64_t v2 = *(void *)(a1 + 64);
    }
    while (v3 < (*(void *)(a1 + 72) - v2) >> 3);
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

uint64_t fst::MappedFile::MappedFile(uint64_t a1, long long *a2, long long *a3, float a4)
{
  *(void *)a1 = off_26C206C30;
  long long v6 = *a2;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  uint64_t v7 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    v7->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(float *)(a1 + 64) = a4;
  *(unsigned char *)(a1 + 68) = 0;
  return a1;
}

void fst::MappedFile::~MappedFile(fst::MappedFile *this)
{
  *(void *)this = off_26C206C30;
  size_t v2 = *((void *)this + 3);
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    if (!munmap(v3, v2)) {
      goto LABEL_9;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)v12);
    std::vector<int>::size_type v5 = (void *)fst::cerr(v4);
    long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"failed to unmap region: ", 24);
    uint64_t v7 = __error();
    long long v8 = strerror(*v7);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    uint64_t v10 = (void *)v12[0];
  }
  else
  {
    uint64_t v11 = *((void *)this + 1);
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v10 = (void *)(v11 - *((int *)this + 8));
  }
  operator delete(v10);
LABEL_9:
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

{
  uint64_t vars8;

  fst::MappedFile::~MappedFile(this);
  JUMPOUT(0x2105595E0);
}

void fst::MappedFile::SetLocked(fst::MappedFile *this, int a2, char a3)
{
  float v3 = *((float *)this + 16);
  if (v3 > 0.0 && *((unsigned __int8 *)this + 68) != a2)
  {
    size_t v6 = *((void *)this + 3);
    if (v3 < 1.0)
    {
      float v7 = v3 * (float)v6;
      if ((unint64_t)v7 < v6) {
        size_t v6 = (unint64_t)v7;
      }
    }
    long long v8 = (const void *)*((void *)this + 2);
    if (a2)
    {
      if (!mlock(v8, v6))
      {
        *((unsigned char *)this + 68) = 1;
        return;
      }
      if ((a3 & 1) != 0 || getenv("QSR_ALLOW_MEMLOCK_FAIL"))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        size_t v9 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        uint64_t v10 = (void *)fst::cerr(v9);
        uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Memory lock of file failed: ", 28);
        unint64_t v12 = __error();
        char v13 = strerror(*v12);
        size_t v14 = strlen(v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        unint64_t v21 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        uint64_t v22 = (void *)fst::cerr(v21);
        int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Memory locking of file failed. If you are debugging try setting environment variable QSR_ALLOW_MEMLOCK_FAIL ", 108);
        int64x2_t v24 = __error();
        uint64_t v25 = strerror(*v24);
        size_t v26 = strlen(v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
      }
    }
    else
    {
      if (!munlock(v8, v6))
      {
        *((unsigned char *)this + 68) = 0;
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
      unint64_t v15 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
      uint64_t v16 = (void *)fst::cerr(v15);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Memory unlock of file failed: ", 30);
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      size_t v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    }
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_20CEA6E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MappedFile::Allocate(fst::MappedFile *this, int a2)
{
  if (this) {
    operator new((size_t)this + a2);
  }
  operator new();
}

void sub_20CEA6F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v15, 0x1093C40E6D40A01);
  _Unwind_Resume(a1);
}

void fst::MappedFile::Map(uint64_t a1, uint64_t a2, fst::MappedFile *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  std::istream::tellg();
  uint64_t v4 = a2;
  if ((*(_DWORD *)(a2 + 48) - 1) <= 1 && (v31 & 0xF) == 0)
  {
    size_t v6 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    int v7 = open(v6, 0);
    uint64_t v4 = a2;
    if (v7 != -1)
    {
      int v8 = sysconf(29);
      unint64_t v9 = v31 % v8;
      uint64_t v10 = (char *)mmap(0, (size_t)a3 + v9, 1, 1, v7, v31 / v8 * v8);
      if (!close(v7) && v10 != (char *)-1)
      {
        v28[1] = v10;
        char v29 = (char *)a3 + v9;
        v28[0] = &v10[v9];
        int v30 = v9;
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "INFO");
      uint64_t v11 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v28);
      unint64_t v12 = (void *)fst::cerr(v11);
      char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Mapping of file failed: ", 24);
      size_t v14 = __error();
      uint64_t v15 = strerror(*v14);
      size_t v16 = strlen(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
      fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
      if (SHIBYTE(v29) < 0) {
        operator delete(v28[0]);
      }
      uint64_t v4 = a2;
    }
  }
  if (*(_DWORD *)(v4 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "WARNING");
    uint64_t v17 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v28);
    uint64_t v18 = (void *)fst::cerr(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"File mapping at offset ", 23);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" of size ", 9);
    size_t v20 = (void *)std::ostream::operator<<();
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" of file ", 9);
    int v22 = *(char *)(a2 + 23);
    if (v22 >= 0) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = *(void *)a2;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v24 = *(void *)(a2 + 8);
    }
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" could not be honored, reading instead.", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
  }
  fst::MappedFile::Allocate(a3, 16);
}

void sub_20CEA7518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComposeProperties(unint64_t this, uint64_t a2)
{
  uint64_t v2 = (a2 | this) & 4;
  unint64_t v3 = a2 & this;
  unint64_t v4 = a2 & this & 0x2802010000 | v2 | 0x10000000000;
  if ((a2 & this & 0x2000000) != 0) {
    v4 |= a2 & this & 0x40000;
  }
  uint64_t v5 = v3 & 0x280A800000 | v2 | 0x10000010000;
  if ((v3 & 0x2000000) != 0) {
    v5 |= v3 & 0x140000;
  }
  if ((v3 & 0x10000) != 0) {
    return v5;
  }
  else {
    return v4;
  }
}

unint64_t fst::DeterminizeProperties(unint64_t this, int a2, int a3)
{
  if ((this & 0x10000) != 0
    || ((this & 0x2000000) == 0 ? (char v3 = a2 ^ 1) : (char v3 = 0), (v4 = 0x10000000000, (v3 & 1) == 0) && a3))
  {
    uint64_t v4 = 0x10000040000;
  }
  unint64_t v5 = (this >> 25) & 1;
  unint64_t v6 = this & 0x800000;
  if ((v5 & a3) == 0) {
    unint64_t v6 = 0;
  }
  unint64_t v7 = this & ((uint64_t)(this << 23) >> 63) & 0x405000000 | this & 0x142800010004 | this & ((int)(this << 15) >> 31) & 0xA000000 | v6 | v4;
  if ((v5 & a2) != 0) {
    return v7 | 0x2000000;
  }
  else {
    return v7;
  }
}

unint64_t fst::ProjectProperties(unint64_t this, int a2)
{
  unint64_t v2 = this & 0x3FFF00000007 | 0x10000;
  unint64_t v3 = (this >> 2) & 0xC0000 | this & 0xCC300000 | v2;
  if ((this & 0x4000000) != 0) {
    v3 |= 0x1400000uLL;
  }
  if ((this & 0x8000000) != 0) {
    v3 |= 0x2800000uLL;
  }
  unint64_t v4 = (this >> 2) & 0x30000000 | v3;
  unint64_t v5 = this & 0x330C0000 | (((this >> 18) & 3) << 20) | v2;
  if ((this & 0x1000000) != 0) {
    v5 |= 0x4400000uLL;
  }
  if ((this & 0x2000000) != 0) {
    v5 |= 0x8800000uLL;
  }
  unint64_t v6 = (4 * this) & 0xC0000000 | v5;
  if (a2) {
    return v6;
  }
  else {
    return v4;
  }
}

unint64_t fst::ReverseProperties(unint64_t this, int a2)
{
  uint64_t v2 = 0xE05430007;
  if (a2) {
    uint64_t v2 = 0xF05430007;
  }
  return v2 & this;
}

unint64_t fst::RmEpsilonProperties(unint64_t this, int a2)
{
  uint64_t v2 = 176160768;
  if ((this & 0x10000) == 0) {
    uint64_t v2 = 0x800000;
  }
  unint64_t v3 = v2 | this & 0x2800010004;
  if (!a2) {
    v3 |= this & 0x4000000000 | 3;
  }
  if ((a2 & ((this & 0x10000000000) == 0)) != 0) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = this & 0x20000;
  }
  return v3 | v4;
}

unint64_t fst::ShortestPathProperties(unint64_t this, int a2)
{
  uint64_t v2 = 0x52800000000;
  if (a2) {
    uint64_t v2 = 0x12800000000;
  }
  return v2 | this;
}

fst::SymbolTableTextOptions *fst::SymbolTableTextOptions::SymbolTableTextOptions(fst::SymbolTableTextOptions *this)
{
  *(unsigned char *)this = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, FLAGS_fst_field_separator);
  return this;
}

void fst::SymbolTableImpl::ReadText(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_20CEA7D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30)
{
  MEMORY[0x2105595E0](v30, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTableImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  if (a3 == -1) {
    return -1;
  }
  unint64_t v6 = fst::internal::DenseSymbolMap::InsertOrFind((fst::internal::DenseSymbolMap *)(a1 + 40), a2);
  if (v7)
  {
    if (((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 1 == a3 && *(void *)(a1 + 32) == a3)
    {
      *(void *)(a1 + 32) = a3 + 1;
      uint64_t v9 = a3;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 136);
      uint64_t v11 = *(uint64_t **)(a1 + 128);
      if ((unint64_t)v11 >= v10)
      {
        int v22 = *(uint64_t **)(a1 + 120);
        uint64_t v23 = v11 - v22;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = v10 - (void)v22;
        unint64_t v25 = (uint64_t)(v10 - (void)v22) >> 2;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 136, v26);
          int v22 = *(uint64_t **)(a1 + 120);
          uint64_t v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          uint64_t v27 = 0;
        }
        char v28 = (uint64_t *)&v27[8 * v23];
        char v29 = &v27[8 * v26];
        *char v28 = a3;
        unint64_t v12 = v28 + 1;
        while (v11 != v22)
        {
          uint64_t v30 = *--v11;
          *--char v28 = v30;
        }
        *(void *)(a1 + 120) = v28;
        *(void *)(a1 + 128) = v12;
        *(void *)(a1 + 136) = v29;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v11 = a3;
        unint64_t v12 = v11 + 1;
      }
      *(void *)(a1 + 128) = v12;
      uint64_t v31 = ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 1;
      __p[0] = &v35;
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 144), &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5] = v31;
      uint64_t v9 = v35;
    }
    if (v9 >= *(void *)(a1 + 24)) {
      *(void *)(a1 + ++*(void *)(result + 24) = v9 + 1;
    }
    *(unsigned char *)(a1 + 172) = 0;
  }
  else
  {
    unint64_t NthKey = fst::SymbolTableImpl::GetNthKey((fst::SymbolTableImpl *)a1, v6);
    if (NthKey == a3)
    {
      return a3;
    }
    else
    {
      uint64_t v9 = NthKey;
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        char v13 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)__p);
        size_t v14 = (void *)fst::cerr(v13);
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::AddSymbol: symbol = ", 33);
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          uint64_t v17 = a2;
        }
        else {
          uint64_t v17 = *(void *)a2;
        }
        if (v16 >= 0) {
          uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v18 = *(void *)(a2 + 8);
        }
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" already in symbol_map_ with key = ", 35);
        size_t v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but supplied new key = ", 24);
        unint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (ignoring new key)", 19);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v9;
}

void sub_20CEA808C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SymbolTableImpl::MaybeRecomputeCheckSum(fst::SymbolTableImpl *this)
{
  if (!*((unsigned char *)this + 172))
  {
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v68);
    uint64_t v2 = *((void *)this + 6);
    if (*((void *)this + 7) != v2)
    {
      unint64_t v3 = 0;
      do
      {
        unint64_t v4 = *(char **)(v2 + 8 * v3);
        size_t v5 = strlen(v4);
        std::string::basic_string[abi:ne180100](__p, v4, v5);
        int v6 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        char v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        int v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v6 = __p[0].__r_.__value_.__r.__words[1];
        }
        else {
          int v8 = __p;
        }
        if (v6 >= 1)
        {
          uint64_t v9 = v6;
          do
          {
            std::string::value_type v11 = v8->__r_.__value_.__s.__data_[0];
            int v8 = (std::string *)((char *)v8 + 1);
            std::string::value_type v10 = v11;
            int v12 = v68++;
            BOOL v13 = -v12 < 0;
            int v14 = -v12 & 0x1F;
            int v15 = v12 & 0x1F;
            if (!v13) {
              int v15 = -v14;
            }
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v16 = &v69;
            }
            else {
              int v16 = (std::string *)v69.__r_.__value_.__r.__words[0];
            }
            v16->__r_.__value_.__s.__data_[v15] ^= v10;
            --v9;
          }
          while (v9);
          char v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        ++v68;
        if (v7 < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        ++v3;
        uint64_t v2 = *((void *)this + 6);
      }
      while (v3 < (*((void *)this + 7) - v2) >> 3);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v69;
    }
    uint64_t v17 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      operator delete(*v17);
    }
    *(_OWORD *)uint64_t v17 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((void *)this + ++*(void *)(result + 24) = *((void *)&__p[0].__r_.__value_.__l + 2);
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v66);
    if (*((uint64_t *)this + 4) >= 1)
    {
      uint64_t v18 = 0;
      std::string::size_type v19 = *MEMORY[0x263F8C2C8];
      std::string::size_type v20 = *(void *)(MEMORY[0x263F8C2C8] + 24);
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        size_t v21 = strlen(*(const char **)(*((void *)this + 6) + 8 * v18));
        std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((void *)this + 6) + 8 * v18), v21);
        if ((v61 & 0x80u) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = __dst;
        }
        if ((v61 & 0x80u) == 0) {
          uint64_t v23 = v61;
        }
        else {
          uint64_t v23 = v60;
        }
        unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)p_dst, v23);
        LOBYTE(v56) = 9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v56, 1);
        std::ostream::operator<<();
        if ((char)v61 < 0) {
          operator delete(__dst);
        }
        std::stringbuf::str();
        if ((v61 & 0x80u) == 0) {
          unint64_t v25 = (char *)&__dst;
        }
        else {
          unint64_t v25 = (char *)__dst;
        }
        std::stringbuf::str();
        int v26 = v58;
        unsigned __int8 v27 = v58;
        if ((v58 & 0x80u) != 0) {
          int v26 = v57;
        }
        if (v26 >= 1)
        {
          uint64_t v28 = v26;
          do
          {
            char v30 = *v25++;
            char v29 = v30;
            int v31 = v66++;
            BOOL v13 = -v31 < 0;
            int v32 = -v31 & 0x1F;
            int v33 = v31 & 0x1F;
            if (!v13) {
              int v33 = -v32;
            }
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v34 = &v67;
            }
            else {
              char v34 = (std::string *)v67.__r_.__value_.__r.__words[0];
            }
            v34->__r_.__value_.__s.__data_[v33] ^= v29;
            --v28;
          }
          while (v28);
          unsigned __int8 v27 = v58;
        }
        if ((v27 & 0x80) != 0) {
          operator delete(v56);
        }
        if ((char)v61 < 0) {
          operator delete(__dst);
        }
        __p[0].__r_.__value_.__r.__words[0] = v19;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v19 - 24)) = v20;
        __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
        if (v64 < 0) {
          operator delete(v63);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x210559500](v65);
        ++v18;
      }
      while (v18 < *((void *)this + 4));
    }
    uint64_t v35 = (fst::SymbolTableImpl *)*((void *)this + 18);
    if (v35 != (fst::SymbolTableImpl *)((char *)this + 152))
    {
      std::string::size_type v36 = *MEMORY[0x263F8C2C8];
      std::string::size_type v37 = *(void *)(MEMORY[0x263F8C2C8] + 24);
      do
      {
        if (*((void *)v35 + 4) >= *((void *)this + 4))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          size_t v38 = strlen(*(const char **)(*((void *)this + 6) + 8 * *((void *)v35 + 5)));
          std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((void *)this + 6) + 8 * *((void *)v35 + 5)), v38);
          if ((v61 & 0x80u) == 0) {
            uint64_t v39 = &__dst;
          }
          else {
            uint64_t v39 = __dst;
          }
          if ((v61 & 0x80u) == 0) {
            uint64_t v40 = v61;
          }
          else {
            uint64_t v40 = v60;
          }
          unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v39, v40);
          LOBYTE(v56) = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v56, 1);
          std::ostream::operator<<();
          if ((char)v61 < 0) {
            operator delete(__dst);
          }
          std::stringbuf::str();
          if ((v61 & 0x80u) == 0) {
            uint64_t v42 = (char *)&__dst;
          }
          else {
            uint64_t v42 = (char *)__dst;
          }
          std::stringbuf::str();
          int v43 = v58;
          unsigned __int8 v44 = v58;
          if ((v58 & 0x80u) != 0) {
            int v43 = v57;
          }
          if (v43 >= 1)
          {
            uint64_t v45 = v43;
            do
            {
              char v47 = *v42++;
              char v46 = v47;
              int v48 = v66++;
              BOOL v13 = -v48 < 0;
              int v49 = -v48 & 0x1F;
              int v50 = v48 & 0x1F;
              if (!v13) {
                int v50 = -v49;
              }
              if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v51 = &v67;
              }
              else {
                int v51 = (std::string *)v67.__r_.__value_.__r.__words[0];
              }
              v51->__r_.__value_.__s.__data_[v50] ^= v46;
              --v45;
            }
            while (v45);
            unsigned __int8 v44 = v58;
          }
          if ((v44 & 0x80) != 0) {
            operator delete(v56);
          }
          if ((char)v61 < 0) {
            operator delete(__dst);
          }
          __p[0].__r_.__value_.__r.__words[0] = v36;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v36 - 24)) = v37;
          __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
          if (v64 < 0) {
            operator delete(v63);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x210559500](v65);
        }
        uint64_t v52 = (fst::SymbolTableImpl *)*((void *)v35 + 1);
        if (v52)
        {
          do
          {
            unint64_t v53 = v52;
            uint64_t v52 = *(fst::SymbolTableImpl **)v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            unint64_t v53 = (fst::SymbolTableImpl *)*((void *)v35 + 2);
            BOOL v54 = *(void *)v53 == (void)v35;
            uint64_t v35 = v53;
          }
          while (!v54);
        }
        uint64_t v35 = v53;
      }
      while (v53 != (fst::SymbolTableImpl *)((char *)this + 152));
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v67;
    }
    long long v55 = (void **)((char *)this + 200);
    if (*((char *)this + 223) < 0) {
      operator delete(*v55);
    }
    *(_OWORD *)long long v55 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((void *)this + 27) = *((void *)&__p[0].__r_.__value_.__l + 2);
    *((unsigned char *)this + 172) = 1;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20CEA876C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  if (*(char *)(v18 - 89) < 0) {
    operator delete(*(void **)(v18 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_20CEA8960(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DenseSymbolMap::InsertOrFind(fst::internal::DenseSymbolMap *this, uint64_t a2)
{
  if ((float)((float)(unint64_t)((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3) * 0.75) <= (float)(unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3)) {
    fst::internal::DenseSymbolMap::Rehash(this);
  }
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, a2);
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = v4 & v5;
  uint64_t v8 = *(void *)(v6 + 8 * (v4 & v5));
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  if (v8 == *(void *)this)
  {
LABEL_9:
    *(void *)(v6 + 8 * v7) = (*((void *)this + 2) - v9) >> 3;
    operator new[]();
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::value_type v11 = (const char *)a2;
  }
  else {
    std::string::value_type v11 = *(const char **)a2;
  }
  while (strcmp(*(const char **)(v9 + 8 * v8), v11))
  {
    uint64_t v7 = (v7 + 1) & v5;
    uint64_t v8 = *(void *)(v6 + 8 * v7);
    if (v8 == v10) {
      goto LABEL_9;
    }
  }
  return v8;
}

unint64_t fst::SymbolTableImpl::GetNthKey(fst::SymbolTableImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return -1;
  }
  unint64_t v2 = a2;
  uint64_t v4 = *((void *)this + 6);
  if (a2 >= (*((void *)this + 7) - v4) >> 3) {
    return -1;
  }
  if (*((void *)this + 4) <= (int64_t)a2)
  {
    uint64_t v5 = *(char **)(v4 + 8 * a2);
    size_t v6 = strlen(v5);
    std::string::basic_string[abi:ne180100](__p, v5, v6);
    uint64_t v7 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
    unint64_t v2 = v7;
    if (v7 != -1)
    {
      uint64_t v8 = *((void *)this + 4);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v10 = v7 - v8;
      if (v10 < 0 == v9) {
        unint64_t v2 = *(void *)(*((void *)this + 15) + 8 * v10);
      }
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

uint64_t fst::SymbolTableImpl::Read(void *a1)
{
  int v8 = 0;
  std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v7 = 0;
    LODWORD(v5.__r_.__value_.__l.__data_) = 0;
    std::istream::read();
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  unint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::Read: read failed", 30);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20CEA904C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::SymbolTableImpl::Write(uint64_t a1, void *a2)
{
  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  long long __p = *(void **)(a1 + 24);
  std::ostream::write();
  long long __p = (void *)((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  std::ostream::write();
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      int64_t v7 = *(void *)(a1 + 32);
      int v8 = (void *)v6;
      if ((uint64_t)v6 >= v7) {
        int v8 = *(void **)(*(void *)(a1 + 120) - 8 * v7 + 8 * v6);
      }
      BOOL v9 = *(char **)(v5 + 8 * v6);
      size_t v10 = strlen(v9);
      std::string::basic_string[abi:ne180100](&__p, v9, v10);
      int v11 = v18;
      if ((v18 & 0x80u) != 0) {
        int v11 = v17;
      }
      int v19 = v11;
      std::ostream::write();
      std::ostream::write();
      if ((char)v18 < 0) {
        operator delete(__p);
      }
      long long __p = v8;
      std::ostream::write();
      ++v6;
      uint64_t v5 = *(void *)(a1 + 48);
    }
    while (v6 < (*(void *)(a1 + 56) - v5) >> 3);
  }
  std::ostream::flush();
  int v12 = *(_DWORD *)((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    char v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
    int v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::Write: write failed", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  return v12 == 0;
}

void sub_20CEA9324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::AddTable(fst::SymbolTable *this, const fst::SymbolTable *a2)
{
  fst::SymbolTable::MutateCheck((uint64_t)this);
  unint64_t v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
  uint64_t v5 = (*(uint64_t (**)(const fst::SymbolTable *, void))(*(void *)a2 + 128))(a2, 0);
  if (v4)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)this + 1);
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
      fst::SymbolTableImpl::AddSymbol(v8, (uint64_t)__p, *(void *)(v8 + 24));
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (++v7 < v4) {
        uint64_t v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(void *)a2 + 128))(a2, v7);
      }
    }
    while (v4 != v7);
  }
}

void sub_20CEA9490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::MutateCheck(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  int v2 = *(_DWORD *)(v1 + 168);
  if (v2 >= 2)
  {
    *(_DWORD *)(v1 + 168) = v2 - 1;
    operator new();
  }
  return this;
}

void sub_20CEA950C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

BOOL fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 16);
  }
  uint64_t v23 = v3;
  if (v3)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, 0);
    if (v6)
    {
      uint64_t v8 = v7;
      int v9 = 0;
      uint64_t v10 = 0;
      unint64_t v24 = *(void **)(MEMORY[0x263F8C2C8] + 24);
      unint64_t v25 = (void *)*MEMORY[0x263F8C2C8];
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
        BOOL v12 = v8 >= 0 || *(unsigned char *)a3 != 0;
        if (((v12 | v9) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
          char v13 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
          int v14 = (void *)fst::cerr(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Negative symbol table entry when not allowed", 44);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
          if ((char)v29 < 0) {
            operator delete(__p[0]);
          }
          int v9 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(__p, a1, v8);
        if ((v29 & 0x80u) == 0) {
          int v15 = __p;
        }
        else {
          int v15 = (void **)__p[0];
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v16 = v29;
        }
        else {
          uint64_t v16 = (uint64_t)__p[1];
        }
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v15, v16);
        unsigned __int8 v18 = (unsigned char *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0) {
          unsigned __int8 v18 = *(unsigned char **)(a3 + 8);
        }
        LOBYTE(v26) = *v18;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v26, 1);
        int v19 = (void *)std::ostream::operator<<();
        LOBYTE(v26) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v26, 1);
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        std::stringbuf::str();
        std::ostream::write();
        if (v27 < 0) {
          operator delete(v26);
        }
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        v30[0] = v25;
        *(void **)((char *)v30 + *((void *)v25 - 3)) = v24;
        v30[1] = (void *)(MEMORY[0x263F8C318] + 16);
        if (v33 < 0) {
          operator delete(v32);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x210559500](&v34);
        if (++v10 < v6) {
          uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10);
        }
      }
      while (v6 != v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "ERROR");
    std::string::size_type v20 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v30);
    size_t v21 = (void *)fst::cerr(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Missing required field separator", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  return v23 != 0;
}

void sub_20CEA991C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  *(void *)this = -1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<long long>::vector((void *)this + 5, 0x10uLL);
  uint64_t v3 = (void *)*((void *)this + 5);
  int v2 = (void *)*((void *)this + 6);
  for (*((void *)this + 8) = v2 - v3 - 1; v3 != v2; ++v3)
    *uint64_t v3 = *(void *)this;
  return this;
}

void sub_20CEA9A20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this, const fst::internal::DenseSymbolMap *a2)
{
  *(void *)this = -1;
  std::vector<char const*>::vector((void *)this + 1, (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 5, *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  if (*((void *)this + 2) != *((void *)this + 1))
  {
    strlen(**((const char ***)a2 + 1));
    operator new[]();
  }
  return this;
}

void sub_20CEA9B3C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::DenseSymbolMap::~DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  unint64_t v4 = (char *)this + 8;
  int v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    int v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x2105595C0](v2[v5], 0x1000C8077774924);
        int v2 = (void *)*((void *)this + 1);
        uint64_t v3 = (void *)*((void *)this + 2);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  unint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
    int v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void fst::internal::DenseSymbolMap::Rehash(fst::internal::DenseSymbolMap *this)
{
  int v2 = (char *)this + 40;
  std::vector<long long>::resize((uint64_t)this + 40, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
  unint64_t v4 = *(void **)v2;
  uint64_t v3 = (void *)*((void *)v2 + 1);
  for (*((void *)v2 + 3) = (((uint64_t)v3 - *(void *)v2) >> 3) - 1; v4 != v3; ++v4)
    void *v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (*((void *)this + 2) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(v5 + 8 * v6));
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)__p);
      uint64_t v8 = *((void *)this + 8);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v8 & v7;
      uint64_t v10 = *((void *)this + 5);
      if (*(void *)(v10 + 8 * (v8 & v7)) != *(void *)this)
      {
        do
          uint64_t v9 = *((void *)this + 8) & (v9 + 1);
        while (*(void *)(v10 + 8 * v9) != *(void *)this);
      }
      *(void *)(v10 + 8 * v9) = v6++;
      uint64_t v5 = *((void *)this + 1);
    }
    while (v6 < (*((void *)this + 2) - v5) >> 3);
  }
}

uint64_t fst::internal::DenseSymbolMap::Find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a1;
  uint64_t v8 = v4 & v5;
  uint64_t v9 = *(void *)(v6 + 8 * (v4 & v5));
  if (v9 == *a1) {
    return v7;
  }
  uint64_t v10 = a1[1];
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v2 = *(void *)v2;
  }
  while (strcmp(*(const char **)(v10 + 8 * v9), (const char *)v2))
  {
    uint64_t v8 = (v8 + 1) & v5;
    uint64_t v9 = *(void *)(v6 + 8 * v8);
    if (v9 == v7) {
      return v7;
    }
  }
  return v9;
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void fst::SymbolTable::~SymbolTable(fst::SymbolTable *this)
{
  fst::SymbolTable::~SymbolTable(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t v1;
  int v2;
  void *v3;

  *(void *)this = off_26C207868;
  uint64_t v1 = *((void *)this + 1);
  unint64_t v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    if (*(char *)(v1 + 223) < 0) {
      operator delete(*(void **)(v1 + 200));
    }
    if (*(char *)(v1 + 199) < 0) {
      operator delete(*(void **)(v1 + 176));
    }
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v1 + 144, *(void **)(v1 + 152));
    uint64_t v3 = *(void **)(v1 + 120);
    if (v3)
    {
      *(void *)(v1 + 128) = v3;
      operator delete(v3);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v1 + 40));
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x2105595E0](v1, 0x10B2C404FCE5648);
  }
}

void fst::SymbolTable::Copy(fst::SymbolTable *this)
{
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::SymbolTable::MutateCheck(a1);
  uint64_t v6 = *(void *)(a1 + 8);
  return fst::SymbolTableImpl::AddSymbol(v6, a2, a3);
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t a1, uint64_t a2)
{
  fst::SymbolTable::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 24);
  return fst::SymbolTableImpl::AddSymbol(v4, a2, v5);
}

void fst::SymbolTable::CheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
}

void fst::SymbolTable::LabeledCheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
}

BOOL fst::SymbolTable::Write(uint64_t a1, void *a2)
{
  return fst::SymbolTableImpl::Write(*(void *)(a1 + 8), a2);
}

void *fst::SymbolTable::Find@<X0>(fst::SymbolTableImpl **this@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  return fst::SymbolTableImpl::Find(this[1], a2, a3);
}

uint64_t fst::SymbolTable::Find(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  uint64_t result = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (result != -1)
  {
    uint64_t v4 = v2[4];
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (v6 < 0 == v5) {
      return *(void *)(v2[15] + 8 * v6);
    }
  }
  return result;
}

uint64_t fst::SymbolTable::Find(fst::SymbolTableImpl **this, char *a2)
{
  return fst::SymbolTableImpl::Find(this[1], a2);
}

uint64_t fst::SymbolTable::AvailableKey(fst::SymbolTable *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t fst::SymbolTable::NumSymbols(fst::SymbolTable *this)
{
  return (uint64_t)(*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 3;
}

unint64_t fst::SymbolTable::GetNthKey(fst::SymbolTableImpl **this, unint64_t a2)
{
  return fst::SymbolTableImpl::GetNthKey(this[1], a2);
}

void *fst::SymbolTable::GetNthSymbol@<X0>(fst::SymbolTableImpl **this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::SymbolTableImpl::GetNthSymbol(this[1], a2, a3);
}

fst::CheckSummer *fst::CheckSummer::CheckSummer(fst::CheckSummer *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::resize((std::string *)((char *)this + 8), 0x20uLL, 0);
  return this;
}

void sub_20CEAA038(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, const fst::SymbolTableImpl *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2], (const fst::SymbolTableImpl *)((char *)a2 + 40));
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3);
  std::map<long long,long long>::map[abi:ne180100]((uint64_t *)&this[6], (uint64_t)a2 + 144);
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_20CEAA1B4(_Unwind_Exception *a1)
{
  BOOL v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 128) = v5;
    operator delete(v5);
  }
  fst::internal::DenseSymbolMap::~DenseSymbolMap(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_20CEAA238(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    BOOL v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(uint64_t **a1, void *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, uint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          BOOL v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        BOOL v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    std::string::size_type v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          std::string::size_type v20 = (void *)*v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        std::string::size_type v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      size_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void fst::SymbolTableImpl::CheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 199) < 0)
  {
    long long v4 = (const std::string::value_type *)*((void *)this + 22);
    std::string::size_type v5 = *((void *)this + 23);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
}

void fst::SymbolTableImpl::LabeledCheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 223) < 0)
  {
    long long v4 = (const std::string::value_type *)*((void *)this + 25);
    std::string::size_type v5 = *((void *)this + 26);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

void *fst::SymbolTableImpl::Find@<X0>(fst::SymbolTableImpl *this@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 < 0 || *((void *)this + 4) <= a2)
  {
    long long v4 = (void *)*((void *)this + 19);
    if (!v4) {
      goto LABEL_18;
    }
    std::string::size_type v5 = (void *)((char *)this + 152);
    do
    {
      int64_t v6 = v4[4];
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (!v7) {
        std::string::size_type v5 = v4;
      }
      long long v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 == (void *)((char *)this + 152)) {
      goto LABEL_18;
    }
    if (v5[4] > a2) {
      goto LABEL_18;
    }
    a2 = v5[5];
    if (a2 < 0) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = *((void *)this + 6);
  if (a2 >= (unint64_t)((*((void *)this + 7) - v9) >> 3))
  {
LABEL_18:
    return std::string::basic_string[abi:ne180100]<0>(a3, &byte_20D5A22AE);
  }
  else
  {
    uint64_t v10 = *(char **)(v9 + 8 * a2);
    size_t v11 = strlen(v10);
    return std::string::basic_string[abi:ne180100](a3, v10, v11);
  }
}

uint64_t fst::SymbolTableImpl::Find(fst::SymbolTableImpl *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = *((void *)this + 4);
    BOOL v6 = __OFSUB__(v3, v5);
    uint64_t v7 = v3 - v5;
    if (v7 < 0 == v6) {
      uint64_t v4 = *(void *)(*((void *)this + 15) + 8 * v7);
    }
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void *fst::SymbolTableImpl::GetNthSymbol@<X0>(fst::SymbolTableImpl *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0
    || (uint64_t v4 = *((void *)this + 6), a2 >= (*((void *)this + 7) - v4) >> 3)
    || *((void *)this + 4) > (int64_t)a2)
  {
    return std::string::basic_string[abi:ne180100]<0>(a3, &byte_20D5A22AE);
  }
  else
  {
    BOOL v6 = *(char **)(v4 + 8 * a2);
    size_t v7 = strlen(v6);
    return std::string::basic_string[abi:ne180100](a3, v6, v7);
  }
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20CEAA8D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    size_t v11 = (uint64_t *)operator new(0x30uLL);
    void v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_20CEAAA50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<char const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20CEAAAC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void fst::SplitToVector(char *__s1, char *__s2, void **a3, int a4)
{
  if (__s1)
  {
    uint64_t v7 = __s1;
    uint64_t v8 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v9 = strpbrk(v7, __s2);
      unint64_t v10 = v9;
      if (v9) {
        char *v9 = 0;
      }
      if (!a4 || *v7)
      {
        uint64_t v12 = (char **)a3[1];
        unint64_t v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = ((char *)v12 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v11 - (void)*a3;
          uint64_t v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v17);
          }
          else {
            uint64_t v18 = 0;
          }
          int v19 = (char **)&v18[8 * v14];
          *int v19 = v7;
          unint64_t v13 = v19 + 1;
          size_t v21 = (char *)*a3;
          std::string::size_type v20 = (char *)a3[1];
          if (v20 != *a3)
          {
            do
            {
              uint64_t v22 = (char *)*((void *)v20 - 1);
              v20 -= 8;
              *--int v19 = v22;
            }
            while (v20 != v21);
            std::string::size_type v20 = (char *)*a3;
          }
          *a3 = v19;
          a3[1] = v13;
          a3[2] = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *uint64_t v12 = v7;
          unint64_t v13 = v12 + 1;
        }
        a3[1] = v13;
      }
      uint64_t v7 = v10 + 1;
    }
    while (v10);
  }
}

unint64_t fst::ConvertToLegalCSymbol(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned __int8 *)(result + 23);
  uint64_t v3 = (unsigned char *)result;
  if (*(char *)(result + 23) < 0) {
    uint64_t v3 = *(unsigned char **)result;
  }
  uint64_t v4 = MEMORY[0x263EF8318];
  while (1)
  {
    unint64_t v5 = v1;
    if ((v2 & 0x80) != 0)
    {
      unint64_t v5 = *(void *)v1;
      uint64_t v2 = *(void *)(v1 + 8);
    }
    if (v3 == (unsigned char *)(v5 + v2)) {
      return result;
    }
    unsigned int v6 = (char)*v3;
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t result = *(_DWORD *)(v4 + 4 * v6 + 60) & 0x500;
      if (result) {
        goto LABEL_10;
      }
LABEL_9:
      *uint64_t v3 = 95;
      goto LABEL_10;
    }
    uint64_t result = __maskrune(v6, 0x500uLL);
    if (!result) {
      goto LABEL_9;
    }
LABEL_10:
    ++v3;
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
}

uint64_t fst::AlignInput()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v2[1] = 0;
  int v0 = 16;
  while (1)
  {
    std::istream::tellg();
    if (v5 < 0) {
      break;
    }
    if (v5 % 16)
    {
      std::istream::read();
      if (--v0) {
        continue;
      }
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)v2, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"AlignInput: can't determine stream position", 43);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20CEAAEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AlignOutput(void *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = 16;
  while (1)
  {
    uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
    if ((v3[32] & 5) != 0) {
      break;
    }
    (*(void (**)(void **__return_ptr))(**((void **)v3 + 5) + 32))(__p);
    if (v8 < 0) {
      break;
    }
    if (v8 % 16)
    {
      std::ostream::write();
      if (--v2) {
        continue;
      }
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"AlignOutput: can't determine stream position", 44);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20CEAB080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstHeader::Read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a4)
  {
    std::istream::tellg();
    uint64_t v6 = v24;
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::istream::read();
  std::string::basic_string[abi:ne180100]<0>(v22, "ERROR");
  fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)v22);
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"FstHeader::Read: Bad FST header: ", 33);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
  if ((v23 & 0x80000000) == 0)
  {
    if (!a4) {
      return 0;
    }
    goto LABEL_14;
  }
  operator delete(v22[0]);
  if (a4)
  {
LABEL_14:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v21 = v6;
    std::istream::seekg();
  }
  return 0;
}

void sub_20CEAB424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(char *)(v13 - 185) < 0) {
    operator delete(*(void **)(v13 - 208));
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstHeader::Write()
{
  return 1;
}

std::string *fst::FstReadOptions::FstReadOptions(std::string *this, long long *a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = a4;
  this[1].__r_.__value_.__r.__words[2] = a5;
  WORD2(this[2].__r_.__value_.__r.__words[0]) = 257;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)FLAGS_fst_read_mode);
  LODWORD(this[2].__r_.__value_.__l.__data_) = fst::FstReadOptions::ReadMode((uint64_t)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_20CEAB670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstReadOptions::ReadMode(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4 != 3)
    {
      if (v4 == 4 && **(_DWORD **)a1 == 1684104562) {
        return 0;
      }
      goto LABEL_15;
    }
    uint64_t v3 = *(_DWORD **)a1;
  }
  else
  {
    int v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v3 = (_DWORD *)a1;
    if (v2 != 3)
    {
      if (v2 == 4 && *(_DWORD *)a1 == 1684104562) {
        return 0;
      }
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Unknown file read mode ", 23);
      int v9 = *(char *)(a1 + 23);
      if (v9 >= 0) {
        uint64_t v10 = (_DWORD *)a1;
      }
      else {
        uint64_t v10 = *(_DWORD **)a1;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
  }
  int v5 = *(unsigned __int16 *)v3;
  int v6 = *((unsigned __int8 *)v3 + 2);
  if (v5 != 24941 || v6 != 112) {
    goto LABEL_15;
  }
  return 1;
}

void sub_20CEAB7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::cout(fst *this)
{
  return MEMORY[0x263F8C100];
}

uint64_t fst::cerr(fst *this)
{
  return MEMORY[0x263F8C0F8];
}

uint64_t fst::cin(fst *this)
{
  return MEMORY[0x263F8C0E8];
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
}

kaldi::LinearResample *kaldi::LinearResample::LinearResample(kaldi::LinearResample *this, uint64_t a2, int a3, float a4, int a5, const char *a6)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *(_OWORD *)((char *)this + ++*(void *)(result + 24) = 0u;
  *((void *)this + 11) = 0;
  char v7 = (void **)((char *)this + 88);
  *((_DWORD *)this + 3) = a5;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if ((int)a2 < 1
    || a3 < 1
    || a4 <= 0.0
    || ((float v8 = a4 + a4, v8 < (float)(int)a2) ? (v9 = v8 < (float)a3) : (v9 = 0), v9 ? (v10 = a5 <= 0) : (v10 = 1), v10))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"LinearResample", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/feat/resample.cc", (const char *)0x2E, "samp_rate_in_hz > 0.0 && samp_rate_out_hz > 0.0 && filter_cutoff_hz > 0.0 && filter_cutoff_hz*2 < samp_rate_in_hz && filter_cutoff_hz*2 < samp_rate_out_hz && num_zeros > 0", a6);
  }
  int v11 = kaldi::Gcd<int>(a2, a3);
  int v12 = *((_DWORD *)this + 1) / v11;
  *((_DWORD *)this + 4) = *(_DWORD *)this / v11;
  *((_DWORD *)this + 5) = v12;
  kaldi::LinearResample::SetIndexesAndWeights(this);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  kaldi::Vector<float>::Resize(v7, 0, 0, v13, v14);
  return this;
}

void sub_20CEAB974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::Vector<float>::Destroy(v11);
  a10 = (void **)(v10 + 48);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  char v14 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 32) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::Gcd<int>(uint64_t result, int a2)
{
  if (result && a2)
  {
    while (1)
    {
      LODWORD(result) = (int)result % a2;
      if (!result) {
        break;
      }
      a2 %= (int)result;
      if (!a2) {
        goto LABEL_11;
      }
    }
    LODWORD(result) = a2;
  }
  else
  {
    if (!(a2 | result))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Gcd", "../engine/common/libquasar/libkaldi/src/base/kaldi-math.h", 322);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Undefined GCD since m = 0, n = 0.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
    }
    if (!result) {
      LODWORD(result) = a2;
    }
  }
LABEL_11:
  if ((int)result >= 0) {
    return result;
  }
  else {
    return -(int)result;
  }
}

void kaldi::LinearResample::SetIndexesAndWeights(kaldi::LinearResample *this)
{
  std::vector<int>::resize((std::vector<int> *)this + 1, *((int *)this + 5));
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)this + 6, *((int *)this + 5));
  if (*((int *)this + 5) >= 1)
  {
    uint64_t v4 = 0;
    double v5 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    do
    {
      double v6 = (double)(int)v4 / (double)*((int *)this + 1);
      unsigned int v7 = vcvtpd_s64_f64((v6 - v5) * (double)*(int *)this);
      unsigned int v8 = vcvtmd_s64_f64((v5 + v6) * (double)*(int *)this) - v7;
      uint64_t v9 = v8 + 1;
      *(_DWORD *)(*((void *)this + 3) + 4 * v4) = v7;
      kaldi::Vector<float>::Resize((void **)(*((void *)this + 6) + 24 * v4), v9, 0, v2, v3);
      if ((v8 & 0x80000000) == 0)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *((void *)this + 6) + 24 * v4;
        uint64_t v12 = *(unsigned int *)(v11 + 8);
        do
        {
          if (v12 == v10) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v3);
          }
          int v13 = *(_DWORD *)this;
          float v14 = (double)(int)(v7 + v10) / (double)*(int *)this - v6;
          *(float *)(*(void *)v11 + 4 * v10++) = kaldi::LinearResample::FilterFunc(this, v14) / (float)v13;
        }
        while (v9 != v10);
      }
      ++v4;
    }
    while (v4 < *((int *)this + 5));
  }
}

void kaldi::LinearResample::Reset(kaldi::LinearResample *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  kaldi::Vector<float>::Resize((void **)this + 11, 0, 0, a4, a5);
}

uint64_t kaldi::LinearResample::GetNumOutputSamples(kaldi::LinearResample *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v5 = a3;
  int v8 = kaldi::Lcm<int>(*(unsigned int *)this, *((_DWORD *)this + 1), a3, a4, a5);
  uint64_t v9 = v8 / *(_DWORD *)this * a2;
  if ((v5 & 1) == 0)
  {
    float v10 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    v9 -= (int)vcvtms_s32_f32((float)v8 * v10);
  }
  if (v9 < 1) {
    return 0;
  }
  else {
    return v9 / (v8 / *((_DWORD *)this + 1))
  }
         - (v9 / (v8 / *((_DWORD *)this + 1)) * (v8 / *((_DWORD *)this + 1)) == v9)
         + 1;
}

uint64_t kaldi::Lcm<int>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)a1 < 1 || a2 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Lcm", "../engine/common/libquasar/libkaldi/src/base/kaldi-math.h", (const char *)0x155, "m > 0 && n > 0", a5);
  }
  int v6 = a1;
  int v7 = kaldi::Gcd<int>(a1, a2);
  return (v6 / v7 * v7 * (a2 / v7));
}

float kaldi::LinearResample::FilterFunc(kaldi::LinearResample *this, float a2)
{
  double v3 = fabsf(a2);
  double v4 = (double)*((int *)this + 3);
  float v5 = *((float *)this + 2);
  double v6 = v5;
  float v7 = 0.0;
  if (v4 / (v6 + v6) > v3) {
    float v7 = (cos(v6 * 6.28318531 / v4 * a2) + 1.0) * 0.5;
  }
  if (a2 == 0.0) {
    float v8 = v5 + v5;
  }
  else {
    float v8 = sin(v6 * 6.28318531 * a2) / (a2 * 3.14159265);
  }
  return v7 * v8;
}

void kaldi::LinearResample::Resample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v6 = a3;
  uint64_t v9 = *(int *)(a2 + 8);
  float v10 = (void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 72) + v9;
  uint64_t NumOutputSamples = kaldi::LinearResample::GetNumOutputSamples((kaldi::LinearResample *)a1, v11, a3, a4, a5);
  uint64_t v15 = *(void *)(a1 + 80);
  if (NumOutputSamples < v15) {
    kaldi::KaldiAssertFailure_((kaldi *)"Resample", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/feat/resample.cc", (const char *)0x9F, "tot_output_samp >= output_sample_offset_", v14);
  }
  uint64_t v16 = NumOutputSamples;
  kaldi::Vector<float>::Resize((void **)a4, (NumOutputSamples - v15), 0, v13, v14);
  uint64_t v20 = *(void *)(a1 + 80);
  if (v20 < v16)
  {
    for (uint64_t i = *(void *)(a1 + 80); i != v16; ++i)
    {
      uint64_t v22 = *(int *)(a1 + 20);
      uint64_t v23 = i / v22;
      LODWORD(v22) = i % v22;
      uint64_t v24 = *(void *)(a1 + 48) + 24 * (int)v22;
      uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * (int)v22)
          + v23 * *(unsigned int *)(a1 + 16)
          - *(void *)(a1 + 72);
      uint64_t v26 = *(unsigned int *)(v24 + 8);
      if ((v25 & 0x80000000) != 0 || (int)v26 + (int)v25 > (int)v9)
      {
        if ((int)v26 >= 1)
        {
          int v27 = 0;
          uint64_t v28 = *(float **)v24;
          float v29 = 0.0;
          int v30 = v25;
          while (v30 < 0)
          {
            unsigned int v33 = *(_DWORD *)(a1 + 96);
            if ((int)(v30 + v33) >= 0)
            {
              if (v33 <= v30 + v33) {
                goto LABEL_30;
              }
              unsigned int v31 = v33 + v27 + v25;
              uint64_t v32 = *(void *)(a1 + 88);
LABEL_15:
              float v29 = v29 + (float)(*v28 * *(float *)(v32 + 4 * v31));
              goto LABEL_19;
            }
            if (v30 >= (int)v9)
            {
LABEL_18:
              if ((v6 & 1) == 0) {
                kaldi::KaldiAssertFailure_((kaldi *)"Resample", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/feat/resample.cc", (const char *)0xC3, "flush", v19);
              }
            }
LABEL_19:
            ++v27;
            ++v30;
            ++v28;
            if (!--v26) {
              goto LABEL_24;
            }
          }
          if (v30 >= (int)v9) {
            goto LABEL_18;
          }
          unsigned int v31 = v30;
          uint64_t v32 = *(void *)a2;
          if (*(_DWORD *)(a2 + 8) <= v30) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x61, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v19);
          }
          goto LABEL_15;
        }
        float v29 = 0.0;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        if ((v26 + v25) > *(_DWORD *)(a2 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
        }
        uint64_t v34 = *(void *)a2 + 4 * v25;
        LODWORD(v35) = v26;
        float v29 = kaldi::VecVec<float>((uint64_t)&v34, v24, v17, v18, v19);
        uint64_t v20 = *(void *)(a1 + 80);
      }
LABEL_24:
      if (*(_DWORD *)(a4 + 8) <= (i - v20)) {
LABEL_30:
      }
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v19);
      *(float *)(*(void *)a4 + 4 * ((int)i - (int)v20)) = v29;
    }
  }
  if (v6)
  {
    *float v10 = 0;
    v10[1] = 0;
    kaldi::Vector<float>::Resize((void **)(a1 + 88), 0, 0, v18, v19);
  }
  else
  {
    kaldi::LinearResample::SetRemainder(a1, a2, v17, v18, v19);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v16;
  }
}

void kaldi::LinearResample::SetRemainder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v7 = (void **)(a1 + 88);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  kaldi::Vector<float>::Resize((void **)&v28, *(unsigned int *)(a1 + 96), 1, a4, a5);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v28, (uint64_t)v7, v8, v9, v10);
  LODWORD(v11) = vcvtps_s32_f32((float)(*(_DWORD *)(a1 + 12) * *(_DWORD *)a1) / *(float *)(a1 + 8));
  kaldi::Vector<float>::Resize(v7, v11, 0, v12, v13);
  uint64_t v15 = *(int *)(a1 + 96);
  if ((int)v15 >= 1)
  {
    uint64_t v16 = -v15;
    uint64_t v17 = *(int *)(a2 + 8);
    uint64_t v18 = (int)v29;
    long long v19 = v28;
    uint64_t v20 = *(_DWORD **)a2;
    uint64_t v21 = 4 * *(unsigned int *)(a1 + 96) - 4 * *(int *)(a1 + 96);
    uint64_t v22 = v17 - v15;
    uint64_t v23 = 1 - v15;
    while (v22 < 0)
    {
      if (v18 + v22 >= 0)
      {
        if (v18 <= (int)v18 + (int)v22)
        {
          uint64_t v27 = 104;
LABEL_13:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)v27, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v14);
        }
        int v24 = v16 + v17 + v18;
        uint64_t v25 = v19;
        goto LABEL_9;
      }
LABEL_10:
      LODWORD(v16) = v16 + 1;
      v21 += 4;
      ++v22;
      if (!v23++) {
        goto LABEL_11;
      }
    }
    int v24 = v22;
    uint64_t v25 = v20;
    if (v17 <= v22)
    {
      uint64_t v27 = 97;
      goto LABEL_13;
    }
LABEL_9:
    *(_DWORD *)((char *)*v7 + v21) = v25[v24];
    goto LABEL_10;
  }
LABEL_11:
  kaldi::Vector<float>::Destroy((uint64_t)&v28);
}

void sub_20CEAC1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESTensorData::~ESTensorData(kaldi::quasar::ESTensorData *this)
{
  *(void *)this = off_26C210DC8;
  uint64_t v2 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v2) {
    free(v2);
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

{
  uint64_t vars8;

  kaldi::quasar::ESTensorData::~ESTensorData(this);
  JUMPOUT(0x2105595E0);
}

uint64_t kaldi::quasar::ESNetworkConfig::ESNetworkConfig(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)a1 = off_26C210F30;
  double v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_20CEAC314(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, const char *a5)
{
  memset(&__str, 0, sizeof(__str));
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  float v5 = a2 + 4;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    uint64_t v9 = (std::string *)(a1 + 112);
    float v10 = (std::string *)(a1 + 88);
    uint64_t v45 = (uint64_t **)(a1 + 64);
    while (1)
    {
      char v47 = 0;
      size_t v48 = 0;
      uint64_t v49 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v47, a4, a5);
      uint64_t v11 = *(unsigned __int8 *)(a4 + 23);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a4 + 8);
      }
      int v13 = HIBYTE(v49);
      if (!v11 || (v49 >= 0 ? (size_t v14 = HIBYTE(v49)) : (size_t v14 = v48), v14 != v11))
      {
LABEL_21:
        if ((v49 & 0x8000000000000000) == 0)
        {
          int v19 = 0;
          int v20 = 0;
          int v21 = 0;
          uint64_t v22 = &v47;
          switch(HIBYTE(v49))
          {
            case 0xA:
              goto LABEL_26;
            case 0xE:
              goto LABEL_34;
            case 0x10:
              goto LABEL_57;
            case 0x11:
              goto LABEL_42;
            default:
              goto LABEL_72;
          }
        }
        goto LABEL_24;
      }
      uint64_t v15 = v12 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v49 < 0) {
        break;
      }
      if (!HIBYTE(v49)) {
        goto LABEL_66;
      }
      uint64_t v16 = &v47;
      uint64_t v17 = HIBYTE(v49);
      do
      {
        if (*(unsigned __int8 *)v16 != *v15) {
          goto LABEL_21;
        }
        uint64_t v16 = (void **)((char *)v16 + 1);
        ++v15;
        --v17;
      }
      while (v17);
      int v18 = 0;
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_64:
        if (!v18) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
LABEL_19:
      operator delete(v47);
      if ((v18 & 1) == 0) {
        goto LABEL_66;
      }
LABEL_65:
      if ((*((unsigned char *)v5 + *(void *)(*a2 - 24)) & 2) != 0) {
        goto LABEL_66;
      }
    }
    uint64_t v23 = v47;
    if (!memcmp(v47, v15, v48))
    {
      operator delete(v23);
      goto LABEL_66;
    }
LABEL_24:
    size_t v24 = v48;
    if (v48 == 10)
    {
      int v19 = 1;
      uint64_t v22 = (void **)v47;
LABEL_26:
      uint64_t v25 = *v22;
      int v26 = *((unsigned __int16 *)v22 + 4);
      if (v25 == (void *)0x6F6974636E75463CLL && v26 == 15982)
      {
        p_str = &__str;
        goto LABEL_62;
      }
      if (!v19) {
        goto LABEL_72;
      }
      size_t v24 = v48;
    }
    if (v24 == 14)
    {
      int v20 = 1;
      uint64_t v22 = (void **)v47;
LABEL_34:
      uint64_t v28 = *v22;
      uint64_t v29 = *(uint64_t *)((char *)v22 + 6);
      if (v28 == (void *)0x5474757074754F3CLL && v29 == 0x3E726F736E655474)
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v50, a4, a5);
        v46[0] = (long long *)v50;
        std::string::size_type v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, v50, (uint64_t)&std::piecewise_construct, v46);
        std::string::operator=((std::string *)(v37 + 7), &__str);
        goto LABEL_63;
      }
      if (!v20) {
        goto LABEL_72;
      }
      size_t v24 = v48;
    }
    if (v24 != 17) {
      goto LABEL_51;
    }
    int v21 = 1;
    uint64_t v22 = (void **)v47;
LABEL_42:
    unsigned int v31 = *v22;
    uint64_t v32 = v22[1];
    int v33 = *((unsigned __int8 *)v22 + 16);
    BOOL v35 = v31 == (void *)0x657475706D6F433CLL && v32 == (void *)0x6D726F6674616C50 && v33 == 62;
    p_str = v10;
    if (!v35)
    {
      if (!v21)
      {
        if (v13 != 16) {
          goto LABEL_72;
        }
        uint64_t v22 = &v47;
        goto LABEL_57;
      }
      size_t v24 = v48;
LABEL_51:
      if (v24 != 16) {
        goto LABEL_72;
      }
      uint64_t v22 = (void **)v47;
LABEL_57:
      uint64_t v39 = *v22;
      size_t v38 = v22[1];
      BOOL v40 = v39 == (void *)0x6F706B636568433CLL && v38 == (void *)0x3E656D614E746E69;
      p_str = v9;
      if (!v40)
      {
LABEL_72:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 265);
        unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Unknown token ", 14);
        if (v49 >= 0) {
          uint64_t v42 = &v47;
        }
        else {
          uint64_t v42 = (void **)v47;
        }
        if (v49 >= 0) {
          uint64_t v43 = HIBYTE(v49);
        }
        else {
          uint64_t v43 = v48;
        }
        unsigned __int8 v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
      }
    }
LABEL_62:
    kaldi::ReadToken(a2, a3, (uint64_t)p_str, a4, a5);
LABEL_63:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    int v18 = 1;
    if ((v49 & 0x8000000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_19;
  }
LABEL_66:
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20CEAC718(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESNetworkConfig::CreateComputeEngine(kaldi::quasar::ESNetworkConfig *this)
{
}

void sub_20CEAC7CC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40AAD5BB09);
  _Unwind_Resume(a1);
}

kaldi::quasar::ESNetworkPlan *kaldi::quasar::ESNetworkPlan::ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  *(void *)this = off_26C210E80;
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig((kaldi::quasar::ESNetworkPlan *)((char *)this + 8), a2);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = (char *)this + 264;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 78) = 1065353216;
  *((_WORD *)this + 160) = 0;
  kaldi::quasar::ESNetworkPlan::LoadNetwork((uint64_t)this, (uint64_t)this + 48);
  return this;
}

void sub_20CEAC8A8(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v1 + 264));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1 + 176);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::LoadNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 96;
  uint64_t v5 = (uint64_t *)(a1 + 96);
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    int v6 = *(unsigned __int8 *)(a1 + 119);
    switch(*(unsigned char *)(a1 + 119))
    {
      case 0:
        goto LABEL_44;
      case 1:
      case 2:
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_158;
      case 3:
        if (*(_WORD *)v5 == 20557 && *(unsigned char *)(a1 + 98) == 83) {
          goto LABEL_93;
        }
        if (*(_WORD *)v5 == 20547 && *(unsigned char *)(a1 + 98) == 85) {
          goto LABEL_93;
        }
        if ((v6 & 0x80) == 0) {
          goto LABEL_158;
        }
        goto LABEL_85;
      case 5:
        if (*(_DWORD *)v5 != 1096041805 || *(unsigned char *)(a1 + 100) != 76) {
          goto LABEL_158;
        }
        goto LABEL_50;
      case 7:
        goto LABEL_88;
      case 0xB:
        if (*v5 != 0x544E55525F454E41 || *(void *)(a1 + 99) != 0x454D49544E55525FLL) {
          goto LABEL_158;
        }
        goto LABEL_93;
      default:
        if (v6 != 15)
        {
          if (v6 != 18) {
            goto LABEL_158;
          }
          BOOL v13 = *v5 == 0x544E55525F454E41 && *(void *)(a1 + 104) == 0x455249445F454D49;
          if (!v13 || *(_WORD *)(a1 + 112) != 21571) {
            goto LABEL_158;
          }
          goto LABEL_93;
        }
        if (*v5 != 0x504D5F4C4154454DLL || *(void *)(a1 + 103) != 0x48504152475F5350) {
          goto LABEL_158;
        }
        goto LABEL_93;
    }
  }
  uint64_t v9 = *(void *)(a1 + 104);
  if (v9 > 10)
  {
    switch(v9)
    {
      case 11:
        if (*(void *)*v5 == 0x544E55525F454E41 && *(void *)(*v5 + 3) == 0x454D49544E55525FLL) {
          goto LABEL_93;
        }
        break;
      case 15:
        if (*(void *)*v5 == 0x504D5F4C4154454DLL && *(void *)(*v5 + 7) == 0x48504152475F5350) {
          goto LABEL_93;
        }
        goto LABEL_86;
      case 18:
        if (*(void *)*v5 == 0x544E55525F454E41
          && *(void *)(*v5 + 8) == 0x455249445F454D49
          && *(_WORD *)(*v5 + 16) == 21571)
        {
          goto LABEL_93;
        }
        break;
      default:
        goto LABEL_86;
    }
LABEL_158:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62, "MakeEspressoContext", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 295);
    uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Unknown platform: ", 18);
    int v53 = *(char *)(a1 + 119);
    if (v53 >= 0) {
      uint64_t v54 = v4;
    }
    else {
      uint64_t v54 = *(void *)(a1 + 96);
    }
    if (v53 >= 0) {
      uint64_t v55 = *(unsigned __int8 *)(a1 + 119);
    }
    else {
      uint64_t v55 = *(void *)(a1 + 104);
    }
    int v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v56, ", a typo in config file?");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  if (!v9)
  {
LABEL_44:
    uint64_t context = espresso_create_context();
    goto LABEL_101;
  }
  if (v9 == 3)
  {
    if (*(_WORD *)*v5 == 20557 && *(unsigned char *)(*v5 + 2) == 83) {
      goto LABEL_93;
    }
    if (*(_WORD *)*v5 == 20547 && *(unsigned char *)(*v5 + 2) == 85) {
      goto LABEL_93;
    }
LABEL_85:
    uint64_t v9 = *(void *)(a1 + 104);
    goto LABEL_86;
  }
  if (v9 != 5)
  {
LABEL_86:
    if (v9 == 7)
    {
      uint64_t v5 = (uint64_t *)*v5;
LABEL_88:
      int v24 = *(_DWORD *)v5;
      int v25 = *(_DWORD *)((char *)v5 + 3);
      if (v24 == 1599426627 && v25 == 1414283615) {
        goto LABEL_93;
      }
    }
    goto LABEL_158;
  }
  if (*(_DWORD *)*v5 != 1096041805 || *(unsigned char *)(*v5 + 4) != 76) {
    goto LABEL_158;
  }
LABEL_50:
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62, "MakeEspressoContext", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 284);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Using The Metal GPU backend (legacy, deprecated) ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
  }
LABEL_93:
  uint64_t context = espresso_create_context();
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v62, "MakeEspressoContext", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 297, 3);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Set compute platform to ", 24);
    int v28 = *(char *)(a1 + 119);
    if (v28 >= 0) {
      uint64_t v29 = v4;
    }
    else {
      uint64_t v29 = *(void *)(a1 + 96);
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(a1 + 119);
    }
    else {
      uint64_t v30 = *(void *)(a1 + 104);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v62);
  }
LABEL_101:
  if (!context) {
    uint64_t context = espresso_create_context();
  }
  *(void *)(a1 + 144) = context;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v61 = *(std::string *)a2;
  }
  uint64_t plan_and_load_network = espresso_create_plan_and_load_network();
  *(void *)(a1 + 168) = plan_and_load_network;
  if (!plan_and_load_network)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62, "LoadNetwork", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 395);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"plan_ != nullptr", 16);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  memset(v60, 0, sizeof(v60));
  c_network_get_input_names();
  uint64_t v57 = 0;
  unsigned __int8 v58 = 0;
  uint64_t v59 = 0;
  c_network_get_output_names();
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v62, 0, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 176, (uint64_t *)&v62);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v62);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v62, 0, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 216, (uint64_t *)&v62);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v62);
  if (espresso_plan_build())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62, "LoadNetwork", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 412);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"espresso_plan_build(plan_) == ESPRESSO_STATUS_SUCCESS", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  if (*(void *)(a1 + 168) != *(void *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62, "LoadNetwork", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 413);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"plan_ == network_.plan", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v62);
  }
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  espresso_get_additional_configuration_names();
  uint64_t v32 = (void **)v62;
  if (v62 == (void ***)v63)
  {
    BOOL v35 = 0;
    *(unsigned char *)(a1 + 320) = 0;
  }
  else
  {
    if (*((char *)v62 + 23) < 0)
    {
      uint64_t v34 = *v62;
      uint64_t v33 = (uint64_t)v62[1];
    }
    else
    {
      uint64_t v33 = *((unsigned __int8 *)v62 + 23);
      uint64_t v34 = (void **)v62;
    }
    if (v33 >= 13)
    {
      uint64_t v36 = (char *)v34 + v33;
      std::string::size_type v37 = v34;
      do
      {
        size_t v38 = (void **)memchr(v37, 98, v33 - 12);
        if (!v38) {
          break;
        }
        if (*v38 == (void *)0x6F635F6863746162 && *(void **)((char *)v38 + 5) == (void *)0x5F6769666E6F635FLL) {
          goto LABEL_124;
        }
        std::string::size_type v37 = (void **)((char *)v38 + 1);
        uint64_t v33 = v36 - (char *)v37;
      }
      while (v36 - (char *)v37 > 12);
      size_t v38 = (void **)v36;
LABEL_124:
      BOOL v41 = v38 != (void **)v36 && v38 == v34;
      *(unsigned char *)(a1 + 320) = v41;
    }
    else
    {
      *(unsigned char *)(a1 + 320) = 0;
    }
    if (*((char *)v32 + 23) < 0)
    {
      uint64_t v43 = v32;
      uint64_t v32 = (void **)*v32;
      uint64_t v42 = (uint64_t)v43[1];
    }
    else
    {
      uint64_t v42 = *((unsigned __int8 *)v32 + 23);
    }
    unsigned __int8 v44 = (char *)v32 + v42;
    if (v42 >= 13)
    {
      uint64_t v45 = v32;
      do
      {
        char v46 = (void **)memchr(v45, 119, v42 - 12);
        if (!v46) {
          break;
        }
        if (*v46 == (void *)0x6F635F6874646977 && *(void **)((char *)v46 + 5) == (void *)0x5F6769666E6F635FLL) {
          goto LABEL_143;
        }
        uint64_t v45 = (void **)((char *)v46 + 1);
        uint64_t v42 = v44 - (char *)v45;
      }
      while (v44 - (char *)v45 > 12);
    }
    char v46 = (void **)v44;
LABEL_143:
    BOOL v35 = v46 != (void **)v44 && v46 == v32;
  }
  *(unsigned char *)(a1 + 321) = v35;
  uint64_t v49 = v57;
  for (i = v58; v49 != i; uint64_t v49 = (long long *)((char *)v49 + 24))
  {
    LODWORD(v66) = 0;
    espresso_blob_is_dynamic();
    int v51 = (int)v66;
    char v65 = v49;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 280, (unsigned __int8 *)v49, (uint64_t)&std::piecewise_construct, &v65)+ 10) = v51;
  }
  int v66 = (void ***)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  uint64_t v62 = (void ***)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  uint64_t v62 = (void ***)v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this)
{
  *(void *)this = off_26C210E80;
  if (*((void *)this + 21) && espresso_plan_destroy())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "~ESNetworkPlan", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30);
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  if (espresso_context_destroy())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "~ESNetworkPlan", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 342);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30);
    goto LABEL_9;
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 280);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 256, *((void **)this + 33));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 176);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)this + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

{
  uint64_t vars8;

  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(this);
  JUMPOUT(0x2105595E0);
}

void kaldi::quasar::ESNetworkPlan::CreateData()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20CEAD43C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20CEAD53C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20CEAD634(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20CEAD72C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataInt32(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_20CEAD818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x2105595E0](v11, 0x1093C40B76D1C73);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataFloat(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_20CEAD8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x2105595E0](v11, 0x1093C40B76D1C73);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateConcat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(const void ***)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    if (*v2)
    {
      {
        memset(&v3[17], 0, 80);
        espresso_buffer_unpack_tensor_shape();
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "CreateConcat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 486);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rank > 0", 8);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
      }
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "CreateConcat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 482);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"es_data != nullptr", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  operator new();
}

uint64_t kaldi::quasar::ESTensorData::GetDataFloat(kaldi::quasar::ESTensorData *this)
{
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "GetDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 202);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

void *kaldi::quasar::ESNetworkPlan::CreateSplit@<X0>(const kaldi::quasar::ComputeEngineBufferItf *a1@<X1>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v5 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)a1 + 152))(a1, 0);
  uint64_t result = std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a2, v5);
  if (v5)
  {
    {
      memset(v13, 0, 80);
      uint64_t v12 = 0;
      espresso_buffer_unpack_tensor_shape();
      memset(__p, 0, sizeof(__p));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(__p, v13, (uint64_t)v13, 0);
      float v7 = (uint64_t *)__p[0];
      *(void *)__p[0] = 1;
      uint64_t v8 = v12;
      if (v12)
      {
        uint64_t v9 = 1;
        do
        {
          uint64_t v10 = *v7++;
          v9 *= v10;
          --v8;
        }
        while (v8);
      }
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "CreateSplit", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 548);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"src_buf != nullptr", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return result;
}

void sub_20CEAE464(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20CEAE484);
}

uint64_t kaldi::quasar::ESNetworkPlan::CreateSlice(kaldi::quasar::ESNetworkPlan *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, unsigned int a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((*(int (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 144))(a2) <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 571);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src->GetNumDims() >= 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (a3 < 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 572);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "0 <= start");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if ((int)a4 < a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 573);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "start <= end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  unsigned int v7 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)a2 + 152))(a2, 0);
  if (v7 < a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 575);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "end <= num_split");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (!v7) {
    operator new();
  }
  if (a3 || v7 != a4)
  {
    {
      memset(v17, 0, 80);
      unint64_t v16 = 0;
      espresso_buffer_unpack_tensor_shape();
      memset(__p, 0, sizeof(__p));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(__p, v17, (uint64_t)v17, 0);
      uint64_t v10 = (char *)__p[0];
      *(void *)__p[0] = (int)(a4 - a3);
      if (v16 >= 2)
      {
        unint64_t v11 = v16 - 1;
        uint64_t v12 = (uint64_t *)(v10 + 8);
        uint64_t v13 = 1;
        do
        {
          uint64_t v14 = *v12++;
          v13 *= v14;
          --v11;
        }
        while (v11);
      }
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 584);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_buf != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  uint64_t v8 = *(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 16);
  return v8(a2);
}

void sub_20CEAE948(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(uint64_t a1, long long **a2, unsigned char *a3, unsigned char *a4)
{
  if (*(void *)(a1 + 88))
  {
    int v6 = *a2;
    if (a2[1] != *a2)
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        __p[0].__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v8;
      }
      if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_))
      {
        std::map<std::string,std::string>::at(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_);
        espresso_network_set_function_name();
        *a3 = 1;
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
  }
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(void *)(a1 + 128)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 143))
  {
    return;
  }
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "SetNetworkFunctionName", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 619);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Set function name for checkpoint failed, error=", 47);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  *a4 = 1;
}

void sub_20CEAEAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t kaldi::quasar::ESNetworkPlan::RunNitro(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  kdebug_trace();
  uint64_t v8 = *a2;
  for (uint64_t i = a2[1]; v8 != i; v8 += 32)
  {
    kaldi::quasar::StripColon(v8, __p);
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20, "RunNitro", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 645);
      last_error = (const char *)espresso_get_last_error();
      size_t v12 = strlen(last_error);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)last_error, v12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20, "RunNitro", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 653);
    uint64_t v15 = (void *)std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 32;
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, 1);
    uint64_t v17 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, v17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
  }
  if (a5)
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    if (*a3 != a3[1])
    {
      kaldi::quasar::StripColon(*a3, &v19);
      if (!espresso_network_bind_buffer())
      {
        kaldi::quasar::EspressoNDArray::EspressoNDArray(&v20, __p, 1);
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20, "RunNitro", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 671);
      uint64_t v13 = (const char *)espresso_get_last_error();
      size_t v14 = strlen(v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)v13, v14);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v20);
    }
  }
  return kdebug_trace();
}

void sub_20CEAEF4C()
{
  if (v0) {
    free(v0);
  }
  JUMPOUT(0x20CEAEFA4);
}

void sub_20CEAEF54()
{
  MEMORY[0x2105595E0](v0, 0x1093C40B76D1C73);
  JUMPOUT(0x20CEAEF70);
}

void sub_20CEAEF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x20CEAEFB0);
  }
  JUMPOUT(0x20CEAEFB4);
}

void kaldi::quasar::StripColon(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = std::string::find((const std::string *)a1, 58, 0);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      int v5 = *(const std::string::value_type **)a1;
      std::string::size_type v6 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v7);
  }
}

void **std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20CEAF0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ESNetworkPlan::NeedShapeChange(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (espresso_plan_get_phase() == 1)
  {
    memset(v23, 0, sizeof(v23));
    int v24 = 1065353216;
    uint64_t v6 = *a3;
    char v7 = a3[1];
    while (v6 != v7)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v23, v6, (uint64_t)v6);
      v6 += 24;
    }
    if ((std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v23, (void *)(a1 + 216)) & 1) == 0)
    {
      uint64_t v10 = 1;
LABEL_24:
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)v23);
      return v10;
    }
    memset(v21, 0, sizeof(v21));
    int v22 = 1065353216;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    while (v8 != v9)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, v8, (uint64_t)v8);
      v8 += 32;
    }
    if (std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v21, (void *)(a1 + 176)))
    {
      unint64_t v11 = *a2;
      if (a2[1] == *a2)
      {
LABEL_21:
        uint64_t v10 = 0;
LABEL_23:
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)v21);
        goto LABEL_24;
      }
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        size_t v14 = *(void **)&v11[v12 + 24];
        if (espresso_network_query_blob_dimensions())
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "NeedShapeChange", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 717);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Espresso failed query blob info ", 32);
          unint64_t v16 = (void *)std::ostream::operator<<();
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          last_error = (const char *)espresso_get_last_error();
          size_t v19 = strlen(last_error);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)last_error, v19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
        }
        if (v14[14] > 1uLL || v14[10] != v25 || v14[11] != v26 || v14[12] != v27 || v14[13] != v28) {
          break;
        }
        ++v13;
        unint64_t v11 = *a2;
        v12 += 32;
        if (v13 >= (a2[1] - *a2) >> 5) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v10 = 1;
    goto LABEL_23;
  }
  return 1;
}

void sub_20CEAF350(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t result = kaldi::quasar::ESNetworkPlan::NeedShapeChange(a1, a2, a3);
  if (!result) {
    return result;
  }
  if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 741);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to reset plan with ", 35);
    uint64_t v54 = (void *)std::ostream::operator<<();
    uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1 + 176);
  char v7 = *a2;
  uint64_t v8 = a2[1];
  while (v7 != v8)
  {
    if (espresso_network_declare_input())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 750);
      int v22 = (char)v7[23];
      if (v22 >= 0) {
        uint64_t v23 = (uint64_t)v7;
      }
      else {
        uint64_t v23 = *(void *)v7;
      }
      if (v22 >= 0) {
        uint64_t v24 = v7[23];
      }
      else {
        uint64_t v24 = *((void *)v7 + 1);
      }
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' with ", 7);
      uint64_t v26 = (void *)std::ostream::operator<<();
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      uint64_t v28 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, v28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 176, v7, (uint64_t)v7);
    v7 += 32;
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1 + 216);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  while (v9 != v10)
  {
    if (espresso_network_declare_output())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 761);
      int v30 = (char)v9[23];
      if (v30 >= 0) {
        uint64_t v31 = (uint64_t)v9;
      }
      else {
        uint64_t v31 = *(void *)v9;
      }
      if (v30 >= 0) {
        uint64_t v32 = v9[23];
      }
      else {
        uint64_t v32 = *((void *)v9 + 1);
      }
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' with ", 7);
      uint64_t v34 = (void *)std::ostream::operator<<();
      BOOL v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      uint64_t v36 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 216, v9, (uint64_t)v9);
    v9 += 24;
  }
  if (*(unsigned char *)(a1 + 320))
  {
    *(void *)std::vector<int>::value_type __x = 0;
    long long v61 = 0uLL;
    std::to_string(&v59, *(void *)(*((void *)*a2 + 3) + 104));
    unint64_t v11 = std::string::insert(&v59, 0, "batch_config_");
  }
  else
  {
    if (!*(unsigned char *)(a1 + 321)) {
      goto LABEL_33;
    }
    *(void *)std::vector<int>::value_type __x = 0;
    long long v61 = 0uLL;
    std::to_string(&v59, *(void *)(*((void *)*a2 + 3) + 80));
    unint64_t v11 = std::string::insert(&v59, 0, "width_config_");
  }
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  *(void *)&long long v62 = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)&v62 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61) < 0) {
    operator delete(*(void **)__x);
  }
  *(void *)std::vector<int>::value_type __x = v12;
  *(void *)&long long v61 = v62;
  *(void *)((char *)&v61 + 7) = *(void *)((char *)&v62 + 7);
  HIBYTE(v61) = v13;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  int v14 = espresso_network_select_configuration();
  if (v14 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 782);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"configuration name not supported: ", 34);
    if (v61 >= 0) {
      unint64_t v16 = __x;
    }
    else {
      unint64_t v16 = *(std::vector<int>::value_type **)__x;
    }
    if (v61 >= 0) {
      uint64_t v17 = HIBYTE(v61);
    }
    else {
      uint64_t v17 = v61;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(*(void **)__x);
    if (!v14) {
      goto LABEL_46;
    }
LABEL_33:
    std::vector<char const*>::vector(&v62, (a2[1] - *a2) >> 5);
    std::vector<int>::size_type v18 = (a2[1] - *a2) >> 5;
    __x[0] = -1;
    std::vector<int>::vector((std::vector<int> *)&v59, v18, __x);
    std::vector<std::vector<int>>::vector(v58, 5uLL, (uint64_t)&v59);
    if (v59.__r_.__value_.__r.__words[0])
    {
      v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    std::vector<int>::vector(&v57, (a2[1] - *a2) >> 5);
    if (a2[1] != *a2)
    {
      unint64_t v19 = 0;
      do
      {
        if (espresso_buffer_unpack_tensor_shape())
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 798);
          uint64_t v38 = (uint64_t)&(*a2)[32 * v19];
          int v39 = *(char *)(v38 + 23);
          if (v39 >= 0) {
            uint64_t v40 = (uint64_t)&(*a2)[32 * v19];
          }
          else {
            uint64_t v40 = *(void *)v38;
          }
          if (v39 >= 0) {
            uint64_t v41 = *(unsigned __int8 *)(v38 + 23);
          }
          else {
            uint64_t v41 = *(void *)(v38 + 8);
          }
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' with ", 7);
          uint64_t v43 = (void *)std::ostream::operator<<();
          unsigned __int8 v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
          uint64_t v45 = (const char *)espresso_get_last_error();
          size_t v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
        }
        v57.__begin_[v19] = 0;
        uint64_t v20 = (uint64_t)&(*a2)[32 * v19];
        if (*(char *)(v20 + 23) < 0) {
          uint64_t v20 = *(void *)v20;
        }
        *(void *)(v62 + 8 * v19++) = v20;
      }
      while (v19 < (a2[1] - *a2) >> 5);
    }
    if (espresso_network_change_input_blob_shapes_seq_rank())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 818);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to change input blob shapes with ", 49);
      int v50 = (void *)std::ostream::operator<<();
      int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
      uint64_t v52 = (const char *)espresso_get_last_error();
      size_t v53 = strlen(v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    if (v57.__begin_)
    {
      v57.__end_ = v57.__begin_;
      operator delete(v57.__begin_);
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if ((void)v62)
    {
      *((void *)&v62 + 1) = v62;
      operator delete((void *)v62);
    }
    goto LABEL_46;
  }
  if (v14) {
    goto LABEL_33;
  }
LABEL_46:
  uint64_t result = espresso_plan_build();
  if (result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 824);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to build plan with ", 35);
    char v47 = (void *)std::ostream::operator<<();
    size_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    uint64_t v49 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  return result;
}

void sub_20CEAFBC8(_Unwind_Exception *a1)
{
}

void sub_20CEAFBD0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20CEAFBD8);
  }
  __clang_call_terminate(a1);
}

void kaldi::quasar::ESNetworkPlan::RunClassic(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!*(void *)(a1 + 168))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 833);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "plan_ != nullptr");
    goto LABEL_20;
  }
  kdebug_trace();
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    while (1)
    {
      int v11 = *(_DWORD *)(*((void *)v9 + 3) + 160);
      if (v11 == 131104)
      {
        int v12 = espresso_network_bind_buffer();
        vDSP_vflt32(**((const int ***)v9 + 3), 1, __C[0], 1, (vDSP_Length)__C[19]);
      }
      else
      {
        if (v11 != 65568)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 859);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "kv.second->storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
          goto LABEL_20;
        }
        int v12 = espresso_network_bind_buffer();
      }
      if (v12) {
        break;
      }
      v9 += 32;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 871);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, last_error);
LABEL_20:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C);
  }
LABEL_9:
  if (espresso_plan_execute_sync())
  {
    if (*(void *)a3 != *(void *)(a3 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 883);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
      int v21 = (void *)std::ostream::operator<<();
      v24[0] = 32;
      int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v24, 1);
      uint64_t v23 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, v23);
      goto LABEL_20;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 880);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
      char v13 = (void *)std::ostream::operator<<();
      v24[0] = 32;
      int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v24, 1);
      uint64_t v15 = (const char *)espresso_get_last_error();
      size_t v16 = strlen(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    }
  }
  else
  {
    if (a5)
    {
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
      if (*(void *)a3 != *(void *)(a3 + 8))
      {
        if (!espresso_network_bind_buffer())
        {
          kaldi::quasar::EspressoNDArray::EspressoNDArray(__C, v24, 1);
          operator new();
        }
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 900);
        unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
        uint64_t v20 = (char *)espresso_get_last_error();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, v20);
        goto LABEL_20;
      }
    }
    kdebug_trace();
  }
}

void sub_20CEB00F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

uint64_t kaldi::quasar::ESNetworkPlan::RunTraining(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!*(void *)(a1 + 168))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 916);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "plan_ != nullptr");
    goto LABEL_15;
  }
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  while (v9 != v8)
  {
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 932);
      int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to bind buffer for input=", 32);
      int v12 = (char)v9[23];
      if (v12 >= 0) {
        uint64_t v13 = (uint64_t)v9;
      }
      else {
        uint64_t v13 = *(void *)v9;
      }
      if (v12 >= 0) {
        uint64_t v14 = v9[23];
      }
      else {
        uint64_t v14 = *((void *)v9 + 1);
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", error=", 8);
      last_error = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, last_error);
      goto LABEL_15;
    }
    v9 += 32;
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 938);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to run checkpoint network, error=", 40);
    int v21 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, v21);
    goto LABEL_15;
  }
  get_main_function_name();
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 943);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to set function to main, error=", 38);
    uint64_t v23 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, v23);
    goto LABEL_15;
  }
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 948);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Failed to run main network, error=", 34);
    uint64_t v25 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, v25);
    goto LABEL_15;
  }
  if (a5)
  {
    uint64_t result = (uint64_t)std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
    if (*(void *)a3 != *(void *)(a3 + 8))
    {
      if (!espresso_network_bind_buffer())
      {
        kaldi::quasar::EspressoNDArray::EspressoNDArray(v27, v26, 1);
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 964);
      std::vector<int>::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
      unint64_t v19 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, v19);
LABEL_15:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
    }
  }
  return result;
}

void sub_20CEB05E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

void kaldi::quasar::ESNetworkPlan::Run(uint64_t a1, long long **a2, long long **a3, uint64_t a4, uint64_t *a5)
{
  v33[0] = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (unsigned char *)v33 + 1, v33);
  int v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v30, ((char *)a2[1] - (char *)*a2) >> 5);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = (const void *)*((void *)v8 + 3);
      if (!v10
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Run", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 984);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"es_data != nullptr", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
      }
      int v12 = v11;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v13 = *v8;
        v28.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
      }
      uint64_t v14 = v12 + 32;
      uint64_t v15 = v31;
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v17 = (v31 - v30) >> 5;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v32 - (void)v30;
        if ((uint64_t)(v32 - (void)v30) >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        v29[4] = (void **)&v32;
        int v21 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v32, v20);
        int v22 = &v21[4 * v17];
        v29[0] = v21;
        v29[1] = v22;
        v29[3] = &v21[4 * v23];
        long long v24 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        void v22[2] = (void *)v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)int v22 = v24;
        memset(&v28, 0, sizeof(v28));
        v22[3] = v14;
        void v29[2] = v22 + 4;
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v30, v29);
        uint64_t v25 = v31;
        std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)v29);
        uint64_t v31 = v25;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::size_type v16 = v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v31 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        *((void *)v15 + 2) = v16;
        *((void *)v15 + 3) = v14;
        uint64_t v31 = v15 + 32;
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  if (HIBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v30, (uint64_t *)a3, v7, a5);
  }
  else if (LOBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  v29[0] = (void **)&v30;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100](v29);
}

{
  uint64_t v7;
  long long *v8;
  long long *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  long long v32;
  char *v33;
  char *v34;
  std::string::size_type v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  long long v43;
  char *v44;
  uint64_t *v47;
  long long v48;
  long long v49;
  char v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  __int16 v57;
  std::string v58;
  char *v59;
  unint64_t *v60;
  void v61[3];

  std::vector<int> v57 = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (unsigned char *)&v57 + 1, &v57);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  int v56 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  size_t v53 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v51, ((char *)a2[1] - (char *)*a2) >> 5);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      uint64_t v10 = (uint64_t *)*((void *)v9 + 3);
      int v11 = *v10;
      if (!v12)
      {
        long long v13 = (*(uint64_t (**)(uint64_t *))(v11 + 144))(v10);
        if (v13 == 1)
        {
          memset(&v58, 0, sizeof(v58));
          (*(void (**)(void, std::string *))(**((void **)v9 + 3) + 56))(*((void *)v9 + 3), &v58);
          (*(void (**)(void *__return_ptr, uint64_t, std::string *, void))(*(void *)a1 + 24))(v61, a1, &v58, 0);
          int v12 = (char *)v61[0];
          std::string::size_type v16 = v55;
          if ((unint64_t)v55 >= v56)
          {
            unint64_t v18 = ((uint64_t)v55 - v54) >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = (uint64_t)(v56 - v54) >> 2;
            if (v19 <= v18 + 1) {
              uint64_t v19 = v18 + 1;
            }
            if (v56 - v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            *((void *)&v49 + 1) = &v56;
            if (v20) {
              int v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v56, v20);
            }
            else {
              int v21 = 0;
            }
            int v22 = v61[0];
            std::string v28 = &v21[v18];
            char v47 = v21;
            *(void *)&size_t v48 = v28;
            *(void *)&uint64_t v49 = &v21[v20];
            v61[0] = 0;
            *std::string v28 = v22;
            *((void *)&v48 + 1) = v28 + 1;
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, &v47);
            uint64_t v17 = v55;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v47);
          }
          else
          {
            v61[0] = 0;
            *uint64_t v55 = v12;
            uint64_t v17 = v16 + 1;
          }
          uint64_t v55 = v17;
          uint64_t v29 = v61[0];
          v61[0] = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          if (v58.__r_.__value_.__r.__words[0])
          {
            v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
            operator delete(v58.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (v13 != 2)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47, "Run", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 1032);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Unsupported input dimensions", 28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
          }
          size_t v48 = 0u;
          uint64_t v49 = 0u;
          char v47 = (uint64_t *)off_26C211198;
          int v50 = 0;
          (*(void (**)(void, uint64_t **))(**((void **)v9 + 3) + 32))(*((void *)v9 + 3), &v47);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t **))(*(void *)a1 + 32))(v61, a1, &v47);
          int v12 = (char *)v61[0];
          uint64_t v14 = v55;
          if ((unint64_t)v55 >= v56)
          {
            uint64_t v23 = ((uint64_t)v55 - v54) >> 3;
            if ((unint64_t)(v23 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            long long v24 = (uint64_t)(v56 - v54) >> 2;
            if (v24 <= v23 + 1) {
              long long v24 = v23 + 1;
            }
            if (v56 - v54 >= 0x7FFFFFFFFFFFFFF8) {
              uint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v25 = v24;
            }
            uint64_t v60 = &v56;
            if (v25) {
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v56, v25);
            }
            else {
              uint64_t v26 = 0;
            }
            uint64_t v27 = v61[0];
            int v30 = &v26[8 * v23];
            v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
            v58.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
            std::string v59 = &v26[8 * v25];
            v61[0] = 0;
            *(void *)int v30 = v27;
            v58.__r_.__value_.__r.__words[2] = (std::string::size_type)(v30 + 8);
            std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, &v58);
            uint64_t v15 = v55;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v58.__r_.__value_.__l.__data_);
          }
          else
          {
            v61[0] = 0;
            *uint64_t v55 = v12;
            uint64_t v15 = v14 + 1;
          }
          uint64_t v55 = v15;
          uint64_t v31 = v61[0];
          v61[0] = 0;
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          }
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v47);
        }
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        unint64_t v32 = *v9;
        v58.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v32;
      }
      uint64_t v33 = v12 + 32;
      uint64_t v34 = v52;
      if ((unint64_t)v52 >= v53)
      {
        uint64_t v36 = (v52 - v51) >> 5;
        std::string::size_type v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v53 - (void)v51;
        if ((uint64_t)(v53 - (void)v51) >> 4 > v37) {
          std::string::size_type v37 = v38 >> 4;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
          int v39 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          int v39 = v37;
        }
        *((void *)&v49 + 1) = &v53;
        uint64_t v40 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v53, v39);
        uint64_t v41 = &v40[4 * v36];
        char v47 = v40;
        *(void *)&size_t v48 = v41;
        *(void *)&uint64_t v49 = &v40[4 * v42];
        uint64_t v43 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        v41[2] = v58.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v41 = v43;
        memset(&v58, 0, sizeof(v58));
        v41[3] = (uint64_t)v33;
        *((void *)&v48 + 1) = v41 + 4;
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v51, &v47);
        unsigned __int8 v44 = v52;
        std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)&v47);
        uint64_t v52 = v44;
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL v35 = v58.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v52 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        *((void *)v34 + 2) = v35;
        *((void *)v34 + 3) = v33;
        uint64_t v52 = v34 + 32;
      }
      v9 += 2;
    }
    while (v9 != v8);
  }
  if (HIBYTE(v57))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v51, (uint64_t *)a3, v7, a5);
  }
  else if ((_BYTE)v57)
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v51, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v51, (uint64_t)a3, v7, a5);
  }
  char v47 = (uint64_t *)&v51;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  char v47 = &v54;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_20CEB0934(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20CEB0964);
}

void sub_20CEB0960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 - 120);
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20CEB09FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20CEB0FEC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 104);
  *(void *)(v1 - 104) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void **)(v1 - 144);
  if (v4)
  {
    *(void *)(v1 - 136) = v4;
    operator delete(v4);
  }
  *(void *)(v1 - 104) = v1 - 200;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 104));
  *(void *)(v1 - 200) = v1 - 176;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 200));
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESTensorData::Copy(kaldi::quasar::ESTensorData *this)
{
  if (*((void *)this + 25))
  {
    uint64_t v2 = *((void *)this + 17);
    uint64_t v3 = *((void *)this + 15) * *((void *)this + 14) * *((void *)this + 16);
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v4 = v3 * v2;
    *(_OWORD *)__dst = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v24 = 0;
    LODWORD(v23) = 65568;
    kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)__dst, v3 * v2);
    uint64_t v5 = __dst[0];
    long long v6 = *((_OWORD *)this + 11);
    long long v21 = *((_OWORD *)this + 10);
    long long v22 = v6;
    uint64_t v7 = *((void *)this + 24);
    long long v8 = *((_OWORD *)this + 7);
    long long v17 = *((_OWORD *)this + 6);
    long long v18 = v8;
    long long v9 = *((_OWORD *)this + 9);
    long long v19 = *((_OWORD *)this + 8);
    long long v20 = v9;
    long long v10 = *((_OWORD *)this + 3);
    *(_OWORD *)__dst = *((_OWORD *)this + 2);
    long long v14 = v10;
    long long v11 = *((_OWORD *)this + 5);
    long long v15 = *((_OWORD *)this + 4);
    long long v16 = v11;
    __dst[0] = v5;
    uint64_t v12 = *((void *)this + 25);
    *(void *)&long long v23 = v7;
    *((void *)&v23 + 1) = v12;
    memcpy(v5, *((const void **)this + 4), 4 * v4);
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)__dst = 0u;
    LODWORD(v23) = 65568;
  }
  operator new();
}

void sub_20CEB1290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a31) {
    free(a31);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESTensorData::CopyToMatrix(uint64_t a1, uint64_t a2)
{
}

{
  kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>((uint64_t *)(a1 + 32), a2);
}

float kaldi::quasar::ESTensorData::CopyToVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>((uint64_t *)(a1 + 32), a2, a3, a4, a5);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void *)(a1 + 120) * *(void *)(a1 + 112) * *(void *)(a1 + 128) * *(void *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(a2, *(float **)(a1 + 32), (float *)(*(void *)(a1 + 32) + 4 * v2), v2);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, char *a2)
{
  unint64_t v2 = *(void *)(a1 + 120) * *(void *)(a1 + 112) * *(void *)(a1 + 128) * *(void *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, *(char **)(a1 + 32), *(void *)(a1 + 32) + 4 * v2, v2);
}

void *kaldi::quasar::ESTensorData::CopyFromImpl(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (kaldi::quasar::EspressoNDArray *)(v3 + 32);
  return kaldi::quasar::EspressoNDArray::CopyTo(v4, (kaldi::quasar::ESTensorData *)((char *)this + 32));
}

void *kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  uint64_t v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 128))(a2);
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "GetWritableDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 197);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    goto LABEL_8;
  }
  if (a4 - a3 < 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 101);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "srcend - srcstart >= 0");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  long long v10 = (const void *)(v9 + 4 * a3);
  long long v11 = (void *)(*((void *)this + 4) + 4 * a5);
  return memcpy(v11, v10, 4 * (a4 - a3));
}

float kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, int *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 108);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "length >= 0");
    goto LABEL_12;
  }
  int v4 = *((_DWORD *)this + 48);
  if (v4 != 65568)
  {
    if (v4 == 131104)
    {
      uint64_t v5 = (void *)(*((void *)this + 4) + 4 * a4);
      size_t v6 = 4 * a3;
      memcpy(v5, a2, v6);
      return result;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 119);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "unsupported storage type.");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  if (a3)
  {
    long long v8 = (float *)*((void *)this + 4);
    uint64_t v9 = a3;
    do
    {
      int v10 = *a2++;
      float result = (float)v10;
      *v8++ = (float)v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_20CEB15E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *kaldi::quasar::ESTensorData::FlatRangeCopy(_DWORD *this, float *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "length >= 0");
    goto LABEL_12;
  }
  int v4 = this[48];
  if (v4 != 65568)
  {
    if (v4 == 131104)
    {
      if (a3)
      {
        uint64_t v5 = (_DWORD *)*((void *)this + 4);
        uint64_t v6 = a3;
        do
        {
          float v7 = *a2++;
          *v5++ = (int)v7;
          --v6;
        }
        while (v6);
      }
      return this;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 135);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "unsupported storage type.");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  long long v8 = (void *)(*((void *)this + 4) + 4 * a4);
  size_t v9 = 4 * a3;
  return memcpy(v8, a2, v9);
}

void sub_20CEB16F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::quasar::ESTensorData::AssignScalar(kaldi::quasar::ESTensorData *this, int a2, int a3)
{
  int v3 = *((_DWORD *)this + 48);
  if (v3 == 65568)
  {
    float result = (float)a2;
    *(float *)(*((void *)this + 4) + 4 * a3) = (float)a2;
  }
  else
  {
    if (v3 != 131104)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "AssignScalar", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 152);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
    }
    *(_DWORD *)(*((void *)this + 4) + 4 * a3) = a2;
  }
  return result;
}

uint64_t kaldi::quasar::ESTensorData::AssignScalar(uint64_t this, float a2, int a3)
{
  int v3 = *(_DWORD *)(this + 192);
  if (v3 == 131104)
  {
    *(_DWORD *)(*(void *)(this + 32) + 4 * a3) = (int)a2;
  }
  else
  {
    if (v3 != 65568)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AssignScalar", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 165);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
    }
    *(float *)(*(void *)(this + 32) + 4 * a3) = a2;
  }
  return this;
}

float kaldi::quasar::ESTensorData::GetFloatScalar(kaldi::quasar::ESTensorData *this, int a2)
{
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "GetDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 202);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return *(float *)(*((void *)this + 4) + 4 * a2);
}

uint64_t kaldi::quasar::ESTensorData::GetWritableDataFloat(kaldi::quasar::ESTensorData *this)
{
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "GetWritableDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 197);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetDataInt32(kaldi::quasar::ESTensorData *this)
{
  if (*((_DWORD *)this + 48) != 131104)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "GetDataInt32", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 212);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_INT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((void *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetNumDims(kaldi::quasar::ESTensorData *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t kaldi::quasar::ESTensorData::GetDimSize(kaldi::quasar::ESTensorData *this, int a2)
{
  v4[10] = *MEMORY[0x263EF8340];
  espresso_buffer_unpack_tensor_shape();
  return v4[a2];
}

void kaldi::quasar::ESTensorData::Reshape()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "Reshape", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 140);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

kaldi::quasar::ESNetworkConfig *kaldi::quasar::ESNetworkConfig::ESNetworkConfig(kaldi::quasar::ESNetworkConfig *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  *(void *)this = off_26C211158;
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(void *)this = off_26C210F30;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 8, (const void ***)a2 + 8);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v6;
  }
  float v7 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 7);
    *((void *)this + 16) = *((void *)a2 + 16);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_20CEB1BF8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v1 + 72));
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_20CEB1C90(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      float result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      float v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (const void ***)v7;
          float v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  float v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    float v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  float result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20CEB1E20(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_20CEB1EB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::Matrix<float>>(int **a1, uint64_t a2)
{
  v28[9] = *MEMORY[0x263EF8340];
  unint64_t v26 = 0;
  espresso_buffer_unpack_tensor_shape();
  unint64_t v4 = (unint64_t)a1[21];
  if (v4 >= 3)
  {
    unint64_t v5 = 0;
    while (*(void *)&v27[8 * v5] == 1)
    {
      if (v26 - 1 == ++v5)
      {
        unint64_t v5 = v26 - 1;
        break;
      }
    }
    if (v26 <= v5 + 1) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = v26;
    }
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v5;
    while (1)
    {
      unint64_t v9 = v8 + 1;
      if (v8 + 1 >= v26) {
        break;
      }
      uint64_t v10 = v28[v8++];
      if (v10 != 1)
      {
        unint64_t v7 = v9 - 1;
        unint64_t v6 = v9;
        break;
      }
    }
    if (v7 + 2 < v26)
    {
      uint64_t v11 = v26 - v7 - 2;
      uint64_t v12 = &v28[v7 + 1];
      while (1)
      {
        uint64_t v13 = *v12++;
        if (v13 != 1) {
          break;
        }
        if (!--v11) {
          goto LABEL_17;
        }
      }
      if (v9 < v26)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "ToMatrix", "../engine/common/libquasar/libkaldi/src/espresso-bridge/espresso-ndarray.h", 254);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
      goto LABEL_25;
    }
LABEL_17:
    if (v9 >= v26)
    {
LABEL_25:
      long long v16 = (uint64_t *)&v27[8 * v5];
      goto LABEL_26;
    }
    uint64_t v14 = *(void *)&v27[8 * v6];
    long long v15 = (uint64_t *)&v27[8 * v5];
LABEL_22:
    uint64_t v17 = *v15;
    kaldi::Matrix<float>::Resize(a2, *v15, v14, 1, 0);
    if (!v17) {
      return;
    }
    goto LABEL_27;
  }
  if (v4 != 1)
  {
    long long v15 = (uint64_t *)v27;
    uint64_t v14 = v28[0];
    goto LABEL_22;
  }
  long long v16 = (uint64_t *)v27;
LABEL_26:
  uint64_t v14 = *v16;
  kaldi::Matrix<float>::Resize(a2, 1, *v16, 1, 0);
  uint64_t v17 = 1;
LABEL_27:
  uint64_t v20 = 0;
  long long v21 = *a1;
  do
  {
    if (v14)
    {
      unsigned int v22 = 0;
      uint64_t v23 = v14;
      do
      {
        int v24 = *v21;
        *(_DWORD *)kaldi::MatrixBase<float>::operator()(a2, v20, v22, v18, v19) = v24;
        ++v21;
        ++v22;
        --v23;
      }
      while (v23);
    }
    ++v20;
  }
  while (v20 != v17);
}

void sub_20CEB2124(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  v25[9] = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
  espresso_buffer_unpack_tensor_shape();
  unint64_t v4 = a1[21];
  if (v4 < 3)
  {
    if (v4 != 1)
    {
      uint64_t v15 = v24;
      uint64_t v14 = v25[0];
      goto LABEL_25;
    }
    uint64_t v14 = v24;
  }
  else
  {
    unint64_t v5 = 0;
    while (v25[v5 - 1] == 1)
    {
      if (v23 - 1 == ++v5)
      {
        unint64_t v5 = v23 - 1;
        break;
      }
    }
    if (v23 <= v5 + 1) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = v23;
    }
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v5;
    while (1)
    {
      unint64_t v9 = v8 + 1;
      if (v8 + 1 >= v23) {
        break;
      }
      uint64_t v10 = v25[v8++];
      if (v10 != 1)
      {
        unint64_t v7 = v9 - 1;
        unint64_t v6 = v9;
        break;
      }
    }
    if (v7 + 2 >= v23)
    {
LABEL_17:
      if (v9 < v23)
      {
        uint64_t v14 = v25[v6 - 1];
        uint64_t v15 = v25[v5 - 1];
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v11 = v23 - v7 - 2;
      uint64_t v12 = &v25[v7 + 1];
      while (1)
      {
        uint64_t v13 = *v12++;
        if (v13 != 1) {
          break;
        }
        if (!--v11) {
          goto LABEL_17;
        }
      }
      if (v9 < v23)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "ToMatrix", "../engine/common/libquasar/libkaldi/src/espresso-bridge/espresso-ndarray.h", 254);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
    }
    uint64_t v14 = v25[v5 - 1];
  }
  uint64_t v15 = 1;
LABEL_25:
  kaldi::CuMatrix<float>::Resize(a2, v15, v14, 1u, 0);
  if (v15)
  {
    unint64_t v17 = 0;
    uint64_t v18 = *a1;
    do
    {
      if (v14)
      {
        if (v17 >= *(unsigned int *)(a2 + 20)) {
LABEL_35:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v19 = 0;
        uint64_t v20 = 4 * *(unsigned int *)(a2 + 16);
        uint64_t v21 = v14;
        do
        {
          if (v20 == v19) {
            goto LABEL_35;
          }
          *(_DWORD *)(*(void *)(a2 + 8) + 4 * (int)v17 * *(_DWORD *)(a2 + 24) + v19) = *(_DWORD *)(v18 + v19);
          v19 += 4;
          --v21;
        }
        while (v21);
        v18 += v19;
      }
      ++v17;
    }
    while (v17 != v15);
  }
}

void sub_20CEB2390(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = a1[11] * a1[10] * a1[12] * a1[13];
  uint64_t v7 = *a1;
  kaldi::CuVector<float>::Resize(a2, v6, 1u, a4, a5);
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(unsigned int *)(a2 + 16);
    do
    {
      if (v11 == v10) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v8);
      }
      float result = *(float *)(v7 + 4 * v10);
      *(float *)(*(void *)(a2 + 8) + 4 * v10++) = result;
    }
    while (v6 != v10);
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(void *a1, float *a2, float *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  float result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      unint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          float v28 = *v6++;
          *(_DWORD *)uint64_t v27 = (int)v28;
          v27 += 4;
          v26 += 4;
        }
        while (v6 != a3);
      }
      unint64_t v17 = (char *)(v26 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 4 * v19;
        do
        {
          float v22 = *v6++;
          *(_DWORD *)float result = (int)v22;
          result += 4;
          v21 -= 4;
        }
        while (v21);
      }
      unint64_t v23 = v12;
      if (v20 != a3)
      {
        uint64_t v24 = v12;
        do
        {
          float v25 = *v20++;
          *(_DWORD *)uint64_t v24 = (int)v25;
          v24 += 4;
          v23 += 4;
        }
        while (v20 != a3);
      }
      unint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = std::vector<int>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        float v16 = *v6++;
        *(_DWORD *)uint64_t v15 = (int)v16;
        v15 += 4;
      }
      while (v6 != a3);
    }
    unint64_t v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void *kaldi::quasar::EspressoNDArray::CopyTo(kaldi::quasar::EspressoNDArray *this, kaldi::quasar::EspressoNDArray *a2)
{
  v6[54] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 11) * *((void *)this + 10) * *((void *)this + 12) * *((void *)this + 13);
  if (v2 != *((void *)a2 + 11) * *((void *)a2 + 10) * *((void *)a2 + 12) * *((void *)a2 + 13))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "CopyTo", "../engine/common/libquasar/libkaldi/src/espresso-bridge/espresso-ndarray.h", 96);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "total_elements == dst.Volume()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  espresso_buffer_unpack_tensor_shape();
  espresso_buffer_unpack_tensor_shape();
  return memmove(*(void **)a2, *(const void **)this, 4 * v2);
}

void sub_20CEB274C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20CEB2884(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20CEB2904(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + ++*(void *)(result + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<int>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = *(float **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a2[1] - *a2;
    }
    do
    {
      int v9 = *v6++;
      *v7++ = (float)v9;
      --v8;
    }
    while (v8);
  }
  if (a3) {
    *((void *)a1 + 21) = 2;
  }
  else {
    *((void *)a1 + 21) = 1;
  }
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<float>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = *(_DWORD **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a2[1] - *a2;
    }
    do
    {
      int v9 = *v6++;
      *v7++ = v9;
      --v8;
    }
    while (v8);
  }
  if (a3) {
    *((void *)a1 + 21) = 2;
  }
  else {
    *((void *)a1 + 21) = 1;
  }
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::CuMatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, (int)v4 * (uint64_t)v5);
  *((void *)a1 + 21) = 2;
  uint64_t result = espresso_buffer_pack_tensor_shape();
  if (v5 >= 1)
  {
    unsigned int v8 = 0;
    int v9 = *(char **)a1;
    size_t v10 = 4 * v4;
    do
    {
      if (*(_DWORD *)(a2 + 20) <= v8) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v7);
      }
      uint64_t result = (uint64_t)memcpy(v9, (const void *)(*(void *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v8++)), v10);
      v9 += v10;
    }
    while (v5 != v8);
  }
  return result;
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::MatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  __src[5] = *(void **)MEMORY[0x263EF8340];
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, v5 * v4);
  *((void *)a1 + 21) = 2;
  uint64_t v6 = v5;
  __src[3] = (void *)v4;
  __src[4] = (void *)v5;
  uint64_t result = espresso_buffer_pack_tensor_shape();
  if (v4 >= 1)
  {
    unsigned int v9 = 0;
    size_t v10 = *(char **)a1;
    size_t v11 = 4 * v6;
    do
    {
      kaldi::MatrixBase<float>::Row(a2, v9, v8, (uint64_t *)__src);
      uint64_t result = (uint64_t)memcpy(v10, __src[0], v11);
      ++v9;
      v10 += v11;
    }
    while (v4 != v9);
  }
  return result;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20CEB2E10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::ESTensorData::ESTensorData(void *a1, uint64_t a2)
{
  int v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  void *v4 = off_26C210DC8;
  v4[25] = 0;
  v4[26] = 0;
  int v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    size_t v8 = 1;
    do
    {
      uint64_t v9 = *v5++;
      v8 *= v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    size_t v8 = 1;
  }
  kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)(v4 + 4), v8);
  espresso_buffer_pack_tensor_shape();
  a1[25] = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  return a1;
}

void sub_20CEB2EE4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 208);
  *(void *)(v1 + 208) = 0;
  if (v3) {
    free(v3);
  }
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20CEB2F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result) {
      return result;
    }
    uint64_t v6 = *((unsigned __int8 *)v2 + 39);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v7 = v2[3];
    }
    uint64_t v8 = *(unsigned __int8 *)(result + 39);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(result + 24);
    }
    if (v7 != v8) {
      return 0;
    }
    unint64_t v12 = *(unsigned __int8 **)(result + 16);
    size_t v10 = (unsigned __int8 *)(result + 16);
    size_t v11 = v12;
    if (v9 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v11;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*v4, v13, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v13)
      {
        uint64_t v4 = (const void **)((char *)v4 + 1);
        ++v13;
        if (!--v6) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 1;
    }
  }
}

void sub_20CEB3140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20CEB31F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,espresso_buffer_t const*>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::string,espresso_buffer_t const*>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *kaldi::quasar::EspressoNDArray::EspressoNDArray(uint64_t *a1, long long *a2, int a3)
{
  uint64_t v4 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v5 = *a2;
  long long v6 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v6;
  *(_OWORD *)a1 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[6];
  *((_OWORD *)a1 + 5) = a2[5];
  *((_OWORD *)a1 + 6) = v9;
  *((_OWORD *)a1 + 3) = v7;
  *((_OWORD *)a1 + 4) = v8;
  long long v10 = a2[7];
  long long v11 = a2[8];
  long long v12 = a2[9];
  a1[20] = *((void *)a2 + 20);
  *((_OWORD *)a1 + 8) = v11;
  *((_OWORD *)a1 + 9) = v12;
  *((_OWORD *)a1 + 7) = v10;
  a1[21] = 0;
  if (a3) {
    uint64_t v4 = *a1;
  }
  a1[22] = v4;
  int v13 = *((_DWORD *)a1 + 40);
  if (v13 != 65568)
  {
    if (v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::to_string(&v18, *((_DWORD *)a1 + 40));
      float v16 = std::string::insert(&v18, 0, "Unsupported storage type ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      std::string::size_type v20 = v16->__r_.__value_.__r.__words[2];
      long long v19 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x210558DA0](exception, &v19);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *((_DWORD *)a1 + 40) = 65568;
  }
  espresso_buffer_unpack_tensor_shape();
  return a1;
}

void sub_20CEB364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      float v25 = *(void **)(v21 + 176);
      *(void *)(v21 + 176) = 0;
      if (v25) {
        free(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *kaldi::quasar::EspressoNDArray::InitBufferMemory(kaldi::quasar::EspressoNDArray *this, size_t count)
{
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 40) = 65568;
  uint64_t result = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
  uint64_t v4 = (void *)*((void *)this + 22);
  *((void *)this + 22) = result;
  if (v4)
  {
    free(v4);
    uint64_t result = (void *)*((void *)this + 22);
  }
  *(void *)this = result;
  return result;
}