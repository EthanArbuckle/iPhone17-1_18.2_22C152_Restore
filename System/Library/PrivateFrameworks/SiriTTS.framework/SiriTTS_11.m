uint64_t mfs_Search_SparseDP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int LogLevel;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  double v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  int v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  _OWORD v56[5];
  uint64_t v57;

  v57 = *MEMORY[0x263EF8340];
  v8 = *(void *)(a2 + 1928);
  v9 = a2 + 2112;
  v10 = (void *)(a2 + 2168);
  v11 = *(_DWORD *)(a1 + 1096);
  if (*(_DWORD *)(a2 + 2592) == 1)
  {
    v12 = *(void *)(a2 + 2624);
    *(void *)(a2 + 2624) = 0;
    mfs_SegmentList_DeInit((void *)(a2 + 2248));
    v13 = mfs_SegmentList_Init(v8, a1, a2 + 2248);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    mfs_SegmentList_DeInit((void *)(a2 + 2208));
    v13 = mfs_SegmentList_Init(v8, a1, a2 + 2208);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    mfs_UnitSequence_DeInit(v9);
    v13 = mfs_UnitSequence_Init(v8, v9, a1);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
  }
  else
  {
    v15 = heap_Calloc(*(void **)(v8 + 8), 1, 136);
    if (!v15)
    {
      UNICORN__mfs_S32Vect_Clear(v10);
      return 0;
    }
    v12 = v15;
    v16 = mfs_Viterbi_Init(a1, a2, a4, v15);
    if ((v16 & 0x80000000) != 0)
    {
      v14 = v16;
      UNICORN__mfs_S32Vect_Clear(v10);
      goto LABEL_89;
    }
  }
  v17 = UNICORN__mfs_S32Vect_Reserve(a2 + 2144, *(_DWORD *)(a2 + 1936));
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_87;
  }
  v17 = UNICORN__mfs_F32Vect_Create((uint64_t)v10, *(_DWORD *)(a2 + 1936));
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_87;
  }
  v54 = a3;
  v18 = v11 - 1;
  if (*(int *)(a2 + 1936) >= 1)
  {
    v19 = 0;
    do
    {
      v17 = UNICORN__mfs_F32Vect_Pad((uint64_t)v10, 0.0);
      if ((v17 & 0x80000000) != 0) {
        goto LABEL_87;
      }
      mfs_S32Vect_Add(a2 + 2144, v18);
    }
    while (++v19 < *(_DWORD *)(a2 + 1936));
  }
  v20 = *(_DWORD *)(a2 + 2592);
  if (v20) {
    goto LABEL_15;
  }
  MFS__log_select_Diag(v8, 3, (uint64_t)"path_len = %dL %d : %d\n");
  MFS__log_select_Diag(v8, 3, (uint64_t)"viterbi::begin_with_early_emission\n");
  v17 = mfs_Viterbi_Reset(v12, **(_DWORD **)(a2 + 2000), *(_DWORD *)(*(void *)(a2 + 2000) + 4));
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_87;
  }
  v25 = *(_DWORD *)(a2 + 2064);
  if (v25 == 1)
  {
    v17 = mfs_Viterbi_Decode_MCP_S9_LF0_S8(v12);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_87;
    }
  }
  else if (v25 == 2)
  {
    v17 = mfs_Viterbi_Decode_MCP_S9_LF0_S8_X2B(v12);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_87;
    }
  }
  else
  {
    v17 = mfs_Viterbi_Decode(v12);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_87;
    }
  }
  if (*(_DWORD *)(a2 + 2592) == 2) {
    goto LABEL_33;
  }
  MFS__log_select_Diag(v8, 3, (uint64_t)"viterbi::end_for_early_emission\n");
  v17 = mfs_Viterbi_ResultScore(v12, a2 + 2144, (uint64_t)v10);
  if ((v17 & 0x80000000) != 0)
  {
LABEL_87:
    v14 = v17;
LABEL_88:
    UNICORN__mfs_S32Vect_Clear(v10);
    if (!v12) {
      return v14;
    }
LABEL_89:
    mfs_Viterbi_DeInit((void *)v12);
    return v14;
  }
  *(void *)(a2 + 2624) = v12;
  v20 = *(_DWORD *)(a2 + 2592);
  if (!v20) {
    goto LABEL_48;
  }
LABEL_15:
  if (v20 != 2)
  {
    v51 = v9;
    MFS__log_select_Diag(v8, 3, (uint64_t)"viterbi::resume_after_early_emission\n");
    v21 = *(unsigned int *)(v12 + 68);
    if ((int)v21 >= 1)
    {
      v22 = *(void *)(v12 + 56);
      v23 = (*(_DWORD *)(a2 + 2636) - *(_DWORD *)(v12 + 32));
      v24 = *(_DWORD *)(a2 + 2632);
      do
      {
        if (*(_DWORD *)(*(void *)(v22 + 24) + 4 * v23) != v24) {
          *(_DWORD *)v22 = 1259902592;
        }
        v22 += 32;
        --v21;
      }
      while (v21);
    }
    goto LABEL_34;
  }
LABEL_33:
  v51 = v9;
  MFS__log_select_Diag(v8, 3, (uint64_t)"viterbi::begin_regular_emission\n");
LABEL_34:
  if (*(int *)(a2 + 2008) >= 1)
  {
    v26 = 0;
    v27 = 0;
    do
    {
      if (v26 || *(_DWORD *)(a2 + 2592) != 1)
      {
        v17 = mfs_Viterbi_Reset(v12, *(_DWORD *)(*(void *)(a2 + 2000) + v26), *(_DWORD *)(*(void *)(a2 + 2000) + v26 + 4));
        if ((v17 & 0x80000000) != 0) {
          goto LABEL_87;
        }
      }
      MFS__log_select_Diag(v8, 3, (uint64_t)"path_len = %dL %d : %d\n");
      v28 = *(_DWORD *)(a2 + 2064);
      if (v28 == 1)
      {
        mfs_Viterbi_Decode_MCP_S9_LF0_S8(v12);
      }
      else if (v28 == 2)
      {
        v17 = mfs_Viterbi_Decode_MCP_S9_LF0_S8_X2B(v12);
        if ((v17 & 0x80000000) != 0) {
          goto LABEL_87;
        }
      }
      else
      {
        v17 = mfs_Viterbi_Decode(v12);
        if ((v17 & 0x80000000) != 0) {
          goto LABEL_87;
        }
      }
      MFS__log_select_Diag(v8, 3, (uint64_t)"viterbi::end\n");
      v17 = mfs_Viterbi_ResultScore(v12, a2 + 2144, (uint64_t)v10);
      if ((v17 & 0x80000000) != 0) {
        goto LABEL_87;
      }
      *(_DWORD *)(a2 + 2592) = 2;
      ++v27;
      v26 += 8;
    }
    while (v27 < *(int *)(a2 + 2008));
  }
  mfs_Viterbi_DeInit((void *)v12);
  v9 = v51;
LABEL_48:
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v8 + 32)) < 2) {
    goto LABEL_75;
  }
  LogLevel = BET3FLT__log_select_GetLogLevel(*(void *)(v8 + 32));
  v30 = *(_DWORD *)(a2 + 2160);
  v31 = v30 - 1;
  if (LogLevel >= 3)
  {
    if (v31 < 1) {
      goto LABEL_71;
    }
    v52 = v9;
    v32 = 0;
    v33 = 0;
    v50 = 0;
    v53 = 0;
    do
    {
      v55 = 0;
      memset(v56, 0, sizeof(v56));
      mfs_ParamMap_GetAcousticVector(v8, a1, a2, *(unsigned int *)(*(void *)(a2 + 2152) + 4 * v32), (uint64_t)v56, &v55);
      v33 += v55;
      MFS__log_select_Diag(v8, 3, (uint64_t)"unit %d: %d %f\n");
      if (v32 % 3 == 2)
      {
        if (!mfs_Ling_IsSilence(a4, *(void *)(a2 + 8), v32 / 3))
        {
          MFS__log_select_Diag(v8, 1, (uint64_t)"model duration: %d %d\n");
          ++v50;
          MFS__log_select_Diag(v8, 1, (uint64_t)"candidate duration: %d\n");
          v33 = 0;
        }
      }
      else if (v32 % 3 == 1 {
             && mfs_Ling_IsVowel(a4, *(void *)(a2 + 8), v32 / 3))
      }
      {
        if (v53 >= 0xC8) {
          v34 = v53;
        }
        else {
          v34 = v53 + 1;
        }
        MFS__log_select_Diag(v8, 1, (uint64_t)"model pitch: %f\n");
        MFS__log_select_Diag(v8, 1, (uint64_t)"candidate pitch: %f\n");
        v53 = v34;
      }
      ++v32;
      v30 = *(_DWORD *)(a2 + 2160);
      v31 = v30 - 1;
    }
    while (v32 < v30 - 1);
    v9 = v52;
  }
  if (v31 >= 1)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0.0;
    do
    {
      v38 = *(void *)(a2 + 2152);
      v39 = *(_DWORD *)(v38 + 4 * v35);
      if (v39 == v18 || (v40 = *(_DWORD *)(v38 + 4 * v35 + 4), v40 == v18))
      {
        ++v36;
      }
      else
      {
        v41 = mfs_JCostProb(a1, a2, v39, v40, v35);
        v37 = v37 + *(float *)&v41;
        v30 = *(_DWORD *)(a2 + 2160);
      }
      ++v35;
    }
    while (v35 < v30 - 1);
    goto LABEL_72;
  }
LABEL_71:
  v36 = 0;
  v37 = 0.0;
LABEL_72:
  v42 = v30 - v36;
  if (v42) {
    exp((float)(v37 / (float)v42));
  }
  MFS__log_select_Diag(v8, 2, (uint64_t)"ACC : %f\n");
LABEL_75:
  v14 = mfs_UnitSequence_Sequence(v9, v54);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_88;
  }
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v8 + 32)) >= 3) {
    mfs_UnitSequence_Log(v9);
  }
  if (*(_DWORD *)(a2 + 2592))
  {
    *(_DWORD *)(a2 + 2604) = 0;
    v43 = *(_DWORD *)(a2 + 2272);
    if (v43 >= 3)
    {
      v44 = 0;
      v45 = (v43 - 1);
      v46 = (int *)(*(void *)(a2 + 2264) + 40);
      v47 = v45 - 1;
      do
      {
        v48 = *v46;
        v46 += 7;
        v44 += v48;
        --v47;
      }
      while (v47);
      *(_DWORD *)(a2 + 2604) = v44;
    }
    mfs_Viterbi_DeInit((void *)v12);
    heap_Free(*(void **)(v8 + 8), v12);
    UNICORN__mfs_S32Vect_Clear(v10);
  }
  return v14;
}

uint64_t mfs_Search_FindNodeCandidates_StatSelect_UltraLight(int *a1, uint64_t a2, uint64_t a3)
{
  v3 = (_DWORD *)a3;
  uint64_t v4 = a2;
  uint64_t v173 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 1928);
  char v162 = 0;
  __int16 v161 = 0;
  v7 = (void *)(a2 + 1944);
  long long v171 = 0u;
  long long v172 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v156 = 0u;
  memset(v155, 0, sizeof(v155));
  long long v166 = 0u;
  memset(v165, 0, sizeof(v165));
  *(void *)(a2 + 2192) = 0;
  float v8 = *(float *)(a3 + 8180);
  uint64_t v141 = v6;
  if (*(int *)(a2 + 608) < 1)
  {
    unsigned int v139 = 0;
LABEL_115:
    mfs_TCost_Init(v6, (uint64_t)v3, (uint64_t)v155);
    int v90 = *(_DWORD *)(v4 + 608);
    if (v90 >= 1)
    {
      uint64_t v91 = 0;
      LODWORD(v92) = 0;
      v152 = v3 + 6322;
      LODWORD(v93) = *a1;
      uint64_t v94 = v139;
      v130 = v7;
      while ((int)v93 < 1)
      {
LABEL_146:
        if (++v91 >= v90) {
          goto LABEL_149;
        }
      }
      uint64_t v95 = a2;
      uint64_t v96 = *(void *)(a2 + 600) + 528 * v91;
      v97 = (void *)(v96 + 16);
      v133 = (void *)(v96 + 312);
      uint64_t v136 = v91;
      v150 = (void *)(v96 + 80);
      v145 = (int *)(v96 + 24);
      v138 = (void *)(v96 + 16);
      v140 = (int *)(v96 + 28);
      uint64_t v92 = (int)v92;
      uint64_t v98 = 2;
      while (1)
      {
        uint64_t AcousticVector = mfs_FillTgtVect((uint64_t)v3, v95, (uint64_t)v155, *(_DWORD *)(*v97 + 4 * v98));
        if ((AcousticVector & 0x80000000) != 0) {
          break;
        }
        UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(v95 + 8), v91, &v161);
        uint64_t result = mfs_CostList_Sort((uint64_t)v130, v92, 1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        signed int v100 = *(_DWORD *)(*(void *)(v95 + 1952) + 32 * v92 + 16);
        MFS__log_select_Diag(v6, 1, (uint64_t)"before prune %lu, ");
        signed int v101 = v3[2064];
        if (!v101 || HIBYTE(v161) != 1)
        {
          if ((*(unsigned char *)(*v133 + v98) & 4) != 0) {
            signed int v101 = v3[2060];
          }
          else {
            signed int v101 = v3[2061];
          }
        }
        if (v100 >= v101) {
          signed int v102 = v101;
        }
        else {
          signed int v102 = v100;
        }
        MFS__log_select_Diag(v6, 1, (uint64_t)"after prune %lu\n");
        mfs_CostList_Prune(v130, v92, v102);
        uint64_t v95 = a2;
        if (v102 >= 1)
        {
          uint64_t v103 = 0;
          unsigned int v104 = 0;
          uint64_t v105 = 8 * v102;
          do
          {
            int v154 = 0;
            memset(v163, 0, sizeof(v163));
            uint64_t v106 = *(unsigned int *)(*(void *)(*(void *)(v95 + 1952) + 32 * v92) + v103);
            uint64_t AcousticVector = mfs_ParamMap_GetAcousticVector(v141, (uint64_t)a1, v95, v106, (uint64_t)v163, &v154);
            if ((AcousticVector & 0x80000000) != 0) {
              goto LABEL_163;
            }
            if ((int)v156 <= v154) {
              unsigned int v107 = v154;
            }
            else {
              unsigned int v107 = v156;
            }
            LODWORD(v158) = v107;
            uint64_t result = UNICORN__mfs_S32Vect_Reserve((uint64_t)&v157, v107);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (*v152)
            {
              uint64_t AcousticVector = mfs_TCost_CandidateCostStream_kld((uint64_t)v155, (uint64_t)a1, a3, v141, (uint64_t)v163, v154, v106, *(unsigned int *)(*v150 + 4 * v98), v98, (uint64_t)v164);
              if ((AcousticVector & 0x80000000) != 0) {
                goto LABEL_163;
              }
            }
            else
            {
              mfs_TCost_CandidateCostStream_Faster((uint64_t)v155, a3, (uint64_t)v163, v154, (uint64_t)v164);
            }
            float v108 = 0.0;
            if (HIBYTE(v161) != 1 && *(_DWORD *)(a3 + 8968) == 6)
            {
              float v109 = (float)(*((float *)v155 + 1) * *((float *)&v156 + 3)) * 0.01;
              float v108 = (float)(v109 * (float)(int)CandidatePhonemeDurationDistance((uint64_t)a1, v106, v98, *v145, *v140))
                   + 0.0;
            }
            uint64_t v95 = a2;
            float v110 = (float)(v8
                         * (float)(v108 + (float)((float)(*(float *)&v164[1] + *(float *)&v164[2]) + *(float *)v164)))
                 + (float)(*(float *)(*(void *)(*(void *)(a2 + 1952) + 32 * v92) + v103 + 4) * (float)(1.0 - v8));
            mfs_ParamMap_UnMapSection(a2);
            mfs_CostList_UpdateCost_inlined((uint64_t)v130, v92, v104++, v110);
            v103 += 8;
          }
          while (v105 != v103);
        }
        mfs_CostList_UpdateCostEnd_inlined((uint64_t)v130, v92);
        v3 = (_DWORD *)a3;
        uint64_t v94 = mfs_CleanUpTgtVect(a3, v95, (uint64_t)v155);
        ++v92;
        uint64_t v93 = *a1;
        BOOL v32 = v98++ <= v93;
        uint64_t v6 = v141;
        uint64_t v91 = v136;
        v97 = v138;
        if (!v32)
        {
          int v90 = *(_DWORD *)(v95 + 608);
          goto LABEL_146;
        }
      }
LABEL_163:
      uint64_t v111 = AcousticVector;
      goto LABEL_167;
    }
    uint64_t v94 = v139;
LABEL_149:
    *(_DWORD *)(a2 + 2200) = 0;
    uint64_t v111 = v94;
    if (v3[2141] == 1)
    {
      float v112 = *(float *)(a2 + 2616);
      if (v112 == 0.0)
      {
        v122 = "Early emission enabled in pipeline header but no search-xRT estimate yet\n";
      }
      else
      {
        *(_DWORD *)(a2 + 2608) = (int)((double)*(int *)(a2 + 2604) / (v112 * 0.8 + 1.0));
        MFS__log_select_Diag(v6, 1, (uint64_t)"Given search-xRT estimate %.6f, and estimated output of %d ms, set early emission to %d ms\n");
        uint64_t v113 = *(unsigned int *)(a2 + 608);
        int v114 = *(_DWORD *)(a2 + 2596);
        if ((int)v113 >= 2)
        {
          int v115 = 0;
          uint64_t v116 = 1;
          int v117 = *(_DWORD *)(a2 + 2596);
          do
          {
            if (v117) {
              break;
            }
            int v118 = *a1;
            if (*a1 >= 1)
            {
              v119 = (int *)(*(void *)(*(void *)(a2 + 600) + 528 * v116 + 16) + 8);
              uint64_t v120 = *a1;
              do
              {
                int v121 = *v119++;
                v115 += v121 * v3[6];
                --v120;
              }
              while (v120);
            }
            ++v116;
            if (v115 >= *(_DWORD *)(a2 + 2608))
            {
              int v114 = v118 * v116;
              *(_DWORD *)(a2 + 2596) = v118 * v116;
              int v117 = v118 * v116;
            }
            else
            {
              int v117 = 0;
            }
          }
          while (v116 != v113);
        }
        if (!v114) {
          goto LABEL_167;
        }
        v122 = "Final output state (excluding Viterbi runway) for early emission will be %d\n";
      }
    }
    else
    {
      v122 = "Early emission not enabled in pipeline header\n";
    }
    MFS__log_select_Diag(v6, 1, (uint64_t)v122);
LABEL_167:
    mfs_TCost_Clear(v155);
    return v111;
  }
  uint64_t v9 = 0;
  unsigned int v139 = 0;
  signed int v126 = 0;
  unsigned int v137 = *(_DWORD *)(a3 + 8224);
  v127 = a1 + 620;
  v128 = a1 + 656;
  v10 = (void *)(a2 + 1968);
  v124 = a1 + 696;
  v125 = a1 + 640;
  v153 = (void *)(a2 + 1968);
  while (1)
  {
    uint64_t v11 = *(void *)(v4 + 600);
    uint64_t v12 = (uint64_t)v3;
    uint64_t v13 = v6;
    uint64_t v14 = v9;
    uint64_t v15 = v11 + 528 * v9;
    MFS__log_select_Diag(v13, 3, (uint64_t)"phoneme %d\n");
    mfs_symData_GetTargetVector((uint64_t)a1, (uint64_t)v165, *(void *)(v4 + 8), v14);
    UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(v4 + 8), v14, &v161);
    uint64_t v16 = v13;
    uint64_t v17 = v13;
    v3 = (_DWORD *)v12;
    mfs_Ling_LogPhonCtxt(v17, v12, *(void *)(v4 + 8), v14);
    LODWORD(v18) = *a1;
    uint64_t v132 = v14;
    if (*a1 == 3)
    {
      uint64_t v21 = v11 + 528 * v14;
      v134 = (void *)(v21 + 16);
      v147 = (void *)(v21 + 312);
      signed int v19 = v126;
      int v20 = v126 - 1;
      LODWORD(v21) = 3;
      uint64_t v22 = 2;
      LODWORD(result) = v139;
      uint64_t v24 = v15;
      uint64_t v25 = v14;
      while (1)
      {
        signed int v151 = v19;
        if (v25 && v25 != *(_DWORD *)(v4 + 608) - 1) {
          *(_DWORD *)(v4 + 2604) += *(_DWORD *)(*v134 + 4 * v22) * *(_DWORD *)(a3 + 24);
        }
        int v26 = 2 * v22;
        uint64_t v27 = *(void *)(v4 + 1976);
        *(_DWORD *)(v27 + (((v22 << 33) - 0x400000000) >> 27) + 16) = 0;
        *(_DWORD *)(v27 + 32 * (2 * (int)v22 - 3) + 16) = 0;
        signed int v28 = v19;
        if (HIBYTE(v161) != 1
          || *(_DWORD *)(a3 + 8256) && (v25 && v22 == 2 || v22 == v21 + 1 && v25 != *(_DWORD *)(a2 + 608) - 1))
        {
          *((void *)&v166 + 1) = *(void *)&a1[2 * v22 + 674];
          v165[0] = a1[v22 + 629];
          int LeafIndex = mfs_GetLeafIndex(v24, 1, v22);
          uint64_t result = mfs_IbAddtoVect_MCP(v141, (unsigned int *)a1, a3, (uint64_t)v165, v22, LeafIndex, 0, v137, v7, v28, (uint64_t)&v161);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if ((*(unsigned char *)(*v147 + v22) & 4) != 0)
          {
            *((void *)&v166 + 1) = *(void *)&a1[2 * v22 + 692];
            v165[0] = a1[v22 + 638];
            int v30 = mfs_GetLeafIndex(v24, 2, v22);
            uint64_t result = mfs_IbAddtoVect_LF0(v141, (unsigned int *)a1, a3, (uint64_t)v165, v22, v30, 0, v137, (uint64_t)v7, v151, (uint64_t)&v161, v10, v26 - 4);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            *((void *)&v166 + 1) = *(void *)&v128[2 * v22];
            v165[0] = v127[v22];
            int v31 = mfs_GetLeafIndex(v24, 0, v22);
            uint64_t result = mfs_IbAddtoVect_DUR(v141, (unsigned int *)a1, a3, (uint64_t)v165, v22, v31, 0, v137, (uint64_t)v7, v151, (uint64_t)&v161, v10, v26 - 4, v26 - 3);
            uint64_t v25 = v14;
            signed int v28 = v151;
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        signed int v19 = v28 + 1;
        uint64_t v21 = *a1;
        ++v20;
        BOOL v32 = v22++ <= v21;
        uint64_t v4 = a2;
        if (!v32)
        {
          unsigned int v139 = result;
          signed int v126 = v19;
          if (HIBYTE(v161) == 1)
          {
            uint64_t v6 = v141;
            v3 = (_DWORD *)a3;
          }
          else
          {
            int v131 = v20;
            uint64_t v57 = 0;
            v163[0] = 0;
            uint64_t v58 = *(void *)(a2 + 1976);
            if ((int)v21 >= -1) {
              int v59 = v21 + 1;
            }
            else {
              int v59 = v21 + 2;
            }
            *(_DWORD *)(v58 + 208) = 0;
            int v123 = -(v59 >> 1);
            *(_DWORD *)(v58 + 240) = 0;
            v164[0] = 0;
            unsigned int v167 = v19 - (v59 >> 1);
            uint64_t v60 = (uint64_t)v7;
            *(void *)&long long v169 = v7;
            *((void *)&v169 + 1) = v10;
            *(void *)&long long v170 = v10;
            uint64_t v168 = 0x300000002;
            unsigned int v149 = v151 - (v59 >> 1);
            unsigned int v144 = v167;
            do
            {
              uint64_t v61 = *((void *)&v169 + v57);
              uint64_t v135 = v57;
              uint64_t v62 = *(&v167 + v57);
              uint64_t v63 = *(unsigned int *)(*(void *)(v61 + 8) + 32 * v62 + 16);
              if ((int)v63 >= 1)
              {
                uint64_t v64 = 0;
                uint64_t v65 = 8 * v63;
                do
                {
                  int v66 = *(_DWORD *)(*(void *)(*(void *)(v61 + 8) + 32 * v62) + v64);
                  if (!mfs_CostList_IsNodeInList(v60, v149, v66 - 1, (uint64_t)a1, v164)
                    && !mfs_CostList_IsNodeInList((uint64_t)v153, 0, v66 - 1, (uint64_t)a1, v164)
                    && !mfs_CostList_IsNodeInList((uint64_t)v153, 1u, v66 - 1, (uint64_t)a1, v164))
                  {
                    unsigned int v139 = mfs_CostList_Pad((uint64_t)a1, v153, 6u, v66 - 1, *((void *)a1 + 298), a1[598], v163, *(float *)(*(void *)(*(void *)(v61 + 8) + 32 * v62) + v64 + 4) * 10.0);
                  }
                  if (!mfs_CostList_IsNodeInList(v60, v144 + 1, v66 + 1, (uint64_t)a1, v164)
                    && !mfs_CostList_IsNodeInList((uint64_t)v153, 4u, v66 + 1, (uint64_t)a1, v164)
                    && !mfs_CostList_IsNodeInList((uint64_t)v153, 5u, v66 + 1, (uint64_t)a1, v164))
                  {
                    unsigned int v139 = mfs_CostList_Pad((uint64_t)a1, v153, 7u, v66 + 1, *((void *)a1 + 298), a1[598], v163, *(float *)(*(void *)(*(void *)(v61 + 8) + 32 * v62) + v64 + 4) * 10.0);
                  }
                  v64 += 8;
                }
                while (v65 != v64);
              }
              uint64_t v57 = v135 + 1;
            }
            while (v135 != 2);
            uint64_t v4 = a2;
            uint64_t v67 = *(void *)(a2 + 1976);
            if (*(_DWORD *)(v67 + 208))
            {
              v10 = v153;
              mfs_ConcatTwoLists(v153, 1u, (uint64_t)v153, 6u);
              uint64_t v67 = *(void *)(a2 + 1976);
              v3 = (_DWORD *)a3;
            }
            else
            {
              v3 = (_DWORD *)a3;
              v10 = v153;
            }
            int v68 = v20;
            v7 = (void *)v60;
            if (*(_DWORD *)(v67 + 240)) {
              mfs_ConcatTwoLists(v10, 5u, (uint64_t)v10, 7u);
            }
            unsigned int v69 = v144;
            if (v3[2242] == 6)
            {
              uint64_t v70 = 0;
              v164[0] = 0;
              unsigned int v167 = v149;
              *(void *)&long long v169 = v7;
              *((void *)&v169 + 1) = v10;
              *(void *)&long long v170 = v10;
              uint64_t v168 = 0x100000000;
              *(_DWORD *)(*(void *)(a2 + 1976) + 208) = 0;
              do
              {
                uint64_t v71 = *((void *)&v169 + v70);
                uint64_t v72 = *(&v167 + v70);
                uint64_t v73 = *(unsigned int *)(*(void *)(v71 + 8) + 32 * v72 + 16);
                if ((int)v73 >= 1)
                {
                  uint64_t v74 = 0;
                  uint64_t v75 = 8 * v73;
                  do
                  {
                    unsigned int v76 = *(_DWORD *)(*(void *)(*(void *)(v71 + 8) + 32 * v72) + v74) + 1;
                    if (!mfs_CostList_IsNodeInList((uint64_t)v7, v69, v76, (uint64_t)a1, v164))
                    {
                      if (mfs_CostList_IsNodeInList((uint64_t)v153, 3u, v76, (uint64_t)a1, v164))
                      {
                        unsigned int v69 = v144;
                      }
                      else
                      {
                        unsigned int v69 = v144;
                        if (!mfs_CostList_IsNodeInList((uint64_t)v153, 4u, v76, (uint64_t)a1, v164)) {
                          unsigned int v139 = mfs_CostList_Pad((uint64_t)a1, v153, 6u, v76, *((void *)a1 + 298), a1[598], v163, *(float *)(*(void *)(*(void *)(v71 + 8) + 32 * v72) + v74 + 4) * 20.0);
                        }
                      }
                    }
                    v74 += 8;
                  }
                  while (v75 != v74);
                }
                ++v70;
              }
              while (v70 != 3);
              uint64_t v77 = *(void *)(a2 + 1976);
              if (*(_DWORD *)(v77 + 208))
              {
                mfs_ConcatTwoLists(v153, 3u, (uint64_t)v153, 6u);
                uint64_t v77 = *(void *)(a2 + 1976);
              }
              uint64_t v78 = 0;
              v164[0] = 0;
              unsigned int v167 = v144 + 1;
              *(void *)&long long v169 = v7;
              *((void *)&v169 + 1) = v153;
              *(void *)&long long v170 = v153;
              uint64_t v168 = 0x500000004;
              *(_DWORD *)(v77 + 208) = 0;
              do
              {
                uint64_t v79 = *((void *)&v169 + v78);
                uint64_t v80 = *(&v167 + v78);
                uint64_t v81 = *(unsigned int *)(*(void *)(v79 + 8) + 32 * v80 + 16);
                if ((int)v81 >= 1)
                {
                  uint64_t v82 = 0;
                  uint64_t v83 = 8 * v81;
                  do
                  {
                    unsigned int v84 = *(_DWORD *)(*(void *)(*(void *)(v79 + 8) + 32 * v80) + v82) - 1;
                    if (!mfs_CostList_IsNodeInList((uint64_t)v7, v69, v84, (uint64_t)a1, v164))
                    {
                      if (mfs_CostList_IsNodeInList((uint64_t)v153, 3u, v84, (uint64_t)a1, v164))
                      {
                        unsigned int v69 = v144;
                      }
                      else
                      {
                        unsigned int v69 = v144;
                        if (!mfs_CostList_IsNodeInList((uint64_t)v153, 4u, v84, (uint64_t)a1, v164)) {
                          unsigned int v139 = mfs_CostList_Pad((uint64_t)a1, v153, 6u, v84, *((void *)a1 + 298), a1[598], v163, *(float *)(*(void *)(*(void *)(v79 + 8) + 32 * v80) + v82 + 4) * 20.0);
                        }
                      }
                    }
                    v82 += 8;
                  }
                  while (v83 != v82);
                }
                ++v78;
              }
              while (v78 != 3);
              uint64_t v4 = a2;
              if (*(_DWORD *)(*(void *)(a2 + 1976) + 208))
              {
                v10 = v153;
                mfs_ConcatTwoLists(v153, 3u, (uint64_t)v153, 6u);
                v3 = (_DWORD *)a3;
                uint64_t v25 = v132;
              }
              else
              {
                v3 = (_DWORD *)a3;
                uint64_t v25 = v132;
                v10 = v153;
              }
              int v68 = v131;
            }
            else
            {
              uint64_t v25 = v132;
            }
            if (*a1 >= 1)
            {
              uint64_t v85 = 0;
              int v86 = v123 + v68;
              uint64_t v87 = 1;
              signed int v88 = 1;
              do
              {
                uint64_t v89 = *(void *)(v4 + 1976);
                if (*(_DWORD *)(v89 + (v85 >> 27) + 16))
                {
                  mfs_ConcatTwoLists(v7, v86 + v87 - 1, (uint64_t)v10, v88 - 1);
                  uint64_t v89 = *(void *)(v4 + 1976);
                }
                if (*(_DWORD *)(v89 + 32 * v88 + 16)) {
                  mfs_ConcatTwoLists(v7, v86 + v87 - 1, (uint64_t)v10, v88);
                }
                ++v87;
                v88 += 2;
                v85 += 0x200000000;
              }
              while (v87 <= *a1);
            }
            uint64_t v6 = v141;
          }
          goto LABEL_112;
        }
      }
    }
    LODWORD(result) = v139;
    if ((int)v18 >= 1) {
      break;
    }
    uint64_t v25 = v14;
    uint64_t v6 = v16;
LABEL_40:
    if (HIBYTE(v161) == 1)
    {
      unsigned int v139 = result;
    }
    else
    {
      int v43 = v18 + 2;
      if ((int)v18 >= -1) {
        int v43 = v18 + 1;
      }
      uint64_t v44 = v126 - (v43 >> 1);
      uint64_t v45 = *(unsigned int *)(*(void *)(v4 + 1952) + 32 * v44 + 16);
      v163[0] = 0;
      if ((int)v45 >= 1)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          if ((int)v18 >= 3)
          {
            uint64_t v49 = *(void *)(*(void *)(v4 + 1952) + 32 * v44) + 8 * v46;
            int v50 = *(_DWORD *)v49;
            float v51 = *(float *)(v49 + 4) * 10.0;
            int v52 = 1;
            v53 = v7;
            int v54 = -1;
            do
            {
              int v55 = v48
                  + ((int)mfs_CostList_Add((uint64_t)a1, v53, (int)v44 + v54, v50 + v54, *((void *)a1 + 298), a1[598], v163, v51) >= 0);
              LODWORD(result) = mfs_CostList_Add((uint64_t)a1, v53, (int)v44 + v52, v50 + v52, *((void *)a1 + 298), a1[598], v163, v51);
              int v48 = v55 + ((int)result >= 0);
              v47 += 2;
              ++v52;
              LODWORD(v18) = *a1;
              int v56 = *a1 + 2;
              if (*a1 >= -1) {
                int v56 = v18 + 1;
              }
              --v54;
            }
            while (v52 < v56 >> 1);
            uint64_t v4 = a2;
            v7 = v53;
            uint64_t v25 = v132;
          }
          ++v46;
        }
        while (v46 != v45);
      }
      unsigned int v139 = result;
      uint64_t v6 = v141;
      MFS__log_select_Diag(v141, 1, (uint64_t)"MCP Phoneme filler added %lu states %lu\n");
      v3 = (_DWORD *)a3;
      v10 = v153;
    }
LABEL_112:
    uint64_t v9 = v25 + 1;
    if (v9 >= *(int *)(v4 + 608)) {
      goto LABEL_115;
    }
  }
  uint64_t v33 = 0;
  uint64_t v34 = v11 + 528 * v14;
  v143 = (void *)(v34 + 16);
  v148 = (void *)(v34 + 312);
  v35 = v124;
  v36 = v125;
  uint64_t v37 = v15;
  uint64_t v25 = v14;
  v129 = v7;
  while (1)
  {
    uint64_t v38 = v33;
    if (v25 && v25 != *(_DWORD *)(v4 + 608) - 1) {
      *(_DWORD *)(v4 + 2604) += *(_DWORD *)(*v143 + 4 * v33 + 8) * *(_DWORD *)(a3 + 24);
    }
    if (HIBYTE(v161) != 1
      || *(_DWORD *)(a3 + 8256) && (v25 && !v33 || v33 + 2 == v18 + 1 && v25 != *(_DWORD *)(a2 + 608) - 1))
    {
      signed int v39 = v126 + v33;
      *((void *)&v166 + 1) = *((void *)v35 - 9);
      v165[0] = *(v36 - 9);
      int v40 = mfs_GetLeafIndex(v37, 1, (int)v33 + 2);
      uint64_t result = mfs_IbAddtoVect(v141, (uint64_t)a1, a3, (uint64_t)v165, 1, (int)v38 + 2, v40, 0, 1.0, 1.0, 0.025, v137, v7, v126 + (int)v38, (unsigned __int8 *)&v161, 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if ((*(unsigned char *)(*v148 + v38 + 2) & 4) != 0)
      {
        *((void *)&v166 + 1) = *(void *)v35;
        v165[0] = *v36;
        int v41 = mfs_GetLeafIndex(v37, 2, (int)v38 + 2);
        uint64_t result = mfs_IbAddtoVect(v141, (uint64_t)a1, a3, (uint64_t)v165, 2, (int)v38 + 2, v41, 0, 1.0, 1.0, 0.025, v137, v7, v39, (unsigned __int8 *)&v161, 1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        *((void *)&v166 + 1) = *((void *)v35 - 18);
        v165[0] = *(v36 - 18);
        int v42 = mfs_GetLeafIndex(v37, 0, (int)v38 + 2);
        uint64_t result = mfs_IbAddtoVect(v141, (uint64_t)a1, a3, (uint64_t)v165, 0, (int)v38 + 2, v42, 0, 1.0, 1.0, 0.025, v137, v129, v39, (unsigned __int8 *)&v161, 0);
        v7 = v129;
        v10 = v153;
        uint64_t v25 = v132;
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    uint64_t v18 = *a1;
    uint64_t v33 = v38 + 1;
    ++v36;
    v35 += 2;
    uint64_t v4 = a2;
    if (v38 + 2 > v18)
    {
      v126 += v33;
      uint64_t v6 = v141;
      v3 = (_DWORD *)a3;
      goto LABEL_40;
    }
  }
}

uint64_t concat_applyBPF(uint64_t a1, char *a2, unsigned int a3)
{
  v17[4] = *MEMORY[0x263EF8340];
  v17[0] = 0xBF95F27700000000;
  v17[1] = 0x3FE0EBB200000000;
  v17[2] = 0xBF95F27700000000;
  v17[3] = 0x3E95F27700000000;
  int v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v6 = a3;
  v7 = (_DWORD *)heap_Calloc(*(void **)(a1 + 8), a3, 4);
  if (!v7) {
    return 2229280778;
  }
  uint64_t v9 = (uint64_t)v7;
  if (a3)
  {
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = 0;
      uint64_t v12 = (const float *)&a2[4 * v10];
      v8.f32[0] = *(float *)v15 + (float)(*v12 * 0.29287);
      v7[v10] = v8.i32[0];
      float32x4_t v13 = vld1q_dup_f32(v12);
      float32x4_t v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
      do
      {
        v15[v11 / 2] = vmlsq_f32(vmlaq_f32(*(float32x4_t *)((char *)&v15[v11 / 2] + 4), v13, *(float32x4_t *)&v17[v11]), v8, *(float32x4_t *)((char *)&unk_20D6B42DC + v11 * 8 + 4));
        v11 += 2;
      }
      while (v11 != 4);
      ++v10;
    }
    while (v10 != v6);
  }
  memcpy(a2, v7, 4 * v6);
  heap_Free(*(void **)(a1 + 8), v9);
  return 0;
}

uint64_t ConnectedContextLength_TahoeVersion(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  char v49 = 0;
  __int16 v48 = 0;
  int v4 = *(_DWORD *)(a3 + 608);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v45 = a3 + 1944;
    int v41 = -1;
    int v43 = 1;
    uint64_t v40 = 528;
    do
    {
      if ((v5 & 0xFFFFFFFE) != 0)
      {
        uint64_t v7 = 0;
        unsigned int v8 = v41;
        while (1)
        {
          uint64_t v9 = v7;
          if (v7 >= *(int *)(a1 + 8880)) {
            break;
          }
          UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a3 + 8), *(_DWORD *)(*(void *)(a3 + 600) + 528 * v8), &v48);
          if (HIBYTE(v48) == 1) {
            break;
          }
          v53[v9 + 120] = HIBYTE(v48);
          --v8;
          uint64_t v7 = v9 + 1;
          if (v41 == v9 + 1)
          {
            int v10 = v41;
            goto LABEL_10;
          }
        }
        int v10 = v9;
LABEL_10:
        int v4 = *(_DWORD *)(a3 + 608);
      }
      else
      {
        int v10 = 0;
      }
      if (v4 <= (int)++v5)
      {
        int v15 = 0;
      }
      else
      {
        int v11 = v10;
        uint64_t v12 = v6;
        uint64_t v13 = 0;
        uint64_t v14 = v40;
        while (v13 < *(int *)(a1 + 8880))
        {
          UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a3 + 8), *(_DWORD *)(*(void *)(a3 + 600) + v14), &v48);
          if (HIBYTE(v48) == 1) {
            break;
          }
          v53[v13 + 60] = HIBYTE(v48);
          int v15 = v13 + 1;
          v14 += 528;
          int v16 = v43 + ++v13;
          if (*(_DWORD *)(a3 + 608) <= v16) {
            goto LABEL_20;
          }
        }
        int v15 = v13;
LABEL_20:
        uint64_t v6 = v12;
        int v10 = v11;
      }
      int v17 = *(_DWORD *)a2;
      if (*(int *)a2 >= 1)
      {
        float v18 = (float)v15;
        float v19 = (float)v10;
        int v20 = 2;
        uint64_t v42 = v5;
        do
        {
          int v21 = *(_DWORD *)(a1 + 8880);
          BOOL v22 = (int)v6 >= v21 && v21 + (int)v6 < *(_DWORD *)(a3 + 608) * v17;
          if (v22)
          {
            uint64_t v23 = (int)v6;
            uint64_t v24 = *(void *)(a3 + 1952);
            if (*(_DWORD *)(v24 + 32 * (int)v6 + 16))
            {
              int v44 = v20;
              unint64_t v25 = 0;
              do
              {
                uint64_t v26 = *(void *)(v24 + 32 * v23);
                CandGetContext(a1, a2, a3, *(_DWORD *)(v26 + 8 * v25), (uint64_t)v53, (_DWORD *)&v51 + 1, 1, v6, (_DWORD *)&v50 + 1);
                CandGetContext(a1, a2, a3, *(_DWORD *)(v26 + 8 * v25), (uint64_t)v52, &v51, 0, v6, &v50);
                if (v15 >= (int)v51) {
                  uint64_t v27 = v51;
                }
                else {
                  uint64_t v27 = v15;
                }
                float v28 = 0.0;
                if (v27)
                {
                  if ((int)v27 < 1)
                  {
                    LODWORD(v27) = 0;
                  }
                  else
                  {
                    uint64_t v29 = 0;
                    while (v53[v29 + 60] == v52[v29])
                    {
                      if (v27 == ++v29) {
                        goto LABEL_41;
                      }
                    }
                    LODWORD(v27) = v29;
                  }
LABEL_41:
                  float v28 = (float)(int)v27 / v18;
                }
                if (v15 >= (int)v50) {
                  uint64_t v30 = v50;
                }
                else {
                  uint64_t v30 = v15;
                }
                float v31 = 0.0;
                if (v30)
                {
                  if ((int)v30 < 1)
                  {
                    LODWORD(v30) = 0;
                  }
                  else
                  {
                    uint64_t v32 = 0;
                    while (v53[v32 + 60] == v52[v32])
                    {
                      if (v30 == ++v32) {
                        goto LABEL_53;
                      }
                    }
                    LODWORD(v30) = v32;
                  }
LABEL_53:
                  float v31 = (float)(int)v30 / v18;
                }
                if (v10 >= SHIDWORD(v50)) {
                  uint64_t v33 = HIDWORD(v50);
                }
                else {
                  uint64_t v33 = v10;
                }
                float v34 = 0.0;
                float v35 = 0.0;
                if (v33)
                {
                  if ((int)v33 < 1)
                  {
                    LODWORD(v33) = 0;
                  }
                  else
                  {
                    uint64_t v36 = 0;
                    while (v53[v36 + 120] == v53[v36])
                    {
                      if (v33 == ++v36) {
                        goto LABEL_65;
                      }
                    }
                    LODWORD(v33) = v36;
                  }
LABEL_65:
                  float v35 = (float)(int)v33 / v19;
                }
                if (v10 >= SHIDWORD(v51)) {
                  uint64_t v37 = HIDWORD(v51);
                }
                else {
                  uint64_t v37 = v10;
                }
                if (v37)
                {
                  if ((int)v37 < 1)
                  {
                    LODWORD(v37) = 0;
                  }
                  else
                  {
                    uint64_t v38 = 0;
                    while (v53[v38 + 120] == v53[v38])
                    {
                      if (v37 == ++v38) {
                        goto LABEL_77;
                      }
                    }
                    LODWORD(v37) = v38;
                  }
LABEL_77:
                  float v34 = (float)(int)v37 / v19;
                }
                mfs_CostList_UpdateCost(v45, v6, v25, (float)(*(float *)(v26 + 8 * v25 + 4) * 0.1)+ (float)((float)((float)(1.0- (float)((float)((float)((float)((float)(v28 * 0.1) + 0.0) + (float)(v31 * 0.4))+ (float)(v35 * 0.4))+ (float)(v34 * 0.1)))* 0.9)* *(float *)(v26 + 8 * v25 + 4)));
                ++v25;
                uint64_t v24 = *(void *)(a3 + 1952);
                uint64_t v23 = (int)v6;
              }
              while (v25 < *(unsigned int *)(v24 + 32 * (int)v6 + 16));
              int v17 = *(_DWORD *)a2;
              uint64_t v5 = v42;
              int v20 = v44;
            }
            uint64_t v6 = (v6 + 1);
          }
          BOOL v22 = v20++ <= v17;
        }
        while (v22);
      }
      int v4 = *(_DWORD *)(a3 + 608);
      ++v43;
      v40 += 528;
      ++v41;
    }
    while (v4 > (int)v5);
  }
  mfs_CostList_FreeUidIndex((void *)(a3 + 1944));
  return 0;
}

uint64_t CandGetContext(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6, int a7, signed int a8, _DWORD *a9)
{
  unsigned int v13 = a4;
  int v16 = *(_DWORD *)a2;
  v34[0] = 0;
  v34[1] = 0;
  uint64_t v33 = v34;
  uint64_t result = mfs_getUnitDataFromMfsData(a2, a4, (uint64_t *)&v33);
  if (a7 == 1) {
    int v18 = -v16;
  }
  else {
    int v18 = v16;
  }
  if (a7 == 1) {
    int v19 = -1;
  }
  else {
    int v19 = 1;
  }
  int v30 = v18;
  signed int v20 = v18 + v13;
  if ((int)(v18 + v13) < 0)
  {
    LODWORD(v21) = 0;
    int v25 = 0;
  }
  else
  {
    uint64_t v26 = a6;
    uint64_t v21 = 0;
    int v22 = *((unsigned __int16 *)v33 + 5);
    int v32 = 1;
    uint64_t v29 = a5;
    int v27 = 0;
    int v28 = v22;
    do
    {
      uint64_t result = mfs_getUnitDataFromMfsData(a2, v20, (uint64_t *)&v33);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (v22 != *((unsigned __int16 *)v33 + 5)) {
        break;
      }
      if (v21 >= *(int *)(a1 + 8880)) {
        break;
      }
      if (v20 <= *(_DWORD *)a2) {
        break;
      }
      uint64_t result = mfs_getUnitDataFromMfsData(a2, v20, (uint64_t *)&v33);
      if (*((unsigned char *)v33 + 13) == 1) {
        break;
      }
      if (v32)
      {
        while (1)
        {
          signed int v23 = a8;
          a8 += v19;
          if (a8 < 0) {
            break;
          }
          unsigned int v24 = v13 + v19;
          if (((v13 + v19) & 0x80000000) != 0
            || a8 == *(_DWORD *)(a3 + 1960)
            || !mfs_CostList_HasUnit((void *)(a3 + 1944), a8, v13 + v19))
          {
            break;
          }
          v13 += v19;
          if (v20 == v24)
          {
            ++v27;
            a8 = v19 + v23;
            unsigned int v13 = v20;
            goto LABEL_22;
          }
        }
        int v32 = 0;
        a8 = v19 + v23;
        v13 += v19;
LABEL_22:
        a5 = v29;
        int v22 = v28;
      }
      else
      {
        int v32 = 0;
      }
      uint64_t result = mfs_getUnitDataFromMfsData(a2, v20, (uint64_t *)&v33);
      *(unsigned char *)(a5 + v21++) = *((unsigned char *)v33 + 13);
      v20 += v30;
    }
    while (v20 >= 0);
    a6 = v26;
    int v25 = v27;
  }
  *a6 = v21;
  *a9 = v25;
  return result;
}

uint64_t ConnectedContextLength(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v51 = 0;
  __int16 v50 = 0;
  LODWORD(v4) = *(_DWORD *)(a3 + 608);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    LODWORD(v6) = 0;
    uint64_t v7 = a3 + 1944;
    int v44 = -1;
    int v45 = 1;
    uint64_t v43 = 528;
    do
    {
      uint64_t v8 = *(void *)(a3 + 600);
      if (v5 < 2)
      {
        int v13 = 0;
      }
      else
      {
        uint64_t v9 = *(void *)(a3 + 600);
        uint64_t v10 = 0;
        unsigned int v11 = v44;
        while (1)
        {
          uint64_t v12 = v10;
          if (v10 >= *(int *)(a1 + 8880)) {
            break;
          }
          UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a3 + 8), *(_DWORD *)(*(void *)(a3 + 600) + 528 * v11), &v50);
          if (HIBYTE(v50) == 1) {
            break;
          }
          v55[v12 + 120] = HIBYTE(v50);
          --v11;
          uint64_t v10 = v12 + 1;
          if (v44 == v12 + 1)
          {
            int v13 = v44;
            goto LABEL_11;
          }
        }
        int v13 = v12;
LABEL_11:
        LODWORD(v4) = *(_DWORD *)(a3 + 608);
        uint64_t v8 = v9;
      }
      int64_t v42 = v5 + 1;
      if ((uint64_t)(v5 + 1) >= (int)v4)
      {
        int v16 = 0;
      }
      else
      {
        uint64_t v46 = v8;
        uint64_t v14 = 0;
        uint64_t v15 = v43;
        while (v14 < *(int *)(a1 + 8880))
        {
          UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a3 + 8), *(_DWORD *)(*(void *)(a3 + 600) + v15), &v50);
          if (HIBYTE(v50) == 1) {
            break;
          }
          v55[v14 + 60] = HIBYTE(v50);
          int v16 = v14 + 1;
          v15 += 528;
          int v17 = v45 + ++v14;
          if (*(_DWORD *)(a3 + 608) <= v17) {
            goto LABEL_20;
          }
        }
        int v16 = v14;
LABEL_20:
        uint64_t v8 = v46;
      }
      UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a3 + 8), *(_DWORD *)(v8 + 528 * v5), &v50);
      int v18 = *(_DWORD *)a2;
      if (*(int *)a2 >= 1)
      {
        float v19 = (float)v16;
        float v20 = (float)v13;
        uint64_t v6 = (int)v6;
        int v21 = 2;
        do
        {
          BOOL v22 = v21 == v18 + 1 && v51 == 1;
          if (v22 && *(_DWORD *)(*(void *)(a3 + 1952) + 32 * v6 + 16))
          {
            unsigned int v23 = 0;
            do
              mfs_CostList_UpdateCost(v7, v6, v23++, 0.0);
            while (v23 < *(_DWORD *)(*(void *)(a3 + 1952) + 32 * v6 + 16));
            int v18 = *(_DWORD *)a2;
          }
          uint64_t v24 = *(int *)(a1 + 8880);
          BOOL v25 = v6 >= v24 && (int)v24 + (int)v6 < v18 * *(_DWORD *)(a3 + 608);
          if (v25)
          {
            uint64_t v26 = *(void *)(a3 + 1952);
            if (*(_DWORD *)(v26 + 32 * v6 + 16))
            {
              int v47 = v21;
              unint64_t v27 = 0;
              do
              {
                uint64_t v28 = *(void *)(v26 + 32 * v6);
                CandGetContext(a1, a2, a3, *(_DWORD *)(v28 + 8 * v27), (uint64_t)v55, (_DWORD *)&v53 + 1, 1, v6, (_DWORD *)&v52 + 1);
                CandGetContext(a1, a2, a3, *(_DWORD *)(v28 + 8 * v27), (uint64_t)v54, &v53, 0, v6, &v52);
                if (v16 >= (int)v53) {
                  uint64_t v29 = v53;
                }
                else {
                  uint64_t v29 = v16;
                }
                float v30 = 0.0;
                if (v29)
                {
                  if ((int)v29 < 1)
                  {
                    LODWORD(v29) = 0;
                  }
                  else
                  {
                    uint64_t v31 = 0;
                    while (v55[v31 + 60] == v54[v31])
                    {
                      if (v29 == ++v31) {
                        goto LABEL_50;
                      }
                    }
                    LODWORD(v29) = v31;
                  }
LABEL_50:
                  float v30 = (float)(int)v29 / v19;
                }
                if (v16 >= (int)v52) {
                  uint64_t v32 = v52;
                }
                else {
                  uint64_t v32 = v16;
                }
                float v33 = 0.0;
                if (v32)
                {
                  if ((int)v32 < 1)
                  {
                    LODWORD(v32) = 0;
                  }
                  else
                  {
                    uint64_t v34 = 0;
                    while (v55[v34 + 60] == v54[v34])
                    {
                      if (v32 == ++v34) {
                        goto LABEL_62;
                      }
                    }
                    LODWORD(v32) = v34;
                  }
LABEL_62:
                  float v33 = (float)(int)v32 / v19;
                }
                if (v13 >= SHIDWORD(v52)) {
                  uint64_t v35 = HIDWORD(v52);
                }
                else {
                  uint64_t v35 = v13;
                }
                float v36 = 0.0;
                float v37 = 0.0;
                if (v35)
                {
                  if ((int)v35 < 1)
                  {
                    LODWORD(v35) = 0;
                  }
                  else
                  {
                    uint64_t v38 = 0;
                    while (v55[v38 + 120] == v55[v38])
                    {
                      if (v35 == ++v38) {
                        goto LABEL_74;
                      }
                    }
                    LODWORD(v35) = v38;
                  }
LABEL_74:
                  float v37 = (float)(int)v35 / v20;
                }
                if (v13 >= SHIDWORD(v53)) {
                  uint64_t v39 = HIDWORD(v53);
                }
                else {
                  uint64_t v39 = v13;
                }
                if (v39)
                {
                  if ((int)v39 < 1)
                  {
                    LODWORD(v39) = 0;
                  }
                  else
                  {
                    uint64_t v40 = 0;
                    while (v55[v40 + 120] == v55[v40])
                    {
                      if (v39 == ++v40) {
                        goto LABEL_86;
                      }
                    }
                    LODWORD(v39) = v40;
                  }
LABEL_86:
                  float v36 = (float)(int)v39 / v20;
                }
                mfs_CostList_UpdateCost(v7, v6, v27, *(float *)(v28 + 8 * v27 + 4)* (float)(1.0- (float)((float)((float)((float)((float)(v30 * 0.1) + 0.0) + (float)(v33 * 0.4))+ (float)(v37 * 0.4))+ (float)(v36 * 0.1))));
                ++v27;
                uint64_t v26 = *(void *)(a3 + 1952);
              }
              while (v27 < *(unsigned int *)(v26 + 32 * v6 + 16));
              int v18 = *(_DWORD *)a2;
              int v21 = v47;
            }
          }
          ++v6;
          BOOL v25 = v21++ <= v18;
        }
        while (v25);
      }
      int64_t v4 = *(int *)(a3 + 608);
      ++v44;
      ++v45;
      v43 += 528;
      ++v5;
    }
    while (v42 < v4);
  }
  mfs_CostList_FreeUidIndex((void *)(a3 + 1944));
  return 0;
}

uint64_t PruneDPListOnContext(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  v41[0] = 0;
  v41[1] = 0;
  uint64_t v40 = v41;
  if (*(int *)(a3 + 608) >= 1)
  {
    uint64_t v6 = a1;
    uint64_t v36 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    char v43 = 0;
    __int16 v42 = 0;
    uint64_t v9 = (void *)(a3 + 1944);
    while (1)
    {
      uint64_t v10 = *(void *)(a3 + 600);
      uint64_t v11 = v36;
      UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a3 + 8), v36, &v42);
      int v12 = *(_DWORD *)a2;
      if (HIBYTE(v42) == 1)
      {
        if (v12 >= 1)
        {
          uint64_t v13 = 0;
          uint64_t v14 = (32 * v7) | 0x10;
          while (!a4)
          {
            int v16 = *(_DWORD *)(v6 + 8256);
            if (v16)
            {
              if (v16 >= *(_DWORD *)(v6 + 8240)) {
                signed int v17 = *(_DWORD *)(v6 + 8240);
              }
              else {
                signed int v17 = *(_DWORD *)(v6 + 8256);
              }
            }
            else
            {
              signed int v17 = 20;
            }
            *(_DWORD *)(*(void *)(a3 + 2016) + 4 * v7 + 4 * v13) = v17;
            if (*(_DWORD *)(*(void *)(a3 + 1952) + v14) > v17)
            {
              uint64_t v15 = mfs_CostList_SelectAndPrune(v9, v7 + (int)v13, 1, v17);
LABEL_15:
              uint64_t v8 = v15;
              if ((v15 & 0x80000000) != 0) {
                return v8;
              }
              goto LABEL_16;
            }
            uint64_t v8 = 0;
LABEL_16:
            ++v13;
            v14 += 32;
            if ((int)v13 + 1 > *(_DWORD *)a2)
            {
              v7 += v13;
              goto LABEL_51;
            }
          }
          uint64_t v15 = mfs_CostList_Sort((uint64_t)v9, v7 + (int)v13, 1);
          goto LABEL_15;
        }
      }
      else if (v12 >= 1)
      {
        float v37 = (void *)(v10 + 528 * v36 + 312);
        uint64_t v18 = v7;
        uint64_t v19 = 2;
        int v20 = a4;
        do
        {
          uint64_t v21 = *(void *)(a3 + 1952);
          if (v20)
          {
            if (!*(_DWORD *)(v21 + 32 * v18 + 16)) {
              goto LABEL_34;
            }
            uint64_t v22 = 0;
            unint64_t v23 = 0;
            int v24 = 0;
            do
            {
              uint64_t v25 = *(void *)(v21 + 32 * v18);
              mfs_getUnitDataFromMfsData(a2, *(_DWORD *)(v25 + v22), (uint64_t *)&v40);
              if (*((unsigned __int8 *)v40 + 13) == HIBYTE(v42))
              {
                if (v42 != *((unsigned __int8 *)v40 + 12)) {
                  mfs_CostList_UpdateCost((uint64_t)v9, v18, v23, *(float *)(v25 + v22 + 4) * 1.2);
                }
                ++v24;
              }
              else
              {
                float v26 = *(float *)(v25 + v22 + 4);
                if (v26 == 0.0) {
                  float v27 = 300.0;
                }
                else {
                  float v27 = (float)(v26 * 1.2) * 300.0;
                }
                mfs_CostList_UpdateCost((uint64_t)v9, v18, v23, v27);
              }
              ++v23;
              uint64_t v21 = *(void *)(a3 + 1952);
              v22 += 8;
            }
            while (v23 < *(unsigned int *)(v21 + 32 * v18 + 16));
            int v20 = a4;
            if (!v24)
            {
LABEL_34:
              MFS__log_select_Diag(*(void *)(a3 + 1928), 1, (uint64_t)"*** No CurMatch Candidates for (%d) (%d)\n");
              uint64_t v21 = *(void *)(a3 + 1952);
            }
          }
          uint64_t v28 = v21 + 32 * v18;
          int v31 = *(_DWORD *)(v28 + 16);
          float v30 = (signed int *)(v28 + 16);
          signed int v29 = v31;
          uint64_t v6 = a1;
          if (v31 >= 21)
          {
            if (*(_DWORD *)(a1 + 8240) >= (int)(float)(*(float *)(a1 + 8236) * (float)v29)) {
              signed int v29 = (int)(float)(*(float *)(a1 + 8236) * (float)v29);
            }
            else {
              signed int v29 = *(_DWORD *)(a1 + 8240);
            }
          }
          uint64_t v32 = *(void *)(a3 + 2016);
          *(_DWORD *)(v32 + 4 * v18) = v29;
          if (*(_DWORD *)(a1 + 8968) == 5 && (*(unsigned char *)(*v37 + v19) & 4) == 0)
          {
            int v33 = *(_DWORD *)(a1 + 8244);
            if (v33 < *(_DWORD *)(a1 + 8240))
            {
              signed int v29 = *v30;
              if (*v30 >= 21)
              {
                if (v33 >= (int)(float)(*(float *)(a1 + 8236) * (float)v29)) {
                  signed int v29 = (int)(float)(*(float *)(a1 + 8236) * (float)v29);
                }
                else {
                  signed int v29 = *(_DWORD *)(a1 + 8244);
                }
              }
              *(_DWORD *)(v32 + 4 * v18) = v29;
            }
          }
          if (*v30 > v29)
          {
            uint64_t v8 = mfs_CostList_SelectAndPrune(v9, v18, 1, v29);
            if ((v8 & 0x80000000) != 0) {
              return v8;
            }
          }
          ++v18;
        }
        while (v19++ <= *(int *)a2);
        int v7 = v18;
LABEL_51:
        uint64_t v11 = v36;
      }
      uint64_t v36 = v11 + 1;
      if (v11 + 1 >= *(int *)(a3 + 608)) {
        return v8;
      }
    }
  }
  return 0;
}

uint64_t mfs_StatisticalSelection_Obersee(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 1928);
  uint64_t v7 = *(unsigned int *)(a1 + 620);
  v107[0] = 0;
  *(_DWORD *)(a1 + 2580) = *(_DWORD *)(a1 + 2584);
  uint64_t v96 = v6;
  if (*(_DWORD *)(a1 + 2592) != 1)
  {
    uint64_t v8 = 2229280778;
    MFS__log_select_Diag(v6, 1, (uint64_t)"HybridStatisticalSelection(emfs obersee:%s) {\n");
    MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_SEARCHMODE_DRAGON_TAHOE\n");
    int v47 = (uint64_t *)heap_Calloc(*(void **)(v6 + 8), 1, 18240);
    *(void *)(a1 + 2568) = v47;
    if (!v47) {
      return v8;
    }
    uint64_t v102 = (uint64_t)v47;
    uint64_t inited = mfs_uselect_Init_Obersee(v47, a1, (uint64_t)a3, a4);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_94;
    }
    *(_DWORD *)(a1 + 2064) = 2;
    *(_DWORD *)(a1 + 1936) = v7;
    uint64_t v48 = heap_Calloc(*(void **)(*(void *)(a1 + 1928) + 8), (2 * v7), 4);
    *(void *)(a1 + 2088) = v48;
    if (!v48) {
      goto LABEL_95;
    }
    uint64_t v49 = v48 + 4 * v7;
    *(void *)(a1 + 2096) = v49;
    if (v7)
    {
      uint64_t v50 = 0;
      do
      {
        *(_DWORD *)(v49 + v50) = *(_DWORD *)(a4 + 8248);
        *(_DWORD *)(v48 + v50) = *(_DWORD *)(a4 + 8172);
        v50 += 4;
      }
      while (4 * v7 != v50);
    }
    uint64_t inited = mfs_Search_InitPrefilter(v102);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_94;
    }
    int v99 = *a3;
    if (*a3 >= 0) {
      int v51 = *a3;
    }
    else {
      int v51 = *a3 + 1;
    }
    if ((*(_DWORD *)(a4 + 8968) - 7) >= 5) {
      float v52 = 1.0;
    }
    else {
      float v52 = 2.0;
    }
    uint64_t v53 = BET3FLT__ddcalloc(*(void **)(*(void *)(a1 + 1928) + 8), v7, 4);
    if (v53)
    {
      int v55 = v53;
      v54.i32[0] = 1.0;
      if ((*(_DWORD *)(a4 + 8968) - 7) >= 5) {
        *(float *)v54.i32 = (float)(*(float *)(a4 + 8160) + *(float *)(a4 + 8124)) + *(float *)(a4 + 8128);
      }
      uint64_t v56 = (uint64_t *)v102;
      if (*(int *)(a1 + 608) >= 1)
      {
        uint64_t v57 = 0;
        int v58 = 0;
        int v59 = 0;
        int v60 = v51 >> 1;
        if (v60 <= 2) {
          int v61 = 2;
        }
        else {
          int v61 = v60;
        }
        int v98 = v61;
        int v95 = v61 - 1;
        int v101 = v60;
        float32x4_t v105 = (float32x4_t)vdupq_lane_s32(v54, 0);
        do
        {
          uint64_t v62 = *(void *)(a1 + 600);
          if (v59)
          {
            if (v60 < *a3)
            {
              uint64_t v63 = (float32x4_t **)&v55[v58];
              do
              {
                (*v63)->f32[0] = UNICORN__mfs_Ling_TransWeightsDiphADJ(*(void **)(a1 + 8), *v59)
                               * *(float *)(a4 + 8160);
                (*v63)->f32[1] = UNICORN__mfs_Ling_TransWeightsDiphMCP(*(void **)(a1 + 8), *v59)
                               * *(float *)(a4 + 8124);
                float v64 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(void **)(a1 + 8), *v59);
                uint64_t v65 = *v63++;
                v65->f32[2] = v64 * *(float *)(a4 + 8128);
                v65->i32[3] = 0;
                *uint64_t v65 = vdivq_f32(*v65, v105);
                ++v60;
                ++v58;
              }
              while (v60 < *a3);
            }
            *(float *)v55[v58] = v52
                               * (float)(UNICORN__mfs_Ling_TransWeightsPhonADJ(*(void **)(a1 + 8), *v59)
                                       * *(float *)(a4 + 8160));
            *(float *)(v55[v58] + 4) = v52
                                       * (float)(UNICORN__mfs_Ling_TransWeightsPhonMCP(*(void **)(a1 + 8), *v59)
                                               * *(float *)(a4 + 8124));
            float v66 = UNICORN__mfs_Ling_TransWeightsPhonLF0(*(void **)(a1 + 8), *v59);
            uint64_t v67 = (float32x4_t *)v55[v58];
            v67->f32[2] = v52 * (float)(v66 * *(float *)(a4 + 8128));
            v67->i32[3] = 0;
            *uint64_t v67 = vdivq_f32(*v67, v105);
            int v68 = v58 + 1;
            uint64_t v56 = (uint64_t *)v102;
            int v60 = v101;
            if (v99 >= 4)
            {
              unsigned int v69 = (float **)&v55[v68];
              int v68 = v98 + v58;
              int v70 = v95;
              do
              {
                float v71 = v52
                    * (float)(UNICORN__mfs_Ling_TransWeightsDiphADJ(*(void **)(a1 + 8), *v59) * *(float *)(a4 + 8160));
                uint64_t v72 = *v69;
                **unsigned int v69 = v71;
                if ((*(_DWORD *)(a4 + 8968) - 7) <= 4 && v59[6] == *a3) {
                  *uint64_t v72 = v71 + 1.0;
                }
                (*v69)[1] = v52
                          * (float)(UNICORN__mfs_Ling_TransWeightsDiphMCP(*(void **)(a1 + 8), *v59)
                                  * *(float *)(a4 + 8124));
                float v73 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(void **)(a1 + 8), *v59);
                uint64_t v74 = (float32x4_t *)*v69++;
                v74->f32[2] = v52 * (float)(v73 * *(float *)(a4 + 8128));
                v74->i32[3] = 0;
                *uint64_t v74 = vdivq_f32(*v74, v105);
                --v70;
              }
              while (v70);
              uint64_t v56 = (uint64_t *)v102;
              int v60 = v101;
            }
          }
          else
          {
            int v68 = v58 + v60;
          }
          int v59 = (int *)(v62 + 528 * v57++);
          int v58 = v68;
        }
        while (v57 < *(int *)(a1 + 608));
      }
      *(void *)(a1 + 2072) = v55;
      uint64_t v75 = v56[72];
      uint64_t v76 = v56[73];
      int v77 = *(_DWORD *)(v76 + 1096);
      uint64_t v78 = v56;
      uint64_t v79 = mfs_Viterbi_Init_Obersee((uint64_t)(v56 + 106), *v56, v76, v75, (uint64_t)(v56 + 203));
      if ((v79 & 0x80000000) == 0)
      {
        uint64_t v80 = v75 + 2144;
        uint64_t inited = UNICORN__mfs_S32Vect_Reserve(v75 + 2144, *(_DWORD *)(v78[72] + 1936));
        uint64_t v6 = v96;
        if ((inited & 0x80000000) == 0)
        {
          uint64_t v81 = v75 + 2168;
          uint64_t v8 = UNICORN__mfs_F32Vect_Create(v81, *(_DWORD *)(v78[72] + 1936));
          if ((v8 & 0x80000000) != 0) {
            goto LABEL_95;
          }
          if (*(_DWORD *)(v78[72] + 1936))
          {
            unsigned int v82 = 0;
            do
            {
              uint64_t v8 = UNICORN__mfs_F32Vect_Pad(v81, 0.0);
              if ((v8 & 0x80000000) != 0) {
                goto LABEL_100;
              }
              mfs_S32Vect_Add(v80, v77 - 1);
              ++v82;
              uint64_t v83 = (uint64_t *)v102;
            }
            while (v82 < *(_DWORD *)(*(void *)(v102 + 576) + 1936));
            uint64_t v6 = v96;
          }
          else
          {
            uint64_t v83 = v78;
          }
          MFS__log_select_Diag(*v83, 3, (uint64_t)"viterbi::init  SegsDp %d\n");
          uint64_t v10 = v102;
          int v9 = 0;
          goto LABEL_3;
        }
LABEL_94:
        uint64_t v8 = inited;
        goto LABEL_95;
      }
      uint64_t v8 = v79;
    }
LABEL_100:
    uint64_t v6 = v96;
    goto LABEL_95;
  }
  uint64_t v8 = 0;
  int v9 = *(_DWORD *)(a1 + 2576);
  *(_DWORD *)(a1 + 2576) = 0;
  uint64_t v10 = *(void *)(a1 + 2568);
LABEL_3:
  uint64_t v102 = v10;
  if (v9 >= *(_DWORD *)(a1 + 608)) {
    goto LABEL_106;
  }
  uint64_t v11 = v10 + 600;
  signed int v100 = (uint64_t *)(v10 + 848);
  v97 = (void *)(v10 + 8);
  uint64_t v12 = v9;
  uint64_t v93 = v10 + 600;
  while (2)
  {
    int v13 = v12;
    uint64_t v94 = v12;
    uint64_t v14 = (uint64_t *)v10;
    MFS__log_select_Diag(v6, 3, (uint64_t)"phoneme %d %d %d\n");
    ForcedEEController_TimeGet(a2, (_DWORD *)v107 + 1);
    uint64_t inited = mfs_Search_FindNodeCandidates_StatSelect_Obersee((uint64_t)v14, v13);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_94;
    }
    uint64_t inited = mfs_PruneDPListOnContext_Obersee(v14, v13);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_94;
    }
    if (ForcedEEController_TimeGet(a2, v107)) {
      MFS__log_select_Diag(v6, 1, (uint64_t)"Timing phoneme %d Prefilter : elapsetime : %u msecs  (number of candidates : %u %u %u)\n");
    }
    int v16 = *(uint64_t **)(a1 + 2640);
    if (v16)
    {
      uint64_t v17 = 0;
      int v18 = *((_DWORD *)v16 + 5);
      uint64_t v19 = *v16;
      do
      {
        unsigned int v20 = v18 + v17 + 3 * v94;
        if (*(_DWORD *)(v19 + 48 * v20) == 1)
        {
          uint64_t v21 = *(void *)(v11 + 80 * v17 + 32);
          uint64_t v22 = -1431655765 * ((unint64_t)(*(void *)(v11 + 80 * v17 + 40) - v21) >> 3);
          if (v22)
          {
            uint64_t v23 = 0;
            uint64_t v24 = v19 + 48 * v20;
            uint64_t v25 = *(unsigned int *)(v24 + 24);
            float v26 = (int **)(v24 + 8);
            do
            {
              if (v25)
              {
                uint64_t v27 = v21 + 24 * v23;
                int v28 = *(_DWORD *)(v27 + 4);
                signed int v29 = *v26;
                float v30 = (__int16 *)(v27 + 8);
                uint64_t v31 = v25;
                do
                {
                  int v32 = *v29++;
                  if (v28 == v32)
                  {
                    unsigned int v33 = (unsigned __int16)*v30;
                    if (v33 > 0xEC77) {
                      __int16 v34 = -1;
                    }
                    else {
                      __int16 v34 = v33 + 5000;
                    }
                    *float v30 = v34;
                  }
                  --v31;
                }
                while (v31);
              }
              ++v23;
            }
            while (v23 != v22);
          }
        }
        ++v17;
      }
      while (v17 != 3);
      int v104 = 3 * v94;
    }
    else
    {
      int v104 = 3 * v94;
    }
    uint64_t v35 = 0;
    uint64_t v36 = (uint64_t)v97;
    do
    {
      ForcedEEController_TimeGet(a2, (_DWORD *)v107 + 1);
      int v37 = -1431655765 * ((*(void *)(v11 + 40) - *(void *)(v11 + 32)) >> 3);
      if (v37 >= 21)
      {
        float v38 = (float)v37;
        uint64_t v39 = *(void *)(v102 + 592);
        int v40 = (int)(float)(*(float *)(v39 + 8236) * v38);
        int v37 = *(_DWORD *)(v39 + 8240);
        if (v37 >= v40) {
          int v37 = v40;
        }
      }
      int v41 = v104 + v35;
      int v42 = *(_DWORD *)(v102 + 840);
      if (v37)
      {
        if (v42 != -1) {
          goto LABEL_34;
        }
        *(_DWORD *)(v102 + 840) = v41;
        uint64_t v43 = mfs_Viterbi_Reset_Obersee((uint64_t)v100, v41);
        if ((v43 & 0x80000000) == 0)
        {
          MFS__log_select_Diag(*(void *)v102, 3, (uint64_t)"viterbi::start path %d\n");
          uint64_t v36 = (uint64_t)v97;
LABEL_34:
          uint64_t v8 = mfs_Viterbi_DecodeState_MCP_S9_LF0_S8_X2B_Obersee((uint64_t)v100, v11);
          goto LABEL_41;
        }
        uint64_t v8 = v43;
        uint64_t v36 = (uint64_t)v97;
      }
      else if (v42 == -1)
      {
        uint64_t v8 = 0;
      }
      else
      {
        MFS__log_select_Diag(*(void *)v102, 3, (uint64_t)"Stopping viterbi at frame %u because of a dead part\n");
        uint64_t v44 = *(void *)(v102 + 576);
        MFS__log_select_Diag(*(void *)v102, 3, (uint64_t)"viterbi::end path %d\n");
        uint64_t v8 = mfs_Viterbi_ResultScore_Obersee((uint64_t)v100, v44 + 2144, v44 + 2168);
        if ((v8 & 0x80000000) == 0) {
          *(_DWORD *)(v102 + 840) = -1;
        }
        uint64_t v6 = v96;
        uint64_t v36 = (uint64_t)v97;
      }
LABEL_41:
      if (ForcedEEController_TimeGet(a2, v107)) {
        MFS__log_select_Diag(v6, 1, (uint64_t)"Timing phoneme %d Viterbi state %d  : elapsetime  %u msecs\n");
      }
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_95;
      }
      mfs_CandidateList_Reset_Obersee(v11, *(void *)(v6 + 8), v36);
      ++v35;
      v11 += 80;
    }
    while (v35 != 3);
    uint64_t v12 = v94 + 1;
    int v45 = *(_DWORD *)(a1 + 608);
    if (!*(_DWORD *)(a4 + 8564))
    {
      uint64_t v11 = v93;
LABEL_50:
      uint64_t v10 = v102;
      if (v12 >= v45) {
        goto LABEL_106;
      }
      continue;
    }
    break;
  }
  uint64_t v11 = v93;
  if (v12 >= v45) {
    goto LABEL_50;
  }
  if (!mfs_Viterbi_IsEarlyEmissionPossible(v100, a2, *(_DWORD *)(a1 + 2584)))
  {
    int v45 = *(_DWORD *)(a1 + 608);
    goto LABEL_50;
  }
  unsigned int v85 = *(_DWORD *)(v102 + 1452);
  mfs_Search_StopViterbi((uint64_t *)v102, (3 * v12), 1);
  unsigned int UsedMemory = fastallo_GetUsedMemory((uint64_t)v97);
  if (UsedMemory > *(_DWORD *)(v102 + 568)) {
    *(_DWORD *)(v102 + 568) = UsedMemory;
  }
  fastallo_Terminate(v97);
  fastallo_Init(v97, *(void *)(*(void *)v102 + 8), 4096);
  *(_DWORD *)(a1 + 2592) = 0;
  *(_DWORD *)(a1 + 2576) = v12;
  *(_DWORD *)(a1 + 2584) = v85;
  mfs_Search_LogSelectedUnits((uint64_t *)v102, *(_DWORD *)(a1 + 2580), v85);
  MFS__log_select_Diag(v6, 3, (uint64_t)"previous units were emitted via early emission at phoneme %d\n");
  uint64_t v87 = mfs_UnitSequence_SequenceEarlyEmission_Obersee((uint64_t *)v102, *(_DWORD *)(a1 + 2580), *(_DWORD *)(a1 + 2584));
  uint64_t v10 = v102;
  uint64_t v8 = v87;
  if ((v87 & 0x80000000) != 0)
  {
LABEL_95:
    uint64_t v84 = mfs_uselect_Finalize_Obersee((uint64_t *)v102);
    if ((v84 & 0x80000000) != 0)
    {
      return v84;
    }
    else
    {
      *(_DWORD *)(a1 + 2592) = 2;
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_107;
      }
    }
  }
  else
  {
LABEL_106:
    mfs_Search_EndPrefilterRun(v10);
    if (!*(_DWORD *)(a1 + 2576))
    {
      *(_DWORD *)(a1 + 2584) = 3 * *(_DWORD *)(a1 + 608);
      uint64_t v8 = mfs_Search_FinishViterbi(v102);
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_95;
      }
      if (!*(_DWORD *)(a1 + 2200) && !*(_DWORD *)(a4 + 8564))
      {
        FreeRemainingStreams(a1);
        int v89 = *(_DWORD *)(a1 + 32);
        if (v89 >= 1)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 12;
          do
          {
            uint64_t v92 = *(void *)(a1 + 24);
            if (*(_DWORD *)(v92 + v91) != 2)
            {
              BET3FLT__FreePStreamParam((void *)(v92 + v91 + 12));
              int v89 = *(_DWORD *)(a1 + 32);
            }
            ++v90;
            v91 += 1528;
          }
          while (v90 < v89);
        }
      }
      MFS__log_select_Diag(v6, 1, (uint64_t)"}\n");
      if (!*(_DWORD *)(a1 + 2576)) {
        goto LABEL_95;
      }
    }
LABEL_107:
    if (!ForcedEEController_HasStartedPlayback(a2))
    {
      unsigned int v106 = 0;
      if (*(_DWORD *)(a4 + 8588) == -1
        || (paramc_ParamGetUInt(*(void *)(v6 + 40), (uint64_t)"feedback-amount-of-output-msecs-for-this-speakrequest", &v106) & 0x80000000) != 0|| v106 >= *(_DWORD *)(a4 + 8588))
      {
        ForcedEEController_SetStartedPlayback(a2);
      }
    }
  }
  return v8;
}

uint64_t mfs_Search_StopViterbi(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1[72];
  uint64_t v5 = *a1;
  if (a3) {
    uint64_t v6 = "viterbi::early emission:at state index %d we have a fully determined path up to state index %d\n";
  }
  else {
    uint64_t v6 = "viterbi::end path %d\n";
  }
  MFS__log_select_Diag(v5, 3, (uint64_t)v6);
  return mfs_Viterbi_ResultScore_Obersee((uint64_t)(a1 + 106), v4 + 2144, v4 + 2168);
}

uint64_t *mfs_Search_LogSelectedUnits(uint64_t *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *result;
    uint64_t v6 = result[72];
    uint64_t v7 = a2;
    do
    {
      memset(v8, 0, sizeof(v8));
      mfs_getUnitData_Obersee(v4[73], *v4, *(_DWORD *)(*(void *)(v6 + 2152) + 4 * v7), (uint64_t)v8);
      uint64_t result = (uint64_t *)MFS__log_select_Diag(v5, 3, (uint64_t)"unit %d: %d %f\n");
      ++v7;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t mfs_Search_FinishViterbi(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 576);
  uint64_t v4 = (void *)(v3 + 2168);
  if (*(_DWORD *)(a1 + 840) == -1)
  {
    uint64_t UnitData_Obersee = 0;
  }
  else
  {
    MFS__log_select_Diag(v2, 3, (uint64_t)"viterbi::end path %d\n");
    uint64_t UnitData_Obersee = mfs_Viterbi_ResultScore_Obersee(a1 + 848, v3 + 2144, v3 + 2168);
    if ((UnitData_Obersee & 0x80000000) != 0) {
      goto LABEL_30;
    }
  }
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v2 + 32)) < 2) {
    goto LABEL_25;
  }
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v2 + 32)) >= 3) {
    mfs_Search_LogSelectedUnits((uint64_t *)a1, *(_DWORD *)(*(void *)(a1 + 576) + 2580), *(_DWORD *)(v3 + 2160) - 1);
  }
  LODWORD(v6) = *(_DWORD *)(v3 + 2160);
  if ((int)v6 < 1)
  {
    int v9 = 0;
    float v11 = 0.0;
LABEL_22:
    int v20 = v6 - v9;
    if (v20 >= 1) {
      exp((float)(v11 / (float)v20));
    }
    MFS__log_select_Diag(v2, 2, (uint64_t)"ACC : %f\n");
LABEL_25:
    uint64_t v21 = *(_DWORD **)(a1 + 576);
    if (v21[569])
    {
      mfs_UnitSequence_SequenceEarlyEmission_Obersee((uint64_t *)a1, v21[645], 3 * v21[152]);
    }
    else
    {
      uint64_t UnitData_Obersee = mfs_UnitSequence_Sequence_Obersee((uint64_t)(v21 + 528), (uint64_t)(v21 + 562), *(void *)a1);
      if ((UnitData_Obersee & 0x80000000) != 0)
      {
LABEL_30:
        if (BET3FLT__log_select_GetLogLevel(*(void *)(v2 + 32)) >= 0x16)
        {
          int v22 = 0;
          for (uint64_t i = 600; i != 840; i += 80)
            v22 += mfs_CandidateList_GetUsedMemory((_DWORD *)(a1 + i));
          MFS__log_select_Diag(*(void *)a1, 9, (uint64_t)"memstats:%d candidate lists mem usage: %d bytes\n");
          unsigned int UsedMemory = fastallo_GetUsedMemory(a1 + 8);
          if (UsedMemory > *(_DWORD *)(a1 + 568)) {
            *(_DWORD *)(a1 + 568) = UsedMemory;
          }
          MFS__log_select_Diag(*(void *)a1, 9, (uint64_t)"memstats:candidatelist unit data cache: %d bytes (unit data size %d)\n");
          mfs_Viterbi_DumpHeapStats((uint64_t *)(a1 + 848));
          MFS__log_select_Diag(*(void *)a1, 9, (uint64_t)"memstats:Obersee huffman uncompress buffer: %d bytes\n");
          MFS__log_select_Diag(*(void *)a1, 9, (uint64_t)"memstats:Obersee uselect total mem usage: %d bytes\n");
        }
        mfs_Viterbi_DeInit_Obersee(a1 + 848);
        UNICORN__mfs_S32Vect_Clear(v4);
        MFS__log_select_Diag(v2, 3, (uint64_t)"viterbi::finish\n");
        return UnitData_Obersee;
      }
    }
    if (BET3FLT__log_select_GetLogLevel(*(void *)(v2 + 32)) >= 3) {
      mfs_UnitSequence_Log(*(void *)(a1 + 576) + 2112);
    }
    goto LABEL_30;
  }
  uint64_t v26 = v2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = *(_DWORD *)(*(void *)(a1 + 584) + 1096) - 1;
  float v11 = 0.0;
  while (1)
  {
    uint64_t v12 = v7 & 1;
    int v13 = &v27[2 * v12];
    uint64_t UnitData_Obersee = mfs_getUnitData_Obersee(*(void *)(a1 + 584), *(void *)a1, *(_DWORD *)(*(void *)(v3 + 2152) + 4 * v7), (uint64_t)v13);
    if ((UnitData_Obersee & 0x80000000) != 0) {
      return UnitData_Obersee;
    }
    if (v7)
    {
      uint64_t v14 = *(void *)(v3 + 2152);
      if (*(_DWORD *)(v14 + 4 * (v7 - 1)) == v10 || *(_DWORD *)(v14 + 4 * v7) == v10)
      {
        ++v9;
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 584);
        uint64_t v16 = *(void *)(a1 + 576);
        unsigned int v17 = *((_DWORD *)v8 + 3);
        float v18 = 0.0;
        if (v17 <= 0xFF)
        {
          unsigned int v19 = WORD1(v27[2 * v12 + 1]);
          if (v19 <= 0xFF) {
            float v18 = *(float *)(*(void *)(*(void *)(v16 + 2072) + 8 * v7) + 8)
          }
                * *(float *)(*(void *)(v15 + 2152) + 4 * (v17 + (v19 << 8)));
        }
        float v11 = v11
            + (float)(v18
                    + (float)(*(float *)(*(void *)(*(void *)(v16 + 2072) + 8 * v7) + 4)
                            * *(float *)(*(void *)(v15 + 2136)
                                       + 4
                                       * (*((unsigned __int16 *)v8 + 8)
                                        + ((unint64_t)WORD2(v27[2 * v12 + 1]) << 9)))));
      }
    }
    ++v7;
    uint64_t v6 = *(int *)(v3 + 2160);
    uint64_t v8 = v13;
    if (v7 >= v6)
    {
      uint64_t v4 = (void *)(v3 + 2168);
      uint64_t v2 = v26;
      goto LABEL_22;
    }
  }
}

uint64_t mfs_SwapItem_Obersee(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    do
    {
      int v4 = *(_DWORD *)(result + v3);
      *(_DWORD *)(result + v3) = *(_DWORD *)(a2 + v3);
      *(_DWORD *)(a2 + v3) = v4;
      v3 += 4;
    }
    while (v3 < a3);
  }
  return result;
}

uint64_t mfs_Array_QSelect_Obersee(uint64_t a1, int a2, unsigned int a3, uint64_t (*a4)(uint64_t, uint64_t), unsigned int a5)
{
  uint64_t v25 = a5 * a3;
  unsigned int v6 = a2 - 1;
  if (a2 != 1)
  {
    unsigned int v9 = 0;
    unsigned int v27 = 0;
    uint64_t v10 = a1 + v25;
    do
    {
      uint64_t v11 = a1 + v6 * a3;
      if (a3)
      {
        uint64_t v12 = 0;
        do
        {
          int v13 = *(_DWORD *)(v10 + v12);
          *(_DWORD *)(v10 + v12) = *(_DWORD *)(v11 + v12);
          *(_DWORD *)(v11 + v12) = v13;
          v12 += 4;
        }
        while (v12 < a3);
      }
      unsigned int v14 = v9;
      unsigned int v28 = v6;
      if (v9 < v6)
      {
        uint64_t v15 = v9;
        unsigned int v16 = a3 * v9;
        unsigned int v14 = v9;
        do
        {
          if ((a4(a1 + v15 * a3, v11) & 0x80000000) != 0)
          {
            if (a3)
            {
              uint64_t v17 = 0;
              uint64_t v18 = a1 + v16;
              uint64_t v19 = a1 + v14 * a3;
              do
              {
                int v20 = *(_DWORD *)(v18 + v17);
                *(_DWORD *)(v18 + v17) = *(_DWORD *)(v19 + v17);
                *(_DWORD *)(v19 + v17) = v20;
                v17 += 4;
              }
              while (v17 < a3);
            }
            ++v14;
          }
          ++v15;
          v16 += a3;
        }
        while (v15 != v28);
      }
      if (a3)
      {
        uint64_t v21 = 0;
        uint64_t v22 = a1 + v14 * a3;
        do
        {
          int v23 = *(_DWORD *)(v11 + v21);
          *(_DWORD *)(v11 + v21) = *(_DWORD *)(v22 + v21);
          *(_DWORD *)(v22 + v21) = v23;
          v21 += 4;
        }
        while (v21 < a3);
      }
      unsigned int v6 = v28;
      if (v14 == a5) {
        break;
      }
      if (v14 >= a5) {
        unsigned int v6 = v14 - 1;
      }
      else {
        unsigned int v9 = v14 + 1;
      }
      ++v27;
    }
    while (v27 < v6);
  }
  return a1 + v25;
}

uint64_t qsortex(uint64_t result, unsigned int a2, uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t), uint64_t a5)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  memset(v69, 0, sizeof(v69));
  memset(v68, 0, sizeof(v68));
  if (a2 >= 2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = (char *)result;
    int v64 = 0;
    unsigned int v9 = (char *)(result + (a2 - 1) * a3);
    uint64_t v10 = a3;
    unsigned int v66 = a3 % 3;
    uint64_t v11 = -(uint64_t)a3;
    while (2)
    {
      while (2)
      {
        uint64_t v67 = v9;
        while (1)
        {
          unsigned int v12 = (v9 - v8) / v10 + 1;
          if (v12 <= 8)
          {
            if (v9 > v8)
            {
              int32x2_t v54 = v8;
              int v55 = &v8[v10];
              do
              {
                uint64_t v56 = v54;
                if (v55 <= v9)
                {
                  uint64_t v57 = v55;
                  do
                  {
                    uint64_t result = a4(v57, v54, a5);
                    if ((int)result > 0) {
                      int32x2_t v54 = v57;
                    }
                    v57 += v10;
                  }
                  while (v57 <= v9);
                }
                if (v54 != v9)
                {
                  if (v7 == 2)
                  {
                    __int16 v58 = *(_WORD *)v54;
                    *(_WORD *)int32x2_t v54 = *(_WORD *)v9;
                    *(_WORD *)unsigned int v9 = v58;
                  }
                  else if (v66)
                  {
                    if (v7)
                    {
                      uint64_t v59 = 0;
                      do
                      {
                        char v60 = v54[v59];
                        v54[v59] = v9[v59];
                        v9[v59++] = v60;
                      }
                      while (v10 != v59);
                    }
                  }
                  else if (v7)
                  {
                    uint64_t v61 = 0;
                    do
                    {
                      int v62 = *(_DWORD *)&v54[v61];
                      *(_DWORD *)&v54[v61] = *(_DWORD *)&v9[v61];
                      *(_DWORD *)&v9[v61] = v62;
                      v61 += 4;
                    }
                    while (v61 < v7);
                  }
                }
                v9 += v11;
                int32x2_t v54 = v56;
              }
              while (v9 > v56);
            }
            goto LABEL_107;
          }
          uint64_t v13 = (v12 >> 1) * v7;
          unsigned int v14 = &v8[v13];
          int v15 = a4(v8, &v8[v13], a5);
          if (v13) {
            BOOL v16 = v15 < 1;
          }
          else {
            BOOL v16 = 1;
          }
          if (!v16)
          {
            if (v7 == 2)
            {
              __int16 v17 = *(_WORD *)v8;
              *(_WORD *)uint64_t v8 = *(_WORD *)v14;
              *(_WORD *)unsigned int v14 = v17;
            }
            else if (v66)
            {
              if (v7)
              {
                int v18 = v7;
                uint64_t v19 = v8;
                do
                {
                  char v20 = *v19;
                  *uint64_t v19 = v19[v13];
                  v19[v13] = v20;
                  ++v19;
                  --v18;
                }
                while (v18);
              }
            }
            else if (v7)
            {
              uint64_t v21 = 0;
              do
              {
                int v22 = *(_DWORD *)&v8[v21];
                *(_DWORD *)&v8[v21] = *(_DWORD *)&v14[v21];
                *(_DWORD *)&v14[v21] = v22;
                v21 += 4;
              }
              while (v21 < v7);
            }
          }
          int v23 = a4(v8, v9, a5);
          if (v8 != v9 && v23 >= 1)
          {
            if (v7 == 2)
            {
              __int16 v24 = *(_WORD *)v8;
              *(_WORD *)uint64_t v8 = *(_WORD *)v9;
              *(_WORD *)unsigned int v9 = v24;
            }
            else if (v66)
            {
              if (v7)
              {
                int v25 = v7;
                uint64_t v26 = v9;
                unsigned int v27 = v8;
                do
                {
                  char v28 = *v27;
                  *v27++ = *v26;
                  *v26++ = v28;
                  --v25;
                }
                while (v25);
              }
            }
            else if (v7)
            {
              uint64_t v29 = 0;
              do
              {
                int v30 = *(_DWORD *)&v8[v29];
                *(_DWORD *)&v8[v29] = *(_DWORD *)&v9[v29];
                *(_DWORD *)&v9[v29] = v30;
                v29 += 4;
              }
              while (v29 < v7);
            }
          }
          uint64_t v65 = v8;
          uint64_t result = a4(&v8[v13], v9, a5);
          if (v14 != v9 && (int)result >= 1)
          {
            if (v7 == 2)
            {
              __int16 v31 = *(_WORD *)v14;
              *(_WORD *)unsigned int v14 = *(_WORD *)v9;
              *(_WORD *)unsigned int v9 = v31;
            }
            else if (v66)
            {
              if (v7)
              {
                int v32 = v7;
                unsigned int v33 = v9;
                __int16 v34 = &v8[v13];
                do
                {
                  char v35 = *v34;
                  *v34++ = *v33;
                  *v33++ = v35;
                  --v32;
                }
                while (v32);
              }
            }
            else if (v7)
            {
              uint64_t v36 = 0;
              do
              {
                int v37 = *(_DWORD *)&v14[v36];
                *(_DWORD *)&v14[v36] = *(_DWORD *)&v9[v36];
                *(_DWORD *)&v9[v36] = v37;
                v36 += 4;
              }
              while (v36 < v7);
            }
          }
          float v38 = v9;
          uint64_t v39 = v65;
          while (1)
          {
            if (v14 > v39)
            {
              int v40 = &v39[v10];
              do
              {
                uint64_t v39 = v40;
                if (v40 >= v14) {
                  break;
                }
                uint64_t result = a4(v40, v14, a5);
                int v40 = &v39[v10];
              }
              while ((int)result < 1);
            }
            if (v14 <= v39)
            {
              int v41 = &v39[v10];
              do
              {
                uint64_t v39 = v41;
                if (v41 > v9) {
                  break;
                }
                uint64_t result = a4(v41, v14, a5);
                int v41 = &v39[v10];
              }
              while ((int)result < 1);
            }
            uint64_t v42 = v7;
            uint64_t v43 = &v38[v11];
            do
            {
              unsigned int v9 = v38;
              uint64_t v44 = v43;
              v38 += v11;
              if (v38 <= v14) {
                break;
              }
              uint64_t result = a4(v38, v14, a5);
              uint64_t v43 = &v44[v11];
            }
            while ((int)result > 0);
            if (v38 < v39) {
              break;
            }
            uint64_t v7 = v42;
            if (v38 != v39)
            {
              if (v42 == 2)
              {
                __int16 v45 = *(_WORD *)v39;
                *(_WORD *)uint64_t v39 = *(_WORD *)v38;
                *(_WORD *)float v38 = v45;
              }
              else if (v66)
              {
                if (v42)
                {
                  uint64_t v46 = v11;
                  int v47 = v42;
                  uint64_t v48 = v39;
                  do
                  {
                    char v49 = *v48;
                    *v48++ = v9[v46];
                    v9[v46++] = v49;
                    --v47;
                  }
                  while (v47);
                }
              }
              else if (v42)
              {
                uint64_t v50 = 0;
                int v51 = &v9[v11];
                do
                {
                  int v52 = *(_DWORD *)&v39[v50];
                  *(_DWORD *)&v39[v50] = *(_DWORD *)&v51[v50];
                  *(_DWORD *)&v51[v50] = v52;
                  v50 += 4;
                }
                while (v50 < v42);
              }
            }
            if (v38 == v14) {
              unsigned int v14 = v39;
            }
            unsigned int v9 = v67;
          }
          uint64_t v8 = v65;
          if (v14 < v9)
          {
            do
            {
              unsigned int v9 = v44;
              if (v44 <= v14) {
                break;
              }
              uint64_t result = a4(v44, v14, a5);
              v44 += v11;
            }
            while (!result);
          }
          if (v14 >= v9)
          {
            uint64_t v53 = &v9[v11];
            uint64_t v7 = v42;
            do
            {
              unsigned int v9 = v53;
              if (v53 <= v65) {
                break;
              }
              uint64_t result = a4(v53, v14, a5);
              uint64_t v53 = &v9[v11];
            }
            while (!result);
          }
          else
          {
            uint64_t v7 = v42;
          }
          if (v9 - v65 < v67 - v39) {
            break;
          }
          if (v65 < v9)
          {
            *((void *)v69 + v64) = v65;
            *((void *)v68 + v64++) = v9;
          }
          uint64_t v8 = v39;
          unsigned int v9 = v67;
          if (v39 >= v67) {
            goto LABEL_107;
          }
        }
        if (v39 < v67)
        {
          *((void *)v69 + v64) = v39;
          *((void *)v68 + v64++) = v67;
        }
        if (v65 < v9) {
          continue;
        }
        break;
      }
LABEL_107:
      unsigned int v63 = v64 - 1;
      if (v64 >= 1)
      {
        uint64_t v8 = (char *)*((void *)v69 + v63);
        --v64;
        unsigned int v9 = (char *)*((void *)v68 + v63);
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t mfs_HarchData_Load(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  unsigned int v2 = *(_DWORD *)(a2 + 13552);
  *(_DWORD *)(a1 + 28) = v2 / 0xC;
  if (v2 >= 0xC)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 13544);
    *(void *)(a1 + 40) = *(void *)(a2 + 13064);
    *(void *)(a1 + 56) = *(void *)(a2 + 13304);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 14272);
  *(_DWORD *)(a1 + 24) = v3 / 0xC;
  if (v3 >= 0xC)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 14264);
    *(void *)(a1 + 32) = *(void *)(a2 + 13784);
    *(void *)(a1 + 48) = *(void *)(a2 + 14024);
  }
  return 0;
}

double mfs_HarchData_DeInit(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t mfs_Harch_Init(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a2 + 96));
  return UNICORN__mfs_S32Vect_Init(a1, (void *)(a2 + 120));
}

void *mfs_Harch_DeInit(uint64_t a1)
{
  UNICORN__mfs_S32Vect_Clear((void *)(a1 + 96));
  return UNICORN__mfs_S32Vect_Clear((void *)(a1 + 120));
}

uint64_t mfs_Harch_Search(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, int a5)
{
  int v5 = a5;
  uint64_t v8 = a2;
  uint64_t v9 = 0;
  unsigned int v47 = 0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  *a3 = a2;
  uint64_t v10 = (uint64_t *)(a3 + 1);
  char v11 = 1;
  uint64_t v48 = (uint64_t *)(a3 + 1);
  do
  {
    char v12 = v11;
    if (!*((_DWORD *)*a3 + v9 + 6)) {
      goto LABEL_46;
    }
    uint64_t v13 = (uint64_t)a3 + 4 * v9;
    int v16 = *(_DWORD *)(v13 + 88);
    int v15 = (_DWORD *)(v13 + 88);
    int v14 = v16;
    if (v16)
    {
      *int v15 = v14 - 1;
      goto LABEL_46;
    }
    if (v12)
    {
      *((_DWORD *)a3 + 22) = 0;
      *((unsigned char *)a3 + 8) = 0;
      if (mfs_Ling_CenterPhoneme(*(void *)(a4 + 8), v5) != 1)
      {
        char v49 = mfs_Ling_SylPos(*(void *)(a4 + 8), v5);
        int v17 = 0;
        int v18 = v5;
        do
        {
          int v19 = mfs_Ling_CenterPhoneme(*(void *)(a4 + 8), v18);
          if (v19 != 1) {
            *((unsigned char *)v10 + v17++) = v19;
          }
          ++v18;
        }
        while (v18 < *(_DWORD *)(a4 + 608) && !mfs_Ling_IsSyllableBegin(*(void *)(a4 + 8), v18) && v17 < 39);
        int v20 = mfs_Ling_CenterPhoneme(*(void *)(a4 + 8), v18);
        if (v20 != 1) {
          *((unsigned char *)v10 + v17++) = v20;
        }
        *((_DWORD *)a3 + 22) = v17 - 1;
        uint64_t v21 = (char *)v10 + v17;
        *uint64_t v21 = v49;
        int v22 = v21 + 1;
LABEL_26:
        *int v22 = 0;
      }
    }
    else
    {
      *((_DWORD *)a3 + 23) = 0;
      *((unsigned char *)a3 + 48) = 0;
      if (mfs_Ling_CenterPhoneme(*(void *)(a4 + 8), v5) != 1)
      {
        char v50 = UNICORN__mfs_Ling_WrdPosInPhrs(*(void *)(a4 + 8), v5);
        int v23 = 0;
        int v24 = v5;
        do
        {
          int v25 = mfs_Ling_CenterPhoneme(*(void *)(a4 + 8), v24);
          if (v25 != 1)
          {
            uint64_t v26 = (uint64_t)a3 + v23++;
            *(unsigned char *)(v26 + 48) = v25;
          }
          ++v24;
        }
        while (v24 < *(_DWORD *)(a4 + 608) && !mfs_Ling_IsWordBegin(*(void *)(a4 + 8), v24) && v23 < 37);
        int v27 = mfs_Ling_CenterPhoneme(*(void *)(a4 + 8), v24);
        if (v27 != 1) {
          *((unsigned char *)a3 + v23++ + 48) = v27;
        }
        *((_DWORD *)a3 + 23) = v23 - 1;
        uint64_t v28 = (uint64_t)a3 + v23;
        *(unsigned char *)(v28 + 48) = v50;
        int v22 = (unsigned char *)(v28 + 49);
        goto LABEL_26;
      }
    }
    if (!*v15) {
      goto LABEL_46;
    }
    char v51 = v12;
    if (BET3FLT__log_select_GetLogLevel(*(void *)(a1 + 32)) >= 3)
    {
      for (uint64_t i = 0; i != 40; ++i)
        v53[i] = mfs_Ling_HmmPhonemeToLhTts(*v8, *((unsigned __int8 *)&v48[5 * v9] + i));
      v53[40] = 0;
      MFS__log_select_Diag(a1, 3, (uint64_t)" -* (%s) ");
    }
    int v30 = *((_DWORD *)*a3 + v9 + 6);
    UNICORN__mfs_S32Vect_Clear(&a3[3 * v9 + 12]);
    int v31 = v30 - 1;
    if (v30 < 1)
    {
      int v40 = 0;
      goto LABEL_43;
    }
    int v32 = 0;
    unsigned int v33 = *a3;
    uint64_t v34 = (uint64_t)&(*a3)[v9];
    uint64_t v35 = *(void *)(v34 + 32);
    uint64_t v36 = *(void *)(v34 + 8);
    while (1)
    {
      int v37 = v32 + v31;
      if (v32 + v31 < 0 != __OFADD__(v32, v31)) {
        ++v37;
      }
      uint64_t v38 = (uint64_t)v37 >> 1;
      int v39 = strcmp((const char *)(v35 + *(unsigned int *)(v36 + 12 * (v37 >> 1))), (const char *)&a3[5 * v9 + 1]);
      if ((v39 & 0x80000000) == 0) {
        break;
      }
      int v32 = v38 + 1;
LABEL_40:
      if (v32 > v31) {
        goto LABEL_41;
      }
    }
    if (v39)
    {
      int v31 = v38 - 1;
      goto LABEL_40;
    }
    uint64_t v41 = v36 + 12 * (int)v38;
    if (!*(_DWORD *)(v41 + 8))
    {
LABEL_41:
      int v40 = 0;
      int v5 = a5;
      goto LABEL_43;
    }
    unint64_t v42 = 0;
    int v43 = *(_DWORD *)(v41 + 4);
    int v5 = a5;
    do
    {
      int v40 = mfs_S32Vect_Add((uint64_t)&a3[3 * v9 + 12], *(_DWORD *)(v33[v9 + 6] + 4 * (v43 + v42)));
      if (v40 < 0) {
        break;
      }
      ++v42;
      unsigned int v33 = *a3;
    }
    while (v42 < *(unsigned int *)((*a3)[v9 + 1] + 12 * (int)v38 + 8));
LABEL_43:
    unsigned int v47 = v40 & ~(v40 >> 31);
    if (LODWORD(a3[3 * v9 + 14]))
    {
      MFS__log_select_Diag(a1, 3, (uint64_t)" found %d");
      *((_DWORD *)a3 + v9 + 36) = 0;
    }
    uint64_t v8 = a2;
    uint64_t v10 = v48;
    char v12 = v51;
LABEL_46:
    char v11 = 0;
    uint64_t v9 = 1;
  }
  while ((v12 & 1) != 0);
  return v47;
}

BOOL mfs_Harch_IsBoundary(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 4 * a2 + 88) == 0;
}

uint64_t mfs_Harch_GetIds(void *a1, void *a2)
{
  UNICORN__mfs_S32Vect_Clear(a2);
  uint64_t v4 = 0;
  uint64_t result = 0;
  for (char i = 1; ; char i = 0)
  {
    char v7 = i;
    if (!*(_DWORD *)(*a1 + 4 * v4 + 24) || (*((_DWORD *)a1 + v4 + 22) & 0x80000000) != 0) {
      goto LABEL_9;
    }
    uint64_t v8 = &a1[3 * v4];
    int v10 = *((_DWORD *)v8 + 28);
    uint64_t v9 = (unsigned int *)(v8 + 14);
    if (v10) {
      break;
    }
LABEL_8:
    ++*((_DWORD *)a1 + v4 + 36);
LABEL_9:
    uint64_t v4 = 1;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t result = mfs_S32Vect_Add((uint64_t)a2, *((_DWORD *)a1 + v4 + 36) + *(_DWORD *)(a1[3 * v4 + 13] + 4 * v11));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (++v11 >= (unint64_t)*v9) {
      goto LABEL_8;
    }
  }
}

BOOL mfs_Harch_FewCands(int *a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    if (*(_DWORD *)(*(void *)a1 + 4 * v1 + 24) && a1[v1 + 36] >= 2) {
      v2 += a1[6 * v1 + 28];
    }
    char v3 = 0;
    uint64_t v1 = 1;
  }
  while ((v4 & 1) != 0);
  return v2 < 0x28;
}

uint64_t mfs_CostList_CompareNodesScore_Obersee(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  BOOL v4 = v2 > v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t mfs_CandidateList_Init_Obersee(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 2229280778;
  *(void *)a1 = 0x1FFFLL;
  uint64_t v5 = heap_Alloc(a2, 32764);
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    unint64_t v7 = v5 + 4 * *(void *)a1;
    *(void *)(a1 + 16) = v7;
    if (v6 >= 1)
    {
      if (v7 <= v5 + 4) {
        unint64_t v7 = v5 + 4;
      }
      memset((void *)v5, 255, ((v7 + ~v5) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
    *(void *)(a1 + 24) = 2048;
    uint64_t v8 = heap_Alloc(a2, 49152);
    *(void *)(a1 + 32) = v8;
    if (v8)
    {
      uint64_t v4 = 0;
      *(void *)(a1 + 40) = v8;
      *(_DWORD *)(a1 + 48) = -1;
      *(_WORD *)(a1 + 56) = -1;
      *(void *)(a1 + 68) = 0;
      *(void *)(a1 + 60) = 0;
    }
  }
  return v4;
}

void *mfs_CandidateList_DeInit_Obersee(void *result, void *a2)
{
  unsigned int v3 = result;
  uint64_t v4 = result[1];
  if (v4) {
    uint64_t result = heap_Free(a2, v4);
  }
  uint64_t v5 = v3[4];
  if (v5)
  {
    return heap_Free(a2, v5);
  }
  return result;
}

uint64_t mfs_CandidateList_ReserveSpaceAtEndIfNotPresent_Obersee(uint64_t a1, uint64_t a2, unsigned int a3, char **a4, uint64_t *a5)
{
  unint64_t v9 = a3;
  int v10 = *(char **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16) - (void)v10;
  char v12 = &v10[4 * (a3 % (unint64_t)(v11 >> 2))];
  while (1)
  {
    unsigned int v13 = *(_DWORD *)v12;
    if ((v13 & 0x80000000) != 0) {
      break;
    }
    char v12 = (char *)(*(void *)(a1 + 32) + 24 * v13);
    if (*((_DWORD *)v12 + 1) == a3)
    {
      uint64_t result = 2229280770;
LABEL_34:
      *a4 = v12;
      return result;
    }
  }
  LODWORD(v15) = *(_DWORD *)(a1 + 48);
  if (v15 != -1)
  {
    int v16 = *(_DWORD *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 32) + 24 * (int)v15;
    *(_DWORD *)(a1 + 48) = (*(_DWORD *)v17 & 0xBFFFFFFF) - 1;
    *(_DWORD *)uint64_t v17 = 0;
    *(_DWORD *)(v17 + 4) = a3;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
LABEL_33:
    uint64_t result = 0;
    uint64_t v35 = *(void *)(a1 + 8);
    unint64_t v36 = v9 % ((*(void *)(a1 + 16) - v35) >> 2);
    char v12 = (char *)(*(void *)(a1 + 32) + 24 * v16);
    *(_DWORD *)char v12 = *(_DWORD *)(v35 + 4 * v36);
    *(_DWORD *)(v35 + 4 * v36) = v15;
    goto LABEL_34;
  }
  uint64_t v18 = *(void *)(a1 + 32);
  unint64_t v19 = *(void *)(a1 + 40);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v18) >> 3);
  if (v15 > v11 >> 1)
  {
    unint64_t v20 = (v11 >> 1) + 1;
    if (v20 <= *(void *)a1)
    {
      size_t v22 = 4 * *(void *)a1;
    }
    else
    {
      if (v20 >= 9) {
        uint64_t v21 = (v11 >> 1) + 1;
      }
      else {
        uint64_t v21 = 8;
      }
      size_t v22 = 4 * v21;
      uint64_t v23 = heap_Realloc(a5, (uint64_t)v10, 4 * v21);
      *(void *)(a1 + 8) = v23;
      if (!v23) {
        return 2229280778;
      }
      int v10 = (char *)v23;
      *(void *)a1 = v21;
    }
    *(void *)(a1 + 16) = &v10[4 * v20];
    memset(v10, 255, v22);
    uint64_t v18 = *(void *)(a1 + 32);
    unint64_t v19 = *(void *)(a1 + 40);
    if (v19 == v18)
    {
      unint64_t v15 = 0;
      uint64_t v18 = *(void *)(a1 + 40);
    }
    else
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v18) >> 3);
      unsigned int v24 = 1;
      int v25 = *(_DWORD **)(a1 + 32);
      do
      {
        if (((*v25 + 1) & 0x40000000) == 0)
        {
          unint64_t v26 = v25[1] % v20;
          uint64_t v27 = *(void *)(a1 + 8);
          *int v25 = *(_DWORD *)(v27 + 4 * v26);
          *(_DWORD *)(v27 + 4 * v26) = v24 - 1;
        }
        v25 += 6;
      }
      while (v15 > v24++);
    }
  }
  unint64_t v29 = v15 + 1;
  unint64_t v30 = *(void *)(a1 + 24);
  if (v15 + 1 <= v30)
  {
LABEL_32:
    *(void *)(a1 + 40) = v19 + 24;
    *(_DWORD *)unint64_t v19 = 0;
    *(_DWORD *)(v19 + 4) = a3;
    *(_OWORD *)(v19 + 8) = 0uLL;
    int v16 = v15;
    goto LABEL_33;
  }
  unint64_t v31 = 2 * v30;
  unint64_t v32 = v30 + 1000000;
  if (v31 >= v32) {
    unint64_t v31 = v32;
  }
  if (v31 > v29) {
    unint64_t v29 = v31;
  }
  if (v29 <= 8) {
    uint64_t v33 = 8;
  }
  else {
    uint64_t v33 = v29;
  }
  uint64_t v34 = heap_Realloc(a5, v18, 24 * v33);
  *(void *)(a1 + 32) = v34;
  if (v34)
  {
    *(void *)(a1 + 24) = v33;
    unint64_t v19 = v34 + 24 * v15;
    goto LABEL_32;
  }
  return 2229280778;
}

uint64_t mfs_CandidateList_ReserveInsertSpaceSortedProbablyAppend_Obersee(uint64_t a1, unsigned int a2, char **a3, uint64_t *a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(char **)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16) - (void)v9;
  uint64_t v11 = &v9[4 * (a2 % (unint64_t)(v10 >> 2))];
  while (1)
  {
    unsigned int v12 = *(_DWORD *)v11;
    if ((v12 & 0x80000000) != 0) {
      break;
    }
    uint64_t v11 = (char *)(*(void *)(a1 + 32) + 24 * v12);
    if (*((_DWORD *)v11 + 1) == a2)
    {
      uint64_t result = 2229280770;
LABEL_34:
      *a3 = v11;
      return result;
    }
  }
  LODWORD(v14) = *(_DWORD *)(a1 + 48);
  if (v14 != -1)
  {
    int v15 = *(_DWORD *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 32) + 24 * (int)v14;
    *(_DWORD *)(a1 + 48) = (*(_DWORD *)v16 & 0xBFFFFFFF) - 1;
    *(_DWORD *)uint64_t v16 = 0;
    *(_DWORD *)(v16 + 4) = a2;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0;
LABEL_33:
    uint64_t result = 0;
    uint64_t v34 = *(void *)(a1 + 8);
    unint64_t v35 = v8 % ((*(void *)(a1 + 16) - v34) >> 2);
    uint64_t v11 = (char *)(*(void *)(a1 + 32) + 24 * v15);
    *(_DWORD *)uint64_t v11 = *(_DWORD *)(v34 + 4 * v35);
    *(_DWORD *)(v34 + 4 * v35) = v14;
    goto LABEL_34;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  unint64_t v18 = *(void *)(a1 + 40);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v17) >> 3);
  if (v14 > v10 >> 1)
  {
    unint64_t v19 = (v10 >> 1) + 1;
    if (v19 <= *(void *)a1)
    {
      size_t v21 = 4 * *(void *)a1;
    }
    else
    {
      if (v19 >= 9) {
        uint64_t v20 = (v10 >> 1) + 1;
      }
      else {
        uint64_t v20 = 8;
      }
      size_t v21 = 4 * v20;
      uint64_t v22 = heap_Realloc(a4, (uint64_t)v9, 4 * v20);
      *(void *)(a1 + 8) = v22;
      if (!v22) {
        return 2229280778;
      }
      unint64_t v9 = (char *)v22;
      *(void *)a1 = v20;
    }
    *(void *)(a1 + 16) = &v9[4 * v19];
    memset(v9, 255, v21);
    uint64_t v17 = *(void *)(a1 + 32);
    unint64_t v18 = *(void *)(a1 + 40);
    if (v18 == v17)
    {
      unint64_t v14 = 0;
      uint64_t v17 = *(void *)(a1 + 40);
    }
    else
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v17) >> 3);
      unsigned int v23 = 1;
      unsigned int v24 = *(_DWORD **)(a1 + 32);
      do
      {
        if (((*v24 + 1) & 0x40000000) == 0)
        {
          unint64_t v25 = v24[1] % v19;
          uint64_t v26 = *(void *)(a1 + 8);
          *unsigned int v24 = *(_DWORD *)(v26 + 4 * v25);
          *(_DWORD *)(v26 + 4 * v25) = v23 - 1;
        }
        v24 += 6;
      }
      while (v14 > v23++);
    }
  }
  unint64_t v28 = v14 + 1;
  unint64_t v29 = *(void *)(a1 + 24);
  if (v14 + 1 <= v29)
  {
LABEL_32:
    *(void *)(a1 + 40) = v18 + 24;
    *(_DWORD *)unint64_t v18 = 0;
    *(_DWORD *)(v18 + 4) = a2;
    *(_OWORD *)(v18 + 8) = 0uLL;
    int v15 = v14;
    goto LABEL_33;
  }
  unint64_t v30 = 2 * v29;
  unint64_t v31 = v29 + 1000000;
  if (v30 >= v31) {
    unint64_t v30 = v31;
  }
  if (v30 > v28) {
    unint64_t v28 = v30;
  }
  if (v28 <= 8) {
    uint64_t v32 = 8;
  }
  else {
    uint64_t v32 = v28;
  }
  uint64_t v33 = heap_Realloc(a4, v17, 24 * v32);
  *(void *)(a1 + 32) = v33;
  if (v33)
  {
    *(void *)(a1 + 24) = v32;
    unint64_t v18 = v33 + 24 * v14;
    goto LABEL_32;
  }
  return 2229280778;
}

uint64_t mfs_CandidateList_InsertSortedProbablyAppend_Obersee(uint64_t a1, unsigned int a2, __int16 a3, char **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result = mfs_CandidateList_ReserveInsertSpaceSortedProbablyAppend_Obersee(a1, a2, a4, a6);
  if (!result)
  {
    uint64_t v11 = *a4;
    *((_DWORD *)v11 + 1) = a2;
    *((_WORD *)v11 + 4) = a3;
    *((void *)v11 + 2) = a5;
  }
  return result;
}

uint64_t mfs_CandidateList_Sort_Obersee(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = -1431655765 * ((unint64_t)(*(void *)(a1 + 40) - v2) >> 3);
  if (v3) {
    ssft_qsort(v2, v3, 24, (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesScore_Obersee);
  }
  return 0;
}

uint64_t mfs_CandidateList_SelectAndPrune_Obersee(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = (unint64_t)(*(void *)(a1 + 40) - v5) >> 3;
  unsigned int v7 = -1431655765 * v6;
  if (-1431655765 * v6)
  {
    mfs_Array_QSelect_Obersee(v5, -1431655765 * v6, 0x18u, mfs_CostList_CompareNodesScore_Obersee, a2);
    if (v7 > a2)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      if (-1431655765 * ((*(void *)(a1 + 40) - v10) >> 3) > a2)
      {
        uint64_t v11 = *(void **)(a4 + 72);
        unint64_t v12 = -1431655765 * ((*(void *)(a1 + 40) - v10) >> 3) - (unint64_t)a2;
        unsigned int v13 = (void **)(v10 + 24 * a2 + 16);
        do
        {
          unint64_t v14 = *v13;
          v13 += 3;
          *unint64_t v14 = v11;
          *(void *)(a4 + 72) = v14;
          uint64_t v11 = v14;
          --v12;
        }
        while (v12);
        *(void *)(a1 + 40) = *(void *)(a1 + 32) + 24 * a2;
      }
    }
  }
  return 0;
}

uint64_t mfs_CandidateList_Prune_Obersee(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  unsigned int v5 = -1431655765 * ((*(void *)(result + 40) - v4) >> 3);
  if (v5 > a2)
  {
    unint64_t v6 = *(void **)(a4 + 72);
    unsigned int v7 = (void **)(v4 + 24 * a2 + 16);
    unint64_t v8 = v5 - (unint64_t)a2;
    do
    {
      unint64_t v9 = *v7;
      v7 += 3;
      *unint64_t v9 = v6;
      *(void *)(a4 + 72) = v9;
      unint64_t v6 = v9;
      --v8;
    }
    while (v8);
    *(void *)(result + 40) = *(void *)(result + 32) + 24 * a2;
  }
  return result;
}

void *mfs_CandidateList_Reset_Obersee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = -1431655765 * ((unint64_t)(*(void *)(a1 + 40) - v4) >> 3);
  if (v5)
  {
    unint64_t v6 = *(void **)(a3 + 72);
    unsigned int v7 = (void **)(v4 + 16);
    do
    {
      unint64_t v8 = *v7;
      v7 += 3;
      *unint64_t v8 = v6;
      *(void *)(a3 + 72) = v8;
      unint64_t v6 = v8;
      --v5;
    }
    while (v5);
  }
  *(_WORD *)(a1 + 56) = -1;
  uint64_t result = memset(*(void **)(a1 + 8), 255, 4 * *(void *)a1);
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(_DWORD *)(a1 + 48) = -1;
  return result;
}

uint64_t mfs_CandidateList_Filter_Obersee(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = -1431655765 * ((unint64_t)(*(void *)(a1 + 40) - v2) >> 3);
  int v4 = v3 - 1;
  if (v3 < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = v2 + 24 * (int)v6;
    if (*(unsigned __int16 *)(v7 + 8) >= a2)
    {
      if (*(unsigned __int16 *)(v2 + 24 * v4 + 8) < a2)
      {
        mfs_SwapItem_Obersee(v7, v2 + 24 * v4, 0x18u);
        uint64_t v6 = (v6 + 1);
      }
      --v4;
    }
    else
    {
      uint64_t v6 = (v6 + 1);
    }
  }
  while (v4 >= (int)v6);
  return v6;
}

uint64_t mfs_CandidateList_UpdateCost_Obersee(uint64_t result, unsigned int a2, __int16 a3)
{
  *(_WORD *)(*(void *)(result + 32) + 24 * a2 + 8) = a3;
  return result;
}

uint64_t mfs_CandidateListNode_UpdateCost_Obersee(uint64_t result, int a2)
{
  *(_WORD *)(result + 8) = (*(_WORD *)(result + 8) + a2) & ~(unsigned __int16)((*(unsigned __int16 *)(result + 8) + a2) >> 31);
  return result;
}

uint64_t mfs_CandidateList_GetUsedMemory(_DWORD *a1)
{
  return (24 * a1[6] + 4 * *a1);
}

uint64_t mfs_Search_InitPrefilter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 584);
  if (*(_DWORD *)v2 == 3)
  {
    if (*(_DWORD *)(*(void *)(a1 + 592) + 8356) == 1)
    {
      uint64_t v3 = *(unsigned int *)(v2 + 2440);
      if ((int)v3 < 1)
      {
        LODWORD(v4) = 0;
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(v2 + 2456);
        while (*(unsigned char *)(v5 + v4) != 31)
        {
          if (v3 == ++v4) {
            goto LABEL_12;
          }
        }
      }
      if (v4 == v3)
      {
LABEL_12:
        MFS__log_select_Diag(*(void *)a1, 3, (uint64_t)"Can not identify DIFFERENTIATOR ID (%d), please CHECK!\n");
        LODWORD(v4) = 0;
      }
      MFS__log_select_Diag(*(void *)a1, 3, (uint64_t)"TARGET DIFFERENTIATOR FEATURE ID = %d\n");
    }
    else
    {
      LODWORD(v4) = 0;
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 18016) = v4;
  }
  else
  {
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"CONFIG ERROR : Search is implemented for 3 states only\n");
    return 2229281034;
  }
  return result;
}

uint64_t mfs_Search_FindNodeCandidates_StatSelect_Obersee(uint64_t a1, int a2)
{
  v128[257] = *(char **)MEMORY[0x263EF8340];
  unsigned int inserted = 0;
  uint64_t v3 = *(void *)(a1 + 584);
  uint64_t v4 = *(void *)(a1 + 592);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 576);
  unsigned __int8 v109 = 0;
  __int16 v108 = 0;
  long long v126 = 0u;
  memset(v125, 0, sizeof(v125));
  uint64_t v7 = *(void *)(v6 + 600);
  uint64_t v98 = v6;
  *(void *)uint64_t v91 = v3;
  mfs_symData_GetTargetVector(v3, (uint64_t)v125, *(void *)(v6 + 8), a2);
  unsigned __int8 v99 = 0;
  uint64_t v107 = v4;
  if (*(_DWORD *)(v4 + 8356) == 1)
  {
    MFS__log_select_Diag(v5, 3, (uint64_t)"TARGET DIFFERENTIATOR %d\n");
    unsigned __int8 v99 = v125[*(int *)(a1 + 18016) + 4];
  }
  UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(v98 + 8), a2, &v108);
  uint64_t v87 = v5;
  mfs_Ling_LogPhonCtxt(v5, v4, *(void *)(v98 + 8), a2);
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 600;
  int v85 = a2;
  uint64_t v86 = v7;
  uint64_t v11 = v7 + 528 * a2;
  unsigned int v12 = *(_DWORD *)(v4 + 8224);
  unsigned int v13 = (void *)(v11 + 312);
  *(void *)int v95 = v11 + 312;
  uint64_t v89 = a1 + 8;
  unsigned int v106 = (void *)(v11 + 80);
  unint64_t v14 = (int *)(a1 + 18016);
  uint64_t v92 = a1 + 600;
  uint64_t v93 = (void *)(v11 + 88);
  uint64_t v102 = (int *)(v11 + 8);
  int v104 = *(_DWORD *)(v107 + 8224);
  unsigned __int8 v15 = v99;
  do
  {
    if ((*(unsigned char *)(*v13 + v9 + 2) & 4) != 0) {
      int v16 = 200;
    }
    else {
      int v16 = 100;
    }
    v124[v9] = 0;
    if (HIBYTE(v108) == 1)
    {
      if (v9 == 1 || !*(_DWORD *)(v107 + 8256)) {
        goto LABEL_27;
      }
      if (v9 == 2)
      {
        if (*(_DWORD *)(v98 + 608) - 1 == a2 || v109 == 1) {
          goto LABEL_27;
        }
        int v17 = v108;
        goto LABEL_18;
      }
      if (!v9)
      {
        if (!a2 || v108 == 1) {
          goto LABEL_27;
        }
        int v17 = v109;
LABEL_18:
        if (v17 == 1) {
          goto LABEL_27;
        }
      }
    }
    unint64_t v18 = *(uint64_t **)(*(void *)(a1 + 576) + 2640);
    if (v18)
    {
      unint64_t v19 = v14;
      unsigned int v20 = 3 * a2 + v9 + *((_DWORD *)v18 + 5);
      uint64_t v21 = *v18;
      v128[0] = 0;
      if (!*(_DWORD *)(v21 + 48 * v20))
      {
        uint64_t v23 = v21 + 48 * v20;
        int v25 = *(_DWORD *)(v23 + 24);
        unsigned int v24 = (_DWORD *)(v23 + 24);
        if (v25)
        {
          MemoryFromChunk = *(void **)(a1 + 80);
          if (MemoryFromChunk) {
            *(void *)(a1 + 80) = *MemoryFromChunk;
          }
          else {
            MemoryFromChunk = (void *)fastallo_AllocateMemoryFromChunk(v89, 4u, (int *)&inserted);
          }
          uint64_t v27 = inserted;
          if ((inserted & 0x80000000) != 0) {
            return v27;
          }
          unsigned int v28 = *(_DWORD *)(*(void *)(v21 + 48 * v20 + 8) + 4 * (*v24 - 1));
          if (v28 < *(_DWORD *)(*(void *)v91 + 1096) - 1)
          {
            uint64_t UnitData_Obersee = mfs_getUnitData_Obersee(*(void *)(a1 + 584), *(void *)a1, v28, (uint64_t)MemoryFromChunk);
            unsigned int inserted = UnitData_Obersee;
            if ((UnitData_Obersee & 0x80000000) != 0) {
              return UnitData_Obersee;
            }
            unsigned int inserted = mfs_CandidateList_InsertSortedProbablyAppend_Obersee(v10, v28, v16, v128, (uint64_t)MemoryFromChunk, *(uint64_t **)(*(void *)a1 + 8));
            if ((inserted & 0x80000000) == 0)
            {
              v124[v9] = 1;
              unsigned int v12 = v104;
              unsigned __int8 v15 = v99;
              unint64_t v14 = v19;
              unsigned int v13 = *(void **)v95;
              goto LABEL_27;
            }
          }
        }
      }
      unsigned int v12 = v104;
      unsigned __int8 v15 = v99;
      unint64_t v14 = v19;
      unsigned int v13 = *(void **)v95;
    }
    uint64_t UnitData_Obersee = mfs_VennDiaGrams_Obersee((uint64_t *)a1, 1u, (int)v9 + 2, (unsigned __int8 *)&v108, *(_DWORD *)(*v106 + 4 * v9 + 8), v12, v10, v16, v15, *v14);
    unsigned int inserted = UnitData_Obersee;
    if ((UnitData_Obersee & 0x80000000) != 0) {
      return UnitData_Obersee;
    }
    if ((*(unsigned char *)(*v13 + v9 + 2) & 4) != 0 && mfs_Ling_IsVoiced(v107, *(void *)(v98 + 8), a2))
    {
      uint64_t UnitData_Obersee = mfs_VennDiaGrams_Obersee((uint64_t *)a1, 2u, (int)v9 + 2, (unsigned __int8 *)&v108, *(_DWORD *)(*v93 + 4 * v9 + 8), v12, v10, v16, v15, *v14);
      unsigned int inserted = UnitData_Obersee;
      if ((UnitData_Obersee & 0x80000000) != 0) {
        return UnitData_Obersee;
      }
    }
    uint64_t UnitData_Obersee = mfs_VennDiaGrams_Obersee((uint64_t *)a1, 0, (int)v9 + 2, (unsigned __int8 *)&v108, *v102, v12, v10, v16, v15, *v14);
    unsigned int inserted = UnitData_Obersee;
    if ((UnitData_Obersee & 0x80000000) != 0) {
      return UnitData_Obersee;
    }
LABEL_27:
    ++v9;
    v10 += 80;
  }
  while (v9 != 3);
  if (HIBYTE(v108) != 1)
  {
    uint64_t v29 = -1431655765 * ((*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3);
    uint64_t v30 = -1431655765 * ((*(void *)(a1 + 800) - *(void *)(a1 + 792)) >> 3);
    uint64_t v31 = *(void *)(a1 + 712);
    int v32 = -1431655765 * ((unint64_t)(*(void *)(a1 + 720) - v31) >> 3);
    if (v32)
    {
      int v33 = v124[0];
      int v34 = v124[2];
      unint64_t v35 = (unsigned int **)(v31 + 16);
      do
      {
        if (!v33)
        {
          unsigned int v36 = **v35;
          if (v36 != -1 && (v29 < 0x64 || *((unsigned __int8 *)*v35 + 24) == v108))
          {
            uint64_t UnitData_Obersee = mfs_AppendUnsortedToCandidateListIfNotPresent_Obersee((uint64_t *)a1, v92, v29, v36, *((_WORD *)v35 - 4));
            unsigned int inserted = UnitData_Obersee;
            if ((UnitData_Obersee & 0x1FFF) == 0xA) {
              return UnitData_Obersee;
            }
          }
        }
        if (!v34)
        {
          unsigned int v37 = (*v35)[1];
          if (v37 != -1 && (v30 < 0x64 || *((unsigned __int8 *)*v35 + 26) == v109))
          {
            uint64_t UnitData_Obersee = mfs_AppendUnsortedToCandidateListIfNotPresent_Obersee((uint64_t *)a1, a1 + 760, v30, v37, *((_WORD *)v35 - 4));
            unsigned int inserted = UnitData_Obersee;
            if ((UnitData_Obersee & 0x1FFF) == 0xA) {
              return UnitData_Obersee;
            }
          }
        }
        v35 += 3;
      }
      while (--v32);
    }
    if (!v124[1])
    {
      if (!v29)
      {
LABEL_112:
        if (v30)
        {
          uint64_t v79 = -1431655765 * ((*(void *)(a1 + 720) - *(void *)(a1 + 712)) >> 3);
          uint64_t v80 = (unsigned int **)(*(void *)(a1 + 792) + 16);
          while (1)
          {
            unsigned int v81 = **v80;
            if (v81 != -1)
            {
              unsigned int v82 = *((unsigned __int16 *)v80 - 4);
              if (*(_DWORD *)(v107 + 8324) > (signed int)v82)
              {
                __int16 v83 = v82 > 0xCCC ? -1 : 20 * v82;
                uint64_t UnitData_Obersee = mfs_AppendUnsortedToCandidateListIfNotPresent_Obersee((uint64_t *)a1, a1 + 680, v79, v81, v83);
                unsigned int inserted = UnitData_Obersee;
                if ((UnitData_Obersee & 0x1FFF) == 0xA) {
                  return UnitData_Obersee;
                }
              }
            }
            v80 += 3;
            LODWORD(v30) = v30 - 1;
            if (!v30) {
              goto LABEL_53;
            }
          }
        }
        goto LABEL_53;
      }
      uint64_t v72 = *(void *)(a1 + 632) + 16;
      while (1)
      {
        unsigned int v73 = *(_DWORD *)(*(void *)v72 + 4);
        if (v73 != -1)
        {
          unsigned int v74 = *(unsigned __int16 *)(v72 - 8);
          if (*(_DWORD *)(v107 + 8324) > (signed int)v74) {
            break;
          }
        }
LABEL_111:
        v72 += 24;
        LODWORD(v29) = v29 - 1;
        if (!v29) {
          goto LABEL_112;
        }
      }
      if (v74 > 0xCCC) {
        __int16 v75 = -1;
      }
      else {
        __int16 v75 = 20 * v74;
      }
      v128[0] = 0;
      uint64_t v27 = mfs_CandidateList_ReserveInsertSpaceSortedProbablyAppend_Obersee(a1 + 680, v73, v128, *(uint64_t **)(*(void *)a1 + 8));
      LODWORD(v111[0]) = v27;
      if (!v27)
      {
        uint64_t v76 = *(void **)(a1 + 80);
        if (v76)
        {
          *(void *)(a1 + 80) = *v76;
        }
        else
        {
          uint64_t v77 = fastallo_AllocateMemoryFromChunk(v89, 4u, (int *)v111);
          uint64_t v27 = LODWORD(v111[0]);
          if ((v111[0] & 0x80000000) != 0) {
            goto LABEL_110;
          }
          uint64_t v76 = (void *)v77;
        }
        uint64_t v27 = mfs_getUnitData_Obersee(*(void *)(a1 + 584), *(void *)a1, v73, (uint64_t)v76);
        if ((v27 & 0x80000000) == 0)
        {
          uint64_t v78 = v128[0];
          *((_DWORD *)v128[0] + 1) = v73;
          *((_WORD *)v78 + 4) = v75;
          *((void *)v78 + 2) = v76;
        }
      }
LABEL_110:
      unsigned int inserted = v27;
      if ((v27 & 0x1FFF) == 0xA) {
        return v27;
      }
      goto LABEL_111;
    }
  }
LABEL_53:
  for (uint64_t i = 0; i != 240; i += 80)
  {
    unsigned int v39 = -1431655765 * ((*(void *)(a1 + i + 640) - *(void *)(a1 + i + 632)) >> 3);
    if (v39 >= 0x33)
    {
      int v40 = (int)(float)(*(float *)(v107 + 8232) * (float)v39);
      if (v104 < v40) {
        int v40 = v104;
      }
      unsigned int v41 = v40 <= 50 ? 50 : v40;
      if (v41 != v39)
      {
        MFS__log_select_Diag(v87, 1, (uint64_t)"nCan:(%d)|bInv:(%d)|Prne:(%d)|CtxtW:(%f)\n");
        uint64_t UnitData_Obersee = mfs_CandidateList_Sort_Obersee(a1 + i + 600);
        unsigned int inserted = UnitData_Obersee;
        if ((UnitData_Obersee & 0x80000000) != 0) {
          return UnitData_Obersee;
        }
        mfs_CandidateList_Prune_Obersee(a1 + i + 600, v41, *(void *)(*(void *)a1 + 8), v89);
      }
    }
  }
  uint64_t v42 = 0;
  uint64_t v103 = a1 + 18024;
  uint64_t v43 = v86 + 528 * v85;
  uint64_t v94 = (void *)(v43 + 16);
  uint64_t v90 = (_DWORD *)(v43 + 24);
  signed int v88 = (int *)(v43 + 28);
  while (2)
  {
    switch(v42)
    {
      case 2:
        mfs_DataCachePair_SwapCaches_Obersee(v103);
        break;
      case 1:
        uint64_t v44 = a1 + 18024;
        int v45 = 1;
LABEL_71:
        mfs_DataCachePair_SetMode_Obersee(v44, v45);
        break;
      case 0:
        uint64_t v44 = a1 + 18024;
        int v45 = 0;
        goto LABEL_71;
    }
    int v46 = v124[v42];
    unsigned int v96 = HIBYTE(v108);
    uint64_t v47 = v92 + 80 * v42;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    memset(v111, 0, sizeof(v111));
    uint64_t v49 = *(void *)(v47 + 32);
    uint64_t v48 = *(void *)(v47 + 40);
    uint64_t v100 = v47;
    uint64_t v50 = *(void *)(a1 + 584);
    uint64_t v51 = *(void *)(a1 + 592);
    uint64_t v52 = *(void *)a1;
    uint64_t v53 = *(void *)(a1 + 576);
    float v54 = *(float *)(v51 + 8972);
    memset(v128, 0, 512);
    float32x4_t v105 = *(unsigned __int8 **)(v51 + 23144);
    float v55 = *(float *)(v51 + 8180);
    mfs_TCost_Init(v52, v51, (uint64_t)v111);
    if (v46 == 1) {
      BYTE8(v123) = 0;
    }
    uint64_t v97 = v42;
    uint64_t v56 = v42 + 2;
    uint64_t v27 = mfs_FillTgtVect(v51, v53, (uint64_t)v111, *(_DWORD *)(*v94 + 4 * (v42 + 2)));
    if ((v27 & 0x80000000) != 0) {
      goto LABEL_95;
    }
    int v57 = -1431655765 * ((unint64_t)(v48 - v49) >> 3);
    float v58 = *(float *)v112;
    mfs_symData_DistanceOnUid_PreCalcVitSymRulesForTargetVector_Obersee(v50, v42 + 2, v96, &v125[4], v105, v128);
    *((void *)&v126 + 1) = v50 + (v56 << 10) + 2912;
    if (!v57)
    {
LABEL_85:
      mfs_TCost_Clear(v111);
      unsigned int inserted = v27;
      uint64_t v69 = v92 + 80 * v97;
      *(_DWORD *)(v69 + 64) = 0;
      uint64_t v70 = v69 + 64;
      *(_DWORD *)(v70 + 4) = 0;
      *(_DWORD *)(v70 + 8) = 0;
      if (v97 == 2)
      {
        if (!mfs_Ling_IsSilence(v107, *(void *)(v98 + 8), a2))
        {
          *(_DWORD *)(v70 + 4) = *v90;
          int v71 = *v88;
          if (*v88 <= 1) {
            int v71 = 1;
          }
          *(_DWORD *)(v70 + 8) = v71;
        }
      }
      else if (v97 == 1 && mfs_Ling_IsVowel(v107, *(void *)(v98 + 8), a2))
      {
        *(float *)uint64_t v70 = fmaxf(v58, 0.0);
      }
      uint64_t v42 = v97 + 1;
      if (v97 == 2) {
        return inserted;
      }
      continue;
    }
    break;
  }
  unsigned int v59 = 0;
  float v60 = v54 * 0.5;
  uint64_t v61 = (_WORD *)(v92 + 80 * v42 + 56);
  while (1)
  {
    uint64_t v27 = mfs_TCost_CandidateCostStream_kld_Obersee((uint64_t)v111, v50, *(void *)a1, *(void *)(v49 + 16), *(unsigned int *)(*v106 + 4 * v56), v56, (uint64_t)v127);
    if ((v27 & 0x80000000) != 0) {
      break;
    }
    unsigned int v63 = *(unsigned __int16 *)(v49 + 8);
    float v64 = mfs_symData_DistanceOnUid_Obersee(v50, *(void *)a1, (uint64_t)v125, *(unsigned int *)(*(void *)(v49 + 16) + 8), (uint64_t)v105, (uint64_t)v128, v103, v62);
    uint64_t v65 = 0;
    float v66 = (float)(1.0 - v55) * v64;
    do
    {
      float v66 = v66 + (float)(v55 * *(float *)&v127[v65]);
      v65 += 4;
    }
    while (v65 != 12);
    float v67 = (float)((float)((float)v63 * v60) + 100.0) * v66;
    if (v67 >= 65535.0) {
      float v67 = 65535.0;
    }
    mfs_CandidateList_UpdateCost_Obersee(v100, v59, (int)v67);
    unsigned int v68 = *(unsigned __int16 *)(v49 + 8);
    if (v68 < (unsigned __int16)*v61) {
      *uint64_t v61 = v68;
    }
    v49 += 24;
    if (++v59 == v57) {
      goto LABEL_85;
    }
  }
LABEL_95:
  mfs_TCost_Clear(v111);
  return v27;
}

uint64_t mfs_VennDiaGrams_Obersee(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, int a5, unsigned int a6, uint64_t a7, int a8, unsigned __int8 a9, int a10)
{
  __dst[32] = *(char **)MEMORY[0x263EF8340];
  uint64_t v50 = 0;
  uint64_t v12 = a1[73];
  uint64_t v13 = v12 + 8 * a2;
  uint64_t v14 = *(void *)(*(void *)(v13 + 1712) + 8 * a3);
  uint64_t v15 = a5;
  int v16 = (unsigned int *)(v14 + 16 * a5);
  int v17 = *(_DWORD *)(v12 + 1096);
  unsigned int v18 = v16[2];
  uint64_t v19 = *(void *)(v13 + 1792);
  uint64_t v20 = a1[74];
  if (*(_DWORD *)(v20 + 8336) != 2)
  {
    if (v19)
    {
      uint64_t v24 = v19 + *v16;
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v24 = 0;
    goto LABEL_10;
  }
  if (!v19) {
    goto LABEL_9;
  }
  uint64_t v21 = v14 + 16 * a5;
  unsigned int v22 = *(_DWORD *)(v21 + 4);
  if (v22 < 2) {
    goto LABEL_9;
  }
  uint64_t result = 2229280777;
  if (a1[2251] && *(_DWORD *)(v21 + 12) * (v22 - 1) <= *(_DWORD *)(v20 + 8340))
  {
    Huffman_Uncompress(v19 + *v16);
    uint64_t v24 = a1[2251];
    LODWORD(v50) = 0;
LABEL_10:
    uint64_t v25 = v14 + 16 * v15;
    uint64_t v26 = (unsigned int *)(v25 + 4);
    if (*(_DWORD *)(v25 + 4)) {
      BOOL v27 = a6 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27) {
      return 0;
    }
    unsigned int v28 = v17 - 1;
    int v29 = -1431655765 * ((*(void *)(a7 + 40) - *(void *)(a7 + 32)) >> 3);
    uint64_t v43 = (int *)(v25 + 12);
    unsigned int v30 = 1;
    int v31 = v29;
    while (1)
    {
      if (v18 >= v28) {
        goto LABEL_44;
      }
      if (*(_DWORD *)(a1[74] + 8356) == 1)
      {
        *(_OWORD *)uint64_t v48 = 0u;
        long long v49 = 0u;
        uint64_t result = mfs_getUnitData_Obersee(a1[73], *a1, v18, (uint64_t)v48);
        HIDWORD(v50) = result;
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = mfs_symData_recoverCompactFeatVect_Obersee(a1[73], *a1, (uint64_t)(a1 + 2253), v48[2], __dst, v32, v33, v34);
        HIDWORD(v50) = result;
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (*((unsigned __int8 *)__dst + a10) != a9) {
          goto LABEL_44;
        }
      }
      uint64_t MemoryFromChunk = a1[10];
      if (MemoryFromChunk) {
        a1[10] = *(void *)MemoryFromChunk;
      }
      else {
        uint64_t MemoryFromChunk = fastallo_AllocateMemoryFromChunk((uint64_t)(a1 + 1), 4u, (int *)&v50 + 1);
      }
      uint64_t result = HIDWORD(v50);
      if (v50 < 0) {
        return result;
      }
      uint64_t result = mfs_getUnitData_Obersee(a1[73], *a1, v18, MemoryFromChunk);
      HIDWORD(v50) = result;
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (*(unsigned __int8 *)(MemoryFromChunk + 25) == a4[1])
      {
        LOWORD(v36) = a8;
        if (a2 != 2) {
          goto LABEL_36;
        }
        if (a3 == 4)
        {
          int v37 = *(unsigned __int8 *)(MemoryFromChunk + 26);
          int v38 = a4[2];
        }
        else
        {
          LOWORD(v36) = a8;
          if (a3 == 3) {
            goto LABEL_36;
          }
          if (a3 != 2) {
            goto LABEL_43;
          }
          int v37 = *(unsigned __int8 *)(MemoryFromChunk + 24);
          int v38 = *a4;
        }
        LOWORD(v36) = a8;
        if (v37 == v38) {
          goto LABEL_36;
        }
      }
      else if (a2 == 1)
      {
        int v39 = *(_DWORD *)(a1[74] + 8260);
        if ((v39 & 0x80000000) == 0)
        {
          int v36 = a8 + 100 * v39;
          if (v36 >= 0xFFFF) {
            LOWORD(v36) = -1;
          }
LABEL_36:
          __dst[0] = 0;
          uint64_t result = mfs_CandidateList_InsertSortedProbablyAppend_Obersee(a7, v18, v36, __dst, MemoryFromChunk, *(uint64_t **)(*a1 + 8));
          if ((result & 0x80001FFF) == 0x80000002)
          {
            mfs_CandidateListNode_UpdateCost_Obersee((uint64_t)__dst[0], -100);
            *(void *)uint64_t MemoryFromChunk = a1[10];
            a1[10] = MemoryFromChunk;
          }
          else if ((result & 0x80001FFF) == 0x8000000A)
          {
            return result;
          }
          int v31 = -1431655765 * ((*(void *)(a7 + 40) - *(void *)(a7 + 32)) >> 3);
          goto LABEL_44;
        }
      }
LABEL_43:
      *(void *)uint64_t MemoryFromChunk = a1[10];
      a1[10] = MemoryFromChunk;
LABEL_44:
      unsigned int v40 = *v26;
      if (v30 - 1 < *v26 - 1)
      {
        if (v24)
        {
          v18 += readBytesIntoU32(v24, &v50, *v43);
          unsigned int v40 = *v26;
        }
        else
        {
          ++v18;
        }
      }
      BOOL v41 = v30++ >= v40;
      BOOL v41 = v41 || v31 - v29 >= a6;
      if (v41) {
        return HIDWORD(v50);
      }
    }
  }
  return result;
}

uint64_t mfs_AppendUnsortedToCandidateListIfNotPresent_Obersee(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 a5)
{
  uint64_t v12 = 0;
  uint64_t result = mfs_CandidateList_ReserveSpaceAtEndIfNotPresent_Obersee(a2, a3, a4, &v12, *(uint64_t **)(*a1 + 8));
  unsigned int v11 = result;
  if (!result)
  {
    uint64_t MemoryFromChunk = (uint64_t *)a1[10];
    if (MemoryFromChunk)
    {
      a1[10] = *MemoryFromChunk;
    }
    else
    {
      uint64_t MemoryFromChunk = (uint64_t *)fastallo_AllocateMemoryFromChunk((uint64_t)(a1 + 1), 4u, (int *)&v11);
      uint64_t result = v11;
      if ((v11 & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t result = mfs_getUnitData_Obersee(a1[73], *a1, a4, (uint64_t)MemoryFromChunk);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v10 = v12;
      *((_DWORD *)v12 + 1) = a4;
      *((_WORD *)v10 + 4) = a5;
      *((void *)v10 + 2) = MemoryFromChunk;
    }
  }
  return result;
}

uint64_t mfs_Search_EndPrefilterRun(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 576) + 2200) = 0;
  return result;
}

uint64_t mfs_PruneDPListOnContext_Obersee(uint64_t *a1, int a2)
{
  char v18 = 0;
  __int16 v17 = 0;
  UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a1[72] + 8), a2, &v17);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = 2 * a2;
  do
  {
    uint64_t v7 = (_DWORD *)a1[74];
    if (HIBYTE(v17) == 1)
    {
      int v8 = v7[2064];
      if (v8)
      {
        if (v8 >= v7[2060]) {
          int v8 = v7[2060];
        }
      }
      else
      {
        int v8 = 20;
      }
    }
    else
    {
      int v8 = v7[2060];
    }
    uint64_t v9 = a1[v4 + 80];
    uint64_t v10 = a1[v4 + 79];
    unsigned int v11 = &a1[v4];
    HIDWORD(a1[v4 + 82]) = v8;
    signed int v12 = mfs_CandidateList_Filter_Obersee((uint64_t)&a1[v4 + 75], v7[2079] + LOWORD(a1[v4 + 82]));
    uint64_t v13 = a1[74];
    if (SHIDWORD(a1[v4 + 82]) >= v12)
    {
      signed int v14 = *(_DWORD *)(v13 + 8320);
      if (v12 >= v14 || v14 >= (int)(-1431655765 * ((unint64_t)(v9 - v10) >> 3)))
      {
        *((_DWORD *)v11 + 165) = v12;
        mfs_CandidateList_Prune_Obersee((uint64_t)&a1[v4 + 75], v12, *(void *)(*a1 + 8), (uint64_t)(a1 + 1));
        goto LABEL_16;
      }
    }
    else
    {
      signed int v14 = *(_DWORD *)(v13 + 8240);
    }
    *((_DWORD *)v11 + 165) = v14;
    uint64_t v5 = mfs_CandidateList_SelectAndPrune_Obersee((uint64_t)&a1[v4 + 75], v14, *a1, (uint64_t)(a1 + 1));
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
LABEL_16:
    v4 += 10;
    ++v6;
  }
  while (v4 != 30);
  return v5;
}

uint64_t mfs_CostList_CompareNodesScore_faster(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  BOOL v4 = v2 > v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t mfs_CostList_Init(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  uint64_t v8 = 2229280778;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  *a2 = a1;
  uint64_t v9 = a3;
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), a3, 32);
  a2[1] = v10;
  if (v10)
  {
    if (a3)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 32 * v9;
      while (1)
      {
        uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 2048, 8);
        uint64_t v14 = a2[1];
        *(void *)(v14 + v11) = v13;
        if (!v13) {
          break;
        }
        uint64_t v15 = v14 + v11;
        *(void *)(v15 + 16) = 0x80000000000;
        *(_DWORD *)(v15 + 24) = a4;
        *(_DWORD *)(v15 + 28) = 1;
        v11 += 32;
        if (v12 == v11) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      uint64_t v8 = 0;
      *((_DWORD *)a2 + 4) = a3;
    }
  }
  return v8;
}

void *mfs_CostList_DeInit(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2)
  {
    if (*((_DWORD *)result + 4))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        heap_Free(*(void **)(*v1 + 8), *(void *)(v1[1] + v3));
        uint64_t v5 = v1[1] + v3;
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          heap_Free(*(void **)(*v1 + 8), v6);
          *(void *)(v5 + 8) = 0;
        }
        ++v4;
        v3 += 32;
      }
      while (v4 < *((unsigned int *)v1 + 4));
      uint64_t v2 = v1[1];
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v2);
    v1[1] = 0;
  }
  *((_DWORD *)v1 + 4) = 0;
  return result;
}

uint64_t mfs_CostList_IsNodeInList(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7 = *(void *)(a4 + 2384);
  int v8 = *(_DWORD *)(a4 + 2392);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = a2;
  uint64_t v11 = v9 + 32 * a2;
  *a5 = -1;
  if (v7)
  {
    if (!*(_DWORD *)(a4 + 2376)) {
      goto LABEL_11;
    }
    if (mfs_isUnitRemoved(v7, a3)) {
      return 0;
    }
    if (!*(_DWORD *)(a4 + 2376))
    {
LABEL_11:
      unsigned int v16 = 0;
      unsigned int v17 = v8 - 1;
      do
      {
        while (1)
        {
          unsigned int v18 = (v17 + v16) >> 1;
          unsigned int v19 = *(_DWORD *)(v7 + 4 * v18);
          if (v19 <= a3) {
            break;
          }
          if (v17 + v16 >= 2)
          {
            unsigned int v17 = v18 - 1;
            if (v18 - 1 >= v16) {
              continue;
            }
          }
          goto LABEL_5;
        }
        if (v19 >= a3) {
          return 0;
        }
        unsigned int v16 = v18 + 1;
      }
      while (v17 > v18);
    }
LABEL_5:
    unsigned int InsertionPoint_0 = mfs_CostList_FindInsertionPoint_0((uint64_t *)v11, a3);
    if (InsertionPoint_0 >= *(_DWORD *)(v9 + 32 * v10 + 16)) {
      return 0;
    }
    int v14 = *(_DWORD *)(*(void *)v11 + 8 * InsertionPoint_0);
  }
  else
  {
    unsigned int InsertionPoint_0 = mfs_CostList_FindInsertionPoint_0((uint64_t *)(v9 + 32 * a2), a3);
    if (InsertionPoint_0 >= *(_DWORD *)(v11 + 16)) {
      return 0;
    }
    int v14 = *(_DWORD *)(*(void *)v11 + 8 * InsertionPoint_0);
  }
  if (v14 == a3)
  {
    *a5 = InsertionPoint_0;
    return 1;
  }
  return 0;
}

uint64_t mfs_CostList_FindInsertionPoint_0(uint64_t *a1, unsigned int a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  if (v4 < 0 != v3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v7 = *a1;
  while (1)
  {
    uint64_t v8 = ((v4 + (int)result) >> 1);
    unsigned int v9 = *(_DWORD *)(v7 + 8 * (int)v8);
    if (v9 >= a2)
    {
      if (v9 <= a2) {
        return v8;
      }
      int v4 = v8 - 1;
    }
    else
    {
      uint64_t result = (v8 + 1);
    }
    if ((int)result <= v4)
    {
      uint64_t v8 = ((v4 + (int)result) >> 1);
      unsigned int v10 = *(_DWORD *)(v7 + 8 * (int)v8);
      if (v10 >= a2)
      {
        if (v10 <= a2) {
          return v8;
        }
        int v4 = v8 - 1;
      }
      else
      {
        uint64_t result = (v8 + 1);
      }
      if ((int)result <= v4) {
        break;
      }
    }
LABEL_17:
    if ((int)result > v4) {
      return result;
    }
  }
  uint64_t v8 = ((v4 + (int)result) >> 1);
  unsigned int v11 = *(_DWORD *)(v7 + 8 * (int)v8);
  if (v11 < a2)
  {
    uint64_t result = (v8 + 1);
    goto LABEL_17;
  }
  if (v11 > a2)
  {
    int v4 = v8 - 1;
    goto LABEL_17;
  }
  return v8;
}

uint64_t mfs_CostList_Add(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, unsigned int *a7, float a8)
{
  uint64_t v8 = 2229280769;
  uint64_t v9 = a2[1];
  uint64_t v10 = a3;
  uint64_t v11 = v9 + 32 * a3;
  *a7 = -1;
  if (!*(_DWORD *)(v11 + 24))
  {
    if (a5)
    {
      unsigned int v19 = *(_DWORD *)(*(void *)(a1 + 1072) + 8368);
      if (v19 == 1)
      {
        if (mfs_isUnitRemoved(a5, a4)) {
          return 0;
        }
        unsigned int v19 = *(_DWORD *)(*(void *)(a1 + 1072) + 8368);
      }
      if (!v19)
      {
        unsigned int v32 = a6 - 1;
        do
        {
          while (1)
          {
            unsigned int v33 = (v32 + v19) >> 1;
            unsigned int v34 = *(_DWORD *)(a5 + 4 * v33);
            if (v34 <= a4) {
              break;
            }
            if (v32 + v19 >= 2)
            {
              unsigned int v32 = v33 - 1;
              if (v33 - 1 >= v19) {
                continue;
              }
            }
            goto LABEL_8;
          }
          if (v34 >= a4) {
            return 0;
          }
          unsigned int v19 = v33 + 1;
        }
        while (v32 > v33);
      }
    }
LABEL_8:
    unsigned int InsertionPoint_0 = mfs_CostList_FindInsertionPoint_0((uint64_t *)v11, a4);
    unsigned int v21 = InsertionPoint_0;
    uint64_t v22 = v9 + 32 * v10;
    uint64_t v24 = (unsigned int *)(v22 + 16);
    unsigned int v23 = *(_DWORD *)(v22 + 16);
    uint64_t v25 = *(void *)v11;
    if (InsertionPoint_0 < v23 && *(_DWORD *)(v25 + 8 * InsertionPoint_0) == a4)
    {
      *a7 = InsertionPoint_0;
      return 2229280770;
    }
    else
    {
      int v27 = *(_DWORD *)(v22 + 20);
      uint64_t v26 = (unsigned int *)(v22 + 20);
      if (v27 == v23)
      {
        unsigned int v28 = v23 + 64;
        *uint64_t v26 = v28;
        uint64_t v29 = heap_Realloc(*(uint64_t **)(*a2 + 8), v25, 8 * v28);
        *(void *)uint64_t v11 = v29;
        if (!v29)
        {
          *v26 -= 64;
          return 2229280778;
        }
        uint64_t v25 = v29;
        unsigned int v23 = *v24;
      }
      unsigned int v30 = v23 - v21;
      if (v30)
      {
        memmove((void *)(v25 + 8 * (v21 + 1)), (const void *)(v25 + 8 * v21), 8 * v30);
        uint64_t v25 = *(void *)v11;
      }
      uint64_t v8 = 0;
      uint64_t v31 = v25 + 8 * v21;
      *(_DWORD *)uint64_t v31 = a4;
      *(float *)(v31 + 4) = a8;
      *a7 = v21;
      ++*v24;
    }
  }
  return v8;
}

uint64_t mfs_CostList_Pad(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, _DWORD *a7, float a8)
{
  uint64_t v8 = 2229280769;
  uint64_t v9 = a2[1];
  uint64_t v10 = a3;
  uint64_t v11 = v9 + 32 * a3;
  *a7 = -1;
  if (!*(_DWORD *)(v11 + 24))
  {
    if (a5)
    {
      unsigned int v19 = *(_DWORD *)(*(void *)(a1 + 1072) + 8368);
      if (v19 == 1)
      {
        if (mfs_isUnitRemoved(a5, a4)) {
          return 0;
        }
        unsigned int v19 = *(_DWORD *)(*(void *)(a1 + 1072) + 8368);
      }
      if (!v19)
      {
        unsigned int v28 = a6 - 1;
        do
        {
          while (1)
          {
            unsigned int v29 = (v28 + v19) >> 1;
            unsigned int v30 = *(_DWORD *)(a5 + 4 * v29);
            if (v30 <= a4) {
              break;
            }
            if (v28 + v19 >= 2)
            {
              unsigned int v28 = v29 - 1;
              if (v29 - 1 >= v19) {
                continue;
              }
            }
            goto LABEL_8;
          }
          if (v30 >= a4) {
            return 0;
          }
          unsigned int v19 = v29 + 1;
        }
        while (v28 > v29);
      }
    }
LABEL_8:
    uint64_t v20 = v9 + 32 * v10;
    unsigned int v23 = *(_DWORD *)(v20 + 16);
    unsigned int v21 = (_DWORD *)(v20 + 16);
    uint64_t v22 = v23;
    uint64_t v24 = v21 + 1;
    uint64_t v25 = *(void *)v11;
    if (v21[1] == v23
      && (*uint64_t v24 = v22 + 64,
          uint64_t v25 = heap_Realloc(*(uint64_t **)(*a2 + 8), v25, 8 * (v22 + 64)),
          (*(void *)uint64_t v11 = v25) == 0))
    {
      *v24 -= 64;
      return 2229280778;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v26 = v25 + 8 * v22;
      *(_DWORD *)uint64_t v26 = a4;
      *(float *)(v26 + 4) = a8;
      *a7 = v22;
      ++*v21;
    }
  }
  return v8;
}

uint64_t mfs_ConcatTwoLists(void *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a3 + 8) + 32 * a4;
  uint64_t v5 = (unsigned int *)(v4 + 16);
  unsigned int v6 = *(_DWORD *)(v4 + 16);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = a2;
  uint64_t v9 = v7 + 32 * a2;
  uint64_t v10 = (_DWORD *)(v9 + 16);
  unsigned int v11 = *(_DWORD *)(v9 + 16) + 2 * v6;
  uint64_t v12 = (unsigned int *)(v9 + 20);
  if (v11 <= *(_DWORD *)(v9 + 20)) {
    goto LABEL_5;
  }
  *uint64_t v12 = v11;
  uint64_t v13 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(void *)v9, 8 * v11);
  *(void *)uint64_t v9 = v13;
  if (!v13)
  {
    *v12 -= v6;
    uint64_t result = 2229280778;
    goto LABEL_8;
  }
  unsigned int v6 = *v5;
  if (*v5)
  {
LABEL_5:
    memcpy((void *)(*(void *)v9 + 8 * *v10), *(const void **)v4, 8 * v6);
    uint64_t result = 0;
    *v10 += *v5;
    *(_DWORD *)(v7 + 32 * v8 + 28) = 0;
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
  }
LABEL_8:
  *uint64_t v5 = 0;
  return result;
}

uint64_t mfs_CostList_Sort(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 32 * a2;
  uint64_t v7 = (_DWORD *)(v6 + 24);
  if (*(_DWORD *)(v6 + 24) == a3 && *(_DWORD *)(v6 + 28)) {
    return 0;
  }
  if (!a3)
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    uint64_t v10 = (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesUid;
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a3 == 1)
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    uint64_t v10 = (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesScore_faster;
    if (!v9)
    {
LABEL_8:
      uint64_t result = 0;
      _DWORD *v7 = a3;
      *(_DWORD *)(v4 + 32 * v5 + 28) = 1;
      return result;
    }
LABEL_7:
    ssft_qsort(*(void *)v6, v9, 8, v10);
    goto LABEL_8;
  }
  return 2229280769;
}

uint64_t mfs_CostList_CompareNodesUid(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t mfs_CostList_SelectAndPrune(void *a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v7 = a1[1];
  uint64_t v8 = a2;
  uint64_t v9 = v7 + 32 * a2;
  if (*(_DWORD *)(v9 + 24) == a3 && *(_DWORD *)(v9 + 28)) {
    return 0;
  }
  if (!a3)
  {
    int v15 = *(_DWORD *)(v7 + 32 * a2 + 16);
    if (v15) {
      mfs_CostList_QSelect(*(void *)v9, v15, 8, (uint64_t (*)(char *, char *))mfs_CostList_CompareNodesUid, a4);
    }
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    uint64_t v11 = v7 + 32 * a2;
    int v14 = *(_DWORD *)(v11 + 16);
    uint64_t v13 = (unsigned int *)(v11 + 16);
    int v12 = v14;
    if (v14)
    {
      mfs_CostList_QSelect(*(void *)v9, v12, 8, (uint64_t (*)(char *, char *))mfs_CostList_CompareNodesScore_faster, a4);
      if (*v13 > a4) {
        mfs_CostList_Prune(a1, a2, a4);
      }
    }
LABEL_11:
    uint64_t result = 0;
    *(_DWORD *)(v7 + 32 * v8 + 28) = 0;
    return result;
  }
  return 2229280769;
}

void *mfs_CostList_Prune(void *result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result[1] + 32 * a2;
  if (*(_DWORD *)(v4 + 16) > a3)
  {
    uint64_t v5 = result;
    *(int32x2_t *)(v4 + 16) = vdup_n_s32(a3);
    uint64_t result = (void *)heap_Realloc(*(uint64_t **)(*result + 8), *(void *)v4, 8 * a3);
    if (result) {
      *(void *)uint64_t v4 = result;
    }
    uint64_t v6 = v5[1] + 32 * v3;
    uint64_t v9 = *(void *)(v6 + 8);
    uint64_t v8 = (void *)(v6 + 8);
    uint64_t v7 = v9;
    if (v9)
    {
      uint64_t result = heap_Free(*(void **)(*v5 + 8), v7);
      *uint64_t v8 = 0;
    }
  }
  return result;
}

uint64_t mfs_CostList_UpdateCost_inlined(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  *(float *)(*(void *)(*(void *)(result + 8) + 32 * a2) + 8 * a3 + 4) = a4;
  return result;
}

uint64_t mfs_CostList_UpdateCostEnd_inlined(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8) + 32 * a2;
  if (*(_DWORD *)(v2 + 24) == 1) {
    *(_DWORD *)(v2 + 28) = 0;
  }
  return result;
}

uint64_t mfs_CostList_UpdateCost(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t v4 = *(void *)(result + 8) + 32 * a2;
  *(float *)(*(void *)v4 + 8 * a3 + 4) = a4;
  if (*(_DWORD *)(v4 + 24) == 1) {
    *(_DWORD *)(v4 + 28) = 0;
  }
  return result;
}

uint64_t mfs_CostList_HasUnit(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = v3 + 32 * a2;
  uint64_t v6 = (_DWORD *)(v4 + 16);
  uint64_t v5 = *(unsigned int *)(v4 + 16);
  if (!*(_DWORD *)(v4 + 16)) {
    return 0;
  }
  if (!*(_DWORD *)(v4 + 24))
  {
    BOOL v17 = __OFSUB__(v5, 1);
    int v18 = v5 - 1;
    if (v18 < 0 == v17)
    {
      int v19 = 0;
      do
      {
        int v20 = (v18 + v19) / 2;
        unsigned int v21 = *(_DWORD *)(*(void *)v4 + 8 * v20);
        if (v21 >= a3)
        {
          if (v21 <= a3) {
            return 1;
          }
          int v18 = v20 - 1;
        }
        else
        {
          int v19 = v20 + 1;
        }
      }
      while (v19 <= v18);
    }
    return 0;
  }
  uint64_t v8 = v3 + 32 * a2;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 8);
  if (v10) {
    goto LABEL_24;
  }
  uint64_t v11 = heap_Alloc(*(void *)(*a1 + 8), 4 * v5);
  *uint64_t v9 = v11;
  uint64_t v12 = *v6;
  if (v11)
  {
    if (v12)
    {
      unint64_t v13 = 0;
      int v14 = *(int **)v4;
      do
      {
        int v15 = *v14;
        v14 += 2;
        *(_DWORD *)(v11 + 4 * v13++) = v15;
        unint64_t v16 = *v6;
      }
      while (v13 < v16);
    }
    else
    {
      unint64_t v16 = 0;
    }
    ssft_qsort(v11, v16, 4, (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesUid);
    LODWORD(v5) = *v6;
LABEL_24:
    BOOL v17 = __OFSUB__(v5, 1);
    int v25 = v5 - 1;
    if (v25 < 0 == v17)
    {
      int v26 = 0;
      do
      {
        int v27 = (v25 + v26) / 2;
        unsigned int v28 = *(_DWORD *)(*v9 + 4 * v27);
        if (v28 >= a3)
        {
          if (v28 <= a3) {
            return 1;
          }
          int v25 = v27 - 1;
        }
        else
        {
          int v26 = v27 + 1;
        }
      }
      while (v26 <= v25);
    }
    return 0;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v22 = *(int **)v4;
  while (1)
  {
    int v23 = *v22;
    v22 += 2;
    if (v23 == a3) {
      break;
    }
    uint64_t result = 0;
    if (!--v12) {
      return result;
    }
  }
  return 1;
}

void *mfs_CostList_FreeUidIndex(void *result)
{
  if (result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = *((unsigned int *)result + 4);
    if (v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 8;
      do
      {
        uint64_t v5 = v1[1];
        uint64_t v6 = *(void *)(v5 + v4);
        if (v6)
        {
          uint64_t result = heap_Free(*(void **)(*v1 + 8), v6);
          *(void *)(v5 + v4) = 0;
          unint64_t v2 = *((unsigned int *)v1 + 4);
        }
        ++v3;
        v4 += 32;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t mfs_SplitFeatures(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v8 = 2229280778;
  unsigned int v9 = *(__int16 *)(a2 + 10);
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), v9, 4);
  if (!v10) {
    return v8;
  }
  uint64_t v11 = (_DWORD *)v10;
  uint64_t v12 = (_DWORD *)heap_Calloc(*(void **)(a1 + 8), v9 + 1, 4);
  if (!v12)
  {
    int v57 = *(void **)(a1 + 8);
    uint64_t v58 = (uint64_t)v11;
LABEL_63:
    heap_Free(v57, v58);
    return v8;
  }
  uint64_t v13 = (uint64_t)v12;
  uint64_t v65 = a1;
  *uint64_t v12 = 0;
  int v14 = *(__int16 *)(a2 + 10);
  uint64_t v61 = a4;
  uint64_t v62 = a3;
  if (v14 < 1) {
    goto LABEL_30;
  }
  int v15 = 0;
  unint64_t v16 = *(unsigned __int16 **)(a2 + 1800);
  int v17 = (__int16)(v14 + 1);
  uint64_t v18 = v17 <= 2 ? 2 : v17;
  int v19 = v12 + 1;
  uint64_t v20 = v18 - 1;
  do
  {
    int v21 = *v16++;
    v15 += v21;
    *v19++ = v15;
    --v20;
  }
  while (v20);
  if (v14 < 2)
  {
LABEL_30:
    int v29 = 0;
    *uint64_t v11 = 1;
    int v36 = 2;
  }
  else
  {
    int v22 = v12[1];
    uint64_t v23 = 1;
    float v64 = v11;
    do
    {
      uint64_t v24 = v23 + 1;
      int v25 = *(_DWORD *)(v13 + 4 * (v23 + 1));
      if (v25 << 16 > v22 << 16)
      {
        uint64_t v26 = v23 - 1;
        do
        {
          if (*(_DWORD *)(*(void *)(a2 + 3512) + 32 * (__int16)v22) == 50)
          {
            MFS__log_select_Diag(a1, 2, (uint64_t)"PROSODY_DEBUG: MARKER_PROSODY detected at phoneme %d, phoneme value for previous phoneme is %d\n");
            if (*(unsigned char *)(*(void *)(a2 + 32) + v26) != 1 && (_WORD)v23 != 1)
            {
              int v27 = *(unsigned __int8 *)(*(void *)(a2 + 152) + v26);
              unsigned __int16 v28 = v23 - 1;
              do
              {
                if (*(unsigned __int8 *)(*(void *)(a2 + 152) + v28) != v27) {
                  break;
                }
                *(unsigned char *)(*(void *)(a2 + 296) + v28) = 2;
                *(unsigned char *)(*(void *)(a2 + 104) + v28) = 4;
                *(unsigned char *)(*(void *)(a2 + 152) + v28) = 1;
                *(unsigned char *)(*(void *)(a2 + 120) + v28) = 2;
                *(unsigned char *)(*(void *)(a2 + 136) + v28) = 1;
                *(unsigned char *)(*(void *)(a2 + 176) + v28--) = 2;
              }
              while (v28);
            }
          }
          LOWORD(v22) = v22 + 1;
          int v25 = *(_DWORD *)(v13 + 4 * v24);
        }
        while ((__int16)v25 > (__int16)v22);
        LOWORD(v14) = *(_WORD *)(a2 + 10);
        uint64_t v11 = v64;
      }
      int v22 = v25;
      ++v23;
    }
    while (v24 < (__int16)v14);
    *uint64_t v11 = 1;
    if ((__int16)v14 < 3)
    {
      int v29 = 0;
      int v36 = 2;
      uint64_t v8 = 2229280778;
    }
    else
    {
      int v29 = 0;
      int v30 = (__int16)v14 - 1;
      uint64_t v31 = *(void *)(a2 + 32);
      int v32 = 1;
      int v33 = 1;
      LOWORD(v34) = 1;
      uint64_t v8 = 2229280778;
      do
      {
        uint64_t v34 = (__int16)v34;
        if (*(unsigned char *)(v31 + (__int16)v34) == 1
          && *(unsigned char *)(v31 + v33 + 1) != 1
          && !*(_WORD *)(*(void *)(a2 + 1800) + 2 * v34))
        {
          v11[v29++] = v32 + 1;
        }
        int v35 = v11[v29];
        int v32 = v35 + 1;
        v11[v29] = v35 + 1;
        LOWORD(v34) = v34 + 1;
        int v33 = (__int16)v34;
      }
      while (v30 > (__int16)v34);
      int v36 = v35 + 2;
    }
  }
  v11[v29] = v36;
  unsigned int v37 = v29 + 1;
  uint64_t v38 = heap_Calloc(*(void **)(v65 + 8), (v29 + 1), 8);
  if (!v38)
  {
    heap_Free(*(void **)(v65 + 8), (uint64_t)v11);
    int v57 = *(void **)(v65 + 8);
    uint64_t v58 = v13;
    goto LABEL_63;
  }
  uint64_t v39 = v38;
  if ((v29 - 1) > 0xFFFFFFFD)
  {
LABEL_60:
    heap_Free(*(void **)(v65 + 8), (uint64_t)v11);
    heap_Free(*(void **)(v65 + 8), v13);
    uint64_t v8 = 0;
    *uint64_t v61 = v37;
    *uint64_t v62 = v39;
  }
  else
  {
    uint64_t v40 = 0;
    unsigned int v63 = 0;
    if (v37 <= 1) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = v37;
    }
    uint64_t v60 = v41;
    while (1)
    {
      uint64_t v42 = (void *)heap_Calloc(*(void **)(v65 + 8), 1, 3656);
      *(void *)(v39 + 8 * v40) = v42;
      if (!v42) {
        break;
      }
      bzero(v42, 0xE48uLL);
      uint64_t v43 = 0;
      uint64_t v44 = *(void *)(v39 + 8 * v40);
      *(void *)uint64_t v44 = *(void *)a2;
      unsigned int v45 = v40 * *(unsigned __int16 *)(*(void *)a2 + 3360);
      *(void *)(*(void *)(v39 + 8 * v40) + 3584) = *(void *)(a2 + 3584) + 4 * v45;
      unint64_t v46 = v11[v40];
      *(_WORD *)(v44 + 10) = v46;
      *(void *)(*(void *)(v39 + 8 * v40) + 3592) = *(void *)(a2 + 3592) + 4 * v45;
      do
      {
        uint64_t v47 = a2 + 8 * v43;
        uint64_t v49 = *(void *)(v47 + 16);
        uint64_t v48 = (void *)(v47 + 16);
        if (v49)
        {
          *(void *)(*(void *)(v39 + 8 * v40) + 8 * v43 + 16) = heap_Calloc(*(void **)(v65 + 8), v46, 1);
          if (!*(void *)(*(void *)(v39 + 8 * v40) + 8 * v43 + 16)) {
            goto LABEL_64;
          }
        }
        else if (*(void *)(a2 + 8 * v43 + 1760))
        {
          *(void *)(*(void *)(v39 + 8 * v40) + 8 * v43 + 1760) = heap_Calloc(*(void **)(v65 + 8), v46, 2);
          if (!*(void *)(*(void *)(v39 + 8 * v40) + 8 * v43 + 1760)) {
            goto LABEL_64;
          }
        }
        unint64_t v46 = v11[v40];
        if (v46)
        {
          unint64_t v50 = 0;
          uint64_t v51 = (void *)(a2 + 8 * v43 + 1760);
          do
          {
            if (*v48)
            {
              *(unsigned char *)(*(void *)(*(void *)(v39 + 8 * v40) + 8 * v43 + 16) + v50) = *(unsigned char *)(*v48
                                                                                                  + v63
                                                                                                  + v50);
              unint64_t v46 = v11[v40];
            }
            else if (*v51)
            {
              *(_WORD *)(*(void *)(*(void *)(v39 + 8 * v40) + 8 * v43 + 1760) + 2 * v50) = *(_WORD *)(*v51 + 2 * (v63 + v50));
            }
            ++v50;
          }
          while (v50 < v46);
        }
        else
        {
          unint64_t v46 = 0;
        }
        ++v43;
      }
      while (v43 != 218);
      uint64_t v52 = *(void *)(v39 + 8 * v40);
      *(_DWORD *)(v52 + 3520) = 0;
      if (v11[v40])
      {
        int v53 = 0;
        unint64_t v54 = 0;
        uint64_t v55 = *(void *)(v52 + 1800);
        do
        {
          v53 += *(unsigned __int16 *)(v55 + 2 * v54);
          *(_DWORD *)(v52 + 3520) = v53;
          ++v54;
          unint64_t v56 = v11[v40];
        }
        while (v54 < v56);
      }
      else
      {
        LODWORD(v56) = 0;
      }
      *(void *)(v52 + 3512) = *(void *)(a2 + 3512) + 32 * *(unsigned int *)(v13 + 4 * v63);
      unsigned int v63 = v63 + v56 - 1;
      if (++v40 == v60) {
        goto LABEL_60;
      }
    }
LABEL_64:
    heap_Free(*(void **)(v65 + 8), (uint64_t)v11);
    heap_Free(*(void **)(v65 + 8), v13);
    mfs_FreeSplitFeatures(v65, v39, v37);
    return 2229280778;
  }
  return v8;
}

void *mfs_FreeSplitFeatures(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
    {
      if (*(void *)(a2 + 8 * v5))
      {
        for (uint64_t i = 1760; i != 3504; i += 8)
        {
          uint64_t v8 = *(void *)(a2 + 8 * v5);
          uint64_t v9 = *(void *)(v8 + i - 1744);
          if (v9)
          {
            heap_Free(*(void **)(a1 + 8), v9);
            uint64_t v8 = *(void *)(a2 + 8 * v5);
          }
          uint64_t v10 = *(void *)(v8 + i);
          if (v10) {
            heap_Free(*(void **)(a1 + 8), v10);
          }
        }
        uint64_t v11 = *(void *)(a2 + 8 * v5);
      }
      else
      {
        uint64_t v11 = 0;
      }
      heap_Free(*(void **)(a1 + 8), v11);
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v12 = *(void **)(a1 + 8);
  return heap_Free(v12, a2);
}

uint64_t mfs_ParamMap_MapSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(unsigned int *)(a5 + 4);
  uint64_t v13 = *(unsigned __int16 *)(a5 + 8);
  uint64_t v14 = *(void *)(a2 + 1072);
  int v15 = *(_DWORD *)(v14 + 8280);
  if (v15 == 1 && *(_DWORD *)(v14 + 25288) == 1)
  {
    uint64_t v83 = a1;
    uint64_t v84 = (_DWORD *)a7;
    goto LABEL_12;
  }
  if ((v12 + v13) <= *(_DWORD *)(a2 + 1544))
  {
    BOOL v18 = v15 != 1 && *(void *)(a2 + 12440) == 0;
    uint64_t v84 = (_DWORD *)a7;
    if (!v18)
    {
      uint64_t v83 = a1;
LABEL_12:
      int v88 = *(_DWORD *)(a5 + 4);
      uint64_t v87 = (uint64_t *)(a2 + 12440);
      uint64_t v19 = 0;
      int v85 = (unsigned char *)(a2 + 12456);
      unsigned int v81 = a4;
      do
      {
        uint64_t v20 = *(void *)(a2 + 1072);
        int v21 = *(_DWORD *)(v20 + 4 * v19 + 224);
        if (v21)
        {
          if (v21 == 2 && *(_DWORD *)(v20 + 8280) == 1)
          {
            unsigned int v23 = 0;
            int v24 = v13;
          }
          else
          {
            unsigned int v23 = *(_DWORD *)(v20 + 4 * v19 + 264);
            int v24 = v23 * v13;
          }
          size_t v26 = (4 * v24);
          uint64_t v27 = a3 + 4 * v19;
          if (*(_DWORD *)(v27 + 2528) < (4 * v24))
          {
            uint64_t v28 = a3 + 8 * v19;
            uint64_t v29 = heap_Realloc(*(uint64_t **)(*(void *)(a3 + 1928) + 8), *(void *)(v28 + 2448), v26);
            *(void *)(v28 + 2448) = v29;
            if (!v29) {
              return 2229280778;
            }
            *(_DWORD *)(v27 + 2528) = v26;
            uint64_t v20 = *(void *)(a2 + 1072);
          }
          if (*(_DWORD *)(v20 + 25288) && *(_DWORD *)(v20 + 4 * v19 + 224) == 1)
          {
            bzero(*(void **)(a3 + 8 * v19 + 2448), v26);
          }
          else if (*(_DWORD *)(v20 + 8280) == 1 && *(_DWORD *)(v20 + 4 * v19 + 224) == 2)
          {
            if (*(_DWORD *)(a3 + 2064) == 2)
            {
              if (v13)
              {
                int v30 = *(float **)(a3 + 8 * v19 + 2448);
                uint64_t v31 = *(void *)(v20 + 18104);
                bzero(v30, 4 * v13);
                uint64_t v32 = v31 + 12 * v81;
                unsigned int v33 = *(unsigned __int16 *)(v32 + 6);
                float v34 = -1.0e10;
                if (v33 != 256) {
                  float v34 = (float)((float)v33 / *(float *)(v20 + 8752)) + *(float *)(v20 + 8672);
                }
                unsigned int v35 = *(_DWORD *)v32;
                float v36 = -1.0e10;
                if (v35 != 0x10000) {
                  float v36 = (float)((float)v35 / *(float *)(v20 + 8752)) + *(float *)(v20 + 8672);
                }
                *int v30 = v34;
                v30[(v13 - 1)] = v36;
              }
            }
            else
            {
              MFS__log_select_Error(v83, 0, (uint64_t)"decoding LF0 only works with MCP_S9__LF0_S8_X2B, but now is %d \n", a4, a5, a6, a7, a8);
            }
          }
          else if (v13)
          {
            int v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = *(void *)(a3 + 8 * v19 + 2448);
            int v40 = *(_DWORD *)(v20 + 4 * v19 + 224);
            do
            {
              if (v40 == 2)
              {
                if (!*v85)
                {
                  uint64_t v16 = 2229280775;
                  int v17 = "Invalid VQ unitparams data, 0 codebook found!\n";
                  a1 = v83;
                  goto LABEL_6;
                }
                unsigned __int8 v41 = *v85 - 1;
                if (v23) {
                  goto LABEL_43;
                }
              }
              else
              {
                unsigned __int8 v41 = 0;
                if (v23)
                {
LABEL_43:
                  unsigned int v42 = 0;
                  uint64_t v43 = (v88 + v38);
                  uint64_t v44 = *v87;
                  do
                  {
                    int v45 = *(unsigned __int8 *)(v44 + 24 * v41 + 4);
                    if (v45 == 2)
                    {
                      unsigned int v46 = *(unsigned __int16 *)(*(void *)(v44 + 24 * v41 + 16) + 2 * v43);
                    }
                    else
                    {
                      if (v45 != 1)
                      {
                        MFS__log_select_Error(0, 0, (uint64_t)"Error: %d Bytes Codebook not supported!\n", a4, a5, a6, a7, a8);
                        return 2229280772;
                      }
                      unsigned int v46 = *(unsigned __int8 *)(*(void *)(v44 + 24 * v41 + 16) + v43);
                    }
                    char v47 = *(unsigned char *)(v44 + 24 * v41 + 5);
                    if (v47)
                    {
                      uint64_t v48 = (_DWORD *)(v39 + 4 * (v37 + v42));
                      uint64_t v49 = (int *)(*(void *)(v44 + 24 * v41 + 8)
                                  + 4 * v46 * (unint64_t)*(unsigned __int8 *)(v44 + 24 * v41 + 5));
                      uint64_t v50 = *(unsigned __int8 *)(v44 + 24 * v41 + 5);
                      do
                      {
                        int v51 = *v49++;
                        *v48++ = v51;
                        --v50;
                      }
                      while (v50);
                    }
                    ++v41;
                    unsigned int v42 = (v47 + v42);
                  }
                  while (v23 > v42);
                }
              }
              ++v38;
              v37 += v23;
            }
            while (v38 != v13);
          }
          uint64_t v25 = *(void *)(a3 + 8 * v19 + 2448);
        }
        else
        {
          uint64_t v25 = 0;
        }
        *(void *)(a6 + 8 * v19++) = v25;
      }
      while (v19 != 10);
      goto LABEL_95;
    }
    if (*(void *)(a2 + 1256))
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v16 = 0;
      unint64_t v54 = (uint64_t *)(a3 + 2296);
      while (1)
      {
        uint64_t v55 = *(void *)(a2 + 8 * v52 + 1224);
        if (v55)
        {
          uint64_t v56 = v55 + 4 * (*(_DWORD *)(*(void *)(a2 + 1072) + v52 + 264) * v12);
        }
        else
        {
          uint64_t v57 = *(v54 - 1);
          if (!v57)
          {
            *(void *)(a6 + v53) = 0;
            goto LABEL_68;
          }
          int v91 = 0;
          uint64_t v58 = *(void *)(a2 + 1072);
          int v91 = 4 * v13 * *(_DWORD *)(v58 + v52 + 264);
          if (*v54)
          {
            brk_DataUnmap(*(void *)(*(void *)(a3 + 1928) + 24), v57, *v54);
            *unint64_t v54 = 0;
            uint64_t v57 = *(v54 - 1);
            uint64_t v58 = *(void *)(a2 + 1072);
          }
          uint64_t v16 = brk_DataMapEx(*(void *)(*(void *)(a3 + 1928) + 24), v57, (*(_DWORD *)(a2 + 4 * v53 + 1232) + 4 * v12 * *(_DWORD *)(v58 + v52 + 264)), (uint64_t)&v91, (uint64_t)v54);
          uint64_t v56 = *v54;
        }
        *(void *)(a6 + v53) = v56;
LABEL_68:
        v53 += 8;
        v52 += 4;
        v54 += 2;
        if (v52 == 40) {
          goto LABEL_96;
        }
      }
    }
    if (!*(void *)(a2 + 1280))
    {
LABEL_95:
      uint64_t v16 = 0;
LABEL_96:
      *uint64_t v84 = v13;
      return v16;
    }
    uint64_t v59 = 0;
    uint64_t v16 = 0;
    int v82 = 2 * v12;
    while (1)
    {
      uint64_t v60 = *(void *)(a2 + 32 * v59 + 1240);
      if (v60)
      {
        uint64_t v61 = v60 + 2 * (*(_DWORD *)(*(void *)(a2 + 1072) + 4 * v59 + 264) * v12);
        if (v61) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v62 = a3 + 16 * v59;
        uint64_t v63 = *(void *)(v62 + 2288);
        if (v63)
        {
          int v90 = 0;
          uint64_t v64 = *(void *)(a2 + 1072);
          int v90 = 2 * v13 * *(_DWORD *)(v64 + 4 * v59 + 264);
          uint64_t v65 = (uint64_t *)(v62 + 2296);
          uint64_t v66 = *(void *)(v62 + 2296);
          if (v66)
          {
            uint64_t v67 = v12;
            unsigned int v68 = (uint64_t *)(v62 + 2288);
            brk_DataUnmap(*(void *)(*(void *)(a3 + 1928) + 24), v63, v66);
            *uint64_t v65 = 0;
            uint64_t v63 = *v68;
            uint64_t v12 = v67;
            uint64_t v64 = *(void *)(a2 + 1072);
          }
          uint64_t v16 = brk_DataMapEx(*(void *)(*(void *)(a3 + 1928) + 24), v63, (*(_DWORD *)(a2 + 32 * v59 + 1232) + v82 * *(_DWORD *)(v64 + 4 * v59 + 264)), (uint64_t)&v90, (uint64_t)v65);
          uint64_t v61 = *v65;
          if (*v65)
          {
LABEL_80:
            unsigned int v89 = v16;
            uint64_t v69 = (4 * v13 * *(_DWORD *)(*(void *)(a2 + 1072) + 4 * v59 + 264));
            uint64_t v70 = a3 + 4 * v59;
            if (*(_DWORD *)(v70 + 2528) < v69)
            {
              uint64_t v86 = a3 + 8 * v59;
              uint64_t v71 = heap_Realloc(*(uint64_t **)(*(void *)(a3 + 1928) + 8), *(void *)(v86 + 2448), v69);
              *(void *)(v86 + 2448) = v71;
              if (!v71) {
                return 2229280778;
              }
              *(_DWORD *)(v70 + 2528) = v69;
            }
            uint64_t v16 = v89;
            if (v13)
            {
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              uint64_t v74 = *(unsigned int *)(*(void *)(a2 + 1072) + 4 * v59 + 264);
              int v75 = *(_DWORD *)(*(void *)(a2 + 1072) + 4 * v59 + 264);
              do
              {
                if ((int)v74 >= 1)
                {
                  uint64_t v76 = 0;
                  uint64_t v77 = *(void *)(a3 + 8 * v59 + 2448) + v72;
                  do
                  {
                    float v78 = -1.0e10;
                    if (*(_WORD *)(v61 + 2 * v76)) {
                      float v78 = *(float *)(*(void *)(a2 + 32 * v59 + 1248)
                    }
                                     + 4 * (v76 + 2 * *(unsigned __int16 *)(a5 + 10) * (uint64_t)v75))
                          + (float)((float)*(unsigned __int16 *)(v61 + 2 * v76)
                                  * *(float *)(*(void *)(a2 + 32 * v59 + 1248)
                                             + 4 * (v76 + ((2 * *(unsigned __int16 *)(a5 + 10)) | 1) * (int)v74)));
                    *(float *)(v77 + 4 * v76++) = v78;
                  }
                  while (v74 != v76);
                }
                ++v73;
                v72 += 4 * (int)v74;
                v61 += 2 * (int)v74;
              }
              while (v73 != v13);
            }
            uint64_t v79 = *(void *)(a3 + 8 * v59 + 2448);
            goto LABEL_93;
          }
        }
      }
      uint64_t v79 = 0;
LABEL_93:
      *(void *)(a6 + 8 * v59++) = v79;
      if (v59 == 10) {
        goto LABEL_96;
      }
    }
  }
  uint64_t v16 = 2229280775;
  int v17 = "Data Corrupt: Offset out of map file, %lu + %hu > %lu\n";
LABEL_6:
  MFS__log_select_Error(a1, 58012, (uint64_t)v17, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t mfs_ParamMap_UnMapSection(uint64_t result)
{
  uint64_t v1 = result;
  for (uint64_t i = 0; i != 160; i += 16)
  {
    uint64_t v3 = v1 + i;
    uint64_t v4 = *(void *)(v1 + i + 2296);
    if (v4)
    {
      uint64_t result = brk_DataUnmap(*(void *)(*(void *)(v1 + 1928) + 24), *(void *)(v3 + 2288), v4);
      *(void *)(v3 + 2296) = 0;
    }
  }
  return result;
}

uint64_t mfs_ParamMap_GetAcousticVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v12 = *(void *)(a2 + 1072);
  v67[0] = 0;
  v67[1] = 0;
  uint64_t v66 = v67;
  mfs_getUnitDataFromMfsData((unsigned __int8 *)a2, a4, (uint64_t *)&v66);
  int v14 = *(_DWORD *)(a3 + 2064);
  if (v14 == 1)
  {
    uint64_t v16 = *(uint64_t **)(a3 + 2040);
    if (v16 && (uint64_t v17 = *(unsigned int *)(a3 + 2068), v17 != 20000))
    {
      uint64_t v19 = *v16;
    }
    else
    {
      uint64_t v15 = 2229280778;
      uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), 20000, 8);
      if (!v18) {
        return v15;
      }
      uint64_t v19 = v18;
      uint64_t v20 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 16);
      if (!v20) {
        goto LABEL_34;
      }
      uint64_t v17 = 0;
      *uint64_t v20 = v19;
      v20[1] = *(void *)(a3 + 2040);
      *(void *)(a3 + 2040) = v20;
      *(_DWORD *)(a3 + 2068) = 0;
    }
    uint64_t v15 = mfs_ParamMap_MapSection(a1, a2, a3, a4, (uint64_t)v66, a5, (uint64_t)a6, v13);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    uint64_t v25 = v19 + 8 * v17;
    uint64_t v26 = *((int *)v66 + 1);
    int v27 = *a6;
    int v28 = v26 + *((unsigned __int16 *)v66 + 4) - 1;
    uint64_t v29 = *(void *)(a2 + 2096);
    *(_WORD *)(v25 + 4) = *(_WORD *)(v29 + 2 * v26);
    *(_WORD *)(v25 + 6) = *(_WORD *)(v29 + 2 * v28);
    int v30 = *(float **)(a5 + 16);
    float v31 = *v30;
    float v32 = *v30;
    if (v27 >= 2) {
      float v32 = v30[v27 - 1];
    }
    if (v31 <= 0.0)
    {
      char v33 = 1;
    }
    else
    {
      char v33 = 0;
      float v34 = *(float *)(v12 + 8672);
      if (v31 < v34) {
        float v31 = *(float *)(v12 + 8672);
      }
      if (v31 > *(float *)(v12 + 8712)) {
        float v31 = *(float *)(v12 + 8712);
      }
      *(unsigned char *)(v19 + 8 * v17 + 2) = (float)((float)((float)(v31 - v34) * *(float *)(v12 + 8752)) + 0.5);
    }
    *(unsigned char *)uint64_t v25 = v33;
    if (v32 <= 0.0)
    {
      char v51 = 1;
    }
    else
    {
      char v51 = 0;
      float v52 = *(float *)(v12 + 8672);
      if (v32 < v52) {
        float v32 = *(float *)(v12 + 8672);
      }
      if (v32 > *(float *)(v12 + 8712)) {
        float v32 = *(float *)(v12 + 8712);
      }
      *(unsigned char *)(v19 + 8 * v17 + 3) = (float)((float)((float)(v32 - v52) * *(float *)(v12 + 8752)) + 0.5);
    }
    *(unsigned char *)(v19 + 8 * v17 + 1) = v51;
    *(void *)(*(void *)(a3 + 2048) + 8 * (int)a4) = v25;
LABEL_57:
    ++*(_DWORD *)(a3 + 2068);
    return v15;
  }
  if (v14 != 2)
  {
    int v21 = *(uint64_t **)(a3 + 2024);
    if (v21)
    {
      unsigned int v22 = *(_DWORD *)(a3 + 2068);
      if (v22 != 20000)
      {
        uint64_t v19 = *v21;
LABEL_25:
        unsigned int v64 = v22;
        uint64_t v65 = v19;
        uint64_t v35 = v19 + 24 * v22;
        *(_DWORD *)(v35 + 8) = 0;
        float v36 = (_DWORD *)(v35 + 8);
        uint64_t v63 = (_DWORD *)v35;
        *(_DWORD *)(v35 + 4) = 0;
        int v37 = (_DWORD *)(v35 + 4);
        uint64_t v15 = mfs_ParamMap_MapSection(a1, a2, a3, a4, (uint64_t)v66, a5, (uint64_t)a6, v13);
        if ((v15 & 0x80000000) != 0) {
          return v15;
        }
        uint64_t v38 = *((int *)v66 + 1);
        int v39 = v38 + *((unsigned __int16 *)v66 + 4) - 1;
        uint64_t v40 = *(void *)(a2 + 2096);
        int v41 = *(unsigned __int16 *)(v40 + 2 * v38);
        unsigned int v42 = *(float **)(a5 + 16);
        float v43 = *v42;
        float v44 = *v42;
        if (*a6 >= 2) {
          float v44 = v42[*a6 - 1];
        }
        unsigned int v45 = *v36 & 0xFFFFC003;
        int v46 = *(unsigned __int16 *)(v40 + 2 * v39);
        unsigned int v47 = *v37 & 0xFFFFC003 | (4 * v41);
        if (v43 <= 0.0)
        {
          int v53 = v47 | 2;
          *int v37 = v53;
          unsigned int v50 = v64;
          if (!*(_DWORD *)(v12 + 8392)) {
            goto LABEL_45;
          }
          unsigned int v49 = v53 & 0xFF803FFF | (*(_DWORD *)(v12 + 8396) << 14);
        }
        else
        {
          float v48 = *(float *)(v12 + 8672);
          if (v43 < v48) {
            float v43 = *(float *)(v12 + 8672);
          }
          if (v43 > *(float *)(v12 + 8712)) {
            float v43 = *(float *)(v12 + 8712);
          }
          unsigned int v49 = v47 & 0xFF803FFD | ((float)((float)((float)(v43 - v48) * *(float *)(v12 + 8752)) + 0.5) << 14);
          unsigned int v50 = v64;
        }
        *int v37 = v49;
LABEL_45:
        int v54 = v45 | (4 * v46);
        if (v44 <= 0.0)
        {
          int v59 = v54 | 2;
          _DWORD *v36 = v59;
          uint64_t v57 = v65;
          uint64_t v58 = v63;
          if (!*(_DWORD *)(v12 + 8392))
          {
LABEL_56:
            int v60 = *(_DWORD *)(a3 + 2060) & a4;
            *uint64_t v58 = a4;
            uint64_t v61 = *(void *)(a3 + 2032);
            *(void *)(v57 + 24 * v50 + 16) = *(void *)(v61 + 8 * v60);
            *(void *)(v61 + 8 * v60) = v58;
            goto LABEL_57;
          }
          unsigned int v56 = v59 & 0xFF803FFF | (*(_DWORD *)(v12 + 8396) << 14);
        }
        else
        {
          float v55 = *(float *)(v12 + 8672);
          if (v44 < v55) {
            float v44 = *(float *)(v12 + 8672);
          }
          if (v44 > *(float *)(v12 + 8712)) {
            float v44 = *(float *)(v12 + 8712);
          }
          unsigned int v56 = v54 & 0xFF803FFD | ((float)((float)((float)(v44 - v55) * *(float *)(v12 + 8752)) + 0.5) << 14);
          uint64_t v57 = v65;
          uint64_t v58 = v63;
        }
        _DWORD *v36 = v56;
        goto LABEL_56;
      }
    }
    uint64_t v15 = 2229280778;
    uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), 20000, 24);
    if (!v23) {
      return v15;
    }
    uint64_t v19 = v23;
    int v24 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 16);
    if (v24)
    {
      unsigned int v22 = 0;
      *int v24 = v19;
      v24[1] = *(void *)(a3 + 2024);
      *(void *)(a3 + 2024) = v24;
      *(_DWORD *)(a3 + 2068) = 0;
      goto LABEL_25;
    }
LABEL_34:
    heap_Free(*(void **)(a1 + 8), v19);
    return v15;
  }
  return mfs_ParamMap_MapSection(a1, a2, a3, a4, (uint64_t)v66, a5, (uint64_t)a6, v13);
}

uint64_t mfs_Stub_ParamMap_GetAcousticVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int *a7)
{
  uint64_t v14 = *(void *)(a2 + 1072);
  v46[0] = 0;
  v46[1] = 0;
  unsigned int v45 = v46;
  mfs_getUnitDataFromMfsData((unsigned __int8 *)a2, a4, (uint64_t *)&v45);
  if (!*(void *)(a2 + 2104)) {
    return mfs_ParamMap_GetAcousticVector(a1, a2, a3, a4, a5, a7);
  }
  uint64_t v15 = *((unsigned int *)v45 + 1);
  unsigned int v16 = *a7;
  unsigned int v17 = *((unsigned __int16 *)v45 + 4);
  if (!*a7)
  {
    *a7 = v17;
    unsigned int v16 = v17;
  }
  unsigned int v44 = v17;
  if (a6 == 1)
  {
    if (v15) {
      int v18 = v15 - 1;
    }
    else {
      int v18 = 0;
    }
    v16 += 2;
    *a7 = v16;
  }
  else
  {
    int v18 = v15;
  }
  uint64_t v19 = 2229280778;
  if (*(_DWORD *)(a3 + 2536) < v16)
  {
    uint64_t v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a3 + 2464), 4 * (int)(v16 + 50));
    *(void *)(a3 + 2464) = v20;
    if (!v20) {
      return v19;
    }
    *(_DWORD *)(a3 + 2536) = *a7 + 50;
    unsigned int v16 = *a7;
  }
  if (v16)
  {
    uint64_t v21 = 0;
    int v22 = *(_DWORD *)(v14 + 8396);
    uint64_t v23 = *(void *)(a2 + 2104);
    uint64_t v24 = *(void *)(a3 + 2464);
    do
    {
      unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * (v18 + v21));
      float v26 = -1.0e10;
      if (v22 != v25) {
        float v26 = (float)((float)v25 / *(float *)(v14 + 8752)) + *(float *)(v14 + 8672);
      }
      *(float *)(v24 + 4 * v21++) = v26;
    }
    while (v16 != v21);
  }
  else
  {
    uint64_t v24 = *(void *)(a3 + 2464);
  }
  *(void *)(a5 + 16) = v24;
  int v27 = *(uint64_t **)(a3 + 2024);
  if (v27 && (unsigned int v28 = *(_DWORD *)(a3 + 2068), v28 != 20000))
  {
    uint64_t v30 = *v27;
  }
  else
  {
    uint64_t v29 = heap_Calloc(*(void **)(a1 + 8), 20000, 24);
    if (!v29) {
      return v19;
    }
    uint64_t v30 = v29;
    float v31 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 16);
    if (!v31)
    {
      heap_Free(*(void **)(a1 + 8), v30);
      return v19;
    }
    unsigned int v28 = 0;
    *float v31 = v30;
    v31[1] = *(void *)(a3 + 2024);
    *(void *)(a3 + 2024) = v31;
    *(_DWORD *)(a3 + 2068) = 0;
  }
  unsigned int v32 = v15 + v44 - 1;
  char v33 = (_DWORD *)(v30 + 24 * v28);
  uint64_t v34 = *(void *)(a2 + 2096);
  uint64_t v35 = *(void *)(a2 + 2104);
  int v36 = *(unsigned __int16 *)(v35 + 2 * v32);
  int v37 = (4 * (*(_WORD *)(v34 + 2 * v32) & 0xFFF)) | (v36 << 14);
  v33[2] = v37;
  int v38 = *(unsigned __int16 *)(v35 + 2 * v15);
  int v39 = (4 * (*(_WORD *)(v34 + 2 * v15) & 0xFFF)) | (v38 << 14);
  v33[1] = v39;
  int v40 = *(_DWORD *)(v14 + 8396);
  if (v40 == v38) {
    v33[1] = v39 | 2;
  }
  if (v40 == v36) {
    v33[2] = v37 | 2;
  }
  uint64_t v19 = 0;
  int v41 = *(_DWORD *)(a3 + 2060) & a4;
  *char v33 = a4;
  uint64_t v42 = *(void *)(a3 + 2032);
  *(void *)(v30 + 24 * v28 + 16) = *(void *)(v42 + 8 * v41);
  *(void *)(v42 + 8 * v41) = v33;
  *(_DWORD *)(a3 + 2068) = v28 + 1;
  return v19;
}

uint64_t fastallo_AllocateMemoryFromChunk(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a1 + 10);
  if (v6 >= a2)
  {
    uint64_t result = *(void *)(a1 + 32);
    goto LABEL_10;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (*(_WORD *)(a1 + 10))
  {
    uint64_t v9 = a1 + ((v6 + 7) & 0x1FFF8);
    uint64_t v10 = *(void **)(a1 + 32);
    void *v10 = *(void *)(v9 + 40);
    *(void *)(v9 + 40) = v10;
  }
  if (v8 >= v7)
  {
    unsigned int v11 = v7 + 64;
    uint64_t result = heap_Realloc(*(uint64_t **)a1, *(void *)(a1 + 24), 8 * (v7 + 64));
    if (!result)
    {
LABEL_11:
      int v13 = -2065686518;
      goto LABEL_12;
    }
    *(_DWORD *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = result;
  }
  uint64_t result = heap_Alloc(*(void *)a1, *(unsigned __int16 *)(a1 + 8));
  if (!result) {
    goto LABEL_11;
  }
  *(void *)(*(void *)(a1 + 24) + 8 * v8) = result;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 8) >> 3;
LABEL_10:
  int v13 = 0;
  *(_WORD *)(a1 + 10) = v6 - a2;
  *(void *)(a1 + 32) = result + 8 * a2;
LABEL_12:
  *a3 = v13;
  return result;
}

void fastallo_Init(_WORD *a1, uint64_t a2, __int16 a3)
{
  a1[4] = a3;
  *(void *)a1 = a2;
}

void *fastallo_Terminate(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 3);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t result = heap_Free((void *)*v1, *(void *)(v1[3] + v3));
      v3 += 8;
    }
    while (v4 != v3);
  }
  uint64_t v5 = v1[3];
  if (v5)
  {
    unsigned int v6 = (void *)*v1;
    return heap_Free(v6, v5);
  }
  return result;
}

uint64_t fastallo_GetUsedMemory(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) * *(unsigned __int16 *)(a1 + 8) + 8 * *(_DWORD *)(a1 + 16);
}

uint64_t mfs_Psola_CalculateAdjustments(int *a1, uint64_t a2)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  uint64_t v4 = 2229280778;
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *((void *)a1 + 134);
  uint64_t v7 = a2 + 2248;
  int AccPhrType = accphr_getAccPhrType(a2 + 2248);
  int v145 = *(_DWORD *)(v6 + 24);
  unsigned int v151 = 0;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v152 = 0u;
  uint64_t v9 = heap_Calloc(*(void **)(v5 + 8), (*a1 * *(_DWORD *)(a2 + 608)), 4);
  if (!v9) {
    return v4;
  }
  uint64_t v10 = (_DWORD *)v9;
  uint64_t v11 = heap_Calloc(*(void **)(v5 + 8), (*a1 * *(_DWORD *)(a2 + 608)), 4);
  if (!v11)
  {
    uint64_t v35 = (uint64_t)v10;
    goto LABEL_228;
  }
  int v137 = AccPhrType;
  unsigned int v144 = -2065686518;
  uint64_t v12 = (int *)(v6 + 25184);
  int v13 = *(_DWORD *)(a2 + 608);
  LODWORD(v14) = *a1;
  uint64_t v15 = (*a1 * v13);
  unsigned int v16 = (_DWORD *)v11;
  if ((*(_DWORD *)(v6 + 25184) & 0xFFFFFFFE) == 2 && (int v17 = *(_DWORD *)(a2 + 32), v17 >= 1))
  {
    uint64_t v18 = 0;
    int v19 = 0;
    uint64_t v20 = *(void *)(a2 + 24);
    do
    {
      if (*(_DWORD *)(v20 + 1528 * v18 + 1480)) {
        BOOL v21 = v13 < 1;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        uint64_t v22 = 0;
        int v23 = 0;
        uint64_t v24 = *(void *)(a2 + 600);
        do
        {
          if ((int)v14 >= 1)
          {
            uint64_t v25 = 0;
            uint64_t v26 = *(void *)(v24 + 528 * v22 + 328) + 8;
            do
            {
              int v27 = *(_DWORD *)(v26 + 4 * v25);
              v10[v23 + v25] = v27;
              v19 += v27;
              uint64_t v14 = *a1;
              uint64_t v28 = v25 + 2;
              ++v25;
            }
            while (v28 <= v14);
            v23 += v25;
            int v13 = *(_DWORD *)(a2 + 608);
          }
          ++v22;
        }
        while (v22 < v13);
        int v17 = *(_DWORD *)(a2 + 32);
      }
      ++v18;
    }
    while (v18 < v17);
  }
  else
  {
    int v19 = 0;
  }
  uint64_t v29 = heap_Calloc(*(void **)(v5 + 8), v15, 40);
  *(void *)(a2 + 2656) = v29;
  if (!v29 || (uint64_t v141 = heap_Calloc(*(void **)(v5 + 8), v15, 4)) == 0)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    goto LABEL_222;
  }
  uint64_t v139 = heap_Calloc(*(void **)(v5 + 8), v15, 4);
  if (!v139)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    v140 = 0;
    uint64_t v36 = v141;
    goto LABEL_221;
  }
  int v30 = *v12;
  if (*v12 == 2)
  {
    if (!*(_DWORD *)(v6 + 25188))
    {
      uint64_t v32 = 0;
      uint64_t v36 = v139;
      int v37 = v145;
      goto LABEL_72;
    }
    uint64_t v31 = heap_Calloc(*(void **)(v5 + 8), v15, 1);
    if (!v31)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      v140 = 0;
      uint64_t v36 = v139;
      goto LABEL_220;
    }
    uint64_t v32 = v31;
    int v30 = *v12;
  }
  else
  {
    uint64_t v32 = 0;
  }
  int v37 = v145;
  if (v30 == 3)
  {
    uint64_t v142 = v32;
    v140 = (_DWORD *)heap_Calloc(*(void **)(v5 + 8), v19, 4);
    if (v140)
    {
      if (v19 >= 1)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          float v39 = *(float *)(*(void *)(a2 + 2648) + i * 4);
          if (v39 < 70.0 || v39 > 450.0) {
            float v39 = 1000.0;
          }
          *(float *)&v140[i] = v39;
        }
      }
      uint64_t v36 = v139;
      uint64_t v135 = (_DWORD *)heap_Calloc(*(void **)(v5 + 8), v15, 4);
      if (v135)
      {
        uint64_t v134 = heap_Calloc(*(void **)(v5 + 8), v15, 4);
        if (!v134)
        {
          uint64_t v34 = 0;
          uint64_t v32 = v142;
          uint64_t v33 = (uint64_t)v135;
          goto LABEL_218;
        }
        uint64_t v32 = v142;
        if ((int)v15 < 1) {
          goto LABEL_76;
        }
        uint64_t v41 = 0;
        while (v41)
        {
          uint64_t v42 = &v16[v41];
          uint64_t v43 = *(v42 - 1);
          int v44 = v10[v41];
          int v45 = v44 + v43;
          *uint64_t v42 = v44 + v43;
          v135[v41] = v140[v43];
          int v46 = (float *)(v134 + 4 * v41);
          *int v46 = *(float *)&v140[(v44 + v43 - 1)];
          float v47 = *(float *)&v135[v41];
          if (v47 == 1000.0)
          {
            uint64_t v48 = v10[v41];
            uint64_t v49 = 1;
            if (v48 >= 2)
            {
              while (*(float *)&v140[(v43 + v49)] == 1000.0)
              {
                if (v48 == ++v49) {
                  goto LABEL_67;
                }
              }
            }
            if (v49 == v48) {
              goto LABEL_67;
            }
            float v47 = *(float *)&v140[(v49 + v43)];
            *(float *)&v135[v41] = v47;
          }
          if (v47 != 1000.0 && *v46 == 1000.0)
          {
            uint64_t v53 = v10[v41];
            if (v53 < 2)
            {
              int v56 = 1;
            }
            else
            {
              uint64_t v54 = 0;
              int v55 = v43 + v44 - 2;
              while (*(float *)&v140[(v55 + v54)] == 1000.0)
              {
                if (1 - v53 == --v54) {
                  goto LABEL_67;
                }
              }
              int v56 = 1 - v54;
            }
            if (v56 != v53)
            {
              int v52 = v45 + ~v56;
              char v51 = v140;
              goto LABEL_54;
            }
          }
LABEL_67:
          v10[v41++] *= v145;
          if (v41 == v15) {
            goto LABEL_76;
          }
        }
        int v50 = *v10;
        *unsigned int v16 = *v10;
        char v51 = v140;
        *uint64_t v135 = *v140;
        int v52 = v50 - 1;
        int v46 = (float *)v134;
LABEL_54:
        *int v46 = *(float *)&v51[v52];
        goto LABEL_67;
      }
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      v140 = 0;
      uint64_t v36 = v139;
    }
    uint64_t v32 = v142;
    goto LABEL_218;
  }
  if (v30 != 2)
  {
    uint64_t v134 = 0;
    uint64_t v135 = 0;
    v140 = 0;
    uint64_t v36 = v139;
    goto LABEL_76;
  }
  uint64_t v36 = v139;
LABEL_72:
  if ((int)v15 >= 1)
  {
    uint64_t v57 = v10;
    do
    {
      *v57++ *= v37;
      --v15;
    }
    while (v15);
  }
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  v140 = 0;
LABEL_76:
  int v58 = v137;
  unint64_t v131 = (v137 - 1);
  uint64_t v136 = v5;
  uint64_t v143 = v32;
  if (v137 < 1)
  {
    unsigned int v144 = 0;
    goto LABEL_186;
  }
  uint64_t v132 = v16;
  uint64_t v59 = 0;
  unsigned int v144 = 0;
  v138 = (int *)(v6 + 25184);
  uint64_t v60 = v141;
  do
  {
    char v150 = 0;
    uint64_t v148 = 0;
    uint64_t v149 = 0;
    unsigned int v147 = 0;
    mfs_SegmentList_Get(v7, v59, &v147, &v150, (_DWORD *)&v149 + 1, &v149, (_DWORD *)&v148 + 1, &v148);
    uint64_t v61 = (unsigned int *)(*(void *)(a2 + 2656) + 40 * v59);
    *uint64_t v61 = v147;
    v61[1] = HIDWORD(v149);
    v61[2] = v149;
    if (v143) {
      *(unsigned char *)(v143 + v59) = v150;
    }
    if (v147 == -1)
    {
      unsigned int v63 = 1000;
      *(_DWORD *)(v60 + 4 * v59) = 1000;
    }
    else
    {
      unsigned int v151 = 0;
      if ((*(_DWORD *)(v6 + 8968) - 7) > 4) {
        unsigned int AcousticVector = mfs_ParamMap_GetAcousticVector(v5, (uint64_t)a1, a2, v147, (uint64_t)&v152, (int *)&v151);
      }
      else {
        unsigned int AcousticVector = mfs_Stub_ParamMap_GetAcousticVector(v5, (uint64_t)a1, a2, v147, (uint64_t)&v152, 0, (int *)&v151);
      }
      unsigned int v144 = AcousticVector;
      if ((AcousticVector & 0x80000000) != 0)
      {
        unsigned int v16 = v132;
        uint64_t v12 = v138;
        uint64_t v32 = v143;
        goto LABEL_217;
      }
      uint64_t v64 = v6;
      unint64_t v65 = v151;
      if ((int)v151 < 1) {
        goto LABEL_94;
      }
      unint64_t v66 = 0;
      uint64_t v67 = v153;
      do
        unsigned int v68 = (exp(*(float *)(v67 + 4 * v66++)) + 0.5);
      while (v68 <= 0x45 && v66 < v65);
      uint64_t v60 = v141;
      if (v68 <= 0x45) {
LABEL_94:
      }
        unsigned int v68 = 1000;
      *(_DWORD *)(v60 + 4 * v59) = v68;
      unint64_t v70 = v151;
      if ((int)v151 < 1) {
        goto LABEL_103;
      }
      uint64_t v71 = v153;
      signed int v72 = v151 - 1;
      unint64_t v73 = 1;
      do
        unsigned int v63 = (exp(*(float *)(v71 + 4 * v72--)) + 0.5);
      while (v63 <= 0x45 && v73++ < v70);
      uint64_t v5 = v136;
      uint64_t v60 = v141;
      if (v63 <= 0x45) {
LABEL_103:
      }
        unsigned int v63 = 1000;
      uint64_t v6 = v64;
      uint64_t v12 = v138;
      uint64_t v36 = v139;
    }
    *(_DWORD *)(v36 + 4 * v59++) = v63;
  }
  while (v59 != v137);
  unint64_t v75 = 0;
  uint64_t v76 = *(int32x2_t **)(a2 + 2656);
  uint64_t v77 = v76 + 5;
  int v58 = v137;
  do
  {
    if (v75)
    {
      __int32 v78 = v77[-5].i32[0];
      v77[-1].i32[0] = v77[-10].i32[0] + 1 == v78;
      v77[-1].i32[1] = v75 < v131 && v78 + 1 == v77->i32[0];
    }
    else
    {
      v76[4] = (int32x2_t)0x100000000;
    }
    v77[-2] = vsub_s32((int32x2_t)vand_s8((int8x8_t)vceqz_s32(v77[-1]), (int8x8_t)0x6400000064), vtst_s32(v77[-1], v77[-1]));
    ++v75;
    v77 += 5;
  }
  while (v137 != v75);
  uint64_t v79 = 0;
  uint64_t v80 = *(void *)(a2 + 2656);
  int v81 = 1000;
  int v82 = 1000;
  int v83 = 1000;
  do
  {
    if (!v79)
    {
LABEL_128:
      int v97 = 1000;
      int v98 = 1000;
      int v99 = 1000;
      goto LABEL_181;
    }
    uint64_t v84 = v80 + 40 * v79;
    int v87 = *(_DWORD *)(v84 - 40);
    uint64_t v86 = (_DWORD *)(v84 - 40);
    int v85 = v87;
    if (v87 == -1 || v79 == v131)
    {
      int v91 = 1000;
      int v89 = 1000;
      int v90 = 1000;
      if (v85 == -1) {
        goto LABEL_122;
      }
    }
    else
    {
      int v91 = *(_DWORD *)(v60 + 4 * v79 + 4);
    }
    int v89 = *(_DWORD *)(v60 + 4 * v79);
    int v90 = *(_DWORD *)(v36 + 4 * v79);
LABEL_122:
    int v92 = *(_DWORD *)(v80 + 40 * v79);
    if (v92 == -1) {
      goto LABEL_128;
    }
    uint64_t v93 = v79 - 1;
    int v94 = *v12;
    if ((*v12 - 1) > 1)
    {
      if (v94 != 3) {
        goto LABEL_176;
      }
      if (v89 == 1000)
      {
        int v83 = 1000;
      }
      else
      {
        float v102 = *(float *)&v135[v79];
        if (v102 == 1000.0)
        {
          int v83 = 1000;
          int v89 = 1000;
        }
        else
        {
          float v104 = *(float *)(v134 + 4 * v93);
          if (v104 == 1000.0) {
            int v83 = (int)v102;
          }
          else {
            int v83 = (int)(float)(v102 + v104) / 2;
          }
        }
      }
      if (v90 != 1000)
      {
        float v105 = *(float *)(v134 + 4 * v79);
        if (v105 != 1000.0)
        {
          float v118 = *(float *)&v135[v79 + 1];
          int v82 = (int)v105;
          if (v118 != 1000.0) {
            int v82 = (int)(float)(v105 + v118) / 2;
          }
LABEL_156:
          uint64_t v106 = *a1;
          int v107 = (int)v79 / (int)v106 * v106;
          int v108 = (int)v79 % (int)v106;
          int v109 = *(_DWORD *)(v80 + 40 * ((int)v106 - 1 + v107));
          int v110 = v106 - 1 + *(_DWORD *)(v80 + 40 * v107);
          LODWORD(v111) = *a1;
          if (v109 != v110)
          {
            if ((int)v106 <= 0)
            {
              BOOL v112 = 0;
              goto LABEL_168;
            }
            uint64_t v111 = 0;
            while (*(_DWORD *)(v80 + 40 * ((int)v79 - v108 + (int)v111) + 8) != v145)
            {
              if (v106 == ++v111)
              {
                LODWORD(v111) = *a1;
                break;
              }
            }
          }
          BOOL v112 = v111 == v106;
          if ((int)v106 >= 1)
          {
            int v113 = 0;
            unsigned int v114 = 0;
            int v115 = v79 - v108;
            do
            {
              v114 += v10[v115];
              v113 += *(_DWORD *)(v80 + 40 * v115++ + 8);
              --v106;
            }
            while (v106);
            if (v113)
            {
              int v81 = (int)((double)v114 * 1000.0 / (double)v113);
LABEL_169:
              if (v81 >= 1300) {
                int v116 = 1300;
              }
              else {
                int v116 = v81;
              }
              if (v116 <= 700) {
                int v116 = 700;
              }
              if (!v112) {
                int v81 = v116;
              }
              goto LABEL_176;
            }
          }
LABEL_168:
          int v81 = 1000;
          goto LABEL_169;
        }
        int v90 = 1000;
      }
      int v82 = 1000;
      goto LABEL_156;
    }
    int v83 = 1000;
    if (v89 == 1000)
    {
      int v96 = 1000;
    }
    else
    {
      int v95 = *(_DWORD *)(v36 + 4 * v93);
      int v96 = 1000;
      if (v95 != 1000)
      {
        if (v92 == *v86 + 1)
        {
          int v83 = 1000;
        }
        else
        {
          int v100 = v95 + v89;
          if (v95 + v89 < 0 != __OFADD__(v95, v89)) {
            ++v100;
          }
          int v83 = v100 >> 1;
          int v96 = v89;
        }
      }
    }
    int v82 = 1000;
    if (v90 == 1000) {
      goto LABEL_140;
    }
    int v101 = 1000;
    if (v91 != 1000)
    {
      if (*(_DWORD *)(v80 + 40 * v79 + 40) != v92 + 1)
      {
        int v103 = v90 + v91;
        if (v90 + v91 < 0 != __OFADD__(v90, v91)) {
          ++v103;
        }
        int v82 = v103 >> 1;
        int v101 = v90;
        goto LABEL_146;
      }
      int v82 = 1000;
LABEL_140:
      int v101 = 1000;
    }
LABEL_146:
    if ((v94 & 0xFFFFFFFE) == 2)
    {
      int v90 = v101;
      int v89 = v96;
      goto LABEL_156;
    }
    int v81 = 1000;
    int v90 = v101;
    int v89 = v96;
LABEL_176:
    int v97 = 1000 * v83 / v89;
    int v99 = v12[8];
    if (v81 < v99) {
      int v99 = v81;
    }
    if (v99 <= v12[7]) {
      int v99 = v12[7];
    }
    int v98 = 1000 * v82 / v90;
LABEL_181:
    long long v117 = (_DWORD *)(v80 + 40 * v79);
    v117[3] = v97;
    v117[4] = v98;
    v117[5] = v99;
    ++v79;
  }
  while (v79 != v137);
  unsigned int v16 = v132;
  uint64_t v32 = v143;
LABEL_186:
  if (*v12 == 2 && v12[1])
  {
    int v119 = *a1;
    int v120 = v58 + 1;
    if (v119 < v58 + 1 - v119)
    {
      v133 = v16;
      int v121 = 0;
      uint64_t v122 = v119;
      uint64_t v123 = 40 * v119 + 20;
      int v124 = *a1;
      int v146 = v58 + 1;
      while (1)
      {
        int v125 = (int)v122 / v119;
        if ((int)v122 % v119)
        {
          if (!v121) {
            goto LABEL_201;
          }
        }
        else
        {
          long long v126 = *(const char **)(*(void *)(v6 + 7616) + 8 * *(unsigned __int8 *)(v32 + v122));
          if (v126 && !strcmp(v126, "SIL"))
          {
            int v121 = 0;
            goto LABEL_210;
          }
          if (mfs_Ling_IsVowel(v6, *(void *)(a2 + 8), (int)v122 / v119))
          {
            int v124 = *a1;
          }
          else
          {
            if (!mfs_Ling_IsVowel(v6, *(void *)(a2 + 8), v125 - 1))
            {
              uint64_t v32 = v143;
              int v124 = *a1;
              v128 = *(const char **)(*(void *)(v6 + 7616) + 8 * *(unsigned __int8 *)(v143 - *a1 + v122));
              if (!v128) {
                goto LABEL_212;
              }
              if (strcmp(v128, "SIL"))
              {
LABEL_209:
                int v121 = 0;
                int v119 = v124;
LABEL_210:
                uint64_t v32 = v143;
LABEL_211:
                int v120 = v146;
                goto LABEL_201;
              }
            }
            unsigned int v127 = mfs_Ling_IsVowel(v6, *(void *)(a2 + 8), v125 + 1);
            int v124 = *a1;
            if (!v127)
            {
              uint64_t v32 = v143;
              v129 = *(const char **)(*(void *)(v6 + 7616) + 8 * *(unsigned __int8 *)(v143 + v124 + v122));
              if (!v129)
              {
LABEL_212:
                int v121 = 0;
                int v119 = v124;
                goto LABEL_211;
              }
              if (strcmp(v129, "SIL")) {
                goto LABEL_209;
              }
            }
          }
          int v121 = 1;
          uint64_t v32 = v143;
          int v120 = v146;
        }
        *(_DWORD *)(*(void *)(a2 + 2656) + v123) = 1000;
        int v119 = v124;
LABEL_201:
        ++v122;
        v123 += 40;
        if (v122 >= v120 - v119)
        {
          uint64_t v5 = v136;
          unsigned int v16 = v133;
          uint64_t v36 = v139;
          goto LABEL_217;
        }
      }
    }
    uint64_t v5 = v136;
  }
LABEL_217:
  uint64_t v34 = v134;
  uint64_t v33 = (uint64_t)v135;
LABEL_218:
  if (v32) {
    heap_Free(*(void **)(v5 + 8), v32);
  }
LABEL_220:
  heap_Free(*(void **)(v5 + 8), v141);
LABEL_221:
  heap_Free(*(void **)(v5 + 8), v36);
  uint64_t v35 = (uint64_t)v140;
LABEL_222:
  heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
  heap_Free(*(void **)(v5 + 8), (uint64_t)v16);
  if (*v12 != 3) {
    return v144;
  }
  uint64_t v4 = v144;
  if (v33) {
    heap_Free(*(void **)(v5 + 8), v33);
  }
  if (v34) {
    heap_Free(*(void **)(v5 + 8), v34);
  }
  if (v35) {
LABEL_228:
  }
    heap_Free(*(void **)(v5 + 8), v35);
  return v4;
}

float mfs_TCost_LF0_SLP_distance(float a1, float a2, float a3, float a4, float a5, float a6)
{
  float result = (float)((float)(a1 - a3) / a5) - (float)((float)(a2 - a4) / a6);
  if (result < 0.0) {
    return -result;
  }
  return result;
}

float mfs_TCost_LF0_BND_distance(float a1, float a2, float a3, float a4)
{
  if (a1 <= a2) {
    float v4 = a2;
  }
  else {
    float v4 = a1;
  }
  if (a3 <= a4) {
    float v5 = a4;
  }
  else {
    float v5 = a3;
  }
  float v6 = a1 - a2;
  if (v6 < 0.0) {
    float v6 = -v6;
  }
  float v7 = v6 / v4;
  float v8 = a3 - a4;
  float v9 = -(float)(a3 - a4);
  if (v8 < 0.0) {
    float v8 = v9;
  }
  return v7 + (float)(v8 / v5);
}

uint64_t mfs_TCost_Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  float v5 = (void *)(a3 + 160);
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 272) + *(_DWORD *)(a2 + 268);
  float v6 = 1.0 / (float)(*(float *)(a2 + 8004) + *(float *)(a2 + 8008));
  *(float *)(a3 + 4) = v6;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 8188);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a3 + 148) = *(_DWORD *)(a2 + 8008);
  *(_DWORD *)(a3 + 152) = *(_DWORD *)(a2 + 8004);
  float v7 = *(float *)(a2 + 8000);
  *(float *)(a3 + 156) = v7;
  *(float *)(a3 + 4) = v6 * v7;
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a3 + 96));
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a3 + 120));
  UNICORN__mfs_S32Vect_Init(a1, v5);
  int v8 = *(_DWORD *)(a3 + 12);
  if (v8 < 0) {
    return 2229280783;
  }
  *(float *)(a3 + 184) = 1.0 / (float)v8;
  *(unsigned char *)(a3 + 216) = 0;
  if (v8)
  {
    if (*(float *)(a3 + 152) > 0.0) {
      *(unsigned char *)(a3 + 216) = 1;
    }
  }
  uint64_t result = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  return result;
}

uint64_t mfs_FillTgtVect(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(_DWORD *)(v8 + 1528);
  int v10 = *(_DWORD *)(v8 + 3056);
  *(_DWORD *)(a3 + 144) = a4;
  uint64_t v11 = a3 + 96;
  UNICORN__mfs_S32Vect_Clear((void *)(a3 + 96));
  uint64_t result = UNICORN__mfs_F32Vect_Create(v11, a4);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v13 = a3 + 120;
  UNICORN__mfs_S32Vect_Clear((void *)(a3 + 120));
  uint64_t result = UNICORN__mfs_F32Vect_Create(a3 + 120, a4 + *(_DWORD *)a3 - 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v14 = v9;
  uint64_t v15 = *(void *)(a3 + 104);
  *(void *)(a3 + 24) = *(void *)(*(void *)(v8 + 1592) + 8 * v9);
  *(void *)(a3 + 32) = v15;
  if (a4 < 1)
  {
LABEL_21:
    uint64_t v24 = *(void *)(a2 + 24);
    *(_DWORD *)(v24 + 3056) = v10;
    *(_DWORD *)(v24 + 1528) = v9;
    return result;
  }
  char v16 = 0;
  int v17 = 0;
  float v18 = -1.0;
  float v19 = 1.0;
  while ((*(unsigned char *)(*(void *)(a2 + 48) + v14) & 4) == 0)
  {
    float v20 = -1.0e10;
    float v21 = 1.0;
    if ((v16 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = UNICORN__mfs_F32Vect_Pad(v11, v20);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    float v23 = sqrtf(v21);
    if (v18 != v21) {
      float v19 = v23;
    }
    uint64_t result = UNICORN__mfs_F32Vect_Pad(v13, v19);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v18 != v21) {
      float v18 = v21;
    }
    ++v14;
    ++v17;
    char v16 = 1;
    if (v17 == a4)
    {
      int v9 = v14;
      goto LABEL_21;
    }
  }
  float v20 = **(float **)(*(void *)(v8 + 3120) + 8 * v10);
  float v21 = **(float **)(*(void *)(v8 + 3160) + 8 * v10++);
  if (v16) {
    goto LABEL_13;
  }
LABEL_9:
  if (*(int *)(a1 + 268) < 1) {
    goto LABEL_13;
  }
  uint64_t v22 = 0;
  while (1)
  {
    uint64_t result = UNICORN__mfs_F32Vect_Pad(v13, sqrtf(*(float *)(*(void *)(*(void *)(v8 + 1632) + 8 * v14) + 4 * v22)));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (++v22 >= *(int *)(a1 + 268)) {
      goto LABEL_13;
    }
  }
}

void *mfs_TCost_Clear(void *a1)
{
  UNICORN__mfs_S32Vect_Clear(a1 + 12);
  UNICORN__mfs_S32Vect_Clear(a1 + 15);
  return UNICORN__mfs_S32Vect_Clear(a1 + 20);
}

float mfs_TCost_CandidateCostStream_Faster(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  float v5 = *(float **)(a1 + 32);
  float v6 = *(float **)(a3 + 16);
  int v7 = *(_DWORD *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 168);
  int v9 = v7 - a4;
  if (v7 <= a4)
  {
    int v10 = (uint64_t *)(a3 + 8);
    uint64_t v11 = (uint64_t *)(a1 + 24);
    float v12 = *(float *)(a2 + 4 * v7 + 24116) * (float)a4;
    int v9 = a4 - v7;
    uint64_t v13 = *(float **)(a1 + 32);
    uint64_t v14 = *(void *)(a3 + 16);
    unsigned int v15 = *(_DWORD *)(a1 + 144);
  }
  else
  {
    int v10 = (uint64_t *)(a1 + 24);
    uint64_t v11 = (uint64_t *)(a3 + 8);
    float v12 = *(float *)(a2 + 4 * a4 + 24116) * (float)v7;
    uint64_t v13 = *(float **)(a3 + 16);
    uint64_t v14 = *(void *)(a1 + 32);
    unsigned int v15 = a4;
  }
  float v16 = *(float *)(a1 + 152);
  float v17 = *(float *)(a1 + 184);
  uint64_t v18 = *v10;
  uint64_t v19 = *v11;
  if (v15)
  {
    uint64_t v20 = v15;
    float v21 = *(signed int **)(a1 + 168);
    float v22 = 0.0;
    float v23 = 0.0;
    do
    {
      signed int v24 = vcvtms_s32_f32(v12 * v22);
      *float v21 = v24;
      int v25 = *(_DWORD *)(a2 + 8928);
      if (v25 != 6)
      {
        float v26 = *(float *)(v14 + 4 * v24);
        BOOL v27 = v26 < 0.0;
        BOOL v28 = *v13 < 0.0 || v26 < 0.0;
        float v29 = *v13 - v26;
        if (v27 && *v13 < 0.0) {
          float v30 = 0.0;
        }
        else {
          float v30 = 4.7;
        }
        if (v28) {
          float v29 = v30;
        }
        float v23 = v23 + (float)(*(float *)(*(void *)(a1 + 128) + 4 * *(unsigned int *)(a1 + 8)) * (float)(v29 * v29));
      }
      float v22 = v22 + 1.0;
      ++v21;
      ++v13;
      --v20;
    }
    while (v20);
  }
  else
  {
    int v25 = *(_DWORD *)(a2 + 8928);
    float v23 = 0.0;
  }
  if (v25 == 6)
  {
    float v31 = *v5;
    float v32 = 0.01;
    if (*v5 < 0.0) {
      float v31 = 0.01;
    }
    float v33 = *v6;
    if (*v6 < 0.0) {
      float v33 = 0.01;
    }
    int v34 = v7 - 1;
    float v35 = v5[v7 - 1];
    if (v35 < 0.0) {
      float v35 = 0.01;
    }
    uint64_t v36 = a4 - 1;
    float v37 = v6[v36];
    if (v37 < 0.0) {
      float v37 = 0.01;
    }
    if (v34 < 0) {
      int v34 = v7;
    }
    float v38 = v5[v34 >> 1];
    if (v38 < 0.0) {
      float v38 = 0.01;
    }
    if ((int)v36 >= 0) {
      int v39 = a4 - 1;
    }
    else {
      int v39 = a4;
    }
    if (v6[v39 >> 1] >= 0.0) {
      float v32 = v6[v39 >> 1];
    }
    if (v31 <= v33) {
      float v40 = v33;
    }
    else {
      float v40 = v31;
    }
    if (v35 <= v37) {
      float v41 = v37;
    }
    else {
      float v41 = v35;
    }
    if (v38 <= v32) {
      float v42 = v32;
    }
    else {
      float v42 = v38;
    }
    float v43 = v31 - v33;
    if ((float)(v31 - v33) < 0.0) {
      float v43 = -(float)(v31 - v33);
    }
    float v44 = v43 / v40;
    float v45 = v35 - v37;
    if ((float)(v35 - v37) < 0.0) {
      float v45 = -(float)(v35 - v37);
    }
    float v46 = v44 + (float)(v45 / v41);
    float v47 = v38 - v32;
    if (v47 < 0.0) {
      float v47 = -v47;
    }
    float v48 = v46 + (float)(v47 / v42);
    float v49 = (float)((float)(v31 - v35) / (float)v7) - (float)((float)(v33 - v37) / (float)a4);
    if (v49 < 0.0) {
      float v49 = -v49;
    }
    float v50 = (float)(*(float *)(a2 + 8932) * v49) + (float)((float)(1.0 - *(float *)(a2 + 8932)) * v48);
    float v51 = *(float *)(a1 + 4) * *(float *)(a1 + 148);
  }
  else
  {
    float v50 = sqrtf(v23) * *(float *)(a1 + 148);
    float v51 = *(float *)(a1 + 4);
  }
  *(float *)(a5 + 8) = v51 * v50;
  *(_DWORD *)(a5 + 4) = 0;
  if (*(unsigned char *)(a1 + 216))
  {
    if (v15)
    {
      uint64_t v52 = 0;
      unsigned int v53 = 0;
      int v54 = *(_DWORD *)(a1 + 8);
      uint64_t v55 = *(unsigned int *)(a1 + 12);
      unint64_t v56 = v55 & 0xFFFFFFFC;
      float v57 = 0.0;
      do
      {
        unsigned int v58 = *(_DWORD *)(v8 + 4 * v52) * v54;
        if (v56)
        {
          unint64_t v59 = 0;
          uint64_t v60 = (float *)(*(void *)(a1 + 128) + 8);
          do
          {
            float v61 = *(float *)(v19 + 4 * (v53 + v59)) - *(float *)(v18 + 4 * (v58 + v59));
            float v62 = *(float *)(v19 + 4 * (v53 + v59 + 1))
                - *(float *)(v18 + 4 * (v58 + v59 + 1));
            float v63 = *(float *)(v19 + 4 * (v53 + v59 + 2))
                - *(float *)(v18 + 4 * (v58 + v59 + 2));
            float v64 = *(float *)(v19 + 4 * (v53 + v59 + 3))
                - *(float *)(v18 + 4 * (v58 + v59 + 3));
            float v65 = (float)(v61 * v61) * *(v60 - 2);
            float v66 = (float)(v62 * v62) * *(v60 - 1);
            float v67 = *v60;
            float v68 = v60[1];
            v60 += 4;
            float v57 = v57
                + (float)((float)((float)(v65 + v66) + (float)((float)(v63 * v63) * v67))
                        + (float)((float)(v64 * v64) * v68));
            v59 += 4;
          }
          while (v59 < v56);
          v53 += v59;
          v58 += v59;
        }
        else
        {
          LODWORD(v59) = 0;
        }
        if (v59 < v55)
        {
          int v69 = v55 + v53;
          unint64_t v70 = (float *)(*(void *)(a1 + 128) + 4 * v59);
          uint64_t v71 = v55 - v59;
          do
          {
            float v72 = *(float *)(v19 + 4 * v53++);
            float v73 = *(float *)(v18 + 4 * v58++);
            float v74 = *v70++;
            float v57 = v57 + (float)((float)((float)(v72 - v73) * (float)(v72 - v73)) * v74);
            --v71;
          }
          while (v71);
          unsigned int v53 = v69 - v59;
        }
        v53 += v54 - v55;
        ++v52;
      }
      while (v52 != v15);
    }
    else
    {
      float v57 = 0.0;
    }
    if (*(_DWORD *)(a2 + 8352) == 1) {
      float v76 = *(float *)(a1 + 152) * sqrtf(v57 * *(float *)(a1 + 184));
    }
    else {
      float v76 = (float)(v16 * v17) * sqrtf(v57);
    }
    float v75 = v76 + 0.0;
    *(float *)(a5 + 4) = v76 + 0.0;
  }
  else
  {
    float v75 = 0.0;
  }
  float v77 = (float)v9;
  *(float *)(a5 + 4) = *(float *)(a1 + 4) * v75;
  float v78 = *(float *)(a1 + 4) * *(float *)(a1 + 156);
  if (v25 == 6)
  {
    float v79 = (float)(v77 * 0.03) / (float)a4;
  }
  else
  {
    float v79 = v78 * v77;
    float v78 = 0.01;
  }
  float result = v79 * v78;
  *(float *)a5 = result;
  return result;
}

uint64_t mfs_TCost_CandidateCostStream_kld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v13 = *(float **)(a1 + 32);
  uint64_t v14 = *(float **)(a5 + 16);
  int v15 = *(_DWORD *)(a1 + 144);
  int v16 = v15 - a6;
  if (v15 <= a6)
  {
    float v17 = *(float *)(a3 + 4 * v15 + 24116) * (float)a6;
    int v16 = a6 - v15;
    uint64_t v18 = *(float **)(a1 + 32);
    uint64_t v19 = *(void *)(a5 + 16);
    int v20 = *(_DWORD *)(a1 + 144);
  }
  else
  {
    float v17 = *(float *)(a3 + 4 * a6 + 24116) * (float)v15;
    uint64_t v18 = *(float **)(a5 + 16);
    uint64_t v19 = *(void *)(a1 + 32);
    int v20 = a6;
  }
  if (v20 <= 0)
  {
    int v26 = *(_DWORD *)(a3 + 8928);
    float v24 = 0.0;
  }
  else
  {
    float v21 = *(signed int **)(a1 + 168);
    uint64_t v22 = v20;
    float v23 = 0.0;
    float v24 = 0.0;
    do
    {
      signed int v25 = vcvtms_s32_f32(v17 * v23);
      *float v21 = v25;
      int v26 = *(_DWORD *)(a3 + 8928);
      if (v26 != 6)
      {
        float v27 = *(float *)(v19 + 4 * v25);
        BOOL v28 = v27 < 0.0;
        BOOL v29 = *v18 < 0.0 || v27 < 0.0;
        float v30 = *v18 - v27;
        if (v28 && *v18 < 0.0) {
          float v31 = 0.0;
        }
        else {
          float v31 = 4.7;
        }
        if (v29) {
          float v30 = v31;
        }
        float v24 = v24 + (float)(*(float *)(*(void *)(a1 + 128) + 4 * *(unsigned int *)(a1 + 8)) * (float)(v30 * v30));
      }
      float v23 = v23 + 1.0;
      ++v18;
      ++v21;
      --v22;
    }
    while (v22);
  }
  if (v26 == 6)
  {
    float v32 = 0.01;
    if (*v13 >= 0.0) {
      float v33 = *v13;
    }
    else {
      float v33 = 0.01;
    }
    float v34 = *v14;
    if (*v14 < 0.0) {
      float v34 = 0.01;
    }
    float v35 = v13[v15 - 1];
    if (v35 < 0.0) {
      float v35 = 0.01;
    }
    uint64_t v36 = a6 - 1;
    float v37 = v14[v36];
    if (v37 < 0.0) {
      float v37 = 0.01;
    }
    if (*(_DWORD *)(a3 + 8280))
    {
      if (v33 <= v34) {
        float v38 = v34;
      }
      else {
        float v38 = v33;
      }
      if (v35 <= v37) {
        float v39 = v37;
      }
      else {
        float v39 = v35;
      }
      float v40 = v33 - v34;
      if ((float)(v33 - v34) < 0.0) {
        float v40 = -(float)(v33 - v34);
      }
      float v41 = v40 / v38;
      float v42 = v35 - v37;
      if ((float)(v35 - v37) < 0.0) {
        float v42 = -(float)(v35 - v37);
      }
      float v43 = v41 + (float)(v42 / v39);
      float v44 = (float)((float)(v33 - v35) / (float)v15) - (float)((float)(v34 - v37) / (float)a6);
      if (v44 < 0.0) {
        float v44 = -v44;
      }
      float v45 = (float)(v44 * *(float *)(a3 + 8932)) + (float)((float)(1.0 - *(float *)(a3 + 8932)) * v43);
    }
    else
    {
      float v47 = v13[(v15 - 1) / 2];
      if (v47 < 0.0) {
        float v47 = 0.01;
      }
      if ((int)v36 >= 0) {
        int v48 = a6 - 1;
      }
      else {
        int v48 = a6;
      }
      if (v14[v48 >> 1] >= 0.0) {
        float v32 = v14[v48 >> 1];
      }
      if (v33 <= v34) {
        float v49 = v34;
      }
      else {
        float v49 = v33;
      }
      if (v35 <= v37) {
        float v50 = v37;
      }
      else {
        float v50 = v35;
      }
      if (v47 <= v32) {
        float v51 = v32;
      }
      else {
        float v51 = v47;
      }
      float v52 = v33 - v34;
      if ((float)(v33 - v34) < 0.0) {
        float v52 = -(float)(v33 - v34);
      }
      float v53 = v52 / v49;
      float v54 = v35 - v37;
      if ((float)(v35 - v37) < 0.0) {
        float v54 = -(float)(v35 - v37);
      }
      float v55 = v53 + (float)(v54 / v50);
      float v56 = v47 - v32;
      if (v56 < 0.0) {
        float v56 = -v56;
      }
      float v57 = v55 + (float)(v56 / v51);
      float v58 = (float)((float)(v33 - v35) / (float)v15) - (float)((float)(v34 - v37) / (float)a6);
      if (v58 < 0.0) {
        float v58 = -v58;
      }
      float v45 = (float)(v58 * *(float *)(a3 + 8932)) + (float)((float)(1.0 - *(float *)(a3 + 8932)) * v57);
    }
    float v46 = v45 * (float)(*(float *)(a1 + 4) * *(float *)(a1 + 148));
  }
  else
  {
    float v46 = *(float *)(a1 + 4) * (float)(sqrtf(v24) * *(float *)(a1 + 148));
  }
  *(float *)(a10 + 8) = v46;
  *(_DWORD *)(a10 + 4) = 0;
  if (*(unsigned char *)(a1 + 216))
  {
    unsigned int v59 = *(unsigned __int16 *)(*(void *)(a2 + 12248) + 2 * a7);
    float v65 = 0.0;
    uint64_t result = mfs_kld_lookup(a2, a4, v59, a8, a9, &v65, a7, a8);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    float v61 = *(float *)(a10 + 4) + (float)(v65 * *(float *)(a1 + 152));
    *(float *)(a10 + 4) = v61;
    int v26 = *(_DWORD *)(a3 + 8928);
  }
  else
  {
    float v61 = 0.0;
  }
  float v62 = (float)v16;
  *(float *)(a10 + 4) = *(float *)(a1 + 4) * v61;
  float v63 = *(float *)(a1 + 4) * *(float *)(a1 + 156);
  if (v26 == 6) {
    float v64 = (float)((float)(v62 * 0.03) / (float)a6) * v63;
  }
  else {
    float v64 = (float)(v63 * v62) * 0.01;
  }
  uint64_t result = 0;
  *(float *)a10 = v64;
  return result;
}

float mfs_TCost_CandidateCost(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 144);
  if (v4 <= a4)
  {
    float v5 = (uint64_t *)(a3 + 8);
    float v6 = (uint64_t *)(a3 + 16);
    int v7 = (uint64_t *)(a1 + 24);
    uint64_t v8 = (uint64_t *)(a1 + 32);
    float v9 = *(float *)(a2 + 4 * v4 + 24116);
    float v10 = v9 * (float)a4;
    a4 = *(_DWORD *)(a1 + 144);
  }
  else
  {
    float v5 = (uint64_t *)(a1 + 24);
    float v6 = (uint64_t *)(a1 + 32);
    int v7 = (uint64_t *)(a3 + 8);
    uint64_t v8 = (uint64_t *)(a3 + 16);
    float v9 = *(float *)(a2 + 4 * a4 + 24116);
    float v10 = v9 * (float)v4;
  }
  uint64_t v11 = *v5;
  uint64_t v12 = *v7;
  if (a4 < 1)
  {
    float v18 = 0.0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = *v6;
    uint64_t v15 = *v8;
    uint64_t v16 = *(void *)(a1 + 168);
    uint64_t v17 = *(void *)(a1 + 128);
    float v18 = 0.0;
    do
    {
      signed int v19 = vcvtms_s32_f32(v10 * (float)(int)v13);
      *(_DWORD *)(v16 + 4 * v13) = v19;
      float v20 = *(float *)(v15 + 4 * v13);
      float v21 = *(float *)(v14 + 4 * v19);
      int v22 = v21 < 0.0;
      int v23 = v20 < 0.0;
      float v24 = v20 - v21;
      if (v23 != v22) {
        float v24 = 4.7;
      }
      if ((v22 & v23) != 0) {
        float v24 = 0.0;
      }
      float v18 = v18 + (float)(*(float *)(v17 + 4 * *(unsigned int *)(a1 + 8)) * (float)(v24 * v24));
      ++v13;
    }
    while (a4 != v13);
  }
  float v25 = sqrtf(v18) * *(float *)(a1 + 148);
  if (*(int *)(a1 + 12) >= 1)
  {
    float v26 = *(float *)(a1 + 152);
    if (v26 > 0.0)
    {
      if (a4 < 1)
      {
        float v31 = 0.0;
      }
      else
      {
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = a4;
        int v30 = *(_DWORD *)(a1 + 8);
        float v31 = 0.0;
        do
        {
          unsigned int v32 = v30 * *(_DWORD *)(*(void *)(a1 + 168) + 4 * v28);
          uint64_t v33 = *(unsigned int *)(a1 + 12);
          float v34 = *(float **)(a1 + 128);
          unsigned int v35 = v27;
          do
          {
            float v36 = *(float *)(v12 + 4 * v35) - *(float *)(v11 + 4 * v32);
            float v37 = *v34++;
            float v31 = v31 + (float)((float)(v36 * v36) * v37);
            ++v32;
            ++v35;
            --v33;
          }
          while (v33);
          ++v28;
          v27 += v30;
        }
        while (v28 != v29);
      }
      float v25 = v25 + (float)(v26 * (float)(sqrtf(v31) * *(float *)(a1 + 184)));
    }
  }
  return v9 * (float)(v10 * (float)(v25 * *(float *)(a1 + 4)));
}

uint64_t mfs_StateNGram_Load(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = 2229280772;
  float v5 = *(int **)(a3 + 8);
  if (v5)
  {
    float v6 = (int *)((char *)v5 + *(unsigned int *)(a3 + 16));
    if (a2 < 1)
    {
LABEL_7:
      if (v5 == v6) {
        return 0;
      }
      else {
        return 2229280772;
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1 + 48;
      while (v5 < v6)
      {
        int v11 = *v5;
        float v9 = v5 + 1;
        int v10 = v11;
        *(_DWORD *)(v8 + 4 * v7 - 40) = v11;
        if (v9 >= v6) {
          break;
        }
        *(void *)(v8 + 8 * v7) = v9;
        float v5 = &v9[v10 * v10];
        if ((a2 + 2) - 2 == ++v7) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

double mfs_StateNGram_DeInit(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t mfs_StateNGram_GetAlternatives(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  int v5 = *(_DWORD *)(a1 + 4 * a4);
  if (v5 <= a3 || v5 == 0 || v5 <= a2) {
    return 2229280775;
  }
  uint64_t v13 = a4;
  UNICORN__mfs_S32Vect_Clear(a5);
  int v14 = *(_DWORD *)(a1 + 4 * v13);
  if (a3 < 0) {
    float v15 = 0.0;
  }
  else {
    float v15 = *(float *)(*(void *)(a1 + 8 * v13 + 32) + 4 * (a2 + v14 * a3));
  }
  if (v14 < 1) {
    return 0;
  }
  int v16 = 0;
  uint64_t result = 0;
  do
  {
    float v17 = *(float *)(*(void *)(a1 + 8 * v13 + 32) + 4 * (a2 + v14 * v16));
    if (v17 > v15)
    {
      uint64_t result = mfs_S32Vect_Add((uint64_t)a5, v16);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v14 = *(_DWORD *)(a1 + 4 * v13);
      float v15 = v17;
    }
    ++v16;
  }
  while (v16 < v14);
  return result;
}

uint64_t readBytesIntoU32(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result = 0;
  uint64_t v5 = *a2;
  float v6 = (unsigned __int8 *)(a1 + v5);
  switch(a3)
  {
    case 1:
      goto LABEL_5;
    case 2:
      goto LABEL_4;
    case 3:
      goto LABEL_3;
    case 4:
      LODWORD(result) = v6[3] << 24;
LABEL_3:
      LODWORD(result) = result | (v6[2] << 16);
LABEL_4:
      LODWORD(result) = result | (v6[1] << 8);
LABEL_5:
      uint64_t result = result | *v6;
      *a2 = v5 + a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mfs_getUnitDataRecordSize_Obersee()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  unsigned int v1 = 0;
  readUnitDataAndAdvanceOffset((uint64_t)v3, (uint64_t)v2, &v1);
  return v1;
}

uint64_t readUnitDataAndAdvanceOffset(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *a3;
  int v4 = *(unsigned __int16 *)(result + v3) | (*(unsigned __int8 *)(result + v3 + 2) << 16);
  *a3 = v3 + 3;
  if (v4 == 0xFFFFFF) {
    int v4 = -1;
  }
  *(_DWORD *)a2 = v4;
  uint64_t v5 = *a3;
  int v6 = *(unsigned __int16 *)(result + v5) | (*(unsigned __int8 *)(result + v5 + 2) << 16);
  *a3 = v5 + 3;
  if (v6 == 0xFFFFFF) {
    int v7 = -1;
  }
  else {
    int v7 = v6;
  }
  *(_DWORD *)(a2 + 4) = v7;
  uint64_t v8 = *a3;
  int v9 = *(unsigned __int16 *)(result + v8) | (*(unsigned __int8 *)(result + v8 + 2) << 16);
  *a3 = v8 + 3;
  *(_DWORD *)(a2 + 8) = v9;
  uint64_t v10 = *a3;
  *(_WORD *)(a2 + 22) = *(_WORD *)(result + v10);
  *a3 = v10 + 3;
  *(unsigned char *)(a2 + 27) = *(unsigned char *)(result + (v10 + 2));
  unsigned int v11 = *(unsigned __int16 *)(result + (v10 + 3));
  *a3 = v10 + 5;
  unsigned int v12 = v11 << 8;
  if (v11 <= 0xFF) {
    unsigned int v12 = v11;
  }
  *(_DWORD *)(a2 + 12) = v12;
  uint64_t v13 = *a3;
  __int16 v14 = *(_WORD *)(result + v13);
  *a3 = v13 + 2;
  *(_WORD *)(a2 + 16) = v14;
  __int16 v15 = *(_WORD *)(result + (v13 + 2));
  *a3 = v13 + 4;
  *(_WORD *)(a2 + 18) = v15;
  __int16 v16 = *(_WORD *)(result + (v13 + 4));
  *a3 = v13 + 6;
  *(_WORD *)(a2 + 20) = v16;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

uint64_t mfs_getUnitData_Obersee(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == -1 || *(_DWORD *)(a1 + 1096) - 1 == a3)
  {
    uint64_t result = 0;
    *(void *)a4 = -1;
    *(_DWORD *)(a4 + 8) = -1;
    *(unsigned char *)(a4 + 28) = 0;
    *(void *)(a4 + 12) = 0;
    *(_DWORD *)(a4 + 20) = -65536;
    *(_DWORD *)(a4 + 24) = 65793;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 1072);
    if (*(_DWORD *)(v7 + 8332) == 1)
    {
      uint64_t v8 = *(void *)(a1 + 1896);
      int v9 = *(unsigned __int8 **)(a1 + 1872);
      uint64_t v10 = *(_DWORD **)(a1 + 1880);
      unsigned int v11 = *(_DWORD *)(a1 + 1888) * a3;
      unsigned int v25 = v11 >> 3;
      char v24 = v11 & 7;
      int v12 = readU32AndAdvanceOffsets(v8, *v9, &v24, &v25);
      *(_DWORD *)a4 = v12;
      int v13 = readU32AndAdvanceOffsets(v8, v9[1], &v24, &v25);
      *(_DWORD *)(a4 + 4) = v13;
      unsigned int v14 = readU32AndAdvanceOffsets(v8, v9[2], &v24, &v25);
      *(_DWORD *)(a4 + 8) = v14;
      *(_WORD *)(a4 + 22) = readU32AndAdvanceOffsets(v8, v9[3], &v24, &v25);
      *(unsigned char *)(a4 + 27) = readU32AndAdvanceOffsets(v8, v9[4], &v24, &v25);
      int v15 = readU32AndAdvanceOffsets(v8, v9[5], &v24, &v25);
      *(_DWORD *)(a4 + 12) = v15;
      *(_WORD *)(a4 + 16) = readU32AndAdvanceOffsets(v8, v9[6], &v24, &v25);
      *(_WORD *)(a4 + 18) = readU32AndAdvanceOffsets(v8, v9[7], &v24, &v25);
      *(_WORD *)(a4 + 20) = readU32AndAdvanceOffsets(v8, v9[8], &v24, &v25);
      *(unsigned char *)(a4 + 28) = 0;
      if (v12 == *v10) {
        *(_DWORD *)a4 = -1;
      }
      if (v13 == v10[1]) {
        *(_DWORD *)(a4 + 4) = -1;
      }
      if (v15 == v10[5]) {
        *(_DWORD *)(a4 + 12) = v15 << 8;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(v7 + 21704);
      int v23 = *(_DWORD *)(a1 + 1100) * a3;
      readUnitDataAndAdvanceOffset(v20, a4, &v23);
      unsigned int v14 = *(_DWORD *)(a4 + 8);
    }
    uint64_t result = mfs_symData_recoverCompactNFeatVect_Obersee(a1, a2, v14, 3, (uint64_t)&v21, v16, v17, v18);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *(unsigned char *)(a4 + 24) = v21;
      *(_WORD *)(a4 + 25) = v22;
    }
  }
  return result;
}

uint64_t mfs_getBeginEndPitch_Obersee(uint64_t a1, uint64_t a2, float *a3, float *a4)
{
  uint64_t v4 = *(void *)(a1 + 1072);
  if (a3)
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 18);
    if (v5 == 256) {
      float v6 = -1.0e10;
    }
    else {
      float v6 = (float)((float)v5 / *(float *)(v4 + 8752)) + *(float *)(v4 + 8672);
    }
    *a3 = v6;
  }
  if (a4)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v7 == 0x10000) {
      float v8 = -1.0e10;
    }
    else {
      float v8 = (float)((float)v7 / *(float *)(v4 + 8752)) + *(float *)(v4 + 8672);
    }
    *a4 = v8;
  }
  return 0;
}

uint64_t mfs_AllUnitCompData_Init_Obersee(void *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = a1[2833];
  *(void *)(a2 + 1872) = v4;
  *(void *)(a2 + 1880) = a1[2863];
  *(_DWORD *)(a2 + 1888) = 0;
  do
  {
    v3 += *(unsigned __int8 *)(v4 + v2);
    *(_DWORD *)(a2 + 1888) = v3;
    ++v2;
  }
  while (v2 != 9);
  *(void *)(a2 + 1896) = a1[2713];
  return 1;
}

double mfs_AllUnitCompData_DeInit_Obersee(uint64_t a1)
{
  *(void *)(a1 + 1896) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 1872) = 0u;
  return result;
}

uint64_t readU32AndAdvanceOffsets(uint64_t a1, int a2, unsigned char *a3, _DWORD *a4)
{
  uint64_t v4 = *a4;
  int v5 = *a3;
  unsigned int v6 = v5 + a2;
  switch((int)(v5 + a2 - 1 + (((v5 + a2 - 1) & 0xE000u) >> 13)) >> 3)
  {
    case 0:
      uint64_t result = ((0xFFu >> v5) & *(unsigned __int8 *)(a1 + v4)) >> (8 - v6);
      break;
    case 1:
      int v8 = *(unsigned __int8 *)(a1 + v4 + 1) | (*(unsigned __int8 *)(a1 + v4) << 8);
      char v9 = 16 - a2 - v5;
      unsigned int v10 = 0xFFFF;
      goto LABEL_7;
    case 2:
      int v8 = (*(unsigned __int8 *)(a1 + v4) << 16) | (*(unsigned __int8 *)(a1 + v4 + 1) << 8) | *(unsigned __int8 *)(a1 + v4 + 2);
      char v9 = 24 - a2 - v5;
      unsigned int v10 = 0xFFFFFF;
      goto LABEL_7;
    case 3:
      int v8 = bswap32(*(_DWORD *)(a1 + v4));
      char v9 = 32 - a2 - v5;
      unsigned int v10 = -1;
LABEL_7:
      uint64_t result = (v8 & (v10 >> v5)) >> v9;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  *a4 = v4 + (v6 >> 3);
  *a3 = v6 & 7;
  return result;
}

uint64_t mfs_StatisticalSelection(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 1928);
  uint64_t v7 = *(unsigned int *)(a1 + 620);
  MFS__log_select_Diag(v6, 1, (uint64_t)"HybridStatisticalSelection {\n");
  MFS__log_select_Diag(v6, 1, (uint64_t)"eBet4EmissionType is set to %d\n");
  if (*(_DWORD *)(a1 + 2592) != 1)
  {
    uint64_t inited = mfs_InitHashTable(v6, a2, a3, a1);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    *(_DWORD *)(a1 + 1936) = v7;
    uint64_t inited = mfs_CostList_Init(v6, (void *)(a1 + 1944), v7, 0);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    unsigned int v44 = *(_DWORD *)(a3 + 8968);
    if (v44 <= 6 && ((1 << v44) & 0x64) != 0 && *a2 == 3)
    {
      uint64_t inited = mfs_CostList_Init(v6, (void *)(a1 + 1968), 8u, 0);
      if ((inited & 0x80000000) != 0) {
        return inited;
      }
    }
    else
    {
      *(void *)(a1 + 1976) = 0;
      *(_DWORD *)(a1 + 1984) = 0;
    }
    int v46 = *(_DWORD *)(a1 + 2064);
    if (v46 != 2)
    {
      if (v46 == 1)
      {
        bzero(*(void **)(a1 + 2048), 8 * *(unsigned int *)(a1 + 2056));
        float v47 = (void *)(a1 + 2040);
      }
      else
      {
        bzero(*(void **)(a1 + 2032), 8 * *(unsigned int *)(a1 + 2056));
        float v47 = (void *)(a1 + 2024);
      }
      *float v47 = 0;
    }
    uint64_t NodeCandidates = 2229280778;
    if ((*(_DWORD *)(a3 + 8968) | 4) == 6)
    {
      uint64_t v48 = heap_Calloc(*(void **)(*(void *)(a1 + 1928) + 8), 2 * (int)v7, 4);
      *(void *)(a1 + 2088) = v48;
      if (!v48) {
        return NodeCandidates;
      }
      float v79 = (_DWORD *)(a3 + 8968);
      *(void *)(a1 + 2096) = v48 + 4 * (int)v7;
      if (*(int *)(a1 + 608) >= 1)
      {
        uint64_t v49 = 0;
        LODWORD(v50) = 0;
        do
        {
          uint64_t v51 = *(void *)(a1 + 600);
          v52.i32[0] = *(_DWORD *)(a3 + 8172);
          v52.i32[1] = *(_DWORD *)(a3 + 8248);
          int8x8_t v80 = v52;
          switch(UNICORN__mfs_Ling_WrdPosInPhrs(*(void *)(a1 + 8), v49))
          {
            case 1u:
              float32x2_t v53 = *(float32x2_t *)(a3 + 8416);
              goto LABEL_68;
            case 2u:
              float32x2_t v53 = *(float32x2_t *)(a3 + 8432);
              goto LABEL_68;
            case 3u:
              float32x2_t v53 = *(float32x2_t *)(a3 + 8424);
              goto LABEL_68;
            case 4u:
              float32x2_t v53 = *(float32x2_t *)(a3 + 8408);
              goto LABEL_68;
            case 5u:
              float32x2_t v53 = *(float32x2_t *)(a3 + 8400);
LABEL_68:
              int8x8_t v80 = vbsl_s8((int8x8_t)vceqz_f32(v53), v80, (int8x8_t)v53);
              break;
            default:
              break;
          }
          switch(mfs_Ling_WrdPosShpInPhrs(*(void *)(a1 + 8), v49))
          {
            case 0u:
              float32x2_t v54 = *(float32x2_t *)(a3 + 8440);
              goto LABEL_76;
            case 1u:
              float32x2_t v54 = *(float32x2_t *)(a3 + 8456);
              goto LABEL_76;
            case 2u:
              float32x2_t v54 = *(float32x2_t *)(a3 + 8448);
              goto LABEL_76;
            case 3u:
              float32x2_t v54 = *(float32x2_t *)(a3 + 8464);
              goto LABEL_76;
            case 4u:
              float32x2_t v54 = *(float32x2_t *)(a3 + 8480);
              goto LABEL_76;
            case 5u:
              float32x2_t v54 = *(float32x2_t *)(a3 + 8472);
LABEL_76:
              int8x8_t v80 = vbsl_s8((int8x8_t)vceqz_f32(v54), v80, (int8x8_t)v54);
              break;
            default:
              break;
          }
          switch(UNICORN__mfs_Ling_WrdProminence(*(void *)(a1 + 8), v49))
          {
            case 0u:
              float32x2_t v55 = *(float32x2_t *)(a3 + 8488);
              goto LABEL_82;
            case 1u:
              float32x2_t v55 = *(float32x2_t *)(a3 + 8496);
              goto LABEL_82;
            case 2u:
              float32x2_t v55 = *(float32x2_t *)(a3 + 8504);
              goto LABEL_82;
            case 3u:
              float32x2_t v55 = *(float32x2_t *)(a3 + 8512);
LABEL_82:
              int8x8_t v80 = vbsl_s8((int8x8_t)vceqz_f32(v55), v80, (int8x8_t)v55);
              break;
            default:
              break;
          }
          switch(UNICORN__mfs_Ling_WrdShpProminence(*(void *)(a1 + 8), v49))
          {
            case 0u:
              float32x2_t v56 = *(float32x2_t *)(a3 + 8520);
              goto LABEL_90;
            case 1u:
              float32x2_t v56 = *(float32x2_t *)(a3 + 8528);
              goto LABEL_90;
            case 2u:
              float32x2_t v56 = *(float32x2_t *)(a3 + 8536);
              goto LABEL_90;
            case 3u:
              float32x2_t v56 = *(float32x2_t *)(a3 + 8544);
              goto LABEL_90;
            case 4u:
              float32x2_t v56 = *(float32x2_t *)(a3 + 8552);
LABEL_90:
              int8x8_t v57 = vbsl_s8((int8x8_t)vceqz_f32(v56), v80, (int8x8_t)v56);
              break;
            default:
              int8x8_t v57 = v80;
              break;
          }
          uint64_t v58 = *a2;
          if ((int)v58 >= 1)
          {
            uint64_t v50 = (int)v50;
            uint64_t v59 = *(void *)(a1 + 2096);
            uint64_t v60 = (char *)(*(void *)(v51 + 528 * v49 + 312) + 2);
            do
            {
              char v61 = *v60++;
              unint64_t v62 = (unint64_t)v57;
              if ((v61 & 4) == 0)
              {
                float v63 = *(float *)(a3 + 8252);
                if (v63 == 0.0) {
                  float v63 = 1.0;
                }
                float v64 = *(float *)(a3 + 8176);
                unint64_t v62 = __PAIR64__(*(float *)&v57.i32[1] * v63, v57.u32[0]);
                if (v64 != 0.0) {
                  *(float *)&unint64_t v62 = *(float *)v57.i32 * v64;
                }
              }
              if (*(float *)&v62 >= 0.0) {
                float v65 = *(float *)&v62;
              }
              else {
                float v65 = 0.0;
              }
              if (v65 > 1.0) {
                float v65 = 1.0;
              }
              LODWORD(v62) = HIDWORD(v62);
              if (*((float *)&v62 + 1) < 0.0) {
                *(float *)&unint64_t v62 = 0.0;
              }
              if (*(float *)&v62 > 5.0) {
                *(float *)&unint64_t v62 = 5.0;
              }
              if (v50 < 1)
              {
                *(_DWORD *)(v59 + 4 * v50) = v62;
                *(float *)(*(void *)(a1 + 2088) + 4 * v50) = v65;
              }
              else
              {
                uint64_t v66 = 4 * v50;
                *(float *)(v59 + v66) = (float)(*(float *)(v59 + 4 * (v50 - 1)) * 0.6)
                                      + (float)(*(float *)&v62 * 0.4);
                *(float *)(*(void *)(a1 + 2088) + v66) = (float)(*(float *)(*(void *)(a1 + 2088)
                                                                            + 4 * (v50 - 1))
                                                                 * 0.6)
                                                         + (float)(v65 * 0.4);
              }
              ++v50;
              --v58;
            }
            while (v58);
          }
          ++v49;
        }
        while (v49 < *(int *)(a1 + 608));
      }
    }
    else
    {
      float v67 = (_DWORD *)heap_Calloc(*(void **)(*(void *)(a1 + 1928) + 8), 2 * (int)v7, 4);
      *(void *)(a1 + 2088) = v67;
      if (!v67) {
        return NodeCandidates;
      }
      float v79 = (_DWORD *)(a3 + 8968);
      *(void *)(a1 + 2096) = &v67[(int)v7];
      if ((int)v7 >= 1)
      {
        uint64_t v68 = v7;
        do
        {
          v67[(int)v7] = *(_DWORD *)(a3 + 8248);
          *v67++ = *(_DWORD *)(a3 + 8172);
          --v68;
        }
        while (v68);
      }
    }
    int v69 = v79;
    switch(*v79)
    {
      case 1:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_SEARCHMODE_DRAGON\n");
        uint64_t NodeCandidates_StatSelect = mfs_Search_FindNodeCandidates_StatSelect(a2, a1, a3);
        goto LABEL_125;
      case 2:
        uint64_t v71 = "Search mode: MFS_SEARCHMODE_FAST\n";
        goto LABEL_124;
      case 5:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_SEARCHMODE_DRAGON_TAHOE\n");
        uint64_t NodeCandidates_StatSelect = mfs_Search_FindNodeCandidates_StatSelect_Tahoe(a2, a1, a3);
        goto LABEL_125;
      case 6:
        uint64_t v71 = "Search mode: MFS_SEARCHMODE_FAST_TAHOE\n";
LABEL_124:
        MFS__log_select_Diag(v6, 2, (uint64_t)v71);
        uint64_t NodeCandidates_StatSelect = mfs_Search_FindNodeCandidates_StatSelect_UltraLight((int *)a2, a1, a3);
LABEL_125:
        uint64_t NodeCandidates = NodeCandidates_StatSelect;
        int v72 = 0;
        goto LABEL_126;
      case 7:
      case 8:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode not supported\n");
        return 2229280769;
      default:
        MFS__log_select_Diag(v6, 2, (uint64_t)"Search mode: MFS_DEFAULT\n");
        uint64_t NodeCandidates = mfs_Search_FindNodeCandidates(a2, a1, a3);
        int v72 = 1;
LABEL_126:
        if ((NodeCandidates & 0x80000000) != 0) {
          return NodeCandidates;
        }
        float v73 = (_DWORD *)heap_Calloc(*(void **)(v6 + 8), v7, 4);
        *(void *)(a1 + 2016) = v73;
        uint64_t NodeCandidates = 2229280778;
        if (!v73) {
          return NodeCandidates;
        }
        if (v7)
        {
          uint64_t v74 = v7;
          do
          {
            *v73++ = *(_DWORD *)(a3 + 8240);
            --v74;
          }
          while (v74);
        }
        if (*(_DWORD *)(a3 + 8876))
        {
          uint64_t v75 = (*v79 - 7) > 4
              ? ConnectedContextLength_TahoeVersion(a3, (unsigned __int8 *)a2, a1)
              : ConnectedContextLength(a3, (unsigned __int8 *)a2, a1);
          uint64_t NodeCandidates = v75;
          if ((v75 & 0x80000000) != 0) {
            return NodeCandidates;
          }
        }
        unsigned int v76 = *v79 - 2;
        if (v76 < 0xA && ((0x3F1u >> v76) & 1) != 0)
        {
          int v69 = (_DWORD *)((char *)&unk_20D6B4320 + 4 * (int)v76);
        }
        else
        {
          uint64_t inited = PruneDPListOnContext(a3, (unsigned __int8 *)a2, a1, v72);
          if ((inited & 0x80000000) != 0) {
            return inited;
          }
        }
        if (*v69 == 8) {
          uint64_t v77 = TransWeights_InitCopy_Default(a3, (int *)a2, a1, v7);
        }
        else {
          uint64_t v77 = TransWeights_InitCopy_0(a3, (int *)a2, a1, v7);
        }
        uint64_t NodeCandidates = v77;
        if ((v77 & 0x80000000) != 0) {
          return NodeCandidates;
        }
        uint64_t inited = Detect_Sparse_Grid(a3, a1);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        uint64_t v78 = *(void *)(a1 + 2000);
        if (!*(_DWORD *)v78 && *(_DWORD *)(v78 + 4) == 6) {
          *(void *)uint64_t v78 = 0x300000003;
        }
        break;
    }
  }
  int v8 = (int *)(a3 + 25140);
  char v9 = *(uint64_t **)(a1 + 2640);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 1960);
    if (v10)
    {
      uint64_t v11 = 0;
      int v12 = *((_DWORD *)v9 + 5);
      uint64_t v13 = *v9;
      do
      {
        unsigned int v14 = v12 + v11;
        int v15 = *(_DWORD *)(v13 + 48 * (v12 + v11));
        if (v15)
        {
          if (v15 == 1)
          {
            uint64_t v16 = *(void *)(a1 + 1952) + 32 * v11;
            uint64_t v17 = *(unsigned int *)(v16 + 16);
            if (v17)
            {
              uint64_t v18 = 0;
              uint64_t v19 = v13 + 48 * v14;
              uint64_t v20 = *(unsigned int *)(v19 + 24);
              char v21 = (int **)(v19 + 8);
              do
              {
                if (v20)
                {
                  __int16 v22 = (_DWORD *)(*(void *)v16 + 8 * v18);
                  int v25 = *v22;
                  int v23 = (float *)(v22 + 1);
                  int v24 = v25;
                  float v26 = *v21;
                  uint64_t v27 = v20;
                  do
                  {
                    int v28 = *v26++;
                    if (v24 == v28) {
                      *int v23 = *v23 + 5000.0;
                    }
                    --v27;
                  }
                  while (v27);
                }
                ++v18;
              }
              while (v18 != v17);
            }
          }
        }
        else
        {
          unsigned int v29 = *(_DWORD *)(*(void *)(v13 + 48 * v14 + 8)
                          + 4 * (*(_DWORD *)(v13 + 48 * v14 + 24) - 1));
          if (v29 < a2[274] - 1)
          {
            uint64_t v30 = *(void *)(a1 + 1952) + 32 * v11;
            uint64_t v31 = *(unsigned int *)(v30 + 16);
            if (v31)
            {
              uint64_t v32 = 0;
              uint64_t v33 = *(int **)v30;
              while (1)
              {
                int v34 = *v33;
                v33 += 2;
                if (v34 == v29) {
                  break;
                }
                if (v31 == ++v32) {
                  goto LABEL_25;
                }
              }
              uint64_t v32 = v32;
            }
            else
            {
              uint64_t v32 = 0;
            }
            if (v32 != v31) {
              goto LABEL_27;
            }
LABEL_25:
            if (*v8 >= 2)
            {
              uint64_t v32 = 0;
              **(_DWORD **)uint64_t v30 = v29;
LABEL_27:
              if (v31)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 8 * v32;
                uint64_t v37 = 8 * v31;
                do
                {
                  if (v36 != v35) {
                    *(float *)(*(void *)v30 + v35 + 4) = *(float *)(*(void *)v30 + v35 + 4) + 5000.0;
                  }
                  v35 += 8;
                }
                while (v37 != v35);
              }
            }
          }
        }
        ++v11;
      }
      while (v11 != v10);
    }
  }
  uint64_t NodeCandidates = mfs_Search_SparseDP((uint64_t)a2, a1, a1 + 2248, a3);
  if ((NodeCandidates & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a1 + 2200))
    {
      FreeRemainingStreams(a1);
      int v39 = *(_DWORD *)(a1 + 32);
      if (v39 >= 1)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 12;
        do
        {
          uint64_t v42 = *(void *)(a1 + 24);
          if (*(_DWORD *)(v42 + v41) != 2)
          {
            BET3FLT__FreePStreamParam((void *)(v42 + v41 + 12));
            int v39 = *(_DWORD *)(a1 + 32);
          }
          ++v40;
          v41 += 1528;
        }
        while (v40 < v39);
      }
    }
    MFS__log_select_Diag(v6, 1, (uint64_t)"}\n");
    if (*(_DWORD *)(a1 + 2592) && (!v8[11] || *v8 >= 2)) {
      mfs_DeInitHashTable(v6, a1);
    }
  }
  return NodeCandidates;
}

uint64_t TransWeights_InitCopy_0(uint64_t a1, int *a2, uint64_t a3, unsigned int a4)
{
  int v33 = *a2;
  if (*a2 >= 0) {
    int v7 = *a2;
  }
  else {
    int v7 = *a2 + 1;
  }
  if ((*(_DWORD *)(a1 + 8968) - 7) >= 5) {
    float v8 = 1.0;
  }
  else {
    float v8 = 2.0;
  }
  char v9 = BET3FLT__ddcalloc(*(void **)(*(void *)(a3 + 1928) + 8), a4, 4);
  if (!v9) {
    return 2229280778;
  }
  uint64_t v11 = v9;
  v10.i32[0] = 1.0;
  if ((*(_DWORD *)(a1 + 8968) - 7) >= 5) {
    *(float *)v10.i32 = (float)(*(float *)(a1 + 8160) + *(float *)(a1 + 8124)) + *(float *)(a1 + 8128);
  }
  if (*(int *)(a3 + 608) >= 1)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    unsigned int v14 = 0;
    int v15 = v7 >> 1;
    if (v7 >> 1 <= 2) {
      int v16 = 2;
    }
    else {
      int v16 = v7 >> 1;
    }
    int v32 = v16;
    int v31 = v16 - 1;
    int v34 = v7 >> 1;
    float32x4_t v35 = (float32x4_t)vdupq_lane_s32(v10, 0);
    do
    {
      uint64_t v17 = *(void *)(a3 + 600);
      if (v14)
      {
        if (v15 < *a2)
        {
          uint64_t v18 = (float32x4_t **)&v11[v13];
          do
          {
            (*v18)->f32[0] = UNICORN__mfs_Ling_TransWeightsDiphADJ(*(void **)(a3 + 8), *v14) * *(float *)(a1 + 8160);
            (*v18)->f32[1] = UNICORN__mfs_Ling_TransWeightsDiphMCP(*(void **)(a3 + 8), *v14) * *(float *)(a1 + 8124);
            float v19 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(void **)(a3 + 8), *v14);
            uint64_t v20 = *v18++;
            v20->f32[2] = v19 * *(float *)(a1 + 8128);
            v20->i32[3] = 0;
            *uint64_t v20 = vdivq_f32(*v20, v35);
            ++v15;
            ++v13;
          }
          while (v15 < *a2);
        }
        *(float *)v11[v13] = v8
                           * (float)(UNICORN__mfs_Ling_TransWeightsPhonADJ(*(void **)(a3 + 8), *v14)
                                   * *(float *)(a1 + 8160));
        *(float *)(v11[v13] + 4) = v8
                                   * (float)(UNICORN__mfs_Ling_TransWeightsPhonMCP(*(void **)(a3 + 8), *v14)
                                           * *(float *)(a1 + 8124));
        float v21 = UNICORN__mfs_Ling_TransWeightsPhonLF0(*(void **)(a3 + 8), *v14);
        __int16 v22 = (float32x4_t *)v11[v13];
        v22->f32[2] = v8 * (float)(v21 * *(float *)(a1 + 8128));
        v22->i32[3] = 0;
        *__int16 v22 = vdivq_f32(*v22, v35);
        int v23 = v13 + 1;
        int v15 = v34;
        if (v33 >= 4)
        {
          int v24 = (float **)&v11[v23];
          int v23 = v32 + v13;
          int v25 = v31;
          do
          {
            float v26 = v8
                * (float)(UNICORN__mfs_Ling_TransWeightsDiphADJ(*(void **)(a3 + 8), *v14) * *(float *)(a1 + 8160));
            uint64_t v27 = *v24;
            **int v24 = v26;
            if ((*(_DWORD *)(a1 + 8968) - 7) <= 4 && v14[6] == *a2) {
              *uint64_t v27 = v26 + 1.0;
            }
            (*v24)[1] = v8
                      * (float)(UNICORN__mfs_Ling_TransWeightsDiphMCP(*(void **)(a3 + 8), *v14) * *(float *)(a1 + 8124));
            float v28 = UNICORN__mfs_Ling_TransWeightsDiphLF0(*(void **)(a3 + 8), *v14);
            unsigned int v29 = (float32x4_t *)*v24++;
            v29->f32[2] = v8 * (float)(v28 * *(float *)(a1 + 8128));
            v29->i32[3] = 0;
            *unsigned int v29 = vdivq_f32(*v29, v35);
            --v25;
          }
          while (v25);
          int v15 = v34;
        }
      }
      else
      {
        int v23 = v13 + v15;
      }
      unsigned int v14 = (int *)(v17 + 528 * v12++);
      int v13 = v23;
    }
    while (v12 < *(int *)(a3 + 608));
  }
  uint64_t result = 0;
  *(void *)(a3 + 2072) = v11;
  return result;
}

uint64_t TransWeights_InitCopy_Default(uint64_t a1, int *a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a2;
  if (*a2 >= 0) {
    int v8 = *a2;
  }
  else {
    int v8 = v7 + 1;
  }
  char v9 = BET3FLT__ddcalloc(*(void **)(*(void *)(a3 + 1928) + 8), a4, 4);
  if (!v9) {
    return 2229280778;
  }
  v10.i32[0] = 1.0;
  if ((*(_DWORD *)(a1 + 8968) - 7) >= 5) {
    *(float *)v10.i32 = (float)(*(float *)(a1 + 8160) + *(float *)(a1 + 8124)) + *(float *)(a1 + 8128);
  }
  uint64_t v11 = *(unsigned int *)(a3 + 608);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    int v15 = v8 >> 1;
    uint64_t v16 = *(void *)(a3 + 600);
    if (v8 >> 1 <= 2) {
      int v17 = 2;
    }
    else {
      int v17 = v8 >> 1;
    }
    float32x4_t v18 = (float32x4_t)vdupq_lane_s32(v10, 0);
    int v19 = v17 - 1;
    do
    {
      if (v14)
      {
        if (v15 < *a2)
        {
          uint64_t v20 = (float32x4_t **)&v9[v13];
          int v21 = *a2 - v15;
          v13 += v21;
          do
          {
            __int16 v22 = *v20++;
            v22->i32[0] = *(_DWORD *)(a1 + 8160);
            v22->i32[1] = *(_DWORD *)(a1 + 8124);
            v22->i32[2] = *(_DWORD *)(a1 + 8128);
            v22->i32[3] = 0;
            *__int16 v22 = vdivq_f32(*v22, v18);
            --v21;
          }
          while (v21);
        }
        int v23 = (float32x4_t *)v9[v13];
        v23->i32[0] = *(_DWORD *)(a1 + 8160);
        v23->i32[1] = *(_DWORD *)(a1 + 8124);
        v23->i32[2] = *(_DWORD *)(a1 + 8128);
        v23->i32[3] = 0;
        *int v23 = vdivq_f32(*v23, v18);
        ++v13;
        if (v7 >= 4)
        {
          int v24 = (float32x4_t **)&v9[v13];
          int v25 = v19;
          do
          {
            float v26 = *v24++;
            v26->i32[0] = *(_DWORD *)(a1 + 8160);
            v26->i32[1] = *(_DWORD *)(a1 + 8124);
            v26->i32[2] = *(_DWORD *)(a1 + 8128);
            v26->i32[3] = 0;
            *float v26 = vdivq_f32(*v26, v18);
            ++v13;
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        v13 += v15;
      }
      uint64_t v14 = v16 + 528 * v12++;
    }
    while (v12 != v11);
  }
  uint64_t v27 = 0;
  *(void *)(a3 + 2072) = v9;
  return v27;
}

uint64_t Detect_Sparse_Grid(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 1992;
  uint64_t v11 = 0;
  UNICORN__mfs_S32Vect_Clear((void *)(a2 + 1992));
  int v5 = *(_DWORD *)(a2 + 1936);
  if (v5 < 1)
  {
    uint64_t result = 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t result = 0;
    do
    {
      int v10 = *(_DWORD *)(*(void *)(a2 + 1952) + 32 * v6 + 16);
      if (v10 >= 21)
      {
        int v10 = (int)(float)(*(float *)(a1 + 8236) * (float)v10);
        if (*(_DWORD *)(a1 + 8240) < v10) {
          int v10 = *(_DWORD *)(a1 + 8240);
        }
      }
      if (v10 < 1)
      {
        if (!v8)
        {
          if (v6 - (int)v11 < 2)
          {
            LODWORD(v11) = v6;
          }
          else
          {
            uint64_t result = mfs_DPLinks_Add(v4, &v11);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v7 = 0;
            int v6 = HIDWORD(v11);
            int v5 = *(_DWORD *)(a2 + 1936);
          }
          int v8 = 1;
        }
      }
      else if (v8 == 1)
      {
        int v8 = 0;
        LODWORD(v11) = v6;
        int v7 = 1;
      }
      HIDWORD(v11) = ++v6;
    }
    while (v6 < v5);
    if (v7 && !v8) {
      uint64_t result = mfs_DPLinks_Add(v4, &v11);
    }
  }
  if (!*(_DWORD *)(a2 + 2008)) {
    return mfs_DPLinks_Add(v4, &v11);
  }
  return result;
}

uint64_t mfs_S32Vect_Add(uint64_t a1, int a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= *(_DWORD *)(a1 + 20))
  {
    uint64_t v5 = heap_Realloc(*(uint64_t **)a1, *(void *)(a1 + 8), 4 * (v4 + 1));
    if (!v5) {
      return 2229280778;
    }
    *(void *)(a1 + 8) = v5;
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v4 + 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v6 = 0;
  *(_DWORD *)(v5 + 4 * v4) = a2;
  ++*(_DWORD *)(a1 + 16);
  return v6;
}

uint64_t mfs_DPLinks_Add(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= *(_DWORD *)(a1 + 20))
  {
    uint64_t v5 = heap_Realloc(*(uint64_t **)a1, *(void *)(a1 + 8), 8 * (v4 + 1));
    if (!v5) {
      return 2229280778;
    }
    *(void *)(a1 + 8) = v5;
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v4 + 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v6 = 0;
  *(void *)(v5 + 8 * v4) = *a2;
  ++*(_DWORD *)(a1 + 16);
  return v6;
}

uint64_t mfs_TCost_CandidateCostStream_kld_Obersee(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = *(_DWORD *)(a1 + 144);
  int v15 = *(float **)(a1 + 32);
  float v34 = 0.0;
  float v35 = 0.0;
  if (*v15 >= 0.0) {
    float v16 = *v15;
  }
  else {
    float v16 = 0.01;
  }
  if (v15[v14 - 1] >= 0.0) {
    float v17 = v15[v14 - 1];
  }
  else {
    float v17 = 0.01;
  }
  mfs_getBeginEndPitch_Obersee(a2, a4, &v35, &v34);
  if (v35 >= 0.0) {
    float v18 = v35;
  }
  else {
    float v18 = 0.01;
  }
  if (v34 >= 0.0) {
    float v19 = v34;
  }
  else {
    float v19 = 0.01;
  }
  float v34 = v19;
  float v35 = v18;
  float v20 = 1.0 - *(float *)(*(void *)(a2 + 1072) + 8932);
  float v21 = mfs_TCost_LF0_BND_distance(v16, v18, v17, v19);
  float v22 = v21;
  float v23 = *(float *)(*(void *)(a2 + 1072) + 8932);
  LOBYTE(v21) = *(unsigned char *)(a4 + 27);
  *(float *)(a7 + 8) = (float)((float)(v23
                                     * mfs_TCost_LF0_SLP_distance(v16, v35, v17, v34, (float)v14, (float)LODWORD(v21)))
                             + (float)(v20 * v22))
                     * (float)(*(float *)(a1 + 4) * *(float *)(a1 + 148));
  unsigned int v26 = *(unsigned __int16 *)(a4 + 22);
  unsigned int v27 = *(unsigned __int8 *)(a4 + 27);
  if ((int)(*(_DWORD *)(a1 + 144) - v27) >= 0) {
    int v28 = *(_DWORD *)(a1 + 144) - v27;
  }
  else {
    int v28 = v27 - *(_DWORD *)(a1 + 144);
  }
  *(_DWORD *)(a7 + 4) = 0;
  if (*(unsigned char *)(a1 + 216))
  {
    float v36 = 0.0;
    uint64_t result = mfs_kld_lookup(a2, a3, v26, a5, a6, &v36, v24, v25);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    float v30 = *(float *)(a7 + 4) + (float)(v36 * *(float *)(a1 + 152));
    *(float *)(a7 + 4) = v30;
  }
  else
  {
    float v30 = 0.0;
  }
  float v31 = (float)v28;
  *(float *)(a7 + 4) = v30 * *(float *)(a1 + 4);
  float v32 = *(float *)(a1 + 4) * *(float *)(a1 + 156);
  if (*(_DWORD *)(*(void *)(a2 + 1072) + 8928) == 6) {
    float v33 = (float)((float)(v31 * 0.03) / (float)v27) * v32;
  }
  else {
    float v33 = (float)(v32 * v31) * 0.01;
  }
  uint64_t result = 0;
  *(float *)a7 = v33;
  return result;
}

uint64_t mfs_InitStream(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x1A18uLL);
  *((void *)a2 + 241) = a1;
  return BET3FLT__InitVStream(a1, (char *)a2, a3);
}

void mfs_DeInitStream(unsigned int *a1)
{
  if (*((void *)a1 + 241))
  {
    mfs_CostList_DeInit((void *)a1 + 243);
    if (a1[496]) {
      mfs_CostList_DeInit((void *)a1 + 246);
    }
    unsigned int v2 = a1[516];
    if (v2)
    {
      if (v2 == 1)
      {
        int v3 = (uint64_t *)*((void *)a1 + 255);
        if (v3)
        {
          do
          {
            if (*v3)
            {
              heap_Free(*(void **)(*((void *)a1 + 241) + 8), *v3);
              uint64_t *v3 = 0;
            }
            unsigned int v4 = (uint64_t *)v3[1];
            heap_Free(*(void **)(*((void *)a1 + 241) + 8), (uint64_t)v3);
            int v3 = v4;
          }
          while (v4);
        }
      }
    }
    else
    {
      uint64_t v5 = (uint64_t *)*((void *)a1 + 253);
      if (v5)
      {
        do
        {
          if (*v5)
          {
            heap_Free(*(void **)(*((void *)a1 + 241) + 8), *v5);
            *uint64_t v5 = 0;
          }
          uint64_t v6 = (uint64_t *)v5[1];
          heap_Free(*(void **)(*((void *)a1 + 241) + 8), (uint64_t)v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
    }
    int v7 = (uint64_t *)*((void *)a1 + 321);
    if (v7)
    {
      mfs_uselect_Finalize_Obersee(v7);
      uint64_t v8 = *((void *)a1 + 321);
      if (v8)
      {
        heap_Free(*(void **)(*((void *)a1 + 241) + 8), v8);
        *((void *)a1 + 321) = 0;
      }
    }
    uint64_t v9 = *((void *)a1 + 252);
    if (v9)
    {
      heap_Free(*(void **)(*((void *)a1 + 241) + 8), v9);
      *((void *)a1 + 252) = 0;
    }
    BET3FLT__dd_free(*(void **)(*((void *)a1 + 241) + 8), *((uint64_t **)a1 + 259));
    uint64_t v10 = *((void *)a1 + 261);
    if (v10)
    {
      heap_Free(*(void **)(*((void *)a1 + 241) + 8), v10);
      *((void *)a1 + 261) = 0;
    }
    uint64_t v11 = *((void *)a1 + 263);
    if (v11)
    {
      unint64_t v12 = a1[155];
      if (!v12) {
        goto LABEL_29;
      }
      for (unint64_t i = 0; i < v12; ++i)
      {
        uint64_t v14 = *(void *)(*((void *)a1 + 263) + 8 * i);
        if (v14)
        {
          heap_Free(*(void **)(*((void *)a1 + 241) + 8), v14);
          *(void *)(*((void *)a1 + 263) + 8 * i) = 0;
          unint64_t v12 = a1[155];
        }
      }
      uint64_t v11 = *((void *)a1 + 263);
      if (v11)
      {
LABEL_29:
        heap_Free(*(void **)(*((void *)a1 + 241) + 8), v11);
        *((void *)a1 + 263) = 0;
      }
    }
    for (uint64_t j = 612; j != 632; j += 2)
    {
      uint64_t v16 = *(void *)&a1[j];
      if (v16)
      {
        heap_Free(*(void **)(*((void *)a1 + 241) + 8), v16);
        *(void *)&a1[j] = 0;
      }
    }
    uint64_t v17 = *((void *)a1 + 254);
    if (v17)
    {
      heap_Free(*(void **)(*((void *)a1 + 241) + 8), v17);
      *((void *)a1 + 254) = 0;
    }
    uint64_t v18 = *((void *)a1 + 256);
    if (v18)
    {
      heap_Free(*(void **)(*((void *)a1 + 241) + 8), v18);
      *((void *)a1 + 256) = 0;
    }
    uint64_t v19 = *((void *)a1 + 331);
    if (v19)
    {
      heap_Free(*(void **)(*((void *)a1 + 241) + 8), v19);
      *((void *)a1 + 331) = 0;
    }
    uint64_t v20 = *((void *)a1 + 332);
    if (v20)
    {
      heap_Free(*(void **)(*((void *)a1 + 241) + 8), v20);
      *((void *)a1 + 332) = 0;
    }
    UNICORN__mfs_S32Vect_Clear((void *)a1 + 249);
    mfs_UnitSequence_DeInit((uint64_t)(a1 + 528));
    mfs_SegmentList_DeInit((void *)a1 + 276);
    mfs_SegmentList_DeInit((void *)a1 + 281);
    uint64_t v21 = *((void *)a1 + 8);
    if (v21 && *(_DWORD *)(v21 + 456))
    {
      unint64_t v22 = 0;
      do
      {
        if (*(_DWORD *)(v21 + 4 * v22 + 416))
        {
          BET3FLT__DeInitMSDUttModel((void *)a1 + 7, v22);
          uint64_t v21 = *((void *)a1 + 8);
        }
        ++v22;
      }
      while (v22 < *(unsigned int *)(v21 + 456));
    }
    MFS__DeInitVStream((int *)a1);
  }
  bzero(a1, 0x1A18uLL);
}

uint64_t mfs_LoadStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MFS__LoadVStream(a1, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v10 = (_DWORD *)(v9 + 344);
      do
      {
        if (*(_DWORD *)(v9 + 1528 * v8 + 12))
        {
          uint64_t v11 = *(unsigned int *)(a3 + 4 * v8 + 264);
          if ((int)v11 >= 1)
          {
            unint64_t v12 = (int *)(*(void *)(a2 + 8 * v8 + 2016) + 4);
            int v13 = v10;
            do
            {
              *(v13 - 50) = *(v12 - 1);
              int v14 = *v12;
              v12 += 2;
              *v13++ = v14;
              --v11;
            }
            while (v11);
          }
        }
        ++v8;
        v10 += 382;
      }
      while (v8 != v7);
      int v15 = *(int **)(a1 + 24);
      do
      {
        int v16 = *(_DWORD *)(a3 + 4 * v15[3] + 8796);
        v15[368] = v16;
        v15[186] = v16;
        v15 += 382;
        --v7;
      }
      while (v7);
    }
    UNICORN__mfs_S32Vect_Init(*(void *)(a1 + 1928), (void *)(a1 + 1992));
    uint64_t result = mfs_UnitSequence_Init(*(void *)(a1 + 1928), a1 + 2112, a2);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mfs_SegmentList_Init(*(void *)(a1 + 1928), a2, a1 + 2208);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v17 = *(void *)(a1 + 1928);
        return mfs_SegmentList_Init(v17, a2, a1 + 2248);
      }
    }
  }
  return result;
}

uint64_t mfs_UnitSequence_Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a3;
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a2 + 32));
  UNICORN__mfs_S32Vect_Init(a1, (void *)(a2 + 56));
  return 0;
}

void *mfs_UnitSequence_DeInit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 24) = 0;
  UNICORN__mfs_S32Vect_Clear((void *)(a1 + 32));
  return UNICORN__mfs_S32Vect_Clear((void *)(a1 + 56));
}

uint64_t mfs_UnitSequence_Sequence(uint64_t a1, uint64_t a2)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = v25;
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) + 1096);
  uint64_t v5 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 16), 264 * *(unsigned int *)(a1 + 48));
  if (!v5) {
    return 2229280778;
  }
  uint64_t v6 = v5;
  *(void *)(a1 + 16) = v5;
  unint64_t v7 = *(unsigned int *)(a1 + 48);
  if (v7 < 2) {
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  do
  {
    int v10 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v8 + 4);
    int v11 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v8++) + 1;
    if (v10 != v11)
    {
      uint64_t v12 = *(void *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
      *(_DWORD *)uint64_t v12 = v9;
      *(_DWORD *)(v12 + 4) = v8;
      *(_OWORD *)(v12 + 8) = 0uLL;
      *(_OWORD *)(v12 + 24) = 0uLL;
      *(_OWORD *)(v12 + 40) = 0uLL;
      *(_OWORD *)(v12 + 56) = 0uLL;
      *(_OWORD *)(v12 + 72) = 0uLL;
      *(_OWORD *)(v12 + 88) = 0uLL;
      *(_OWORD *)(v12 + 104) = 0uLL;
      *(_OWORD *)(v12 + 120) = 0uLL;
      *(_OWORD *)(v12 + 136) = 0uLL;
      *(_OWORD *)(v12 + 152) = 0uLL;
      *(_OWORD *)(v12 + 168) = 0uLL;
      *(_OWORD *)(v12 + 184) = 0uLL;
      *(_OWORD *)(v12 + 200) = 0uLL;
      *(_OWORD *)(v12 + 216) = 0uLL;
      *(_OWORD *)(v12 + 232) = 0uLL;
      *(_OWORD *)(v12 + 248) = 0uLL;
      ++*(_DWORD *)(a1 + 24);
      unint64_t v7 = *(unsigned int *)(a1 + 48);
      int v9 = v8;
    }
  }
  while (v8 + 1 < v7);
  if (v8 == v9)
  {
LABEL_8:
    unsigned int v13 = *(_DWORD *)(a1 + 24);
    if (v13) {
      goto LABEL_9;
    }
    return 0;
  }
  uint64_t v23 = *(void *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
  *(_DWORD *)uint64_t v23 = v9;
  *(_DWORD *)(v23 + 4) = v8 + 1;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  *(_OWORD *)(v23 + 184) = 0u;
  *(_OWORD *)(v23 + 200) = 0u;
  *(_OWORD *)(v23 + 216) = 0u;
  *(_OWORD *)(v23 + 232) = 0u;
  *(_OWORD *)(v23 + 248) = 0u;
  unsigned int v13 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v13;
  if (!v13) {
    return 0;
  }
LABEL_9:
  uint64_t v14 = 0;
  uint64_t result = 0;
  int v16 = v4 - 1;
  while (1)
  {
    uint64_t v17 = (int *)(v6 + 264 * v14);
    uint64_t v18 = *v17;
    int v20 = v17[1];
    uint64_t v19 = v17 + 1;
    if ((int)v18 < v20) {
      break;
    }
LABEL_17:
    if (++v14 >= (unint64_t)v13) {
      return result;
    }
  }
  while (1)
  {
    mfs_getUnitDataFromMfsData(*(unsigned __int8 **)(a1 + 8), *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18), (uint64_t *)&v24);
    int MessageOffsetMsec = mfs_GetMessageOffsetMsec(*(void *)(a1 + 8), *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18));
    int v22 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18) == v16 ? -1 : *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18);
    uint64_t result = mfs_SegmentList_Add(a2, v22, *((unsigned char *)v24 + 13), MessageOffsetMsec, (unsigned __int16)(*((_WORD *)v24 + 4) * *(_WORD *)(*(void *)(*(void *)(a1 + 8) + 1072) + 24)));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (++v18 >= *v19)
    {
      unsigned int v13 = *(_DWORD *)(a1 + 24);
      goto LABEL_17;
    }
  }
}

uint64_t mfs_UnitSequence_GetTemplateDur(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 48) <= (signed int)a3) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * a3);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(*(void *)(v4 + 1072) + 8328))
  {
    long long v6 = 0u;
    long long v7 = 0u;
    mfs_getUnitData_Obersee(v4, a2, v3, (uint64_t)&v6);
    return BYTE11(v7);
  }
  else
  {
    long long v6 = 0uLL;
    uint64_t v8 = &v6;
    mfs_getUnitDataFromMfsData((unsigned __int8 *)v4, v3, (uint64_t *)&v8);
    return *((unsigned __int16 *)v8 + 4);
  }
}

uint64_t mfs_UnitSequence_GetTemplateId(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a2) {
    return 0x7FFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 40) + 4 * a2);
  }
}

uint64_t mfs_UnitSequence_Log(uint64_t result)
{
  if (*(_DWORD *)(result + 24))
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(result + 40);
    uint64_t v4 = *(void *)(result + 16);
    do
    {
      uint64_t v5 = (unsigned int *)(v4 + 264 * v2);
      unsigned int v6 = *(_DWORD *)(v3 + 4 * (int)*v5);
      uint64_t v7 = *(void *)(v1 + 8);
      if (v6 < *(_DWORD *)(v7 + 1096) - 1) {
        mfs_GetMsgName(v7, v6);
      }
      uint64_t v8 = (_DWORD *)(v4 + 264 * v2 + 4);
      MFS__log_select_Diag(*(void *)v1, 1, (uint64_t)"%s.pcm : %d - %d\n");
      unint64_t v9 = *v5;
      if (v9 < *v8)
      {
        do
        {
          MFS__log_select_Diag(*(void *)v1, 1, (uint64_t)"%d , ");
          ++v9;
        }
        while (v9 < *v8);
      }
      uint64_t result = MFS__log_select_Diag(*(void *)v1, 1, (uint64_t)"\n");
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t mfs_DataCache_Init_Obersee(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 2229280774;
  if (a1 && a4 && a6)
  {
    if (a3 <= 0x40)
    {
      *a1 = a2;
      a1[1] = a3;
      *((void *)a1 + 1) = a4;
      *((void *)a1 + 2) = a5;
      *((void *)a1 + 5) = a6;
      unint64_t v9 = (void *)heap_Calloc(*(void **)(a6 + 8), 1, 4 * a2);
      *((void *)a1 + 4) = v9;
      if (v9)
      {
        memset(v9, 255, 4 * *a1);
        uint64_t v10 = heap_Calloc(*(void **)(a6 + 8), 1, a1[1] * (unint64_t)*a1);
        *((void *)a1 + 3) = v10;
        if (v10) {
          return 0;
        }
        else {
          return 2229280778;
        }
      }
      else
      {
        return 2229280778;
      }
    }
    else
    {
      return 2229280775;
    }
  }
  return result;
}

double mfs_DataCache_DeInit_Obersee(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      heap_Free(*(void **)(a2 + 8), v4);
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      heap_Free(*(void **)(a2 + 8), v5);
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t mfs_DataCache_ReadAndWrite_Obersee(uint64_t a1, unsigned int a2, void *__dst)
{
  uint64_t v5 = a2 % *(_DWORD *)a1;
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v6 + 4 * v5) == a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (const void *)(*(void *)(a1 + 24) + (v5 << 6));
  }
  else
  {
    *(_DWORD *)(v6 + 4 * v5) = a2;
    uint64_t v7 = (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
    uint64_t v8 = __dst;
    __dst = (void *)(*(void *)(a1 + 24) + (v5 << 6));
  }
  memcpy(__dst, v8, *(unsigned int *)(a1 + 4));
  return v7;
}

uint64_t mfs_DataCachePair_Init_Obersee(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 2229280774;
  if (a1 && a4 && a6)
  {
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a3;
    *(void *)(a1 + 8) = a5;
    uint64_t v13 = heap_Calloc(*(void **)(a6 + 8), 1, 48);
    *(void *)(a1 + 24) = v13;
    if (v13)
    {
      uint64_t v14 = heap_Calloc(*(void **)(a6 + 8), 1, 48);
      *(void *)(a1 + 32) = v14;
      uint64_t result = 2229280778;
      if (v14)
      {
        uint64_t result = mfs_DataCache_Init_Obersee(*(unsigned int **)(a1 + 24), a2, a3, a4, a5, a6);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mfs_DataCache_Init_Obersee(*(unsigned int **)(a1 + 32), a2, a3, a4, a5, a6);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = 0;
            *(_DWORD *)(a1 + 16) = 0;
          }
        }
      }
    }
    else
    {
      return 2229280778;
    }
  }
  return result;
}

double mfs_DataCachePair_DeInit_Obersee(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    mfs_DataCache_DeInit_Obersee(v4, a2);
    heap_Free(*(void **)(a2 + 8), *(void *)(a1 + 24));
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    mfs_DataCache_DeInit_Obersee(v5, a2);
    heap_Free(*(void **)(a2 + 8), *(void *)(a1 + 32));
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t mfs_DataCachePair_SetMode_Obersee(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

int8x16_t mfs_DataCachePair_SwapCaches_Obersee(uint64_t a1)
{
  int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t mfs_DataCachePair_ReadAndWrite_Obersee(uint64_t a1, unsigned int a2, void *__dst)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unsigned int v6 = a2 % *(_DWORD *)v5;
    if (*(_DWORD *)(*(void *)(v5 + 32) + 4 * v6) == a2)
    {
      memcpy(__dst, (const void *)(*(void *)(v5 + 24) + (v6 << 6)), *(unsigned int *)(v5 + 4));
      return 0;
    }
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else
  {
    if (v3) {
      return 2229280775;
    }
    uint64_t v4 = *(void *)(a1 + 24);
  }
  return mfs_DataCache_ReadAndWrite_Obersee(v4, a2, __dst);
}

uint64_t select_bet4_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet4;
  return result;
}

uint64_t select_bet4_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 25967;
  }
  return result;
}

uint64_t select_bet4_ClassClose()
{
  return 0;
}

uint64_t select_bet4_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  unsigned int v87 = 0;
  *(void *)int v85 = 0;
  uint64_t v86 = 0;
  uint64_t v5 = 2229280775;
  uint64_t v84 = 0;
  memset(v91, 0, sizeof(v91));
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, v85);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      if ((safeh_HandleCheck(a1, a2, 25967, 408) & 0x80000000) == 0)
      {
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Entering select_bet4_ObjOpen", v12, v13, v14, v81);
        uint64_t v15 = heap_Calloc(*(void **)(*(void *)v85 + 8), 1, 10992);
        if (!v15)
        {
          log_OutPublic(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 58000, 0, v16, v17, v18, v19, v82);
          uint64_t v5 = 2229280778;
LABEL_28:
          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Leaving select_bet4_ObjOpen: %x", v44, v45, v46, v5);
          return v5;
        }
        uint64_t v20 = v15;
        *(void *)uint64_t v15 = a3;
        *(void *)(v15 + 8) = a4;
        uint64_t v21 = *(void *)v85;
        *(_DWORD *)(v15 + 10928) = 0;
        *(void *)(v15 + 16) = v21;
        *(void *)(v15 + 24) = a1;
        ForcedEEController_Clear(v15 + 10944);
        uint64_t Object = objc_GetObject(*(void *)(*(void *)v85 + 48), (uint64_t)"SYNTHSTREAM", &v84);
        if ((Object & 0x80000000) != 0
          || (*(void *)(v20 + 40) = *(void *)(v84 + 8),
              uint64_t Object = objc_GetObject(*(void *)(*(void *)v85 + 48), (uint64_t)"LINGDB", &v84),
              (Object & 0x80000000) != 0))
        {
          uint64_t v5 = Object;
          log_OutPublic(*(void *)(*(void *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58001, 0, v23, v24, v25, v26, v82);
        }
        else
        {
          uint64_t v27 = *(void *)(v84 + 8);
          *(void *)(v20 + 48) = v27;
          uint64_t ObjOpen = MFS__select_bet3_FeatureExtractObjOpen(a3, a4, *(void *)(v20 + 40), v27, (void *)(v20 + 224));
          if ((ObjOpen & 0x80000000) == 0)
          {
            uint64_t ObjOpen = betX_CreateRegularBrokerString(*(uint64_t *)v85, 0, (char *)v91, 0x80uLL);
            if ((ObjOpen & 0x80000000) == 0)
            {
              uint64_t v29 = *(void *)(v20 + 24);
              if (!v29 || (uint64_t v30 = *(void *)(v29 + 48)) == 0) {
                uint64_t v30 = *(void *)(*(void *)(v20 + 16) + 48);
              }
              uint64_t ObjOpen = objc_GetAddRefCountedObject(v30, (uint64_t)v91, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))select_bet4_loc_ObjcVoiceOpen, (void (*)(void, void, long long *))select_bet4_loc_ObjcVoiceClose, *(uint64_t *)v85, &v84);
              if ((ObjOpen & 0x80000000) == 0)
              {
                uint64_t v31 = *(void *)v85;
                uint64_t v32 = *(void *)(v84 + 32);
                *(void *)(v20 + 56) = v32;
                paramc_ParamSetStr(*(void *)(v31 + 40), (uint64_t)"voicecomponentid", (char *)(v32 + 66842));
                uint64_t ObjOpen = select_bet4_loc_VoiceSetup((void *)v20);
                if ((ObjOpen & 0x80000000) == 0)
                {
                  uint64_t v33 = *(void *)(*(void *)v85 + 40);
                  uint64_t v88 = v20;
                  long long v83 = xmmword_26C21F8D0;
                  *(_OWORD *)int v89 = xmmword_26C21F8D0;
                  if ((paramc_ListenerAdd(v33, "frequencyhz", &v88) & 0x80000000) != 0) {
                    log_OutPublic(*(void *)(*(void *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58002, "%s%s", v34, v35, v36, v37, "param");
                  }
                  if (((paramc_ParamGetStr(*(void *)(*(void *)v85 + 40), (uint64_t)"bet4suppresschunking", &v86) & 0x80000000) != 0
                     || !*v86)
                    && (uint64_t v38 = paramc_ParamSetStr(*(void *)(*(void *)v85 + 40), (uint64_t)"bet4suppresschunking", "no"), (v38 & 0x80000000) != 0))
                  {
                    uint64_t v5 = v38;
                  }
                  else
                  {
                    uint64_t v43 = *(void *)(*(void *)v85 + 40);
                    uint64_t v88 = v20;
                    *(_OWORD *)int v89 = v83;
                    uint64_t v5 = paramc_ListenerAdd(v43, "bet4suppresschunking", &v88);
                    if ((v5 & 0x80000000) == 0)
                    {
LABEL_32:
                      if ((paramc_ParamGetStr(*(void *)(*(void *)v85 + 40), (uint64_t)"model_template_ratio", &v86) & 0x80000000) == 0&& v86)
                      {
                        uint64_t v48 = *(void *)(v20 + 56);
                        if (LH_stricmp(v86, "median"))
                        {
                          if (LH_stricmp(v86, "high")) {
                            goto LABEL_39;
                          }
                          *(_DWORD *)(v48 + 9080) = 2;
                          uint64_t v52 = *(void *)(*(void *)v85 + 32);
                          float32x2_t v53 = "Model Template Ration: high has not been implemented yet!";
                        }
                        else
                        {
                          *(void *)(v48 + 8292) = 0x3D23D70A40066666;
                          *(void *)(v48 + 9004) = 0x400000000;
                          *(_DWORD *)(v48 + 9080) = 1;
                          *(_DWORD *)(v48 + 140) = 1068708659;
                          *(_DWORD *)(v48 + 168) = 1068708659;
                          select_bet4_loc_SetSynthParamFloat(*(uint64_t *)v85, (uint64_t)"bet2voicevuvrelamp", 1.4);
                          select_bet4_loc_SetSynthParamFloat(*(uint64_t *)v85, (uint64_t)"bet2voicemvfboost", *(float *)(v48 + 168));
                          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: f32WContext: %4.2f", v54, v55, v56, COERCE__INT64(*(float *)(v48 + 8292)));
                          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: f32WGenericContext: %4.2f", v57, v58, v59, COERCE__INT64(*(float *)(v48 + 8296)));
                          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: bEnableCCL: %d", v60, v61, v62, *(unsigned int *)(v48 + 9004));
                          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: s32LenCCL: %d", v63, v64, v65, *(unsigned int *)(v48 + 9008));
                          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: s32ModelTemplateRatio: %d", v66, v67, v68, *(unsigned int *)(v48 + 9080));
                          log_OutText(*(void *)(*(void *)v85 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Parameter change: VUV_REL_AMP: %4.2f", v69, v70, v71, COERCE__INT64(*(float *)(v48 + 140)));
                          uint64_t v52 = *(void *)(*(void *)v85 + 32);
                          float32x2_t v53 = "Parameter change: MVF_BOOST: %4.2f";
                          *(double *)&uint64_t v82 = *(float *)(v48 + 168);
                        }
                        log_OutText(v52, (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)v53, v49, v50, v51, v82);
                      }
LABEL_39:
                      if ((v5 & 0x80000000) == 0)
                      {
                        uint64_t v72 = 0;
                        float v73 = "rate";
                        do
                        {
                          if (strcmp(v73, "bet4suppresschunking"))
                          {
                            if ((paramc_ParamGetInt(*(void *)(*(void *)v85 + 40), (uint64_t)v73, (int *)&v87) & 0x80000000) != 0)
                            {
                              unsigned int v87 = dword_20D6B4358[v72];
                              uint64_t v74 = paramc_ParamSetInt(*(void *)(*(void *)v85 + 40), (uint64_t)v73, v87);
                              if ((v74 & 0x80000000) != 0) {
                                goto LABEL_51;
                              }
                            }
                            uint64_t v74 = select_bet4_loc_ParamSet(v20, v73, v87);
                            if ((v74 & 0x80000000) != 0) {
                              goto LABEL_51;
                            }
                            uint64_t v79 = *(void *)(*(void *)v85 + 40);
                            uint64_t v88 = v20;
                            *(_OWORD *)int v89 = v83;
                            uint64_t v74 = paramc_ListenerAdd(v79, v73, &v88);
                            if ((v74 & 0x80000000) != 0) {
                              goto LABEL_51;
                            }
                          }
                          uint64_t v88 = 1;
                          *(void *)int v89 = &ISelect_Bet4;
                          *(_OWORD *)&v89[8] = *(_OWORD *)a5;
                          uint64_t v90 = 0;
                          uint64_t v74 = objc_RegisterObject(*(void *)(*(void *)v85 + 48), (uint64_t)"SELECTBET4", (long long *)&v88);
                          if ((v74 & 0x80000000) != 0)
                          {
LABEL_51:
                            uint64_t v5 = v74;
                            log_OutPublic(*(void *)(*(void *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58002, "%s%s", v75, v76, v77, v78, "param");
                            goto LABEL_27;
                          }
                          *(_DWORD *)(v20 + 10928) = 1;
                          float v73 = off_264113690[++v72];
                        }
                        while (v72 != 3);
                        *(void *)a5 = v20;
                        *(_DWORD *)(a5 + 8) = 25968;
                        uint64_t v80 = *(void *)(a5 + 8);
                        uint64_t v88 = 1;
                        *(void *)int v89 = &ISelect_Bet4;
                        *(void *)&v89[8] = v20;
                        *(void *)&v89[16] = v80;
                        uint64_t v90 = 0;
                        if ((objc_RegisterObject(*(void *)(*(void *)v85 + 48), (uint64_t)"SELECTBET4", (long long *)&v88) & 0x80000000) == 0)*(_DWORD *)(v20 + 10928) = 1; {
                        uint64_t v5 = critsec_ObjOpen(*(void *)(*(void *)(v20 + 16) + 16), *(void **)(*(void *)(v20 + 16) + 8), (uint64_t *)(v20 + 32));
                        }
                        goto LABEL_28;
                      }
                      goto LABEL_27;
                    }
                  }
                  log_OutPublic(*(void *)(*(void *)(v20 + 16) + 32), (uint64_t)"SELECT_BET4", 58002, "%s%s", v39, v40, v41, v42, "param");
                  goto LABEL_32;
                }
              }
            }
          }
          uint64_t v5 = ObjOpen;
        }
LABEL_27:
        *(void *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 25968;
        select_bet4_ObjClose(v20, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_28;
      }
      return 2229280776;
    }
  }
  return v5;
}

uint64_t select_bet4_ObjClose(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if (v3 < 0) {
    return 2229280776;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Entering select_bet4_ObjClose", v4, v5, v6, v32);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    int v10 = critsec_ObjClose(v9);
    if (v10 < 0) {
      LODWORD(v7) = v10;
    }
  }
  uint64_t v11 = 0;
  long long v33 = xmmword_26C21F8D0;
  do
  {
    uint64_t v12 = off_2641136B0[v11];
    uint64_t v13 = *(void *)(v8 + 40);
    uint64_t v34 = a1;
    long long v35 = v33;
    int v14 = paramc_ListenerRemove(v13, v12, (long long *)&v34);
    if ((int)v7 > -1 && v14 < 0) {
      uint64_t v7 = v14;
    }
    else {
      uint64_t v7 = v7;
    }
    ++v11;
  }
  while (v11 != 4);
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17 || (uint64_t v18 = *(void *)(v17 + 48)) == 0) {
      uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 48);
    }
    int v19 = objc_ReleaseObject(v18, v16);
    *(void *)(a1 + 56) = 0;
    if ((int)v7 > -1 && v19 < 0) {
      uint64_t v7 = v19;
    }
    else {
      uint64_t v7 = v7;
    }
    select_bet4_loc_VoiceSetup((void *)a1);
  }
  uint64_t v21 = *(void *)(a1 + 224);
  if (v21)
  {
    int ObjClose = BET3FLT__select_bet3_FeatureExtractObjClose(v21);
    if ((int)v7 > -1 && ObjClose < 0) {
      uint64_t v7 = ObjClose;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (*(void *)(a1 + 48))
  {
    int v24 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v24 < 0) {
      uint64_t v7 = v24;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (*(void *)(a1 + 40))
  {
    int v26 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v26 < 0) {
      uint64_t v7 = v26;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (*(_DWORD *)(a1 + 10928) == 1) {
    objc_UnregisterObject(*(void *)(v8 + 48), (uint64_t)"SELECTBET4");
  }
  heap_Free(*(void **)(v8 + 8), a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Leaving select_bet4_ObjClose: %x", v28, v29, v30, v7);
  return v7;
}

uint64_t select_bet4_ObjReopen(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)__s2 = 0u;
  long long v22 = 0u;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 25968, 10992) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v6 = a1[2];
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Entering select_bet4_ObjReopen", v3, v4, v5, v19);
  if ((betX_CreateRegularBrokerString(v6, 0, __s2, 0x80uLL) & 0x80000000) != 0
    || (uint64_t v7 = (const char *)a1[7]) != 0 && !strcmp(v7, __s2))
  {
    AddRefCounteduint64_t Object = select_bet4_loc_SetSynthParams((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = a1[3];
    if (!v8 || (uint64_t v9 = *(void *)(v8 + 48)) == 0) {
      uint64_t v9 = *(void *)(a1[2] + 48);
    }
    AddRefCounteduint64_t Object = objc_GetAddRefCountedObject(v9, (uint64_t)__s2, (uint64_t (*)(void, void, uint64_t, long long *, uint64_t))select_bet4_loc_ObjcVoiceOpen, (void (*)(void, void, long long *))select_bet4_loc_ObjcVoiceClose, v6, &v20);
    if ((AddRefCountedObject & 0x80000000) == 0)
    {
      uint64_t v11 = a1[7];
      if (v11)
      {
        uint64_t v12 = a1[3];
        if (!v12 || (uint64_t v13 = *(void *)(v12 + 48)) == 0) {
          uint64_t v13 = *(void *)(a1[2] + 48);
        }
        objc_ReleaseObject(v13, v11);
      }
      a1[7] = *(void *)(v20 + 32);
      AddRefCounteduint64_t Object = select_bet4_loc_VoiceSetup(a1);
    }
  }
  uint64_t v14 = AddRefCountedObject;
  paramc_ParamSetStr(*(void *)(v6 + 40), (uint64_t)"voicecomponentid", (char *)(a1[7] + 66842));
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET4", 4, 0, (uint64_t)"Leaving select_bet4_ObjReopen: %x", v15, v16, v17, v14);
  return v14;
}

uint64_t select_bet4_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 2229280776;
  if ((safeh_HandleCheck(a1, a2, 25968, 10992) & 0x80000000) == 0)
  {
    *(void *)(a1 + 10936) = *(void *)(a1 + 56) + 128;
    if (ForcedEEController_SetProcessStart(*(uint64_t **)(a1 + 16), a1 + 10944))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 40)
                                                                                               + 64))(a3, a4, 78, "application/x-realspeak-cspp-sptchk;version=4.0",
        0,
        0,
        a1 + 512);
      (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 40)
                                                                                               + 64))(a3, a4, 78, "application/x-realspeak-cspp-sgt;version=4.0",
        0,
        0,
        a1 + 528);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-bet3-speech-frames;version=5.0",
              0,
              1,
              a1 + 256);
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v17 + 64);
        uint64_t v19 = (*(uint64_t (**)(void))(v17 + 152))();
        uint64_t v12 = v18(a3, a4, 78, "application/x-realspeak-markers-pp;version=4.0", v19, 1, a1 + 272);
        if ((v12 & 0x80000000) == 0)
        {
          uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-bandpass-filter;version=4.0",
                  0,
                  1,
                  a1 + 240);
          if ((v12 & 0x80000000) == 0)
          {
            uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-f0begin;version=4.0",
                    0,
                    1,
                    a1 + 400);
            if ((v12 & 0x80000000) == 0)
            {
              uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-f0end;version=4.0",
                      0,
                      1,
                      a1 + 416);
              if ((v12 & 0x80000000) == 0)
              {
                uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-duration;version=4.0",
                        0,
                        1,
                        a1 + 432);
                if ((v12 & 0x80000000) == 0)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-maxfade-l;version=4.0",
                          0,
                          1,
                          a1 + 448);
                  if ((v12 & 0x80000000) == 0)
                  {
                    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-maxfade-r;version=4.0",
                            0,
                            1,
                            a1 + 464);
                    if ((v12 & 0x80000000) == 0)
                    {
                      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-adjacent-l;version=4.0",
                              0,
                              1,
                              a1 + 480);
                      if ((v12 & 0x80000000) == 0)
                      {
                        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-psola-adjacent-r;version=4.0",
                                0,
                                1,
                                a1 + 496);
                        if ((v12 & 0x80000000) == 0)
                        {
                          uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usids;version=4.0",
                                  0,
                                  1,
                                  a1 + 288);
                          if ((v12 & 0x80000000) == 0)
                          {
                            uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usoffsets;version=5.0",
                                    0,
                                    1,
                                    a1 + 304);
                            if ((v12 & 0x80000000) == 0)
                            {
                              uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usdurs-32;version=5.0",
                                      0,
                                      1,
                                      a1 + 320);
                              if ((v12 & 0x80000000) == 0)
                              {
                                uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-stsids;version=4.0",
                                        0,
                                        1,
                                        a1 + 336);
                                if ((v12 & 0x80000000) == 0)
                                {
                                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usfrozen;version=4.0",
                                          0,
                                          0,
                                          a1 + 384) & 0x80000000) == 0)
                                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Optional input stream %s opened", v20, v21, v22, (uint64_t)"application/x-realspeak-usfrozen;version=4.0");
                                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usnoreusebias;version=4.0",
                                          0,
                                          0,
                                          a1 + 352) & 0x80000000) == 0)
                                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Optional input stream %s opened", v23, v24, v25, (uint64_t)"application/x-realspeak-usnoreusebias;version=4.0");
                                  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4, 78, "application/x-realspeak-usprosodybias;version=4.0",
                                          0,
                                          0,
                                          a1 + 368);
                                  if ((v26 & 0x80000000) != 0)
                                  {
                                    uint64_t v8 = 0;
                                  }
                                  else
                                  {
                                    uint64_t v8 = v26;
                                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Optional input stream %s opened", v27, v28, v29, (uint64_t)"application/x-realspeak-usprosodybias;version=4.0");
                                  }
                                  goto LABEL_26;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v8 = v12;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58004, "%s%s", v13, v14, v15, v16, "contentType");
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Forced early emission requires a clock external service", v9, v10, v11, v31);
      uint64_t v8 = 2229280786;
    }
    select_bet4_ProcessEnd(a1, a2);
LABEL_26:
    *(_DWORD *)(*(void *)(a1 + 10936) + 8564) = select_bet4_UpdateEarlyEmission(*(void *)(a1 + 16));
  }
  return v8;
}

uint64_t select_bet4_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v384 = 0;
  if ((safeh_HandleCheck(a1, a2, 25968, 10992) & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Entering select_bet4_Process function", v9, v10, v11, v364);
  uint64_t v15 = (unsigned int *)(a1 + 4200);
  int v16 = *(_DWORD *)(a1 + 10880);
  if (!*(void *)(a1 + 6128))
  {
    if (!v16) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v16)
  {
LABEL_14:
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Finally deinitialising stream", v12, v13, v14, v365);
    uint64_t v25 = (kaldi::nnet1::Component *)critsec_Enter(*(void **)(a1 + 32));
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(a1 + 56);
    int v28 = kaldi::nnet1::Component::IsUpdatable(v25) - *(_DWORD *)(a1 + 6812);
    log_OutText(*(void *)(v26 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"For early emission timing estimate, utterance consisted of %d ms, computation time was %d ms", v29, v30, v31, *(unsigned int *)(a1 + 6804));
    int v35 = *(_DWORD *)(a1 + 6804);
    uint64_t v36 = *(void *)(v27 + 37640);
    uint64_t v37 = *(unsigned int *)(v36 + 6408);
    *(_DWORD *)(v36 + 6400) += v35 - *(_DWORD *)(v36 + 4 * v37);
    *(_DWORD *)(v36 + 4 * v37) = v35;
    uint64_t v38 = v36 + 4 * *(unsigned int *)(v36 + 6408);
    *(_DWORD *)(v36 + 6404) += v28 - *(_DWORD *)(v38 + 3200);
    *(_DWORD *)(v38 + 3200) = v28;
    unsigned int v39 = (*(_DWORD *)(v36 + 6408) + 1) % 0x320u;
    *(_DWORD *)(v36 + 6408) = v39;
    float v40 = *(float *)(v36 + 6412);
    if (v40 != 0.0 || v39 >= 0x32)
    {
      int v41 = *(_DWORD *)(v36 + 6404);
      if (v41)
      {
        float v40 = (double)*(int *)(v36 + 6400) / (double)v41;
        *(float *)(v36 + 6412) = v40;
      }
    }
    log_OutText(*(void *)(v26 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Current search-xRT estimate for early emission is %.4f", v32, v33, v34, COERCE__INT64(v40));
    critsec_Leave(*(void **)(a1 + 32));
    mfs_DeInitStream((unsigned int *)(a1 + 4200));
    *(_DWORD *)(a1 + 10880) = 0;
LABEL_19:
    *(_DWORD *)(a1 + 10916) = 0;
    uint64_t v42 = a1 + 544;
    uint64_t inited = MFS__select_bet3_FeatureExtractProcessStart(*(uint64_t **)(a1 + 224), *(void *)(a1 + 56) + 37888, a3, a4, (void *)(a1 + 544), &v384);
    if ((inited & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58005, "%s%x", v43, v44, v45, v46, "lhError");
      return inited;
    }
    if (*(__int16 *)(a1 + 554) <= 1)
    {
      int v47 = v384;
      if (v384)
      {
        uint64_t v48 = *(void *)(a1 + 256);
        if (v48)
        {
          LODWORD(inited) = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v48, *(void *)(a1 + 264));
          *(void *)(a1 + 256) = safeh_GetNullHandle();
          *(void *)(a1 + 264) = v49;
        }
        if (*(void *)(a1 + 272))
        {
          if (*(_DWORD *)(a1 + 4064))
          {
            LODWORD(inited) = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 104))();
            if ((inited & 0x80000000) != 0) {
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v50, v51, v52, v53, "contentType");
            }
          }
          int v54 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 272), *(void *)(a1 + 280));
          if ((int)inited > -1 && v54 < 0) {
            int v56 = v54;
          }
          else {
            int v56 = inited;
          }
          int v57 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 288), *(void *)(a1 + 296));
          if (v56 > -1 && v57 < 0) {
            int v56 = v57;
          }
          int v59 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 400), *(void *)(a1 + 408));
          if (v56 > -1 && v59 < 0) {
            int v56 = v59;
          }
          int v61 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 416), *(void *)(a1 + 424));
          if (v56 > -1 && v61 < 0) {
            int v56 = v61;
          }
          int v63 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 432), *(void *)(a1 + 440));
          if (v56 > -1 && v63 < 0) {
            int v56 = v63;
          }
          int v65 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 448), *(void *)(a1 + 456));
          if (v56 > -1 && v65 < 0) {
            int v56 = v65;
          }
          int v67 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 464), *(void *)(a1 + 472));
          if (v56 > -1 && v67 < 0) {
            int v56 = v67;
          }
          int v69 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 480), *(void *)(a1 + 488));
          if (v56 > -1 && v69 < 0) {
            int v56 = v69;
          }
          int v71 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 496), *(void *)(a1 + 504));
          if (v56 > -1 && v71 < 0) {
            LODWORD(inited) = v71;
          }
          else {
            LODWORD(inited) = v56;
          }
          *(void *)(a1 + 400) = safeh_GetNullHandle();
          *(void *)(a1 + 408) = v73;
          *(void *)(a1 + 416) = safeh_GetNullHandle();
          *(void *)(a1 + 424) = v74;
          *(void *)(a1 + 432) = safeh_GetNullHandle();
          *(void *)(a1 + 440) = v75;
          *(void *)(a1 + 448) = safeh_GetNullHandle();
          *(void *)(a1 + 456) = v76;
          *(void *)(a1 + 464) = safeh_GetNullHandle();
          *(void *)(a1 + 472) = v77;
          *(void *)(a1 + 480) = safeh_GetNullHandle();
          *(void *)(a1 + 488) = v78;
          *(void *)(a1 + 496) = safeh_GetNullHandle();
          *(void *)(a1 + 504) = v79;
          *(void *)(a1 + 272) = safeh_GetNullHandle();
          *(void *)(a1 + 280) = v80;
          *(void *)(a1 + 288) = safeh_GetNullHandle();
          *(void *)(a1 + 296) = v81;
        }
        int v47 = 1;
      }
      *a5 = v47;
      int ProcessEnd = MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (void *)(a1 + 544));
      if ((int)inited > -1 && ProcessEnd < 0) {
        int v84 = ProcessEnd;
      }
      else {
        int v84 = inited;
      }
      int v85 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 48) + 64))(a3, a4);
      if (v84 > -1 && v85 < 0) {
        return v85;
      }
      else {
        return v84;
      }
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Features have been extracted", v44, v45, v46, v365);
    *(_DWORD *)(a1 + 10900) = 0;
    uint64_t inited = mfs_InitStream(*(void *)(a1 + 16), (void *)(a1 + 4200), *(_DWORD **)(a1 + 10936));
    critsec_Enter(*(void **)(a1 + 32));
    *(_DWORD *)(a1 + 6816) = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 37640) + 6412);
    critsec_Leave(*(void **)(a1 + 32));
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Stream initialised for the first time", v87, v88, v89, v366);
    if ((inited & 0x80000000) == 0)
    {
      long long v93 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 6584) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 6600) = v93;
      long long v94 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 6616) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 6632) = v94;
      long long v95 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 6520) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + 6536) = v95;
      long long v96 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 6552) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 6568) = v96;
      long long v97 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 6488) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a1 + 6504) = v97;
      uint64_t Process = MFS__select_bet3_FeatureExtractProcess(*(uint64_t **)(a1 + 224), *(void *)(a1 + 10936), a3, a4, *(void *)(a1 + 512), *(void *)(a1 + 520), *(void *)(a1 + 528), *(void *)(a1 + 536), (unsigned int *)(a1 + 232), a1 + 544, (uint64_t *)(a1 + 10888), (_DWORD *)(a1 + 10896));
      if ((Process & 0x80000000) != 0)
      {
        uint64_t inited = Process;
      }
      else if (*(__int16 *)(a1 + 554) < 1)
      {
        uint64_t inited = 0;
      }
      else
      {
        v372 = a5;
        int v99 = 0;
        int v375 = *(unsigned __int16 *)(a1 + 554);
        uint64_t v100 = *(void *)(a1 + 56);
        uint64_t v101 = v100 + 66288;
        uint64_t v102 = v100 + 37888;
        do
        {
          unint64_t v103 = *(unsigned int *)(v101 + 8);
          if (v103)
          {
            unint64_t v104 = 0;
            uint64_t v105 = *(void *)v101;
            uint64_t v106 = (float *)(*(void *)v101 + 8);
            do
            {
              if (featex_bet5_loc_TransRulesMatch(v102, v105, a1 + 544, (__int16)v99, v104))
              {
                unsigned int v107 = *((unsigned __int8 *)v106 - 1) + v99 * *(unsigned __int16 *)(*(void *)(a1 + 544) + 3360);
                *(_DWORD *)(*(void *)(a1 + 4128) + 4 * v107) = (float)((float)(*v106
                                                                                               * (float)*(unsigned int *)(*(void *)(a1 + 4128) + 4 * v107))
                                                                                       + 0.5);
                unint64_t v103 = *(unsigned int *)(v101 + 8);
              }
              ++v104;
              v106 += 3;
            }
            while (v104 < v103);
          }
          unint64_t v108 = *(unsigned int *)(v101 + 24);
          if (v108)
          {
            unint64_t v109 = 0;
            uint64_t v110 = *(void *)(v101 + 16);
            uint64_t v111 = (float *)(v110 + 8);
            do
            {
              if (featex_bet5_loc_TransRulesMatch(v102, v110, a1 + 544, (__int16)v99, v109))
              {
                unsigned int v112 = *((unsigned __int8 *)v111 - 1) + v99 * *(unsigned __int16 *)(*(void *)(a1 + 544) + 3360);
                *(_DWORD *)(*(void *)(a1 + 4136) + 4 * v112) = (float)((float)(*v111
                                                                                               * (float)*(unsigned int *)(*(void *)(a1 + 4136) + 4 * v112))
                                                                                       + 0.5);
                unint64_t v108 = *(unsigned int *)(v101 + 24);
              }
              ++v109;
              v111 += 3;
            }
            while (v109 < v108);
          }
          ++v99;
        }
        while (v99 != v375);
        uint64_t inited = 0;
        a5 = v372;
        uint64_t v15 = (unsigned int *)(a1 + 4200);
      }
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Feature extraction successful", v90, v91, v92, v367);
    *(_DWORD *)(a1 + 10916) = 0;
    *(_DWORD *)(a1 + 10896) = 0;
    uint64_t v115 = *(void *)(a1 + 6840);
    if (v115)
    {
      FreeBET4TuningData((void *)a1, v115);
      *(void *)(a1 + 6840) = 0;
    }
    if ((inited & 0x80000000) != 0) {
      goto LABEL_324;
    }
    uint64_t v386 = 0;
    v387[0] = 0;
    uint64_t v385 = 0;
    LODWORD(v383) = 0;
    int v116 = (*(uint64_t (**)(void, void, void *, _DWORD **))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 384), *(void *)(a1 + 392), v387, &v383);
    unsigned int v117 = v383;
    if (v116 < 0 || !v383) {
      v387[0] = 0;
    }
    unsigned int v118 = v383 >> 2;
    LODWORD(v383) = 0;
    if (((*(uint64_t (**)(void, void, uint64_t *, _DWORD **))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 352), *(void *)(a1 + 360), &v386, &v383) & 0x80000000) != 0|| !v383)
    {
      uint64_t v386 = 0;
    }
    else if (v117 >= 4)
    {
      if (v383 / 0x1F8 != v118) {
        goto LABEL_315;
      }
    }
    else
    {
      unsigned int v118 = v383 / 0x1F8;
    }
    LODWORD(v383) = 0;
    if (((*(uint64_t (**)(void, void, uint64_t *, _DWORD **))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 368), *(void *)(a1 + 376), &v385, &v383) & 0x80000000) != 0|| !v383)
    {
      uint64_t v385 = 0;
      if (!v118)
      {
LABEL_133:
        int v123 = *(__int16 *)(a1 + 4068);
        if (v123 < 1)
        {
          unsigned int i = 0;
        }
        else
        {
          for (unsigned int i = 0; i < v123; unsigned int i = (unsigned __int16)(i + 1))
          {
            if (*(_DWORD *)(*(void *)(a1 + 4152) + 4 * i) != -1) {
              break;
            }
          }
        }
        if (i == v123) {
          goto LABEL_315;
        }
        unsigned int v118 = *(unsigned __int16 *)(a1 + 4068);
      }
    }
    else
    {
      unsigned int v122 = v383 >> 3;
      if (v118)
      {
        if (v122 != (unsigned __int16)v118) {
          goto LABEL_315;
        }
        goto LABEL_273;
      }
      unsigned int v118 = v383 >> 3;
      if (!v122) {
        goto LABEL_133;
      }
    }
LABEL_273:
    uint64_t v233 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 24);
    uint64_t v234 = v233;
    if (!v233) {
      goto LABEL_316;
    }
    *(_DWORD *)(v233 + 8) = v118;
    uint64_t v235 = v118;
    uint64_t v236 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v118, 48);
    *(void *)uint64_t v234 = v236;
    if (v236)
    {
      v374 = a5;
      unsigned int v237 = -1;
      if (v118)
      {
        uint64_t v238 = 0;
        while (1)
        {
          uint64_t v239 = v238;
          *(unsigned char *)(v236 + 48 * v238 + 28) = 0;
          if (!v386) {
            break;
          }
          int v240 = *(_DWORD *)(v386 + 504 * v238);
          if (!v240) {
            break;
          }
          v241 = (_DWORD *)(*(void *)v234 + 48 * v239);
          _DWORD *v241 = 1;
          v241[6] = v240;
          uint64_t v242 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), (v240 + 1), 4);
          uint64_t v236 = *(void *)v234;
          *(void *)(*(void *)v234 + 48 * v239 + 8) = v242;
          if (!v242) {
            goto LABEL_326;
          }
          uint64_t v244 = v236 + 48 * v239;
          LODWORD(v383) = 0;
          unsigned int v247 = *(_DWORD *)(v244 + 24);
          v245 = (unsigned int *)(v244 + 24);
          unsigned int v246 = v247;
          if (v247)
          {
            unsigned int v246 = 0;
            uint64_t v248 = v386;
            do
            {
              *(_DWORD *)(v242 + 4 * v246) = *(_DWORD *)(v248 + 504 * v239 + 4 * v246 + 4);
              unsigned int v246 = v383 + 1;
              LODWORD(v383) = v246;
            }
            while (v246 < *v245);
          }
          v249 = (_DWORD *)(v242 + 4 * v246);
LABEL_293:
          _DWORD *v249 = -1;
          uint64_t v253 = v385;
          if (!v385) {
            goto LABEL_305;
          }
          uint64_t v254 = v385 + 8 * v239;
          int v255 = *(unsigned __int8 *)(v254 + 6);
          int v256 = *(unsigned __int8 *)(v254 + 4);
          if (!(v255 | v256)) {
            goto LABEL_305;
          }
          if (v256 == 1)
          {
            float v257 = 2.5;
          }
          else
          {
            if (v256 != 2) {
              goto LABEL_300;
            }
            float v257 = -2.5;
          }
          *(_DWORD *)(v234 + 16) = 1;
          LOBYTE(v243) = *(unsigned char *)(v253 + 8 * v239 + 5);
          float v243 = (float)LODWORD(v243) / 100.0;
          *(float *)(v236 + 48 * v239 + 20) = v257 * v243;
LABEL_300:
          if (v255 == 1)
          {
            float v258 = 2.5;
            goto LABEL_304;
          }
          if (v255 == 2)
          {
            float v258 = -2.5;
LABEL_304:
            *(_DWORD *)(v234 + 12) = 1;
            LOBYTE(v243) = *(unsigned char *)(v253 + 8 * v239 + 7);
            *(float *)(v236 + 48 * v239 + 16) = v258 * (float)((float)LODWORD(v243) / 100.0);
          }
LABEL_305:
          uint64_t v238 = v239 + 1;
          if (v239 + 1 == v235)
          {
            unsigned int v237 = v239;
            goto LABEL_307;
          }
        }
        v250 = (_DWORD *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 2, 4);
        uint64_t v236 = *(void *)v234;
        *(void *)(*(void *)v234 + 48 * v239 + 8) = v250;
        if (!v250)
        {
LABEL_326:
          FreeBET4TuningData((void *)a1, v234);
          uint64_t v234 = 0;
          a5 = v374;
          goto LABEL_316;
        }
        *(_DWORD *)(v236 + 48 * v239 + 24) = 1;
        if (!v387[0] || *(_DWORD *)(v387[0] + 4 * v239) == -1)
        {
          if (*(_DWORD *)(*(void *)(a1 + 4152) + 4 * v239) == -1)
          {
            *(_DWORD *)(v236 + 48 * v239) = 2;
            _DWORD *v250 = 0;
            goto LABEL_292;
          }
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 5, 0, (uint64_t)"%s: %u", v119, v120, v121, (uint64_t)"Locked unit");
          uint64_t v236 = *(void *)v234;
          uint64_t v251 = *(void *)v234 + 48 * v239;
          *(_DWORD *)uint64_t v251 = 0;
          uint64_t v252 = *(void *)(a1 + 4152);
        }
        else
        {
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 5, 0, (uint64_t)"%s: %u", v119, v120, v121, (uint64_t)"Locked unit");
          uint64_t v236 = *(void *)v234;
          uint64_t v251 = *(void *)v234 + 48 * v239;
          *(_DWORD *)uint64_t v251 = 0;
          uint64_t v252 = v387[0];
        }
        v250 = *(_DWORD **)(v251 + 8);
        _DWORD *v250 = *(_DWORD *)(v252 + 4 * v239);
LABEL_292:
        v249 = v250 + 1;
        goto LABEL_293;
      }
LABEL_307:
      *(_DWORD *)(v236 + 48 * v237) = 4;
      int v259 = *(_DWORD *)(v234 + 12);
      if (v259 || *(_DWORD *)(v234 + 16))
      {
        a5 = v374;
        if (!*(_DWORD *)(*(void *)(a1 + 10936) + 8328))
        {
          v260 = (_DWORD *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 25296);
          if (v260)
          {
            v261 = v260;
            v262 = v260 + 6286;
            memcpy(v260, (const void *)(*(void *)(a1 + 56) + 128), 0x62D0uLL);
            v261[2062] = *v262;
            int v263 = v262[3];
            v261[2040] = v262[2];
            v261[2045] = v263;
            *((void *)v261 + 1028) = *((void *)v261 + 3145);
            v261[2060] = v262[6];
            if (v259) {
              v261[2000] = v262[1];
            }
            *(void *)(a1 + 10936) = v261;
          }
        }
      }
      else
      {
        a5 = v374;
      }
LABEL_316:
      *(void *)(a1 + 6840) = v234;
      uint64_t v264 = *(void *)(a1 + 16);
      if (*(_DWORD *)(*(void *)(a1 + 10936) + 8560) == 1)
      {
        log_OutText(*(void *)(v264 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Chunking suppressed therefore features will not be chunked", v119, v120, v121, v368);
        *(_DWORD *)(a1 + 10912) = 1;
        v265 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 8);
        *(void *)(a1 + 10920) = v265;
        if (v265)
        {
          uint64_t inited = 0;
          void *v265 = v42;
LABEL_322:
          int v269 = 4;
LABEL_425:
          *a5 = v269;
          return inited;
        }
        uint64_t inited = 2229280778;
      }
      else
      {
        uint64_t inited = mfs_SplitFeatures(v264, a1 + 544, (uint64_t *)(a1 + 10920), (unsigned int *)(a1 + 10912));
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Number of feature objects after chunking is %d", v266, v267, v268, *(unsigned int *)(a1 + 10912));
        if (*(_DWORD *)(a1 + 10912) == 1) {
          **(void **)(a1 + 10920) = v42;
        }
        if ((inited & 0x80000000) == 0) {
          goto LABEL_322;
        }
      }
LABEL_324:
      mfs_DeInitStream(v15);
      return inited;
    }
    FreeBET4TuningData((void *)a1, v234);
LABEL_315:
    uint64_t v234 = 0;
    goto LABEL_316;
  }
  if (!*(_DWORD *)(a1 + 10916))
  {
    if (*(_DWORD *)(a1 + 6792))
    {
      uint64_t v113 = *(void *)(*(void *)(a1 + 16) + 32);
      unsigned int v114 = "u32SplitFeatIdx is 0, restart after early emission";
    }
    else if (*(_DWORD *)(*(void *)(a1 + 10936) + 8564) == 1)
    {
      uint64_t v113 = *(void *)(*(void *)(a1 + 16) + 32);
      unsigned int v114 = "u32SplitFeatIdx is 0, early emission first entry";
    }
    else
    {
      *(_DWORD *)(a1 + 6792) = 2;
      uint64_t v113 = *(void *)(*(void *)(a1 + 16) + 32);
      unsigned int v114 = "u32SplitFeatIdx is 0, regular emission selected";
    }
    log_OutText(v113, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v114, v12, v13, v14, v365);
    goto LABEL_143;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 8328) && *(_DWORD *)(a1 + 6792) == 1)
  {
LABEL_143:
    uint64_t inited = 0;
    goto LABEL_144;
  }
  uint64_t v17 = *(void *)(a1 + 6840);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Reinitialising stream for chunked input", v12, v13, v14, v365);
  uint64_t v18 = *(void *)(a1 + 6840);
  if (v18) {
    *(_DWORD *)(v18 + 20) += (*(__int16 *)(*(void *)(*(void *)(a1 + 10920)
  }
                                                     + 8 * (*(_DWORD *)(a1 + 10916) - 1))
                                         + 10)
                            - 1)
                           * *(_DWORD *)(*(void *)(a1 + 56) + 25424);
  mfs_DeInitStream((unsigned int *)(a1 + 4200));
  uint64_t inited = mfs_InitStream(*(void *)(a1 + 16), (void *)(a1 + 4200), *(_DWORD **)(a1 + 10936));
  *(void *)(a1 + 6840) = v17;
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v23 = *(void *)(a1 + 10936);
    if (*(_DWORD *)(v23 + 8328)) {
      int v24 = 2 * (*(_DWORD *)(v23 + 8564) == 0);
    }
    else {
      int v24 = 2;
    }
    long long v125 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 6584) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a1 + 6600) = v125;
    long long v126 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 6616) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 6632) = v126;
    long long v127 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a1 + 6520) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 6536) = v127;
    long long v128 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a1 + 6552) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a1 + 6568) = v128;
    long long v129 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 6488) = *(_OWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 6792) = v24;
    *(_OWORD *)(a1 + 6504) = v129;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"u32SplitFeatIdx is %d, stream reinitialised for reuse", v19, v20, v21, *(unsigned int *)(a1 + 10916));
LABEL_144:
  v130 = (_DWORD *)(a1 + 10880);
  if (*(_DWORD *)(a1 + 6792) != 1)
  {
    uint64_t Stream = mfs_LoadStream(a1 + 4200, *(void *)(a1 + 56) + 25424, *(void *)(a1 + 10936));
    *(void *)(a1 + 4208) = *(void *)(*(void *)(a1 + 10920) + 8 * *(unsigned int *)(a1 + 10916));
    if ((Stream & 0x80000000) != 0)
    {
      uint64_t inited = Stream;
      goto LABEL_160;
    }
    uint64_t inited = mfs_ParamGenStart(a1 + 4200, (int *)(*(void *)(a1 + 56) + 25424), *(_DWORD **)(a1 + 10936));
  }
  if ((inited & 0x80000000) == 0)
  {
    int v132 = *(_DWORD *)(a1 + 6792);
    uint64_t v133 = *(unsigned int *)(a1 + 4232);
    if ((int)v133 >= 1)
    {
      uint64_t v134 = (const float *)(*(void *)(a1 + 4224) + 8);
      do
      {
        float32x2_t v135 = vld1_dup_f32(v134);
        *((float32x2_t *)v134 - 1) = v135;
        v134 += 382;
        --v133;
      }
      while (v133);
    }
    uint64_t v136 = *(void *)(a1 + 10936);
    if (*(_DWORD *)(v136 + 8328)) {
      uint64_t v137 = mfs_StatisticalSelection_Obersee(a1 + 4200, a1 + 10944, (int *)(*(void *)(a1 + 56) + 25424), v136);
    }
    else {
      uint64_t v137 = mfs_StatisticalSelection(a1 + 4200, (unsigned int *)(*(void *)(a1 + 56) + 25424), *(void *)(a1 + 10936));
    }
    uint64_t inited = v137;
    uint64_t v141 = *(unsigned int *)(a1 + 4232);
    if ((int)v141 >= 1)
    {
      uint64_t v142 = (_DWORD *)(*(void *)(a1 + 4224) + 8);
      do
      {
        *uint64_t v142 = *(v142 - 2);
        v142 += 382;
        --v141;
      }
      while (v141);
    }
    if ((v137 & 0x80000000) == 0) {
      goto LABEL_162;
    }
    goto LABEL_161;
  }
LABEL_160:
  int v132 = 0;
LABEL_161:
  MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (void *)(a1 + 544));
LABEL_162:
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Ready to synthesize", v138, v139, v140, v365);
  if ((inited & 0x80000000) == 0) {
    uint64_t inited = mfs_ParamGen(a1 + 4200, (int *)(*(void *)(a1 + 56) + 25424), *(void *)(a1 + 10936), (_DWORD *)(a1 + 10880));
  }
  if (*(_DWORD *)(a1 + 6792))
  {
    int v146 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 10936) + 8328) == 1)
  {
    int v146 = *(_DWORD *)(a1 + 6784) / *(_DWORD *)(*(void *)(a1 + 56) + 25424);
  }
  else
  {
    int v376 = v132;
    if (*(_DWORD *)(a1 + 6472) < 2u)
    {
      LODWORD(v148) = 1;
    }
    else
    {
      uint64_t v147 = 0;
      unint64_t v148 = 1;
      do
      {
        if (v147)
        {
          if (*(_DWORD *)(*(void *)(a1 + 6464) + v147 + 28) == -1) {
            break;
          }
          uint64_t v149 = v148;
        }
        else
        {
          uint64_t v149 = 1;
        }
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Potential early-emission segment # %d has %d states, starts with unit %d, is %d ms", v143, v144, v145, v149);
        ++v148;
        v147 += 28;
      }
      while (v148 < *(unsigned int *)(a1 + 6472));
    }
    uint64_t v150 = v148;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early emission target is %d ms\n", v143, v144, v145, *(unsigned int *)(a1 + 6808));
    uint64_t v154 = 0;
    int v155 = 0;
    uint64_t v156 = 12;
    while (v155 < *(_DWORD *)(a1 + 6808))
    {
      v155 += *(_DWORD *)(*(void *)(a1 + 6464) + v156);
      ++v154;
      v156 += 28;
      if (v150 == v154) {
        goto LABEL_182;
      }
    }
    uint64_t v150 = v154;
LABEL_182:
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"To satisfy early emission requirement, %d segments will be emitted", v151, v152, v153, v150);
    uint64_t v160 = *(void *)(a1 + 6464);
    int v161 = 0;
    if (v150)
    {
      uint64_t v162 = v150;
      v163 = (int *)(v160 + 16);
      do
      {
        int v164 = *v163;
        v163 += 7;
        v161 += v164;
        --v162;
      }
      while (v162);
    }
    *(_DWORD *)(a1 + 6836) = v161 - 1;
    uint64_t v165 = (*(_DWORD *)(v160 + 28 * (v150 - 1))
                        + *(_DWORD *)(v160 + 28 * (v150 - 1) + 16)
                        - 1);
    *(_DWORD *)(a1 + 6832) = v165;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Subsequent emission will be forced to have unit %d at time index %d\n", v157, v158, v159, v165);
    *(_DWORD *)(a1 + 6800) = v150;
    int v146 = v161 / *(_DWORD *)(*(void *)(a1 + 56) + 25424);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early emission will consist of %d segments (including silence) for a total of %d ms\n", v166, v167, v168, v150);
    int v132 = v376;
  }
  unsigned int v169 = *(_DWORD *)(a1 + 6472);
  if (!v169) {
    goto LABEL_191;
  }
  uint64_t v170 = *(void *)(a1 + 10936);
  if (!*(_DWORD *)(v170 + 8328))
  {
    unsigned int v171 = *(_DWORD *)(a1 + 6792);
    if (!v171) {
      goto LABEL_198;
    }
  }
  int v172 = *(_DWORD *)(a1 + 10912);
  int v173 = v172 - 1;
  if (v172 == 1)
  {
    unsigned int v169 = 0;
LABEL_191:
    unsigned int v171 = 0;
    goto LABEL_199;
  }
  int v174 = *(_DWORD *)(a1 + 10916);
  if (v174 && (v175 = *(_DWORD **)(a1 + 6464), *v175 == -1))
  {
    int v176 = v175[3];
    double v177 = (double)v176 * 0.4;
    v175[3] = (int)v177;
    unsigned int v171 = (v176 - (int)v177) / *(_DWORD *)(v170 + 24);
  }
  else
  {
    unsigned int v171 = 0;
  }
  if (v174 != v173 && (uint64_t v178 = *(void *)(a1 + 6464), v179 = v169 - 1, *(_DWORD *)(v178 + 28 * v179) == -1))
  {
    uint64_t v270 = v178 + 28 * v179;
    int v271 = *(_DWORD *)(v270 + 12);
    double v272 = (double)v271 * 0.4;
    *(_DWORD *)(v270 + 12) = (int)v272;
    unsigned int v169 = (v271 - (int)v272) / *(_DWORD *)(v170 + 24);
  }
  else
  {
LABEL_198:
    unsigned int v169 = 0;
  }
LABEL_199:
  if (v132 != 1)
  {
    uint64_t v180 = *(unsigned int *)(a1 + 10916);
    uint64_t v181 = *(void *)(*(void *)(a1 + 10920) + 8 * v180);
    int v182 = *(_DWORD *)(v181 + 3520) + *(__int16 *)(v181 + 10) + *(_DWORD *)(a1 + 10896);
    *(_DWORD *)(a1 + 10896) = v182;
    if (v180)
    {
      if (*(_DWORD *)(a1 + 10912) != 1) {
        *(_DWORD *)(a1 + 10896) = v182 - 1;
      }
    }
  }
  if ((inited & 0x80000000) != 0) {
    goto LABEL_424;
  }
  v183 = (uint64_t *)(a1 + 10888);
  uint64_t v184 = *(void *)(a1 + 10888);
  if (v184)
  {
    uint64_t v185 = *(unsigned int *)(a1 + 10900);
    unsigned int v186 = *(_DWORD *)(a1 + 10896);
    int v187 = *(_DWORD *)(a1 + 6792);
    if (v186 > v185)
    {
      v188 = (int *)(v184 + 32 * v185);
      int v189 = v146;
      if (v187) {
        int v189 = *(_DWORD *)(a1 + 4808);
      }
      int v190 = *(_DWORD *)(a1 + 4816);
      if (v190 < v189)
      {
        int v191 = 0;
        int v192 = *(_DWORD *)(a1 + 10908);
        while (1)
        {
          int v193 = *v188;
          v188[3] = v192;
          if (v193 != 33)
          {
            v188[4] = 0;
            goto LABEL_223;
          }
          unsigned int v194 = *(_DWORD *)(*(void *)(a1 + 4800) + 528 * v190 + 24);
          v188[4] = v194;
          if (v188[6] == 35)
          {
            if (!v171 || v190)
            {
              if (!v169) {
                goto LABEL_222;
              }
              int v196 = *(_DWORD *)(a1 + 4808);
              BOOL v197 = __OFSUB__(v196, 1);
              int v198 = v196 - 1;
              if (v198 < 0 != v197 || v190 != v198) {
                goto LABEL_222;
              }
              if (v190)
              {
                unsigned int v195 = v169;
                if (v194 <= v169) {
                  goto LABEL_222;
                }
LABEL_215:
                v194 -= v195;
                v188[4] = v194;
                goto LABEL_222;
              }
            }
            unsigned int v195 = v171;
            if (v194 > v171) {
              goto LABEL_215;
            }
          }
LABEL_222:
          v192 += v194;
          *(_DWORD *)(a1 + 10908) = v192;
          *(_DWORD *)(a1 + 4816) = ++v190;
LABEL_223:
          v188 += 8;
          uint64_t v199 = (v191 + 1);
          if (v190 < v189)
          {
            unsigned int v200 = v185 + 1 + v191++;
            if (v200 < v186) {
              continue;
            }
          }
          goto LABEL_228;
        }
      }
      uint64_t v199 = 0;
LABEL_228:
      if (v187 || v146 == *(_DWORD *)(a1 + 4808))
      {
        if (*v130)
        {
          unsigned int v201 = v199 + v185;
          if ((int)v199 + (int)v185 < v186)
          {
            int v202 = *(_DWORD *)(a1 + 10908);
            v203 = v188 + 4;
            do
            {
              *(v203 - 1) = v202;
              _DWORD *v203 = 0;
              v203 += 8;
              ++v201;
            }
            while (v201 < v186);
            uint64_t v199 = v186 - v185;
          }
        }
      }
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"About to write %d markers, starting with index %d", v143, v144, v145, v199);
      unint64_t v207 = *(unsigned int *)(a1 + 10900);
      if (v207 < (int)v207 + (int)v199)
      {
        v373 = a5;
        uint64_t v208 = 32 * v207;
        do
        {
          int v209 = *(_DWORD *)(*v183 + v208);
          if (v209 == 0x4000)
          {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Outputting marker with index %4d:tag=%d Value=?some pointer? posCur=%d lenCur=%d", v204, v205, v206, v207);
          }
          else
          {
            int hasCharPtrArg = marker_hasCharPtrArg(v209);
            uint64_t v214 = *(void *)(*(void *)(a1 + 16) + 32);
            if (hasCharPtrArg) {
              log_OutText(v214, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Outputting marker with index %4d:tag=%d szValue=%s posCur=%d lenCur=%d", v210, v211, v212, v207);
            }
            else {
              log_OutText(v214, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Outputting marker with index %4d:tag=%d u32Value=%d posCur=%d lenCur=%d", v210, v211, v212, v207);
            }
          }
          if (*(_DWORD *)(*v183 + v208) == 33) {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Marker was a PHONEME_MARKER with symbol %c", v204, v205, v206, *(unsigned int *)(*v183 + v208 + 24));
          }
          ++v207;
          v208 += 32;
        }
        while (v207 < (*(_DWORD *)(a1 + 10900) + v199));
        LODWORD(v207) = *(_DWORD *)(a1 + 10900);
        v130 = (_DWORD *)(a1 + 10880);
        a5 = v373;
      }
      if (v199)
      {
        uint64_t inited = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 272), *(void *)(a1 + 280), *(void *)(a1 + 10888) + 32 * v207, (32 * v199));
        if ((inited & 0x80000000) != 0) {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v215, v216, v217, v218, "contentType");
        }
      }
      int v219 = *(_DWORD *)(a1 + 10900) + v199;
      *(_DWORD *)(a1 + 10900) = v219;
      int v187 = *(_DWORD *)(a1 + 6792);
      if (v187)
      {
        uint64_t v15 = (unsigned int *)(a1 + 4200);
        if (*(_DWORD *)(a1 + 10912) != 1) {
          *(_DWORD *)(a1 + 10900) = v219 - 1;
        }
      }
      else
      {
        uint64_t v15 = (unsigned int *)(a1 + 4200);
      }
    }
  }
  else
  {
    int v187 = *(_DWORD *)(a1 + 6792);
  }
  if (v187 != 1 && (inited & 0x80000000) == 0)
  {
    v387[0] = v15;
    uint64_t v220 = *(unsigned int *)(a1 + 4232);
    if ((int)v220 >= 1)
    {
      v221 = *(_DWORD **)(a1 + 4224);
      do
      {
        _DWORD *v221 = 0;
        v221 += 382;
        --v220;
      }
      while (v220);
    }
    uint64_t inited = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 256), *(void *)(a1 + 264), v387, 8);
    if ((inited & 0x80000000) != 0) {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v222, v223, v224, v225, "contentType");
    }
  }
  if ((inited & 0x80000000) != 0) {
    goto LABEL_424;
  }
  uint64_t inited = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 240), *(void *)(a1 + 248), *(void *)(a1 + 10936) + 8348, 4);
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_423:
    log_OutPublic(v232, (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v226, v227, v228, v229, "contentType");
    goto LABEL_424;
  }
  if (!*v130) {
    goto LABEL_424;
  }
  uint64_t v386 = 0;
  v387[0] = 0;
  uint64_t v385 = 0;
  v382 = 0;
  v383 = 0;
  v380 = 0;
  v381 = 0;
  v378 = 0;
  v379 = 0;
  v377 = 0;
  v371 = v130;
  if (v132 == 2) {
    goto LABEL_268;
  }
  if (v132 != 1)
  {
    if (v132)
    {
      unsigned int v231 = 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 6792) == 2)
      {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early emission was countermanded, regular emission took place instead", v227, v228, v229, v369);
LABEL_268:
        unsigned int v230 = 0;
        unsigned int v231 = *(_DWORD *)(a1 + 6472);
        goto LABEL_332;
      }
      unsigned int v230 = *(_DWORD *)(a1 + 6800);
      if (*(_DWORD *)(*(void *)(a1 + 10936) + 8328)) {
        goto LABEL_331;
      }
      unsigned int v231 = *(_DWORD *)(a1 + 6800);
    }
    unsigned int v230 = 0;
    goto LABEL_332;
  }
  unsigned int v230 = *(_DWORD *)(a1 + 6800);
LABEL_331:
  unsigned int v231 = *(_DWORD *)(a1 + 6472) - v230;
LABEL_332:
  uint64_t v273 = 4 * v231;
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v274 = v273;
  }
  else {
    uint64_t v274 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 400), *(void *)(a1 + 408), &v383, v274) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v275, v276, v277, v278, "contentType"); {
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184))
  }
    uint64_t v279 = v273;
  else {
    uint64_t v279 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 416), *(void *)(a1 + 424), &v382, v279) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v280, v281, v282, v283, "contentType"); {
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184))
  }
    uint64_t v284 = v273;
  else {
    uint64_t v284 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 432), *(void *)(a1 + 440), &v381, v284) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v285, v286, v287, v288, "contentType"); {
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184))
  }
    uint64_t v289 = v273;
  else {
    uint64_t v289 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 448), *(void *)(a1 + 456), &v380, v289) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v290, v291, v292, v293, "contentType"); {
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184))
  }
    uint64_t v294 = v273;
  else {
    uint64_t v294 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 464), *(void *)(a1 + 472), &v379, v294) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v295, v296, v297, v298, "contentType"); {
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184))
  }
    uint64_t v299 = v273;
  else {
    uint64_t v299 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 480), *(void *)(a1 + 488), &v378, v299) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v300, v301, v302, v303, "contentType"); {
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184))
  }
    uint64_t v304 = v273;
  else {
    uint64_t v304 = 4;
  }
  if (((*(uint64_t (**)(void, void, _DWORD **, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 496), *(void *)(a1 + 504), &v377, v304) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v305, v306, v307, v308, "contentType"); {
  uint64_t v309 = (*(uint64_t (**)(void, void, void *, void))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 288), *(void *)(a1 + 296), v387, 4 * v231);
  }
  if ((v309 & 0x80000000) != 0)
  {
LABEL_422:
    uint64_t inited = v309;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  uint64_t v310 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 304), *(void *)(a1 + 312), &v386, 4 * v231);
  if ((v310 & 0x80000000) != 0)
  {
    uint64_t inited = v310;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  uint64_t inited = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 320), *(void *)(a1 + 328), &v385, 4 * v231);
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (v231)
  {
    uint64_t v311 = 0;
    int v312 = 0;
    uint64_t v313 = v385;
    do
    {
      v314 = (_DWORD *)(*(void *)(a1 + 6464) + 28 * (v230 + v311));
      *(_DWORD *)(v387[0] + 4 * v311) = *v314;
      *(_DWORD *)(v386 + 4 * v311) = v314[2];
      *(_DWORD *)(v313 + 4 * v311) = v314[3];
      uint64_t v369 = v230 + v311;
      MFS__log_select_Diag(*(void *)(a1 + 16), 1, (uint64_t)"syntheval:Feeding segment %4d unit sequence to synth: id:%u  ofs:%d  dur:%d\n");
      uint64_t v313 = v385;
      v312 += *(_DWORD *)(v385 + 4 * v311++);
    }
    while (v231 != v311);
  }
  uint64_t v315 = *(void *)(a1 + 10936);
  if (*(_DWORD *)(v315 + 8328))
  {
    kaldi::CuMatrixBase<float>::~CuMatrixBase(v15);
    uint64_t v315 = *(void *)(a1 + 10936);
  }
  if (!*(_DWORD *)(v315 + 25184)) {
    goto LABEL_384;
  }
  uint64_t inited = mfs_Psola_CalculateAdjustments((int *)(*(void *)(a1 + 56) + 25424), (uint64_t)v15);
  if ((inited & 0x80000000) != 0)
  {
LABEL_424:
    int v269 = 2;
    goto LABEL_425;
  }
  if (!v231) {
    goto LABEL_385;
  }
  v317 = v382;
  v316 = v383;
  v319 = v380;
  v318 = v381;
  v321 = v378;
  v320 = v379;
  v322 = v377;
  uint64_t v323 = v231;
  v324 = (_DWORD *)(*(void *)(a1 + 6856) + 20);
  do
  {
    *v316++ = *(v324 - 2);
    *v317++ = *(v324 - 1);
    *v318++ = *v324;
    *v319++ = v324[1];
    *v320++ = v324[2];
    *v321++ = v324[3];
    *v322++ = v324[4];
    v324 += 10;
    --v323;
  }
  while (v323);
LABEL_384:
  if ((inited & 0x80000000) != 0) {
    goto LABEL_424;
  }
LABEL_385:
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v325 = v273;
  }
  else {
    uint64_t v325 = 4;
  }
  uint64_t v326 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 400), *(void *)(a1 + 408), v325);
  if ((v326 & 0x80000000) != 0)
  {
    uint64_t inited = v326;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v327 = v273;
  }
  else {
    uint64_t v327 = 4;
  }
  uint64_t v328 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 416), *(void *)(a1 + 424), v327);
  if ((v328 & 0x80000000) != 0)
  {
    uint64_t inited = v328;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v329 = v273;
  }
  else {
    uint64_t v329 = 4;
  }
  uint64_t v330 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 432), *(void *)(a1 + 440), v329);
  if ((v330 & 0x80000000) != 0)
  {
    uint64_t inited = v330;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v331 = v273;
  }
  else {
    uint64_t v331 = 4;
  }
  uint64_t v332 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 448), *(void *)(a1 + 456), v331);
  if ((v332 & 0x80000000) != 0)
  {
    uint64_t inited = v332;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v333 = v273;
  }
  else {
    uint64_t v333 = 4;
  }
  uint64_t v334 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 464), *(void *)(a1 + 472), v333);
  if ((v334 & 0x80000000) != 0)
  {
    uint64_t inited = v334;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v335 = v273;
  }
  else {
    uint64_t v335 = 4;
  }
  uint64_t v336 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 480), *(void *)(a1 + 488), v335);
  if ((v336 & 0x80000000) != 0)
  {
    uint64_t inited = v336;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  if (*(_DWORD *)(*(void *)(a1 + 10936) + 25184)) {
    uint64_t v337 = v273;
  }
  else {
    uint64_t v337 = 4;
  }
  uint64_t v338 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 496), *(void *)(a1 + 504), v337);
  if ((v338 & 0x80000000) != 0)
  {
    uint64_t inited = v338;
    uint64_t v232 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_423;
  }
  uint64_t v309 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 288), *(void *)(a1 + 296), v273);
  if ((v309 & 0x80000000) != 0) {
    goto LABEL_422;
  }
  uint64_t v339 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 304), *(void *)(a1 + 312), v273);
  if ((v339 & 0x80000000) != 0)
  {
    uint64_t inited = v339;
    uint64_t v351 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_437:
    log_OutPublic(v351, (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v340, v341, v342, v343, "contentType");
    goto LABEL_424;
  }
  uint64_t v344 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 320), *(void *)(a1 + 328), v273);
  if ((v344 & 0x80000000) != 0)
  {
    uint64_t inited = v344;
    uint64_t v351 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_437;
  }
  uint64_t v345 = *(void *)(a1 + 10936);
  if (*(_DWORD *)(v345 + 8328) && *(_DWORD *)(v345 + 8564))
  {
    uint64_t v346 = *(unsigned int *)(a1 + 6472);
    if (v346)
    {
      unsigned int v347 = 0;
      v348 = (int *)(*(void *)(a1 + 6464) + 16);
      do
      {
        int v349 = *v348;
        v348 += 7;
        v347 += v349;
        --v346;
      }
      while (v346);
    }
    else
    {
      unsigned int v347 = 0;
    }
    if (v347 < 3 * *(_DWORD *)(a1 + 4808) - 1) {
      goto LABEL_444;
    }
  }
  int v352 = *(_DWORD *)(a1 + 6360);
  if (!v352)
  {
LABEL_444:
    uint64_t inited = 0;
  }
  else
  {
    uint64_t inited = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 6352), (4 * v352));
    if ((inited & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v353, v341, v342, v343, "contentType");
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 58008, "%s%s%s%x", v354, v355, v356, v357, "contentType");
      goto LABEL_424;
    }
  }
  if (!*v371) {
    goto LABEL_424;
  }
  if (*(_DWORD *)(a1 + 6792))
  {
    int v358 = *(_DWORD *)(a1 + 10916) + 1;
    *(_DWORD *)(a1 + 10916) = v358;
    *(void *)(a1 + 6780) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 6792) = 1;
    int v358 = *(_DWORD *)(a1 + 10916);
  }
  uint64_t v359 = *(void *)(*(void *)(a1 + 16) + 32);
  if (v358 == *(_DWORD *)(a1 + 10912))
  {
    log_OutText(v359, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Completed synthesis", v341, v342, v343, v369);
    if (*v183)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *v183);
      uint64_t *v183 = 0;
      *(void *)(a1 + 10896) = 0;
      *(_DWORD *)(a1 + 10904) = 0;
    }
    mfs_FreeSplitFeatures(*(void *)(a1 + 16), *(void *)(a1 + 10920), *(_DWORD *)(a1 + 10912));
    *(void *)(a1 + 10912) = 0;
    *(void *)(a1 + 10920) = 0;
    FreeBET4TuningData((void *)a1, *(void *)(a1 + 6840));
    *(void *)(a1 + 6840) = 0;
    int v360 = MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (void *)(a1 + 544));
    if (v360 >= 0) {
      uint64_t inited = inited;
    }
    else {
      uint64_t inited = v360;
    }
    *a5 = 1;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Setting *peResults to FULL", v361, v362, v363, v370);
  }
  else
  {
    log_OutText(v359, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Setting *peResults to PARTIAL", v341, v342, v343, v369);
    *a5 = 2;
    _DWORD *v371 = 0;
  }
  return inited;
}

uint64_t select_bet4_ProcessEnd(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if (v3 < 0) {
    return 2229280776;
  }
  LODWORD(v4) = v3;
  FreeBET4TuningData((void *)a1, *(void *)(a1 + 6840));
  mfs_DeInitStream((unsigned int *)(a1 + 4200));
  *(_DWORD *)(a1 + 10880) = 0;
  int ProcessEnd = MFS__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 224), (void *)(a1 + 544));
  if (ProcessEnd >= 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = ProcessEnd;
  }
  uint64_t v6 = *(void *)(a1 + 10888);
  if (v6)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v6);
    *(void *)(a1 + 10888) = 0;
    *(void *)(a1 + 10896) = 0;
    *(_DWORD *)(a1 + 10904) = 0;
  }
  *(_DWORD *)(a1 + 10908) = 0;
  uint64_t v7 = *(void *)(a1 + 10920);
  if (v7)
  {
    mfs_FreeSplitFeatures(*(void *)(a1 + 16), v7, *(_DWORD *)(a1 + 10912));
    *(void *)(a1 + 10920) = 0;
  }
  FreeBET4TuningData((void *)a1, *(void *)(a1 + 6840));
  *(void *)(a1 + 6840) = 0;
  *(void *)(a1 + 10912) = 0;
  uint64_t v8 = *(void *)(a1 + 512);
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v8, *(void *)(a1 + 520));
    *(void *)(a1 + 512) = safeh_GetNullHandle();
    *(void *)(a1 + 520) = v10;
    if (v9 >= 0 || (int)v4 <= -1) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v9;
    }
  }
  uint64_t v12 = *(void *)(a1 + 528);
  if (v12)
  {
    int v13 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v12, *(void *)(a1 + 536));
    *(void *)(a1 + 528) = safeh_GetNullHandle();
    *(void *)(a1 + 536) = v14;
    if ((int)v4 > -1 && v13 < 0) {
      uint64_t v4 = v13;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v16 = *(void *)(a1 + 256);
  if (v16)
  {
    int v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v16, *(void *)(a1 + 264));
    *(void *)(a1 + 256) = safeh_GetNullHandle();
    *(void *)(a1 + 264) = v18;
    if ((int)v4 > -1 && v17 < 0) {
      uint64_t v4 = v17;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v20 = *(void *)(a1 + 272);
  if (v20)
  {
    int v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v20, *(void *)(a1 + 280));
    *(void *)(a1 + 272) = safeh_GetNullHandle();
    *(void *)(a1 + 280) = v22;
    if ((int)v4 > -1 && v21 < 0) {
      uint64_t v4 = v21;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v24 = *(void *)(a1 + 352);
  if (v24)
  {
    int v25 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v24, *(void *)(a1 + 360));
    *(void *)(a1 + 352) = safeh_GetNullHandle();
    *(void *)(a1 + 360) = v26;
    if ((int)v4 > -1 && v25 < 0) {
      uint64_t v4 = v25;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v28 = *(void *)(a1 + 368);
  if (v28)
  {
    int v29 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v28, *(void *)(a1 + 376));
    *(void *)(a1 + 368) = safeh_GetNullHandle();
    *(void *)(a1 + 376) = v30;
    if ((int)v4 > -1 && v29 < 0) {
      uint64_t v4 = v29;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v32 = *(void *)(a1 + 384);
  if (v32)
  {
    int v33 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v32, *(void *)(a1 + 392));
    *(void *)(a1 + 384) = safeh_GetNullHandle();
    *(void *)(a1 + 392) = v34;
    if ((int)v4 > -1 && v33 < 0) {
      uint64_t v4 = v33;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v36 = *(void *)(a1 + 336);
  if (v36)
  {
    int v37 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v36, *(void *)(a1 + 344));
    *(void *)(a1 + 336) = safeh_GetNullHandle();
    *(void *)(a1 + 344) = v38;
    if ((int)v4 > -1 && v37 < 0) {
      uint64_t v4 = v37;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v40 = *(void *)(a1 + 288);
  if (v40)
  {
    int v41 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v40, *(void *)(a1 + 296));
    *(void *)(a1 + 288) = safeh_GetNullHandle();
    *(void *)(a1 + 296) = v42;
    if ((int)v4 > -1 && v41 < 0) {
      uint64_t v4 = v41;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v44 = *(void *)(a1 + 304);
  if (v44)
  {
    int v45 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v44, *(void *)(a1 + 312));
    *(void *)(a1 + 304) = safeh_GetNullHandle();
    *(void *)(a1 + 312) = v46;
    if ((int)v4 > -1 && v45 < 0) {
      uint64_t v4 = v45;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v48 = *(void *)(a1 + 320);
  if (v48)
  {
    int v49 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v48, *(void *)(a1 + 328));
    *(void *)(a1 + 320) = safeh_GetNullHandle();
    *(void *)(a1 + 328) = v50;
    if ((int)v4 > -1 && v49 < 0) {
      uint64_t v4 = v49;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v52 = *(void *)(a1 + 240);
  if (v52)
  {
    int v53 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v52, *(void *)(a1 + 248));
    *(void *)(a1 + 240) = safeh_GetNullHandle();
    *(void *)(a1 + 248) = v54;
    if ((int)v4 > -1 && v53 < 0) {
      uint64_t v4 = v53;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v56 = *(void *)(a1 + 400);
  if (v56)
  {
    int v57 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v56, *(void *)(a1 + 408));
    *(void *)(a1 + 400) = safeh_GetNullHandle();
    *(void *)(a1 + 408) = v58;
    if ((int)v4 > -1 && v57 < 0) {
      uint64_t v4 = v57;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v60 = *(void *)(a1 + 416);
  if (v60)
  {
    int v61 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v60, *(void *)(a1 + 424));
    *(void *)(a1 + 416) = safeh_GetNullHandle();
    *(void *)(a1 + 424) = v62;
    if ((int)v4 > -1 && v61 < 0) {
      uint64_t v4 = v61;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v64 = *(void *)(a1 + 432);
  if (v64)
  {
    int v65 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v64, *(void *)(a1 + 440));
    *(void *)(a1 + 432) = safeh_GetNullHandle();
    *(void *)(a1 + 440) = v66;
    if ((int)v4 > -1 && v65 < 0) {
      uint64_t v4 = v65;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v68 = *(void *)(a1 + 448);
  if (v68)
  {
    int v69 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v68, *(void *)(a1 + 456));
    *(void *)(a1 + 448) = safeh_GetNullHandle();
    *(void *)(a1 + 456) = v70;
    if ((int)v4 > -1 && v69 < 0) {
      uint64_t v4 = v69;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v72 = *(void *)(a1 + 464);
  if (v72)
  {
    int v73 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v72, *(void *)(a1 + 472));
    *(void *)(a1 + 464) = safeh_GetNullHandle();
    *(void *)(a1 + 472) = v74;
    if ((int)v4 > -1 && v73 < 0) {
      uint64_t v4 = v73;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v76 = *(void *)(a1 + 480);
  if (v76)
  {
    int v77 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v76, *(void *)(a1 + 488));
    *(void *)(a1 + 480) = safeh_GetNullHandle();
    *(void *)(a1 + 488) = v78;
    if ((int)v4 > -1 && v77 < 0) {
      uint64_t v4 = v77;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v80 = *(void *)(a1 + 496);
  if (v80)
  {
    int v81 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 72))(v80, *(void *)(a1 + 504));
    *(void *)(a1 + 496) = safeh_GetNullHandle();
    *(void *)(a1 + 504) = v82;
    if ((int)v4 > -1 && v81 < 0) {
      return v81;
    }
    else {
      return v4;
    }
  }
  return v4;
}

uint64_t select_bet4_GetAlphabetInformation(uint64_t a1, int a2, char *a3)
{
  uint64_t v5 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if ((v5 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!*(void *)(a1 + 56)) {
    return 2229280785;
  }
  uint64_t v6 = v5;
  bzero(a3, 0x985uLL);
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 56) + v7 + 40032) != 255)
    {
      int v9 = &a3[(unsigned __int16)v8];
      *int v9 = v7;
      v9[514] = *(unsigned char *)(*(void *)(a1 + 56) + *(unsigned __int8 *)(*(void *)(a1 + 56) + v7 + 40032) + 39004);
      v9[257] = *(unsigned char *)(*(void *)(a1 + 56) + *(unsigned __int8 *)(*(void *)(a1 + 56) + v7 + 40032) + 38747);
      v9[771] = *(unsigned char *)(*(void *)(a1 + 56) + *(unsigned __int8 *)(*(void *)(a1 + 56) + v7 + 40032) + 39261);
      v9[1028] = *(unsigned char *)(*(void *)(a1 + 56) + *(unsigned __int8 *)(*(void *)(a1 + 56) + v7 + 40032) + 39518);
      ++v8;
    }
    ++v7;
  }
  while (v7 != 256);
  __strcpy_chk();
  uint64_t v10 = *(const char ***)(*(void *)(a1 + 56) + 40352);
  if (v10)
  {
    uint64_t v11 = *v10;
    if (*v10)
    {
      int v12 = 0;
      int v13 = a3 + 1413;
      do
      {
        uint64_t v14 = strcat(v13, v11);
        *(_WORD *)&v13[strlen(v14)] = 32;
        uint64_t v11 = *(const char **)(*(void *)(*(void *)(a1 + 56) + 40352) + 8 * (unsigned __int16)++v12);
      }
      while (v11);
    }
  }
  return v6;
}

uint64_t select_bet4_QueryCapability(uint64_t a1, int a2, const char *a3, _DWORD *a4)
{
  uint64_t v7 = 2229280768;
  uint64_t v8 = safeh_HandleCheck(a1, a2, 25968, 10992);
  if ((v8 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (!v9) {
    return 2229280785;
  }
  uint64_t v10 = v8;
  uint64_t v11 = (_DWORD *)(v9 + 41056);
  if (!strcmp(a3, "PRM"))
  {
    if ((*v11 & 0x80000000) == 0 || (v11[2] & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (!strcmp(a3, "BND"))
  {
    if ((v11[1] & 0x80000000) == 0
      || (v11[2] & 0x80000000) == 0
      || (v11[3] & 0x80000000) == 0
      || (v11[4] & 0x80000000) == 0
      || (v11[5] & 0x80000000) == 0
      || (v11[6] & 0x80000000) == 0
      || (v11[7] & 0x80000000) == 0
      || (v11[8] & 0x80000000) == 0
      || (v11[9] & 0x80000000) == 0
      || (v11[11] & 0x80000000) == 0)
    {
LABEL_22:
      *a4 = 1;
      return v10;
    }
LABEL_11:
    *a4 = 0;
    return v10;
  }
  if (!strcmp(a3, "max-PRM"))
  {
    *(unsigned char *)a4 = 3;
    return v10;
  }
  return v7;
}

uint64_t select_bet4_loc_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  __src = 0;
  memset(__dst, 0, sizeof(__dst));
  uint64_t inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  memcpy(__dst, __src, sizeof(__dst));
  *(_OWORD *)&__dst[32] = *(_OWORD *)(a5 + 32);
  double v177 = 0;
  uint64_t v176 = 0;
  uint64_t v175 = 0;
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  uint64_t v170 = 0;
  unsigned int v169 = 0;
  __s1 = 0;
  *(void *)(a4 + 32) = 0;
  int v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "SEL4", 1031, (uint64_t *)&v177);
  if (v11 < 0) {
    return (v11 & 0x1FFFu) - 2065686528;
  }
  uint64_t v12 = heap_Calloc(*(void **)&__dst[8], 1, 66912);
  uint64_t v17 = v12;
  if (!v12)
  {
    log_OutPublic(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 58000, 0, v13, v14, v15, v16, v158);
    uint64_t Data = 2229280778;
    goto LABEL_47;
  }
  uint64_t v18 = (_DWORD *)(v12 + 66316);
  uint64_t v19 = (_DWORD *)(v12 + 25312);
  __strcpy_chk();
  __strcpy_chk();
  *(void *)&long long v20 = -1;
  *((void *)&v20 + 1) = -1;
  *(_OWORD *)(v17 + 40032) = v20;
  *(_OWORD *)(v17 + 40048) = v20;
  *(_OWORD *)(v17 + 40064) = v20;
  *(_OWORD *)(v17 + 40080) = v20;
  *(_OWORD *)(v17 + 40096) = v20;
  *(_OWORD *)(v17 + 40112) = v20;
  *(_OWORD *)(v17 + 40128) = v20;
  *(_OWORD *)(v17 + 40144) = v20;
  *(_OWORD *)(v17 + 40160) = v20;
  *(_OWORD *)(v17 + 40176) = v20;
  *(_OWORD *)(v17 + 40192) = v20;
  *(_OWORD *)(v17 + 40208) = v20;
  *(_OWORD *)(v17 + 40224) = v20;
  *(_OWORD *)(v17 + 40240) = v20;
  *(_OWORD *)(v17 + 40256) = v20;
  *(_OWORD *)(v17 + 40272) = v20;
  *(_OWORD *)(v17 + 41204) = v20;
  *(_OWORD *)(v17 + 40936) = v20;
  *(_OWORD *)(v17 + 40952) = v20;
  *(_OWORD *)(v17 + 40968) = v20;
  *(_OWORD *)(v17 + 40984) = v20;
  *(_OWORD *)(v17 + 41000) = v20;
  *(_OWORD *)(v17 + 41016) = v20;
  *(_OWORD *)(v17 + 41032) = v20;
  *(_OWORD *)(v17 + 41048) = v20;
  *(_OWORD *)(v17 + 41064) = v20;
  *(_OWORD *)(v17 + 41080) = v20;
  *(_OWORD *)(v17 + 41096) = v20;
  *(_OWORD *)(v17 + 41112) = v20;
  *(_OWORD *)(v17 + 41128) = v20;
  *(_OWORD *)(v17 + 41144) = v20;
  *(_OWORD *)(v17 + 41160) = v20;
  *(_OWORD *)(v17 + 41176) = v20;
  *(_OWORD *)(v17 + 41192) = v20;
  *(_OWORD *)(v17 + 41280) = v20;
  *(_OWORD *)(v17 + 41264) = v20;
  *(_DWORD *)(v17 + 40412) = 1;
  if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4maxstaticmemmap", (unsigned int *)(v17 + 66316)) & 0x80000000) != 0) {
    *uint64_t v18 = -1;
  }
  *(unsigned char *)(v17 + 66842) = 0;
  mfs_InitParam(v17 + 128);
  memset(v179, 0, sizeof(v179));
  uint64_t v22 = select_bet4_ParseRiff((uint64_t)__dst, v17, (uint64_t)v177, 0, (const char *)v179, 0, 0, v21);
  if ((v22 & 0x80000000) != 0)
  {
    uint64_t Data = v22;
    char v178 = 0;
    if (LOBYTE(v179[0]))
    {
      int v52 = 0;
      do
      {
        __strcat_chk();
        __strcat_chk();
        ++v52;
      }
      while (*((unsigned char *)v179 + 5 * (unsigned __int16)v52));
    }
    log_OutPublic(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 58003, "%s%s%s%s%s%x", v23, v24, v25, v26, "file");
    goto LABEL_47;
  }
  paramc_ParamSetStr(*(uint64_t *)&__dst[40], (uint64_t)"voicecomponentid", (char *)(v17 + 66842));
  if (!*(unsigned char *)(v17 + 7519) || *(int *)(v17 + 260) <= 0)
  {
    uint64_t Data = 2229280772;
    log_OutPublic(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 58006, "%s%s", v27, v28, v29, v30, "file");
    goto LABEL_47;
  }
  uint64_t v31 = (_DWORD *)(v17 + 25424);
  uint64_t v32 = *(uint64_t **)(v17 + 40352);
  if (v32)
  {
    uint64_t v33 = *v32;
    if (v33)
    {
      uint64_t v34 = 0;
      int v35 = 0;
      do
      {
        *(void *)(v17 + 8 * v34 + 5432) = v33;
        uint64_t v34 = (unsigned __int16)++v35;
        uint64_t v33 = *(void *)(*(void *)(v17 + 40352) + 8 * (unsigned __int16)v35);
      }
      while (v33);
    }
  }
  log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Memory mapped %s: %lu bytes in %lu chunks", v28, v29, v30, (uint64_t)a3);
  uint64_t v36 = mfs_InitData((uint64_t)__dst, (void *)(v17 + 25424), (_DWORD *)(v17 + 128));
  if ((v36 & 0x80000000) != 0)
  {
    uint64_t Data = v36;
    goto LABEL_47;
  }
  uint64_t Data = mfs_LoadData((uint64_t)__dst, (int *)(v17 + 25424), v17 + 128);
  if ((Data & 0x80000000) == 0)
  {
    logAverageSizesOfClusters((uint64_t)__dst, (int *)(v17 + 25424), 1u);
    logAverageSizesOfClusters((uint64_t)__dst, (int *)(v17 + 25424), 2u);
    logAverageSizesOfClusters((uint64_t)__dst, (int *)(v17 + 25424), 0);
    *(_WORD *)(v17 + 41466) = *v31;
    *(void *)&long long v45 = 0x100000001;
    *((void *)&v45 + 1) = 0x100000001;
    *(_OWORD *)(v17 + 41056) = v45;
    *(_OWORD *)(v17 + 41072) = v45;
    *(void *)(v17 + 41088) = 0x100000001;
    *(_DWORD *)(v17 + 41100) = 1;
    *(_OWORD *)(v17 + 41108) = v45;
    *(_OWORD *)(v17 + 41124) = v45;
    *(_OWORD *)(v17 + 41140) = v45;
    *(_OWORD *)(v17 + 41156) = v45;
    *(_OWORD *)(v17 + 41172) = v45;
    *(_OWORD *)(v17 + 41188) = v45;
    *(_DWORD *)(v17 + 41204) = 1;
    *(_DWORD *)(v17 + 40638) = 33620481;
    *(unsigned char *)(v17 + 40665) = 1;
    *(void *)(v17 + 40643) = 0x101010101010101;
    *(void *)(v17 + 40651) = 0x101010101010101;
    *(_DWORD *)(v17 + 40687) = -1;
    *(_WORD *)(v17 + 40691) = -255;
    BYTE1(v45) = 1;
    WORD1(v45) = 257;
    BYTE5(v45) = 1;
    WORD3(v45) = 257;
    BYTE9(v45) = 1;
    WORD5(v45) = 257;
    BYTE13(v45) = 1;
    HIWORD(v45) = 257;
    *(_OWORD *)(v17 + 40786) = v45;
    *(_OWORD *)(v17 + 40773) = v45;
    *(_OWORD *)(v17 + 40757) = v45;
    *(void *)(v17 + 40809) = 0x101010101010101;
    *(void *)(v17 + 40817) = 0x101010101010101;
    *(void *)(v17 + 40825) = 0x101010101010101;
    if ((*(_DWORD *)(v17 + 40992) & 0x80000000) == 0)
    {
      *(_WORD *)(v17 + 40667) = 257;
      if ((*(_DWORD *)(v17 + 41096) & 0x80000000) == 0) {
        *(unsigned char *)(v17 + 40711) = 1;
      }
    }
    if ((*(_DWORD *)(v17 + 41008) & 0x80000000) == 0) {
      *(unsigned char *)(v17 + 40669) = 1;
    }
    if ((*(_DWORD *)(v17 + 41024) & 0x80000000) == 0) {
      *(unsigned char *)(v17 + 40670) = 1;
    }
    if ((*(_DWORD *)(v17 + 41028) & 0x80000000) == 0) {
      *(unsigned char *)(v17 + 40671) = 1;
    }
    *(_WORD *)(v17 + 40807) = 257;
    if ((*(_DWORD *)(v17 + 41032) & 0x80000000) == 0) {
      *(unsigned char *)(v17 + 40672) = 1;
    }
    if ((*(_DWORD *)(v17 + 41036) & 0x80000000) == 0) {
      *(unsigned char *)(v17 + 40673) = 1;
    }
    if ((*(_DWORD *)(v17 + 40956) & 0x80000000) == 0) {
      *(_WORD *)(v17 + 40661) = 257;
    }
    if ((*(_DWORD *)(v17 + 41280) & 0x80000000) == 0 || (*(_DWORD *)(v17 + 41284) & 0x80000000) == 0) {
      *(unsigned char *)(v17 + 40660) = 8;
    }
    if ((*(_DWORD *)(v17 + 40960) & 0x80000000) == 0) {
      *(_WORD *)(v17 + 40663) = 257;
    }
    if (*(_DWORD *)(v17 + 40448)) {
      *(unsigned char *)(v17 + 40682) = 9;
    }
    *(_WORD *)(v17 + 40712) = 257;
    *(void *)(v17 + 40701) = 0x101010101010101;
    *(_WORD *)(v17 + 40709) = 257;
    if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4silvit", (unsigned int *)&v173) & 0x80000000) != 0)
    {
      uint64_t v50 = *(void *)&__dst[32];
      uint64_t v49 = *(unsigned int *)(v17 + 8384);
      uint64_t v51 = "Silence Prune Max remains at its default of %d";
    }
    else
    {
      uint64_t v49 = v173;
      *(_DWORD *)(v17 + 8384) = v173;
      uint64_t v50 = *(void *)&__dst[32];
      uint64_t v51 = "Silence Prune Max set to %d from pipeline header";
    }
    log_OutText(v50, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v51, v46, v47, v48, v49);
    if ((paramc_ParamGetStr(*(uint64_t *)&__dst[40], (uint64_t)"bet4suppresschunking", &__s1) & 0x80000000) != 0)
    {
      *(_DWORD *)(v17 + 8688) = 0;
    }
    else
    {
      int v57 = strcmp(__s1, "yes");
      *(_DWORD *)(v17 + 8688) = v57 == 0;
      if (!v57)
      {
        uint64_t v58 = "BET4 input chunking will be switched off, from pipeline header";
        goto LABEL_63;
      }
    }
    uint64_t v58 = "BET4 input chunking will not be switched off";
LABEL_63:
    log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v58, v54, v55, v56, v159);
    if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4psolamode", (unsigned int *)&v172 + 1) & 0x80000000) != 0)
    {
      uint64_t v63 = *(void *)&__dst[32];
      uint64_t v62 = *v19;
      uint64_t v64 = "PSOLA mode remains at its default of %d";
    }
    else
    {
      uint64_t v62 = HIDWORD(v172);
      if (!HIDWORD(v172))
      {
        *uint64_t v19 = 0;
        log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"PSOLA mode set to zero (i.e. disabled) from pipeline header", v59, v60, v61, v160);
LABEL_69:
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionadditionalstates", &v169) & 0x80000000) != 0)
        {
          uint64_t v69 = *(void *)&__dst[32];
          uint64_t v68 = *(unsigned int *)(v17 + 8696);
          uint64_t v70 = "Early-emission additional states remains at its default of %d (ignored - was only used in old obsolete v"
                "ersion of early-emission)";
        }
        else
        {
          uint64_t v68 = v169;
          *(_DWORD *)(v17 + 8696) = v169;
          uint64_t v69 = *(void *)&__dst[32];
          uint64_t v70 = "Early-emission additional search states set to %d from pipeline header (ignored - was only used in old o"
                "bsolete version of early-emission)";
        }
        log_OutText(v69, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v70, v65, v66, v67, v68);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionminphonsfirst", (unsigned int *)&v170 + 1) & 0x80000000) != 0)
        {
          uint64_t v75 = *(void *)&__dst[32];
          uint64_t v74 = *(unsigned int *)(v17 + 8700);
          uint64_t v76 = "Early-emission minimum number of states for first emission remains at its default of %d";
        }
        else
        {
          uint64_t v74 = (*v31 * HIDWORD(v170));
          *(_DWORD *)(v17 + 8700) = v74;
          uint64_t v75 = *(void *)&__dst[32];
          uint64_t v76 = "Early-emission minimum number of states for first emission set to %d from pipeline header";
        }
        log_OutText(v75, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v76, v71, v72, v73, v74);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionminphonssubsequent", (unsigned int *)&v170 + 1) & 0x80000000) != 0)
        {
          uint64_t v80 = *(_DWORD *)(v17 + 8700) >> 1;
          *(_DWORD *)(v17 + 8704) = v80;
          uint64_t v81 = *(void *)&__dst[32];
          uint64_t v82 = "Early-emission minimum number of states for subsequent emission remains at its default of %d";
        }
        else
        {
          uint64_t v80 = (*v31 * HIDWORD(v170));
          *(_DWORD *)(v17 + 8704) = v80;
          uint64_t v81 = *(void *)&__dst[32];
          uint64_t v82 = "Early-emission minimum number of states for subsequent emission set to %d from pipeline header";
        }
        log_OutText(v81, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v82, v77, v78, v79, v80);
        unsigned int v83 = *(_DWORD *)(v17 + 8704);
        if (v83 >= 1000 * *v31) {
          *(_DWORD *)(v17 + 8704) = v83 % 0x3E8;
        }
        int v84 = (_DWORD *)(v17 + 8708);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionmaxhypotheses", (unsigned int *)(v17 + 8708)) & 0x80000000) != 0)
        {
          *int v84 = -1;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum number of hypotheses: not set", v85, v86, v87, v161);
        }
        else
        {
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum number of hypotheses set to %d from pipeline header", v85, v86, v87, *v84);
        }
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlyemissionmaxphonambiguitywindow", (unsigned int *)&v170) & 0x80000000) != 0)
        {
          *(_DWORD *)(v17 + 8712) = -1;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum size of ambiguity window: not set", v88, v89, v90, v162);
        }
        else
        {
          uint64_t v91 = v170;
          *(_DWORD *)(v17 + 8712) = *v31 * v170;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Early-emission maximum size of ambiguity window set to %d phons from pipeline header", v88, v89, v90, v91);
        }
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"applicationstartbuffersizebytes", (unsigned int *)&v170) & 0x80000000) != 0|| *(int *)(v17 + 136) < 1)
        {
          *(_DWORD *)(v17 + 8716) = -1;
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Application start buffer size: not set", v92, v93, v94, v163);
        }
        else
        {
          log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Application start buffer size is set to %d bytes from pipeline header", v92, v93, v94, v170);
          *(_DWORD *)(v17 + 8716) = 1000 * (int)v170 / (2 * *(_DWORD *)(v17 + 136));
        }
        *(_DWORD *)(v17 + 8692) = select_bet4_UpdateEarlyEmission((uint64_t)__dst);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4beamwidth", (unsigned int *)&v176 + 1) & 0x80000000) != 0
          || !HIDWORD(v176))
        {
          uint64_t v99 = *(void *)&__dst[32];
          *(double *)&uint64_t v100 = *(float *)(v17 + 8376);
          uint64_t v101 = "Beam Width remains at its default of %.2f";
        }
        else
        {
          float v98 = (double)HIDWORD(v176) / 1000.0;
          *(float *)(v17 + 8376) = v98;
          uint64_t v99 = *(void *)&__dst[32];
          *(double *)&uint64_t v100 = v98;
          uint64_t v101 = "Beam Width set to %.2f from pipeline header";
        }
        log_OutText(v99, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v101, v95, v96, v97, v100);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodelimit", (unsigned int *)&v176) & 0x80000000) != 0
          || (uint64_t v105 = v176, !v176))
        {
          uint64_t v106 = *(void *)&__dst[32];
          uint64_t v105 = *(unsigned int *)(v17 + 8352);
          unsigned int v107 = "Node Limit remains at its default of %d";
        }
        else
        {
          *(_DWORD *)(v17 + 8352) = v176;
          *(_DWORD *)(v17 + 8356) = v105;
          uint64_t v106 = *(void *)&__dst[32];
          unsigned int v107 = "Node Limit set to %d from pipeline header";
        }
        log_OutText(v106, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v107, v102, v103, v104, v105);
        if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4prunepercent", (unsigned int *)&v175 + 1) & 0x80000000) != 0)
        {
          uint64_t v112 = *(void *)&__dst[32];
          *(double *)&uint64_t v113 = *(float *)(v17 + 8360);
          unsigned int v114 = "Prune Percent remains at its default of %.2f";
        }
        else
        {
          if (HIDWORD(v175) > 0x64)
          {
            log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Prune Percent value from pipeline header out of range, ignored.", v108, v109, v110, v164);
LABEL_104:
            if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4prunepercent", (unsigned int *)&v175) & 0x80000000) != 0)
            {
              uint64_t v119 = *(void *)&__dst[32];
              *(double *)&uint64_t v120 = *(float *)(v17 + 8364);
              uint64_t v121 = "Node Prune Percent remains at its default of %.2f";
            }
            else
            {
              if (v175 > 0x64)
              {
                log_OutText(*(uint64_t *)&__dst[32], (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Node Prune Percent value from pipeline header out of range, ignored.", v115, v116, v117, v165);
LABEL_110:
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodeprunemax", (unsigned int *)&v174 + 1) & 0x80000000) != 0|| (uint64_t v125 = HIDWORD(v174), !HIDWORD(v174)))
                {
                  uint64_t v126 = *(void *)&__dst[32];
                  uint64_t v125 = *(unsigned int *)(v17 + 8368);
                  long long v127 = "Node Prune Max remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8368) = HIDWORD(v174);
                  uint64_t v126 = *(void *)&__dst[32];
                  long long v127 = "Node Prune Max set to %d from pipeline header";
                }
                log_OutText(v126, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v127, v122, v123, v124, v125);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodeprunemaxunvoiced", (unsigned int *)&v174) & 0x80000000) != 0|| (uint64_t v131 = v174, !v174))
                {
                  uint64_t v132 = *(void *)&__dst[32];
                  uint64_t v131 = *(unsigned int *)(v17 + 8372);
                  uint64_t v133 = "Node Prune Max Unvoiced remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8372) = v174;
                  uint64_t v132 = *(void *)&__dst[32];
                  uint64_t v133 = "Node Prune Max Unvoiced set to %d from pipeline header";
                }
                log_OutText(v132, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v133, v128, v129, v130, v131);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4searchmode", (unsigned int *)&v173 + 1) & 0x80000000) != 0)
                {
                  uint64_t v138 = *(void *)&__dst[32];
                  uint64_t v137 = *(unsigned int *)(v17 + 9096);
                  uint64_t v139 = "Search mode remains at its default of %d";
                }
                else
                {
                  uint64_t v137 = HIDWORD(v173);
                  *(_DWORD *)(v17 + 9096) = HIDWORD(v173);
                  uint64_t v138 = *(void *)&__dst[32];
                  uint64_t v139 = "Search mode set to %d from pipeline header";
                }
                log_OutText(v138, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v139, v134, v135, v136, v137);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodescoremax", (unsigned int *)&v172) & 0x80000000) != 0
                  || (uint64_t v143 = v172, !v172))
                {
                  uint64_t v144 = *(void *)&__dst[32];
                  uint64_t v143 = *(unsigned int *)(v17 + 8444);
                  uint64_t v145 = "Node Score Max remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8444) = v172;
                  uint64_t v144 = *(void *)&__dst[32];
                  uint64_t v145 = "Node Score Max set to %d from pipeline header";
                }
                log_OutText(v144, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v145, v140, v141, v142, v143);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4nodeprunemin", (unsigned int *)&v171 + 1) & 0x80000000) != 0|| (uint64_t v149 = HIDWORD(v171), !HIDWORD(v171)))
                {
                  uint64_t v150 = *(void *)&__dst[32];
                  uint64_t v149 = *(unsigned int *)(v17 + 8448);
                  uint64_t v151 = "Node Prune Min remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8448) = HIDWORD(v171);
                  uint64_t v150 = *(void *)&__dst[32];
                  uint64_t v151 = "Node Prune Min set to %d from pipeline header";
                }
                log_OutText(v150, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v151, v146, v147, v148, v149);
                if ((paramc_ParamGetUInt(*(uint64_t *)&__dst[40], (uint64_t)"bet4earlypruning", (unsigned int *)&v171) & 0x80000000) != 0
                  || (uint64_t v155 = v171, !v171))
                {
                  uint64_t v156 = *(void *)&__dst[32];
                  uint64_t v155 = *(unsigned int *)(v17 + 8452);
                  uint64_t v157 = "Early Pruning remains at its default of %d";
                }
                else
                {
                  *(_DWORD *)(v17 + 8452) = v171;
                  uint64_t v156 = *(void *)&__dst[32];
                  uint64_t v157 = "Early Pruning set to %d from pipeline header";
                }
                log_OutText(v156, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v157, v152, v153, v154, v155);
                goto LABEL_47;
              }
              float v118 = (double)v175 / 100.0;
              *(float *)(v17 + 8364) = v118;
              uint64_t v119 = *(void *)&__dst[32];
              *(double *)&uint64_t v120 = v118;
              uint64_t v121 = "Node Prune Percent set to %.2f from pipeline header";
            }
            log_OutText(v119, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v121, v115, v116, v117, v120);
            goto LABEL_110;
          }
          float v111 = (double)HIDWORD(v175) / 100.0;
          *(float *)(v17 + 8360) = v111;
          uint64_t v112 = *(void *)&__dst[32];
          *(double *)&uint64_t v113 = v111;
          unsigned int v114 = "Prune Percent set to %.2f from pipeline header";
        }
        log_OutText(v112, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v114, v108, v109, v110, v113);
        goto LABEL_104;
      }
      *uint64_t v19 = HIDWORD(v172);
      uint64_t v63 = *(void *)&__dst[32];
      uint64_t v64 = "PSOLA mode set to non-zero %d from pipeline header";
    }
    log_OutText(v63, (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v64, v59, v60, v61, v62);
    goto LABEL_69;
  }
LABEL_47:
  if (v177)
  {
    ssftriff_reader_ObjClose(v177, v37, v38, v39, v40, v41, v42, v43);
    double v177 = 0;
  }
  if ((Data & 0x80000000) != 0)
  {
    if ((Data & 0x7FF01FFF) == 0xA200014) {
      uint64_t Data = 2229280772;
    }
    else {
      uint64_t Data = Data;
    }
    select_bet4_loc_VoiceClose(__dst, v17);
  }
  else
  {
    *(void *)(a4 + 32) = v17;
  }
  return Data;
}

uint64_t select_bet4_loc_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0) {
    select_bet4_loc_VoiceClose(v6, *(void *)(a3 + 32));
  }
  return inited;
}

uint64_t select_bet4_loc_ParamCheckChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  *a4 = 1;
  if (!strcmp(__s1, "frequencyhz"))
  {
    if (*(void *)(a1 + 256))
    {
      uint64_t result = 2229280785;
LABEL_12:
      *a4 = 0;
      return result;
    }
    return 0;
  }
  if (!strcmp(__s1, "waitfactor"))
  {
    if ((LH_atoi(a3) & 0x80000000) != 0)
    {
LABEL_11:
      uint64_t result = 2229280783;
      goto LABEL_12;
    }
    return 0;
  }
  if (strcmp(__s1, "bet4suppresschunking")) {
    return 0;
  }
  uint64_t result = strcmp(a3, "yes");
  if (result)
  {
    uint64_t result = strcmp(a3, "no");
    if (result) {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t select_bet4_loc_ParamLearnChange(void *a1, char *__s1, const char *a3)
{
  if (!strcmp(__s1, "frequencyhz"))
  {
    if (a1[32]) {
      return 2229280785;
    }
    else {
      return 0;
    }
  }
  else if (!strcmp(__s1, "rate") || !strcmp(__s1, "waitfactor"))
  {
    uint64_t v13 = LH_atoi(a3);
    return select_bet4_loc_ParamSet((uint64_t)a1, __s1, (uint64_t)v13);
  }
  else
  {
    if (!strcmp(__s1, "bet4suppresschunking"))
    {
      uint64_t v6 = a1[1367];
      float v7 = *(float *)(v6 + 8248);
      if (v7 > 0.0 && v7 < 10.0)
      {
        *(_DWORD *)(v6 + 8560) = strcmp(a3, "yes") == 0;
        log_OutText(*(void *)(a1[2] + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Set suppress-chunking value %s", v9, v10, v11, (uint64_t)a3);
      }
    }
    return 0;
  }
}

uint64_t select_bet4_loc_VoiceSetup(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[7];
  for (uint64_t i = 8; i != 28; i += 2)
  {
    uint64_t v5 = a1[i];
    if (v5)
    {
      brk_DataClose(*(void *)(v2 + 24), v5);
      a1[i] = 0;
    }
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = (_DWORD *)(v3 + 26656);
  uint64_t v7 = 8;
  while (1)
  {
    if (!*((void *)v6 - 1))
    {
      if (*v6)
      {
        uint64_t result = brk_DataOpenEx(*(void *)(v2 + 24), v3, 0, (uint64_t)&a1[v7]);
        if ((result & 0x80000000) != 0) {
          break;
        }
      }
    }
    v6 += 8;
    v7 += 2;
    if (v7 == 28)
    {
      a1[1367] = v3 + 128;
      return select_bet4_loc_SetSynthParams((uint64_t)a1);
    }
  }
  return result;
}

uint64_t select_bet4_loc_SetSynthParamFloat(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __sprintf_chk(v11, 0, 0x20uLL, "%f", a3);
  uint64_t v9 = paramc_ParamSetStr(*(void *)(a1 + 40), a2, v11);
  if ((v9 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 58009, "%s%s%s%f%s%x", v5, v6, v7, v8, "parameter");
  }
  return v9;
}

uint64_t select_bet4_loc_ParamSet(uint64_t a1, char *__s1, uint64_t a3)
{
  if (strcmp(__s1, "waitfactor")) {
    return 0;
  }
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 232) = a3;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet4_ParseRiff(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v504 = a7;
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v11 = a3;
  uint64_t v525 = *MEMORY[0x263EF8340];
  unsigned int v497 = 0;
  uint64_t v501 = a2 + 66296;
  v496 = (uint64_t *)(a2 + 41256);
  v509 = (int *)(a2 + 16560);
  int v520 = 0;
  unsigned __int8 v519 = 0;
  *(_DWORD *)__src = 0;
  __dst = (char *)&a5[5 * a4];
  v491 = (void *)(a2 + 7484);
  v498 = (void *)(a2 + 40388);
  v468 = (void *)(a2 + 14632);
  v469 = (void *)(a2 + 16792);
  v470 = (void *)(a2 + 17272);
  v471 = (void *)(a2 + 17032);
  v472 = (void *)(a2 + 16552);
  v473 = (void *)(a2 + 23512);
  v474 = (void *)(a2 + 23272);
  v475 = (void *)(a2 + 18472);
  v477 = (void *)(a2 + 9352);
  v476 = (void *)(a2 + 9592);
  v479 = (void *)(a2 + 18232);
  v489 = (void *)(a2 + 11992);
  v499 = (uint64_t *)(a2 + 7744);
  v500 = (char *)(a2 + 66842);
  v485 = (void *)(a2 + 66304);
  v487 = (void *)(a2 + 66288);
  v492 = (uint64_t *)(a2 + 41320);
  v494 = (uint64_t *)(a2 + 41312);
  v478 = (uint64_t *)(a2 + 40360);
  v480 = (uint64_t *)(a2 + 40352);
  v483 = (uint64_t *)(a2 + 41224);
  v482 = (uint64_t *)(a2 + 41232);
  v481 = (uint64_t *)(a2 + 41240);
  v484 = (unsigned char *)(a2 + 66160);
  v486 = (unsigned char *)(a2 + 40288);
  v488 = (unsigned char *)(a2 + 39261);
  v490 = (unsigned char *)(a2 + 39518);
  v493 = (unsigned char *)(a2 + 39004);
  v495 = (unsigned char *)(a2 + 38747);
  __s = (char *)(a2 + 38490);
  uint64_t v13 = a5 + 5;
  v508 = a5 + 5;
  do
  {
    uint64_t v14 = ssftriff_reader_OpenChunk(v11, __src, (unsigned int *)&v520, 0, (uint64_t)a5, a6, a7, a8);
    if ((v14 & 0x80000000) != 0) {
      break;
    }
    strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (!strcmp(v9, "FEEX"))
      {
        if (!(*(_DWORD *)__src ^ 0x54414356 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            Chunkuint64_t Data = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
          }
          uint64_t v62 = a1;
          uint64_t v63 = a2;
          uint64_t v64 = v11;
          uint64_t v65 = 2;
          goto LABEL_1034;
        }
        if (!(*(_DWORD *)__src ^ 0x504F4256 | v519))
        {
          v523 = 0;
          if (v8)
          {
            uint64_t v70 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v70;
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
            uint64_t v70 = v523;
          }
          if (v520 >= 0xF8) {
            size_t v362 = 248;
          }
          else {
            size_t v362 = v520;
          }
          memcpy(v498, v70, v362);
          goto LABEL_1229;
        }
        if (!(*(_DWORD *)__src ^ 0x33455250 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
          }
          unsigned int v386 = v520;
          if (v520 >= 2)
          {
            unsigned __int16 v387 = 0;
            do
            {
              if (*((unsigned __int16 *)v523 + v387) < 0x47u)
              {
                *(_DWORD *)(a2 + 4 * *((unsigned __int16 *)v523 + v387) + 40936) = 1;
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v327, v328, v329, *((unsigned __int16 *)v523 + v387));
                unsigned int v386 = v520;
              }
              ++v387;
            }
            while (v386 >> 1 > v387);
          }
          goto LABEL_1219;
        }
        if (!(*(_DWORD *)__src ^ 0x33415254 | v519))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
          }
          unsigned int v390 = v520;
          if (v520 >= 2)
          {
            unsigned __int16 v391 = 0;
            do
            {
              if (*((unsigned __int16 *)v523 + v391) < 8u)
              {
                *(_DWORD *)(a2 + 4 * *((unsigned __int16 *)v523 + v391) + 41264) = 1;
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v349, v350, v351, *((unsigned __int16 *)v523 + v391));
                unsigned int v390 = v520;
              }
              ++v391;
            }
            while (v390 >> 1 > v391);
          }
          goto LABEL_1219;
        }
        if (*(_DWORD *)__src ^ 0x46415254 | v519)
        {
          if (!(*(_DWORD *)__src ^ 0x334D4850 | v519))
          {
            v523 = 0;
            if (v8)
            {
              v388 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
              v523 = v388;
            }
            else
            {
              uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
              if ((v14 & 0x80000000) != 0) {
                return v14;
              }
              v388 = v523;
            }
            if (v520 >= 0x100) {
              size_t v410 = 256;
            }
            else {
              size_t v410 = v520;
            }
            memcpy(v491, v388, v410);
            goto LABEL_1219;
          }
          if (*(_DWORD *)__src ^ 0x52585443 | v519) {
            goto LABEL_1216;
          }
          uint64_t v39 = a1;
        }
        else
        {
          v523 = 0;
          if (v8)
          {
            v383 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v383;
          }
          else
          {
            Chunkuint64_t Data = ssftriff_reader_GetChunkData(v11, v520, &v523, v24, v25, v26, v27, v28);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
            v383 = v523;
          }
          *((_WORD *)__s + 1379) = *v383;
          ssftriff_reader_Seek(v11, 4u, 1);
          uint64_t v404 = heap_Calloc(*(void **)(a1 + 8), 12, *((unsigned __int16 *)__s + 1379));
          uint64_t *v496 = v404;
          if (!v404) {
            return 2229280778;
          }
          uint64_t v39 = a1;
        }
        int v345 = select_bet4_ParseRiff(v39, a2, v11, 2, v9, 0, 0);
        goto LABEL_1177;
      }
      if (!strcmp(v9, "STM3"))
      {
        *(_DWORD *)v521 = 0;
        uint64_t v56 = *(int *)(a2 + 260);
        if (*(_DWORD *)__src ^ 0x33435453 | v519)
        {
          if (*(_DWORD *)__src ^ 0x33455254 | v519)
          {
            if (*(_DWORD *)__src ^ 0x33464450 | v519)
            {
              if (*(_DWORD *)__src ^ 0x334E4957 | v519)
              {
                if (*(_DWORD *)__src ^ 0x34435453 | v519)
                {
                  if (!(*(_DWORD *)__src ^ 0x34575453 | v519))
                  {
                    v523 = 0;
                    if (v8)
                    {
                      v403 = (_DWORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
                    }
                    else
                    {
                      uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v29, v30, v31, v32, v33);
                      if ((v14 & 0x80000000) != 0) {
                        return v14;
                      }
                      v403 = v523;
                    }
                    uint64_t v418 = a2 + 4 * v56;
                    *(_DWORD *)(v418 + 8168) = *v403;
                    *(_DWORD *)(v418 + 8208) = v403[1];
                    goto LABEL_1219;
                  }
                  uint64_t v57 = *(int *)(a2 + 260);
                  if (*(_DWORD *)__src ^ 0x34445155 | v519)
                  {
                    if (!(*(_DWORD *)__src ^ 0x34425155 | v519))
                    {
                      uint64_t v58 = v520;
                      uint64_t v59 = a2;
                      uint64_t v60 = v11;
                      unsigned int v61 = 14;
                      goto LABEL_1208;
                    }
                    if (*(_DWORD *)__src ^ 0x34504E55 | v519)
                    {
                      if (!(*(_DWORD *)__src ^ 0x34494350 | v519))
                      {
                        Mfsuint64_t Data = select_bet4_ParseRiff(a1, a2, v11, 2, v9, v8, v504);
                        goto LABEL_1214;
                      }
                      if (*(_DWORD *)__src ^ 0x344D5647 | v519)
                      {
                        if (*(_DWORD *)__src ^ 0x3449434A | v519)
                        {
                          if (*(_DWORD *)__src ^ 0x3453434A | v519)
                          {
                            if (*(_DWORD *)__src ^ 0x34474E53 | v519) {
                              goto LABEL_1216;
                            }
                            uint64_t v58 = v520;
                            uint64_t v59 = a2;
                            uint64_t v60 = v11;
                            unsigned int v61 = 28;
                          }
                          else
                          {
                            uint64_t v58 = v520;
                            uint64_t v59 = a2;
                            uint64_t v60 = v11;
                            unsigned int v61 = 27;
                          }
                        }
                        else
                        {
                          uint64_t v58 = v520;
                          uint64_t v59 = a2;
                          uint64_t v60 = v11;
                          unsigned int v61 = 26;
                        }
                      }
                      else
                      {
                        uint64_t v58 = v520;
                        uint64_t v59 = a2;
                        uint64_t v60 = v11;
                        unsigned int v61 = 24;
                      }
LABEL_1208:
                      Mfsuint64_t Data = select_bet4_LoadMfsData(v59, v60, v61, v57, v58, v8, v504, 0);
                      goto LABEL_1214;
                    }
                    uint64_t v406 = v520;
                    uint64_t v407 = a2;
                    uint64_t v408 = v11;
                    unsigned int v409 = 10;
                  }
                  else
                  {
                    uint64_t v406 = v520;
                    uint64_t v407 = a2;
                    uint64_t v408 = v11;
                    unsigned int v409 = 13;
                  }
                  LODWORD(v14) = select_bet4_LoadMfsData(v407, v408, v409, v57, v406, v8, v504, 1);
                  goto LABEL_1219;
                }
                LODWORD(v516) = 0;
                v522[0] = 0;
                if (v8)
                {
                  v389 = (int *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
                }
                else
                {
                  uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, v522, v29, v30, v31, v32, v33);
                  if ((v14 & 0x80000000) != 0) {
                    return v14;
                  }
                  v389 = (int *)v522[0];
                }
                v411 = (int *)(a2 + 4 * v56);
                v411[2032] = *v389;
                v411[2062] = v389[1];
                v411[2078] = v389[2];
                v411[2218] = v389[3];
                v411[2198] = v389[4];
                v411[2208] = v389[5];
                v411[2231] = v389[6];
                v411[2241] = v389[7];
                v522[0] = (uint64_t)(v389 + 8);
                if (v411[98] >= 1)
                {
                  uint64_t v412 = v56;
                  uint64_t v413 = 0;
                  v513 = v411 + 98;
                  v414 = (void *)(a2 + 8 * v412 + 2392);
                  unsigned int v415 = *(_DWORD *)v521;
                  do
                  {
                    LOBYTE(v523) = 0;
                    LODWORD(v516) = 256;
                    LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v522[0], v520, v415, &v523, (unsigned int *)&v516);
                    if ((v14 & 0x80000000) != 0) {
                      break;
                    }
                    *(void *)(*v414 + 8 * v413) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)&v523);
                    if (!*(void *)(*v414 + 8 * v413)) {
                      goto LABEL_1201;
                    }
                    unsigned int v415 = *(_DWORD *)v521 + v516;
                    *(_DWORD *)v521 += v516;
                    ++v413;
                  }
                  while (v413 < *v513);
                }
                goto LABEL_1202;
              }
              uint64_t v384 = a2 + 128 + 4 * v56;
              int v385 = *(_DWORD *)(v384 + 304);
              uint64_t v330 = a2 + 128 + 120 * (int)v56 + 24 * v385 + 3864;
              *(_DWORD *)(v384 + 304) = v385 + 1;
            }
            else
            {
              v522[0] = 0;
              if (v8)
              {
                uint64_t v352 = v8 + ssftriff_reader_GetPosition(v11) - v504;
                v522[0] = v352;
              }
              else
              {
                Chunkuint64_t Data = ssftriff_reader_GetChunkData(v11, v520, v522, v29, v30, v31, v32, v33);
                if ((ChunkData & 0x80000000) != 0) {
                  return ChunkData;
                }
                uint64_t v352 = v522[0];
              }
              *(_DWORD *)v521 = 256;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v352, v520, 0, &v523, (unsigned int *)v521);
              if ((v14 & 0x80000000) != 0)
              {
                uint64_t v330 = 0;
              }
              else
              {
                v392 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)&v523);
                uint64_t v393 = a2 + 128 + 4 * v56;
                uint64_t v394 = *(int *)(v393 + 344);
                *(void *)(a2 + 128 + 40 * (int)v56 + 8 * v394 + 1304) = v392;
                if ((v521[0] & 3) != 0) {
                  *(_DWORD *)v521 -= *(_DWORD *)v521 | 0xFFFFFFFC;
                }
                uint64_t v330 = a2 + 120 * (int)v56 + 24 * (int)v394 + 2792;
                *(_DWORD *)(v393 + 344) = v394 + 1;
              }
            }
          }
          else
          {
            uint64_t v330 = a2 + 24 * (int)v56 + 2552;
          }
          if ((v14 & 0x80000000) == 0 && v330)
          {
            v523 = 0;
            if (a6)
            {
              int Position = ssftriff_reader_GetPosition(v11);
              int v396 = *(_DWORD *)v521;
              *(void *)(v330 + 8) = a6 + Position - v504 + *(unsigned int *)v521;
              int v397 = v520 - v396;
            }
            else
            {
              unsigned int v398 = *(unsigned __int16 *)(v501 + 544);
              LODWORD(v14) = -2065686524;
              if (v398 > 0x3F) {
                goto LABEL_1202;
              }
              if (*(_DWORD *)v521)
              {
                ssftriff_reader_Seek(v11, *(unsigned int *)v521, 1);
                unsigned int v398 = *(unsigned __int16 *)(v501 + 544);
              }
              LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v398 + 66328), &v523, v29, v30, v31, v32, v33);
              if ((v14 & 0x80000000) != 0) {
                goto LABEL_1202;
              }
              ++*(_WORD *)(v501 + 544);
              int v399 = v520;
              *(_DWORD *)(v501 + 24) += v520;
              *(void *)(v330 + 8) = v523;
              int v397 = v399 - *(_DWORD *)v521;
            }
            *(_DWORD *)(v330 + 16) = v397;
          }
LABEL_1202:
          uint64_t v8 = a6;
          goto LABEL_1219;
        }
        LODWORD(v516) = 0;
        v522[0] = 0;
        if (v8)
        {
          uint64_t v322 = v8 + ssftriff_reader_GetPosition(v11) - v504;
          v522[0] = v322;
        }
        else
        {
          uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, v522, v29, v30, v31, v32, v33);
          if ((v14 & 0x80000000) != 0) {
            return v14;
          }
          uint64_t v322 = v522[0];
        }
        int v363 = *(_DWORD *)v521;
        uint64_t v364 = (_DWORD *)(a2 + 4 * v56);
        v364[88] = *(_DWORD *)(v322 + *(unsigned int *)v521);
        *(_DWORD *)v521 = v363 + 4;
        uint64_t v365 = *(unsigned int *)(v322 + (v363 + 4));
        v364[98] = v365;
        *(_DWORD *)v521 = v363 + 8;
        uint64_t v366 = v364 + 98;
        v364[568] = *(unsigned char *)(v322 + (v363 + 8)) != 0;
        *(_DWORD *)v521 = v363 + 9;
        v364[558] = *(_DWORD *)(v322 + (v363 + 9));
        unsigned int v367 = v363 + 13;
        *(_DWORD *)v521 = v363 + 13;
        if ((int)v365 < 1)
        {
LABEL_1091:
          LOBYTE(v523) = 0;
          LODWORD(v516) = 256;
          LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v322, v520, v367, &v523, (unsigned int *)&v516);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_1202;
          }
          int v376 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)&v523);
          v377 = (void *)(a2 + 8 * v56);
          v377[34] = v376;
          *(_DWORD *)v521 += v516;
          if (v376)
          {
            v512 = v366;
            if (*v366 >= 1)
            {
              uint64_t v378 = 0;
              v379 = v377 + 309;
              v467 = v377 + 289;
              while (1)
              {
                LOBYTE(v523) = 0;
                LODWORD(v516) = 256;
                int v380 = ssftriff_reader_ReadStringZ(v11, v522[0], v520, *(unsigned int *)v521, &v523, (unsigned int *)&v516);
                if (v380 < 0) {
                  break;
                }
                *(void *)(*v379 + 8 * v378) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)&v523);
                if (!*(void *)(*v379 + 8 * v378)) {
                  goto LABEL_1201;
                }
                *(_DWORD *)v521 += v516;
                LOBYTE(v523) = 0;
                LODWORD(v516) = 256;
                LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, v522[0], v520, *(unsigned int *)v521, &v523, (unsigned int *)&v516);
                if ((v14 & 0x80000000) == 0)
                {
                  *(void *)(*v467 + 8 * v378) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)&v523);
                  if (!*(void *)(*v467 + 8 * v378)) {
                    goto LABEL_1201;
                  }
                  *(_DWORD *)v521 += v516;
                  if (++v378 < *v512) {
                    continue;
                  }
                }
                goto LABEL_1202;
              }
              LODWORD(v14) = v380;
            }
            goto LABEL_1202;
          }
        }
        else
        {
          v511 = v364 + 98;
          uint64_t v368 = heap_Calloc(*(void **)(a1 + 8), v365, 8);
          uint64_t v369 = a2 + 8 * v56;
          *(void *)(v369 + 2472) = v368;
          if (!v368) {
            LODWORD(v14) = -2065686518;
          }
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_1202;
          }
          uint64_t v370 = heap_Calloc(*(void **)(a1 + 8), *v511, 8);
          *(void *)(v369 + 2312) = v370;
          if (!v370)
          {
            LODWORD(v14) = -2065686518;
            goto LABEL_1202;
          }
          uint64_t v371 = heap_Calloc(*(void **)(a1 + 8), *v511, 8);
          *(void *)(a2 + 8 * v56 + 2392) = v371;
          if (v371)
          {
            uint64_t v366 = v511;
            uint64_t v322 = v522[0];
            unsigned int v367 = *(_DWORD *)v521;
            goto LABEL_1091;
          }
        }
LABEL_1201:
        LODWORD(v14) = -2065686518;
        goto LABEL_1202;
      }
      if (!strcmp(v9, "WCI4"))
      {
        if (!(*(_DWORD *)__src ^ 0x50525453 | v519))
        {
          uint64_t v34 = v520;
          uint64_t v35 = a2;
          uint64_t v36 = v11;
          unsigned int v37 = 17;
          goto LABEL_1225;
        }
        if (!(*(_DWORD *)__src ^ 0x34495453 | v519))
        {
          uint64_t v34 = v520;
          uint64_t v35 = a2;
          uint64_t v36 = v11;
          unsigned int v37 = 19;
          goto LABEL_1225;
        }
        if (*(_DWORD *)__src ^ 0x4C494350 | v519) {
          goto LABEL_1216;
        }
        uint64_t v20 = v520;
        uint64_t v21 = a2;
        uint64_t v22 = v11;
        unsigned int v23 = 18;
LABEL_126:
        uint64_t v38 = 0;
        goto LABEL_1062;
      }
      if (!strcmp(v9, "SCI4"))
      {
        if (!(*(_DWORD *)__src ^ 0x50525453 | v519))
        {
          uint64_t v34 = v520;
          uint64_t v35 = a2;
          uint64_t v36 = v11;
          unsigned int v37 = 20;
          goto LABEL_1225;
        }
        if (!(*(_DWORD *)__src ^ 0x34495453 | v519))
        {
          uint64_t v34 = v520;
          uint64_t v35 = a2;
          uint64_t v36 = v11;
          unsigned int v37 = 22;
          goto LABEL_1225;
        }
        if (*(_DWORD *)__src ^ 0x4C494350 | v519) {
          goto LABEL_1216;
        }
        uint64_t v20 = v520;
        uint64_t v21 = a2;
        uint64_t v22 = v11;
        unsigned int v23 = 21;
        goto LABEL_126;
      }
      if (strcmp(v9, "UND4")) {
        goto LABEL_1216;
      }
      if (!(*(_DWORD *)__src ^ 0x4C4C5355 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 3;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x4E454C55 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 4;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x58544355 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 5;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x52554455 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 6;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x4C534255 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 7;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x52534955 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 8;
        goto LABEL_1225;
      }
      if (!(*(_DWORD *)__src ^ 0x464F4D55 | v519))
      {
        uint64_t v34 = v520;
        uint64_t v35 = a2;
        uint64_t v36 = v11;
        unsigned int v37 = 9;
LABEL_1225:
        uint64_t v38 = 0;
LABEL_1226:
        uint64_t v346 = v8;
        uint64_t v347 = v504;
        uint64_t v348 = 0;
LABEL_1227:
        int RiffStringTable = select_bet4_LoadMfsData(v35, v36, v37, v38, v34, v346, v347, v348);
        goto LABEL_1228;
      }
    }
    else
    {
      if (a4)
      {
        if (strcmp(v9, "FEEX")) {
          goto LABEL_53;
        }
        if (!strcmp(v13, "VCAT"))
        {
          v523 = 0;
          if (v8)
          {
            v523 = (void *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v40, v41, v42, v43, v44);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
          }
          if (!(*(_DWORD *)__src ^ 0x48504C41 | v519))
          {
            LODWORD(v522[0]) = 257;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, (uint64_t)v523, v520, 0, __s, (unsigned int *)v522);
            if ((v14 & 0x80000000) == 0)
            {
              *((_WORD *)__s + 947) = 255;
              if (*__s)
              {
                unsigned int v335 = 0;
                size_t v336 = 0;
                int v337 = 0;
                unsigned int v338 = 255;
                do
                {
                  uint64_t v339 = (unsigned __int8 *)(a2 + v336 + 38490);
                  unsigned int v340 = *v339;
                  if (v340 >= v338)
                  {
                    unsigned int v342 = *v339;
                    uint64_t v341 = __s;
                  }
                  else
                  {
                    uint64_t v341 = __s;
                    __s[1894] = v340;
                    unsigned int v342 = *v339;
                    unsigned int v338 = v340;
                  }
                  if (v342 <= v335)
                  {
                    unsigned int v343 = v342;
                  }
                  else
                  {
                    v341[1895] = v342;
                    unsigned int v343 = *v339;
                    unsigned int v335 = v342;
                  }
                  *(unsigned char *)(a2 + v343 + 40032) = v337;
                  size_t v336 = (v337 + 1);
                  size_t v344 = strlen(v341);
                  int v337 = v336;
                }
                while (v344 > v336);
              }
            }
            uint64_t v8 = a6;
            goto LABEL_1219;
          }
          if (*(_DWORD *)__src ^ 0x43494F56 | v519)
          {
            if (*(_DWORD *)__src ^ 0x4F564F43 | v519)
            {
              if (*(_DWORD *)__src ^ 0x45464153 | v519)
              {
                if (*(_DWORD *)__src ^ 0x534F4C50 | v519)
                {
                  if (*(_DWORD *)__src ^ 0x46464944 | v519)
                  {
                    if (*(_DWORD *)__src ^ 0x4C43554E | v519)
                    {
                      if (*(_DWORD *)__src ^ 0x464E4547 | v519)
                      {
                        if (*(_DWORD *)__src ^ 0x41474154 | v519)
                        {
                          if (*(_DWORD *)__src ^ 0x414F5442 | v519) {
                            goto LABEL_1216;
                          }
                          v427 = v523;
                          int v428 = v520;
                          uint64_t v429 = a1;
                          uint64_t v430 = v11;
                          v431 = v478;
                        }
                        else
                        {
                          v427 = v523;
                          int v428 = v520;
                          uint64_t v429 = a1;
                          uint64_t v430 = v11;
                          v431 = v480;
                        }
                        Mfsuint64_t Data = uselect_LoadRiffStringTable(v429, v430, v427, v428, v431);
                      }
                      else
                      {
                        Mfsuint64_t Data = select_bet3_LoadRiffGenericFeatureMap(a1, v11, (unsigned __int16 *)v523, v520, v483, v482, v481);
                      }
LABEL_1214:
                      LODWORD(v14) = MfsData;
LABEL_1219:
                      uint64_t v13 = v508;
                      goto LABEL_1229;
                    }
                    LODWORD(v522[0]) = 128;
                    v372 = v523;
                    unsigned int v373 = v520;
                    uint64_t v374 = v11;
                    int v375 = v484;
                  }
                  else
                  {
                    LODWORD(v522[0]) = 64;
                    v372 = v523;
                    unsigned int v373 = v520;
                    uint64_t v374 = v11;
                    int v375 = v486;
                  }
                }
                else
                {
                  LODWORD(v522[0]) = 257;
                  v372 = v523;
                  unsigned int v373 = v520;
                  uint64_t v374 = v11;
                  int v375 = v488;
                }
              }
              else
              {
                LODWORD(v522[0]) = 257;
                v372 = v523;
                unsigned int v373 = v520;
                uint64_t v374 = v11;
                int v375 = v490;
              }
            }
            else
            {
              LODWORD(v522[0]) = 257;
              v372 = v523;
              unsigned int v373 = v520;
              uint64_t v374 = v11;
              int v375 = v493;
            }
          }
          else
          {
            LODWORD(v522[0]) = 257;
            v372 = v523;
            unsigned int v373 = v520;
            uint64_t v374 = v11;
            int v375 = v495;
          }
          Mfsuint64_t Data = ssftriff_reader_ReadStringZ(v374, (uint64_t)v372, v373, 0, v375, (unsigned int *)v522);
          goto LABEL_1214;
        }
        if (!strcmp(v13, "TRAF") && !(*(_DWORD *)__src ^ 0x54414546 | v519))
        {
          v523 = 0;
          if (v8)
          {
            uint64_t v361 = (unsigned __int16 *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          }
          else
          {
            uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, &v523, v45, v46, v47, v48, v49);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
            uint64_t v361 = (unsigned __int16 *)v523;
          }
          unsigned int v400 = *v361;
          v523 = v361 + 1;
          if (v400 >= 8)
          {
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 58010, "%s%hu", v357, v358, v359, v360, "feature");
            return 2229280772;
          }
          *(_DWORD *)(a2 + 4 * v400 + 41264) = v497;
          uint64_t v401 = *v496 + 12 * v497;
          *(_DWORD *)uint64_t v401 = v400;
          *(_WORD *)(v401 + 8) = v361[1];
          *(_DWORD *)(v401 + 4) = *((_DWORD *)v361 + 1);
          ++v497;
          goto LABEL_1229;
        }
        if (strcmp(v13, "CTXR"))
        {
LABEL_53:
          if (strcmp(v9, "STM3") || strcmp(v13, "PCI4")) {
            goto LABEL_1216;
          }
          uint64_t v38 = *(unsigned int *)(a2 + 260);
          if (*(_DWORD *)(a2 + 8456))
          {
            if (!(*(_DWORD *)__src ^ 0x4943504F | v519))
            {
              uint64_t v34 = v520;
              uint64_t v35 = a2;
              uint64_t v36 = v11;
              unsigned int v37 = 55;
              goto LABEL_1226;
            }
            if (!(*(_DWORD *)__src ^ 0x4C43504F | v519))
            {
              uint64_t v20 = v520;
              uint64_t v21 = a2;
              uint64_t v22 = v11;
              unsigned int v23 = 56;
              goto LABEL_1062;
            }
LABEL_1216:
            int v419 = 0;
            LOBYTE(v523) = 0;
            do
            {
              __strcat_chk();
              __strcat_chk();
              ++v419;
            }
            while (a4 >= (unsigned __int16)v419);
            log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Unknown data: %s for %s", v420, v421, v422, (uint64_t)&v523);
            goto LABEL_1219;
          }
          if (!(*(_DWORD *)__src ^ 0x49494350 | v519))
          {
            uint64_t v34 = v520;
            uint64_t v35 = a2;
            uint64_t v36 = v11;
            unsigned int v37 = 15;
            goto LABEL_1226;
          }
          if (*(_DWORD *)__src ^ 0x4C494350 | v519) {
            goto LABEL_1216;
          }
          uint64_t v20 = v520;
          uint64_t v21 = a2;
          uint64_t v22 = v11;
          unsigned int v23 = 16;
LABEL_1062:
          int v345 = select_bet4_LoadMfsData(v21, v22, v23, v38, v20, v8, v504, 0);
LABEL_1177:
          LODWORD(v14) = v345;
          goto LABEL_1219;
        }
        if (!(*(_DWORD *)__src ^ 0x464C5552 | v519))
        {
          v523 = 0;
          if (v8)
          {
            uint64_t v69 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v69;
          }
          else
          {
            Chunkuint64_t Data = ssftriff_reader_GetChunkData(v11, v520, &v523, v50, v51, v52, v53, v54);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
            uint64_t v69 = v523;
          }
          int v353 = v520;
          uint64_t v354 = a1;
          uint64_t v355 = v11;
          uint64_t v356 = v494;
          goto LABEL_1182;
        }
        if (!(*(_DWORD *)__src ^ 0x544C5552 | v519))
        {
          v523 = 0;
          if (v8)
          {
            uint64_t v69 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
            v523 = v69;
          }
          else
          {
            Chunkuint64_t Data = ssftriff_reader_GetChunkData(v11, v520, &v523, v50, v51, v52, v53, v54);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
            uint64_t v69 = v523;
          }
          int v353 = v520;
          uint64_t v354 = a1;
          uint64_t v355 = v11;
          uint64_t v356 = v492;
          goto LABEL_1182;
        }
        if (*(_DWORD *)__src ^ 0x34445254 | v519)
        {
          if (!(*(_DWORD *)__src ^ 0x34505254 | v519))
          {
            unint64_t v55 = *(unsigned __int16 *)(v501 + 544);
            if (v55 <= 0x3F)
            {
              LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v55 + 66328), v485, v50, v51, v52, v53, v54);
              if ((v14 & 0x80000000) == 0)
              {
                ++*(_WORD *)(v501 + 544);
                unsigned int v416 = v520;
                *(_DWORD *)(v501 + 24) += v520;
                *(_DWORD *)(v501 + 16) = v416 / 0xC;
              }
            }
            else
            {
              LODWORD(v14) = -2065686524;
            }
            goto LABEL_1219;
          }
          goto LABEL_1216;
        }
        unint64_t v402 = *(unsigned __int16 *)(v501 + 544);
        if (v402 <= 0x3F)
        {
          LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v402 + 66328), v487, v50, v51, v52, v53, v54);
          if ((v14 & 0x80000000) == 0)
          {
            ++*(_WORD *)(v501 + 544);
            unsigned int v405 = v520;
            *(_DWORD *)(v501 + 24) += v520;
            *(_DWORD *)uint64_t v501 = v405 / 0xC;
          }
          goto LABEL_1229;
        }
        goto LABEL_1165;
      }
      if (!(*(_DWORD *)__src ^ 0x464E4956 | v519))
      {
        LODWORD(v516) = 0;
        *(void *)v521 = 0;
        if (v8)
        {
          *(void *)v521 = v8 + ssftriff_reader_GetPosition(v11) - v504;
        }
        else
        {
          uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, v521, v15, v16, v17, v18, v19);
          if ((v14 & 0x80000000) != 0) {
            return v14;
          }
        }
        unsigned int v66 = v520;
        if (v520)
        {
          unsigned int v67 = 0;
          do
          {
            LOBYTE(v522[0]) = 0;
            LOBYTE(v523) = 0;
            LODWORD(v516) = 1024;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v521, v66, v67, &v523, (unsigned int *)&v516);
            if ((v14 & 0x80000000) == 0 && v67 < v520)
            {
              v67 += v516;
              LODWORD(v516) = 1024;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v521, v520, v67, v522, (unsigned int *)&v516);
            }
            if ((v14 & 0x80000000) != 0) {
              break;
            }
            if (!(v523 ^ 0x44495547 | BYTE4(v523))
              || (v523 == (void *)0x6E656E6F706D6F43 ? (BOOL v68 = v524 == 4475252) : (BOOL v68 = 0), v68))
            {
              strcpy(v500, (const char *)v522);
              break;
            }
            v67 += v516;
            unsigned int v66 = v520;
          }
          while (v67 < v520);
        }
LABEL_1021:
        uint64_t v8 = a6;
        goto LABEL_1229;
      }
      if (!(*(_DWORD *)__src ^ 0x47464356 | v519))
      {
        unsigned int v517 = 0;
        *(void *)v515 = 0;
        v516 = 0;
        if (v8)
        {
          *(void *)v515 = v8 + ssftriff_reader_GetPosition(v11) - v504;
        }
        else
        {
          uint64_t v14 = ssftriff_reader_GetChunkData(v11, v520, v515, v15, v16, v17, v18, v19);
          if ((v14 & 0x80000000) != 0) {
            return v14;
          }
        }
        unsigned int v71 = v520;
        if (v520)
        {
          unsigned int v72 = 0;
          do
          {
            LOBYTE(v523) = 0;
            v521[0] = 0;
            unsigned int v517 = 64;
            LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v515, v71, v72, v521, &v517);
            if ((v14 & 0x80000000) == 0 && v72 < v520)
            {
              v72 += v517;
              unsigned int v517 = 256;
              LODWORD(v14) = ssftriff_reader_ReadStringZ(v11, *(uint64_t *)v515, v520, v72, &v523, &v517);
            }
            if ((v14 & 0x80000000) != 0) {
              break;
            }
            unsigned int v510 = v517;
            strcpy((char *)v522, "bet4voiceoverride.");
            __strcat_chk();
            if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v522, &v516) & 0x80000000) == 0)
            {
              uint64_t v73 = v516;
              if (v516)
              {
                if (*v516) {
                  goto LABEL_1019;
                }
              }
            }
            uint64_t v73 = (const char *)&v523;
            v516 = (char *)&v523;
            if (*(_DWORD *)v521 == 1213221953 && *(unsigned __int16 *)&v521[4] == 65)
            {
              float v75 = atof(v73);
              *(float *)(a2 + 128) = v75;
            }
            if (!(*(_DWORD *)v521 ^ 0x41544542 | v521[4]))
            {
              float v76 = atof(v73);
              *(float *)(a2 + 132) = v76;
            }
            if (!(*(unsigned __int16 *)v521 ^ 0x5346 | v521[2])) {
              *(_DWORD *)(a2 + 136) = LH_atoi(v73);
            }
            if (*(void *)v521 == 0x5F4C45525F565556 && *(_DWORD *)&v521[8] == 5262657)
            {
              float v78 = atof(v516);
              *(float *)(a2 + 140) = v78;
            }
            if (*(_DWORD *)v521 == 1162105423 && *(unsigned __int16 *)&v521[4] == 82) {
              *(_DWORD *)(a2 + 144) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x49535F454D415246 && *(void *)&v521[3] == 0x455A49535F454DLL) {
              *(_DWORD *)(a2 + 152) = LH_atoi(v516);
            }
            if (*(_DWORD *)v521 == 5195858)
            {
              float v81 = atof(v516);
              *(float *)(a2 + 160) = v81;
            }
            if (*(_DWORD *)v521 == 5001046)
            {
              float v82 = atof(v516);
              *(float *)(a2 + 164) = v82;
            }
            if (*(void *)v521 == 0x534F4F425F46564DLL && *(unsigned __int16 *)&v521[8] == 84)
            {
              float v84 = atof(v516);
              *(float *)(a2 + 168) = v84;
            }
            if (*(_DWORD *)v521 == 1381969990 && *(_DWORD *)&v521[3] == 5195858)
            {
              float v86 = atof(v516);
              *(float *)(a2 + 172) = v86;
            }
            if (*(_DWORD *)v521 == 1398747206 && *(_DWORD *)&v521[3] == 4478035)
            {
              float v88 = atof(v516);
              *(float *)(a2 + 176) = v88;
            }
            if (*(void *)v521 == 0x4E41454D5F3046)
            {
              float v89 = atof(v516);
              *(float *)(a2 + 180) = v89;
            }
            if (*(void *)v521 == 0x434E454C49535F42 && *(void *)&v521[8] == 0x48544E59535F45) {
              *(_DWORD *)(a2 + 7752) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x465F484345455053 && *(void *)&v521[7] == 0x4E41454D5F3046) {
              *(_DWORD *)(a2 + 184) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x495241565F464450
              && *(void *)&v521[8] == 0x5059545F45434E41
              && *(unsigned __int16 *)&v521[16] == 69)
            {
              *(_DWORD *)(a2 + 200) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x52454B41455242)
            {
              uint64_t v94 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v516);
              *(void *)(a2 + 208) = v94;
              if (!v94) {
                LODWORD(v14) = -2065686518;
              }
            }
            if (*(void *)v521 == 0x474E454C5F4B5242 && *(void *)&v521[3] == 0x4854474E454C5FLL) {
              *(_DWORD *)(a2 + 216) = LH_atoi(v516);
            }
            if (*(_DWORD *)v521 == 1598771778 && *(_DWORD *)&v521[3] == 4412511) {
              *(_DWORD *)(a2 + 220) = LH_atoi(v516);
            }
            if (!(*(void *)v521 ^ 0x4441505A5F4B5242 | v521[8])) {
              *(_DWORD *)(a2 + 224) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x54535F4E474C41) {
              *(_DWORD *)(a2 + 240) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x48505F4E474C41) {
              *(_DWORD *)(a2 + 244) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x5F54534F434A5F46
              && *(void *)&v521[8] == 0x415F544847494557
              && *(void *)&v521[11] == 0x4A44415F544847)
            {
              float v99 = atof(v516);
              *(float *)(a2 + 8288) = v99;
            }
            if (*(void *)v521 == 0x5F54534F434A5F46
              && *(void *)&v521[8] == 0x535F544847494557
              && *(void *)&v521[11] == 0x4C4C535F544847)
            {
              float v102 = atof(v516);
              *(float *)(a2 + 8516) = v102;
            }
            if (*(void *)v521 == 0x54535F4C4C535F46 && *(void *)&v521[3] == 0x504554535F4C4CLL)
            {
              float v104 = atof(v516);
              *(float *)(a2 + 8512) = v104;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x465F544E535F534FLL
              && *(void *)&v521[13] == 0x4C414E49465F54)
            {
              float v107 = atof(v516);
              *(float *)(a2 + 8528) = v107;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x465F544E535F534FLL
              && *(void *)&v521[13] == 0x4C414E49465F54)
            {
              float v110 = atof(v516);
              *(float *)(a2 + 8532) = v110;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x465F5248505F534FLL
              && *(void *)&v521[13] == 0x4C414E49465F52)
            {
              float v113 = atof(v516);
              *(float *)(a2 + 8536) = v113;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x465F5248505F534FLL
              && *(void *)&v521[13] == 0x4C414E49465F52)
            {
              float v116 = atof(v516);
              *(float *)(a2 + 8540) = v116;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x495F544E535F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              float v119 = atof(v516);
              *(float *)(a2 + 8544) = v119;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x495F544E535F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              float v122 = atof(v516);
              *(float *)(a2 + 8548) = v122;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x495F5248505F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              float v125 = atof(v516);
              *(float *)(a2 + 8552) = v125;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x495F5248505F534FLL
              && *(unsigned int *)&v521[16] == 5523790)
            {
              float v128 = atof(v516);
              *(float *)(a2 + 8556) = v128;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x4D5F5248505F534FLL
              && *(void *)&v521[11] == 0x44494D5F524850)
            {
              float v131 = atof(v516);
              *(float *)(a2 + 8560) = v131;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x4D5F5248505F534FLL
              && *(void *)&v521[11] == 0x44494D5F524850)
            {
              float v134 = atof(v516);
              *(float *)(a2 + 8564) = v134;
            }
            if (*(void *)v521 == 0x574452575F515F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x49535F544E45535FLL
              && *(void *)&v521[21] == 0x454C474E49535FLL)
            {
              float v138 = atof(v516);
              *(float *)(a2 + 8568) = v138;
            }
            if (*(void *)v521 == 0x574452575F425F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x49535F544E45535FLL
              && *(void *)&v521[21] == 0x454C474E49535FLL)
            {
              float v142 = atof(v516);
              *(float *)(a2 + 8572) = v142;
            }
            if (*(void *)v521 == 0x574452575F515F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x4E495F544E45535FLL
              && *(void *)&v521[22] == 0x4C414954494E49)
            {
              float v146 = atof(v516);
              *(float *)(a2 + 8576) = v146;
            }
            if (*(void *)v521 == 0x574452575F425F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x4E495F544E45535FLL
              && *(void *)&v521[22] == 0x4C414954494E49)
            {
              float v150 = atof(v516);
              *(float *)(a2 + 8580) = v150;
            }
            if (*(void *)v521 == 0x574452575F515F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x49465F544E45535FLL
              && *(unsigned int *)&v521[24] == 4997454)
            {
              float v154 = atof(v516);
              *(float *)(a2 + 8584) = v154;
            }
            if (*(void *)v521 == 0x574452575F425F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x49465F544E45535FLL
              && *(unsigned int *)&v521[24] == 4997454)
            {
              float v158 = atof(v516);
              *(float *)(a2 + 8588) = v158;
            }
            if (*(void *)v521 == 0x574452575F515F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x4E49535F3450495FLL
              && *(unsigned int *)&v521[24] == 4541511)
            {
              float v162 = atof(v516);
              *(float *)(a2 + 8592) = v162;
            }
            if (*(void *)v521 == 0x574452575F425F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x4E49535F3450495FLL
              && *(unsigned int *)&v521[24] == 4541511)
            {
              float v166 = atof(v516);
              *(float *)(a2 + 8596) = v166;
            }
            if (*(void *)v521 == 0x574452575F515F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x494E495F3450495FLL
              && *(void *)&v521[21] == 0x4C414954494E49)
            {
              float v170 = atof(v516);
              *(float *)(a2 + 8600) = v170;
            }
            if (*(void *)v521 == 0x574452575F425F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x494E495F3450495FLL
              && *(void *)&v521[21] == 0x4C414954494E49)
            {
              float v174 = atof(v516);
              *(float *)(a2 + 8604) = v174;
            }
            if (*(void *)v521 == 0x574452575F515F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x4E49465F3450495FLL
              && *(void *)&v521[19] == 0x4C414E49465F34)
            {
              float v178 = atof(v516);
              *(float *)(a2 + 8608) = v178;
            }
            if (*(void *)v521 == 0x574452575F425F46
              && *(void *)&v521[8] == 0x504853534F504452
              && *(void *)&v521[16] == 0x4E49465F3450495FLL
              && *(void *)&v521[19] == 0x4C414E49465F34)
            {
              float v182 = atof(v516);
              *(float *)(a2 + 8612) = v182;
            }
            if (*(void *)v521 == 0x504452575F515F46 && *(void *)&v521[8] == 0x434341555F4D52)
            {
              float v184 = atof(v516);
              *(float *)(a2 + 8616) = v184;
            }
            if (*(void *)v521 == 0x504452575F425F46 && *(void *)&v521[8] == 0x434341555F4D52)
            {
              float v186 = atof(v516);
              *(float *)(a2 + 8620) = v186;
            }
            if (*(void *)v521 == 0x504452575F515F46 && *(void *)&v521[8] == 0x434341445F4D52)
            {
              float v188 = atof(v516);
              *(float *)(a2 + 8624) = v188;
            }
            if (*(void *)v521 == 0x504452575F425F46 && *(void *)&v521[8] == 0x434341445F4D52)
            {
              float v190 = atof(v516);
              *(float *)(a2 + 8628) = v190;
            }
            if (*(void *)v521 == 0x504452575F515F46 && *(void *)&v521[7] == 0x4343415F4D5250)
            {
              float v192 = atof(v516);
              *(float *)(a2 + 8632) = v192;
            }
            if (*(void *)v521 == 0x504452575F425F46 && *(void *)&v521[7] == 0x4343415F4D5250)
            {
              float v194 = atof(v516);
              *(float *)(a2 + 8636) = v194;
            }
            if (*(void *)v521 == 0x504452575F515F46 && *(void *)&v521[8] == 0x48504D455F4D52)
            {
              float v196 = atof(v516);
              *(float *)(a2 + 8640) = v196;
            }
            if (*(void *)v521 == 0x504452575F425F46 && *(void *)&v521[8] == 0x48504D455F4D52)
            {
              float v198 = atof(v516);
              *(float *)(a2 + 8644) = v198;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x41555F5048534D52
              && *(void *)&v521[11] == 0x434341555F5048)
            {
              float v201 = atof(v516);
              *(float *)(a2 + 8648) = v201;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x41555F5048534D52
              && *(void *)&v521[11] == 0x434341555F5048)
            {
              float v204 = atof(v516);
              *(float *)(a2 + 8652) = v204;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x41445F5048534D52
              && *(void *)&v521[11] == 0x434341445F5048)
            {
              float v207 = atof(v516);
              *(float *)(a2 + 8656) = v207;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x41445F5048534D52
              && *(void *)&v521[11] == 0x434341445F5048)
            {
              float v210 = atof(v516);
              *(float *)(a2 + 8660) = v210;
            }
            BOOL v212 = *(void *)v521 == 0x504452575F515F46
                && *(void *)&v521[8] == 0x43415F5048534D52
                && *(unsigned __int16 *)&v521[16] == 67;
            uint64_t v9 = a5;
            if (v212)
            {
              float v213 = atof(v516);
              *(float *)(a2 + 8664) = v213;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x43415F5048534D52
              && *(unsigned __int16 *)&v521[16] == 67)
            {
              float v216 = atof(v516);
              *(float *)(a2 + 8668) = v216;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x554E5F5048534D52
              && *(unsigned __int16 *)&v521[16] == 67)
            {
              float v219 = atof(v516);
              *(float *)(a2 + 8672) = v219;
            }
            if (*(void *)v521 == 0x504452575F425F46
              && *(void *)&v521[8] == 0x554E5F5048534D52
              && *(unsigned __int16 *)&v521[16] == 67)
            {
              float v222 = atof(v516);
              *(float *)(a2 + 8676) = v222;
            }
            if (*(void *)v521 == 0x504452575F515F46
              && *(void *)&v521[8] == 0x4D455F5048534D52
              && *(void *)&v521[11] == 0x48504D455F5048)
            {
              float v225 = atof(v516);
              *(float *)(a2 + 8680) = v225;
            }
            BOOL v227 = *(void *)v521 == 0x504452575F425F46
                && *(void *)&v521[8] == 0x4D455F5048534D52
                && *(void *)&v521[11] == 0x48504D455F5048;
            uint64_t v11 = a3;
            if (v227)
            {
              float v228 = atof(v516);
              *(float *)(a2 + 8684) = v228;
            }
            if (!(*(void *)v521 ^ 0x575F4D4145425F46 | *(void *)&v521[8] ^ 0x564E555F48544449 | v521[16]))
            {
              float v229 = atof(v516);
              *(float *)(a2 + 8380) = v229;
            }
            if (*(void *)v521 == 0x564E555F515F46)
            {
              float v230 = atof(v516);
              *(float *)(a2 + 8304) = v230;
            }
            if (*(_DWORD *)v521 == 5332806)
            {
              float v231 = atof(v516);
              *(float *)(a2 + 8300) = v231;
            }
            if (*(void *)v521 == 0x4C5F45444F4E5F4ELL && *(void *)&v521[5] == 0x54494D494C5F45) {
              *(_DWORD *)(a2 + 8352) = LH_atoi(v516);
            }
            if (!(*(void *)v521 ^ 0x4F4E5F564E495F4ELL | *(void *)&v521[8] ^ 0x54494D494C5F4544 | v521[16])) {
              *(_DWORD *)(a2 + 8356) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F454E5552505F46 && *(unsigned int *)&v521[8] == 5522256)
            {
              float v234 = atof(v516);
              *(float *)(a2 + 8360) = v234;
            }
            if (*(void *)v521 == 0x575F4D4145425F46 && *(void *)&v521[5] == 0x48544449575F4DLL)
            {
              float v236 = atof(v516);
              *(float *)(a2 + 8376) = v236;
            }
            if (!(*(void *)v521 ^ 0x505F45444F4E5F46 | *(void *)&v521[8] ^ 0x5443505F454E5552 | v521[16]))
            {
              float v237 = atof(v516);
              *(float *)(a2 + 8364) = v237;
            }
            if (!(*(void *)v521 ^ 0x505F45444F4E5F4ELL | *(void *)&v521[8] ^ 0x58414D5F454E5552 | v521[16])) {
              *(_DWORD *)(a2 + 8368) = LH_atoi(v516);
            }
            if (!(*(void *)v521 ^ 0x5449564C49535F4ELL | v521[8])) {
              *(_DWORD *)(a2 + 8384) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x55534E4F48505F4ELL
              && *(void *)&v521[8] == 0x414E45505F545342
              && *(_DWORD *)&v521[16] == 5854284)
            {
              *(_DWORD *)(a2 + 8388) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F48435449505F42
              && *(void *)&v521[8] == 0x4E4152545F4C5953
              && *(unsigned __int16 *)&v521[16] == 83)
            {
              *(_DWORD *)(a2 + 8392) = LH_atoi(v516) != 0;
            }
            if (!(*(void *)v521 ^ 0x48505F5255445F42 | *(void *)&v521[8] ^ 0x534E4152545F4E4FLL | v521[16])) {
              *(_DWORD *)(a2 + 8396) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x48505F5255445F42 && *(void *)&v521[7] == 0x5447545F4E4F48) {
              *(_DWORD *)(a2 + 8400) = LH_atoi(v516) != 0;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREV_DIFF_THRESH"))
            {
              float v243 = atof(v516);
              *(float *)(a2 + 8412) = v243;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREV_DIFF_WEIGHT"))
            {
              float v244 = atof(v516);
              *(float *)(a2 + 8416) = v244;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREVPREV_DIFF_THRESH"))
            {
              float v245 = atof(v516);
              *(float *)(a2 + 8420) = v245;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_ABSOLUTE_PREVPREV_DIFF_WEIGHT"))
            {
              float v246 = atof(v516);
              *(float *)(a2 + 8424) = v246;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_MODEL_PREV_DIFF_THRESH"))
            {
              float v247 = atof(v516);
              *(float *)(a2 + 8428) = v247;
            }
            if (!strcmp(v521, "F_PITCH_SYL_TRANS_MODEL_PREV_DIFF_WEIGHT"))
            {
              float v248 = atof(v516);
              *(float *)(a2 + 8432) = v248;
            }
            if (*(void *)v521 == 0x48505F5255445F46
              && *(void *)&v521[8] == 0x534E4152545F4E4FLL
              && *(void *)&v521[16] == 0x4853455248545FLL)
            {
              float v251 = atof(v516);
              *(float *)(a2 + 8436) = v251;
            }
            if (*(void *)v521 == 0x48505F5255445F46
              && *(void *)&v521[8] == 0x534E4152545F4E4FLL
              && *(void *)&v521[16] == 0x5448474945575FLL)
            {
              float v254 = atof(v516);
              *(float *)(a2 + 8440) = v254;
            }
            uint64_t v13 = v508;
            if (!(*(void *)v521 ^ 0x535F45444F4E5F4ELL | *(void *)&v521[8] ^ 0x58414D5F45524F43 | v521[16])) {
              *(_DWORD *)(a2 + 8444) = LH_atoi(v516);
            }
            if (!(*(void *)v521 ^ 0x505F45444F4E5F4ELL | *(void *)&v521[8] ^ 0x4E494D5F454E5552 | v521[16])) {
              *(_DWORD *)(a2 + 8448) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F594C5241455F4ELL && *(void *)&v521[8] == 0x474E494E555250) {
              *(_DWORD *)(a2 + 8452) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x45535245424F5F42 && *(unsigned __int16 *)&v521[8] == 69) {
              *(_DWORD *)(a2 + 8456) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x45535245424F5F4ELL
              && *(void *)&v521[8] == 0x435F4C43504F5F45
              && *(void *)&v521[16] == 0x53534552504D4FLL)
            {
              *(_DWORD *)(a2 + 8464) = LH_atou(v516);
            }
            if (!strcmp(v521, "N_OBERSEE_OPCL_HUFFMAN_MAXSIZE_UNCOMPRESS")) {
              *(_DWORD *)(a2 + 8468) = LH_atou(v516);
            }
            if (*(void *)v521 == 0x45535245424F5F4ELL
              && *(void *)&v521[8] == 0x494E554C4C415F45
              && *(void *)&v521[16] == 0x4F435F4154414454
              && *(void *)&v521[23] == 0x53534552504D4FLL)
            {
              *(_DWORD *)(a2 + 8460) = LH_atou(v516);
            }
            if (*(void *)v521 == 0x45535245424F5F4ELL
              && *(void *)&v521[8] == 0x5441444D59535F45
              && *(void *)&v521[16] == 0x4552504D4F435F41
              && *(void *)&v521[19] == 0x53534552504D4FLL)
            {
              *(_DWORD *)(a2 + 8472) = LH_atou(v516);
            }
            if (*(void *)v521 == 0x464F455059545F4ELL
              && *(void *)&v521[8] == 0x534F434843544950
              && *(unsigned __int16 *)&v521[16] == 84)
            {
              *(_DWORD *)(a2 + 9056) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5348435449505F46
              && *(void *)&v521[8] == 0x4749455745504F4CLL
              && *(void *)&v521[11] == 0x54484749455745)
            {
              float v269 = atof(v516);
              *(float *)(a2 + 9060) = v269;
            }
            if (*(_DWORD *)v521 == 1346527042 && *(unsigned __int16 *)&v521[4] == 70) {
              *(_DWORD *)(a2 + 8476) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x545F5045434D5F42
              && *(void *)&v521[8] == 0x465F54534F435447
              && *(void *)&v521[11] == 0x5849465F54534FLL)
            {
              *(_DWORD *)(a2 + 8480) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x544E4F435F575F46 && *(unsigned int *)&v521[8] == 5527621)
            {
              float v274 = atof(v516);
              *(float *)(a2 + 8292) = v274;
            }
            if (*(void *)v521 == 0x454E45475F575F46
              && *(void *)&v521[8] == 0x544E4F435F434952
              && *(unsigned int *)&v521[16] == 5527621)
            {
              float v277 = atof(v516);
              *(float *)(a2 + 8296) = v277;
            }
            if (*(void *)v521 == 0x43494C5058455F42
              && *(void *)&v521[8] == 0x454E4F48505F5449
              && *(void *)&v521[15] == 0x4C45444F4D5F45)
            {
              *(_DWORD *)(a2 + 8784) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x5F45544154535F42
              && *(void *)&v521[8] == 0x554B4341425F4D4CLL
              && *(unsigned __int16 *)&v521[16] == 80)
            {
              *(_DWORD *)(a2 + 8912) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x54535F4C4C415F42 && *(void *)&v521[7] == 0x4D4C5F45544154) {
              *(_DWORD *)(a2 + 8916) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x464F4B4341425F42 && *(unsigned __int16 *)&v521[8] == 70) {
              *(_DWORD *)(a2 + 8920) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x454C42414E455F42 && *(void *)&v521[5] == 0x4C43435F454C42) {
              *(_DWORD *)(a2 + 9004) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x43435F4E454C5F4ELL && *(unsigned __int16 *)&v521[8] == 76) {
              *(_DWORD *)(a2 + 9008) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x48545F4C4C535F46 && *(_DWORD *)&v521[8] == 5457234)
            {
              float v287 = atof(v516);
              *(float *)(a2 + 9012) = v287;
            }
            if (*(void *)v521 == 0x454C42414E455F42
              && *(void *)&v521[8] == 0x5248545F4C4C535FLL
              && *(void *)&v521[11] == 0x53455248545F4CLL)
            {
              *(_DWORD *)(a2 + 9016) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x4E555F58414D5F4ELL
              && *(void *)&v521[8] == 0x555F455341425449
              && *(void *)&v521[13] == 0x5354494E555F45)
            {
              *(_DWORD *)(a2 + 9068) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x414F4C58414D5F4ELL && *(void *)&v521[8] == 0x5354494E555F44) {
              *(_DWORD *)(a2 + 9072) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x4F48504952545F42
              && *(void *)&v521[8] == 0x454C4C49465F454ELL
              && *(unsigned __int16 *)&v521[16] == 82)
            {
              *(_DWORD *)(a2 + 9076) = LH_atoi(v516) != 0;
            }
            if (!(*(void *)v521 ^ 0x41515F4D59535F46 | v521[8]))
            {
              float v295 = atof(v516);
              *(float *)(a2 + 8308) = v295;
            }
            if (*(void *)v521 == 0x5F45524E45475F46 && *(unsigned __int16 *)&v521[8] == 87)
            {
              float v297 = atof(v516);
              *(float *)(a2 + 9092) = v297;
            }
            if (!(*(void *)v521 ^ 0x575F4E4E45565F46 | v521[8]))
            {
              float v298 = atof(v516);
              *(float *)(a2 + 9100) = v298;
            }
            if (*(void *)v521 == 0x4843524145535F4ELL && *(void *)&v521[6] == 0x45444F4D5F4843) {
              *(_DWORD *)(a2 + 9096) = LH_atoi(v516);
            }
            if (!(*(void *)v521 ^ 0x5345524E45475F4ELL | v521[8])) {
              *(_DWORD *)(a2 + 9084) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F45524E45475F4ELL && *(unsigned int *)&v521[8] == 5523284) {
              *(_DWORD *)(a2 + 9088) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x4252455449565F4ELL
              && *(void *)&v521[8] == 0x45444F4345445F49
              && *(void *)&v521[16] == 0x4E41495241565F52
              && *(unsigned __int16 *)&v521[24] == 84)
            {
              v509[2177] = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x505F45444F4E5F4ELL
              && *(void *)&v521[8] == 0x58414D5F454E5552
              && *(void *)&v521[13] == 0x564E555F58414DLL)
            {
              *(_DWORD *)(a2 + 8372) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F414C4F53505F4ELL && *(void *)&v521[5] == 0x45444F4D5F414CLL) {
              v509[2188] = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F414C4F53505F4ELL
              && *(void *)&v521[8] == 0x415255445F4E494DLL
              && *(void *)&v521[16] == 0x5441525F4E4F4954
              && *(void *)&v521[19] == 0x4F495441525F4ELL)
            {
              v509[2195] = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x5F414C4F53505F4ELL
              && *(void *)&v521[8] == 0x415255445F58414DLL
              && *(void *)&v521[16] == 0x5441525F4E4F4954
              && *(void *)&v521[19] == 0x4F495441525F4ELL)
            {
              v509[2196] = LH_atoi(v516);
            }
            if (!(*(void *)v521 ^ 0x4552504D4F435F4ELL | *(void *)&v521[8] ^ 0x41444D59535F5353 | *(void *)&v521[16] ^ 0x53544145465F4154 | v521[24])) {
              *(_DWORD *)(a2 + 8488) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x4341504D4F435F4ELL
              && *(void *)&v521[8] == 0x5441444D59535F54
              && *(void *)&v521[16] == 0x53544145465F41)
            {
              *(_DWORD *)(a2 + 8500) = LH_atoi(v516);
            }
            if (!strcmp(v521, "N_COMPRESS_MFS_DATA_COST_JOIN_ELEMENTS")) {
              *(_DWORD *)(a2 + 8492) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x4552504D4F435F4ELL
              && *(void *)&v521[8] == 0x445F53464D5F5353
              && *(void *)&v521[16] == 0x54494E555F415441
              && *(void *)&v521[22] == 0x415441445F5449)
            {
              *(_DWORD *)(a2 + 8496) = LH_atoi(v516);
            }
            if (*(void *)v521 == 0x4C4B5F4553555F42 && *(void *)&v521[8] == 0x54534F43545F44) {
              v509[2214] = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x4946454E4F545F42 && *(void *)&v521[5] == 0x5245544C494645) {
              *(_DWORD *)(a2 + 8484) = LH_atoi(v516) != 0;
            }
            if (*(void *)v521 == 0x45444F4345445F42
              && *(void *)&v521[8] == 0x4F52465F30464C5FLL
              && *(void *)&v521[13] == 0x564A5F4D4F5246)
            {
              *(_DWORD *)(a2 + 8408) = LH_atoi(v516) != 0;
            }
LABEL_1019:
            if ((v14 & 0x80000000) != 0) {
              break;
            }
            v72 += v510;
            unsigned int v71 = v520;
          }
          while (v72 < v520);
        }
        goto LABEL_1021;
      }
      if (!(*(_DWORD *)__src ^ 0x58454546 | v519))
      {
        uint64_t v62 = a1;
        uint64_t v63 = a2;
        uint64_t v64 = v11;
        uint64_t v65 = 1;
LABEL_1034:
        uint64_t v332 = v9;
        uint64_t v333 = 0;
        uint64_t v334 = 0;
        goto LABEL_1035;
      }
      if (!(*(_DWORD *)__src ^ 0x34544350 | v519))
      {
        v523 = 0;
        if (v8)
        {
          uint64_t v69 = (_WORD *)(v8 + ssftriff_reader_GetPosition(v11) - v504);
          v523 = v69;
        }
        else
        {
          Chunkuint64_t Data = ssftriff_reader_GetChunkData(v11, v520, &v523, v15, v16, v17, v18, v19);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
          uint64_t v69 = v523;
        }
        int v353 = v520;
        uint64_t v354 = a1;
        uint64_t v355 = v11;
        uint64_t v356 = v499;
LABEL_1182:
        int RiffStringTable = uselect_LoadRiffStringTable(v354, v355, v69, v353, v356);
        goto LABEL_1228;
      }
      if (*(_DWORD *)__src ^ 0x334D5453 | v519)
      {
        if (!(*(_DWORD *)__src ^ 0x34435655 | v519))
        {
          uint64_t v34 = v520;
          uint64_t v35 = a2;
          uint64_t v36 = v11;
          unsigned int v37 = 11;
          uint64_t v38 = 0;
          uint64_t v346 = 0;
          uint64_t v347 = 0;
          uint64_t v348 = 1;
          goto LABEL_1227;
        }
        if (!(*(_DWORD *)__src ^ 0x34495655 | v519))
        {
          unint64_t v381 = *(unsigned __int16 *)(v501 + 544);
          if (v381 <= 0x3F)
          {
            int v382 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v381 + 66328), v489, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v382;
              *(_DWORD *)(a2 + 12000) = v382;
            }
            goto LABEL_1219;
          }
LABEL_1165:
          LODWORD(v14) = -2065686524;
          goto LABEL_1229;
        }
        if (!(*(_DWORD *)__src ^ 0x34504B50 | v519)
          || !(*(_DWORD *)__src ^ 0x34424B50 | v519)
          || !(*(_DWORD *)__src ^ 0x344F4B50 | v519)
          || !(*(_DWORD *)__src ^ 0x34554B50 | v519))
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)"Select data file includes PSOLA data and cannot be used on this engine, PSOLA data should be included in the synth file.", v17, v18, v19, v466);
          LODWORD(v14) = -2065686503;
          goto LABEL_1229;
        }
        if (!(*(_DWORD *)__src ^ 0x34454A43 | v519))
        {
          unint64_t v423 = *(unsigned __int16 *)(v501 + 544);
          if (v423 <= 0x3F)
          {
            int v424 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v423 + 66328), v479, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v424;
              v509[420] = v424;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34444E55 | v519))
        {
          if (*(_DWORD *)(a2 + 8496) == 1)
          {
            uint64_t v62 = a1;
            uint64_t v63 = a2;
            uint64_t v64 = v11;
            uint64_t v65 = 1;
            uint64_t v332 = v9;
            uint64_t v333 = v8;
            uint64_t v334 = v504;
LABEL_1035:
            int RiffStringTable = select_bet4_ParseRiff(v62, v63, v64, v65, v332, v333, v334);
LABEL_1228:
            LODWORD(v14) = RiffStringTable;
            goto LABEL_1229;
          }
          unint64_t v434 = *(unsigned __int16 *)(v501 + 544);
          if (v434 <= 0x3F)
          {
            int v435 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v434 + 66328), v476, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v435;
              *(_DWORD *)(a2 + 9600) = v435;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34524E55 | v519))
        {
          unint64_t v432 = *(unsigned __int16 *)(v501 + 544);
          if (v432 <= 0x3F)
          {
            int v433 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v432 + 66328), v477, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v433;
              *(_DWORD *)(a2 + 9360) = v433;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34475356 | v519))
        {
          unint64_t v436 = *(unsigned __int16 *)(v501 + 544);
          if (v436 <= 0x3F)
          {
            int v437 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v436 + 66328), v475, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v437;
              v509[480] = v437;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x4953564F | v519))
        {
          unint64_t v438 = *(unsigned __int16 *)(v501 + 544);
          if (v438 <= 0x3F)
          {
            int v439 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v438 + 66328), v474, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v439;
              v509[1680] = v439;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x4453564F | v519))
        {
          unint64_t v440 = *(unsigned __int16 *)(v501 + 544);
          if (v440 <= 0x3F)
          {
            int v441 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v440 + 66328), v473, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v441;
              v509[1740] = v441;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x344D5953 | v519))
        {
          unint64_t v442 = *(unsigned __int16 *)(v501 + 544);
          if (v442 <= 0x3F)
          {
            int v443 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v442 + 66328), v472, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v443;
              int *v509 = v443;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34445953 | v519))
        {
          unint64_t v444 = *(unsigned __int16 *)(v501 + 544);
          if (v444 <= 0x3F)
          {
            int v445 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v444 + 66328), v471, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v445;
              v509[120] = v445;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34575953 | v519))
        {
          unint64_t v446 = *(unsigned __int16 *)(v501 + 544);
          if (v446 <= 0x3F)
          {
            int v447 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v446 + 66328), v470, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v447;
              v509[180] = v447;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (!(*(_DWORD *)__src ^ 0x34425953 | v519))
        {
          unint64_t v457 = *(unsigned __int16 *)(v501 + 544);
          if (v457 <= 0x3F)
          {
            int v458 = v520;
            LODWORD(v14) = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v457 + 66328), v469, v15, v16, v17, v18, v19);
            if ((v14 & 0x80000000) == 0)
            {
              ++*(_WORD *)(v501 + 544);
              *(_DWORD *)(v501 + 24) += v458;
              v509[60] = v458;
            }
            goto LABEL_1219;
          }
          goto LABEL_1165;
        }
        if (*(_DWORD *)__src ^ 0x34494357 | v519 && *(_DWORD *)__src ^ 0x34494353 | v519)
        {
          if (!(*(_DWORD *)__src ^ 0x34565649 | v519))
          {
            unint64_t v459 = *(unsigned __int16 *)(v501 + 544);
            if (v459 <= 0x3F)
            {
              int v464 = v520;
              LODWORD(v14) = ssftriff_reader_DetachChunkData(a3, (uint64_t *)(a2 + 8 * v459 + 66328), v468, v15, v16, v17, v18, v19);
              if ((v14 & 0x80000000) == 0)
              {
                ++*(_WORD *)(v501 + 544);
                *(_DWORD *)(v501 + 24) += v464;
                *(_DWORD *)(a2 + 14640) = v464;
              }
            }
            else
            {
              LODWORD(v14) = -2065686524;
            }
LABEL_1291:
            uint64_t v8 = a6;
            uint64_t v13 = v508;
            uint64_t v11 = a3;
            goto LABEL_1298;
          }
          if (!strcmp(v9, "KID4"))
          {
            if (!(*(_DWORD *)__src ^ 0x3444494B | v519))
            {
              uint64_t v460 = v520;
              uint64_t v461 = a2;
              uint64_t v11 = a3;
              uint64_t v462 = a3;
              unsigned int v463 = 49;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "KMT4"))
          {
            if (!(*(_DWORD *)__src ^ 0x34544D4B | v519))
            {
              uint64_t v460 = v520;
              uint64_t v461 = a2;
              uint64_t v11 = a3;
              uint64_t v462 = a3;
              unsigned int v463 = 50;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "KMQ4"))
          {
            if (!(*(_DWORD *)__src ^ 0x34514D4B | v519))
            {
              uint64_t v460 = v520;
              uint64_t v461 = a2;
              uint64_t v11 = a3;
              uint64_t v462 = a3;
              unsigned int v463 = 51;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "KMP4"))
          {
            if (!(*(_DWORD *)__src ^ 0x34504D4B | v519))
            {
              uint64_t v460 = v520;
              uint64_t v461 = a2;
              uint64_t v11 = a3;
              uint64_t v462 = a3;
              unsigned int v463 = 52;
              goto LABEL_1297;
            }
            goto LABEL_1291;
          }
          if (!strcmp(a5, "OAUD"))
          {
            uint64_t v460 = v520;
            uint64_t v461 = a2;
            uint64_t v11 = a3;
            uint64_t v462 = a3;
            unsigned int v463 = 53;
            goto LABEL_1297;
          }
          if (!strcmp(a5, "OAUB"))
          {
            uint64_t v460 = v520;
            uint64_t v461 = a2;
            uint64_t v11 = a3;
            uint64_t v462 = a3;
            unsigned int v463 = 57;
            goto LABEL_1297;
          }
          if (!strcmp(a5, "OAUF"))
          {
            uint64_t v460 = v520;
            uint64_t v461 = a2;
            uint64_t v11 = a3;
            uint64_t v462 = a3;
            unsigned int v463 = 58;
            goto LABEL_1297;
          }
          if (!strcmp(a5, "OSDT"))
          {
            uint64_t v460 = v520;
            uint64_t v461 = a2;
            uint64_t v11 = a3;
            uint64_t v462 = a3;
            unsigned int v463 = 61;
LABEL_1297:
            uint64_t v8 = a6;
            LODWORD(v14) = select_bet4_LoadMfsData(v461, v462, v463, 0, v460, a6, v504, 0);
            uint64_t v13 = v508;
LABEL_1298:
            uint64_t v9 = a5;
            goto LABEL_1229;
          }
          uint64_t v9 = a5;
          uint64_t v8 = a6;
          uint64_t v11 = a3;
          if (strcmp(a5, "OSDO")) {
            goto LABEL_1216;
          }
          uint64_t v20 = v520;
          uint64_t v21 = a2;
          uint64_t v22 = a3;
          unsigned int v23 = 62;
          goto LABEL_126;
        }
        uint64_t v448 = ssftriff_reader_GetPosition(v11);
        v523 = 0;
        unint64_t v454 = *(unsigned __int16 *)(v501 + 544);
        LODWORD(v14) = -2065686524;
        if (v454 <= 0x3F)
        {
          uint64_t v455 = v448;
          int v456 = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v454 + 66328), &v523, v449, v450, v451, v452, v453);
          if ((v456 & 0x80000000) == 0)
          {
            ++*(_WORD *)(v501 + 544);
            *(_DWORD *)(v501 + 24) += v520;
            ssftriff_reader_Seek(v11, 4u, 1);
            int v456 = select_bet4_ParseRiff(a1, a2, v11, 1, v9, v523, v455);
          }
          LODWORD(v14) = v456;
        }
        goto LABEL_1021;
      }
      v523 = 0;
      if (v520 >= *(_DWORD *)(v501 + 20))
      {
        uint64_t v326 = 0;
        uint64_t v325 = 0;
LABEL_1103:
        LODWORD(v14) = select_bet4_ParseRiff(a1, a2, v11, 1, v9, v326, v325);
        ++*(_DWORD *)(a2 + 260);
        goto LABEL_1229;
      }
      unint64_t v323 = *(unsigned __int16 *)(v501 + 544);
      LODWORD(v14) = -2065686524;
      if (v323 <= 0x3F)
      {
        int RiffStringTable = ssftriff_reader_DetachChunkData(v11, (uint64_t *)(a2 + 8 * v323 + 66328), &v523, v15, v16, v17, v18, v19);
        if (RiffStringTable < 0) {
          goto LABEL_1228;
        }
        uint64_t v325 = ssftriff_reader_GetPosition(v11);
        ++*(_WORD *)(v501 + 544);
        *(_DWORD *)(v501 + 24) += v520;
        uint64_t v326 = v523;
        goto LABEL_1103;
      }
    }
LABEL_1229:
    int v425 = ssftriff_reader_CloseChunk(v11);
    if ((int)v14 > -1 && v425 < 0) {
      uint64_t v14 = v425;
    }
    else {
      uint64_t v14 = v14;
    }
  }
  while ((v14 & 0x80000000) == 0);
  if ((v14 & 0x1FFF) == 0x14)
  {
    uint64_t v14 = 0;
    char *__dst = 0;
  }
  return v14;
}

uint64_t logAverageSizesOfClusters(uint64_t result, int *a2, unsigned int a3)
{
  if (*(_DWORD *)(*((void *)a2 + 134) + 8328)) {
    BOOL v3 = a3 > 2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v6 = result;
    uint64_t result = MFS__log_select_Diag(result, 1, (uint64_t)off_2641136D8[a3]);
    if (*a2 >= 1)
    {
      uint64_t v7 = 2;
      do
      {
        uint64_t v8 = a2 + 11;
        if (a3) {
          uint64_t v8 = (int *)(*(void *)&a2[2 * a3 + 12] + 4 * v7);
        }
        int v9 = *v8;
        uint64_t v10 = *(void *)(*(void *)&a2[2 * a3 + 428] + 8 * v7);
        int v11 = 0;
        if (v10) {
          BOOL v12 = v9 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12)
        {
          if ((v9 + 1) > 2) {
            uint64_t v13 = (v9 + 1);
          }
          else {
            uint64_t v13 = 2;
          }
          uint64_t v14 = (int *)(v10 + 20);
          uint64_t v15 = v13 - 1;
          do
          {
            int v16 = *v14;
            v14 += 4;
            v11 += v16;
            --v15;
          }
          while (v15);
        }
        uint64_t result = MFS__log_select_Diag(v6, 1, (uint64_t)"state %d : %d pdfs - average %d");
        BOOL v3 = v7++ <= *a2;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t select_bet4_UpdateEarlyEmission(uint64_t a1)
{
  __src = 0;
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"bet4earlyemission", &__src) & 0x80000000) != 0
    && (paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"bet4earlyemissionallowed", &__src) & 0x80000000) != 0
    || !StringToBool(__src))
  {
    uint64_t v5 = 0;
    uint64_t v6 = "Early-emission has not been switched on";
  }
  else
  {
    uint64_t v5 = 1;
    uint64_t v6 = "Early-emission is switched on, from pipeline header or configuration";
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 3, 0, (uint64_t)v6, v2, v3, v4, v8);
  return v5;
}

void *select_bet4_loc_VoiceClose(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = a2 + 40352;
    uint64_t v5 = *(void **)(a2 + 40352);
    if (v5 && *v5)
    {
      uint64_t v6 = 0;
      unsigned int v7 = 1;
      do
      {
        *(void *)(a2 + 8 * v6 + 5432) = 0;
        uint64_t v6 = v7;
      }
      while (*(void *)(*(void *)v4 + 8 * v7++));
    }
    uint64_t v9 = *(void *)(a2 + 41256);
    if (v9)
    {
      heap_Free((void *)result[1], v9);
      *(void *)(v4 + 904) = 0;
    }
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(a2 + 7744));
    *(void *)(a2 + 7744) = 0;
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(v4 + 968));
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(v4 + 960));
    uint64_t v10 = *(uint64_t **)(v4 + 872);
    int v11 = *(uint64_t ***)(v4 + 880);
    BOOL v12 = *(uint64_t **)(v4 + 888);
    if (v10)
    {
      uint64_t v13 = *v10;
      if (*v10)
      {
        int v14 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v13);
          uint64_t v13 = v10[(unsigned __int16)++v14];
        }
        while (v13);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v10);
    }
    uint64_t v15 = (_WORD *)(a2 + 66840);
    if (v11)
    {
      int v16 = *v11;
      if (*v11)
      {
        int v17 = 0;
        uint64_t v18 = v11;
        do
        {
          uint64_t v19 = *v16;
          if (*v16)
          {
            int v20 = 0;
            do
            {
              heap_Free(*(void **)(v3 + 8), v19);
              ++v20;
              int v16 = *v18;
              uint64_t v19 = (*v18)[(unsigned __int16)v20];
            }
            while (v19);
          }
          heap_Free(*(void **)(v3 + 8), (uint64_t)v16);
          uint64_t v18 = &v11[(unsigned __int16)++v17];
          int v16 = *v18;
        }
        while (*v18);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v11);
    }
    if (v12)
    {
      uint64_t v21 = *v12;
      if (*v12)
      {
        int v22 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v21);
          uint64_t v21 = v12[(unsigned __int16)++v22];
        }
        while (v21);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v12);
    }
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)v4);
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(v4 + 8));
    mfs_DeInitData(v3, a2 + 25424);
    mfs_DeInitParam(v3, (_DWORD *)(a2 + 128));
    if (*v15)
    {
      unint64_t v30 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)(a2 + 66328 + 8 * v30++), v23, v24, v25, v26, v27, v28, v29);
      while (v30 < (unsigned __int16)*v15);
    }
    *uint64_t v15 = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v31 = *(void **)(v3 + 8);
    return heap_Free(v31, a2);
  }
  return result;
}

uint64_t select_bet4_LoadMfsData(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  if (a6)
  {
    int v12 = a7;
    int Position = ssftriff_reader_GetPosition(a2);
    uint64_t result = 0;
    uint64_t v16 = a1 + 240 * a3 + 24 * v9;
    *(void *)(v16 + 9112) = a6 + (Position - v12);
    *(_DWORD *)(v16 + 9120) = v8;
  }
  else if (a8 && *(_DWORD *)(a1 + 66316) <= a5)
  {
    uint64_t v18 = a1 + 240 * a3 + 24 * (int)a4;
    *(_DWORD *)(v18 + 9120) = a5;
    int v19 = ssftriff_reader_GetPosition(a2);
    uint64_t result = 0;
    *(_DWORD *)(v18 + 9124) = v19;
  }
  else
  {
    unint64_t v17 = *(unsigned __int16 *)(a1 + 66840);
    if (v17 <= 0x3F)
    {
      uint64_t result = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 8 * v17 + 66328), (void *)(a1 + 240 * a3 + 24 * (int)a4 + 9112), a4, a5, 0, a7, a8);
      if ((result & 0x80000000) == 0)
      {
        ++*(_WORD *)(a1 + 66840);
        *(_DWORD *)(a1 + 66320) += v8;
        *(_DWORD *)(a1 + 240 * a3 + 24 * v9 + 9120) = v8;
      }
    }
    else
    {
      return 2229280772;
    }
  }
  return result;
}

BOOL StringToBool(char *__src)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  strncpy(__dst, __src, 0x13uLL);
  char v9 = 48;
  char v1 = __dst[0];
  if (__dst[0])
  {
    uint64_t v2 = &__dst[1];
    uint64_t v3 = MEMORY[0x263EF8318];
    while (1)
    {
      __darwin_ct_rune_t v4 = v1;
      if (v1 < 0) {
        break;
      }
      if ((*(_DWORD *)(v3 + 4 * v1 + 60) & 0x8000) != 0) {
        goto LABEL_5;
      }
LABEL_6:
      int v5 = *v2++;
      char v1 = v5;
      if (!v5) {
        return *(_DWORD *)__dst == 7562617
      }
            || *(unsigned __int16 *)__dst == 49
            || (*(_DWORD *)__dst ^ 0x65757274 | v8) == 0;
    }
    if (!__maskrune(v1, 0x8000uLL)) {
      goto LABEL_6;
    }
LABEL_5:
    *(v2 - 1) = __tolower(v4);
    goto LABEL_6;
  }
  return *(_DWORD *)__dst == 7562617 || *(unsigned __int16 *)__dst == 49 || (*(_DWORD *)__dst ^ 0x65757274 | v8) == 0;
}

uint64_t select_bet4_loc_SetSynthParams(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicealpha", *(float *)(v2 + 128));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicebeta", *(float *)(v2 + 132));
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicevol", *(float *)(v2 + 164));
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicevuvrelamp", *(float *)(v2 + 140));
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicemvfboost", *(float *)(v2 + 168));
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = select_bet4_loc_SetSynthParamInt(v1, (uint64_t)"bet2voiceframesize", *(_DWORD *)(v2 + 152));
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = select_bet4_loc_SetSynthParamInt(v1, (uint64_t)"bet2voiceorder", *(_DWORD *)(v2 + 144));
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicef0std", *(float *)(v2 + 176));
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = select_bet4_loc_SetSynthParamFloat(v1, (uint64_t)"bet2voicef0mean", *(float *)(v2 + 180));
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = select_bet4_loc_SetSynthParamInt(v1, (uint64_t)"voicepitchavghz", *(_DWORD *)(v2 + 184));
                    if ((result & 0x80000000) == 0)
                    {
                      return select_bet4_loc_SetSynthParamString(v1, (char *)(v2 + 7800));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t select_bet4_loc_SetSynthParamInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = paramc_ParamSetInt(*(void *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 58009, "%s%s%s%d%s%x", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t select_bet4_loc_SetSynthParamString(uint64_t a1, char *a2)
{
  uint64_t v7 = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"synth_type", a2);
  if ((v7 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET4", 58009, "%s%s%s%s%s%x", v3, v4, v5, v6, "parameter");
  }
  return v7;
}

void *FreeBET4TuningData(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(a2 + 12) || *(_DWORD *)(a2 + 16))
    {
      uint64_t v4 = result[1367];
      if (!*(_DWORD *)(v4 + 8328))
      {
        uint64_t v5 = result[7];
        if (v4 != v5 + 128)
        {
          heap_Free(*(void **)(result[2] + 8), v4);
          uint64_t v5 = v3[7];
        }
        v3[1367] = v5 + 128;
      }
    }
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 8;
        do
        {
          uint64_t v10 = *(void *)(*(void *)a2 + v9);
          if (v10)
          {
            heap_Free(*(void **)(v3[2] + 8), v10);
            unint64_t v7 = *(unsigned int *)(a2 + 8);
          }
          ++v8;
          v9 += 48;
        }
        while (v8 < v7);
        uint64_t v6 = *(void *)a2;
      }
      heap_Free(*(void **)(v3[2] + 8), v6);
    }
    int v11 = *(void **)(v3[2] + 8);
    return heap_Free(v11, a2);
  }
  return result;
}

uint64_t mfs_UnitSequence_SequenceEarlyEmission_Obersee(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1[72];
  int v4 = *(_DWORD *)(*(void *)(v3 + 2120) + 1096);
  *(_DWORD *)(v3 + 2600) = *(_DWORD *)(v3 + 2272);
  unsigned int v5 = a3 - a2;
  if (a3 <= a2) {
    return 0;
  }
  int v7 = v4 - 1;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v8 = a2;
  do
  {
    int v9 = *(_DWORD *)(*(void *)(v3 + 2152) + 4 * v8);
    uint64_t UnitData_Obersee = mfs_getUnitData_Obersee(*(void *)(v3 + 2120), *a1, v9, (uint64_t)&v14);
    if ((UnitData_Obersee & 0x80000000) != 0) {
      break;
    }
    int MessageOffsetMsec = mfs_GetMessageOffsetMsec(*(void *)(v3 + 2120), v9);
    if (++v8 < (unint64_t)*(unsigned int *)(v3 + 2160))
    {
      int v12 = v9 == v7 ? -1 : v9;
      uint64_t UnitData_Obersee = mfs_SegmentList_Add(v3 + 2248, v12, SBYTE9(v15), MessageOffsetMsec, (unsigned __int16)(*(_WORD *)(*(void *)(*(void *)(v3 + 2120) + 1072) + 24)* BYTE11(v15)));
      if ((UnitData_Obersee & 0x80000000) != 0) {
        break;
      }
    }
    --v5;
  }
  while (v5);
  return UnitData_Obersee;
}

uint64_t mfs_UnitSequence_Sequence_Obersee(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v21 = 0u;
  long long v22 = 0u;
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 1096);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v7 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 16), 264 * *(unsigned int *)(a1 + 48));
  if (!v7) {
    return 2229280778;
  }
  *(void *)(a1 + 16) = v7;
  if (!*(_DWORD *)(a1 + 48)) {
    return 0;
  }
  unint64_t v8 = 0;
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  int v12 = v6 - 1;
  while (1)
  {
    int v13 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v8);
    uint64_t UnitData_Obersee = mfs_getUnitData_Obersee(*(void *)(a1 + 8), a3, v13, (uint64_t)&v21);
    if ((UnitData_Obersee & 0x80000000) != 0) {
      break;
    }
    if (v8)
    {
      ++v9;
      if (v21 != v11)
      {
        uint64_t v15 = *(void *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
        *(_DWORD *)uint64_t v15 = v10;
        *(_DWORD *)(v15 + 4) = v9;
        *(_OWORD *)(v15 + 8) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 56) = 0u;
        *(_OWORD *)(v15 + 72) = 0u;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *(_OWORD *)(v15 + 120) = 0u;
        *(_OWORD *)(v15 + 136) = 0u;
        *(_OWORD *)(v15 + 152) = 0u;
        *(_OWORD *)(v15 + 168) = 0u;
        *(_OWORD *)(v15 + 184) = 0u;
        *(_OWORD *)(v15 + 200) = 0u;
        *(_OWORD *)(v15 + 216) = 0u;
        *(_OWORD *)(v15 + 232) = 0u;
        *(_OWORD *)(v15 + 248) = 0u;
        ++*(_DWORD *)(a1 + 24);
        int v10 = v9;
      }
    }
    int MessageOffsetMsec = mfs_GetMessageOffsetMsec(*(void *)(a1 + 8), v13);
    ++v8;
    unint64_t v17 = *(unsigned int *)(a1 + 48);
    if (v8 < v17)
    {
      if (v13 == v12) {
        int v18 = -1;
      }
      else {
        int v18 = v13;
      }
      uint64_t UnitData_Obersee = mfs_SegmentList_Add(a2, v18, SBYTE9(v22), MessageOffsetMsec, (unsigned __int16)(*(_WORD *)(*(void *)(*(void *)(a1 + 8) + 1072) + 24) * BYTE11(v22)));
      if ((UnitData_Obersee & 0x80000000) != 0) {
        return UnitData_Obersee;
      }
      unint64_t v17 = *(unsigned int *)(a1 + 48);
    }
    int v11 = v13;
    if (v8 >= v17)
    {
      if (v9 != v10)
      {
        uint64_t v19 = *(void *)(a1 + 16) + 264 * *(unsigned int *)(a1 + 24);
        *(_DWORD *)uint64_t v19 = v10;
        *(_DWORD *)(v19 + 4) = v9 + 1;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        *(_OWORD *)(v19 + 152) = 0u;
        *(_OWORD *)(v19 + 168) = 0u;
        *(_OWORD *)(v19 + 184) = 0u;
        *(_OWORD *)(v19 + 200) = 0u;
        *(_OWORD *)(v19 + 216) = 0u;
        *(_OWORD *)(v19 + 232) = 0u;
        *(_OWORD *)(v19 + 248) = 0u;
        ++*(_DWORD *)(a1 + 24);
      }
      return UnitData_Obersee;
    }
  }
  return UnitData_Obersee;
}

uint64_t CandidatePhonemeDuration(unsigned __int8 *a1, unsigned int a2, int a3)
{
  v13[0] = 0;
  v13[1] = 0;
  int v12 = v13;
  mfs_getUnitDataFromMfsData(a1, a2, (uint64_t *)&v12);
  uint64_t v6 = *((unsigned __int16 *)v12 + 4);
  int v7 = a3 - 2;
  if (a3 > 2)
  {
    unsigned int v8 = a2 - 1;
    do
    {
      mfs_getUnitDataFromMfsData(a1, v8, (uint64_t *)&v12);
      uint64_t v6 = v6 + *((unsigned __int16 *)v12 + 4);
      --v8;
      --v7;
    }
    while (v7);
  }
  int v9 = 2 - a3;
  if (v9 + *(_DWORD *)a1 >= 2)
  {
    int v10 = 1;
    do
    {
      mfs_getUnitDataFromMfsData(a1, a2 + v10, (uint64_t *)&v12);
      uint64_t v6 = v6 + *((unsigned __int16 *)v12 + 4);
      ++v10;
    }
    while (v10 < v9 + *(_DWORD *)a1);
  }
  return v6;
}

uint64_t CandidatePhonemeDurationDistance(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  int v5 = *(unsigned __int8 *)(*(void *)(a1 + 12232) + a2);
  int v6 = v5 - a4;
  if (v5 - a4 < 0) {
    int v6 = a4 - v5;
  }
  char v8 = v5 < a4 && v6 > a5;
  unsigned int v9 = v6 << v8;
  if (v6 > 2 * a5) {
    return (5 * v6);
  }
  else {
    return v9;
  }
}

uint64_t mfs_InitData(uint64_t a1, void *a2, _DWORD *a3)
{
  bzero(a2, 0x30B0uLL);
  int v6 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 6416);
  *((void *)a2 + 1527) = v6;
  if (!v6) {
    return 2229280778;
  }
  bzero(v6, 0x1910uLL);
  return BET3FLT__InitVData(a1, a2, a3);
}

void mfs_DeInitData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 12232);
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    *(void *)(a2 + 12232) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 1072);
  if (v5 && *(_DWORD *)(v5 + 8368) == 1) {
    mfs_deInitUnitDataCompact((void *)a1, (void *)(a2 + 1104));
  }
  uint64_t v6 = *(void *)(a2 + 12440);
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a2 + 12440) = 0;
  }
  uint64_t v7 = *(void *)(a2 + 12448);
  if (v7)
  {
    heap_Free(*(void **)(a1 + 8), v7);
    *(void *)(a2 + 12448) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 12240);
  if (v8)
  {
    heap_Free(*(void **)(a1 + 8), v8);
    *(void *)(a2 + 12240) = 0;
  }
  uint64_t v9 = *(void *)(a2 + 2400);
  if (v9) {
    heap_Free(*(void **)(a1 + 8), v9);
  }
  uint64_t v10 = -160;
  int v11 = (uint64_t *)(a2 + 1552);
  do
  {
    uint64_t v12 = v11[20];
    uint64_t v13 = *v11;
    if (*v11)
    {
      *int v11 = v13 + 16;
      heap_Free(*(void **)(a1 + 8), v13 + 16);
    }
    if (v12) {
      heap_Free(*(void **)(a1 + 8), v12);
    }
    TrieIntInit((void *)(a2 + 1552 + v10 + 728));
    ++v11;
    v10 += 16;
  }
  while (v10);
  mfs_HarchData_DeInit((_OWORD *)(a2 + 1944));
  mfs_StateNGram_DeInit((_OWORD *)(a2 + 2280));
  mfs_symData_DeInit((void *)a2);
  long long v14 = *(_DWORD **)(a2 + 1072);
  if (v14 && v14[2082])
  {
    if ((v14[2086] - 3) <= 1)
    {
      mfs_BPESymData_DeInit_Obersee(a2);
      long long v14 = *(_DWORD **)(a2 + 1072);
    }
    if (v14[2083] == 1) {
      mfs_AllUnitCompData_DeInit_Obersee(a2);
    }
  }
  BET3FLT__DeInitVData(a1, (_OWORD *)a2);
  uint64_t v15 = *(void *)(a2 + 12216);
  if (v15) {
    heap_Free(*(void **)(a1 + 8), v15);
  }
  bzero((void *)a2, 0x30B0uLL);
}

void *mfs_deInitUnitDataCompact(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2[10];
    if (v4)
    {
      uint64_t result = heap_Free((void *)result[1], v4);
      a2[10] = 0;
    }
    uint64_t v5 = a2[11];
    if (v5)
    {
      uint64_t result = heap_Free((void *)v3[1], v5);
      a2[11] = 0;
    }
    uint64_t v6 = a2[12];
    if (v6)
    {
      uint64_t result = heap_Free((void *)v3[1], v6);
      a2[12] = 0;
    }
  }
  return result;
}

uint64_t mfs_isUnitRemoved(uint64_t result, unsigned int a2)
{
  if (result) {
    return ((1 << (a2 & 7)) & *(unsigned __int8 *)(result + ((unint64_t)a2 >> 3))) >> (a2 & 7);
  }
  return result;
}

uint64_t mfs_initUnitDataCompact(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 1072);
  if (a3 && v11)
  {
    uint64_t v12 = *(void *)(v11 + 9704);
    unsigned int v13 = *(_DWORD *)(v11 + 9952) >> 1;
    *a3 = *(_DWORD *)(v11 + 9712) >> 2;
    a3[1] = v13;
    uint64_t v14 = *(void *)(v11 + 9944);
    *((void *)a3 + 2) = v12;
    *((void *)a3 + 3) = v14;
    uint64_t v15 = *(void *)(v11 + 10184);
    a3[2] = *(_DWORD *)(v11 + 10192);
    uint64_t v16 = *(void *)(v11 + 10424);
    *((void *)a3 + 4) = v15;
    *((void *)a3 + 5) = v16;
    a3[12] = *(_DWORD *)(v11 + 10672);
    *((void *)a3 + 7) = *(void *)(v11 + 10664);
  }
  uint64_t v17 = *(unsigned int *)(v11 + 132);
  if ((int)v17 < 1) {
    goto LABEL_25;
  }
  unsigned int v18 = 0;
  uint64_t v19 = (_DWORD *)(v11 + 264);
  do
  {
    int v20 = *(v19 - 10);
    if ((v20 != 1 || *(_DWORD *)(v11 + 25288) != 1) && v20 != 0) {
      v18 += *v19;
    }
    ++v19;
    --v17;
  }
  while (v17);
  if (!v18)
  {
LABEL_25:
    MFS__log_select_Error(a1, 0, (uint64_t)"iStrRecordLen can not be 0!\n", a4, a5, a6, a7, a8);
    a3[28] = 0;
    uint64_t v34 = 2229281034;
LABEL_42:
    mfs_deInitUnitDataCompact((void *)a1, a3);
    return v34;
  }
  a3[28] = v18;
  uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), *a3, 2);
  if (!v23) {
    goto LABEL_41;
  }
  uint64_t v29 = a3[1];
  if (v29)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    uint64_t v32 = *((void *)a3 + 3);
    do
    {
      if (*(_WORD *)(v32 + 2 * v30))
      {
        unsigned int v33 = 0;
        do
          *(_WORD *)(v23 + 2 * (v31 + v33++)) = v30;
        while (v33 < *(unsigned __int16 *)(v32 + 2 * v30));
        v31 += v33;
      }
      ++v30;
    }
    while (v30 != v29);
  }
  else
  {
    uint64_t v29 = 0;
  }
  *((void *)a3 + 10) = v23;
  uint64_t v35 = (_WORD *)heap_Calloc(*(void **)(a1 + 8), v29, 2);
  if (!v35) {
    goto LABEL_41;
  }
  uint64_t v36 = (_WORD *)*((void *)a3 + 3);
  _WORD *v35 = *v36;
  unsigned int v37 = a3[1];
  if (v37 >= 2)
  {
    int v38 = 1;
    int v39 = 1;
    do
    {
      v35[(unsigned __int16)v39] = v36[(unsigned __int16)v39] + v35[v38 - 1];
      int v38 = (unsigned __int16)++v39;
    }
    while (v37 > (unsigned __int16)v39);
  }
  *((void *)a3 + 11) = v35;
  *((void *)a3 + 13) = *(void *)(v11 + 11144);
  uint64_t v40 = *((void *)a3 + 10);
  uint64_t v41 = *(void *)(a2 + 1072);
  uint64_t v42 = heap_Calloc(*(void **)(a1 + 8), *a3, 2);
  if (!v42)
  {
LABEL_41:
    uint64_t v34 = 2229280778;
    MFS__log_select_Error(a1, 0, (uint64_t)"Not enough memory\n", v24, v25, v26, v27, v28);
    goto LABEL_42;
  }
  uint64_t v43 = *a3;
  if (v43 >= 2)
  {
    uint64_t v44 = 0;
    uint64_t v45 = *(void *)(a2 + 2384);
    do
    {
      if (*(unsigned __int16 *)(v40 + 2 * v44 + 2) == *(unsigned __int16 *)(v40 + 2 * v44))
      {
        uint64_t v46 = (__int16 *)(v42 + 2 * v44);
        __int16 v47 = *v46;
        v46[1] = *v46;
        if (!v45
          || !(((1 << (v44 & 7)) & *(unsigned __int8 *)(v45 + (v44 >> 3))) >> (v44 & 7)))
        {
          v46[1] = v47 + *(_WORD *)(v41 + 24) * *(unsigned __int8 *)(*((void *)a3 + 5) + v44);
        }
      }
      else
      {
        *(_WORD *)(v42 + 2 * v44 + 2) = 0;
      }
      ++v44;
    }
    while (v43 - 1 != v44);
  }
  uint64_t v34 = 0;
  *(_WORD *)(v42 + 2 * (v43 - 1)) = 0;
  *((void *)a3 + 12) = v42;
  return v34;
}

uint64_t mfs_getUnitDataFromMfsData(unsigned __int8 *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = *((void *)a1 + 134);
  int v4 = *(_DWORD *)(v3 + 8368);
  if (v4 != 1)
  {
    if (v4) {
      return 2229281034;
    }
    uint64_t v5 = 0;
    *a3 = *((void *)a1 + 136) + 16 * a2;
    return v5;
  }
  uint64_t v6 = *a3;
  unsigned int v7 = *((_DWORD *)a1 + 276);
  if (v7 - 1 == a2)
  {
    uint64_t v5 = 0;
    *(void *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 8) = -65536;
    *(_DWORD *)(v6 + 12) = 65793;
    return v5;
  }
  unsigned int v8 = *a1;
  uint64_t v9 = *((void *)a1 + 148);
  uint64_t v10 = *(unsigned __int16 *)(v9 + 2 * a2);
  int v11 = *(_DWORD *)(*((void *)a1 + 140) + 4 * a2);
  *(_WORD *)(v6 + 10) = v10;
  *(_DWORD *)uint64_t v6 = v11;
  *(_WORD *)(v6 + 8) = *(unsigned __int8 *)(*((void *)a1 + 143) + a2);
  uint64_t v12 = *((void *)a1 + 142);
  int v13 = a2 / v8;
  *(unsigned char *)(v6 + 13) = *(unsigned char *)(v12 + a2 / v8);
  if (a2 >= v8 && (unsigned int v14 = *(unsigned __int16 *)(v9 + 2 * a2), v14 <= *(unsigned __int16 *)(v9 + 2 * (a2 - v8))))
  {
    if (v7 > a2 && v7 - v8 < a2 || (unsigned int v16 = v8 + a2, v16 < v7) && v14 < *(unsigned __int16 *)(v9 + 2 * v16))
    {
      char v15 = 0;
      *(unsigned char *)(v6 + 12) = *(unsigned char *)(v12 + (v13 - 1));
      goto LABEL_17;
    }
    *(unsigned char *)(v6 + 12) = *(unsigned char *)(v12 + (v13 - 1));
  }
  else
  {
    *(unsigned char *)(v6 + 12) = 0;
  }
  if ((v13 + 1) < *((_DWORD *)a1 + 278))
  {
    char v15 = *(unsigned char *)(v12 + (v13 + 1));
LABEL_17:
    *(unsigned char *)(v6 + 14) = v15;
  }
  *(_DWORD *)(v6 + 4) = *(unsigned __int16 *)(*((void *)a1 + 150) + 2 * a2) / *(int *)(v3 + 24)
                      + *(_DWORD *)(*((void *)a1 + 151) + 4 * v10) / *((_DWORD *)a1 + 304);
  uint64_t v17 = (char *)*((void *)a1 + 145);
  uint64_t v5 = 0;
  if (*((_DWORD *)a1 + 288) == 1) {
    char v18 = *v17;
  }
  else {
    char v18 = v17[a2];
  }
  *(unsigned char *)(v6 + 15) = v18;
  return v5;
}

uint64_t mfs_LoadData(uint64_t a1, int *a2, uint64_t a3)
{
  Vuint64_t Data = MFS__LoadVData(a1, (uint64_t)a2, a3);
  if ((VData & 0x80000000) != 0) {
    return VData;
  }
  uint64_t v12 = (unsigned int *)(a3 + 16432);
  uint64_t v13 = 2229280778;
  a2[115] = 1;
  *((void *)a2 + 134) = a3;
  int v14 = *(_DWORD *)(a3 + 8328);
  if (v14 == 1)
  {
    if (!*(_DWORD *)(a3 + 23392))
    {
      *((void *)a2 + 135) = *(void *)(a3 + 8984);
LABEL_32:
      if (*(_DWORD *)(a3 + 8332) == 1)
      {
        mfs_AllUnitCompData_Init_Obersee((void *)a3, (uint64_t)a2);
        unsigned int v35 = a2[472];
        unsigned int v36 = 8 * *(_DWORD *)(a3 + 21712);
        a2[274] = v36 / v35 + 1;
        if (v36 % v35 < 9) {
          goto LABEL_45;
        }
      }
      else
      {
        unsigned int UnitDataRecordSize_Obersee = mfs_getUnitDataRecordSize_Obersee();
        unsigned int v38 = *(_DWORD *)(a3 + 21712);
        a2[274] = v38 / UnitDataRecordSize_Obersee + 1;
        if (!(v38 % UnitDataRecordSize_Obersee))
        {
          a2[275] = UnitDataRecordSize_Obersee;
LABEL_45:
          a2[594] = 0;
          *((void *)a2 + 298) = *(void *)(a3 + 9224);
          a2[598] = *(_DWORD *)(a3 + 9232) >> 2;
          goto LABEL_46;
        }
      }
      uint64_t v34 = "MFS_DATA_OBERSEE_ALLUNITDATA block does not appear to match runtime engine!\n";
LABEL_37:
      uint64_t v39 = a1;
LABEL_38:
      MFS__log_select_Error(v39, 0, (uint64_t)v34, v7, v8, v9, v10, v11);
      return 2229281034;
    }
    uint64_t v24 = *(void *)(a3 + 23144);
    unsigned __int16 v25 = *(_WORD *)(a3 + 23152) - 1;
    int v26 = *(unsigned __int8 *)(v24 + v25);
    uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), *v12 << 10, 8);
    if (!v27) {
      return 2229280778;
    }
    *((void *)a2 + 300) = v27;
    uint64_t v28 = 4 * v26 * *v12;
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *(_WORD **)(a3 + 23384);
      do
      {
        if (*v30)
        {
          uint64_t v31 = v29 % v25;
          if (*(unsigned __int8 *)(v24 + v31) * *(unsigned __int8 *)(v24 + v31) != (unsigned __int16)*v30) {
            return 2229281034;
          }
          uint64_t v32 = v30 + 1;
          *(void *)(*((void *)a2 + 300) + 8 * v29) = v32;
          uint64_t v30 = &v32[*(unsigned __int8 *)(v24 + v31) * *(unsigned __int8 *)(v24 + v31)];
        }
        else
        {
          v30 += 2;
        }
        ++v29;
      }
      while (v28 != v29);
    }
  }
  else
  {
    if (v14 || !*(_DWORD *)(a3 + 18352))
    {
      *((void *)a2 + 135) = *(void *)(a3 + 8984);
      goto LABEL_15;
    }
    uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1792 * *v12, 8);
    *((void *)a2 + 300) = v15;
    if (!v15) {
      return 2229280778;
    }
    unsigned int v16 = *(_DWORD **)(a3 + 18344);
    unsigned int v17 = *v12;
    if (*v16 == 1) {
      unsigned int v17 = 1792 * *v12;
    }
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (unsigned __int16 *)&v16[*v16 == 1];
      int v20 = v19;
      do
      {
        int v21 = *v20;
        v20 += 2;
        if (v21)
        {
          *(void *)(*((void *)a2 + 300) + v18) = v20;
          int v20 = v19 + 32770;
        }
        v18 += 8;
        uint64_t v19 = v20;
      }
      while (8 * v17 != v18);
    }
  }
  int v33 = *(_DWORD *)(a3 + 8328);
  *((void *)a2 + 135) = *(void *)(a3 + 8984);
  if (v33 == 1) {
    goto LABEL_32;
  }
LABEL_15:
  int v22 = *(_DWORD *)(a3 + 8368);
  if (v22 == 1)
  {
    *((void *)a2 + 298) = *(void *)(a3 + 10904);
    a2[598] = *(_DWORD *)(a3 + 10912);
    a2[594] = 1;
    if ((mfs_initUnitDataCompact(a1, (uint64_t)a2, (unsigned int *)a2 + 276, v7, v8, v9, v10, v11) & 0x80000000) != 0) {
      return 2229281034;
    }
    int v23 = a2[276];
  }
  else
  {
    *((void *)a2 + 298) = *(void *)(a3 + 9224);
    a2[598] = *(_DWORD *)(a3 + 9232) >> 2;
    if (v22)
    {
      uint64_t v34 = "Unknown UND4 compressing algorithm!\n";
      goto LABEL_37;
    }
    *((void *)a2 + 136) = *(void *)(a3 + 9464);
    int v23 = *(_DWORD *)(a3 + 9472) >> 4;
  }
  a2[274] = v23;
  if (*(_DWORD *)(a3 + 8272))
  {
    Vuint64_t Data = mfs_fastPhoneDur(a1, a2);
    if ((VData & 0x80000000) != 0) {
      return VData;
    }
  }
LABEL_46:
  uint64_t v41 = *(unsigned int **)(a3 + 11624);
  if (v41 && ((uint64_t v42 = *(_DWORD **)(a3 + 11864), *(_DWORD *)(a3 + 8328)) || v42))
  {
    uint64_t v49 = *v41;
    *((unsigned char *)a2 + 12456) = v49;
    uint64_t v50 = heap_Calloc(*(void **)(a1 + 8), v49, 24);
    if (!v50) {
      return 2229280778;
    }
    if (v49)
    {
      uint64_t v51 = 0;
      uint64_t v52 = (_DWORD *)v50;
      do
      {
        v51 += 4;
        *uint64_t v52 = *(unsigned int *)((char *)v41 + v51);
        v52 += 6;
      }
      while (4 * v49 != v51);
      unsigned int v53 = v51 + 4;
      uint64_t v54 = (unsigned char *)(v50 + 5);
      uint64_t v55 = v49;
      do
      {
        *uint64_t v54 = *(unsigned int *)((char *)v41 + v53);
        v54 += 24;
        v53 += 4;
        --v55;
      }
      while (v55);
      uint64_t v56 = 0;
      uint64_t v57 = (char *)v41 + v53;
      do
      {
        int v58 = 0;
        if (v56)
        {
          uint64_t v59 = v56;
          uint64_t v60 = v50;
          do
          {
            int v61 = *(unsigned __int8 *)(v60 + 5);
            int v62 = *(_DWORD *)v60;
            v60 += 24;
            v58 += 4 * v61 * v62;
            --v59;
          }
          while (v59);
        }
        *(void *)(v50 + 24 * v56++ + 8) = &v57[v58];
      }
      while (v56 != v49);
    }
    if (*(_DWORD *)(a3 + 8328))
    {
      LODWORD(v48) = 0;
    }
    else
    {
      int v68 = 4 * v42[2];
      unsigned int v69 = v68 + 20;
      LODWORD(v48) = *(_DWORD *)((char *)v42 + (v68 + 16)) / (*v42 + 1);
      uint64_t v70 = *(unsigned int *)((char *)v42 + (v68 + 20));
      if (v70)
      {
        unsigned int v71 = v68 + 24;
        unsigned int v72 = (unsigned char *)(v50 + 4);
        uint64_t v73 = *(unsigned int *)((char *)v42 + v69);
        do
        {
          *unsigned int v72 = *(_DWORD *)((char *)v42 + v71);
          v72 += 24;
          v71 += 4;
          --v73;
        }
        while (v73);
        uint64_t v74 = 0;
        float v75 = (char *)v42 + v71;
        do
        {
          int v76 = 0;
          if (v74)
          {
            uint64_t v77 = v74;
            float v78 = (unsigned __int8 *)(v50 + 4);
            do
            {
              int v79 = *v78;
              v78 += 24;
              v76 += v48 * v79;
              --v77;
            }
            while (v77);
          }
          *(void *)(v50 + 24 * v74++ + 16) = &v75[v76];
        }
        while (v74 != v70);
      }
    }
    *((void *)a2 + 1555) = v50;
  }
  else if (*(void *)(a3 + 11408))
  {
    uint64_t v43 = *(unsigned int *)(a3 + 132);
    if ((int)v43 >= 1)
    {
      uint64_t v44 = 0;
      uint64_t v45 = a2 + 308;
      uint64_t v46 = 24 * v43;
      uint64_t v47 = 224;
      do
      {
        if (*(_DWORD *)(a3 + v47))
        {
          *((void *)v45 - 1) = *(void *)(a3 + v44 + 11384);
          *uint64_t v45 = *(_DWORD *)(a3 + v44 + 11396);
        }
        v44 += 24;
        v45 += 8;
        v47 += 4;
      }
      while (v46 != v44);
    }
    unint64_t v48 = *(unsigned int *)(a3 + 11416) / (4 * (unint64_t)*(unsigned int *)(a3 + 268));
  }
  else
  {
    if (!*(void *)(a3 + 12128)) {
      goto LABEL_86;
    }
    uint64_t v63 = *(unsigned int *)(a3 + 132);
    if ((int)v63 >= 1)
    {
      uint64_t v64 = (_DWORD *)(a3 + 224);
      uint64_t v65 = a2 + 312;
      uint64_t v66 = a3;
      do
      {
        if (*v64++)
        {
          *(v65 - 1) = *(void *)(v66 + 12104);
          *uint64_t v65 = *(void *)(v66 + 12344);
          *((_DWORD *)v65 - 4) = *(_DWORD *)(v66 + 11396);
        }
        v65 += 4;
        v66 += 24;
        --v63;
      }
      while (v63);
    }
    unint64_t v48 = *(unsigned int *)(a3 + 12136) / (2 * (unint64_t)*(unsigned int *)(a3 + 268));
  }
  a2[386] = v48;
LABEL_86:
  if (*(_DWORD *)(a3 + 8328))
  {
    uint64_t v80 = *a2;
    uint64_t v81 = *(void *)(a3 + 22208);
    uint64_t v82 = *(void *)(a3 + 22232);
    uint64_t v83 = *(void *)(a3 + 22184);
    uint64_t v84 = heap_Calloc(*(void **)(a1 + 8), v80 + 2, 8);
    *((void *)a2 + 215) = v84;
    if (!v84) {
      return 2229280778;
    }
    uint64_t v85 = heap_Calloc(*(void **)(a1 + 8), v80 + 2, 8);
    *((void *)a2 + 216) = v85;
    if (!v85) {
      return 2229280778;
    }
    uint64_t v86 = heap_Calloc(*(void **)(a1 + 8), v80 + 2, 8);
    *((void *)a2 + 214) = v86;
    if (!v86) {
      return 2229280778;
    }
    if ((int)v80 >= 1)
    {
      uint64_t v87 = 16 * a2[11];
      uint64_t v88 = 2;
      do
      {
        *(void *)(*((void *)a2 + 215) + 8 * v88) = v81;
        *(void *)(*((void *)a2 + 215) + 8 * v88) -= 16;
        v81 += 16 * *(int *)(*((void *)a2 + 7) + 4 * v88);
        *(void *)(*((void *)a2 + 216) + 8 * v88) = v82;
        *(void *)(*((void *)a2 + 216) + 8 * v88) -= 16;
        v82 += 16 * *(int *)(*((void *)a2 + 8) + 4 * v88);
        *(void *)(*((void *)a2 + 214) + 8 * v88) = v83;
        *(void *)(*((void *)a2 + 214) + 8 * v88++) -= 16;
        v83 += v87;
      }
      while (v80 + 2 != v88);
    }
    float v89 = a2 + 448;
    *((void *)a2 + 225) = *(void *)(a3 + 22448);
    *((void *)a2 + 226) = *(void *)(a3 + 22472);
    uint64_t v90 = 22424;
  }
  else
  {
    uint64_t v91 = *(void *)(a3 + 12608);
    uint64_t v92 = *(void *)(a3 + 12632);
    uint64_t v93 = *(void *)(a3 + 12584);
    uint64_t v94 = heap_Calloc(*(void **)(a1 + 8), *a2, 8);
    *((void *)a2 + 195) = v94;
    if (!v94) {
      return 2229280778;
    }
    *((void *)a2 + 195) = v94 - 16;
    uint64_t v95 = heap_Calloc(*(void **)(a1 + 8), *a2, 8);
    *((void *)a2 + 196) = v95;
    if (!v95) {
      return 2229280778;
    }
    *((void *)a2 + 196) = v95 - 16;
    uint64_t v96 = heap_Calloc(*(void **)(a1 + 8), *a2, 8);
    *((void *)a2 + 194) = v96;
    if (!v96) {
      return 2229280778;
    }
    *((void *)a2 + 194) = v96 - 16;
    uint64_t v97 = *a2;
    if ((int)v97 >= 1)
    {
      uint64_t v98 = v97 + 2;
      uint64_t v99 = 8 * a2[11];
      uint64_t v100 = 2;
      do
      {
        *(void *)(*((void *)a2 + 195) + 8 * v100) = v91;
        *(void *)(*((void *)a2 + 195) + 8 * v100) -= 8;
        v91 += 8 * *(int *)(*((void *)a2 + 7) + 4 * v100);
        *(void *)(*((void *)a2 + 196) + 8 * v100) = v92;
        *(void *)(*((void *)a2 + 196) + 8 * v100) -= 8;
        v92 += 8 * *(int *)(*((void *)a2 + 8) + 4 * v100);
        *(void *)(*((void *)a2 + 194) + 8 * v100) = v93;
        *(void *)(*((void *)a2 + 194) + 8 * v100++) -= 8;
        v93 += v99;
      }
      while (v98 != v100);
    }
    float v89 = a2 + 408;
    *((void *)a2 + 205) = *(void *)(a3 + 12848);
    *((void *)a2 + 206) = *(void *)(a3 + 12872);
    uint64_t v90 = 12824;
  }
  *float v89 = *(void *)(a3 + v90);
  Vuint64_t Data = mfs_HarchData_Load((uint64_t)(a2 + 486), a3);
  if ((VData & 0x80000000) != 0) {
    return VData;
  }
  *((void *)a2 + 251) = *(void *)(a3 + 14504);
  uint64_t v101 = *(unsigned int *)(a3 + 132);
  if ((int)v101 >= 1)
  {
    float v102 = (_DWORD *)(a3 + 224);
    uint64_t v103 = (void *)(a3 + 14744);
    float v104 = a2 + 504;
    do
    {
      if (*v102++) {
        *float v104 = *v103;
      }
      v103 += 3;
      ++v104;
      --v101;
    }
    while (v101);
  }
  *((void *)a2 + 262) = *(void *)(a3 + 15248);
  Vuint64_t Data = UNICORN__mfs_SparseMtx_Load((uint64_t)(a2 + 534), a3 + 15480);
  if ((VData & 0x80000000) != 0) {
    return VData;
  }
  uint64_t inited = UNICORN__mfs_SparseMtx_Load((uint64_t)(a2 + 538), a3 + 15504);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (*(_DWORD *)(a3 + 8784)) {
    uint64_t inited = mfs_StateNGram_Load((uint64_t)(a2 + 570), *a2, a3 + 15720);
  }
  if (!mfs_symData_Init(a3, a2, a1)) {
    return 2229280778;
  }
  uint64_t v106 = *((void *)a2 + 134);
  if (*(_DWORD *)(v106 + 8328))
  {
    if ((*(_DWORD *)(v106 + 8344) - 3) <= 1)
    {
      uint64_t inited = mfs_BPESymData_Init_Obersee(a3, (uint64_t)a2, a1, v7, v8, v9, v10, v11);
      if ((inited & 0x80000000) != 0) {
        return inited;
      }
    }
  }
  int v107 = *(_DWORD *)(a3 + 8364);
  if (v107 != 1)
  {
    if (!v107)
    {
      *((void *)a2 + 1528) = *(void *)(a3 + 18104);
LABEL_118:
      uint64_t v108 = *(void *)(a3 + 20744);
      if (v108) {
        *((void *)a2 + 1531) = v108;
      }
      if (*(void *)(a3 + 20984))
      {
        mfs_loadKLDMTX(a2, a3);
        uint64_t inited = 0;
      }
      if (*(void *)(a3 + 21224))
      {
        mfs_loadKLDMTX_Quant((uint64_t)a2, a3);
        uint64_t inited = 0;
      }
      uint64_t v109 = *(void *)(a3 + 21464);
      if (v109)
      {
        a2[3064] = 2;
        *((void *)a2 + 1533) = v109;
        unsigned int v110 = 32;
        for (uint64_t i = 8; i != 32; i += 8)
          v110 += 4 * *(_DWORD *)(v109 + i);
        uint64_t inited = 0;
        *((void *)a2 + 1534) = v109 + v110;
        *((void *)a2 + 1535) = v109 + v110 + 16 * *(_DWORD *)(v109 + 4);
      }
      MFS__log_select_Diag(a1, 1, (uint64_t)"Loaded %d states from %d threshold at %d\n");
      return inited;
    }
    uint64_t v34 = "Loaded MFS_DATA_COST_JOIN_ELEMENTS failed, unsupported compression setting!\n";
    uint64_t v39 = 0;
    goto LABEL_38;
  }
  float v113 = *(unsigned __int8 **)(a3 + 18104);
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v153 = 0;
  float v154 = 0;
  uint64_t v152 = 0;
  MFS__log_select_Diag(a1, 1, (uint64_t)"decompressing MFS_DATA_COST_JOIN_ELEMENTS, mode=%d\n");
  uint64_t v114 = *(unsigned int *)v113;
  uint64_t v115 = heap_Calloc(*(void **)(a1 + 8), v114, 12);
  if (!v115) {
    goto LABEL_163;
  }
  unsigned int v116 = *((_DWORD *)v113 + 1);
  uint64_t v117 = do_huffman_uncompress(a1, (uint64_t)(v113 + 8), (uint64_t *)&v156, v116, 4 * (int)v114);
  uint64_t v118 = (uint64_t)v156;
  if ((v117 & 0x80000000) != 0)
  {
    uint64_t v13 = v117;
    if (v156) {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v156);
    }
    goto LABEL_163;
  }
  if (v114)
  {
    uint64_t v119 = v114;
    uint64_t v120 = (_DWORD *)v115;
    uint64_t v121 = v156;
    do
    {
      int v122 = *v121++;
      *uint64_t v120 = v122;
      v120 += 3;
      --v119;
    }
    while (v119);
  }
  else if (!v156)
  {
    goto LABEL_143;
  }
  heap_Free(*(void **)(a1 + 8), v118);
LABEL_143:
  unsigned int v123 = *(_DWORD *)&v113[v116 + 8];
  uint64_t v124 = v116 + 12;
  uint64_t v125 = do_huffman_uncompress(a1, (uint64_t)&v113[v124], (uint64_t *)&v155, v123, 2 * (int)v114);
  if ((v125 & 0x80000000) != 0)
  {
LABEL_162:
    uint64_t v13 = v125;
    goto LABEL_163;
  }
  int v126 = v123 + v124;
  uint64_t v127 = (uint64_t)v155;
  if (v114)
  {
    float v128 = (_WORD *)(v115 + 4);
    uint64_t v129 = v114;
    uint64_t v130 = v155;
    do
    {
      __int16 v131 = *v130++;
      _WORD *v128 = v131;
      v128 += 6;
      --v129;
    }
    while (v129);
  }
  else if (!v155)
  {
    goto LABEL_150;
  }
  heap_Free(*(void **)(a1 + 8), v127);
  uint64_t v155 = 0;
LABEL_150:
  unsigned int v132 = *(_DWORD *)&v113[v126];
  uint64_t v133 = (v126 + 4);
  uint64_t v125 = do_huffman_uncompress(a1, (uint64_t)&v113[v133], (uint64_t *)&v154, v132, 2 * (int)v114);
  if ((v125 & 0x80000000) != 0) {
    goto LABEL_162;
  }
  int v134 = v132 + v133;
  uint64_t v135 = (uint64_t)v154;
  if (v114)
  {
    uint64_t v136 = (_WORD *)(v115 + 6);
    uint64_t v137 = v114;
    float v138 = v154;
    do
    {
      __int16 v139 = *v138++;
      *uint64_t v136 = v139;
      v136 += 6;
      --v137;
    }
    while (v137);
  }
  else if (!v154)
  {
    goto LABEL_157;
  }
  heap_Free(*(void **)(a1 + 8), v135);
  float v154 = 0;
LABEL_157:
  unsigned int v140 = *(_DWORD *)&v113[v134];
  uint64_t v141 = (v134 + 4);
  uint64_t v125 = do_huffman_uncompress(a1, (uint64_t)&v113[v141], (uint64_t *)&v153, v140, 2 * (int)v114);
  if ((v125 & 0x80000000) != 0) {
    goto LABEL_162;
  }
  uint64_t v142 = (uint64_t)v153;
  if (v114)
  {
    uint64_t v143 = (_WORD *)(v115 + 8);
    uint64_t v144 = v114;
    uint64_t v145 = v153;
    do
    {
      __int16 v146 = *v145++;
      _WORD *v143 = v146;
      v143 += 6;
      --v144;
    }
    while (v144);
    goto LABEL_175;
  }
  if (v153)
  {
LABEL_175:
    heap_Free(*(void **)(a1 + 8), v142);
    uint64_t v153 = 0;
  }
  uint64_t v147 = do_lzfast_uncompress(a1, &v113[v140 + 4 + v141], (uint64_t *)&v152, *(_DWORD *)&v113[v140 + v141], v114);
  uint64_t inited = v147;
  if ((v147 & 0x80000000) == 0)
  {
    uint64_t v148 = (uint64_t)v152;
    if (v114)
    {
      uint64_t v149 = (unsigned char *)(v115 + 10);
      float v150 = v152;
      do
      {
        char v151 = *v150++;
        *uint64_t v149 = v151;
        v149 += 12;
        --v114;
      }
      while (v114);
    }
    else if (!v152)
    {
LABEL_184:
      *((void *)a2 + 1528) = v115;
      *((void *)a2 + 1530) = v115;
      MFS__log_select_Diag(a1, 1, (uint64_t)"decompressing MFS_DATA_COST_JOIN_ELEMENTS, mode=%d done!\n");
      goto LABEL_118;
    }
    heap_Free(*(void **)(a1 + 8), v148);
    goto LABEL_184;
  }
  uint64_t v13 = v147;
LABEL_163:
  if (v155) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v155);
  }
  if (v154) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v154);
  }
  if (v153) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v153);
  }
  if (v152) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v152);
  }
  if (v115) {
    heap_Free(*(void **)(a1 + 8), v115);
  }
  return v13;
}

uint64_t mfs_fastPhoneDur(uint64_t a1, int *a2)
{
  uint64_t v3 = a2[274];
  unsigned int v4 = *a2;
  v15[0] = 0;
  v15[1] = 0;
  int v14 = v15;
  uint64_t v5 = heap_Calloc(*(void **)(a1 + 8), v3, 1);
  *((void *)a2 + 1529) = v5;
  if (!v5) {
    return 2229280778;
  }
  signed int v6 = v3 / v4 * v4;
  if (v6 < 1)
  {
    unsigned int v8 = 0;
  }
  else
  {
    signed int v7 = 0;
    unsigned int v8 = 0;
    LODWORD(v9) = *a2;
    do
    {
      if ((int)v9 >= 1)
      {
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = v10 + 2;
          *(unsigned char *)(*((void *)a2 + 1529) + (v7 + v10)) = CandidatePhonemeDuration((unsigned __int8 *)a2, v7 + (int)v10, (int)v10 + 2);
          uint64_t v9 = *a2;
          ++v10;
        }
        while (v11 <= v9);
        unsigned int v8 = v7 + v10 - 1;
      }
      v7 += v9;
    }
    while (v7 < v6);
  }
  if (v8 < a2[274])
  {
    unint64_t v13 = v8;
    do
    {
      mfs_getUnitDataFromMfsData((unsigned __int8 *)a2, v13, (uint64_t *)&v14);
      *(unsigned char *)(*((void *)a2 + 1529) + v13++) = *((unsigned char *)v14 + 8);
    }
    while (v13 < a2[274]);
  }
  return 0;
}

uint64_t do_huffman_uncompress(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), a5, 1);
  if (v8)
  {
    uint64_t v14 = v8;
    Huffman_Uncompress(a2);
    MFS__log_select_Diag(a1, 0, (uint64_t)"Huffman decoding, from: %d Bytes, to: %d Bytes, rate: %f%%\n");
    uint64_t result = 0;
    *a3 = v14;
  }
  else
  {
    MFS__log_select_Error(a1, 0, (uint64_t)"Not enough memory\n", v9, v10, v11, v12, v13);
    return 2229280778;
  }
  return result;
}

uint64_t do_lzfast_uncompress(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a5, 1);
  if (v9)
  {
    uint64_t v15 = v9;
    LZ_Uncompress(a2, v9, a4);
    MFS__log_select_Diag(a1, 0, (uint64_t)"Lz_fast decoding, from: %d Bytes, to: %d Bytes\n, rate: %f%%\n");
    uint64_t result = 0;
    *a3 = v15;
  }
  else
  {
    MFS__log_select_Error(a1, 0, (uint64_t)"Not enough memory\n", v10, v11, v12, v13, v14);
    return 2229280778;
  }
  return result;
}

_DWORD *mfs_loadKLDMTX(_DWORD *result, uint64_t a2)
{
  v11[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(int **)(a2 + 20984);
  result[3064] = 0;
  if ((int)*result >= 1)
  {
    LODWORD(v3) = *result + 2;
    if ((int)v3 <= 3) {
      uint64_t v3 = 3;
    }
    else {
      uint64_t v3 = v3;
    }
    unsigned int v4 = v11;
    uint64_t v5 = v3 - 2;
    uint64_t v6 = v5;
    do
    {
      int v7 = *v2++;
      *v4++ = v7;
      --v6;
    }
    while (v6);
    uint64_t v8 = (int *)v11;
    uint64_t v9 = (int **)(result + 3070);
    do
    {
      *v9++ = v2;
      int v10 = *v8++;
      v2 += ((v10 - 1) * v10) >> 1;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t mfs_loadKLDMTX_Quant(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 12256) = 1;
  uint64_t v2 = *(_DWORD **)(a2 + 21224);
  if (*(int *)result <= 0)
  {
    *(unsigned char *)(result + 12264) = *v2;
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)result + 2;
    if ((int)v3 <= 3) {
      uint64_t v3 = 3;
    }
    else {
      uint64_t v3 = v3;
    }
    uint64_t v4 = v3 - 2;
    uint64_t v5 = v2 + 1;
    uint64_t v6 = v4;
    do
    {
      ++v5;
      --v6;
    }
    while (v6);
    *(unsigned char *)(result + 12264) = *(v5 - 1);
    uint64_t v7 = result + 12288;
    do
    {
      uint64_t v8 = v7 + 4 * v6;
      *(_DWORD *)(v8 + 72) = *v5;
      *(_DWORD *)(v8 + 112) = v5[1];
      uint64_t v9 = (int)v5[2];
      int v10 = v5 + 3;
      *(void *)(v7 + 8 * v6) = v10;
      uint64_t v5 = (_DWORD *)((char *)v10 + v9);
      ++v6;
    }
    while (v4 != v6);
  }
  return result;
}

void *mfs_GetMsgName(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return &mfs_GetMsgName_szEmpty;
  }
  uint64_t v2 = *(void *)(a1 + 1080);
  if (!v2) {
    return &mfs_GetMsgName_szEmpty;
  }
  uint64_t v3 = v2 + 30 * a2;
  if (*(_DWORD *)(a1 + 1096) - 1 > a2) {
    return (void *)v3;
  }
  else {
    return &mfs_GetMsgName_szEmpty;
  }
}

uint64_t mfs_GetMessageOffsetMsec(uint64_t a1, signed int a2)
{
  signed int v2 = a2;
  uint64_t v4 = *(void *)(a1 + 1072);
  if (*(_DWORD *)(v4 + 8328))
  {
    uint64_t v5 = *(void *)(a1 + 1080);
    if (v5) {
      return *(unsigned __int16 *)(v5 + 30 * a2 + 23);
    }
    else {
      return 0;
    }
  }
  else if (*(_DWORD *)(v4 + 8368) == 1)
  {
    return *(unsigned __int16 *)(*(void *)(a1 + 1200) + 2 * a2);
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0;
    v11[1] = 0;
    uint64_t v12 = v13;
    int v10 = v11;
    v11[0] = 0;
    mfs_getUnitDataFromMfsData((unsigned __int8 *)a1, a2, (uint64_t *)&v12);
    uint64_t v7 = (uint64_t)v12;
    do
    {
      unsigned int v8 = v2;
      BOOL v9 = __OFSUB__(v2--, 1);
    }
    while (v2 < 0 == v9
         && (mfs_getUnitDataFromMfsData((unsigned __int8 *)a1, v2, (uint64_t *)&v10) & 0x80000000) == 0
         && *((unsigned __int16 *)v10 + 5) == *(unsigned __int16 *)(v7 + 10));
    mfs_getUnitDataFromMfsData((unsigned __int8 *)a1, v8, (uint64_t *)&v10);
    return (*(_DWORD *)(*(void *)(a1 + 1072) + 24) * (*(_DWORD *)(v7 + 4) - *((_DWORD *)v10 + 1)));
  }
}

uint64_t mfs_uselect_Init_Obersee(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 1928);
  *a1 = v6;
  a1[72] = a2;
  a1[73] = a3;
  a1[74] = a4;
  fastallo_Init((_WORD *)a1 + 4, *(void *)(v6 + 8), 4096);
  *((_DWORD *)a1 + 142) = 0;
  uint64_t v7 = 75;
  while (1)
  {
    uint64_t result = mfs_CandidateList_Init_Obersee((uint64_t)&a1[v7], *(void *)(*a1 + 8));
    if (result) {
      break;
    }
    v7 += 10;
    if (v7 == 105)
    {
      *((_DWORD *)a1 + 210) = -1;
      a1[2251] = 0;
      uint64_t v14 = (_DWORD *)a1[74];
      if (v14[2084] == 2)
      {
        uint64_t v15 = heap_Alloc(*(void *)(*a1 + 8), v14[2085]);
        a1[2251] = v15;
        if (!v15) {
          return 2229280778;
        }
        uint64_t v14 = (_DWORD *)a1[74];
      }
      if ((v14[2086] - 3) > 1) {
        return 0;
      }
      uint64_t result = mfs_BPESymDataCache_Init_Obersee((uint64_t)(a1 + 2253), a3, *a1, v9, v10, v11, v12, v13);
      if (!result) {
        return 0;
      }
      return result;
    }
  }
  return result;
}

uint64_t mfs_uselect_Finalize_Obersee(uint64_t *a1)
{
  if (a1[72])
  {
    fastallo_Terminate(a1 + 1);
    for (uint64_t i = 75; i != 105; i += 10)
      mfs_CandidateList_DeInit_Obersee(&a1[i], *(void **)(*a1 + 8));
    uint64_t v3 = a1[2251];
    if (v3) {
      heap_Free(*(void **)(*a1 + 8), v3);
    }
    if ((*(_DWORD *)(a1[74] + 8344) - 3) <= 1) {
      mfs_BPESymDataCache_DeInit_Obersee((uint64_t)(a1 + 2253), *a1);
    }
    mfs_Viterbi_DeInit_Obersee((uint64_t)(a1 + 106));
    a1[72] = 0;
  }
  return 0;
}

uint64_t mfs_Viterbi_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 128) = 0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = 0;
  uint64_t v5 = *(void *)(a2 + 1928);
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = a2;
  *(void *)a4 = v5;
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 32) = 0;
  uint64_t v6 = 2229280778;
  if (*(_DWORD *)(a2 + 2064) != 2)
  {
    uint64_t v17 = heap_Calloc(*(void **)(v5 + 8), 1024, 32);
    *(void *)(a4 + 48) = v17;
    if (!v17) {
      return v6;
    }
    uint64_t v18 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1024, 32);
    *(void *)(a4 + 56) = v18;
    if (!v18) {
      return v6;
    }
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a4 + 48) + 24;
    do
    {
      *(void *)(v18 + 24 + v19) = 0;
      *(void *)(v20 + v19) = 0;
      v19 += 32;
    }
    while (v19 != 0x8000);
    *(void *)(a4 + 72) = 0x40000000400;
LABEL_17:
    uint64_t v6 = 0;
    *(_DWORD *)(a4 + 40) = 0;
    return v6;
  }
  uint64_t v7 = *(unsigned int *)(a3 + 8240);
  uint64_t v8 = heap_Calloc(*(void **)(v5 + 8), v7, 32);
  *(void *)(a4 + 48) = v8;
  if (v8)
  {
    uint64_t v9 = heap_Calloc(*(void **)(*(void *)a4 + 8), v7, 32);
    *(void *)(a4 + 56) = v9;
    if (v9)
    {
      if (v7)
      {
        uint64_t v10 = (void *)(v9 + 24);
        uint64_t v11 = (void *)(*(void *)(a4 + 48) + 24);
        uint64_t v12 = v7;
        do
        {
          void *v10 = 0;
          v10 += 4;
          *uint64_t v11 = 0;
          v11 += 4;
          --v12;
        }
        while (v12);
      }
      *(_DWORD *)(a4 + 72) = v7;
      *(_DWORD *)(a4 + 76) = v7;
      *(_DWORD *)(a4 + 104) = v7;
      uint64_t v13 = heap_Calloc(*(void **)(*(void *)a4 + 8), v7, 4);
      *(void *)(a4 + 96) = v13;
      if (v13)
      {
        uint64_t v14 = heap_Calloc(*(void **)(*(void *)a4 + 8), *(unsigned int *)(a4 + 104), 1);
        *(void *)(a4 + 88) = v14;
        if (v14)
        {
          uint64_t v15 = heap_Calloc(*(void **)(*(void *)a4 + 8), *(unsigned int *)(a4 + 104), 4);
          *(void *)(a4 + 112) = v15;
          if (v15)
          {
            uint64_t v16 = heap_Calloc(*(void **)(*(void *)a4 + 8), *(unsigned int *)(a4 + 104), 4);
            *(void *)(a4 + 120) = v16;
            if (v16) {
              goto LABEL_17;
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t mfs_Viterbi_Reset(uint64_t a1, int a2, int a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(*(void *)(a1 + 24) + 2064) != 2)
  {
    unsigned int v7 = a3 - a2 + 1;
    if (v7 > v6)
    {
      if (*(_DWORD *)(a1 + 72))
      {
        unint64_t v18 = 0;
        uint64_t v19 = *(void *)(a1 + 48);
        uint64_t v20 = 24;
        do
        {
          uint64_t v21 = *(void *)(v19 + v20);
          if (v21)
          {
            heap_Free(*(void **)(*(void *)a1 + 8), v21);
            *(void *)(*(void *)(a1 + 48) + v20) = 0;
          }
          uint64_t v22 = heap_Calloc(*(void **)(*(void *)a1 + 8), (a3 - a2 + 1), 4);
          uint64_t v19 = *(void *)(a1 + 48);
          *(void *)(v19 + v20) = v22;
          if (!v22) {
            return 2229280778;
          }
          ++v18;
          v20 += 32;
        }
        while (v18 < *(unsigned int *)(a1 + 72));
      }
      if (*(_DWORD *)(a1 + 76))
      {
        unint64_t v23 = 0;
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = 24;
        while (1)
        {
          uint64_t v26 = *(void *)(v24 + v25);
          if (v26)
          {
            heap_Free(*(void **)(*(void *)a1 + 8), v26);
            *(void *)(*(void *)(a1 + 56) + v25) = 0;
          }
          uint64_t v27 = heap_Calloc(*(void **)(*(void *)a1 + 8), (a3 - a2 + 1), 4);
          uint64_t v24 = *(void *)(a1 + 56);
          *(void *)(v24 + v25) = v27;
          if (!v27) {
            return 2229280778;
          }
          ++v23;
          v25 += 32;
          if (v23 >= *(unsigned int *)(a1 + 76)) {
            goto LABEL_29;
          }
        }
      }
    }
    goto LABEL_29;
  }
  unsigned int v7 = a3 - a2 + 1;
  if (v7 <= v6) {
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 72))
  {
    unint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(v9 + v10);
      if (v11)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v11);
        *(void *)(*(void *)(a1 + 48) + v10) = 0;
      }
      uint64_t v12 = heap_Calloc(*(void **)(*(void *)a1 + 8), (a3 - a2 + 1), 4);
      uint64_t v9 = *(void *)(a1 + 48);
      *(void *)(v9 + v10) = v12;
      if (!v12) {
        return 2229280778;
      }
      ++v8;
      v10 += 32;
    }
    while (v8 < *(unsigned int *)(a1 + 72));
  }
  if (!*(_DWORD *)(a1 + 76))
  {
LABEL_29:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 36) = a3;
    *(_DWORD *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 32) = a2;
    return result;
  }
  unint64_t v13 = 0;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = 24;
  while (1)
  {
    uint64_t v16 = *(void *)(v14 + v15);
    if (v16)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v16);
      *(void *)(*(void *)(a1 + 56) + v15) = 0;
    }
    uint64_t v17 = heap_Calloc(*(void **)(*(void *)a1 + 8), (a3 - a2 + 1), 4);
    uint64_t v14 = *(void *)(a1 + 56);
    *(void *)(v14 + v15) = v17;
    if (!v17) {
      return 2229280778;
    }
    ++v13;
    v15 += 32;
    if (v13 >= *(unsigned int *)(a1 + 76)) {
      goto LABEL_29;
    }
  }
}

uint64_t mfs_Viterbi_DeInit(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(_DWORD *)(a1[3] + 2064) == 2)
  {
    if (v2)
    {
      unint64_t v3 = *((unsigned int *)a1 + 18);
      if (v3)
      {
        unint64_t v4 = 0;
        uint64_t v5 = 24;
        do
        {
          if (*(void *)(v2 + v5))
          {
            heap_Free(*(void **)(*a1 + 8), *(void *)(v2 + v5));
            uint64_t v2 = a1[6];
            *(void *)(v2 + v5) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 18);
          }
          ++v4;
          v5 += 32;
        }
        while (v4 < v3);
      }
      heap_Free(*(void **)(*a1 + 8), v2);
      a1[6] = 0;
      unint64_t v6 = *((unsigned int *)a1 + 19);
      uint64_t v7 = a1[7];
      if (v6)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 24;
        do
        {
          if (*(void *)(v7 + v9))
          {
            heap_Free(*(void **)(*a1 + 8), *(void *)(v7 + v9));
            uint64_t v7 = a1[7];
            *(void *)(v7 + v9) = 0;
            unint64_t v6 = *((unsigned int *)a1 + 19);
          }
          ++v8;
          v9 += 32;
        }
        while (v8 < v6);
      }
      heap_Free(*(void **)(*a1 + 8), v7);
      a1[7] = 0;
    }
    *((_DWORD *)a1 + 26) = 0;
    uint64_t v10 = a1[12];
    if (v10)
    {
      heap_Free(*(void **)(*a1 + 8), v10);
      a1[12] = 0;
    }
    uint64_t v11 = a1[11];
    if (v11)
    {
      heap_Free(*(void **)(*a1 + 8), v11);
      a1[11] = 0;
    }
    uint64_t v12 = a1[14];
    if (v12)
    {
      heap_Free(*(void **)(*a1 + 8), v12);
      a1[14] = 0;
    }
    uint64_t v13 = a1[15];
    if (v13)
    {
      heap_Free(*(void **)(*a1 + 8), v13);
      uint64_t v14 = a1 + 15;
LABEL_31:
      *uint64_t v14 = 0;
    }
  }
  else if (v2)
  {
    if (*((_DWORD *)a1 + 18))
    {
      unint64_t v15 = 0;
      uint64_t v16 = 24;
      do
      {
        heap_Free(*(void **)(*a1 + 8), *(void *)(a1[6] + v16));
        ++v15;
        v16 += 32;
      }
      while (v15 < *((unsigned int *)a1 + 18));
      uint64_t v2 = a1[6];
    }
    heap_Free(*(void **)(*a1 + 8), v2);
    a1[6] = 0;
    if (*((_DWORD *)a1 + 19))
    {
      unint64_t v17 = 0;
      uint64_t v18 = 24;
      do
      {
        heap_Free(*(void **)(*a1 + 8), *(void *)(a1[7] + v18));
        ++v17;
        v18 += 32;
      }
      while (v17 < *((unsigned int *)a1 + 19));
    }
    uint64_t v19 = *(void **)(*a1 + 8);
    uint64_t v20 = a1[7];
    uint64_t v14 = a1 + 7;
    heap_Free(v19, v20);
    goto LABEL_31;
  }
  return 0;
}

uint64_t mfs_Viterbi_Decode(uint64_t a1)
{
  float v2 = *(float *)(*(void *)(a1 + 16) + 8172);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 2152);
  int v77 = *(_DWORD *)(v3 + 2164);
  uint64_t v78 = *(void *)(v3 + 2136);
  int v5 = *(_DWORD *)(v3 + 2148);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 2072);
  MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Default Viterbi Decoder Variant 0 has been selected\n");
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 2592);
  if (v8 == 2)
  {
    LODWORD(v11) = *(_DWORD *)(a1 + 32);
    unsigned int v12 = *(_DWORD *)(a1 + 36);
    unint64_t v15 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi regular search and emission, from=%d, to=%d\n");
    *(_DWORD *)(*(void *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v15);
    float v14 = 0.0;
  }
  else if (v8 == 1)
  {
    LODWORD(v11) = *(_DWORD *)(*(void *)(a1 + 16) + 8568) + *(_DWORD *)(v7 + 2596);
    unsigned int v12 = *(_DWORD *)(a1 + 36);
    float v14 = *(float *)(a1 + 84);
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Completing Viterbi decomposition after successful early emission, from=%d, to=%d\n");
  }
  else
  {
    if (v8)
    {
      int v20 = 0;
      int v22 = 0;
      int v17 = 0;
      float v14 = 0.0;
      goto LABEL_70;
    }
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Final output state for early emission is %d\n");
    int v9 = *(_DWORD *)(*(void *)(a1 + 24) + 2596);
    if (!v9 || (int v10 = *(_DWORD *)(*(void *)(a1 + 16) + 8568), (v9 + 2 * v10) > *(_DWORD *)(a1 + 36)))
    {
      MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi early emission will not take place - regular emission instead, from=%d, to=%d\n");
      uint64_t result = 0;
      *(_DWORD *)(*(void *)(a1 + 24) + 2592) = 2;
      return result;
    }
    LODWORD(v11) = *(_DWORD *)(a1 + 32);
    unsigned int v12 = v10 + v9;
    uint64_t v13 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi early emission will go ahead, from=%d, to=%d\n");
    *(_DWORD *)(*(void *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v13);
    float v14 = 0.0;
  }
  if (v11 >= v12)
  {
    int v20 = 0;
    int v22 = 0;
    int v17 = 0;
LABEL_70:
    *(_DWORD *)(a1 + 80) = v20;
    *(float *)(a1 + 84) = v14;
    int v69 = v17 + v22;
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Pruning: total paths is %d\n");
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Winning Path is %d , with score %f\n");
    if (v69) {
      MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Pruning percentage is %.2f\n");
    }
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Number of join costs calculated is %d\n");
    return 0;
  }
  int v16 = 0;
  int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  float v21 = 1.0 - v2;
  uint64_t v11 = v11;
  uint64_t v71 = v4;
  uint64_t v72 = v12;
  int v22 = 0;
  while (1)
  {
    uint64_t v23 = *(unsigned int *)(a1 + 32);
    unsigned int v24 = *(_DWORD *)(a1 + 76);
    if (v11 != v23)
    {
      *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
      *(int32x2_t *)(a1 + 64) = vrev64_s32(*(int32x2_t *)(a1 + 64));
      unsigned int v25 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = v24;
      *(_DWORD *)(a1 + 76) = v25;
      unsigned int v24 = v25;
    }
    unint64_t v27 = *(void *)(a1 + 24);
    unsigned int v26 = *(_DWORD *)(*(void *)(v27 + 1952) + 32 * v11 + 16);
    LODWORD(v27) = *(_DWORD *)(*(void *)(v27 + 2016) + 4 * v11);
    if (v26 < v27) {
      LODWORD(v27) = v26;
    }
    *(_DWORD *)(a1 + 68) = v27;
    if (v27 <= v24) {
      goto LABEL_23;
    }
    int v75 = v17;
    uint64_t v28 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 56), 32 * v27);
    *(void *)(a1 + 56) = v28;
    if (!v28) {
      return 2229280778;
    }
    int v73 = v22;
    unint64_t v29 = *(unsigned int *)(a1 + 76);
    LODWORD(v27) = *(_DWORD *)(a1 + 68);
    if (v29 < v27) {
      break;
    }
LABEL_22:
    *(_DWORD *)(a1 + 76) = v27;
    uint64_t v23 = *(unsigned int *)(a1 + 32);
    int v22 = v73;
    int v17 = v75;
LABEL_23:
    if (v11 == v23)
    {
      if (v27)
      {
        uint64_t v32 = *(void *)(a1 + 56);
        unint64_t v27 = v27;
        int v33 = (float *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 1952) + 32 * v11) + 4);
        do
        {
          *(float *)uint64_t v32 = v21 * *v33;
          **(float **)(v32 + 24) = *(v33 - 1);
          v32 += 32;
          v33 += 2;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      float v34 = *(float *)(*(void *)(a1 + 16) + 8248);
      if (v11 != v23 + 1 && v34 <= 4.0)
      {
        uint64_t v36 = *(unsigned int *)(a1 + 64);
        if (v36)
        {
          unsigned int v37 = *(float **)(a1 + 48);
          float v38 = v14 + v34;
          do
          {
            if (*v37 <= v38)
            {
              ++v17;
            }
            else
            {
              *unsigned int v37 = 10000000.0;
              ++v22;
            }
            v37 += 8;
            --v36;
          }
          while (v36);
        }
      }
      int v76 = v17;
      if (v27)
      {
        uint64_t v39 = *(_DWORD **)(a1 + 56);
        unint64_t v27 = v27;
        do
        {
          *uint64_t v39 = 1259902592;
          v39 += 8;
          --v27;
        }
        while (v27);
      }
      ssft_qsort(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), 32, (uint64_t (*)(unint64_t, unint64_t))mfs_Sort_By_PathScore);
      if (*(_DWORD *)(a1 + 68))
      {
        int v74 = v22;
        unint64_t v40 = 0;
        float v14 = 10000000.0;
        do
        {
          uint64_t v41 = *(void *)(a1 + 24);
          float v42 = *(float *)(*(void *)(a1 + 16) + 8172);
          uint64_t v43 = *(void *)(*(void *)(v41 + 1952) + 32 * v11) + 8 * v40;
          float v44 = *(float *)(v43 + 4);
          uint64_t v45 = *(void *)(v41 + 2032);
          unsigned int v46 = *(_DWORD *)v43;
          unsigned int v47 = *(_DWORD *)(v41 + 2060);
          unint64_t v48 = (void *)(v45 + 8 * (v47 & v46));
          do
          {
            uint64_t v49 = (_DWORD *)*v48;
            uint64_t v50 = (_DWORD *)*v48;
            int v51 = *v50;
            unint64_t v48 = v50 + 4;
          }
          while (v51 != v46);
          uint64_t v52 = *(unsigned int *)(a1 + 64);
          uint64_t v53 = *(void *)(a1 + 48);
          if ((int)v52 >= 1)
          {
            uint64_t v54 = 0;
            float v55 = (float)(1.0 - v42) * v44;
            do
            {
              float v56 = *(float *)(v53 + 32 * v54);
              if (v56 != 10000000.0)
              {
                float v57 = v55 + v56;
                int v58 = (float *)(*(void *)(a1 + 56) + 32 * v40);
                if ((float)(v55 + v56) > *v58) {
                  break;
                }
                int v59 = *(_DWORD *)(*(void *)(v53 + 32 * v54 + 24) + 4 * (v11 + ~*(_DWORD *)(a1 + 32)));
                if (v46 - v59 != 1)
                {
                  uint64_t v60 = (void *)(v45 + 8 * (v59 & v47));
                  do
                  {
                    int v61 = (_DWORD *)*v60;
                    int v62 = (_DWORD *)*v60;
                    int v63 = *v62;
                    uint64_t v60 = v62 + 4;
                  }
                  while (v63 != v59);
                  unsigned int v64 = v61[2];
                  if ((v64 & 2) != 0)
                  {
                    uint64_t v66 = *(float **)(v6 + 8 * v11);
                    unsigned int v65 = v49[1];
                    float v67 = 0.0;
                  }
                  else
                  {
                    unsigned int v65 = v49[1];
                    uint64_t v66 = *(float **)(v6 + 8 * v11);
                    float v67 = 0.0;
                    if ((v65 & 2) == 0) {
                      float v67 = v66[2] * *(float *)(v4 + 4 * (((v64 >> 14) & 0x1FF) + ((v65 >> 14) & 0x1FF) * v77));
                    }
                  }
                  float v57 = v56
                      + (float)(v55
                              + (float)(v42
                                      * (float)((float)(v67 + *v66)
                                              + (float)(v66[1]
                                                      * *(float *)(v78
                                                                 + 4
                                                                 * (((v64 >> 2) & 0xFFF) + ((v65 >> 2) & 0xFFF) * v5))))));
                }
                ++v16;
                if (v57 < *v58)
                {
                  *int v58 = v57;
                  uint64_t v19 = v54;
                  unsigned int v18 = v46;
                }
              }
              ++v54;
            }
            while (v54 != v52);
          }
          memcpy(*(void **)(*(void *)(a1 + 56) + 32 * v40 + 24), *(const void **)(v53 + 32 * v19 + 24), 4 * (v11 - *(_DWORD *)(a1 + 32)));
          uint64_t v68 = *(void *)(a1 + 56) + 32 * v40;
          *(_DWORD *)(*(void *)(v68 + 24) + 4 * (v11 - *(_DWORD *)(a1 + 32))) = v18;
          if (*(float *)v68 < v14)
          {
            int v20 = v40;
            float v14 = *(float *)v68;
          }
          ++v40;
        }
        while (v40 < *(unsigned int *)(a1 + 68));
        int v22 = v74;
      }
      else
      {
        float v14 = 10000000.0;
      }
      int v17 = v76;
    }
    if (++v11 == v72) {
      goto LABEL_70;
    }
  }
  uint64_t v30 = (32 * v29) | 0x18;
  while (1)
  {
    uint64_t v31 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned int *)(a1 + 40), 4);
    *(void *)(*(void *)(a1 + 56) + v30) = v31;
    if (!v31) {
      return 2229280778;
    }
    ++v29;
    unint64_t v27 = *(unsigned int *)(a1 + 68);
    v30 += 32;
    if (v29 >= v27)
    {
      uint64_t v4 = v71;
      goto LABEL_22;
    }
  }
}

uint64_t mfs_Sort_By_PathScore(float *a1, float *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t mfs_Viterbi_Decode_MCP_S9_LF0_S8_X2B(uint64_t a1)
{
  uint64_t v243 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(float **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  float v5 = v3[2097];
  float v6 = v3[2043];
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v220 = *(void *)(v8 + 2136);
  uint64_t v221 = *(void *)(v8 + 2152);
  uint64_t v215 = *(void *)(v4 + 2072);
  float v10 = v3[2096];
  v242[0] = 1065353216;
  *(float *)&v242[1] = v10 + 1.0;
  *(float *)&v242[2] = v10 + 1.0;
  v241[0] = 0;
  *(float *)&v241[1] = v10;
  *(float *)&v241[2] = v10;
  v240[0] = 1065353216;
  *(float *)&v240[1] = v10 + 1.0;
  *(float *)&v240[2] = v10 + 1.0;
  MFS__log_select_Diag(v7, 1, (uint64_t)"S8_X2B Viterbi Decoder Variant 2 has been selected\n");
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = *(_DWORD *)(v11 + 2592);
  float v13 = 0.0;
  if (v12 == 2)
  {
    unsigned int v16 = *(_DWORD *)(a1 + 32);
    unsigned int v17 = *(_DWORD *)(a1 + 36);
    int v20 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi regular search and emission, from=%d, to=%d\n");
    int IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v20);
    uint64_t v11 = *(void *)(a1 + 24);
    *(_DWORD *)(v11 + 2612) = IsUpdatable;
  }
  else if (v12 == 1)
  {
    unsigned int v16 = *(_DWORD *)(*(void *)(a1 + 16) + 8568) + *(_DWORD *)(v11 + 2596);
    unsigned int v17 = *(_DWORD *)(a1 + 36);
    float v13 = *(float *)(a1 + 84);
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Completing Viterbi decomposition after successful early emission, from=%d, to=%d\n");
    uint64_t v11 = *(void *)(a1 + 24);
  }
  else if (v12)
  {
    unsigned int v16 = 0;
    unsigned int v17 = 0;
  }
  else
  {
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Final output state for early emission is %d\n");
    int v14 = *(_DWORD *)(*(void *)(a1 + 24) + 2596);
    if (!v14
      || (int v15 = *(_DWORD *)(*(void *)(a1 + 16) + 8568), (v14 + 2 * v15) > *(_DWORD *)(a1 + 36)))
    {
      MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi early emission will not take place - regular emission instead, from=%d, to=%d\n");
      *(_DWORD *)(*(void *)(a1 + 24) + 2592) = 2;
      return 0;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 32);
    unsigned int v17 = v15 + v14;
    unsigned int v18 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi early emission will go ahead, from=%d, to=%d\n");
    int v19 = kaldi::nnet1::Component::IsUpdatable(v18);
    uint64_t v11 = *(void *)(a1 + 24);
    *(_DWORD *)(v11 + 2612) = v19;
  }
  uint64_t v22 = *(void *)(*(void *)(a1 + 8) + 12224);
  uint64_t v23 = *(void *)(v11 + 1952);
  if (v16 == *(_DWORD *)(a1 + 32))
  {
    unsigned int v24 = *(_DWORD *)(*(void *)(v11 + 2016) + 4 * v16);
    if (*(_DWORD *)(v23 + 32 * v16 + 16) >= v24) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = *(_DWORD *)(v23 + 32 * v16 + 16);
    }
    *(_DWORD *)(a1 + 68) = v25;
    if (v25)
    {
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(a1 + 56);
      uint64_t v28 = (float *)(*(void *)(v23 + 32 * v16) + 4);
      uint64_t v29 = 32 * v25;
      do
      {
        uint64_t v30 = v27 + v26;
        *(float *)uint64_t v30 = (float)(1.0 - v6) * *v28;
        *(_DWORD *)(v30 + 4) = 0;
        *(_DWORD *)(v30 + 8) = 0;
        *(_DWORD *)(v30 + 16) = 0;
        **(float **)(v27 + v26 + 24) = *(v28 - 1);
        v26 += 32;
        v28 += 2;
      }
      while (v29 != v26);
    }
    ++v16;
  }
  if (v16 >= v17)
  {
    int v231 = 0;
  }
  else
  {
    int v231 = 0;
    unsigned int v31 = 0;
    int v216 = 0;
    int v233 = 0;
    uint64_t v32 = v16;
    uint64_t v213 = v17;
    uint64_t v214 = v23;
    uint64_t v218 = v2 + 8;
    float v33 = 0.0;
    do
    {
      uint64_t v34 = *(void *)(a1 + 16);
      if (*(_DWORD *)(v34 + 8264))
      {
        float v33 = 0.0;
        if (v32 % 3 == 1)
        {
          if (mfs_Ling_IsVowel(v34, *(void *)(*(void *)(a1 + 24) + 8), v32 / 3))
          {
            uint64_t v35 = *(unsigned int *)(a1 + 132);
            if (v35 <= 0xC7) {
              *(_DWORD *)(a1 + 132) = v35 + 1;
            }
            float v33 = *(float *)(*(void *)(a1 + 24) + 4 * v35 + 2664);
          }
        }
      }
      float v225 = v33;
      uint64_t v36 = *(void *)(a1 + 16);
      if (*(_DWORD *)(v36 + 8268))
      {
        unsigned int v37 = *(uint64_t **)(a1 + 24);
        if (v32 % 3 == 2
          && (unsigned int v38 = mfs_Ling_IsSilence(v36, v37[1], v32 / 3),
              unsigned int v37 = *(uint64_t **)(a1 + 24),
              !v38))
        {
          uint64_t v39 = *(unsigned int *)(a1 + 128);
          unint64_t v40 = (char *)v37 + 4 * v39;
          int v233 = *((_DWORD *)v40 + 867);
          if (v39 <= 0x18F) {
            *(_DWORD *)(a1 + 128) = v39 + 1;
          }
          int v216 = *((_DWORD *)v40 + 1268);
        }
        else
        {
          int v233 = 0;
          int v216 = 0;
        }
      }
      else
      {
        unsigned int v37 = *(uint64_t **)(a1 + 24);
      }
      float v41 = *(float *)(v37[261] + 4 * v32);
      float v42 = *(float *)(v37[262] + 4 * v32);
      uint64_t v43 = *(float **)(v215 + 8 * v32);
      float v44 = v41 * *v43;
      float v45 = v41 * v43[2];
      float v46 = v41 * v43[1];
      MFS__log_select_Diag(*(void *)a1, 20, (uint64_t)"Join cost %d\n");
      MFS__log_select_Diag(*(void *)a1, 20, (uint64_t)"Normalized ADJ weight %f\n");
      MFS__log_select_Diag(*(void *)a1, 20, (uint64_t)"Normalized LF0 weight %f\n");
      MFS__log_select_Diag(*(void *)a1, 20, (uint64_t)"Normalized MCP weight %f\n");
      int v47 = *(_DWORD *)(a1 + 32);
      unint64_t v48 = *(_DWORD **)(a1 + 48);
      uint64_t v232 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v232;
      *(void *)(a1 + 56) = v48;
      int32x4_t v49 = *(int32x4_t *)(a1 + 64);
      *(int32x4_t *)(a1 + 64) = vrev64q_s32(v49);
      uint64_t v226 = v214 + 32 * v32;
      LODWORD(v50) = *(_DWORD *)(v226 + 16);
      unsigned int v51 = *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 2016) + 4 * v32);
      if (v50 >= v51) {
        uint64_t v50 = v51;
      }
      else {
        uint64_t v50 = v50;
      }
      *(_DWORD *)(a1 + 68) = v50;
      uint64_t v217 = v32;
      int v52 = 0;
      if (v42 <= 4.0 && v32 != v47 + 1 && v49.i32[1])
      {
        int v52 = 0;
        uint64_t v53 = v49.u32[1];
        uint64_t v54 = (float *)v232;
        do
        {
          if (*v54 > (float)(v13 + v42))
          {
            *uint64_t v54 = 10000000.0;
            ++v52;
          }
          v54 += 8;
          --v53;
        }
        while (v53);
      }
      if (v50)
      {
        float v55 = v48;
        do
        {
          *float v55 = 1259902592;
          v55 += 8;
          --v50;
        }
        while (v50);
      }
      BOOL v227 = v48;
      uint64_t v223 = (v32 - v47);
      ssft_qsort(v232, v49.u32[1], 32, (uint64_t (*)(unint64_t, unint64_t))mfs_Sort_By_PathScore_faster);
      uint64_t v56 = (*(_DWORD *)(a1 + 64) - v52);
      *(_DWORD *)(a1 + 64) = v56;
      float v33 = v225;
      if ((int)v56 >= 1)
      {
        uint64_t v57 = 0;
        int v58 = (uint64_t *)(v232 + 24);
        do
        {
          uint64_t v59 = *v58;
          v58 += 4;
          unsigned int v60 = *(_DWORD *)(v59 + 4 * (v223 - 1));
          uint64_t v61 = *(void *)(a1 + 96);
          *(_DWORD *)(v61 + 4 * v57) = v60;
          *(_DWORD *)(*(void *)(a1 + 112) + 4 * v57) = *(_DWORD *)(v22 + 12 * v60);
          *(_DWORD *)(*(void *)(a1 + 120) + 4 * v57) = *(unsigned __int16 *)(v22
                                                                             + 12 * *(unsigned int *)(v61 + 4 * v57)
                                                                             + 4);
          *(unsigned char *)(*(void *)(a1 + 88) + v57) = *(unsigned char *)(v22 + 12 * *(unsigned int *)(v61 + 4 * v57) + 10);
          ++v57;
        }
        while (v56 != v57);
      }
      if (*(_DWORD *)(a1 + 68))
      {
        unint64_t v62 = 0;
        float v222 = 1.0 - v41;
        float v63 = (float)v233;
        uint64_t v219 = v232 + 64;
        float v13 = 10000000.0;
        unsigned int v64 = v227;
        do
        {
          float v230 = v13;
          if (v33 == 0.0 && (uint64_t v65 = *(void *)(a1 + 16), !*(_DWORD *)(v65 + 8268)))
          {
            int v67 = 0;
            float v66 = 0.0;
          }
          else
          {
            int v234 = 0;
            long long v238 = 0u;
            long long v239 = 0u;
            long long v236 = 0u;
            long long v237 = 0u;
            long long v235 = 0u;
            mfs_ParamMap_GetAcousticVector(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 24), *(unsigned int *)(*(void *)v226 + 8 * v62), (uint64_t)&v235, &v234);
            if (v33 == 0.0)
            {
              float v66 = 0.0;
            }
            else if (*(float *)v236 >= 0.0)
            {
              float v66 = *(float *)v236;
            }
            else
            {
              float v66 = 0.0;
            }
            unsigned int v64 = v227;
            uint64_t v65 = *(void *)(a1 + 16);
            if (*(_DWORD *)(v65 + 8268)) {
              int v67 = v234;
            }
            else {
              int v67 = 0;
            }
          }
          uint64_t v68 = *(void *)(a1 + 112);
          uint64_t v69 = *(void *)(a1 + 120);
          uint64_t v70 = (float *)(*(void *)v226 + 8 * v62);
          float v71 = v70[1];
          float v72 = *v70;
          int v73 = *(_DWORD *)(a1 + 64);
          unint64_t v74 = *(unsigned __int8 *)(v22 + 12 * *(unsigned int *)v70 + 10);
          if (v74 <= 2)
          {
            unint64_t v75 = v74;
            do
            {
              *(float *)&v240[v75] = (float)(v5 * *(float *)&v241[v75]) + (float)(v44 * *(float *)&v242[v75]);
              ++v75;
            }
            while (v75 != 3);
          }
          float v76 = v222 * v71;
          int v77 = LODWORD(v72) - 1;
          uint64_t v78 = v73;
          int v79 = &v240[v74];
          uint64_t v80 = v22 + 12 * LODWORD(v72);
          uint64_t v81 = v220 + ((unint64_t)*(unsigned __int16 *)(v80 + 8) << 11);
          uint64_t v82 = v221 + ((unint64_t)*(unsigned __int16 *)(v80 + 6) << 10);
          float v83 = *(float *)&v64[8 * v62] - v76;
          int v224 = v67;
          float v228 = (float *)&v64[8 * v62];
          float v229 = v72;
          if (v233)
          {
            uint64_t v84 = *(void *)(a1 + 88);
            uint64_t v85 = v73 & 3;
            if ((v73 & 3) != 0)
            {
              uint64_t v86 = 0;
              uint64_t v87 = (float *)(v232 + 16);
              float v88 = (float)v216;
              while (1)
              {
                float v89 = *(v87 - 4);
                if (v89 > v83) {
                  break;
                }
                float v90 = (float)(*(float *)&v79[*(unsigned __int8 *)(v84 + v86)]
                            + (float)(v45 * *(float *)(v82 + 4 * *(unsigned int *)(v68 + 4 * v86))))
                    + (float)(v46 * *(float *)(v81 + 4 * *(unsigned int *)(v69 + 4 * v86)));
                if (v77 == *(_DWORD *)(v2 + 4 * v86)) {
                  float v90 = 0.0;
                }
                float v91 = v89 + v90;
                int v92 = v67 - v233 + *(_DWORD *)v87;
                if (v92 < 0) {
                  int v92 = -v92;
                }
                if ((float)(*(float *)(v65 + 8308) * (float)v216) <= (float)v92) {
                  float v91 = v91 + (float)((float)(*(float *)(v65 + 8312) * (float)v92) / v63);
                }
                if (v91 < v83)
                {
                  float v83 = v91;
                  unsigned int v31 = v86;
                }
                ++v86;
                v87 += 8;
                if (v85 == v86)
                {
                  v68 += 4 * (v85 - 1) + 4;
                  v69 += 4 * (v85 - 1) + 4;
                  goto LABEL_193;
                }
              }
            }
            else
            {
              float v88 = (float)v216;
LABEL_193:
              if (v73 >= 4)
              {
                uint64_t v151 = 0;
                int v152 = v67 - v233;
                uint64_t v153 = v85;
                float v154 = *(float *)(v65 + 8308) * v88;
                uint64_t v155 = v219 + 32 * v85;
                uint64_t v156 = v84 + v85 + 1;
                uint64_t v157 = (_DWORD *)(v218 + 4 * v85);
                do
                {
                  float v158 = (unsigned int *)(v69 + 4 * v151);
                  uint64_t v159 = (unsigned int *)(v68 + 4 * v151);
                  float v160 = (float)(*(float *)&v79[*(unsigned __int8 *)(v156 + v151 - 1)]
                               + (float)(v45 * *(float *)(v82 + 4 * *v159)))
                       + (float)(v46 * *(float *)(v81 + 4 * *v158));
                  if (v77 == *(v157 - 2)) {
                    float v160 = 0.0;
                  }
                  float v161 = *(float *)(v155 - 64) + v160;
                  int v162 = v152 + *(_DWORD *)(v155 - 48);
                  if (v162 < 0) {
                    int v162 = -v162;
                  }
                  if (v154 <= (float)v162) {
                    float v161 = v161 + (float)((float)(*(float *)(v65 + 8312) * (float)v162) / v63);
                  }
                  BOOL v163 = v161 < v83;
                  if (v161 < v83) {
                    float v83 = v161;
                  }
                  unsigned int v164 = v153 + v151;
                  if (!v163) {
                    unsigned int v164 = v31;
                  }
                  float v165 = (float)(*(float *)&v79[*(unsigned __int8 *)(v156 + v151)]
                               + (float)(v45 * *(float *)(v82 + 4 * v159[1])))
                       + (float)(v46 * *(float *)(v81 + 4 * v158[1]));
                  if (v77 == *(v157 - 1)) {
                    float v165 = 0.0;
                  }
                  float v166 = *(float *)(v155 - 32) + v165;
                  int v167 = v152 + *(_DWORD *)(v155 - 16);
                  if (v167 < 0) {
                    int v167 = -v167;
                  }
                  if (v154 <= (float)v167) {
                    float v166 = v166 + (float)((float)(*(float *)(v65 + 8312) * (float)v167) / v63);
                  }
                  if (v166 < v83)
                  {
                    float v83 = v166;
                    unsigned int v164 = v153 + v151 + 1;
                  }
                  float v168 = (float)(*(float *)&v79[*(unsigned __int8 *)(v156 + v151 + 1)]
                               + (float)(v45 * *(float *)(v82 + 4 * v159[2])))
                       + (float)(v46 * *(float *)(v81 + 4 * v158[2]));
                  if (v77 == *v157) {
                    float v168 = 0.0;
                  }
                  float v169 = *(float *)v155 + v168;
                  int v170 = v152 + *(_DWORD *)(v155 + 16);
                  if (v170 < 0) {
                    int v170 = -v170;
                  }
                  if (v154 <= (float)v170) {
                    float v169 = v169 + (float)((float)(*(float *)(v65 + 8312) * (float)v170) / v63);
                  }
                  if (v169 >= v83)
                  {
                    unsigned int v31 = v164;
                  }
                  else
                  {
                    float v83 = v169;
                    unsigned int v31 = v153 + v151 + 2;
                  }
                  float v171 = *(float *)(v155 + 32);
                  if (v171 > v83) {
                    break;
                  }
                  float v172 = (float)(*(float *)&v79[*(unsigned __int8 *)(v156 + v151 + 2)]
                               + (float)(v45 * *(float *)(v82 + 4 * v159[3])))
                       + (float)(v46 * *(float *)(v81 + 4 * v158[3]));
                  if (v77 == v157[1]) {
                    float v172 = 0.0;
                  }
                  float v173 = v171 + v172;
                  int v174 = v152 + *(_DWORD *)(v155 + 48);
                  if (v174 < 0) {
                    int v174 = -v174;
                  }
                  if (v154 <= (float)v174) {
                    float v173 = v173 + (float)((float)(*(float *)(v65 + 8312) * (float)v174) / v63);
                  }
                  if (v173 < v83)
                  {
                    float v83 = v173;
                    unsigned int v31 = v153 + v151 + 3;
                  }
                  v151 += 4;
                  v155 += 128;
                  v157 += 4;
                }
                while (v153 + v151 < v78);
              }
            }
          }
          else
          {
            uint64_t v93 = v73 & 3;
            uint64_t v94 = *(void *)(a1 + 88);
            if (v66 == 0.0)
            {
              if ((v73 & 3) != 0)
              {
                uint64_t v175 = 0;
                uint64_t v176 = (float *)v232;
                while (*v176 <= v83)
                {
                  float v177 = (float)(*(float *)&v79[*(unsigned __int8 *)(v94 + v175)]
                               + (float)(v45 * *(float *)(v82 + 4 * *(unsigned int *)(v68 + 4 * v175))))
                       + (float)(v46 * *(float *)(v81 + 4 * *(unsigned int *)(v69 + 4 * v175)));
                  if (v77 == *(_DWORD *)(v2 + 4 * v175)) {
                    float v177 = 0.0;
                  }
                  if ((float)(*v176 + v177) < v83)
                  {
                    float v83 = *v176 + v177;
                    unsigned int v31 = v175;
                  }
                  ++v175;
                  v176 += 8;
                  if ((v73 & 3) == v175)
                  {
                    v68 += 4 * (v93 - 1) + 4;
                    v69 += 4 * (v93 - 1) + 4;
                    goto LABEL_243;
                  }
                }
              }
              else
              {
LABEL_243:
                if (v73 >= 4)
                {
                  uint64_t v178 = 0;
                  uint64_t v179 = v73 & 3;
                  uint64_t v180 = (float *)(v219 + 32 * v93);
                  uint64_t v181 = v94 + v93 + 1;
                  float v182 = (_DWORD *)(v218 + 4 * v93);
                  do
                  {
                    v183 = (unsigned int *)(v69 + 4 * v178);
                    float v184 = (unsigned int *)(v68 + 4 * v178);
                    uint64_t v185 = v181 + v178;
                    float v186 = (float)(*(float *)&v79[*(unsigned __int8 *)(v181 + v178 - 1)]
                                 + (float)(v45 * *(float *)(v82 + 4 * *v184)))
                         + (float)(v46 * *(float *)(v81 + 4 * *v183));
                    if (v77 == *(v182 - 2)) {
                      float v186 = 0.0;
                    }
                    float v187 = *(v180 - 16) + v186;
                    BOOL v188 = v187 < v83;
                    if (v187 < v83) {
                      float v83 = v187;
                    }
                    int v189 = v179 + v178;
                    if (v188) {
                      unsigned int v190 = v179 + v178;
                    }
                    else {
                      unsigned int v190 = v31;
                    }
                    float v191 = (float)(*(float *)&v79[*(unsigned __int8 *)(v181 + v178)]
                                 + (float)(v45 * *(float *)(v82 + 4 * v184[1])))
                         + (float)(v46 * *(float *)(v81 + 4 * v183[1]));
                    if (v77 == *(v182 - 1)) {
                      float v191 = 0.0;
                    }
                    float v192 = *(v180 - 8) + v191;
                    if (v192 < v83)
                    {
                      float v83 = v192;
                      unsigned int v190 = v189 + 1;
                    }
                    float v193 = (float)(*(float *)&v79[*(unsigned __int8 *)(v185 + 1)]
                                 + (float)(v45 * *(float *)(v82 + 4 * v184[2])))
                         + (float)(v46 * *(float *)(v81 + 4 * v183[2]));
                    if (v77 == *v182) {
                      float v193 = 0.0;
                    }
                    float v194 = *v180 + v193;
                    BOOL v195 = v194 < v83;
                    if (v194 < v83) {
                      float v83 = v194;
                    }
                    unsigned int v196 = v189 + 2;
                    if (v195) {
                      unsigned int v31 = v196;
                    }
                    else {
                      unsigned int v31 = v190;
                    }
                    float v197 = v180[8];
                    if (v197 > v83) {
                      break;
                    }
                    int v198 = v182[1];
                    v182 += 4;
                    float v199 = (float)(*(float *)&v79[*(unsigned __int8 *)(v185 + 2)]
                                 + (float)(v45 * *(float *)(v82 + 4 * v184[3])))
                         + (float)(v46 * *(float *)(v81 + 4 * v183[3]));
                    if (v77 == v198) {
                      float v199 = 0.0;
                    }
                    float v200 = v197 + v199;
                    if (v200 < v83)
                    {
                      float v83 = v200;
                      unsigned int v31 = v179 + v178 + 3;
                    }
                    v178 += 4;
                    v180 += 32;
                  }
                  while (v179 + v178 < v78);
                }
              }
            }
            else if ((v73 & 3) != 0)
            {
              uint64_t v95 = 0;
              uint64_t v96 = (float *)(v232 + 8);
              while (1)
              {
                float v97 = *(v96 - 2);
                if (v97 > v83) {
                  break;
                }
                float v98 = (float)(*(float *)&v79[*(unsigned __int8 *)(v94 + v95)]
                            + (float)(v45 * *(float *)(v82 + 4 * *(unsigned int *)(v68 + 4 * v95))))
                    + (float)(v46 * *(float *)(v81 + 4 * *(unsigned int *)(v69 + 4 * v95)));
                if (v77 == *(_DWORD *)(v2 + 4 * v95)) {
                  float v98 = 0.0;
                }
                float v99 = v97 + v98;
                if (*v96 != 0.0)
                {
                  float v100 = *v96 - v66;
                  float v101 = -v100;
                  if (v100 >= 0.0) {
                    float v101 = *v96 - v66;
                  }
                  float v102 = v100 - (float)(*(v96 - 1) - v33);
                  if (v102 < 0.0) {
                    float v102 = -v102;
                  }
                  float v103 = v96[1];
                  float v104 = v103 - v66;
                  if ((float)(v103 - v66) < 0.0) {
                    float v104 = -(float)(v103 - v66);
                  }
                  if (v103 == 0.0) {
                    float v105 = 0.0;
                  }
                  else {
                    float v105 = v104;
                  }
                  if (v101 > *(float *)(v65 + 8284)) {
                    float v99 = v99 + (float)(*(float *)(v65 + 8288) * v101);
                  }
                  if (v105 > *(float *)(v65 + 8292)) {
                    float v99 = v99 + (float)(*(float *)(v65 + 8296) * v105);
                  }
                  if (v102 > *(float *)(v65 + 8300)) {
                    float v99 = v99 + (float)(*(float *)(v65 + 8304) * v102);
                  }
                }
                if (v99 < v83)
                {
                  float v83 = v99;
                  unsigned int v31 = v95;
                }
                ++v95;
                v96 += 8;
                if (v93 == v95)
                {
                  v68 += 4 * (v93 - 1) + 4;
                  v69 += 4 * (v93 - 1) + 4;
                  goto LABEL_105;
                }
              }
            }
            else
            {
LABEL_105:
              if (v73 >= 4)
              {
                uint64_t v106 = 0;
                uint64_t v107 = v93;
                uint64_t v108 = v94 + v93 + 1;
                uint64_t v109 = (_DWORD *)(v218 + 4 * v93);
                unsigned int v110 = (float *)(v219 + 32 * v107);
                do
                {
                  float v111 = (unsigned int *)(v69 + 4 * v106);
                  uint64_t v112 = (unsigned int *)(v68 + 4 * v106);
                  float v113 = (float)(*(float *)&v79[*(unsigned __int8 *)(v108 + v106 - 1)]
                               + (float)(v45 * *(float *)(v82 + 4 * *v112)))
                       + (float)(v46 * *(float *)(v81 + 4 * *v111));
                  if (v77 == *(v109 - 2)) {
                    float v113 = 0.0;
                  }
                  float v114 = *(v110 - 16) + v113;
                  float v115 = *(v110 - 14);
                  if (v115 != 0.0)
                  {
                    float v116 = v115 - v66;
                    float v117 = -v116;
                    if (v116 >= 0.0) {
                      float v117 = v116;
                    }
                    float v118 = v116 - (float)(*(v110 - 15) - v33);
                    if (v118 < 0.0) {
                      float v118 = -v118;
                    }
                    float v119 = *(v110 - 13);
                    float v120 = v119 - v66;
                    if ((float)(v119 - v66) < 0.0) {
                      float v120 = -(float)(v119 - v66);
                    }
                    if (v119 == 0.0) {
                      float v121 = 0.0;
                    }
                    else {
                      float v121 = v120;
                    }
                    if (v117 > *(float *)(v65 + 8284)) {
                      float v114 = v114 + (float)(*(float *)(v65 + 8288) * v117);
                    }
                    if (v121 > *(float *)(v65 + 8292)) {
                      float v114 = v114 + (float)(*(float *)(v65 + 8296) * v121);
                    }
                    if (v118 > *(float *)(v65 + 8300)) {
                      float v114 = v114 + (float)(*(float *)(v65 + 8304) * v118);
                    }
                  }
                  unsigned int v122 = v107 + v106;
                  if (v114 < v83) {
                    float v83 = v114;
                  }
                  else {
                    unsigned int v122 = v31;
                  }
                  float v123 = (float)(*(float *)&v79[*(unsigned __int8 *)(v108 + v106)]
                               + (float)(v45 * *(float *)(v82 + 4 * v112[1])))
                       + (float)(v46 * *(float *)(v81 + 4 * v111[1]));
                  if (v77 == *(v109 - 1)) {
                    float v123 = 0.0;
                  }
                  float v124 = *(v110 - 8) + v123;
                  float v125 = *(v110 - 6);
                  if (v125 != 0.0)
                  {
                    float v126 = v125 - v66;
                    float v127 = -v126;
                    if (v126 >= 0.0) {
                      float v127 = v126;
                    }
                    float v128 = v126 - (float)(*(v110 - 7) - v33);
                    if (v128 < 0.0) {
                      float v128 = -v128;
                    }
                    float v129 = *(v110 - 5);
                    float v130 = v129 - v66;
                    if ((float)(v129 - v66) < 0.0) {
                      float v130 = -(float)(v129 - v66);
                    }
                    if (v129 == 0.0) {
                      float v131 = 0.0;
                    }
                    else {
                      float v131 = v130;
                    }
                    if (v127 > *(float *)(v65 + 8284)) {
                      float v124 = v124 + (float)(*(float *)(v65 + 8288) * v127);
                    }
                    if (v131 > *(float *)(v65 + 8292)) {
                      float v124 = v124 + (float)(*(float *)(v65 + 8296) * v131);
                    }
                    if (v128 > *(float *)(v65 + 8300)) {
                      float v124 = v124 + (float)(*(float *)(v65 + 8304) * v128);
                    }
                  }
                  if (v124 < v83)
                  {
                    float v83 = v124;
                    unsigned int v122 = v107 + v106 + 1;
                  }
                  float v132 = (float)(*(float *)&v79[*(unsigned __int8 *)(v108 + v106 + 1)]
                               + (float)(v45 * *(float *)(v82 + 4 * v112[2])))
                       + (float)(v46 * *(float *)(v81 + 4 * v111[2]));
                  if (v77 == *v109) {
                    float v132 = 0.0;
                  }
                  float v133 = *v110 + v132;
                  float v134 = v110[2];
                  if (v134 != 0.0)
                  {
                    float v135 = v134 - v66;
                    float v136 = -v135;
                    if (v135 >= 0.0) {
                      float v136 = v135;
                    }
                    float v137 = v135 - (float)(v110[1] - v33);
                    if (v137 < 0.0) {
                      float v137 = -v137;
                    }
                    float v138 = v110[3];
                    float v139 = v138 - v66;
                    if ((float)(v138 - v66) < 0.0) {
                      float v139 = -(float)(v138 - v66);
                    }
                    if (v138 == 0.0) {
                      float v140 = 0.0;
                    }
                    else {
                      float v140 = v139;
                    }
                    if (v136 > *(float *)(v65 + 8284)) {
                      float v133 = v133 + (float)(*(float *)(v65 + 8288) * v136);
                    }
                    if (v140 > *(float *)(v65 + 8292)) {
                      float v133 = v133 + (float)(*(float *)(v65 + 8296) * v140);
                    }
                    if (v137 > *(float *)(v65 + 8300)) {
                      float v133 = v133 + (float)(*(float *)(v65 + 8304) * v137);
                    }
                  }
                  if (v133 >= v83)
                  {
                    unsigned int v31 = v122;
                  }
                  else
                  {
                    float v83 = v133;
                    unsigned int v31 = v107 + v106 + 2;
                  }
                  float v141 = v110[8];
                  if (v141 > v83) {
                    break;
                  }
                  float v142 = (float)(*(float *)&v79[*(unsigned __int8 *)(v108 + v106 + 2)]
                               + (float)(v45 * *(float *)(v82 + 4 * v112[3])))
                       + (float)(v46 * *(float *)(v81 + 4 * v111[3]));
                  if (v77 == v109[1]) {
                    float v142 = 0.0;
                  }
                  float v143 = v141 + v142;
                  float v144 = v110[10];
                  if (v144 != 0.0)
                  {
                    float v145 = v144 - v66;
                    float v146 = -v145;
                    if (v145 >= 0.0) {
                      float v146 = v145;
                    }
                    float v147 = v145 - (float)(v110[9] - v33);
                    if (v147 < 0.0) {
                      float v147 = -v147;
                    }
                    float v148 = v110[11];
                    float v149 = v148 - v66;
                    if ((float)(v148 - v66) < 0.0) {
                      float v149 = -(float)(v148 - v66);
                    }
                    if (v148 == 0.0) {
                      float v150 = 0.0;
                    }
                    else {
                      float v150 = v149;
                    }
                    if (v146 > *(float *)(v65 + 8284)) {
                      float v143 = v143 + (float)(*(float *)(v65 + 8288) * v146);
                    }
                    if (v150 > *(float *)(v65 + 8292)) {
                      float v143 = v143 + (float)(*(float *)(v65 + 8296) * v150);
                    }
                    if (v147 > *(float *)(v65 + 8300)) {
                      float v143 = v143 + (float)(*(float *)(v65 + 8304) * v147);
                    }
                  }
                  if (v143 < v83)
                  {
                    float v83 = v143;
                    unsigned int v31 = v107 + v106 + 3;
                  }
                  v106 += 4;
                  v109 += 4;
                  v110 += 32;
                }
                while (v107 + v106 < v78);
              }
            }
          }
          float v201 = v76 + v83;
          uint64_t v202 = v22;
          v203 = (void **)&v64[8 * v62];
          memcpy(v203[3], *(const void **)(v232 + 32 * v31 + 24), 4 * v223);
          unsigned int v64 = v227;
          *float v228 = v201;
          float v204 = (float *)v203[3];
          uint64_t v22 = v202;
          v204[v223] = v229;
          uint64_t v205 = *(void *)(a1 + 16);
          if (*(_DWORD *)(v205 + 8264))
          {
            if (v66 == 0.0)
            {
              uint64_t v209 = v232 + 32 * v31;
              *(void *)&v227[8 * v62 + 2] = *(void *)(v209 + 8);
              float v208 = *(float *)(v209 + 4);
            }
            else
            {
              int v206 = *(_DWORD *)(v232 + 32 * v31 + 8);
              float v207 = (float *)&v227[8 * v62];
              v207[2] = v66;
              *((_DWORD *)v207 + 3) = v206;
              float v208 = v225;
            }
            *(float *)&v227[8 * v62 + 1] = v208;
          }
          float v13 = v230;
          if (*(_DWORD *)(v205 + 8268))
          {
            if (v233) {
              int v210 = 0;
            }
            else {
              int v210 = *(_DWORD *)(v232 + 32 * v31 + 16) + v224;
            }
            v227[8 * v62 + 4] = v210;
          }
          if (v201 < v230) {
            float v13 = v201;
          }
          int v211 = v231;
          if (v201 < v230) {
            int v211 = v62;
          }
          int v231 = v211;
          ++v62;
          float v33 = v225;
        }
        while (v62 < *(unsigned int *)(a1 + 68));
      }
      else
      {
        float v13 = 10000000.0;
      }
      ++v32;
    }
    while (v217 + 1 != v213);
  }
  *(_DWORD *)(a1 + 80) = v231;
  *(float *)(a1 + 84) = v13;
  return 0;
}

uint64_t mfs_Sort_By_PathScore_faster(_DWORD *a1, _DWORD *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t mfs_Viterbi_Decode_MCP_S9_LF0_S8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  float v3 = *(float *)(*(void *)(a1 + 16) + 8172);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v74 = *(void *)(v5 + 2136);
  uint64_t v75 = *(void *)(v5 + 2152);
  uint64_t v72 = *(void *)(v2 + 2072);
  v85[0] = 0;
  v85[1] = 0;
  uint64_t v84 = v85;
  MFS__log_select_Diag(v4, 1, (uint64_t)"S8 Viterbi Decoder Variant 1 has been selected\n");
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 2592);
  if (v8 == 2)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 32);
    unsigned int v12 = *(_DWORD *)(a1 + 36);
    int v15 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi regular search and emission, from=%d, to=%d\n");
    *(_DWORD *)(*(void *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v15);
    float v14 = 0.0;
  }
  else if (v8 == 1)
  {
    unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 16) + 8568) + *(_DWORD *)(v7 + 2596);
    unsigned int v12 = *(_DWORD *)(a1 + 36);
    float v14 = *(float *)(a1 + 84);
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Completing Viterbi decomposition after successful early emission, from=%d, to=%d\n");
  }
  else
  {
    if (v8)
    {
      int v17 = 0;
      float v14 = 0.0;
      goto LABEL_63;
    }
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Final output state for early emission is %d\n");
    int v9 = *(_DWORD *)(*(void *)(a1 + 24) + 2596);
    if (!v9 || (int v10 = *(_DWORD *)(*(void *)(a1 + 16) + 8568), (v9 + 2 * v10) > *(_DWORD *)(a1 + 36)))
    {
      MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi early emission will not take place - regular emission instead, from=%d, to=%d\n");
      uint64_t result = 0;
      *(_DWORD *)(*(void *)(a1 + 24) + 2592) = 2;
      return result;
    }
    unsigned int v11 = *(_DWORD *)(a1 + 32);
    unsigned int v12 = v10 + v9;
    float v13 = (kaldi::nnet1::Component *)MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"Viterbi early emission will go ahead, from=%d, to=%d\n");
    *(_DWORD *)(*(void *)(a1 + 24) + 2612) = kaldi::nnet1::Component::IsUpdatable(v13);
    float v14 = 0.0;
  }
  if (v11 >= v12)
  {
    int v17 = 0;
LABEL_63:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 80) = v17;
    *(float *)(a1 + 84) = v14;
    return result;
  }
  unsigned int v16 = 0;
  int v17 = 0;
  float v70 = v3;
  float v18 = 1.0 - v3;
  uint64_t v19 = v11;
  uint64_t v71 = v12;
  while (1)
  {
    int v20 = *(float **)(v72 + 8 * v19);
    float v22 = v20[1];
    float v21 = v20[2];
    float v23 = *v20;
    uint64_t v24 = *(unsigned int *)(a1 + 32);
    unsigned int v25 = *(_DWORD *)(a1 + 76);
    if (v19 != v24)
    {
      *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
      *(int32x2_t *)(a1 + 64) = vrev64_s32(*(int32x2_t *)(a1 + 64));
      unsigned int v26 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = v25;
      *(_DWORD *)(a1 + 76) = v26;
      unsigned int v25 = v26;
    }
    unint64_t v28 = *(void *)(a1 + 24);
    unsigned int v27 = *(_DWORD *)(*(void *)(v28 + 1952) + 32 * v19 + 16);
    LODWORD(v28) = *(_DWORD *)(*(void *)(v28 + 2016) + 4 * v19);
    if (v27 < v28) {
      LODWORD(v28) = v27;
    }
    *(_DWORD *)(a1 + 68) = v28;
    if (v28 > v25) {
      break;
    }
    uint64_t v33 = v24;
    int v34 = v24;
LABEL_23:
    uint64_t v79 = 32 * v19;
    uint64_t v73 = v19;
    if (v19 != v33)
    {
      float v37 = *(float *)(*(void *)(a1 + 16) + 8248);
      if (v37 > 4.0 || v19 == v34 + 1 || (uint64_t v38 = *(unsigned int *)(a1 + 64), !v38))
      {
        int v39 = 0;
        if (!v28) {
          goto LABEL_40;
        }
      }
      else
      {
        int v39 = 0;
        float v40 = v14 + v37;
        float v41 = *(float **)(a1 + 48);
        do
        {
          if (*v41 > v40)
          {
            *float v41 = 10000000.0;
            ++v39;
          }
          v41 += 8;
          --v38;
        }
        while (v38);
        if (!v28) {
          goto LABEL_40;
        }
      }
      float v42 = *(_DWORD **)(a1 + 56);
      unint64_t v28 = v28;
      do
      {
        *float v42 = 1259902592;
        v42 += 8;
        --v28;
      }
      while (v28);
LABEL_40:
      ssft_qsort(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), 32, (uint64_t (*)(unint64_t, unint64_t))mfs_Sort_By_PathScore);
      int v43 = *(_DWORD *)(a1 + 68);
      *(_DWORD *)(a1 + 64) -= v39;
      if (v43)
      {
        unint64_t v44 = 0;
        float v14 = 10000000.0;
        float v76 = v70 * v21;
        float v45 = v70 * v22;
        float v46 = v70 * v23;
        uint64_t v47 = (v19 - v24);
        uint64_t v48 = (v47 - 1);
        uint64_t v78 = v47;
        uint64_t __n = 4 * v47;
        do
        {
          int32x4_t v49 = (float *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 1952) + v79) + 8 * v44);
          float v50 = v49[1];
          uint64_t v51 = *(unsigned int *)v49;
          mfs_getUnitDataFromMfsData(*(unsigned __int8 **)(a1 + 8), *(_DWORD *)v49, (uint64_t *)&v84);
          uint64_t v52 = *(void *)(a1 + 56);
          float v53 = *(float *)(v52 + 32 * v44);
          int v54 = *(_DWORD *)(a1 + 64);
          if (v54 >= 1)
          {
            int v81 = v17;
            uint64_t v55 = 0;
            uint64_t v56 = 0;
            float v57 = v18;
            float v58 = v18 * v50;
            int v59 = v51 - 1;
            unsigned int v60 = (char *)&unk_20D6B43B0 + 4 * *((unsigned __int8 *)v84 + 15);
            int v80 = v51;
            uint64_t v61 = *(void *)(*(void *)(*(void *)(a1 + 24) + 2048) + 8 * v51);
            uint64_t v62 = v74 + ((unint64_t)*(unsigned __int16 *)(v61 + 4) << 11);
            uint64_t v82 = v75 + ((unint64_t)*(unsigned __int8 *)(v61 + 2) << 10);
            float v83 = (unsigned char *)v61;
            do
            {
              uint64_t v63 = *(void *)(a1 + 48);
              float v64 = v58 + *(float *)(v63 + v55);
              if (v64 > v53) {
                break;
              }
              uint64_t v65 = *(unsigned int *)(*(void *)(v63 + v55 + 24) + 4 * v48);
              if (v59 != v65)
              {
                uint64_t v66 = *(void *)(*(void *)(*(void *)(a1 + 24) + 2048) + 8 * v65);
                float v67 = 0.0;
                if (!*(unsigned char *)(v66 + 1) && !*v83) {
                  float v67 = v76 * *(float *)(v82 + 4 * *(unsigned __int8 *)(v66 + 3));
                }
                mfs_getUnitDataFromMfsData(*(unsigned __int8 **)(a1 + 8), v65, (uint64_t *)&v84);
                float v64 = v64
                    + (float)((float)(v67 + (float)(v46 * *(float *)&v60[4 * *((unsigned __int8 *)v84 + 15)]))
                            + (float)(v45 * *(float *)(v62 + 4 * *(unsigned __int16 *)(v66 + 6))));
                int v54 = *(_DWORD *)(a1 + 64);
              }
              if (v64 < v53)
              {
                unsigned int v16 = v56;
                float v53 = v64;
              }
              ++v56;
              v55 += 32;
            }
            while (v56 < v54);
            uint64_t v52 = *(void *)(a1 + 56);
            int v17 = v81;
            float v18 = v57;
            LODWORD(v51) = v80;
          }
          memcpy(*(void **)(v52 + 32 * v44 + 24), *(const void **)(*(void *)(a1 + 48) + 32 * v16 + 24), __n);
          uint64_t v68 = *(void *)(a1 + 56) + 32 * v44;
          *(float *)uint64_t v68 = v53;
          *(_DWORD *)(*(void *)(v68 + 24) + 4 * v78) = v51;
          if (v53 < v14)
          {
            int v17 = v44;
            float v14 = v53;
          }
          ++v44;
        }
        while (v44 < *(unsigned int *)(a1 + 68));
      }
      else
      {
        float v14 = 10000000.0;
      }
      goto LABEL_59;
    }
    if (v28)
    {
      uint64_t v35 = *(void *)(a1 + 56);
      unint64_t v28 = v28;
      uint64_t v36 = (float *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 1952) + 32 * v19) + 4);
      do
      {
        *(float *)uint64_t v35 = v18 * *v36;
        **(float **)(v35 + 24) = *(v36 - 1);
        v35 += 32;
        v36 += 2;
        --v28;
      }
      while (v28);
    }
LABEL_59:
    uint64_t v19 = v73 + 1;
    if (v73 + 1 == v71) {
      goto LABEL_63;
    }
  }
  uint64_t v29 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 56), 32 * v28);
  *(void *)(a1 + 56) = v29;
  if (!v29) {
    return 2229280778;
  }
  unint64_t v30 = *(unsigned int *)(a1 + 76);
  LODWORD(v28) = *(_DWORD *)(a1 + 68);
  if (v30 >= v28)
  {
LABEL_21:
    *(_DWORD *)(a1 + 76) = v28;
    uint64_t v33 = *(unsigned int *)(a1 + 32);
    int v34 = *(_DWORD *)(a1 + 32);
    goto LABEL_23;
  }
  uint64_t v31 = (32 * v30) | 0x18;
  while (1)
  {
    uint64_t v32 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned int *)(a1 + 40), 4);
    *(void *)(*(void *)(a1 + 56) + v31) = v32;
    if (!v32) {
      return 2229280778;
    }
    ++v30;
    unint64_t v28 = *(unsigned int *)(a1 + 68);
    v31 += 32;
    if (v30 >= v28) {
      goto LABEL_21;
    }
  }
}

uint64_t mfs_Viterbi_ResultScore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v3 + 2592)) {
    unsigned int v4 = *(_DWORD *)(a1 + 36);
  }
  else {
    unsigned int v4 = *(_DWORD *)(*(void *)(a1 + 16) + 8568) + *(_DWORD *)(v3 + 2596);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v5 < v4)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a3 + 8);
    do
    {
      *(_DWORD *)(v7 + 4 * v5) = *(_DWORD *)(*(void *)(v6 + 32 * *(unsigned int *)(a1 + 80) + 24)
                                           + 4 * (v5 - *(_DWORD *)(a1 + 32)));
      *(_DWORD *)(v8 + 4 * v5++) = 0;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t mfs_Ling_LogPhonCtxt(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = BET3FLT__log_select_GetLogLevel(*(void *)(a1 + 32));
  if (result >= 3)
  {
    uint64_t v9 = *(void *)(a3 + 32);
    if (a4 >= 1)
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        if (*(unsigned __int8 *)(a2 + 7356 + i) == *(unsigned __int8 *)(v9 + (a4 - 1))) {
          break;
        }
      }
    }
    for (uint64_t j = 0; j != 256; ++j)
    {
      if (*(unsigned __int8 *)(a2 + 7356 + j) == *(unsigned __int8 *)(v9 + a4)) {
        break;
      }
    }
    uint64_t v12 = a4 + 1;
    if ((int)v12 < *(__int16 *)(a3 + 10))
    {
      uint64_t v13 = 0;
      int v14 = *(unsigned __int8 *)(v9 + v12);
      do
      {
        if (*(unsigned __int8 *)(a2 + 7356 + v13) == v14) {
          break;
        }
        ++v13;
      }
      while (v13 != 256);
    }
    return MFS__log_select_Diag(a1, 3, (uint64_t)"[%c-%c+%c]");
  }
  return result;
}

uint64_t mfs_Ling_HmmPhonemeToLhTts(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  while (*(unsigned __int8 *)(a1 + 7356 + v2) != a2)
  {
    if (++v2 == 256)
    {
      LOBYTE(v2) = 0;
      return v2;
    }
  }
  return v2;
}

uint64_t mfs_Ling_CenterPhoneme(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 32) + a2);
}

uint64_t mfs_Ling_SylPos(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 152) + a2);
}

uint64_t mfs_Ling_WrdPosShpInPhrs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1496);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 6;
  }
}

BOOL mfs_Ling_IsSyllableBegin(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 112) + a2) != 0;
}

BOOL mfs_Ling_IsWordBegin(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 112) + a2) > 1u;
}

const char *mfs_Ling_IsVowel(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = *(const char **)(*(void *)(a1 + 7616) + 8 * *(unsigned __int8 *)(*(void *)(a2 + 32) + a3));
  if (result) {
    return (const char *)(strcmp(result, "VV") == 0);
  }
  return result;
}

const char *mfs_Ling_IsSilence(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = *(const char **)(*(void *)(a1 + 7616) + 8 * *(unsigned __int8 *)(*(void *)(a2 + 32) + a3));
  if (result) {
    return (const char *)(strcmp(result, "SIL") == 0);
  }
  return result;
}

const char *mfs_Ling_IsVowelVowelTrans(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(a2 + 32) + (a3 - 1));
  }
  uint64_t v6 = *(void *)(a1 + 7616);
  uint64_t result = *(const char **)(v6 + 8 * v5);
  if (result)
  {
    if (!strcmp(result, "VV"))
    {
      uint64_t result = *(const char **)(v6 + 8 * *(unsigned __int8 *)(*(void *)(a2 + 32) + a3));
      if (result) {
        return (const char *)(strcmp(result, "VV") == 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL mfs_Ling_IsInvariantPhoneme(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a2 + 32) + a3);
  unsigned int v4 = *(const char **)(*(void *)(a1 + 7616) + 8 * v3);
  if (!v4) {
    return 0;
  }
  if (!strcmp(*(const char **)(*(void *)(a1 + 7616) + 8 * v3), "SIL") || !strcmp(v4, "UC")) {
    return 1;
  }
  if (strcmp(v4, "MC")) {
    return 0;
  }
  return *(unsigned char *)(*(void *)(a2 + 184) + a3) != 2;
}

BOOL mfs_Ling_IsVoiced(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(a2 + 32) + a3);
  unsigned int v4 = *(const char **)(*(void *)(a1 + 7616) + 8 * v3);
  return v4 && (!strcmp(*(const char **)(*(void *)(a1 + 7616) + 8 * v3), "VC") || !strcmp(v4, "VV"));
}

uint64_t mfs_ParamGenStart(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = (char *)(a1 + 56);
  uint64_t v7 = *(void *)a1;
  MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"-%s\n");
  unsigned int inited = MFS__InitUttModel(v7, v6, a2, *(__int16 *)(*(void *)(a1 + 8) + 10));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_DWORD *)(a1 + 16) = a3[8];
  *(void *)(a1 + 1928) = v7;
  *(void *)(a1 + 2192) = 0;
  *(_DWORD *)(a1 + 2200) = 0;
  int v13 = a3[7];
  if (v13 < 1 || v13 >= *(_DWORD *)(a1 + 620))
  {
    LODWORD(v15) = *(_DWORD *)(a1 + 608);
    if ((int)v15 < 1)
    {
      float v19 = 0.0;
      float v18 = 0.0;
LABEL_88:
      if (v13 < 1 || (*(float *)(a1 + 16) = (float)((float)v13 - v19) / v18, (int)v15 < 1))
      {
LABEL_93:
        MFS__log_select_Diag(v7, 2, (uint64_t)">> tree search done\n");
        AddBreakMarks_1(a1, a2, (uint64_t)a3);
        if (BET3FLT__log_select_GetLogLevel(*(void *)(v7 + 32)) >= 0x15) {
          OutLabel_2(a1);
        }
        unsigned int inited = ParamGenLT_1(a1, a2, 0);
        uint64_t v90 = *(void *)(*(void *)(a1 + 600) + 528 * *(int *)(a1 + 608) - 512);
        *(_DWORD *)(v90 + 4 * *a2) = *(_DWORD *)(v90 + 4 * *a2 + 4) + *(_DWORD *)(v90 + 4 * *a2) - 1;
        *(_DWORD *)(v90 + 4 * *a2 + 4) = 1;
        MFS__log_select_Diag(v7, 1, (uint64_t)"+%s\n");
      }
      else
      {
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        while (1)
        {
          float v88 = (int32x2_t *)(*(void *)(a1 + 600) + v86);
          unsigned int DurPDF = BET3FLT__FindDurPDF(v88, a2, 0, v88[4].i32[0], *(_DWORD *)(*(void *)(a1 + 24) + 1492), *(float *)(a1 + 16));
          if ((DurPDF & 0x80000000) != 0) {
            return DurPDF;
          }
          SetSilenceDuration_1(a1, a2, (uint64_t)a3, (int *)v88);
          *(_DWORD *)(a1 + 624) += v88[3].i32[0];
          ++v87;
          v86 += 528;
          if (v87 >= *(int *)(a1 + 608)) {
            goto LABEL_93;
          }
        }
      }
      return inited;
    }
    uint64_t v16 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v103 = (uint64_t)(a2 + 116);
    int v17 = *(_DWORD *)(a1 + 32);
    uint64_t v93 = *(void *)(*(void *)(a1 + 8) + 1784);
    float v18 = 0.0;
    float v19 = 0.0;
    uint64_t v104 = v7;
    float v100 = a2;
    while (1)
    {
      uint64_t v106 = *(void *)(a1 + 600);
      if (v17 >= 1)
      {
        uint64_t v20 = 0;
        float v21 = a3 + 326;
        do
        {
          uint64_t v22 = a3[v20 + 86];
          if ((int)v22 < 1)
          {
LABEL_16:
            LODWORD(v23) = 0;
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = (const char **)&a3[2 * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 248) + v16) + 1326];
            while (1)
            {
              unsigned int v25 = *(const char **)&v21[2 * v23];
              if (v25)
              {
                if (*v24 && !strcmp(v25, *v24)) {
                  break;
                }
              }
              if (v22 == ++v23) {
                goto LABEL_16;
              }
            }
          }
          *(_DWORD *)(v106 + 528 * v16 + 4 * v20++ + 32) = v23;
          v21 += 10;
        }
        while (v20 < *(int *)(a1 + 32));
      }
      float v98 = (int32x2_t *)(v106 + 528 * v16);
      MFS__log_select_Diag(v7, 21, (uint64_t)"[phoneme %d]\n");
      a2 = v100;
      if (v93)
      {
        if (a3[29])
        {
          uint64_t v31 = v7;
          uint64_t v32 = 58016;
          uint64_t v33 = "Phoneme level segmentation is not currently supported\n";
LABEL_23:
          MFS__log_select_Error(v31, v32, (uint64_t)v33, v26, v27, v28, v29, v30);
          goto LABEL_64;
        }
        if (a3[28])
        {
          uint64_t v31 = v7;
          uint64_t v32 = 58017;
          uint64_t v33 = "State level segmentation is not currently supported\n";
          goto LABEL_23;
        }
      }
      uint64_t v39 = v106 + 528 * v16;
      *(_DWORD *)(v39 + 8) = MFS__TreeSearch(*(void *)(a1 + 8), v16, v103, 0, 0);
      float v40 = (int *)(v39 + 8);
      MFS__log_select_Diag(v7, 6, (uint64_t)"DUR pdf id %d\n");
      if (a3[7])
      {
        uint64_t v41 = *v100;
        if ((int)v41 >= 1)
        {
          float v42 = (float *)(*(void *)(*(void *)(*((void *)v100 + 21) + 8 * *(int *)(v106 + 528 * v16 + 32))
                                    + 8 * *v40)
                        + 8);
          uint64_t v43 = (v41 + 2) - 2;
          do
          {
            float v19 = v19 + *v42;
            float v18 = v18 + v42[v41];
            ++v42;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        char v108 = 0;
        __int16 v107 = 0;
        UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a1 + 8), v98->i32[0], &v107);
        if (HIBYTE(v107) == 1 && (_BYTE)v107 && v108) {
          goto LABEL_45;
        }
        unint64_t v44 = *(uint64_t **)(a1 + 2640);
        if (!v44) {
          goto LABEL_45;
        }
        uint64_t v45 = *v100;
        if (!v45) {
          goto LABEL_45;
        }
        int v46 = 0;
        uint64_t v47 = (int)v45;
        uint64_t v48 = *v44;
        unsigned int v49 = *((_DWORD *)v44 + 5) + v45 * v16;
        do
        {
          if (*(float *)(v48 + 48 * v49 + 16) != 0.0) {
            int v46 = 1;
          }
          ++v49;
          --v45;
        }
        while (v45);
        if (!v46)
        {
LABEL_45:
          unsigned int v58 = BET3FLT__FindDurPDF(v98, v100, 0, *(_DWORD *)(v106 + 528 * v16 + 32), *(_DWORD *)(*(void *)(a1 + 24) + 1492), 0.0);
        }
        else
        {
          uint64_t v50 = heap_Calloc(*(void **)(*(void *)(a1 + 1928) + 8), v47, 4);
          if (!v50) {
            return -2065686518;
          }
          uint64_t v51 = v50;
          uint64_t v52 = *v100;
          if (v52)
          {
            float v53 = *(uint64_t **)(a1 + 2640);
            uint64_t v54 = *v53;
            unsigned int v55 = *((_DWORD *)v53 + 5) + v52 * v16;
            uint64_t v56 = (_DWORD *)v50;
            do
            {
              *v56++ = *(_DWORD *)(v54 + 48 * v55++ + 16);
              --v52;
            }
            while (v52);
          }
          MFS__FindDurPDF_PerStateRho((uint64_t)v98, v100, v50, 0, *(_DWORD *)(v106 + 528 * v16 + 32), *(_DWORD *)(*(void *)(a1 + 24) + 1492));
          uint64_t v57 = v51;
          a2 = v100;
          heap_Free(*(void **)(*(void *)(a1 + 1928) + 8), v57);
          unsigned int v58 = inited;
        }
        unsigned int inited = v58;
        if ((v58 & 0x80000000) != 0) {
          return inited;
        }
        SetSilenceDuration_1(a1, a2, (uint64_t)a3, (int *)v98);
        char v110 = 0;
        __int16 v109 = 0;
        UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(a1 + 8), v98->i32[0], &v109);
        int v59 = (int *)(v106 + 528 * v16 + 24);
        if (HIBYTE(v109) == 1 && (_BYTE)v109 && v110)
        {
          *int v59 = 0;
          LODWORD(v60) = *a2;
          if (*a2 < 1)
          {
            int v68 = 0;
          }
          else
          {
            uint64_t v61 = *(void *)(v106 + 528 * v16 + 16);
            uint64_t v62 = 2;
            do
            {
              float v63 = (float)*(int *)(v61 + 4 * v62) * 0.8;
              int v65 = v60 + 4;
              BOOL v64 = (int)v60 < -4;
              int v66 = v60 + 5;
              if (!v64) {
                int v66 = v65;
              }
              if (v62 == v66 >> 1) {
                float v63 = v63 * 0.8;
              }
              if (v63 >= 1.0) {
                float v67 = v63 + 0.5;
              }
              else {
                float v67 = 1.5;
              }
              *(_DWORD *)(v61 + 4 * v62) = (int)v67;
              int v68 = *v59 + (int)v67;
              *int v59 = v68;
              uint64_t v60 = *a2;
              BOOL v64 = v62++ <= v60;
            }
            while (v64);
          }
        }
        else
        {
          int v68 = *v59;
        }
        *(_DWORD *)(a1 + 624) += v68;
      }
LABEL_64:
      if (a3[2198])
      {
        unsigned int inited = -2065686527;
        uint64_t v91 = v7;
LABEL_97:
        MFS__log_select_Error(v91, 58011, (uint64_t)"bBackoff is not currently supported at %s:%d\n", v34, v35, v36, v37, v38);
        return inited;
      }
      int v17 = *(_DWORD *)(a1 + 32);
      if (v17 >= 1)
      {
        uint64_t v69 = 0;
        while (1)
        {
          uint64_t v70 = *(void *)(a1 + 24);
          if (!*(_DWORD *)(v70 + 1528 * v69 + 1480))
          {
            if (*(_DWORD *)(v70 + 1528 * v69 + 1488))
            {
              uint64_t v71 = a1 + 8 * v69;
              int v72 = *a2 * v16;
              uint64_t v95 = *(void *)(*(void *)(v71 + 304) + 8 * v72);
              uint64_t v96 = *(void *)(*(void *)(v71 + 224) + 8 * v72);
            }
            uint64_t v73 = (char *)a2 + 2 * v69;
            if (*((_WORD *)v73 + 324)) {
              break;
            }
          }
LABEL_68:
          if (++v69 >= v17) {
            goto LABEL_85;
          }
        }
        uint64_t v74 = 0;
        unint64_t v75 = 0;
        uint64_t v76 = v106 + 528 * v16;
        int v77 = (void *)(v76 + 8 * v69);
        float v99 = (unsigned __int16 *)(v73 + 648);
        float v101 = v77 + 9;
        float v102 = &a2[2 * v69 + 142];
        uint64_t v78 = v77 + 19;
        uint64_t v79 = v77 + 29;
        uint64_t v94 = &a2[v69 + 1];
        float v97 = (int *)(v76 + 4 * v69 + 32);
        while (2)
        {
          uint64_t v80 = *(unsigned __int16 *)(*(void *)v102 + v74);
          *(_DWORD *)(*v101 + 4 * v80) = MFS__TreeSearch(*(void *)(a1 + 8), v16, v103, v69, v75);
          MFS__log_select_Diag(v104, 6, (uint64_t)"%s pdf state %d id %d\n");
          if (a3[2198])
          {
            unsigned int inited = -2065686527;
            uint64_t v91 = v104;
            goto LABEL_97;
          }
          uint64_t v81 = *(void *)(a1 + 24);
          if (*(_DWORD *)(v81 + 1528 * v69 + 1488))
          {
            int v82 = v80 - 2;
            int v83 = v82 + v82 * *v94;
            *(void *)(*v78 + 8 * v80) = v96 + 4 * v83;
            *(void *)(*v78 + 8 * v80) -= 4;
            *(void *)(*v79 + 8 * v80) = v95 + 4 * v83;
            *(void *)(*v79 + 8 * v80) -= 4;
            uint64_t v84 = *(void *)(a1 + 2640);
            if (v84 && a3[v69 + 56] == 2) {
              unsigned int LF0PDF_PerStateRho = MFS__FindLF0PDF_PerStateRho(v69, v80, (uint64_t)v98, (uint64_t)v100, (uint64_t)a3, *v97, *(_DWORD *)(*(void *)(a1 + 24) + 1528 * v69 + 1492), *(float *)(*(void *)v84+ 48 * (*(_DWORD *)(v84 + 20) + v82 + *v100 * v16)+ 20));
            }
            else {
              unsigned int LF0PDF_PerStateRho = BET3FLT__FindMsdPDF(v69, v80, (uint64_t)v98, (uint64_t)v100, (uint64_t)a3, *v97);
            }
            goto LABEL_82;
          }
          if (*(_DWORD *)(v81 + 1528 * v69 + 1484))
          {
            unsigned int LF0PDF_PerStateRho = BET3FLT__FindContPDF(v69, v80, (uint64_t)v98, (uint64_t)v100, *v97);
LABEL_82:
            unsigned int inited = LF0PDF_PerStateRho;
            if ((LF0PDF_PerStateRho & 0x80000000) != 0) {
              return inited;
            }
          }
          ++v75;
          v74 += 16;
          if (v75 >= *v99)
          {
            int v17 = *(_DWORD *)(a1 + 32);
            uint64_t v7 = v104;
            a2 = v100;
            goto LABEL_68;
          }
          continue;
        }
      }
LABEL_85:
      ++v16;
      uint64_t v15 = *(int *)(a1 + 608);
      if (v16 >= v15)
      {
        int v13 = a3[7];
        goto LABEL_88;
      }
    }
  }
  MFS__log_select_Error(v7, 55018, (uint64_t)"Specified length of generated speech is too short (this sentence is composed from %d states), specify more than %d milliseconds\n", v8, v9, v10, v11, v12);
  return -2065686521;
}

uint64_t SetSilenceDuration_1(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *a4;
  if (*(unsigned char *)(*(void *)(v4 + 32) + v5) == 1)
  {
    int v6 = *(unsigned __int16 *)(*(void *)(v4 + 1784) + 2 * v5) / *(int *)(a3 + 24);
    LODWORD(v5) = *a2;
    if (v6 <= *a2)
    {
      if ((int)v5 >= 1)
      {
        uint64_t v12 = *((void *)a4 + 2);
        uint64_t v13 = 2;
        do
        {
          *(_DWORD *)(v12 + 4 * v13) = 1;
          BOOL v9 = v13++ <= *a2;
        }
        while (v9);
        LODWORD(v5) = *a2;
      }
      a4[6] = v5;
    }
    else
    {
      if (v6 >= a4[6])
      {
        if ((int)v5 <= 0)
        {
          a4[6] = 0;
          return result;
        }
        int v11 = 0;
        int v10 = 0;
        uint64_t v14 = *((void *)a4 + 2);
        uint64_t v15 = 2;
        do
        {
          int v16 = *(_DWORD *)(v14 + 4 * v15);
          if (v16 <= 0)
          {
            int v16 = 1;
            *(_DWORD *)(v14 + 4 * v15) = 1;
            LODWORD(v5) = *a2;
          }
          BOOL v17 = v15 == 2 || v15 == v5 + 1;
          if (v17) {
            int v18 = 0;
          }
          else {
            int v18 = v16;
          }
          v10 += v18;
          if (!v17) {
            int v16 = 0;
          }
          v11 += v16;
          BOOL v9 = v15++ <= (int)v5;
        }
        while (v9);
      }
      else
      {
        if ((int)v5 >= 1)
        {
          uint64_t v7 = *((void *)a4 + 2);
          uint64_t v8 = 2;
          do
          {
            *(_DWORD *)(v7 + 4 * v8) = 1;
            BOOL v9 = v8++ <= *a2;
          }
          while (v9);
          LODWORD(v5) = *a2;
        }
        int v10 = v5 - 2;
        int v11 = 2;
      }
      a4[6] = v11;
      if ((int)v5 >= 3)
      {
        float v19 = (float)(v6 - v11) / (float)v10;
        uint64_t v20 = *((void *)a4 + 2);
        uint64_t v21 = 3;
        do
        {
          if (v21 >= (int)v5) {
            int v22 = v6 - v11;
          }
          else {
            int v22 = (int)(float)(v19 * (float)*(int *)(v20 + 4 * v21));
          }
          *(_DWORD *)(v20 + 4 * v21) = v22;
          if (v22 <= 0)
          {
            int v22 = 1;
            *(_DWORD *)(v20 + 4 * v21) = 1;
          }
          int v11 = a4[6] + v22;
          a4[6] = v11;
          uint64_t v5 = *a2;
          BOOL v9 = v21++ < v5;
        }
        while (v9);
      }
    }
  }
  return result;
}

uint64_t AddBreakMarks_1(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = *(const char **)(a3 + 80);
  uint64_t result = strcmp(v6, "PHRASE");
  if (result)
  {
    uint64_t result = strcmp(v6, "WORD");
    if (result)
    {
      uint64_t result = strcmp(v6, "SYLLABLE");
      if (result)
      {
        uint64_t result = strcmp(v6, "TIME");
        if (result)
        {
          uint64_t result = strcmp(v6, "NONE");
          if (result)
          {
            uint64_t v13 = *(void *)a1;
            return MFS__log_select_Error(v13, 58019, (uint64_t)"valid breaker is required\n", v8, v9, v10, v11, v12);
          }
        }
        else
        {
          uint64_t v26 = *(unsigned int *)(a1 + 608);
          if ((int)v26 >= 1)
          {
            uint64_t v27 = 0;
            int v28 = 0;
            int v29 = *(_DWORD *)(a3 + 88);
            int v30 = *a2;
            uint64_t v31 = *(void *)(a1 + 600);
            int v32 = v29;
            int v33 = 0;
            do
            {
              if (v30 >= 1)
              {
                uint64_t result = *(void *)(v31 + 528 * v27 + 16) + 8;
                uint64_t v34 = (v30 + 2) - 2;
                int v33 = v28;
                do
                {
                  int v35 = *(_DWORD *)result;
                  result += 4;
                  v33 += v35;
                  --v34;
                }
                while (v34);
              }
              if (v33 > v32)
              {
                int v32 = v28 + v29;
                uint64_t v36 = v31 + 528 * v27;
                uint64_t result = *(_DWORD *)(v36 + 4) | 2u;
                *(_DWORD *)(v36 + 4) = result;
              }
              ++v27;
              int v28 = v33;
            }
            while (v27 != v26);
          }
        }
      }
      else
      {
        int v22 = *(_DWORD *)(a1 + 608);
        if (v22 >= 3)
        {
          uint64_t v23 = (v22 - 2);
          uint64_t v24 = *(int **)(a1 + 600);
          uint64_t v25 = *(void *)(*(void *)(a1 + 8) + 112);
          do
          {
            if (*(unsigned char *)(v25 + *v24)) {
              v24[133] |= 2u;
            }
            v24 += 132;
            --v23;
          }
          while (v23);
        }
      }
    }
    else
    {
      int v18 = *(_DWORD *)(a1 + 608);
      if (v18 >= 3)
      {
        uint64_t v19 = (v18 - 2);
        uint64_t v20 = *(int **)(a1 + 600);
        uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 112);
        do
        {
          if ((*(unsigned char *)(v21 + *v20) & 0xFE) == 2) {
            v20[133] |= 2u;
          }
          v20 += 132;
          --v19;
        }
        while (v19);
      }
    }
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 608);
    if (v14 >= 3)
    {
      uint64_t v15 = (v14 - 2);
      int v16 = *(int **)(a1 + 600);
      uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 112);
      do
      {
        if (*(unsigned char *)(v17 + *v16) == 3) {
          v16[133] |= 2u;
        }
        v16 += 132;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t OutLabel_2(uint64_t result)
{
  if (*(int *)(result + 608) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 600) + v2;
      uint64_t result = MFS__log_select_Diag(*(void *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 528;
    }
    while (v3 < *(int *)(v1 + 608));
  }
  return result;
}

uint64_t ParamGenLT_1(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)a1;
  memset(v174, 0, sizeof(v174));
  memset(v173, 0, sizeof(v173));
  MFS__log_select_Diag(v6, 1, (uint64_t)"-%s\n");
  bzero(v175, 0x2D8uLL);
  BET3FLT__InitSMatrices(v6, v174);
  BET3FLT__InitSMatrices(v6, v173);
  if (a3)
  {
    heap_Free(*(void **)(v6 + 8), *(void *)(a1 + 48));
    *(void *)(a1 + 48) = 0;
    heap_Free(*(void **)(v6 + 8), *(void *)(a1 + 40));
    *(void *)(a1 + 40) = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      do
      {
        if (!*(_DWORD *)(v8 + 1480)) {
          *(_DWORD *)(v8 + 44) = 0;
        }
        v8 += 1528;
        --v7;
      }
      while (v7);
    }
  }
  unsigned int v151 = -2065686518;
  uint64_t v9 = heap_Calloc(*(void **)(v6 + 8), (*(_DWORD *)(a1 + 624) + 1), 1);
  *(void *)(a1 + 48) = v9;
  if (v9)
  {
    uint64_t v10 = heap_Calloc(*(void **)(v6 + 8), (*(_DWORD *)(a1 + 624) + 1), 4);
    *(void *)(a1 + 40) = v10;
    if (v10)
    {
      int v11 = *(_DWORD *)(a1 + 608);
      if (v11 < 1)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        int v14 = *a2;
        do
        {
          if (v14 >= 1)
          {
            uint64_t v15 = *(void *)(a1 + 600) + 528 * v12;
            uint64_t v18 = *(void *)(v15 + 16);
            int v16 = (uint64_t *)(v15 + 16);
            uint64_t v17 = v18;
            uint64_t v19 = v16 + 37;
            uint64_t v20 = 2;
            do
            {
              if (*(int *)(v17 + 4 * v20) >= 1)
              {
                uint64_t v13 = (int)v13;
                int v21 = 1;
                do
                {
                  *(unsigned char *)(*(void *)(a1 + 48) + v13) = *(unsigned char *)(*v19 + v20);
                  *(_DWORD *)(*(void *)(a1 + 40) + 4 * v13) = *(_DWORD *)(v16[38] + 4 * v20);
                  uint64_t v22 = *(unsigned int *)(a1 + 32);
                  if ((int)v22 >= 1)
                  {
                    uint64_t v23 = *(_DWORD **)(a1 + 24);
                    do
                    {
                      if (v23[372] && ((1 << v23[3]) & (unint64_t)*(unsigned __int8 *)(*v19 + v20)) >> v23[3]) {
                        ++v23[11];
                      }
                      v23 += 382;
                      --v22;
                    }
                    while (v22);
                  }
                  ++v13;
                  uint64_t v17 = *v16;
                  BOOL v76 = v21++ < *(_DWORD *)(*v16 + 4 * v20);
                }
                while (v76);
                int v14 = *a2;
              }
              BOOL v76 = v20++ <= v14;
            }
            while (v76);
            int v11 = *(_DWORD *)(a1 + 608);
          }
          ++v12;
        }
        while (v12 < v11);
      }
      if (*(int *)(a1 + 32) < 1)
      {
        unsigned int v151 = 0;
        goto LABEL_136;
      }
      float v147 = a2;
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      unsigned int v151 = 0;
      unsigned int v161 = a3;
      while (1)
      {
        uint64_t v26 = *(void *)(a1 + 24);
        uint64_t v27 = v26 + 1528 * v24;
        int v28 = (uint64_t *)(v27 + 24);
        uint64_t v156 = v24;
        float v144 = (uint64_t *)(v27 + 24);
        uint64_t v148 = v26;
        uint64_t v150 = v13;
        if (!*(_DWORD *)(v27 + 1484)) {
          goto LABEL_79;
        }
        uint64_t v29 = v26 + 1528 * v24;
        *(_DWORD *)(v29 + 44) = v13;
        float v149 = (unsigned int *)(v29 + 44);
        *(_DWORD *)(v29 + 772) = v13;
        unsigned int inited = BET3FLT__InitPStreamParam(v28, 0);
        if ((inited & 0x80000000) != 0)
        {
LABEL_135:
          unsigned int v151 = inited;
          goto LABEL_136;
        }
        unsigned int v151 = BET3FLT__InitPStreamSM(v28, 0);
        if ((v151 & 0x80000000) != 0) {
          goto LABEL_136;
        }
        uint64_t v31 = v26 + 1528 * v24;
        int v33 = *(_DWORD *)(v31 + 40);
        int v32 = (int *)(v31 + 40);
        if (v33 < 1) {
          goto LABEL_79;
        }
        uint64_t v34 = 0;
        int v35 = (uint64_t *)(v149 + 177);
        uint64_t v36 = v26 + 1528 * v156;
        uint64_t v37 = (int **)(v36 + 784);
        BOOL v163 = (void *)(v36 + 96);
        uint64_t v165 = 0;
        int v162 = (void *)(v36 + 824);
        int v167 = (void *)(v36 + 832);
        float v169 = (void *)(v36 + 104);
        uint64_t v38 = (_DWORD *)(v36 + 872);
        uint64_t v39 = (_DWORD *)(v36 + 1072);
        float v40 = (_DWORD *)(v36 + 1272);
        float v145 = (uint64_t **)(v36 + 64);
        float v146 = (int ***)(v36 + 792);
        int v152 = v149 + 177;
        float v171 = v32;
        do
        {
          uint64_t v158 = v34;
          unsigned int inited = BET3FLT__InitPStreamParam(v35, (uint64_t)v175);
          if ((inited & 0x80000000) != 0) {
            goto LABEL_135;
          }
          unsigned int v151 = BET3FLT__InitPStreamSM(v35, (uint64_t)v173);
          if ((v151 & 0x80000000) != 0) {
            goto LABEL_136;
          }
          uint64_t v155 = *(unsigned int *)(a1 + 608);
          if ((int)v155 < 1)
          {
            uint64_t v150 = 0;
LABEL_69:
            uint64_t v79 = v158;
            goto LABEL_70;
          }
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v153 = *(void *)(a1 + 600);
          uint64_t v43 = v148 + 1528 * v156 + 4 * v158;
          unint64_t v44 = (_DWORD *)(v43 + 144);
          uint64_t v45 = (_DWORD *)(v43 + 344);
          int v46 = (_DWORD *)(v43 + 544);
          int v154 = *v147;
          uint64_t v159 = (*v147 + 2);
          do
          {
            uint64_t v157 = v41;
            if (v154 >= 1)
            {
              uint64_t v47 = v153 + 528 * v41;
              uint64_t v48 = *(void *)(v47 + 16);
              unsigned int v49 = (unsigned char *)(v47 + 4);
              uint64_t v50 = v47 + 8 * v156;
              uint64_t v51 = (void *)(v50 + 152);
              uint64_t v52 = (void *)(v50 + 232);
              uint64_t v53 = 2;
              while (1)
              {
                int v54 = *(_DWORD *)(v48 + 4 * v53);
                if (v54 >= 1) {
                  break;
                }
LABEL_55:
                if (++v53 == v159) {
                  goto LABEL_56;
                }
              }
              uint64_t v42 = (int)v42;
              int v55 = 1;
              while (1)
              {
                if (a3 > 1)
                {
                  uint64_t v56 = (unsigned int *)*v37;
                  if ((*v49 & 4) == 0)
                  {
                    uint64_t v57 = *v56;
                    if ((int)v57 >= 1)
                    {
                      uint64_t v58 = v165;
                      uint64_t v59 = *(void *)(*v163 + 8 * v42);
                      uint64_t v60 = *(_DWORD **)(*v162 + 8 * v42);
                      uint64_t v61 = *(void *)(*v169 + 8 * v42);
                      uint64_t v62 = *(_DWORD **)(*v167 + 8 * v42);
                      uint64_t v63 = 4 * *v171;
                      do
                      {
                        *(_DWORD *)(v59 + v58) = 0;
                        *v60++ = 0;
                        *(_DWORD *)(v61 + v58) = 1065353216;
                        v58 += v63;
                        *v62++ = 1065353216;
                        --v57;
                      }
                      while (v57);
                    }
                    goto LABEL_53;
                  }
                }
                else
                {
                  uint64_t v56 = (unsigned int *)*v37;
                }
                uint64_t v64 = *v56;
                if ((int)v64 >= 1)
                {
                  uint64_t v65 = *(void *)(*v51 + 8 * v53);
                  uint64_t v66 = *(void *)(*v163 + 8 * v42);
                  float v67 = *(_DWORD **)(*v162 + 8 * v42);
                  uint64_t v68 = *(void *)(*v52 + 8 * v53);
                  uint64_t v69 = *(void *)(*v169 + 8 * v42);
                  uint64_t v70 = 4 * *v171;
                  uint64_t v71 = v165;
                  int v72 = *(_DWORD **)(*v167 + 8 * v42);
                  do
                  {
                    int v73 = *(_DWORD *)(v65 + v71);
                    *(_DWORD *)(v66 + v71) = v73;
                    *v67++ = v73;
                    int v74 = *(_DWORD *)(v68 + v71);
                    *(_DWORD *)(v69 + v71) = v74;
                    *v72++ = v74;
                    *uint64_t v38 = *v44;
                    *uint64_t v39 = *v45;
                    *float v40 = *v46;
                    v71 += v70;
                    --v64;
                  }
                  while (v64);
                }
LABEL_53:
                ++v42;
                BOOL v75 = v55++ == v54;
                if (v75) {
                  goto LABEL_55;
                }
              }
            }
LABEL_56:
            uint64_t v41 = v157 + 1;
          }
          while (v157 + 1 != v155);
          if (*(_DWORD *)(*(void *)(a1 + 24) + 1528 * v156 + 1492)) {
            BOOL v76 = 1;
          }
          else {
            BOOL v76 = (int)v42 < 1;
          }
          uint64_t v150 = v42;
          if (v76) {
            goto LABEL_69;
          }
          uint64_t v77 = 0;
          uint64_t v160 = v42;
          LODWORD(v78) = **v37;
          uint64_t v79 = v158;
          uint64_t v80 = v169;
          do
          {
            if ((int)v78 >= 1)
            {
              uint64_t v81 = 0;
              uint64_t v82 = *(void *)(*v80 + 8 * v77);
              do
              {
                uint64_t v83 = v79 + *v171 * (uint64_t)(int)v81;
                float v84 = BET3FLT__bet3_finv(*(float *)(v82 + 4 * v83));
                uint64_t v80 = v169;
                uint64_t v79 = v158;
                uint64_t v82 = *(void *)(*v169 + 8 * v77);
                *(float *)(v82 + 4 * v83) = v84;
                *(float *)(*(void *)(*v167 + 8 * v77) + 4 * v81++) = v84;
                uint64_t v78 = **v37;
              }
              while (v81 < v78);
              a3 = v161;
            }
            ++v77;
          }
          while (v77 != v160);
LABEL_70:
          uint64_t v85 = *(void *)(a1 + 24);
          if (a3)
          {
            (*(void (**)(void *, void))(*(void *)(v85 + 1528 * v156 + 1512) + 8 * v79))(v152, 0);
            uint64_t v86 = *v149;
            if ((int)v86 >= 1)
            {
              uint64_t v87 = *v146;
              float v88 = *v145;
              do
              {
                float v89 = *v87++;
                int v90 = *v89;
                uint64_t v91 = *v88++;
                *(_DWORD *)(v91 + 4 * v158) = v90;
                --v86;
              }
              while (v86);
            }
          }
          else
          {
            (*(void (**)(void *, void))(*(void *)(v85 + 1528 * v156 + 1504) + 8 * v79))(v152, 0);
            uint64_t v92 = *v149;
            if ((int)v92 >= 1)
            {
              uint64_t v93 = *v146;
              uint64_t v94 = *v145;
              do
              {
                uint64_t v95 = *v93++;
                int v96 = *v95;
                uint64_t v97 = *v94++;
                *(_DWORD *)(v97 + 4 * v158) = v96;
                --v92;
              }
              while (v92);
            }
          }
          BET3FLT__FreePStreamSM((uint64_t)v152);
          BET3FLT__FreePStreamParam(v152);
          int v35 = (uint64_t *)(v149 + 177);
          uint64_t v34 = v158 + 1;
          v165 += 4;
        }
        while (v158 + 1 < *v171);
LABEL_79:
        uint64_t v98 = v156;
        if (!*(_DWORD *)(*(void *)(a1 + 24) + 1528 * v156 + 1488) || !*(_DWORD *)(v148 + 1528 * v156 + 44))
        {
          uint64_t v101 = v150;
          goto LABEL_130;
        }
        unsigned int inited = BET3FLT__InitPStreamParam(v144, 0);
        if ((inited & 0x80000000) != 0) {
          goto LABEL_135;
        }
        unsigned int v151 = BET3FLT__InitPStreamSM(v144, 0);
        if ((v151 & 0x80000000) != 0) {
          goto LABEL_136;
        }
        uint64_t v168 = *(unsigned int *)(a1 + 608);
        if ((int)v168 < 1)
        {
          uint64_t v101 = 0;
          goto LABEL_130;
        }
        uint64_t v99 = 0;
        int v100 = 0;
        uint64_t v101 = 0;
        uint64_t v164 = *(void *)(a1 + 600);
        uint64_t v102 = v148 + 1528 * v156;
        uint64_t v103 = v102 + 56;
        uint64_t v104 = (uint64_t *)(v102 + 96);
        float v105 = (uint64_t *)(v102 + 104);
        int v166 = *v147;
        uint64_t v172 = (*v147 + 2);
LABEL_85:
        uint64_t v170 = v99;
        if (v166 < 1) {
          goto LABEL_115;
        }
        uint64_t v106 = v164 + 528 * v99;
        uint64_t v107 = *(void *)(v106 + 16);
        char v108 = (unsigned char *)(v106 + 4);
        uint64_t v109 = v106 + 8 * v98;
        char v110 = (void *)(v109 + 152);
        float v111 = (void *)(v109 + 232);
        uint64_t v112 = 2;
LABEL_87:
        int v113 = *(_DWORD *)(v107 + 4 * v112);
        if (v113 < 1) {
          goto LABEL_114;
        }
        uint64_t v114 = *(void *)(a1 + 24) + 1528 * v98;
        uint64_t v115 = *(unsigned int *)(v114 + 36);
        uint64_t v116 = *(void *)(a1 + 48);
        int v117 = *(_DWORD *)(v114 + 12);
        int v118 = 1;
        uint64_t v119 = 1 << v117;
        uint64_t v120 = (int)v101;
        uint64_t v121 = (1 << v117);
LABEL_89:
        if ((int)v115 >= 1) {
          break;
        }
LABEL_109:
        if ((unint64_t)(v119 & *(unsigned char *)(v116 + v120)) >> v117) {
          ++v100;
        }
        ++v120;
        LODWORD(v101) = v101 + 1;
        BOOL v75 = v118++ == v113;
        if (!v75) {
          goto LABEL_89;
        }
        uint64_t v101 = v120;
        uint64_t v98 = v156;
LABEL_114:
        if (++v112 != v172) {
          goto LABEL_87;
        }
LABEL_115:
        ++v99;
        if (v170 + 1 != v168) {
          goto LABEL_85;
        }
        uint64_t v134 = *(void *)(a1 + 24);
        if (*(_DWORD *)(v134 + 1528 * v98 + 1492)) {
          BOOL v135 = 1;
        }
        else {
          BOOL v135 = v100 < 1;
        }
        if (!v135)
        {
          uint64_t v136 = 0;
          do
          {
            if (*(int *)(v134 + 1528 * v156 + 36) >= 1)
            {
              uint64_t v137 = 0;
              uint64_t v138 = *(void *)(*v105 + 8 * v136);
              do
              {
                float v139 = BET3FLT__bet3_finv(*(float *)(v138 + 4 * v137));
                uint64_t v138 = *(void *)(*v105 + 8 * v136);
                *(float *)(v138 + 4 * v137++) = v139;
                uint64_t v134 = *(void *)(a1 + 24);
              }
              while (v137 < *(int *)(v134 + 1528 * v156 + 36));
            }
            ++v136;
          }
          while (v136 != v100);
        }
        if (v100 < 1)
        {
          a3 = v161;
          uint64_t v98 = v156;
        }
        else
        {
          uint64_t v98 = v156;
          uint64_t v140 = v134 + 1528 * v156;
          float v141 = (void (***)(uint64_t *, void))(v140 + 1504);
          float v142 = (void (***)(uint64_t *, void))(v140 + 1512);
          a3 = v161;
          if (!v161) {
            float v142 = v141;
          }
          (**v142)(v144, 0);
        }
LABEL_130:
        uint64_t v24 = v98 + 1;
        uint64_t v13 = v101;
        if (v24 >= *(int *)(a1 + 32))
        {
LABEL_136:
          BET3FLT__FreePStreamParam(v175);
          BET3FLT__FreeSMatrices((uint64_t)v174);
          BET3FLT__FreeSMatrices((uint64_t)v173);
          MFS__log_select_Diag(v6, 1, (uint64_t)"+%s\n");
          return v151;
        }
      }
      uint64_t v122 = 0;
      uint64_t v123 = *(void *)(*(void *)v103 + 8);
      while (1)
      {
        v25 |= v121;
        float v124 = *(int **)(v123 + 8 * v122);
        int v125 = *v124;
        int v126 = v124[1];
        if (v125 <= v126)
        {
          int v127 = v126 - v125 + 1;
          unsigned int v128 = v101 + v125;
          do
          {
            uint64_t v129 = v121 ^ 0xFF;
            if ((v128 & 0x80000000) == 0)
            {
              uint64_t v129 = v121 ^ 0xFF;
              if (*(_DWORD *)(a1 + 624) >= (signed int)v128) {
                uint64_t v129 = *(unsigned __int8 *)(v116 + v128);
              }
            }
            v25 &= v129;
            ++v128;
            --v127;
          }
          while (v127);
        }
        if (!((unint64_t)(v119 & *(unsigned char *)(v116 + v120)) >> v117)) {
          goto LABEL_108;
        }
        if (!v122 || (v119 & v25) >> v117)
        {
          if (v161 <= 1)
          {
            uint64_t v132 = *v104;
            uint64_t v130 = *v105;
LABEL_106:
            uint64_t v133 = 4 * v122 + 4;
            *(_DWORD *)(*(void *)(v132 + 8 * v100) + 4 * v122) = *(_DWORD *)(*(void *)(*v110 + 8 * v112) + v133);
            float v131 = *(float *)(*(void *)(*v111 + 8 * v112) + v133);
            goto LABEL_107;
          }
          uint64_t v132 = *v104;
          uint64_t v130 = *v105;
          if ((*v108 & 4) != 0) {
            goto LABEL_106;
          }
          *(_DWORD *)(*(void *)(v132 + 8 * v100) + 4 * v122) = 0;
        }
        else
        {
          *(_DWORD *)(*(void *)(*v104 + 8 * v100) + 4 * v122) = 0;
          uint64_t v130 = *v105;
        }
        float v131 = 1.0;
LABEL_107:
        *(float *)(*(void *)(v130 + 8 * v100) + 4 * v122) = v131;
LABEL_108:
        if (++v122 == v115) {
          goto LABEL_109;
        }
      }
    }
  }
  return v151;
}

uint64_t mfs_ParamGen(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 48);
  MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"mfs_ParamGen {\n");
  uint64_t v147 = a3;
  if (*(_DWORD *)(a3 + 8328) && *(_DWORD *)(a3 + 8564))
  {
    uint64_t v140 = a4;
    uint64_t v142 = v7;
    if (!*(_DWORD *)(a1 + 2588)) {
      BackupDurations(a1, a2);
    }
    if (!*(_DWORD *)(a1 + 2200))
    {
      MFS__log_select_Diag(v7, 1, (uint64_t)"mfs_ParamGen:: Not skipping second pass (early emission mode)\n");
      uint64_t v145 = *(void *)(a1 + 1928);
      int v9 = *(_DWORD *)(a1 + 2232);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 2224) + 28 * (v9 - 1);
        int v11 = *(_DWORD *)(v10 + 12) + *(_DWORD *)(v10 + 8);
      }
      else
      {
        int v11 = 0;
      }
      MFS__log_select_Diag(v145, 1, (uint64_t)"  -> UpdateStateDurations (early emission mode)\n");
      unsigned int v55 = *(_DWORD *)(a1 + 2588);
      int v56 = v55 / *a2;
      if (v56 < *(_DWORD *)(a1 + 608))
      {
        int v57 = v55 % *a2 + 2;
        uint64_t v58 = v56;
        while (1)
        {
          uint64_t v139 = v58;
          uint64_t v59 = *(void *)(a1 + 600);
          LODWORD(v60) = *a2;
          int v61 = *a2 + 2;
          if (v57 >= v61)
          {
            int v62 = 0;
            int v67 = v57;
          }
          else
          {
            int v62 = 0;
            uint64_t v138 = *(void *)(a1 + 600);
            uint64_t v63 = v59 + 528 * v139;
            uint64_t v64 = (void *)(v63 + 16);
            uint64_t v65 = (_DWORD *)(v63 + 4);
            uint64_t v66 = v57;
            int v67 = v57;
            do
            {
              int TemplateDur = mfs_UnitSequence_GetTemplateDur(a1 + 2112, *(void *)(a1 + 1928), v55);
              if (TemplateDur)
              {
                *(_DWORD *)(*v64 + 4 * v66) = TemplateDur;
              }
              else
              {
                *v65 |= 4u;
                int v62 = 1;
              }
              unsigned int v69 = *(_DWORD *)(a1 + 2588);
              if (v69 < *(_DWORD *)(a1 + 2584))
              {
                *(_DWORD *)(a1 + 2588) = v69 + 1;
                ++v67;
              }
              ++v66;
              uint64_t v60 = *a2;
              int v61 = v60 + 2;
              ++v55;
            }
            while (v66 < v60 + 2);
            uint64_t v59 = v138;
          }
          if (v57 == 2)
          {
            if (*(_DWORD *)(v147 + 8256)) {
              BOOL v70 = v62 == 0;
            }
            else {
              BOOL v70 = 1;
            }
            if (!v70)
            {
              if (v61 < 3)
              {
                int v71 = 0;
              }
              else
              {
                int v71 = 0;
                uint64_t v72 = v59 + 528 * v139;
                int v73 = (void *)(v72 + 328);
                int v74 = (void *)(v72 + 16);
                uint64_t v75 = 4 * v61;
                uint64_t v76 = 8;
                do
                {
                  if (v76 != 12) {
                    int v71 = *(_DWORD *)(*v73 + v76) + v71 - *(_DWORD *)(*v74 + v76);
                  }
                  v76 += 4;
                }
                while (v75 != v76);
              }
              uint64_t v77 = *(void *)(v59 + 528 * v139 + 16);
              int v78 = *(_DWORD *)(v77 + 12);
              if (v78 + v71 < 0 != __OFADD__(v78, v71)) {
                int v71 = 1 - v78;
              }
              *(_DWORD *)(v77 + 12) = v71 + v78;
              LODWORD(v60) = *a2;
            }
            if ((int)v60 < 1)
            {
              int v79 = 0;
            }
            else
            {
              int v79 = 0;
              uint64_t v80 = (v60 + 2) - 2;
              uint64_t v81 = (int *)(*(void *)(v59 + 528 * v139 + 16) + 8);
              do
              {
                int v82 = *v81++;
                v79 += v82;
                --v80;
              }
              while (v80);
            }
            uint64_t v83 = v59 + 528 * v139;
            *(_DWORD *)(a1 + 624) += v79 - *(_DWORD *)(v83 + 24);
            *(_DWORD *)(v83 + 24) = v79;
            MFS__log_select_Diag(v145, 5, (uint64_t)"syntheval:Phoneme %d has duration %d\n");
            MFS__log_select_Diag(v145, 5, (uint64_t)"At phoneme %d output we have totalframe %d\n");
          }
          if (v57 < v67) {
            break;
          }
          uint64_t v84 = v139;
LABEL_90:
          if (*(_DWORD *)(a1 + 2588) != *(_DWORD *)(a1 + 2584))
          {
            uint64_t v58 = v84 + 1;
            int v57 = 2;
            if (v58 < *(int *)(a1 + 608)) {
              continue;
            }
          }
          goto LABEL_92;
        }
        uint64_t v84 = v139;
        uint64_t v85 = (void *)(v59 + 528 * v139 + 16);
        uint64_t v86 = v147;
        uint64_t v87 = 4 * v57;
        while (1)
        {
          MFS__log_select_Diag(v145, 5, (uint64_t)"Adding parametric segment %d (uttph%d,st%d) unitid %d  offset %d  dur %d\n");
          if ((mfs_SegmentList_Add(a1 + 2208, -1, *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 32) + v139), v11, *(_DWORD *)(v86 + 24) * *(_DWORD *)(*v85 + v87)) & 0x80000000) != 0)break; {
          uint64_t v86 = v147;
          }
          v11 += *(_DWORD *)(v147 + 24) * *(_DWORD *)(*v85 + v87);
          ++v57;
          v87 += 4;
          if (v67 == v57) {
            goto LABEL_90;
          }
        }
      }
    }
LABEL_92:
    uint64_t v7 = v142;
    _DWORD *v140 = 1;
    a3 = v147;
    goto LABEL_93;
  }
  uint64_t v12 = 2229280775;
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a1 + 24);
    int v16 = -1;
    do
    {
      int v17 = *(_DWORD *)(v15 + 12);
      if (v17 == 2)
      {
        uint64_t v14 = v15;
      }
      else if (v17 == 1)
      {
        int v16 = *(_DWORD *)(v15 + 44);
      }
      v15 += 1528;
      --v13;
    }
    while (v13);
    if (v16 != -1 && v14)
    {
      MFS__log_select_Diag(v7, 1, (uint64_t)"s32NumFrames as measured in mfsengine.c is %d\n");
      uint64_t v18 = heap_Calloc(*(void **)(v7 + 8), v16, 4);
      *(void *)(a1 + 2648) = v18;
      if (!v18) {
        return 2229280778;
      }
      float v141 = a4;
      if (v16 >= 1)
      {
        uint64_t v19 = 0;
        int v20 = 0;
        do
        {
          float v21 = 0.0;
          if ((*(unsigned char *)(v8 + v19) & 4) != 0)
          {
            float v22 = *(float *)(a3 + 48);
            float v23 = exp(**(float **)(*(void *)(v14 + 64) + 8 * v20));
            float v21 = *(float *)(a3 + 52) + (float)(v22 * v23);
            ++v20;
          }
          MFS__log_select_Diag(v7, 10, (uint64_t)"At frame %d, model trajectory F0 is %.6f\n");
          *(float *)(*(void *)(a1 + 2648) + 4 * v19++) = v21;
        }
        while (v16 != v19);
      }
      BET3FLT__FreePStreamParam((void *)(v14 + 24));
      *float v141 = 1;
      uint64_t v24 = *(unsigned int *)(a1 + 32);
      if ((int)v24 >= 1)
      {
        unint64_t v25 = *(_DWORD **)(a1 + 24);
        do
        {
          if (!v25[370]) {
            *unint64_t v25 = 0;
          }
          v25 += 382;
          --v24;
        }
        while (v24);
      }
      BackupDurations(a1, a2);
      if (!*(_DWORD *)(a1 + 2200))
      {
        uint64_t v143 = v7;
        MFS__log_select_Diag(v7, 1, (uint64_t)"mfs_ParamGen:: Not skipping second pass\n");
        uint64_t v146 = *(void *)(a1 + 1928);
        MFS__log_select_Diag(v146, 1, (uint64_t)"  -> UpdateStateDurations\n");
        *(_DWORD *)(a1 + 624) = 0;
        if (*(int *)(a1 + 608) >= 1)
        {
          uint64_t v89 = 0;
          int v90 = 0;
          do
          {
            uint64_t v91 = *(void *)(a1 + 600);
            uint64_t v92 = v91 + 528 * v89;
            *(_DWORD *)(v92 + 24) = 0;
            uint64_t v93 = (int *)(v92 + 24);
            if (*a2 < 1)
            {
              int v101 = 0;
            }
            else
            {
              int v94 = 0;
              uint64_t v95 = v91 + 528 * v89;
              int v96 = (uint64_t *)(v95 + 16);
              uint64_t v97 = (_DWORD *)(v95 + 4);
              uint64_t v98 = 2;
              do
              {
                int v99 = mfs_UnitSequence_GetTemplateDur(a1 + 2112, *(void *)(a1 + 1928), v90 + (int)v98 - 2);
                if (v99)
                {
                  uint64_t v100 = *v96;
                  *(_DWORD *)(*v96 + 4 * v98) = v99;
                }
                else
                {
                  *v97 |= 4u;
                  uint64_t v100 = *v96;
                  int v99 = *(_DWORD *)(*v96 + 4 * v98);
                  int v94 = 1;
                }
                int v101 = *v93 + v99;
                *uint64_t v93 = v101;
                ++v98;
                uint64_t v102 = *a2;
              }
              while (v98 < v102 + 2);
              a3 = v147;
              if (*(_DWORD *)(v147 + 8256) && v94)
              {
                int v103 = 0;
                if ((int)v102 >= 1)
                {
                  uint64_t v104 = 8;
                  do
                  {
                    if (v104 != 12) {
                      int v103 = *(_DWORD *)(*(void *)(v91 + 528 * v89 + 328) + v104) + v103 - *(_DWORD *)(v100 + v104);
                    }
                    v104 += 4;
                  }
                  while (4 * (v102 + 2) != v104);
                }
                int v105 = *(_DWORD *)(v100 + 12);
                if (v105 + v103 < 0 != __OFADD__(v105, v103)) {
                  int v103 = 1 - v105;
                }
                *(_DWORD *)(v100 + 12) = v103 + v105;
                int v101 = v103 + *v93;
                *uint64_t v93 = v101;
                int v90 = v90 + v98 - 2;
              }
              else
              {
                int v90 = v90 + v98 - 2;
              }
            }
            *(_DWORD *)(a1 + 624) += v101;
            MFS__log_select_Diag(v146, 5, (uint64_t)"syntheval:Phoneme %d has duration %d\n");
            MFS__log_select_Diag(v146, 5, (uint64_t)"At phoneme %d output we have totalframe %d\n");
            ++v89;
          }
          while (v89 < *(int *)(a1 + 608));
        }
        uint64_t v106 = *(unsigned int *)(a1 + 2272);
        float v107 = 0.0;
        if ((int)v106 >= 1)
        {
          uint64_t v108 = 0;
          int v109 = 0;
          int v110 = 0;
          float v111 = *(_DWORD **)(a1 + 2264);
          do
          {
            if (*v111 == -1)
            {
              int v112 = *(_DWORD *)(a3 + 24)
                   * *(_DWORD *)(*(void *)(*(void *)(a1 + 600) + 528 * ((int)v108 / *a2) + 16)
                               + 4 * ((int)v108 % *a2 + 2));
              v110 += v112;
            }
            else
            {
              int v112 = v111[3];
            }
            v109 += v112;
            ++v108;
            v111 += 7;
          }
          while (v106 != v108);
          if (v109)
          {
            float v107 = (float)v110 / (float)v109;
            if (v107 > 0.89) {
              float v107 = 1.0;
            }
          }
        }
        uint64_t v113 = *(unsigned int *)(a1 + 32);
        uint64_t v7 = v143;
        if ((int)v113 >= 1)
        {
          uint64_t v114 = 0;
          uint64_t v115 = *(void *)(a1 + 24);
          uint64_t v116 = v115;
          do
          {
            if (!*(_DWORD *)(v115 + 1528 * v114 + 1480))
            {
              uint64_t v117 = *(unsigned int *)(v115 + 1528 * v114 + 40);
              if ((int)v117 >= 1)
              {
                uint64_t v118 = v116;
                do
                {
                  *(float *)(v118 + 144) = (float)((float)(1.0 - v107) * *(float *)(v118 + 544))
                                         + (float)(*(float *)(v118 + 144) * v107);
                  v118 += 4;
                  --v117;
                }
                while (v117);
              }
            }
            ++v114;
            v116 += 1528;
          }
          while (v114 != v113);
        }
        if ((*(_DWORD *)(a3 + 8968) - 7) >= 5 && !*(_DWORD *)(a3 + 8328))
        {
          if ((int)v113 >= 1)
          {
            uint64_t v119 = *(void *)(a1 + 24);
            do
            {
              *(_DWORD *)(v119 + 16) = *(_DWORD *)(v119 + 1480) == 0;
              v119 += 1528;
              --v113;
            }
            while (v113);
          }
          UpdateStreamDurations((uint64_t *)a1, a2);
          uint64_t v120 = FetchAndFillInTemplateParameters((unsigned __int8 *)a2, a3, a1, 1);
          if ((v120 & 0x80000000) != 0) {
            return v120;
          }
        }
        FreeRemainingStreams(a1);
        if (*(int *)(a1 + 32) >= 1)
        {
          uint64_t v121 = 0;
          uint64_t v122 = 24;
          do
          {
            BET3FLT__FreePStreamParam((void *)(*(void *)(a1 + 24) + v122));
            ++v121;
            v122 += 1528;
          }
          while (v121 < *(int *)(a1 + 32));
        }
        uint64_t v120 = ParamGenLT_1(a1, a2, 1u);
        if ((v120 & 0x80000000) != 0) {
          return v120;
        }
        if ((*(_DWORD *)(a3 + 8968) - 7) < 5 || *(_DWORD *)(a3 + 8328)) {
          goto LABEL_29;
        }
        uint64_t v120 = FetchAndFillInTemplateParameters((unsigned __int8 *)a2, a3, a1, 0);
        if ((v120 & 0x80000000) != 0) {
          return v120;
        }
        if (*(int *)(a1 + 32) >= 1)
        {
          uint64_t v123 = 0;
          uint64_t v124 = *(void *)(a1 + 24);
          uint64_t v125 = 1480;
          do
          {
            if (!*(_DWORD *)(v124 + v125))
            {
              uint64_t v126 = v125 == 3008 ? v124 + 1552 : v124 + v125 - 1456;
              mlpg_cpy(v126);
              uint64_t v124 = *(void *)(a1 + 24);
              uint64_t v127 = *(void *)(v124 + v125 - 1344);
              if (v127)
              {
                heap_Free(*(void **)(v143 + 8), v127);
                uint64_t v124 = *(void *)(a1 + 24);
                *(void *)(v124 + v125 - 1344) = 0;
              }
            }
            ++v123;
            v125 += 1528;
          }
          while (v123 < *(int *)(a1 + 32));
        }
      }
LABEL_29:
      float v26 = *(float *)(a3 + 8840);
      uint64_t v27 = *(void *)(a1 + 24);
      if (v26 != 1.0)
      {
        uint64_t v28 = *(unsigned int *)(v27 + 1572);
        BOOL v29 = v26 == 0.0 || (int)v28 < 1;
        if (!v29)
        {
          uint64_t v30 = 0;
          uint64_t v31 = *(void *)(v27 + 1592);
          uint64_t v32 = *(unsigned int *)(v27 + 1568);
          float v33 = (float)(v32 - 1);
          float v34 = 0.0;
          float v35 = 0.0;
          float v36 = 0.0;
          float v37 = 0.0;
          do
          {
            if ((int)v32 >= 2)
            {
              for (uint64_t i = 1; i != v32; ++i)
              {
                float v37 = v37 + (float)(int)i;
                float v39 = *(float *)(*(void *)(v31 + 8 * v30) + 4 * i);
                float v36 = v36 + v39;
                float v35 = v35 + (float)(i * i);
                float v34 = v34 + (float)((float)(int)i * v39);
              }
            }
            if ((int)v32 >= 2)
            {
              uint64_t v41 = *(void *)(v31 + 8 * v30);
              for (uint64_t j = 1; j != v32; ++j)
              {
                float v40 = (float)((float)(v33 * v34) - (float)(v37 * v36))
                    / (float)((float)(v33 * v35) - (float)(v37 * v37));
                *(float *)(v41 + 4 * j) = (float)((float)((float)(v36 - (float)(v40 * v37)) / v33)
                                                + (float)((float)(int)j * v40))
                                        + (float)(v26
                                                * (float)(*(float *)(v41 + 4 * j)
                                                        - (float)((float)((float)(v36 - (float)(v40 * v37)) / v33)
                                                                + (float)((float)(int)j * v40))));
              }
            }
            ++v30;
          }
          while (v30 != v28);
        }
      }
      float v43 = *(float *)(a3 + 8844);
      uint64_t v44 = *(void *)(v27 + 3120);
      uint64_t v45 = *(unsigned int *)(v27 + 3100);
      if (v45)
      {
        if (v43 != 1.0 && v43 != 0.0)
        {
          float v46 = (float)(int)v45;
          float v47 = 1.0 / (float)(int)v45;
          if ((int)v45 >= 1)
          {
            uint64_t v48 = 0;
            float v49 = 0.0;
            float v50 = 0.0;
            float v51 = 0.0;
            float v52 = 0.0;
            do
            {
              float v52 = v52 + (float)(int)v48;
              float v53 = **(float **)(v44 + 8 * v48);
              float v51 = v51 + v53;
              float v50 = v50 + (float)(v48 * v48);
              float v49 = v49 + (float)((float)(int)v48++ * v53);
            }
            while (v45 != v48);
            int v54 = 1;
LABEL_162:
            if (v54)
            {
              uint64_t v128 = 0;
              float v129 = (float)((float)(v46 * v49) - (float)(v52 * v51)) / (float)((float)(v46 * v50) - (float)(v52 * v52));
              float v130 = v47 * (float)(v51 - (float)(v129 * v52));
              do
              {
                **(float **)(v44 + 8 * v128) = (float)(v130 + (float)((float)(int)v128 * v129))
                                             + (float)(v43
                                                     * (float)(**(float **)(v44 + 8 * v128)
                                                             - (float)(v130 + (float)((float)(int)v128 * v129))));
                ++v128;
              }
              while (v45 != v128);
            }
            goto LABEL_165;
          }
          int v54 = 0;
LABEL_161:
          float v52 = 0.0;
          float v51 = 0.0;
          float v50 = 0.0;
          float v49 = 0.0;
          goto LABEL_162;
        }
      }
      else if (v43 != 1.0 && v43 != 0.0)
      {
        int v54 = 0;
        float v46 = 0.0;
        float v47 = 3.4028e38;
        goto LABEL_161;
      }
LABEL_165:
      FreeRemainingStreams(a1);
      if (*(void *)(a1 + 2224)
        || (uint64_t v131 = *(void *)a1,
            MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"  -> GetParametricSegments\n"),
            int v132 = *(_DWORD *)(a1 + 608),
            v132 < 1))
      {
LABEL_93:
        uint64_t v12 = mfs_SegmentList_Merge((uint64_t *)(a1 + 2248), a1 + 2208, *(_DWORD *)(a3 + 25184), (uint64_t)a2, *(void *)(a1 + 1928));
        if ((v12 & 0x80000000) == 0) {
          MFS__log_select_Diag(v7, 1, (uint64_t)"}\n");
        }
        return v12;
      }
      uint64_t v133 = 0;
      int v134 = 0;
      uint64_t v12 = 0;
      LODWORD(v135) = *a2;
      uint64_t v144 = v7;
      do
      {
        if ((int)v135 >= 1)
        {
          uint64_t v136 = (void *)(*(void *)(a1 + 600) + 528 * v133 + 16);
          uint64_t v137 = 2;
          while (1)
          {
            MFS__log_select_Diag(v131, 5, (uint64_t)"Adding parametric segment %d (uttph%d,st%d) unitid %d  offset %d  dur %d\n");
            uint64_t v12 = mfs_SegmentList_Add(a1 + 2208, -1, *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 32) + v133), v134, *(_DWORD *)(a3 + 24) * *(_DWORD *)(*v136 + 4 * v137));
            if ((v12 & 0x80000000) != 0) {
              return v12;
            }
            v134 += *(_DWORD *)(a3 + 24) * *(_DWORD *)(*v136 + 4 * v137);
            uint64_t v135 = *a2;
            BOOL v29 = v137++ <= v135;
            if (!v29)
            {
              int v132 = *(_DWORD *)(a1 + 608);
              uint64_t v7 = v144;
              break;
            }
          }
        }
        ++v133;
      }
      while (v133 < v132);
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_93;
      }
    }
  }
  return v12;
}

uint64_t BackupDurations(uint64_t result, int *a2)
{
  unint64_t v2 = *(unsigned int *)(result + 608);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 600);
    int v5 = *a2;
    do
    {
      if ((v5 - 1) <= 0xFFFFFFFC)
      {
        uint64_t v6 = v4 + 528 * v3;
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = *(void *)(v6 + 328);
        unint64_t v9 = 2;
        do
        {
          *(_DWORD *)(v8 + 4 * v9) = *(_DWORD *)(v7 + 4 * v9);
          ++v9;
          int v5 = *a2;
        }
        while (v9 < (*a2 + 2));
        unint64_t v2 = *(unsigned int *)(result + 608);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t UpdateStreamDurations(uint64_t *a1, int *a2)
{
  uint64_t v4 = *a1;
  heap_Free(*(void **)(*a1 + 8), a1[6]);
  a1[6] = 0;
  heap_Free(*(void **)(v4 + 8), a1[5]);
  a1[5] = 0;
  uint64_t result = heap_Calloc(*(void **)(v4 + 8), (*((_DWORD *)a1 + 156) + 1), 1);
  a1[6] = result;
  if (result)
  {
    uint64_t result = heap_Calloc(*(void **)(v4 + 8), (*((_DWORD *)a1 + 156) + 1), 4);
    a1[5] = result;
    if (result)
    {
      uint64_t v6 = *((unsigned int *)a1 + 8);
      if ((int)v6 >= 1)
      {
        uint64_t v7 = (_DWORD *)(a1[3] + 44);
        do
        {
          if (*(v7 - 7)) {
            _DWORD *v7 = 0;
          }
          v7 += 382;
          --v6;
        }
        while (v6);
      }
      int v8 = *((_DWORD *)a1 + 152);
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        LODWORD(v10) = 0;
        int v11 = *a2;
        do
        {
          if (v11 >= 1)
          {
            uint64_t v12 = a1[75] + 528 * v9;
            uint64_t v15 = *(void *)(v12 + 16);
            uint64_t v13 = (uint64_t *)(v12 + 16);
            uint64_t v14 = v15;
            int v16 = v13 + 37;
            uint64_t v17 = 2;
            do
            {
              uint64_t result = *(unsigned int *)(v14 + 4 * v17);
              if ((int)result >= 1)
              {
                uint64_t v10 = (int)v10;
                int v18 = 1;
                do
                {
                  *(unsigned char *)(a1[6] + v10) = *(unsigned char *)(*v16 + v17);
                  *(_DWORD *)(a1[5] + 4 * v10) = *(_DWORD *)(v13[38] + 4 * v17);
                  uint64_t v19 = *((unsigned int *)a1 + 8);
                  if ((int)v19 >= 1)
                  {
                    int v20 = (_DWORD *)a1[3];
                    do
                    {
                      if (v20[4]
                        && (!v20[372] || ((1 << v20[3]) & (unint64_t)*(unsigned __int8 *)(*v16 + v17)) >> v20[3]))
                      {
                        ++v20[11];
                      }
                      v20 += 382;
                      --v19;
                    }
                    while (v19);
                  }
                  ++v10;
                  uint64_t result = (v18 + 1);
                  uint64_t v14 = *v13;
                  BOOL v21 = v18++ < *(_DWORD *)(*v13 + 4 * v17);
                }
                while (v21);
                int v11 = *a2;
              }
              BOOL v21 = v17++ <= v11;
            }
            while (v21);
            int v8 = *((_DWORD *)a1 + 152);
          }
          ++v9;
        }
        while (v9 < v8);
      }
    }
  }
  return result;
}

uint64_t FetchAndFillInTemplateParameters(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a3 + 1928);
  int v94 = 0;
  memset(v96, 0, sizeof(v96));
  memset(v95, 0, sizeof(v95));
  MFS__log_select_Diag(v8, 1, (uint64_t)"  -> FetchAndFillInTemplateParameters\n");
  if (*(_DWORD *)(a2 + 8328)) {
    return 2229280769;
  }
  uint64_t v10 = a2;
  int v90 = a1;
  memset(v97, 0, sizeof(v97));
  uint64_t v11 = *(unsigned int *)(a3 + 32);
  uint64_t v86 = a2;
  if ((int)v11 >= 1)
  {
    bzero(v96, 8 * v11);
    bzero(v95, 8 * v11);
    uint64_t v10 = a2;
    uint64_t v12 = 0;
    uint64_t v13 = a2 + 264;
    uint64_t v14 = 1480;
    do
    {
      uint64_t v15 = *(void *)(a3 + 24);
      if (!*(_DWORD *)(v15 + v14))
      {
        if (a4 == 1)
        {
          uint64_t v16 = v15 + v14 - 936;
          *(void *)(v16 + 192) = 0;
          *(_OWORD *)(v16 + 160) = 0u;
          *(_OWORD *)(v16 + 176) = 0u;
          *(_OWORD *)(v16 + 128) = 0u;
          *(_OWORD *)(v16 + 144) = 0u;
          *(_OWORD *)(v16 + 96) = 0u;
          *(_OWORD *)(v16 + 112) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          *(_OWORD *)(v16 + 80) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)uint64_t v16 = 0u;
          *(_OWORD *)(v16 + 16) = 0u;
          uint64_t v17 = (unsigned int *)(v15 + v14 - 1436);
          *((void *)v96 + v12) = BET3FLT__ddcalloc(*(void **)(v8 + 8), *v17, *(_DWORD *)(v13 + 4 * v12));
          int v18 = BET3FLT__ddcalloc(*(void **)(v8 + 8), *v17, *(_DWORD *)(v13 + 4 * v12));
          uint64_t v10 = a2;
          *((void *)v95 + v12) = v18;
        }
        uint64_t v19 = v15 + v14;
        int v20 = (uint64_t *)(v19 - 1344);
        uint64_t v21 = *(void *)(v19 - 1344);
        if (v21)
        {
          heap_Free(*(void **)(v8 + 8), v21);
          uint64_t v10 = a2;
          *int v20 = 0;
        }
        float v22 = (_DWORD *)(v19 - 1436);
        uint64_t v23 = *v22;
        if ((int)v23 >= 1)
        {
          uint64_t v24 = heap_Calloc(*(void **)(v8 + 8), v23, 1);
          uint64_t v10 = a2;
          *int v20 = v24;
        }
        *float v22 = 0;
        LODWORD(v11) = *(_DWORD *)(a3 + 32);
      }
      ++v12;
      v14 += 1528;
    }
    while (v12 < (int)v11);
  }
  uint64_t v84 = v8;
  int v25 = *(_DWORD *)(a3 + 608);
  if (v25 < 1)
  {
    unsigned int v83 = 0;
  }
  else
  {
    uint64_t v26 = 0;
    unsigned int v83 = 0;
    unsigned int v27 = 0;
    LODWORD(v28) = *(_DWORD *)v90;
    do
    {
      if ((int)v28 >= 1)
      {
        uint64_t v82 = v26;
        uint64_t v29 = *(void *)(a3 + 600) + 528 * v26;
        uint64_t v87 = (void *)(v29 + 16);
        uint64_t v88 = v29;
        uint64_t v30 = (void *)(v29 + 312);
        uint64_t v31 = 2;
        do
        {
          unsigned int v91 = v27;
          unsigned int TemplateId = mfs_UnitSequence_GetTemplateId(a3 + 2112, v27);
          if (TemplateId
            && (v93[0] = 0,
                v93[1] = 0,
                uint64_t v92 = v93,
                unsigned int v89 = TemplateId,
                mfs_getUnitDataFromMfsData(v90, TemplateId, (uint64_t *)&v92),
                *(_DWORD *)(*v87 + 4 * v31) == *((unsigned __int16 *)v92 + 4)))
          {
            uint64_t result = mfs_ParamMap_MapSection(v8, (uint64_t)v90, a3, v89, (uint64_t)v92, (uint64_t)v97, (uint64_t)&v94, v33);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            unsigned int v83 = result;
            uint64_t v85 = *(void *)a3;
            mfs_GetMsgName((uint64_t)v90, v89);
            MFS__log_select_Diag(v85, 3, (uint64_t)"%d mapping %s msg, offset %u dur %hu %d\n");
            int v34 = v94;
            if (v94 >= 1)
            {
              int v35 = 0;
              LODWORD(v36) = *(_DWORD *)(a3 + 32);
              do
              {
                if ((int)v36 >= 1)
                {
                  uint64_t v37 = 0;
                  uint64_t v38 = 544;
                  do
                  {
                    uint64_t v39 = *(void *)(a3 + 24);
                    if (*(_DWORD *)(v39 + 1528 * v37 + 1484))
                    {
                      uint64_t v40 = v86 + 4 * v37;
                      int v41 = *(_DWORD *)(v40 + 264);
                      uint64_t v42 = *(void *)(a3 + 24);
                      if (v41 >= 1)
                      {
                        uint64_t v43 = 0;
                        uint64_t v44 = (int *)(v40 + 264);
                        uint64_t v45 = v39 + 1528 * v37;
                        float v46 = (void *)(v45 + 96);
                        float v47 = (int *)(v45 + 44);
                        uint64_t v48 = (void *)(v45 + 64);
                        float v49 = (void *)(v45 + 104);
                        float v50 = (void *)(v45 + 136);
                        uint64_t v51 = 4 * v35 * v41;
                        do
                        {
                          if (a4 == 1)
                          {
                            float v52 = *(float *)(*((void *)v97 + v37) + v51 + 4 * v43);
                            uint64_t v53 = *v47;
                            *(float *)(*(void *)(*((void *)v95 + v37) + 8 * v53) + 4 * v43) = v52;
                            *(float *)(v39 + v38 + 4 * v43) = v52 + *(float *)(v39 + v38 + 4 * v43);
                            *(_DWORD *)(*(void *)(*((void *)v96 + v37) + 8 * v53) + 4 * v43) = 1065353216;
                          }
                          else
                          {
                            uint64_t v54 = *v47;
                            uint64_t v55 = *(void *)(*v46 + 8 * v54);
                            *(_DWORD *)(v55 + 4 * v43) = 0;
                            float v56 = *(float *)(*((void *)v97 + v37) + v51 + 4 * v43) + 0.0;
                            *(float *)(v55 + 4 * v43) = v56;
                            *(float *)(v55 + 4 * v43) = v56
                                                      + (float)(*(float *)(*(void *)(*v48 + 8 * v54) + 4 * v43) * 0.0);
                            *(float *)(*(void *)(*v49 + 8 * v54) + 4 * v43) = *(float *)(*(void *)(*v49 + 8 * v54)
                                                                                         + 4 * v43)
                                                                              * 100000.0;
                            *(unsigned char *)(*v50 + v54) = 1;
                            int v41 = *v44;
                          }
                          ++v43;
                        }
                        while (v43 < v41);
                        uint64_t v42 = *(void *)(a3 + 24);
                      }
                      ++*(_DWORD *)(v39 + 1528 * v37 + 44);
                    }
                    else
                    {
                      uint64_t v42 = *(void *)(a3 + 24);
                    }
                    if (*(_DWORD *)(v42 + 1528 * v37 + 1488)
                      && ((1 << v37) & (unint64_t)*(unsigned __int8 *)(*v30 + v31)) >> v37)
                    {
                      uint64_t v57 = *(int *)(v86 + 4 * v37 + 264) * (uint64_t)v35;
                      uint64_t v58 = *((void *)v97 + v37);
                      float v59 = *(float *)(v58 + 4 * v57);
                      if (v59 != -1.0e10)
                      {
                        uint64_t v60 = *(int *)(v39 + 1528 * v37 + 44);
                        if (a4 == 1)
                        {
                          **(float **)(*((void *)v95 + v37) + 8 * v60) = v59;
                          *(float *)(v39 + 1528 * v37 + 544) = v59 + *(float *)(v39 + 1528 * v37 + 544);
                          **(_DWORD **)(*((void *)v96 + v37) + 8 * v60) = 1065353216;
                        }
                        else
                        {
                          int v61 = (void *)(v39 + 1528 * v37);
                          int v62 = *(float **)(v61[12] + 8 * v60);
                          *int v62 = 0.0;
                          float v63 = (float)(**(float **)(v61[8] + 8 * v60) * 0.0) + 0.0;
                          *int v62 = v63;
                          *int v62 = v63 + *(float *)(v58 + 4 * v57);
                          *(unsigned char *)(v61[17] + v60) = 1;
                        }
                      }
                      ++*(_DWORD *)(v39 + 1528 * v37 + 44);
                    }
                    ++v37;
                    uint64_t v36 = *(int *)(a3 + 32);
                    v38 += 1528;
                  }
                  while (v37 < v36);
                  int v34 = v94;
                }
                ++v35;
              }
              while (v35 < v34);
            }
            mfs_ParamMap_UnMapSection(a3);
          }
          else
          {
            FillInDuration(a3, v88, v31);
          }
          unsigned int v27 = v91 + 1;
          uint64_t v28 = *(int *)v90;
        }
        while (v31++ <= v28);
        int v25 = *(_DWORD *)(a3 + 608);
        uint64_t v10 = v86;
        uint64_t v26 = v82;
      }
      ++v26;
    }
    while (v26 < v25);
  }
  if (a4 == 1)
  {
    int v65 = *(_DWORD *)(a3 + 32);
    if (v65 >= 1)
    {
      for (uint64_t i = 0; i < v65; ++i)
      {
        uint64_t v67 = *(void *)(a3 + 24);
        if (!*(_DWORD *)(v67 + 1528 * i + 1480))
        {
          uint64_t v68 = v10 + 4 * i;
          if (*(int *)(v68 + 264) >= 1)
          {
            uint64_t v69 = 0;
            BOOL v70 = (int *)(v68 + 264);
            int v71 = (int *)(v67 + 1528 * i + 44);
            do
            {
              int v94 = 0;
              int v72 = *v71;
              if (*v71 < 1)
              {
                float v77 = 0.0;
              }
              else
              {
                int v73 = 0;
                uint64_t v74 = 0;
                uint64_t v75 = *((void *)v96 + i);
                do
                {
                  if (*(float *)(*(void *)(v75 + 8 * v74) + 4 * v69) == 1.0)
                  {
                    int v94 = ++v73;
                    int v72 = *v71;
                  }
                  ++v74;
                }
                while (v74 < v72);
                if (v73)
                {
                  *(float *)(v67 + 1528 * i + 4 * v69 + 544) = *(float *)(v67 + 1528 * i + 4 * v69 + 544) / (float)v73;
                  int v76 = v73;
                }
                else
                {
                  int v76 = 0;
                }
                if (v72 < 1)
                {
                  float v77 = 0.0;
                  if (!v73) {
                    goto LABEL_74;
                  }
                }
                else
                {
                  uint64_t v78 = 0;
                  uint64_t v79 = 8 * v72;
                  float v77 = 0.0;
                  do
                  {
                    if (*(float *)(*(void *)(*((void *)v96 + i) + v78) + 4 * v69) == 1.0)
                    {
                      float v80 = *(float *)(*(void *)(*((void *)v95 + i) + v78) + 4 * v69)
                          - *(float *)(v67 + 1528 * i + 4 * v69 + 544);
                      float v77 = v77 + (float)(v80 * v80);
                    }
                    v78 += 8;
                  }
                  while (v79 != v78);
                  if (!v73) {
                    goto LABEL_74;
                  }
                }
                float v77 = v77 / (float)v76;
              }
LABEL_74:
              uint64_t v81 = v67 + 1528 * i + 4 * v69;
              *(float *)(v81 + 544) = v77;
              MFS__log_select_Diag(*(void *)a3, 2, (uint64_t)"Mod(%d) dim(%d) frames(%d) gv_m(%f) <- gv_t(%f)\n");
              *(_DWORD *)(v81 + 144) = *(_DWORD *)(v81 + 544);
              *(float *)(v81 + 344) = *(float *)(v81 + 344) * 0.001;
              ++v69;
            }
            while (v69 < *v70);
          }
          BET3FLT__dd_free(*(void **)(v84 + 8), *((uint64_t **)v96 + i));
          BET3FLT__dd_free(*(void **)(v84 + 8), *((uint64_t **)v95 + i));
          int v65 = *(_DWORD *)(a3 + 32);
          uint64_t v10 = v86;
        }
      }
    }
  }
  return v83;
}

uint64_t FreeRemainingStreams(uint64_t a1)
{
  MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"--- FreeRemainingStreams -\n");
  if (*(int *)(a1 + 32) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 24;
    do
    {
      BET3FLT__FreePStreamSM(*(void *)(a1 + 24) + v3);
      ++v2;
      v3 += 1528;
    }
    while (v2 < *(int *)(a1 + 32));
  }
  uint64_t v4 = *(void *)a1;
  return MFS__log_select_Diag(v4, 1, (uint64_t)"--- FreeRemainingStreams +\n");
}

uint64_t FillInDuration(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 32);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = *(_DWORD **)(result + 24);
    do
    {
      if (v5[371]
        || v5[372] && ((1 << v4) & (unint64_t)*(unsigned __int8 *)(*(void *)(a2 + 312) + a3)) >> v4)
      {
        v5[11] += *(_DWORD *)(*(void *)(a2 + 16) + 4 * a3);
      }
      ++v4;
      v5 += 382;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t MFS__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  unsigned __int16 v30 = 0;
  uint64_t v9 = *a4;
  if (a4[4] - v9 >= 8 && *(unsigned char *)(*((void *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    uint64_t v12 = a3;
    uint64_t v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      int v14 = BET3FLT__xfread2ptr_BET3((void *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if (*a4) {
          ++*a4;
        }
        uint64_t v15 = heap_Calloc(*(void **)(v8 + 8), 16, (unsigned __int16)*v13);
        uint64_t v21 = a2 + 8 * v12;
        *(void *)(v21 + 104) = v15;
        float v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          MFS__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13) {
          return 0;
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1) {
            break;
          }
          int v25 = BET3FLT__xfread2ptr_BET3((void *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          uint64_t v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2)) {
            break;
          }
          uint64_t v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13) {
            return v26;
          }
        }
        uint64_t v26 = 2229280772;
        unsigned int v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        uint64_t v28 = 55015;
      }
      else
      {
        uint64_t v26 = 2229280772;
        unsigned int v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        uint64_t v28 = 55013;
      }
    }
    else
    {
      uint64_t v26 = 2229280772;
      unsigned int v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      uint64_t v28 = 55012;
    }
  }
  else
  {
    uint64_t v26 = 2229280772;
    unsigned int v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    uint64_t v28 = 55011;
  }
  MFS__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t MFS__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  LOWORD(v5) = 0;
  uint64_t v6 = a3 + 8 * a4;
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(v6 + 104) + 16 * a5 + 8);
  uint64_t v9 = a2 + 2;
  uint64_t v10 = a2 + 1;
  while (2)
  {
    uint64_t v11 = -(uint64_t)(__int16)v5;
    uint64_t v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    uint64_t v13 = (unsigned __int8 *)(v7 + *v12);
    uint64_t v14 = *v13;
    int v15 = v13[1];
    uint64_t v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 2));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 1));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10)) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v10);
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          unsigned __int8 v16 = -1;
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v9);
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        goto LABEL_39;
      default:
        if (v14 == 3)
        {
          unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 1784) + 2 * a2);
          BOOL v18 = v17 > 0x19;
          unsigned __int8 v16 = 10 * v17;
          if (v18) {
            unsigned __int8 v16 = -1;
          }
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(a1 + 8 * v14 + 16);
          if (!v19) {
            goto LABEL_39;
          }
          unsigned __int8 v16 = *(unsigned char *)(v19 + a2);
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
LABEL_24:
        uint64_t v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v13[3] >= v16) {
            goto LABEL_30;
          }
        }
        else
        {
          int v21 = v15 - 1;
          if (v21)
          {
            int v22 = 0;
            while (1)
            {
              int v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22)) {
                ++v23;
              }
              int v24 = v23 >> 1;
              unsigned int v25 = v20[v24];
              if (v25 == v16) {
                break;
              }
              if (v16 < v25) {
                int v21 = v24 - 1;
              }
              else {
                int v22 = v24 + 1;
              }
              if (v22 > v21) {
                goto LABEL_39;
              }
            }
LABEL_30:
            uint64_t v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16) {
            goto LABEL_30;
          }
        }
LABEL_39:
        if ((v5 & 0x8000) != 0) {
          continue;
        }
        return v5;
    }
  }
}

uint64_t mlpg_cpy(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(result + 112);
        do
        {
          if (v5)
          {
            if (*(unsigned char *)(v5 + v4) == 1) {
              *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8 * v4) + 4 * v2) = *(_DWORD *)(*(void *)(*(void *)(result + 72) + 8 * v4)
            }
                                                                                               + 4 * v2);
          }
          ++v4;
        }
        while (v3 != v4);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

float mlpg(uint64_t a1, int a2)
{
  unint64_t v4 = *(unsigned int *)(a1 + 20);
  if ((int)v4 <= 0)
  {
    uint64_t v9 = *(float ***)(a1 + 96);
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v9 = *(float ***)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = *(unsigned int *)(a1 + 24);
    uint64_t v12 = *(unsigned int **)(a1 + 32);
    uint64_t v13 = *v12;
    uint64_t v66 = v13;
    uint64_t v67 = a2;
    uint64_t v68 = v9;
    do
    {
      uint64_t v14 = *(void *)(v7 + 8 * v5);
      *(float *)(v10 + 4 * v5) = *(float *)(v14 + 4 * v6) * *(float *)(*(void *)(v8 + 8 * v5) + 4 * v6);
      int v15 = v9[v5];
      *int v15 = *(float *)(v14 + 4 * v6);
      if ((int)v11 >= 2)
      {
        bzero(v15 + 1, 4 * (v11 - 1));
        uint64_t v13 = v66;
        uint64_t v6 = v67;
        uint64_t v9 = v68;
      }
      if ((int)v13 >= 2)
      {
        uint64_t v16 = *((void *)v12 + 1);
        for (uint64_t i = 1; i != v13; ++i)
        {
          BOOL v18 = *(int **)(v16 + 8 * i);
          uint64_t v19 = *v18;
          uint64_t v20 = v18[1];
          if ((int)v19 <= (int)v20)
          {
            uint64_t v21 = -4 * v19;
            uint64_t v22 = -v19;
            do
            {
              if (v19 + v5 < v4)
              {
                uint64_t v23 = *(void *)(*((void *)v12 + 2) + 8 * i);
                float v24 = *(float *)(v23 - 4 * v19);
                if (v24 != 0.0)
                {
                  int v25 = a2 + *(_DWORD *)(a1 + 16) * i;
                  uint64_t v26 = 8 * (v19 + v5);
                  float v27 = v24 * *(float *)(*(void *)(v7 + v26) + 4 * v25);
                  *(float *)(v10 + 4 * v5) = *(float *)(v10 + 4 * v5)
                                           + (float)(v27 * *(float *)(*(void *)(v8 + v26) + 4 * v25));
                  if ((int)v11 >= 1)
                  {
                    uint64_t v28 = 0;
                    uint64_t v29 = v23 + v21;
                    do
                    {
                      BOOL v30 = v22 + v28 <= v20 && v28 < (uint64_t)(v4 - v5);
                      if (v30)
                      {
                        float v31 = *(float *)(v29 + 4 * v28);
                        if (v31 != 0.0) {
                          v15[v28] = v15[v28] + (float)(v27 * v31);
                        }
                      }
                      ++v28;
                    }
                    while (v11 != v28);
                  }
                }
              }
              ++v19;
              v21 -= 4;
              --v22;
            }
            while (v20 + 1 != v19);
          }
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  uint64_t v32 = *v9;
  float v33 = sqrtf(**v9);
  **uint64_t v9 = v33;
  if ((int)v11 >= 2)
  {
    uint64_t v34 = v11 - 1;
    int v35 = v32 + 1;
    do
    {
      float *v35 = *v35 / v33;
      ++v35;
      --v34;
    }
    while (v34);
  }
  if ((int)v4 <= 1)
  {
    uint64_t v53 = *(float **)(a1 + 88);
    float *v53 = **(float **)(a1 + 104) / v33;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 1;
    uint64_t v38 = v9;
    do
    {
      if ((int)v11 < 2)
      {
        *v9[v37] = sqrtf(*v9[v37]);
      }
      else
      {
        uint64_t v39 = v36;
        uint64_t v40 = 1;
        do
        {
          if ((v39 & 0x8000000000000000) == 0)
          {
            float v41 = v9[v39][v40];
            *v9[v37] = *v9[v37] - (float)(v41 * v41);
          }
          ++v40;
          --v39;
        }
        while (v11 != v40);
        uint64_t v42 = v9[v37];
        float v43 = sqrtf(*v42);
        *uint64_t v42 = v43;
        uint64_t v44 = *(unsigned int *)(*(void *)(a1 + 32) + 32);
        uint64_t v45 = 1;
        do
        {
          uint64_t v46 = v45 + 1;
          if ((int)v44 > 0)
          {
            uint64_t v47 = v45;
            uint64_t v48 = v38;
            uint64_t v49 = v44;
            do
            {
              if (v45 != v11 - 1) {
                v42[v45] = v42[v45] - (float)((*v48)[v47] * (*v48)[v46]);
              }
              --v47;
              --v48;
              --v49;
            }
            while (v49);
          }
          v42[v45] = v42[v45] / v43;
          ++v45;
        }
        while (v46 != v11);
      }
      ++v37;
      ++v36;
      ++v38;
    }
    while (v37 != v4);
    uint64_t v50 = 0;
    uint64_t v51 = *(float **)(a1 + 104);
    float v52 = *v51 / *v32;
    uint64_t v53 = *(float **)(a1 + 88);
    float *v53 = v52;
    for (uint64_t j = 1; j != v4; ++j)
    {
      float v55 = 0.0;
      if ((int)v11 >= 2)
      {
        uint64_t v56 = v50;
        uint64_t v57 = 1;
        do
        {
          if ((v56 & 0x8000000000000000) == 0)
          {
            float v58 = v9[v56][v57];
            if (v58 != 0.0) {
              float v55 = v55 + (float)(v58 * v53[v56]);
            }
          }
          ++v57;
          --v56;
        }
        while (v11 != v57);
      }
      v53[j] = (float)(v51[j] - v55) / *v9[j];
      ++v50;
    }
  }
  float result = v53[(int)v4 - 1] / *v9[(int)v4 - 1];
  uint64_t v60 = *(void *)(a1 + 40);
  *(float *)(*(void *)(v60 + 8 * ((int)v4 - 1)) + 4 * a2) = result;
  if ((int)v4 >= 2)
  {
    uint64_t v61 = (v4 - 2);
    uint64_t v62 = v60 + 8 * v61;
    do
    {
      float v63 = 0.0;
      if ((int)v11 >= 2)
      {
        uint64_t v64 = 1;
        do
        {
          if (v61 + v64 < (uint64_t)v4)
          {
            float v65 = v9[v61][v64];
            if (v65 != 0.0) {
              float v63 = v63 + (float)(v65 * *(float *)(*(void *)(v62 + 8 * v64) + 4 * a2));
            }
          }
          ++v64;
        }
        while (v11 != v64);
      }
      float result = (float)(v53[v61] - v63) / *v9[v61];
      *(float *)(*(void *)(v60 + 8 * v61) + 4 * a2) = result;
      v62 -= 8;
      BOOL v30 = v61-- <= 0;
    }
    while (!v30);
  }
  return result;
}

uint64_t dummy_solver(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        unint64_t v4 = *(uint64_t **)(result + 40);
        uint64_t v5 = v3;
        do
        {
          uint64_t v6 = *v4++;
          *(_DWORD *)(v6 + 4 * v2) = 0;
          --v5;
        }
        while (v5);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

void mlpg_c(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&double v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

uint64_t MFS__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = 0;
  *a5 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v9 = (void *)heap_Calloc(*(void **)(v16 + 8), 1, 24);
    if (v9)
    {
      *uint64_t v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t MFS__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  __s1 = 0;
  bzero(a5, 0xE48uLL);
  *a5 = a2;
  if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)a5, a6);
}

uint64_t MFS__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t v14 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  if (a11) {
    BOOL v16 = a12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  int v106 = v17;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(unsigned char *)(*(void *)a10 + 2748 + v18) == 1) {
      ++v19;
    }
    ++v18;
  }
  while (v18 != 218);
  uint64_t v21 = heap_Calloc(*(void **)(v15 + 8), (v19 * v20), 1);
  if (!v21) {
    goto LABEL_118;
  }
  uint64_t v26 = v21;
  uint64_t v108 = a3;
  int v109 = v14;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v28 = *(void *)a10;
    int v29 = *(unsigned __int8 *)(*(void *)a10 + i + 2748);
    if (*(unsigned char *)(*(void *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        uint64_t v30 = heap_Calloc(*(void **)(v15 + 8), v20, 2);
        *(void *)(a10 + 8 * i + 1760) = v30;
        if (!v30) {
          goto LABEL_43;
        }
      }
      else if (v29 == 1)
      {
        *(void *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v31 = heap_Calloc(*(void **)(v15 + 8), v20, 9);
            *(void *)(a10 + 3560) = v31;
            if (!v31) {
              goto LABEL_43;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            int v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              uint64_t v34 = heap_Calloc(*(void **)(v15 + 8), (v33 * v20), 4);
              *(void *)(a10 + 3568) = v34;
              if (!v34) {
                goto LABEL_43;
              }
            }
            continue;
          case '4':
            int v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              uint64_t v36 = heap_Calloc(*(void **)(v15 + 8), (v35 * v20), 4);
              *(void *)(a10 + 3576) = v36;
              if (!v36) {
                goto LABEL_43;
              }
            }
            continue;
          case '5':
            int v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              uint64_t v38 = heap_Calloc(*(void **)(v15 + 8), (v37 * v20), 4);
              *(void *)(a10 + 3584) = v38;
              if (!v38) {
                goto LABEL_43;
              }
            }
            continue;
          case '6':
            int v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              uint64_t v40 = heap_Calloc(*(void **)(v15 + 8), (v39 * v20), 4);
              *(void *)(a10 + 3592) = v40;
              if (!v40) {
                goto LABEL_43;
              }
            }
            continue;
          case '8':
            int v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              uint64_t v42 = heap_Calloc(*(void **)(v15 + 8), (v41 * v20), 1);
              *(void *)(a10 + 3600) = v42;
              if (!v42) {
                goto LABEL_43;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v32 = heap_Calloc(*(void **)(v15 + 8), v20, 8);
              *(void *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                int v43 = -2065686518;
                log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(void *)(*v14 + 32), (uint64_t)"SELECT_BET3", 55007, "%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  unsigned int v44 = *(unsigned __int16 *)(*(void *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, "Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    int v43 = -2065686513;
    goto LABEL_120;
  }
  uint64_t v45 = (void *)heap_Calloc(*(void **)(v15 + 8), v44 * v20, 4);
  *(void *)(a10 + 3608) = v45;
  if (!v45)
  {
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v102);
    goto LABEL_120;
  }
  if (*(unsigned __int16 *)(*(void *)a10 + 3578) * v20) {
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(void *)a10 + 3578) * v20);
  }
  int GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*v14, (uint64_t)"SELECT_BET3", (void *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    int v43 = GenericFeatureLayers;
    goto LABEL_120;
  }
  int v43 = usextract_Process(*v14, (uint64_t)"SELECT_BET3", v14[2], a3, a4, a10, v51, v52);
  if ((v43 & 0x80000000) == 0)
  {
    uint64_t v104 = a4;
    if (*(void *)(a10 + 3504))
    {
      uint64_t v53 = *(void *)a10;
      uint64_t v54 = **(const char ***)(*(void *)a10 + 3336);
      if (v54)
      {
        uint64_t v55 = 0;
        unsigned int v56 = 1;
        do
        {
          if (!strncmp(v54, "INNO_", 5uLL))
          {
            unsigned int v58 = atoi(v54 + 5) + 79;
            if (v58 <= 0x5E) {
              *(void *)(a10 + 8 * v58 + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
            }
          }
          else
          {
            unsigned int Index = usextract_getIndex(*(const char ***)(*(void *)(v53 + 3344) + 8 * v55), "FEATIDX", (unint64_t)"");
            if (Index == -1)
            {
              uint64_t v53 = *(void *)a10;
              float v59 = *(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v55);
              if (!strcmp(v59, "POS"))
              {
                *(void *)(a10 + 504) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
              }
              else if (!strcmp(v59, "PHR"))
              {
                *(void *)(a10 + 512) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
              }
            }
            else
            {
              uint64_t v53 = *(void *)a10;
              *(void *)(a10
                        + 8
                        * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)a10 + 3352) + 8 * v55) + Index)
                        + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v55);
            }
          }
          uint64_t v55 = v56;
          uint64_t v54 = *(const char **)(*(void *)(v53 + 3336) + 8 * v56++);
        }
        while (v54);
      }
    }
    int v103 = *(__int16 *)(a10 + 10);
    unsigned int v60 = v103 & ~(v103 >> 31);
    if (BET3FLT__log_select_GetLogLevel(*(void *)(v15 + 32)) >= 6)
    {
      LH_itoa(0x4Eu, (char *)v112, 0xAu);
      for (uint64_t j = 0; j != 218; ++j)
      {
        uint64_t v62 = "application/x-realspeak-usplosives;version=4.0";
        switch((int)j)
        {
          case 2:
            char v111 = 5;
            char v110 = 0;
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v111,
              1u,
              0);
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              *(void *)(a10 + 8 * j + 16),
              v60,
              0);
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
              (uint64_t)&v110,
              1u,
              0);
            continue;
          case 3:
            uint64_t v62 = "application/x-realspeak-usdurs;version=4.0";
            goto LABEL_71;
          case 4:
            goto LABEL_71;
          case 5:
            uint64_t v62 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_71:
            int v63 = *(unsigned __int8 *)(*(void *)a10 + j + 2748);
            if (v63 == 2)
            {
              log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(void *)(a10 + 8 * j + 1760), 2 * v60, 0);
            }
            else if (v63 == 1)
            {
              log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v112, (uint64_t)v62, *(void *)(a10 + 8 * j + 16), v60, 0);
            }
            break;
          default:
            continue;
        }
      }
    }
    unsigned int v105 = v103 & ~(v103 >> 31);
    unint64_t v64 = *(unsigned int *)(a10 + 3520);
    if (v64)
    {
      uint64_t v65 = 0;
      for (unint64_t k = 0; k < v64; ++k)
      {
        if (*(_DWORD *)(*(void *)(a10 + 3512) + v65) == 25)
        {
          v112[0] = 0;
          paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
          unsigned int v67 = *(_DWORD *)(*(void *)(a10 + 3512) + v65 + 24);
          *a9 = v67;
          int v43 = paramc_ParamSetInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", v67);
          if (v43 < 0)
          {
            log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, "%s%s%s%d%s%x", v68, v69, v70, v71, "parameter");
            goto LABEL_134;
          }
          unint64_t v64 = *(unsigned int *)(a10 + 3520);
        }
        v65 += 32;
      }
    }
    featextract_adjustSilAudioOrder(a10);
    a3 = v108;
    uint64_t v14 = v109;
    LODWORD(v72) = v103 & ~(v103 >> 31);
    if (!v106 || (int v73 = *(_DWORD *)(a10 + 3520), v74 = v73 + v105, *a12 = v74, !(v73 + v105)))
    {
LABEL_97:
      if (v103 < 1)
      {
        a4 = v104;
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v91 = (unsigned __int16)v72;
        if (v72 <= 1) {
          uint64_t v72 = 1;
        }
        else {
          uint64_t v72 = v72;
        }
        uint64_t v92 = v91 - 1;
        uint64_t v93 = a2;
        do
        {
          uint64_t v94 = *(void *)(a10 + 248);
          if (!*(unsigned char *)(v94 + v90)) {
            *(unsigned char *)(v94 + v90) = -1;
          }
          uint64_t v95 = *(void *)(a10 + 192);
          if (*(unsigned char *)(*(void *)(a10 + 32) + v90) == 35) {
            char v96 = 1;
          }
          else {
            char v96 = 2 * *(unsigned char *)(v95 + v90);
          }
          *(unsigned char *)(v95 + v90) = v96;
          uint64_t v97 = *(void *)(a10 + 32);
          if (v92 == v90 && *(unsigned char *)(v97 + v90) == 35)
          {
            v112[0] = 0;
            paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v112);
            int v98 = 0;
            uint64_t v99 = *(void *)(a10 + 1784);
            if (v112[0] != 1) {
              int v98 = *(unsigned __int16 *)(v99 + 2 * v90) + 200 * *a9;
            }
            if (v98 <= 1) {
              int v98 = 1;
            }
            if (v98 >= 0xFFFF) {
              LOWORD(v98) = -1;
            }
            *(_WORD *)(v99 + 2 * v90) = v98;
            uint64_t v97 = *(void *)(a10 + 32);
            uint64_t v93 = a2;
          }
          *(unsigned char *)(v97 + v90) = *(unsigned char *)(v93 + *(unsigned __int8 *)(v97 + v90) + 7356);
          ++v90;
        }
        while (v72 != v90);
LABEL_134:
        a4 = v104;
LABEL_44:
        a3 = v108;
        uint64_t v14 = v109;
      }
      goto LABEL_120;
    }
    uint64_t v75 = heap_Calloc(*(void **)(v15 + 8), v74, 32);
    *a11 = v75;
    a4 = v104;
    if (v75)
    {
      int v76 = (void *)heap_Calloc(*(void **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
      if (v76)
      {
        uint64_t v77 = (uint64_t)v76;
        memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
        LODWORD(v72) = v103 & ~(v103 >> 31);
        if (*a12)
        {
          uint64_t v78 = 0;
          unint64_t v79 = 0;
          unsigned int v80 = 0;
          unint64_t v81 = 0;
          while (v81 < *(unsigned int *)(a10 + 3520))
          {
            if (v80 >= v105)
            {
              uint64_t v87 = (_OWORD *)(*a11 + v78);
              uint64_t v88 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
              long long v89 = v88[1];
              *uint64_t v87 = *v88;
              v87[1] = v89;
              ++v81;
              goto LABEL_95;
            }
            uint64_t v82 = v80;
            if (!*(_WORD *)(v77 + 2 * v80)) {
              goto LABEL_93;
            }
            unsigned int v83 = (_OWORD *)(*a11 + v78);
            uint64_t v84 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
            long long v85 = v84[1];
            *unsigned int v83 = *v84;
            v83[1] = v85;
            ++v81;
            --*(_WORD *)(v77 + 2 * v80);
LABEL_95:
            ++v79;
            v78 += 32;
            if (v79 >= *a12) {
              goto LABEL_96;
            }
          }
          uint64_t v82 = v80;
LABEL_93:
          uint64_t v86 = (_DWORD *)(*a11 + v78);
          *uint64_t v86 = 33;
          v86[6] = *(unsigned __int8 *)(*(void *)(a10 + 32) + v82);
          ++v80;
          goto LABEL_95;
        }
LABEL_96:
        heap_Free(*(void **)(v15 + 8), v77);
        goto LABEL_97;
      }
    }
LABEL_118:
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v102);
  }
LABEL_120:
  if (a12 && a11 && v43 < 0 && *a11)
  {
    heap_Free(*(void **)(v15 + 8), *a11);
    *a11 = 0;
    *a12 = 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(v14[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1) {
    return v43;
  }
  else {
    return result;
  }
}

uint64_t MFS__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, void *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((void *)*a1, (uint64_t)"SELECT_BET3", a2);
  uint64_t v10 = 0;
  int v11 = 1;
  do
  {
    int v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(unsigned char *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        uint64_t v14 = a2[v10 + 220];
        if (v14) {
LABEL_11:
        }
          heap_Free(*(void **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          uint64_t v13 = a2[v10 + 2];
          if (v13) {
            heap_Free(*(void **)(v4 + 8), v13);
          }
          int v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            uint64_t v14 = a2[445];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            uint64_t v14 = a2[446];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '4':
            uint64_t v14 = a2[447];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '5':
            uint64_t v14 = a2[448];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '6':
            uint64_t v14 = a2[449];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '8':
            uint64_t v14 = a2[450];
            if (v14) {
              goto LABEL_11;
            }
            break;
          default:
            if (v10 == 24)
            {
              uint64_t v14 = a2[444];
              if (v14) {
                goto LABEL_11;
              }
            }
            else
            {
LABEL_20:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, "%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  uint64_t v15 = a2[451];
  if (v15) {
    heap_Free(*(void **)(v4 + 8), v15);
  }
  *a2 = 0;
  return v5;
}

uint64_t MFS__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = a3;
  if (a2[a3 + 84])
  {
    uint64_t v7 = &a2[a3];
    unsigned int v9 = v7[32];
    uint64_t v8 = (int *)(v7 + 32);
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), v9, 8);
    *((void *)a2 + 21) = v10;
    if (!v10) {
      return 2229280778;
    }
    if (*v8 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = (int *)(a2 + 11);
      while (1)
      {
        uint64_t v14 = (unsigned int *)(a4 + 24 * v11);
        if (BET3FLT__xfread_BET3(a2, 4u, 1, v14) != 1 || (*a2 & 0x80000000) != 0)
        {
          unsigned int v67 = "LoadModelFile: the number of HMM states is illegal for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55020;
          goto LABEL_67;
        }
        if (BET3FLT__xfread_BET3(a2 + 11, 4u, 1, v14) != 1 || (int v20 = *v13, *v13 < 0))
        {
          unsigned int v67 = "LoadModelFile: the number of PDFs is illegal for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55021;
          goto LABEL_67;
        }
        if (!v12)
        {
          uint64_t v21 = heap_Calloc(*(void **)(v5 + 8), (*v8 * v20), 8);
          if (!v21) {
            return 2229280778;
          }
          uint64_t v12 = v21;
          int v20 = *v13;
        }
        uint64_t v22 = v6;
        *(void *)(*((void *)a2 + 21) + 8 * v11) = v12 + 8 * v20 * (int)v11;
        *(void *)(*((void *)a2 + 21) + 8 * v11) -= 8;
        if (v20 >= 1) {
          break;
        }
LABEL_16:
        ++v11;
        uint64_t v6 = v22;
        if (v11 >= *v8) {
          goto LABEL_17;
        }
      }
      uint64_t v23 = 0;
      int v24 = *a2;
      uint64_t v25 = 8;
      while (1)
      {
        int v26 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*((void *)a2 + 21) + 8 * v11) + v25), 4u, (2 * v24), v14);
        int v24 = *a2;
        if (v26 != 2 * *a2) {
          break;
        }
        uint64_t v27 = *(void *)(*((void *)a2 + 21) + 8 * v11) + 8 * v23;
        *(void *)(v27 + 8) -= 8;
        ++v23;
        v25 += 8;
        if (v23 >= (int)a2[11]) {
          goto LABEL_16;
        }
      }
      unsigned int v67 = "LoadModelFile: PDF read failed for %s %d\n";
      uint64_t v68 = v5;
      uint64_t v69 = 55022;
      goto LABEL_67;
    }
  }
LABEL_17:
  uint64_t v28 = &a2[v6];
  if (v28[94])
  {
    int v29 = (int *)(v28 + 32);
    uint64_t v30 = heap_Calloc(*(void **)(v5 + 8), v28[32], 8);
    uint64_t v31 = &a2[2 * v6];
    *((void *)v31 + 22) = v30;
    uint64_t v32 = v31 + 44;
    uint64_t v33 = 2229280778;
    if (!v30) {
      return v33;
    }
    uint64_t v73 = heap_Calloc(*(void **)(v5 + 8), *a2 * *v29, 8);
    if (!v73) {
      return v33;
    }
    if (*v29 >= 1)
    {
      uint64_t v34 = 0;
      int v35 = &a2[v6 + 1];
      uint64_t v36 = &a2[2 * v6 + 12];
      uint64_t v71 = v5;
      uint64_t v74 = v6;
      while (1)
      {
        int v37 = (unsigned int *)(a4 + 24 * v34);
        if (BET3FLT__xfread_BET3(v35, 4u, 1, v37) != 1 || (*v35 & 0x80000000) != 0)
        {
          unsigned int v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55023;
          goto LABEL_67;
        }
        int v38 = BET3FLT__xfread2ptr_BET3(v36, 4u, *a2, v37);
        if (v38 != *a2)
        {
          unsigned int v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55024;
          goto LABEL_67;
        }
        uint64_t v39 = *(void *)v36;
        *(void *)v36 -= 8;
        if (v38 > 0) {
          break;
        }
        *(void *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
        *(void *)(*v32 + 8 * v34) -= 16;
LABEL_34:
        ++v34;
        uint64_t v5 = v71;
        uint64_t v6 = v74;
        if (v34 >= *v29) {
          goto LABEL_35;
        }
      }
      uint64_t v40 = 0;
      do
      {
        if ((*(_DWORD *)(v39 + 4 * v40) & 0x80000000) != 0)
        {
          unsigned int v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55025;
          goto LABEL_67;
        }
        ++v40;
      }
      while ((v38 + 2) - 2 != v40);
      *(void *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
      *(void *)(*v32 + 8 * v34) -= 16;
      uint64_t v41 = *(void *)v36;
      unsigned int v42 = *v35;
      uint64_t v43 = 16;
      uint64_t v44 = 2;
      while (1)
      {
        int v45 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*v32 + 8 * v34) + v43), 4u, 2 * *(_DWORD *)(v41 + 4 * v44) * v42, v37);
        uint64_t v41 = *(void *)v36;
        unsigned int v42 = *v35;
        if (v45 != 2 * *(_DWORD *)(*(void *)v36 + 4 * v44) * *v35) {
          break;
        }
        v43 += 8;
        BOOL v46 = v44++ <= (int)*a2;
        if (!v46) {
          goto LABEL_34;
        }
      }
      unsigned int v67 = "LoadModelFile: PDF read failed for %s %d\n";
      uint64_t v68 = v71;
      uint64_t v69 = 55026;
      goto LABEL_67;
    }
  }
LABEL_35:
  if (!v28[104]) {
    return 0;
  }
  uint64_t v47 = &a2[v6];
  unsigned int v49 = v47[32];
  uint64_t v48 = (int *)(v47 + 32);
  uint64_t v50 = heap_Calloc(*(void **)(v5 + 8), v49, 8);
  uint64_t v75 = v6;
  uint64_t v51 = &a2[2 * v6];
  *((void *)v51 + 32) = v50;
  uint64_t v33 = 2229280778;
  if (v50)
  {
    uint64_t v52 = heap_Calloc(*(void **)(v5 + 8), *a2 * *v48, 8);
    if (v52)
    {
      if (*v48 >= 1)
      {
        uint64_t v53 = v52;
        uint64_t v54 = 0;
        uint64_t v55 = v51 + 64;
        unsigned int v56 = &a2[v75 + 1];
        uint64_t v57 = &a2[2 * v75 + 12];
        uint64_t v72 = v5;
        while (1)
        {
          unsigned int v58 = (unsigned int *)(a4 + 24 * v54);
          if (BET3FLT__xfread_BET3(v56, 4u, 1, v58) != 1 || (*v56 & 0x80000000) != 0)
          {
            unsigned int v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
            uint64_t v68 = v5;
            uint64_t v69 = 55027;
            goto LABEL_67;
          }
          int v59 = BET3FLT__xfread2ptr_BET3(v57, 4u, *a2, v58);
          if (v59 != *a2)
          {
            unsigned int v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
            uint64_t v68 = v5;
            uint64_t v69 = 55028;
            goto LABEL_67;
          }
          uint64_t v60 = *(void *)v57;
          *(void *)v57 -= 8;
          if (v59 > 0) {
            break;
          }
          *(void *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
          *(void *)(*v55 + 8 * v54) -= 16;
LABEL_52:
          uint64_t v33 = 0;
          ++v54;
          uint64_t v5 = v72;
          if (v54 >= *v48) {
            return v33;
          }
        }
        uint64_t v61 = 0;
        do
        {
          if ((*(_DWORD *)(v60 + 4 * v61) & 0x80000000) != 0)
          {
            unsigned int v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
            uint64_t v68 = v5;
            uint64_t v69 = 55029;
            goto LABEL_67;
          }
          ++v61;
        }
        while ((v59 + 2) - 2 != v61);
        *(void *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
        *(void *)(*v55 + 8 * v54) -= 16;
        uint64_t v62 = *(void *)v57;
        unsigned int v63 = *v56;
        uint64_t v64 = 16;
        uint64_t v65 = 2;
        while (1)
        {
          int v66 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*v55 + 8 * v54) + v64), 4u, 4 * *(_DWORD *)(v62 + 4 * v65) * v63, v58);
          uint64_t v62 = *(void *)v57;
          unsigned int v63 = *v56;
          if (v66 != 4 * *(_DWORD *)(*(void *)v57 + 4 * v65) * *v56) {
            break;
          }
          v64 += 8;
          BOOL v46 = v65++ <= (int)*a2;
          if (!v46) {
            goto LABEL_52;
          }
        }
        unsigned int v67 = "LoadModelFile: PDF read failed for %s %d\n";
        uint64_t v68 = v72;
        uint64_t v69 = 55030;
LABEL_67:
        MFS__log_select_Error(v68, v69, (uint64_t)v67, v15, v16, v17, v18, v19);
        return 2229280772;
      }
      return 0;
    }
  }
  return v33;
}

uint64_t MFS__FindDurPDF_PerStateRho(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(int *)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  LODWORD(v7) = *a2;
  if (*a2 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a5;
    float v15 = 0.0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(*((void *)a2 + 21) + 8 * v14) + 8 * v6);
      float v17 = *(float *)(v16 + 4 * v13 + 8);
      float v18 = *(float *)(a3 + 4 * v13);
      float v19 = *(float *)(v16 + 4 * (v13 + (int)v7) + 8);
      if (a6) {
        float v19 = BET3FLT__bet3_finv(v19);
      }
      double v20 = sqrt(v19);
      float v21 = v20;
      float v22 = v17 + (float)(v18 * v21);
      if (v22 < 0.0) {
        float v22 = 0.0;
      }
      if (a2[115])
      {
        if (v22 > 4000.0) {
          float v22 = 4000.0;
        }
      }
      else if (v22 > 4000.0)
      {
        float v22 = v15 * 0.5;
      }
      int v23 = (int)((float)(v22 + (float)a4) + 0.5);
      uint64_t v24 = *(void *)(a1 + 16) + 4 * v13;
      if (v23 <= 1) {
        int v23 = 1;
      }
      *(_DWORD *)(v24 + 8) = v23;
      int v25 = *(_DWORD *)(a1 + 28) + (int)(v20 + 0.5);
      *(_DWORD *)(a1 + 24) += v23;
      *(_DWORD *)(a1 + 28) = v25;
      a4 += (int)(float)(v22 - (float)*(int *)(v24 + 8));
      uint64_t v7 = *a2;
      uint64_t v26 = v13 + 2;
      ++v13;
      float v15 = v22;
    }
    while (v26 <= v7);
  }
  return 0;
}

uint64_t MFS__FindLF0PDF_PerStateRho(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  uint64_t v8 = a4 + 4 * a1;
  int v11 = *(_DWORD *)(v8 + 4);
  uint64_t v10 = (int *)(v8 + 4);
  int v9 = v11;
  if (v11 >= 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 256) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(void *)(a3 + 8 * a1 + 72) + 4 * a2) - 4) * v9;
    uint64_t v16 = a3 + 8 * a1;
    float v17 = (void *)(v16 + 152);
    float v18 = (void *)(v16 + 232);
    uint64_t v19 = a5 + 4 * a1;
    double v20 = a8;
    float v21 = (float *)(v19 + 2104);
    float v22 = (_DWORD *)(v19 + 224);
    uint64_t v23 = 1;
    do
    {
      uint64_t v24 = v15 + 4 * (4 * (int)v23 - 4);
      int v25 = (float *)(*(void *)(*v17 + 8 * v14) + 4 * v23);
      *int v25 = *(float *)v24;
      float v26 = *(float *)(v24 + 4);
      *(float *)(*(void *)(*v18 + 8 * v14) + 4 * v23) = v26;
      if (a8 != 0.0)
      {
        if (a7)
        {
          double v27 = sqrt(BET3FLT__bet3_finv(v26));
          int v25 = (float *)(*(void *)(*v17 + 8 * v14) + 4 * v23);
        }
        else
        {
          double v27 = sqrt(v26);
        }
        float v28 = v27 * v20;
        *int v25 = *v25 + v28;
      }
      if (v23 == 1)
      {
        *(_DWORD *)(*(void *)(a3 + 320) + 4 * v14) = *(_DWORD *)(v24 + 8);
        uint64_t v29 = 1 << *v22;
        uint64_t v30 = *(void *)(a3 + 312);
        if (*(float *)(v24 + 8) <= *v21) {
          char v31 = *(unsigned char *)(v30 + v14) & ~(_BYTE)v29;
        }
        else {
          char v31 = *(unsigned char *)(v30 + v14) | v29;
        }
        *(unsigned char *)(v30 + v14) = v31;
      }
    }
    while (v23++ < *v10);
  }
  return 0;
}

uint64_t MFS__InitUttModel(uint64_t a1, char *a2, int *a3, unsigned int a4)
{
  uint64_t v8 = 2229280778;
  bzero(a2, 0x240uLL);
  *(void *)a2 = a1;
  *((void *)a2 + 1) = a3;
  *((_DWORD *)a2 + 138) = a4;
  *((_DWORD *)a2 + 141) = *a3 * a4;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 528);
  *((void *)a2 + 68) = v9;
  if (v9)
  {
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
    *((void *)a2 + 4) = v10;
    if (v10)
    {
      uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
      *((void *)a2 + 43) = v11;
      if (v11)
      {
        uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 1);
        *((void *)a2 + 41) = v12;
        if (v12)
        {
          uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
          *((void *)a2 + 42) = v13;
          if (v13)
          {
            int v14 = a3[114];
            if (v14 >= 1)
            {
              uint64_t v15 = 0;
              uint64_t v16 = a2 + 168;
              float v17 = a3;
              do
              {
                if (!v17[84])
                {
                  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)a2 + 138)), 4);
                  *(v16 - 10) = v18;
                  if (!v18) {
                    return v8;
                  }
                  uint64_t v19 = *(void **)(a1 + 8);
                  int v20 = *((_DWORD *)a2 + 138);
                  float v21 = v17[104]
                      ? BET3FLT__ddcalloc(v19, 2 * v20 * *a3, v17[1] + 1)
                      : (void *)heap_Calloc(v19, (2 * v20 * *a3), 8);
                  *uint64_t v16 = v21;
                  if (!v21) {
                    return v8;
                  }
                  v16[10] = &v21[*a3 * *((_DWORD *)a2 + 138)];
                  int v14 = a3[114];
                }
                ++v15;
                ++v17;
                ++v16;
              }
              while (v15 < v14);
            }
            uint64_t v22 = *((unsigned int *)a2 + 138);
            if ((int)v22 >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = *a3;
              uint64_t v25 = 152;
              do
              {
                uint64_t v26 = *((void *)a2 + 68);
                uint64_t v27 = v26 + 528 * v23;
                *(_DWORD *)uint64_t v27 = v23;
                uint64_t v28 = v23 * v24;
                uint64_t v29 = *((void *)a2 + 43) + 4 * v23 * v24;
                uint64_t v30 = *((void *)a2 + 41) + v23 * v24;
                uint64_t v31 = *((void *)a2 + 42) + 4 * v23 * v24;
                *(void *)(v27 + 16) = *((void *)a2 + 4) + 4 * v23 * v24 - 8;
                *(void *)(v27 + 312) = v30 - 2;
                *(void *)(v27 + 320) = v31 - 8;
                *(void *)(v27 + 328) = v29 - 8;
                if (v14 >= 1)
                {
                  uint64_t v32 = (uint64_t *)(v26 + v25);
                  uint64_t v33 = a2 + 168;
                  uint64_t v34 = v14;
                  int v35 = a3 + 84;
                  do
                  {
                    if (!*v35++)
                    {
                      uint64_t v37 = *(v33 - 10) + 4 * v28;
                      *(v32 - 10) = v37;
                      uint64_t v38 = *v33 + 8 * v28;
                      *uint64_t v32 = v38;
                      uint64_t v39 = v33[10] + 8 * v28;
                      *(v32 - 10) = v37 - 8;
                      *uint64_t v32 = v38 - 16;
                      v32[10] = v39 - 16;
                    }
                    ++v32;
                    ++v33;
                    --v34;
                  }
                  while (v34);
                }
                ++v23;
                v25 += 528;
              }
              while (v23 != v22);
            }
            return 0;
          }
        }
      }
    }
  }
  return v8;
}

void *MFS__DeInitUttModel(void *result)
{
  uint64_t v1 = result;
  if (*result && result[68])
  {
    uint64_t v2 = result[1];
    uint64_t v3 = result[4];
    if (v3)
    {
      heap_Free(*(void **)(*result + 8), v3);
      v1[4] = 0;
    }
    uint64_t v4 = v1[43];
    if (v4)
    {
      heap_Free(*(void **)(*v1 + 8), v4);
      v1[43] = 0;
    }
    uint64_t v5 = v1[41];
    if (v5)
    {
      heap_Free(*(void **)(*v1 + 8), v5);
      v1[41] = 0;
    }
    uint64_t v6 = v1[42];
    if (v6)
    {
      heap_Free(*(void **)(*v1 + 8), v6);
      v1[42] = 0;
    }
    if (*(int *)(v2 + 456) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 336 + 4 * v7))
        {
          uint64_t v8 = &v1[v7];
          uint64_t v9 = v8[11];
          if (v9)
          {
            heap_Free(*(void **)(*v1 + 8), v9);
            v8[11] = 0;
          }
          uint64_t v10 = v8[21];
          if (v10)
          {
            heap_Free(*(void **)(*v1 + 8), v10);
            v8[21] = 0;
          }
        }
        ++v7;
      }
      while (v7 < *(int *)(v2 + 456));
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v1[68]);
  }
  v1[68] = 0;
  *((_DWORD *)v1 + 138) = 0;
  *uint64_t v1 = 0;
  return result;
}

void MFS__mlpg2(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&double v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

uint64_t MFS__log_out_Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = (char *)(a3 - 1);
  do
    int v10 = *++v9;
  while (v10 == 10);
  return log_VOutEvent(*(uint64_t ***)(a1 + 32), a2, v9, &a9);
}

uint64_t MFS__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", (a2 + 2), 0, v3);
}

uint64_t MFS__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t MFS__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  int v10 = BET3FLT__ddcalloc(*(void **)(a1 + 8), *v5, 2);
  uint64_t v11 = a2 + 40 * a3;
  *(void *)(v11 + 8) = v10;
  uint64_t v12 = (int ***)(v11 + 8);
  if (v10)
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *v5, 8);
    uint64_t v14 = a2 + 40 * a3;
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(void *)**uint64_t v12 = 0;
      **uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, 4);
      uint64_t v16 = (_DWORD *)**v15;
      if (v16)
      {
        *uint64_t v16 = 1065353216;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          uint64_t v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          uint64_t v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            int v30 = 0;
          }
          else
          {
            int v29 = 0;
            int v30 = 0;
            uint64_t v31 = *v12;
            uint64_t v17 = v17;
            do
            {
              uint64_t v32 = *v31;
              int v33 = **v31;
              if (v30 > v33)
              {
                *uint64_t v28 = v33;
                int v30 = v33;
              }
              int v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                int v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              uint64_t v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          uint64_t v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        while (1)
        {
          unsigned int v20 = BET3FLT__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20) {
            break;
          }
          (*v15)[v19] += 4 * (v20 >> 1);
          uint64_t v26 = (*v12)[v19];
          *uint64_t v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          uint64_t v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17) {
            goto LABEL_9;
          }
        }
        MFS__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

uint64_t MFS__LoadVData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a2 + 456) < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 464;
  uint64_t v8 = a2 + 672;
  uint64_t v9 = a3 + 2664;
  int v10 = (unsigned int *)(a3 + 2424);
  do
  {
    uint64_t ModelFile = MFS__LoadModelFile(a1, (unsigned int *)a2, v6, v9);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = MFS__LoadTreesFile(a1, v7, v6, v10, a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = MFS__LoadDWinFile(a1, v8, v6, (unsigned int *)(v9 + 1200));
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    ++v6;
    uint64_t v20 = *(int *)(a2 + 456);
    v9 += 120;
    v10 += 6;
  }
  while (v6 < v20);
  if ((int)v20 < 1) {
    return 0;
  }
  uint64_t v21 = 0;
  while (1)
  {
    if (!*(void *)(a2 + 8 * v21 + 568))
    {
      uint64_t v31 = 2229280775;
      int v33 = "%s tree is required\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55032;
      goto LABEL_37;
    }
    uint64_t v22 = a2 + 4 * v21;
    if (*(_DWORD *)(v22 + 336) && !*(void *)(a2 + 168))
    {
LABEL_38:
      uint64_t v31 = 2229280775;
      int v33 = "%s PDF is required\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55033;
      goto LABEL_37;
    }
    int v23 = *(_DWORD *)(v22 + 376);
    if (v23)
    {
      if (!*(void *)(a2 + 8 * v21 + 176)) {
        goto LABEL_38;
      }
      if (!*(_DWORD *)(a2 + 4 * v21 + 416))
      {
        char v24 = 1;
        goto LABEL_19;
      }
    }
    else if (!*(_DWORD *)(a2 + 4 * v21 + 416))
    {
      goto LABEL_31;
    }
    if (!*(void *)(a2 + 8 * v21 + 256)) {
      goto LABEL_38;
    }
    char v24 = 0;
LABEL_19:
    uint64_t v25 = *(unsigned int *)(a2 + 4 * v21 + 128);
    if ((int)v25 >= 1) {
      break;
    }
LABEL_26:
    if (v23) {
      char v30 = 0;
    }
    else {
      char v30 = v24;
    }
    if ((v30 & 1) == 0 && *(_DWORD *)(a2 + 4 * v21 + 4) % *(_DWORD *)(v8 + 40 * v21))
    {
      uint64_t v31 = 2229280775;
      int v33 = "The number of dynamic windows for %s is not correct %d %d\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55035;
      goto LABEL_37;
    }
LABEL_31:
    uint64_t v31 = 0;
    if (++v21 == *(_DWORD *)(a2 + 456)) {
      return v31;
    }
  }
  uint64_t v26 = 0;
  uint64_t v27 = a2 + 8 * v21;
  uint64_t v28 = (void *)(v27 + 176);
  int v29 = (void *)(v27 + 256);
  while ((!v23 || *(void *)(*v28 + 8 * v26)) && ((v24 & 1) != 0 || *(void *)(*v29 + 8 * v26)))
  {
    if (v25 == ++v26) {
      goto LABEL_26;
    }
  }
  uint64_t v31 = 2229280775;
  int v33 = "%s PDF layer %d is required\n";
  uint64_t v34 = a1;
  uint64_t v35 = 55034;
LABEL_37:
  MFS__log_select_Error(v34, v35, (uint64_t)v33, v15, v16, v17, v18, v19);
  return v31;
}

uint64_t MFS__LoadVStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 32) < 1) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 672;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v64 = a2 + 672;
  while (1)
  {
    uint64_t v9 = (_DWORD *)(v7 + 40 * v6);
    uint64_t v10 = v8 + 1528 * v6;
    *(void *)(v10 + 56) = v9;
    int v11 = *(_DWORD *)(v10 + 1484);
    if (v11) {
      *(void *)(v8 + 1528 * v6 + 784) = v9;
    }
    if (*(_DWORD *)(v8 + 1528 * v6 + 1480))
    {
      if (v11) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
    uint64_t v13 = v4 + 4 * v6;
    uint64_t v14 = v8 + 1528 * v6;
    *(_DWORD *)(v14 + 36) = *(_DWORD *)(v13 + 4);
    int v15 = *(_DWORD *)(v13 + 4) / *v9;
    *(_DWORD *)(v14 + 40) = v15;
    *(void *)(v14 + 1496) = *(void *)(v3 + 92);
    uint64_t v16 = heap_Calloc(*(void **)(*(void *)a1 + 8), (2 * v15), 8);
    uint64_t v17 = *(void *)(a1 + 24);
    *(void *)(v17 + 1528 * v6 + 1504) = v16;
    if (!v16) {
      return 2229280778;
    }
    uint64_t v18 = v17 + 1528 * v6;
    uint64_t v19 = *(int *)(v18 + 40);
    *(void *)(v18 + 1512) = v16 + 8 * v19;
    if ((int)v19 >= 1) {
      break;
    }
LABEL_35:
    uint64_t v50 = heap_Calloc(*(void **)(*(void *)a1 + 8), v19, 4);
    uint64_t v51 = *(void *)(a1 + 24);
    *(void *)(v51 + 1528 * v6 + 1520) = v50;
    if (!v50) {
      return 2229280778;
    }
    uint64_t v52 = v51 + 1528 * v6;
    int v54 = *(_DWORD *)(v52 + 40);
    uint64_t v53 = (int *)(v52 + 40);
    if (v54 >= 1)
    {
      uint64_t v55 = v50;
      uint64_t v56 = 0;
      uint64_t v57 = *(void *)(v3 + 8 * v6 + 2344);
      while (1)
      {
        unsigned int v58 = *(const char **)(v57 + 8 * v56);
        if (!strcmp(v58, "OFF"))
        {
          int v59 = 0;
        }
        else
        {
          if (strcmp(v58, "ON"))
          {
            uint64_t v61 = *(void *)a1;
            uint64_t v62 = "valid breaker setting is required for stream %d\n";
            goto LABEL_48;
          }
          int v59 = 1;
        }
        *(_DWORD *)(v55 + 4 * v56++) = v59;
        if (v56 >= *v53)
        {
          uint64_t v3 = a3;
          break;
        }
      }
    }
    uint64_t v4 = a2;
    MFS__log_select_Diag(*(void *)a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v7 = v64;
    if (*(_DWORD *)(v8 + 1528 * v6 + 1484))
    {
LABEL_7:
      uint64_t v12 = v8 + 1528 * v6;
      *(_DWORD *)(v12 + 764) = *(_DWORD *)(v4 + 4 * v6 + 4);
      *(_DWORD *)(v12 + 768) = 1;
    }
LABEL_8:
    if (++v6 >= *(int *)(a1 + 32)) {
      return 0;
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = v3 + 8 * v6;
  uint64_t v22 = (void *)(v21 + 2184);
  int v23 = (uint64_t *)(v21 + 2264);
  while (1)
  {
    char v24 = *(const char **)(*v22 + 8 * v20);
    int v25 = strcmp(v24, "MLPG");
    uint64_t v26 = (uint64_t (*)())mlpg;
    if (v25)
    {
      int v27 = strcmp(v24, "MLPG2");
      uint64_t v26 = (uint64_t (*)())MFS__mlpg2;
      if (v27)
      {
        int v28 = strcmp(v24, "MLPG_GV");
        uint64_t v26 = (uint64_t (*)())mlpg_gv;
        if (v28)
        {
          int v29 = strcmp(v24, "MLPG_OPT");
          uint64_t v26 = mlpg_opt;
          if (v29)
          {
            int v30 = strcmp(v24, "MLPG_C");
            uint64_t v26 = (uint64_t (*)())mlpg_c;
            if (v30)
            {
              int v31 = strcmp(v24, "MLPG_GVC");
              uint64_t v26 = (uint64_t (*)())mlpg_gvc;
              if (v31)
              {
                int v32 = strcmp(v24, "MLPG_GVNORM");
                uint64_t v26 = (uint64_t (*)())mlpg_gvnorm;
                if (v32)
                {
                  int v33 = strcmp(v24, "DUMMY_SOLVER");
                  uint64_t v26 = (uint64_t (*)())dummy_solver;
                  if (v33) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    *(void *)(*(void *)(v17 + 1528 * v6 + 1504) + 8 * v20) = v26;
    uint64_t v39 = *v23;
    if (*v23)
    {
      uint64_t v40 = *(const char **)(v39 + 8 * v20);
      if (v40)
      {
        int v41 = strcmp(*(const char **)(v39 + 8 * v20), "MLPG");
        unsigned int v42 = (uint64_t (*)())mlpg;
        if (!v41) {
          goto LABEL_33;
        }
        int v43 = strcmp(v40, "MLPG2");
        unsigned int v42 = (uint64_t (*)())MFS__mlpg2;
        if (!v43) {
          goto LABEL_33;
        }
        int v44 = strcmp(v40, "MLPG_GV");
        unsigned int v42 = (uint64_t (*)())mlpg_gv;
        if (!v44) {
          goto LABEL_33;
        }
        int v45 = strcmp(v40, "MLPG_OPT");
        unsigned int v42 = mlpg_opt;
        if (!v45) {
          goto LABEL_33;
        }
        int v46 = strcmp(v40, "MLPG_C");
        unsigned int v42 = (uint64_t (*)())mlpg_c;
        if (!v46) {
          goto LABEL_33;
        }
        int v47 = strcmp(v40, "MLPG_GVC");
        unsigned int v42 = (uint64_t (*)())mlpg_gvc;
        if (v47
          && (v48 = strcmp(v40, "MLPG_GVNORM"), unsigned int v42 = (uint64_t (*)())mlpg_gvnorm, v48)
          && (v49 = strcmp(v40, "DUMMY_SOLVER"), unsigned int v42 = (uint64_t (*)())dummy_solver, v49))
        {
          if (*v40)
          {
            uint64_t v61 = *(void *)a1;
            uint64_t v62 = "invalid solver 2 for stream %d: %s\n";
            goto LABEL_48;
          }
        }
        else
        {
LABEL_33:
          *(void *)(*(void *)(*(void *)(a1 + 24) + 1528 * v6 + 1512) + 8 * v20) = v42;
        }
      }
    }
    ++v20;
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v19 = *(int *)(v17 + 1528 * v6 + 40);
    if (v20 >= v19) {
      goto LABEL_35;
    }
  }
  uint64_t v61 = *(void *)a1;
  uint64_t v62 = "invalid solver for stream %d: %s\n";
LABEL_48:
  MFS__log_select_Error(v61, 55036, (uint64_t)v62, v34, v35, v36, v37, v38);
  return 2229280775;
}

void MFS__DeInitVStream(int *a1)
{
  if (a1 && *(void *)a1)
  {
    if (a1[8] >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *((void *)a1 + 3);
      uint64_t v4 = 1520;
      do
      {
        if (!v3) {
          break;
        }
        BET3FLT__FreePStreamSM(v3 + v4 - 1496);
        BET3FLT__FreePStreamParam((void *)(*((void *)a1 + 3) + v4 - 1496));
        BET3FLT__FreePStreamSM(*((void *)a1 + 3) + v4 - 768);
        BET3FLT__FreePStreamParam((void *)(*((void *)a1 + 3) + v4 - 768));
        uint64_t v3 = *((void *)a1 + 3);
        uint64_t v5 = *(void *)(v3 + v4 - 16);
        if (v5)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v5);
          uint64_t v3 = *((void *)a1 + 3);
          *(void *)(v3 + v4 - 16) = 0;
        }
        uint64_t v6 = *(void *)(v3 + v4);
        if (v6)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v6);
          uint64_t v3 = *((void *)a1 + 3);
          *(void *)(v3 + v4) = 0;
        }
        ++v2;
        v4 += 1528;
      }
      while (v2 < a1[8]);
    }
    uint64_t v7 = *((void *)a1 + 6);
    if (v7)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v7);
      *((void *)a1 + 6) = 0;
    }
    uint64_t v8 = *((void *)a1 + 5);
    if (v8)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v8);
      *((void *)a1 + 5) = 0;
    }
    uint64_t v9 = *((void *)a1 + 3);
    if (v9)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v9);
      *((void *)a1 + 3) = 0;
    }
    MFS__DeInitUttModel((void *)a1 + 7);
    bzero(a1, 0x788uLL);
  }
}

void MFS__InitVParam(_DWORD *a1)
{
  a1[32] = 1;
}

void MFS__DeInitVParam(uint64_t a1, void *a2)
{
  if (a2[955])
  {
    for (uint64_t i = 0; i != 20; ++i)
    {
      if (*(void *)(a2[955] + 8 * i))
      {
        for (uint64_t j = 0; j != 800; j += 8)
        {
          uint64_t v6 = *(void *)(*(void *)(a2[955] + 8 * i) + j);
          if (v6)
          {
            heap_Free(*(void **)(a1 + 8), v6);
            *(void *)(*(void *)(a2[955] + 8 * i) + j) = 0;
          }
        }
        uint64_t v7 = *(void *)(a2[955] + 8 * i);
        if (v7)
        {
          heap_Free(*(void **)(a1 + 8), v7);
          *(void *)(a2[955] + 8 * i) = 0;
        }
      }
      uint64_t v8 = *(void *)(a2[956] + 8 * i);
      if (v8)
      {
        heap_Free(*(void **)(a1 + 8), v8);
        *(void *)(a2[956] + 8 * i) = 0;
      }
      uint64_t v9 = *(void *)(a2[954] + 8 * i);
      if (v9)
      {
        heap_Free(*(void **)(a1 + 8), v9);
        *(void *)(a2[954] + 8 * i) = 0;
      }
    }
    uint64_t v10 = a2[955];
    if (v10)
    {
      heap_Free(*(void **)(a1 + 8), v10);
      a2[955] = 0;
    }
    uint64_t v11 = a2[956];
    if (v11)
    {
      heap_Free(*(void **)(a1 + 8), v11);
      a2[956] = 0;
    }
    uint64_t v12 = a2[954];
    if (v12)
    {
      heap_Free(*(void **)(a1 + 8), v12);
      a2[954] = 0;
    }
  }
  uint64_t v13 = a2[10];
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    a2[10] = 0;
  }
  uint64_t v14 = a2[15];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    a2[15] = 0;
  }
  uint64_t v15 = a2[957];
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    a2[957] = 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  do
  {
    uint64_t v18 = (char *)&a2[v16];
    uint64_t v19 = *((void *)v18 + 18);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      *((void *)v18 + 18) = 0;
    }
    uint64_t v20 = *((void *)v18 + 53);
    if (v20)
    {
      heap_Free(*(void **)(a1 + 8), v20);
      *((void *)v18 + 53) = 0;
    }
    for (uint64_t k = 0; k != 5; ++k)
    {
      uint64_t v22 = &v17[k];
      uint64_t v23 = v17[k + 63];
      if (v23)
      {
        heap_Free(*(void **)(a1 + 8), v23);
        v22[63] = 0;
      }
      uint64_t v24 = v22[163];
      if (v24)
      {
        heap_Free(*(void **)(a1 + 8), v24);
        v22[163] = 0;
      }
    }
    for (uint64_t m = 213; m != 218; ++m)
    {
      uint64_t v26 = v17[m];
      if (v26)
      {
        heap_Free(*(void **)(a1 + 8), v26);
        v17[m] = 0;
      }
    }
    int v27 = (char *)a2 + 4 * v16;
    if (*((_DWORD *)v27 + 66))
    {
      unint64_t v28 = 0;
      int v29 = (unsigned int *)(v27 + 264);
      int v30 = (char *)&a2[v16];
      int v31 = v30 + 2344;
      int v32 = v30 + 2184;
      int v33 = v30 + 2264;
      do
      {
        if (*v31)
        {
          uint64_t v34 = *(void *)(*v31 + 8 * v28);
          if (v34)
          {
            heap_Free(*(void **)(a1 + 8), v34);
            *(void *)(*v31 + 8 * v28) = 0;
          }
        }
        if (*v32)
        {
          uint64_t v35 = *(void *)(*v32 + 8 * v28);
          if (v35)
          {
            heap_Free(*(void **)(a1 + 8), v35);
            *(void *)(*v32 + 8 * v28) = 0;
          }
        }
        if (*v33)
        {
          uint64_t v36 = *(void *)(*v33 + 8 * v28);
          if (v36)
          {
            heap_Free(*(void **)(a1 + 8), v36);
            *(void *)(*v33 + 8 * v28) = 0;
          }
        }
        ++v28;
      }
      while (v28 < *v29);
    }
    uint64_t v37 = (char *)&a2[v16];
    uint64_t v38 = *((void *)v37 + 293);
    if (v38)
    {
      heap_Free(*(void **)(a1 + 8), v38);
      *((void *)v37 + 293) = 0;
    }
    uint64_t v39 = *((void *)v37 + 273);
    if (v39)
    {
      heap_Free(*(void **)(a1 + 8), v39);
      *((void *)v37 + 273) = 0;
    }
    uint64_t v40 = (char *)&a2[v16];
    uint64_t v41 = *((void *)v40 + 283);
    if (v41)
    {
      unsigned int v42 = v40 + 2264;
      heap_Free(*(void **)(a1 + 8), v41);
      *unsigned int v42 = 0;
    }
    ++v16;
    v17 += 5;
  }
  while (v16 != 10);
  for (uint64_t n = 663; n != 919; ++n)
  {
    uint64_t v44 = a2[n];
    if (v44)
    {
      heap_Free(*(void **)(a1 + 8), v44);
      a2[n] = 0;
    }
  }
  if (a2[952])
  {
    for (iuint64_t i = 0; ii != 2048; ii += 8)
    {
      uint64_t v46 = *(void *)(a2[952] + ii);
      if (v46)
      {
        heap_Free(*(void **)(a1 + 8), v46);
        *(void *)(a2[952] + ii) = 0;
      }
    }
    heap_Free(*(void **)(a1 + 8), a2[952]);
  }
  bzero(a2, 0x1F38uLL);
}

unsigned __int8 *LZ_Uncompress(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unsigned int v3 = 0;
    int v4 = *result;
    unsigned int v5 = 1;
    do
    {
      uint64_t v6 = v5 + 1;
      int v7 = result[v5];
      if (v7 == v4)
      {
        if (result[v6])
        {
          int v8 = result[v6] & 0x7F;
          if ((result[v6] & 0x80) != 0)
          {
            uint64_t v9 = 1;
            do
            {
              unsigned __int8 v10 = result[v6 + v9];
              int v8 = v10 & 0x7F | (v8 << 7);
              ++v9;
            }
            while ((v10 & 0x80) != 0);
          }
          else
          {
            LODWORD(v9) = 1;
          }
          int v11 = 0;
          uint64_t v6 = (v9 + v6);
          uint64_t v12 = &result[v6];
          do
          {
            int v13 = v11;
            char v15 = *v12++;
            char v14 = v15;
            int v11 = v15 & 0x7F | (v11 << 7);
            LODWORD(v6) = v6 + 1;
          }
          while (v15 < 0);
          if (v8)
          {
            unsigned int v16 = v8 + v3;
            int v17 = -(v14 & 0x7F | (v13 << 7));
            do
            {
              *(unsigned char *)(a2 + v3) = *(unsigned char *)(a2 + v17 + v3);
              ++v3;
              --v8;
            }
            while (v8);
            unsigned int v3 = v16;
          }
        }
        else
        {
          *(unsigned char *)(a2 + v3++) = v4;
          LODWORD(v6) = v5 + 2;
        }
      }
      else
      {
        *(unsigned char *)(a2 + v3++) = v7;
      }
      unsigned int v5 = v6;
    }
    while (v6 < a3);
  }
  return result;
}

unsigned __int8 *Huffman_Uncompress(uint64_t a1)
{
  uint64_t result = (unsigned __int8 *)MEMORY[0x270FA5388](a1);
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (v4)
  {
    int v5 = v3;
    uint64_t v6 = v2;
    char v15 = result;
    uint64_t v16 = 0;
    unsigned int v14 = 0;
    uint64_t result = (unsigned __int8 *)_Huffman_RecoverTree((uint64_t)v17, &v15, &v14);
    if (v5)
    {
      int v7 = 0;
      int v8 = v15;
      LOBYTE(v9) = v16;
      do
      {
        int v10 = *((_DWORD *)result + 4);
        if (v10 < 0)
        {
          int v11 = result;
          do
          {
            unsigned int v12 = *v8;
            char v13 = 7 - v9;
            int v9 = ((_BYTE)v9 + 1) & 7;
            if (!v9) {
              ++v8;
            }
            LODWORD(v16) = v9;
            char v15 = v8;
            if ((v12 >> v13)) {
              v11 += 8;
            }
            int v11 = *(unsigned __int8 **)v11;
            int v10 = *((_DWORD *)v11 + 4);
          }
          while (v10 < 0);
        }
        *v6++ = v10;
        ++v7;
      }
      while (v7 != v5);
    }
  }
  return result;
}

void *_Huffman_RecoverTree(uint64_t a1, unsigned __int8 **a2, unsigned int *a3)
{
  unsigned int v4 = *a3;
  int v5 = (void *)(a1 + 24 * (*a3)++);
  uint64_t v6 = a1 + 24 * v4;
  *(_DWORD *)(v6 + 16) = -1;
  int v7 = (int *)(v6 + 16);
  *int v5 = 0;
  v5[1] = 0;
  int v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  unsigned int v10 = **a2;
  int v11 = ((_BYTE)v9 + 1) & 7;
  if ((((_BYTE)v9 + 1) & 7) == 0) {
    int v8 = *a2 + 1;
  }
  *((_DWORD *)a2 + 2) = v11;
  *a2 = v8;
  if ((v10 >> (7 - v9)))
  {
    int v12 = *v8 << v11;
    unsigned int v13 = v8[1];
    *a2 = v8 + 1;
    int *v7 = (v13 >> (8 - v11)) | v12;
  }
  else
  {
    uint64_t v16 = a1 + 24 * v4;
    *int v5 = ((uint64_t (*)(void))_Huffman_RecoverTree)();
    *(void *)(v16 + 8) = _Huffman_RecoverTree(a1, a2, a3);
  }
  return v5;
}

uint64_t writeToPeriVec_0(uint64_t a1, unsigned int a2, __int16 a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 <= a2)
  {
    uint64_t v7 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 8), 2 * (v6 + 150));
    if (!v7) {
      return 2164269066;
    }
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) += 150;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = 0;
  *(_WORD *)(v7 + 2 * a2) = a3;
  return v8;
}

uint64_t Psola_GetDecodedUnitData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, _WORD *a9, int *a10, _DWORD *a11, _DWORD *a12)
{
  if (!a3) {
    return 0;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v37[0] = 0;
  v37[1] = 0;
  Unituint64_t Data = Lookup_GetUnitData(*(void **)(a1 + 24), a4, (uint64_t)v37);
  if ((UnitData & 0x80000000) != 0) {
    return UnitData;
  }
  if (a6 + a5 + a7 <= a8)
  {
    int v20 = HIDWORD(v37[0]);
    if (HIDWORD(v37[0]) >= a5) {
      unsigned int v21 = a5;
    }
    else {
      unsigned int v21 = HIDWORD(v37[0]);
    }
    *a10 = v21;
    *a11 = a6;
    *a12 = a7;
    int v22 = *a10;
    int v23 = *a10 + a7 + *a11;
    uint64_t v40 = 0;
    if (*(_DWORD *)(a1 + 76)) {
      int v24 = *(_DWORD *)(a1 + 21304);
    }
    else {
      int v24 = 0;
    }
    uint64_t Segment = concat_getSegment(a1, a4, v20 - v22, v23, (uint64_t)&v38, v24);
    unsigned int v25 = HIDWORD(v39);
    uint64_t v26 = v40;
    if (HIDWORD(v39))
    {
      double v27 = *(double *)(a1 + 21336);
      uint64_t v28 = HIDWORD(v39);
      int v29 = (float *)v40;
      do
      {
        float v30 = v27 * *v29;
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
    if (*(_DWORD *)(a1 + 21316) == 1)
    {
      concat_applyBPF(*(void *)a1, v26, v25);
      unsigned int v25 = HIDWORD(v39);
      uint64_t v26 = v40;
    }
    if (v25)
    {
      uint64_t v32 = v25;
      int v33 = (float *)v26;
      do
      {
        float v34 = *v33;
        if (*v33 <= 32767.0)
        {
          if (v34 >= -32768.0) {
            int v35 = (int)v34;
          }
          else {
            LOWORD(v35) = 0x8000;
          }
        }
        else
        {
          LOWORD(v35) = 0x7FFF;
        }
        *a9++ = v35;
        ++v33;
        --v32;
      }
      while (v32);
    }
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v26);
  }
  else
  {
    *a10 = 0;
    *a11 = 0;
    uint64_t Segment = 2164269065;
    *a12 = 0;
  }
  return Segment;
}

uint64_t concat_getSegment(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6 = a4;
  *(_DWORD *)(a5 + 12) = a4;
  int v9 = (int *)(a5 + 12);
  *(_DWORD *)(a5 + 8) = a4;
  if (a4 <= 0)
  {
    *int v9 = 0;
    log_wsola_Diag(*(void *)a1, 1, (uint64_t)"WARNING: Segment in unit %d has a duration of %d\n");
    return 2164269063;
  }
  int v11 = *(uint64_t **)(*(void *)a1 + 8);
  if (!a6)
  {
    uint64_t v16 = heap_Calloc(v11, a4, 2);
    if (!v16)
    {
      uint64_t v14 = 2164269066;
      goto LABEL_32;
    }
    int v22 = (__int16 *)v16;
    if (a2 <= 0xFFFFFFFD)
    {
      Lookup_Init(*(void *)(a1 + 24), a3, *v9);
      Lookup_Decode(*(void *)(a1 + 24), v9, (uint64_t)v22);
      unsigned int v6 = *v9;
    }
    if (a2 == -2)
    {
      unsigned int v25 = *(_DWORD *)(a1 + 72);
      if (v25 <= a3)
      {
        log_wsola_Error(*(void *)a1, 59012, 0, v17, v18, v19, v20, v21);
        return 2164269071;
      }
      if (*v9 + a3 > v25) {
        unsigned int v6 = v25 - a3;
      }
      int v24 = (void *)(a1 + 64);
    }
    else
    {
      if (a2 != -1) {
        goto LABEL_23;
      }
      unsigned int v23 = *(_DWORD *)(a1 + 56);
      if (v23 <= a3) {
        goto LABEL_23;
      }
      if (*v9 + a3 > v23) {
        unsigned int v6 = v23 - a3;
      }
      int v24 = (void *)(a1 + 48);
    }
    memcpy(v22, (const void *)(*v24 + 2 * a3), 2 * v6);
LABEL_23:
    uint64_t v26 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a5 + 16), 4 * *(unsigned int *)(a5 + 12));
    *(void *)(a5 + 16) = v26;
    if (v26)
    {
      uint64_t v27 = *v9;
      if (v27)
      {
        for (unint64_t i = 0; i != v27; ++i)
        {
          float v29 = 0.0;
          if (i < v6) {
            float v29 = (float)v22[i];
          }
          *(float *)(v26 + 4 * i) = v29;
        }
      }
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v22);
      return 0;
    }
    uint64_t v14 = 2164269066;
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v22);
LABEL_32:
    log_wsola_Error(*(void *)a1, 59000, 0, v17, v18, v19, v20, v21);
    return v14;
  }
  int v12 = (void *)heap_Realloc(v11, *(void *)(a5 + 16), 4 * a4);
  *(void *)(a5 + 16) = v12;
  if (v12)
  {
    uint64_t v13 = *v9;
    if (v13) {
      bzero(v12, 4 * v13);
    }
    return 0;
  }
  uint64_t v14 = 2164269066;
  log_wsola_Diag(*(void *)a1, 1, (uint64_t)"ERROR: Out of memory\n");
  heap_Free(*(void **)(*(void *)a1 + 8), 0);
  return v14;
}

uint64_t Psola_SynthSilence_0(uint64_t *a1, int *a2, int a3, int *a4)
{
  int v7 = (1000 * a3 + 500) / 1000;
  Psola_FlushOlaBufPart_1(a1, a2, *a4);
  int v8 = *a4 + v7;
  *a4 = v8;
  if (*a2 <= v8) {
    Psola_AddToOlaBufAux_1(a1, a2, (uint64_t)v10, 0, 0, v8);
  }
  return 0;
}

void Psola_FlushOlaBufPart_1(uint64_t *a1, _DWORD *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v3 = a3 - *a2;
  if (v3 >= 1)
  {
    int v6 = a2[1];
    int v7 = a2[2];
    if (v3 >= v7) {
      signed int v8 = a2[2];
    }
    else {
      signed int v8 = v3;
    }
    if (v8 >= 2400 - v6) {
      signed int v9 = 2400 - v6;
    }
    else {
      signed int v9 = v8;
    }
    if (v3 >= v7) {
      signed int v10 = v7 - v9;
    }
    else {
      signed int v10 = v3 - v9;
    }
    if (v9 >= 1)
    {
      Wsola__write_audioX(a1, (uint64_t)(a2 + 3), v6, v9);
      bzero((char *)a2 + 2 * a2[1] + 12, 2 * v9);
    }
    if (v10 >= 1)
    {
      Wsola__write_audioX(a1, (uint64_t)(a2 + 3), 0, v10);
      bzero(a2 + 3, 2 * v10);
    }
    int v11 = v3 - v9 - v10;
    if (v11 >= 1)
    {
      uint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      do
      {
        if (v11 >= 100) {
          unsigned int v12 = 100;
        }
        else {
          unsigned int v12 = v11;
        }
        Wsola__write_audioX(a1, (uint64_t)v15, 0, v12);
        BOOL v13 = __OFSUB__(v11, v12);
        v11 -= v12;
      }
      while (!((v11 < 0) ^ v13 | (v11 == 0)));
    }
    int v14 = a2[1] + v3;
    *a2 += v3;
    a2[1] = v14 % 2400;
    a2[2] -= v10 + v9;
  }
}

uint64_t Psola_Initialise(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10 = 2164269066;
  uint64_t v11 = heap_Calloc(*(void **)(a2 + 8), 1, 136);
  *a1 = v11;
  if (v11)
  {
    uint64_t v12 = v11;
    *(unsigned char *)(v11 + 112) = 1;
    uint64_t v13 = heap_Alloc(*(void *)(a2 + 8), 4812);
    *(void *)(v12 + 16) = v13;
    if (v13)
    {
      uint64_t v14 = heap_Alloc(*(void *)(a2 + 8), 48000);
      *(void *)(v12 + 24) = v14;
      if (v14)
      {
        uint64_t v15 = heap_Alloc(*(void *)(a2 + 8), 48);
        *(void *)(v12 + 32) = v15;
        if (v15)
        {
          *(void *)(v15 + 8) = 961;
          uint64_t v16 = heap_Alloc(*(void *)(a2 + 8), 1922);
          uint64_t v17 = *(uint64_t **)(v12 + 32);
          *uint64_t v17 = v16;
          if (v16)
          {
            v17[3] = 961;
            uint64_t v18 = heap_Alloc(*(void *)(a2 + 8), 1922);
            uint64_t v19 = *(void **)(v12 + 32);
            v19[2] = v18;
            if (*v19)
            {
              v19[5] = 961;
              uint64_t v20 = heap_Alloc(*(void *)(a2 + 8), 1922);
              *(void *)(*(void *)(v12 + 32) + 32) = v20;
              if (v20)
              {
                uint64_t v21 = newPeriDesc(a2);
                *(void *)(v12 + 64) = v21;
                if (v21)
                {
                  int v22 = newPeriDesc(a2);
                  *(void *)(v12 + 72) = v22;
                  if (v22)
                  {
                    bzero(*(void **)(v12 + 16), 0x12CCuLL);
                    *(void *)(v12 + 88) = 0;
                    uint64_t v23 = *(void *)(v12 + 72);
                    *(_WORD *)uint64_t v23 = 0;
                    *(_DWORD *)(v23 + 2) = 0;
                    uint64_t v24 = *(void *)(v12 + 64);
                    *(_WORD *)uint64_t v24 = 0;
                    *(_DWORD *)(v24 + 2) = 0;
                    uint64_t v25 = Psola_SetUpCrossFading_1(a3, 100, 100, (unsigned __int16 *)v23, (unsigned __int16 *)v24, (_DWORD *)(v12 + 8), (int *)(v12 + 12));
                    if ((v25 & 0x80000000) != 0)
                    {
                      return v25;
                    }
                    else
                    {
                      uint64_t v10 = 0;
                      *(void *)uint64_t v12 = 0x100000000;
                      *(_DWORD *)(v12 + 96) = 0;
                      *(_DWORD *)(v12 + 100) = a3;
                      *(_DWORD *)(v12 + 40) = 0;
                      *(float *)(v12 + 116) = (float)a4;
                      *(float *)(v12 + 120) = (float)a5;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v10;
}

uint64_t Psola_SetUpCrossFading_1(int a1, int a2, int a3, unsigned __int16 *a4, unsigned __int16 *a5, _DWORD *a6, int *a7)
{
  int v11 = a2 * a1;
  uint64_t v12 = 274877907 * a2 * a1;
  unint64_t v13 = (unint64_t)v12 >> 63;
  uint64_t v14 = v12 >> 38;
  int v15 = a3 * a1 / 1000;
  uint64_t v16 = a4[1] + *a4;
  *a7 = 0;
  if (a4[2])
  {
    unint64_t v43 = (unint64_t)v12 >> 63;
    int v45 = a2 * a1;
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      if (v17 >= a5[1] >> 1 || v18 >= v15) {
        break;
      }
      uint64_t v20 = *((void *)a5 + 8);
      int v21 = *(__int16 *)(v20 + 2 * (v17 + *a5));
      writeToPeriVec_0((uint64_t)(a4 + 28), v16 + v17, *(_WORD *)(v20 + 2 * (v17 + *a5)));
      int v18 = *a7 + v21;
      *a7 = v18;
      ++v17;
    }
    while (v17 < a4[2]);
    int v11 = v45;
    LODWORD(v13) = v43;
  }
  else
  {
    LOWORD(v17) = 0;
  }
  int v46 = v14 + v13;
  a4[2] = v17;
  *a6 = 0;
  LODWORD(v22) = *a5;
  if (*a5)
  {
    int v23 = 0;
    if (a4[1] && v11 >= 1000)
    {
      uint64_t v24 = 2 * v16 - 2;
      int v25 = -1;
      unint64_t v26 = 1;
      do
      {
        int v27 = v25;
        int v28 = *(__int16 *)(*((void *)a4 + 8) + v24);
        writeToPeriVec_0((uint64_t)(a5 + 28), v22 + v25, *(_WORD *)(*((void *)a4 + 8) + v24));
        int v23 = *a6 + v28;
        *a6 = v23;
        unint64_t v22 = *a5;
        if (v26 >= v22) {
          break;
        }
        int v25 = v27 - 1;
        BOOL v29 = v26++ >= ((unint64_t)a4[1] + 1) >> 1;
        v24 -= 2;
      }
      while (!v29 && v23 < v46);
      int v31 = -v27;
    }
    else
    {
      int v31 = 0;
    }
    unsigned int v32 = v22;
  }
  else
  {
    int v23 = 0;
    int v31 = 0;
    unsigned int v32 = 0;
  }
  unsigned int v33 = v32 - v31;
  if ((int)(v32 - v31) >= 1)
  {
    uint64_t v34 = a5[1];
    uint64_t v35 = a5[2];
    if (v33 < v32 + v34 + v35)
    {
      __int16 v42 = v32 - v31;
      int v44 = v15;
      uint64_t v36 = 0;
      uint64_t v37 = 2 * -v31 + 2 * v32;
      uint64_t v38 = v35 + v34 - -v31;
      do
      {
        writeToPeriVec_0((uint64_t)(a5 + 4), v36, *(_WORD *)(*((void *)a5 + 2) + v37 + 2 * v36));
        writeToPeriVec_0((uint64_t)(a5 + 16), v36, *(_WORD *)(*((void *)a5 + 5) + v37 + 2 * v36));
        writeToPeriVec_0((uint64_t)(a5 + 28), v36, *(_WORD *)(*((void *)a5 + 8) + v37 + 2 * v36));
        ++v36;
      }
      while (v38 != v36);
      LOWORD(v22) = *a5;
      int v23 = *a6;
      LOWORD(v33) = v42;
      int v15 = v44;
    }
    *a5 = v22 - v33;
  }
  int v39 = v46;
  if (v23 < v46) {
    int v39 = v23;
  }
  *a6 = v39;
  int v40 = *a7;
  if (*a7 >= v15) {
    int v40 = v15;
  }
  *a7 = v40;
  if (!((*a6 + v40 < 0) ^ __OFADD__(*a6, v40) | (*a6 + v40 == 0)) || !a4[1]) {
    return 0;
  }
  if (a5[1]) {
    return 2164269071;
  }
  return 0;
}

uint64_t Psola_Synthesis(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)a2;
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 21280;
  uint64_t v5 = *(void *)(a2 + 104);
  uint64_t v6 = *(int *)(a2 + 96);
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(v5 + 40 * (int)v6);
  if (v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 40 * (int)(v6 - *(unsigned __int8 *)(a2 + 112)));
  }
  else {
    unsigned int v9 = -1;
  }
  uint64_t v10 = v5 + 40 * (int)v6;
  float v11 = (float)*(unsigned int *)(v3 + 40) / 1000.0;
  *(_DWORD *)uint64_t v4 = v8;
  *(int32x2_t *)(v3 + 21288) = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v10 + 4)), v11));
  *(_DWORD *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 20) = 34;
  *(_DWORD *)(v4 + 24) = v8 == -1;
  *(_DWORD *)(v4 + 28) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  MsgName = mfs_GetMsgName(v7, v8);
  unint64_t v13 = MsgName;
  unsigned int v15 = *(_DWORD *)(v10 + 4);
  int v14 = *(_DWORD *)(v10 + 8);
  uint64_t v16 = *((void *)v2 + 16);
  uint64_t v17 = *(void *)(v16 + 8 * v6);
  *((void *)v2 + 7) = v17;
  if (!v6)
  {
    *((void *)v2 + 6) = 0;
    uint64_t v36 = (_WORD **)(v2 + 12);
LABEL_30:
    uint64_t v37 = *((void *)v2 + 9);
    *(_DWORD *)uint64_t v37 = 0;
    *(_WORD *)(v37 + 4) = 0;
LABEL_31:
    int v38 = v2[25];
    int v39 = *(_DWORD *)(v5 + 40 * (int)v6 + 24);
    __int16 v40 = v14;
    if ((int)v6 < 1) {
      int v41 = 100;
    }
    else {
      int v41 = *(_DWORD *)(v5 + 40 * (v6 - 1) + 28);
    }
    uint64_t v183 = 0;
    uint64_t result = Psola_SetUpCrossFading_1(v38, v39, v41, *((unsigned __int16 **)v2 + 8), *((unsigned __int16 **)v2 + 9), (_DWORD *)&v183 + 1, (int *)&v183);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v6)
    {
      __int16 v42 = v15;
      if (v9 == -1)
      {
        unsigned int v15 = v2[25] * *((unsigned __int16 *)v2 + 41) / 0x3E8;
        log_wsola_Diag(*(void *)v3, 3, (uint64_t)"Parametric silence for s32uint64_t i = %d\n");
      }
      else
      {
        log_wsola_Diag(*(void *)v3, 3, (uint64_t)"Non silence unit %d for s32uint64_t i = %d\n");
        if (**v36) {
          unsigned int v15 = -1;
        }
        else {
          unsigned int v15 = (int)((double)(v2[25] * *((unsigned __int16 *)v2 + 41)) / 1000.0);
        }
      }
      log_wsola_Diag(*(void *)v3, 3, (uint64_t)"SynthSilence debugging, s32i=%d, s32SilLen %d\n");
      log_wsola_Diag(*(void *)v3, 3, (uint64_t)"SynthSilence - next unit is going to be %d\n");
      if ((v15 & 0x80000000) != 0)
      {
        int v46 = (unsigned __int16 *)*((void *)v2 + 6);
        int v47 = (_WORD *)*((void *)v2 + 3);
        v185[0] = 0;
        int v184 = 0;
        int v48 = (__int16 *)*((void *)v46 + 2);
        int v49 = *v48;
        if (v49 <= 0) {
          unsigned int v50 = -v49;
        }
        else {
          unsigned int v50 = 0;
        }
        uint64_t v51 = (unsigned __int16)(v46[1] + v46[2] + v46[3] - 1);
        int v52 = *(__int16 *)(*((void *)v46 + 5) + 2 * v51) + v48[v51];
        uint64_t result = Psola_GetDecodedUnitData(v3, v43, (uint64_t)(v2 + 20), v9, v50, *v46, (v52 - *v46) & ~((v52 - *v46) >> 31), 0x5DC0u, v47, (int *)v185 + 1, &v184, v185);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = 2164269065;
        int v53 = HIDWORD(v185[0]);
        if (HIDWORD(v185[0]) + **((__int16 **)v46 + 2) < 0
          || HIDWORD(v185[0]) + v52 > v184 + HIDWORD(v185[0]) + LODWORD(v185[0]))
        {
          return result;
        }
        log_wsola_Diag(*(void *)v3, 3, (uint64_t)"About to call synthesis for unitID %d\n");
        int v54 = (unsigned __int16 *)*((void *)v2 + 8);
        uint64_t v55 = *v54;
        int v56 = v54[1];
        float v177 = v54;
        uint64_t v57 = (__int16 *)*((void *)v54 + 8);
        int v58 = 0;
        if (v55)
        {
          int v59 = v55;
          uint64_t v60 = v57;
          LOWORD(v15) = v42;
          uint64_t v61 = (unsigned __int16 *)*((void *)v2 + 8);
          do
          {
            int v62 = *v60++;
            v58 += v62;
            --v59;
          }
          while (v59);
        }
        else
        {
          LOWORD(v15) = v42;
          uint64_t v61 = (unsigned __int16 *)*((void *)v2 + 8);
        }
        int v95 = v56 + v55;
        int v96 = v2[2];
        int v97 = v2[3];
        int v98 = 0;
        if (v56)
        {
          uint64_t v99 = &v57[v55];
          do
          {
            int v100 = *v99++;
            v98 += v100;
            --v56;
          }
          while (v56);
        }
        uint64_t v101 = v95 + v61[2];
        int v102 = HIDWORD(v183);
        int v103 = *v2;
        int v171 = v97 + v96;
        if ((v171 < 0) ^ __OFADD__(v97, v96) | (v171 == 0))
        {
          unsigned int v104 = (unsigned __int16)v57[v55];
          int v171 = (int)((v104 + (v104 >> 15)) << 16) >> 17;
          int v167 = *v2;
        }
        else
        {
          int v167 = v103 - v96;
        }
        int v169 = v183 + HIDWORD(v183);
        if (((int)v183 + HIDWORD(v183) < 0) ^ __OFADD__(v183, HIDWORD(v183)) | (v183 + HIDWORD(v183) == 0))
        {
          unsigned int v105 = (unsigned __int16)v57[v95 - 1];
          int v102 = (__int16)(v105 + (v105 >> 15)) >> 1;
          int v169 = v102;
        }
        int v106 = v103 + v98;
        if (v101)
        {
          __int16 v144 = v15;
          uint64_t v146 = v13;
          uint64_t v107 = 0;
          int v108 = 0;
          uint64_t v109 = *((void *)v2 + 3);
          uint64_t v110 = *((void *)v2 + 4);
          unsigned int v161 = v2 + 10;
          float v173 = (int *)*((void *)v2 + 2);
          int v154 = v106 - v102;
          uint64_t v150 = v2;
          uint64_t v175 = *((void *)v2 + 6);
          int v182 = v103 - v58;
          uint64_t v148 = (uint64_t *)(v110 + 16);
          uint64_t v142 = (v101 - 1);
          uint64_t v152 = (v101 + 1);
          int v165 = v53;
          uint64_t v163 = v101;
          uint64_t v160 = v109;
          uint64_t v156 = (uint64_t *)v3;
          __int16 v158 = v40;
          do
          {
            int v180 = v108;
            if (v107)
            {
              if (v107 == v101)
              {
                uint64_t v111 = *(__int16 *)(*((void *)v61 + 2) + 2 * v142);
                LODWORD(v112) = *(__int16 *)(*(void *)(v175 + 40) + 2 * v111);
                uint64_t result = Psola_CopyDataPart(*(uint64_t **)(*(void *)v3 + 8), v109, v53 + *(__int16 *)(*(void *)(v175 + 16) + 2 * v111), v112, (uint64_t *)v110);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                LODWORD(v113) = 0;
                int v114 = 0;
                uint64_t v115 = (__int16 *)(*((void *)v61 + 8) + 2 * v142);
              }
              else
              {
                int v117 = *(unsigned __int16 *)(*((void *)v61 + 5) + 2 * v107);
                uint64_t v118 = *(__int16 *)(*((void *)v61 + 2) + 2 * v107);
                uint64_t v119 = v118 - 1;
                uint64_t v120 = *(void *)(v175 + 40);
                uint64_t v121 = *(void *)(v175 + 16);
                if (v117)
                {
                  unint64_t v112 = *(__int16 *)(v120 + 2 * v118);
                  unint64_t v113 = *(__int16 *)(v120 + 2 * v119);
                  int v122 = *(__int16 *)(v121 + 2 * v118);
                  uint64_t result = Psola_ReallocIfNeeded(*(uint64_t **)(*(void *)v3 + 8), (uint64_t *)v110, v112);
                  if ((int)v112 >= 1 && (result & 0x80000000) == 0)
                  {
                    uint64_t v123 = (__int16 *)(v109 + 2 * (v53 + v122));
                    uint64_t v124 = (_WORD *)(*(void *)v110 + 2 * v112 - 2);
                    int v125 = v112;
                    do
                    {
                      __int16 v126 = *v123++;
                      *v124-- = v126;
                      --v125;
                    }
                    while (v125);
                  }
                  uint64_t v127 = v177;
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  int v128 = *(__int16 *)(*(void *)(v175 + 16) + 2 * v119);
                  uint64_t result = Psola_ReallocIfNeeded(*(uint64_t **)(*(void *)v3 + 8), v148, v113);
                  if ((int)v113 >= 1 && (result & 0x80000000) == 0)
                  {
                    float v129 = (__int16 *)(v109 + 2 * (v53 + v128));
                    float v130 = (_WORD *)(*v148 + 2 * v113 - 2);
                    int v131 = v113;
                    do
                    {
                      __int16 v132 = *v129++;
                      *v130-- = v132;
                      --v131;
                    }
                    while (v131);
                  }
                }
                else
                {
                  LODWORD(v112) = *(__int16 *)(v120 + 2 * v119);
                  LODWORD(v113) = *(__int16 *)(v120 + 2 * v118);
                  uint64_t result = Psola_CopyDataPart(*(uint64_t **)(*(void *)v3 + 8), v109, v53 + *(__int16 *)(v121 + 2 * v119), v112, (uint64_t *)v110);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t result = Psola_CopyDataPart(*(uint64_t **)(*(void *)v3 + 8), v109, v53 + *(__int16 *)(*(void *)(v175 + 16) + 2 * v118), v113, v148);
                  uint64_t v127 = v177;
                }
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v133 = (__int16 *)(*((void *)v127 + 8) + 2 * v107);
                int v134 = *v133;
                uint64_t v115 = v133 - 1;
                int v114 = v134;
              }
              int v135 = *v115;
              if ((int)v112 > v135)
              {
                memmove(*(void **)v110, (const void *)(*(void *)v110 + 2 * ((int)v112 - *v115)), 2 * *v115);
                LODWORD(v112) = v135;
              }
            }
            else
            {
              uint64_t v116 = **((__int16 **)v61 + 2);
              LODWORD(v113) = *(__int16 *)(*(void *)(v175 + 40) + 2 * v116);
              uint64_t result = Psola_CopyDataPart(*(uint64_t **)(*(void *)v3 + 8), v109, v53 + *(__int16 *)(*(void *)(v175 + 16) + 2 * v116), v113, v148);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              LODWORD(v112) = 0;
              int v114 = **((__int16 **)v61 + 8);
            }
            if ((int)v113 >= v114) {
              LODWORD(v113) = v114;
            }
            Psola_ApplyHanning_1(*(__int16 **)(v110 + 32), v161, *(__int16 **)v110, v112, 1);
            Psola_ApplyHanning_1(*(__int16 **)(v110 + 32), v161, *(__int16 **)(v110 + 16), v113, 0);
            Psola_ApplyFadingPart(*(__int16 **)v110, v112, v182 - v112, v167, v171, 1);
            Psola_ApplyFadingPart(*(__int16 **)(v110 + 16), v113, v182, v167, v171, 1);
            Psola_ApplyFadingPart(*(__int16 **)v110, v112, v182 - v112, v154, v169, 0);
            Psola_ApplyFadingPart(*(__int16 **)(v110 + 16), v113, v182, v154, v169, 0);
            uint64_t v3 = (uint64_t)v156;
            Psola_AddToOlaBuf_1(v156, v173, *(void *)v110, v112, v182 - v112);
            Psola_AddToOlaBuf_1(v156, v173, *(void *)(v110 + 16), v113, v182);
            int v108 = 1;
            v182 += v114;
            __int16 v40 = v158;
            int v53 = v165;
            uint64_t v101 = v163;
            uint64_t v109 = v160;
            if (!v180)
            {
              if (v182 >= *v150 + 961 || v107 == v163)
              {
                Psola_FlushOlaBufPart_1(v156, v173, *v150);
                int v108 = 1;
              }
              else
              {
                int v108 = 0;
              }
            }
            ++v107;
            uint64_t v61 = v177;
          }
          while (v107 != v152);
          uint64_t v2 = v150;
          int v106 = *v150 + v98;
          unint64_t v13 = v146;
          LOWORD(v15) = v144;
        }
        *uint64_t v2 = v106;
      }
      else
      {
        Psola_SynthSilence_0((uint64_t *)v3, *((int **)v2 + 2), v15, v2);
        LOWORD(v15) = v42;
      }
    }
    log_wsola_Diag(*(void *)v3, 3, (uint64_t)"BANANA: Synthesis of unit %d has just been completed\n\n");
    *((_WORD *)v2 + 40) = v15;
    *((_WORD *)v2 + 41) = v40;
    v2[21] = 0;
    *((void *)v2 + 11) = v13;
    *((int8x16_t *)v2 + 4) = vextq_s8(*((int8x16_t *)v2 + 4), *((int8x16_t *)v2 + 4), 8uLL);
    int v44 = v183;
    v2[2] = HIDWORD(v183);
    v2[3] = v44;
    v2[1] = 3 - v2[1];
LABEL_45:
    ++v2[24];
    int v45 = *(uint64_t **)(v3 + 24);
    return Lookup_DeInit(v45);
  }
  *((void *)v2 + 6) = *(void *)(v16 + 8 * ((int)v6 - 1));
  uint64_t v159 = (_WORD **)(v2 + 12);
  if (v8 == -1)
  {
    uint64_t v36 = (_WORD **)(v2 + 12);
    goto LABEL_30;
  }
  __int16 v18 = *(_WORD *)(v17 + 4);
  if (!v18)
  {
    ++*((unsigned char *)v2 + 112);
    goto LABEL_45;
  }
  __int16 v157 = v14;
  *((unsigned char *)v2 + 112) = 1;
  double v19 = *(double *)(v3 + 21352) * 0.5 + 100.0;
  uint64_t v140 = v5;
  uint64_t v20 = (_DWORD *)(v5 + 40 * (int)v6);
  int v21 = v20[3] * (int)v19;
  int v22 = (v21 + 50) / 100;
  int v23 = v20[4] * (int)v19;
  int v24 = (v23 + 50) / 100;
  v20[3] = v22;
  v20[4] = v24;
  int v25 = v20[5];
  uint64_t v26 = *(unsigned __int16 *)(v17 + 2);
  unsigned __int16 v141 = v26 + v18;
  unsigned __int16 v27 = v26 + v18 - 1;
  int v28 = 0;
  if (v26 <= v27)
  {
    int v29 = *(unsigned __int16 *)(v17 + 2);
    do
      v28 += *(__int16 *)(*(void *)(v17 + 40) + 2 * (unsigned __int16)v29++);
    while ((unsigned __int16)v29 <= v27);
  }
  int v151 = v2[25];
  if (v25 < 0)
  {
    if (v151 >= 0) {
      int v30 = v2[25];
    }
    else {
      int v30 = v151 + 1;
    }
    int v31 = (1000 * v28 + (v30 >> 1)) / v151;
    if (v31 >= 0) {
      int v32 = (1000 * v28 + (v30 >> 1)) / v151;
    }
    else {
      int v32 = v31 + 1;
    }
    int v25 = (-1000 * v25 + (v32 >> 1)) / v31;
  }
  __int16 v143 = v15;
  uint64_t v145 = MsgName;
  unsigned int v147 = v9;
  int v181 = v28;
  if (v25) {
    int v181 = (v25 * v28 + 500) / 1000;
  }
  float v149 = v2;
  unsigned int v33 = (_WORD *)*((void *)v2 + 9);
  uint64_t result = 2164269074;
  if (v21 >= 50 && v23 < 50 || v21 <= 49 && v23 > 49) {
    return result;
  }
  *unsigned int v33 = 0;
  uint64_t v155 = v3;
  int v176 = (v21 + 50) / 100;
  int v174 = v25;
  if (v26)
  {
    int v178 = (v23 + 50) / 100;
    for (uint64_t i = 0; i != v26; ++i)
    {
      writeToPeriVec_0((uint64_t)(v33 + 4), i, i);
      writeToPeriVec_0((uint64_t)(v33 + 16), i, 0);
      writeToPeriVec_0((uint64_t)(v33 + 28), i, *(_WORD *)(*(void *)(v17 + 40) + 2 * i));
      ++*v33;
    }
    int v22 = v176;
    int v25 = v174;
    int v24 = v178;
  }
  else
  {
    LODWORD(i) = 0;
  }
  v33[1] = 0;
  if (v26 <= v27)
  {
    int v67 = 0;
    unsigned int v68 = 0;
    unsigned int v69 = 0;
    int v153 = v24 - v22;
    if (v28 >= 0) {
      int v70 = v28;
    }
    else {
      int v70 = v28 + 1;
    }
    int v137 = v70 >> 1;
    uint64_t v166 = (uint64_t)(v33 + 4);
    uint64_t v162 = (uint64_t)(v33 + 16);
    uint64_t v164 = (uint64_t)(v33 + 28);
    uint64_t v179 = v17;
    int v168 = v6;
    while (1)
    {
      uint64_t v71 = (unsigned __int16)v26;
      uint64_t v72 = *(unsigned __int16 *)(*(void *)(v17 + 40) + 2 * (unsigned __int16)v26);
      if (v25) {
        v69 += (v25 * (int)v72 + 500) / 1000;
      }
      else {
        unsigned int v69 = v68 + v72;
      }
      int v73 = i <= 0x2710 ? 10000 : i;
      BOOL v74 = (unsigned __int16)v26 == v27 && v68 == 0;
      BOOL v75 = v74;
      BOOL v76 = v68 + (v72 >> 1) > v69 && !v75;
      int v138 = v67;
      if (!v76) {
        break;
      }
LABEL_123:
      int v67 = v138 + v72;
      LOWORD(v26) = v71 + 1;
      uint64_t v3 = v155;
      uint64_t v17 = v179;
      if ((unsigned __int16)(v71 + 1) > v27) {
        goto LABEL_60;
      }
    }
    __int16 v77 = 0;
    unsigned int v170 = v72 >> 1;
    int v172 = v73;
    int v139 = v137 + v67 * v153;
    while (1)
    {
      int v78 = v22;
      if (v25)
      {
        uint64_t v79 = v179;
        int v80 = v172;
        if (!v181) {
          goto LABEL_95;
        }
        int v81 = (int)(v181 / 2 + v68 * v153) / v181;
      }
      else
      {
        uint64_t v79 = v179;
        int v80 = v172;
        if (!v28) {
          goto LABEL_95;
        }
        int v81 = v139 / v28;
      }
      int v78 = v81 + v22;
LABEL_95:
      unsigned int v82 = v72;
      if (*(_WORD *)(*(void *)(v79 + 64) + 2 * v71) == 1)
      {
        if (v78 < 1)
        {
          unsigned int v82 = v72;
          if ((v78 & 0x80000000) == 0) {
            goto LABEL_100;
          }
          int v78 = -v78;
          int v83 = v78 >> 1;
          unsigned int v84 = v151;
        }
        else
        {
          int v83 = 1000 * *(__int16 *)(*(void *)(v79 + 40) + 2 * v71);
          unsigned int v84 = v78 >> 1;
        }
        unsigned int v82 = (int)(v83 + v84) / v78;
      }
LABEL_100:
      if (v80 == i) {
        return 2164269065;
      }
      if (v82 <= 0x10) {
        unsigned int v85 = 16;
      }
      else {
        unsigned int v85 = v82;
      }
      if (v85 >= 0x3C1) {
        int v86 = 961;
      }
      else {
        int v86 = v85;
      }
      uint64_t v87 = v33;
      uint64_t v88 = v79;
      unsigned int v89 = v69;
      uint64_t v90 = v71;
      uint64_t v6 = v72;
      writeToPeriVec_0(v166, i, v71);
      writeToPeriVec_0(v164, i, v86);
      uint64_t v91 = *(void *)(v88 + 64);
      unsigned int v33 = v87;
      if (*(_WORD *)(v91 + 2 * v90)) {
        __int16 v92 = 0;
      }
      else {
        __int16 v92 = v77;
      }
      writeToPeriVec_0(v162, i, v92);
      uint64_t v72 = v6;
      uint64_t v71 = v90;
      int v25 = v174;
      unsigned __int16 v27 = v141 - 1;
      LODWORD(v6) = v168;
      int v22 = v176;
      __int16 v77 = 1 - v77;
      v68 += v86;
      if (v174) {
        unsigned int v69 = v89;
      }
      else {
        unsigned int v69 = v68;
      }
      LODWORD(i) = i + 1;
      ++v87[1];
      BOOL v94 = v71 == (unsigned __int16)(v141 - 1) && v68 == 0;
      if (v68 + v170 > v69 && !v94) {
        goto LABEL_123;
      }
    }
  }
LABEL_60:
  unsigned __int16 v63 = *(_WORD *)(v17 + 4) + *(_WORD *)(v17 + 2) + *(_WORD *)(v17 + 6);
  v33[2] = 0;
  if (v141 >= v63)
  {
LABEL_67:
    uint64_t v2 = v149;
    unint64_t v13 = v145;
    unsigned int v9 = v147;
    LOWORD(v15) = v143;
    LOWORD(v14) = v157;
    uint64_t v5 = v140;
    uint64_t v36 = v159;
    goto LABEL_31;
  }
  uint64_t v64 = v141;
  uint64_t v65 = v63;
  if (i <= 0x2710) {
    int v66 = 10000;
  }
  else {
    int v66 = i;
  }
  while (v66 != i)
  {
    writeToPeriVec_0((uint64_t)(v33 + 4), i, v64);
    writeToPeriVec_0((uint64_t)(v33 + 16), i, 0);
    writeToPeriVec_0((uint64_t)(v33 + 28), i, *(_WORD *)(*(void *)(v17 + 40) + 2 * v64));
    LODWORD(i) = i + 1;
    ++v33[2];
    if (v65 == ++v64)
    {
      uint64_t v3 = v155;
      goto LABEL_67;
    }
  }
  return 2164269065;
}

uint64_t concat_initUnit(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)(a1 + 21280) = a2;
  *(_DWORD *)(a1 + 21288) = a3;
  *(_DWORD *)(a1 + 21292) = a4;
  *(_DWORD *)(a1 + 21296) = 0;
  *(unsigned char *)(a1 + 21300) = 34;
  *(_DWORD *)(a1 + 21308) = 0;
  *(_DWORD *)(a1 + 21312) = 0;
  *(_DWORD *)(a1 + 21304) = a2 == -1;
  return 0;
}

uint64_t Psola_OutputFinalSilence(uint64_t *a1, uint64_t a2)
{
  int v4 = (int)((double)(*(_DWORD *)(a2 + 100)
                                  * *(_DWORD *)(*(void *)(a2 + 104) + 40 * *(int *)(a2 + 96) - 32))
           / 1000.0);
  if (v4 >= 1) {
    Psola_SynthSilence_0(a1, *(int **)(a2 + 16), v4, (int *)a2);
  }
  Psola_FlushOlaBufPart_1(a1, *(_DWORD **)(a2 + 16), *(_DWORD *)(*(void *)(a2 + 16) + 8) + **(_DWORD **)(a2 + 16));
  return 0;
}

void *Psola_Deinitialise(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[2];
  if (v4) {
    heap_Free(*(void **)(a1 + 8), v4);
  }
  uint64_t v5 = a2[3];
  if (v5) {
    heap_Free(*(void **)(a1 + 8), v5);
  }
  uint64_t v6 = (uint64_t *)a2[4];
  if (v6)
  {
    if (*v6)
    {
      heap_Free(*(void **)(a1 + 8), *v6);
      uint64_t v6 = (uint64_t *)a2[4];
    }
    if (v6[2])
    {
      heap_Free(*(void **)(a1 + 8), v6[2]);
      uint64_t v6 = (uint64_t *)a2[4];
    }
    if (v6[4])
    {
      heap_Free(*(void **)(a1 + 8), v6[4]);
      uint64_t v6 = (uint64_t *)a2[4];
    }
    heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
  }
  uint64_t v7 = (uint64_t *)a2[8];
  if (v7) {
    freePeriDesc(a1, v7);
  }
  unsigned int v8 = (uint64_t *)a2[9];
  if (v8) {
    freePeriDesc(a1, v8);
  }
  uint64_t v9 = a2[13];
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    a2[13] = 0;
  }
  uint64_t v10 = *(void **)(a1 + 8);
  return heap_Free(v10, (uint64_t)a2);
}

float mfs_Wsola__fade_out(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 8);
    uint64_t v5 = *(float **)(a2 + 16);
    uint64_t v6 = a3;
    uint64_t v7 = *(void *)(a4 + 16);
    do
    {
      float result = *v5 * *(float *)(v7 + 4 * v4);
      *v5++ = result;
      v4 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t Wsola__write_audioX(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = heap_Calloc(*(void **)(*a1 + 8), a4, 2);
  if (v9)
  {
    uint64_t v15 = v9;
    if (a4)
    {
      uint64_t v16 = 0;
      do
      {
        *(_WORD *)(v9 + 2 * v16) = *(_WORD *)(a2 + 2 * (a3 + v16));
        ++v16;
      }
      while (v8 != v16);
      uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))a1[4];
      if (v17) {
        v17(a1[2], v9, v8);
      }
    }
    heap_Free(*(void **)(*a1 + 8), v15);
    return 0;
  }
  else
  {
    log_wsola_Error(*a1, 59000, 0, v10, v11, v12, v13, v14);
    return 2164269066;
  }
}

uint64_t Wsola__write_audio(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  if (*((_DWORD *)a1 + 5348) == 1) {
    return 0;
  }
  uint64_t v8 = a4;
  uint64_t v9 = heap_Calloc(*(void **)(*a1 + 8), a4, 2);
  if (v9)
  {
    uint64_t v15 = v9;
    if (a4)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(a2 + 16);
      do
      {
        *(_WORD *)(v9 + 2 * v16) = (int)*(float *)(v17 + 4 * (a3 + v16));
        ++v16;
      }
      while (v8 != v16);
      __int16 v18 = (void (*)(uint64_t, uint64_t, uint64_t))a1[4];
      if (v18) {
        v18(a1[2], v9, v8);
      }
    }
    heap_Free(*(void **)(*a1 + 8), v15);
    return 0;
  }
  log_wsola_Error(*a1, 59000, 0, v10, v11, v12, v13, v14);
  return 2164269066;
}

uint64_t Wsola__silence_output(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = UNICORN__Vector__Create(*(void **)(*a1 + 8), a2);
  uint64_t v7 = v4;
  *(_DWORD *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 12) = a2;
  uint64_t v5 = Wsola__write_audio(a1, v4, 0, a2);
  UNICORN__Window__Remove(&v7);
  return v5;
}

uint64_t concat_initW(uint64_t a1, double a2)
{
  *(_DWORD *)(a1 + 80) = 0;
  uint64_t v3 = a1 + 80;
  int v4 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 21392) = 0;
  *(_DWORD *)(a1 + 21272) = *(_DWORD *)(a1 + 21320) != 0;
  if (v4 <= 15999)
  {
    if (v4 != 8000 && v4 != 8018)
    {
      if (v4 == 11025)
      {
        LODWORD(a2) = *(_DWORD *)(a1 + 21324);
        double v6 = (double)*(unint64_t *)&a2;
        char v7 = 2;
        double v8 = 11.025;
        goto LABEL_13;
      }
LABEL_19:
      log_wsola_Diag(*(void *)a1, 1, (uint64_t)"ERROR: Unsupported sampling rate = %d\n");
      return 2164269063;
    }
    goto LABEL_11;
  }
  if (v4 == 16000)
  {
LABEL_11:
    HIDWORD(v9) = 1083129856;
    double v6 = (float)v4 / 1000.0;
    LODWORD(v9) = *(_DWORD *)(a1 + 21324);
    double v8 = (double)v9;
    char v7 = 1;
    goto LABEL_13;
  }
  if (v4 != 22050)
  {
    if (v4 != 16036) {
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 21324);
  double v6 = (double)*(unint64_t *)&a2;
  char v7 = 4;
  double v8 = 22.05;
LABEL_13:
  unsigned int v10 = (int)(v6 * v8) & 0xFFFFFFFC;
  *(unsigned char *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 88) = v10;
  *(_DWORD *)(a1 + 92) = v10 >> 1;
  *(_DWORD *)(a1 + 96) = 2 * v10;
  *(_DWORD *)(a1 + 100) = 3 * v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 116) = 0;
  *(void *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  if (!*(void *)(a1 + 128))
  {
    uint64_t v11 = UNICORN__Vector__Create(*(void **)(*(void *)a1 + 8), 3 * v10);
    *(void *)(a1 + 128) = v11;
    if (!v11) {
      return 2164269066;
    }
  }
  uint64_t v12 = *(void *)(a1 + 136);
  if (!v12)
  {
    uint64_t v12 = UNICORN__Vector__Create(*(void **)(*(void *)a1 + 8), *(_DWORD *)(a1 + 96));
    *(void *)(a1 + 136) = v12;
    if (!v12) {
      return 2164269066;
    }
  }
  UNICORN__Wsola__windowinit(v3, v12);
  return 0;
}

uint64_t concat_deinitW(uint64_t a1)
{
  return 0;
}

uint64_t concat_final_deinitW(uint64_t *a1)
{
  return 0;
}

uint64_t concat_volume(uint64_t a1, int a2, int a3)
{
  double v3 = *(double *)(a1 + 21336);
  if (v3 != 1.0 && a3 >= 1)
  {
    uint64_t v5 = a3;
    double v6 = (float *)(*(void *)(*(void *)(a1 + 144) + 16) + 4 * a2);
    do
    {
      float v7 = v3 * *v6;
      *double v6 = v7;
      int v8 = -956301312;
      if (v7 < -32768.0 || (int v8 = 1191181824, v7 > 32767.0)) {
        *(_DWORD *)double v6 = v8;
      }
      ++v6;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t concat_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, int a10, int a11)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 21320) = a11 != 0;
  *(_DWORD *)(a9 + 76) = a10;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 16) = a6;
  *(void *)(a9 + 48) = a7;
  *(_DWORD *)(a9 + 56) = a8;
  return 0;
}

uint64_t concat_startSynthesis(uint64_t a1)
{
  uint64_t v2 = Wsola__newunit_0(a1, a1 + 21280);
  if ((v2 & 0x80000000) == 0)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 92);
    if (v3)
    {
      Wsola__write_audio((uint64_t *)a1, *(void *)(a1 + 144), *(_DWORD *)(a1 + 120), v3);
      int v4 = *(_DWORD *)(a1 + 92);
    }
    else
    {
      int v4 = 0;
    }
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 120) + v4;
    Wsola__middle_0(a1);
    Wsola__tail_0(a1);
    *(_DWORD *)(a1 + 21328) = 1;
  }
  return v2;
}

uint64_t Wsola__newunit_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  v17[0] = 0;
  v17[1] = 0;
  unsigned int v5 = *(_DWORD *)a2;
  if ((v5 & 0x80000000) == 0)
  {
    Lookup_GetUnitData(*(void **)(a1 + 24), v5, (uint64_t)v17);
    unsigned int v4 = HIDWORD(v17[0]);
  }
  int v6 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 116) = v6;
  char v7 = *(unsigned char *)(a2 + 20);
  if ((v7 & 2) != 0)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 88);
    BOOL v9 = v4 >= v8;
    unsigned int v10 = v4 - v8;
    if (v4 < v8) {
      unsigned int v8 = v4;
    }
    v6 += v8;
    if (v9) {
      unsigned int v4 = v10;
    }
    else {
      unsigned int v4 = 0;
    }
    *(_DWORD *)(a1 + 116) = v6;
    *(_DWORD *)(a1 + 120) = v8;
  }
  if ((v7 & 0x20) != 0)
  {
    v6 += *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 116) = v6;
  }
  if (v6 > *(_DWORD *)(a1 + 108))
  {
    UNICORN__Window__Remove((uint64_t *)(a1 + 144));
    uint64_t v11 = UNICORN__Vector__Create(*(void **)(*(void *)a1 + 8), *(_DWORD *)(a1 + 116));
    *(void *)(a1 + 144) = v11;
    if (!v11) {
      return 2164269066;
    }
    int v6 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)(a1 + 108) = v6;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  __src = 0;
  if (*(_DWORD *)(a1 + 76)) {
    int v12 = *(_DWORD *)(a2 + 24);
  }
  else {
    int v12 = 0;
  }
  uint64_t result = concat_getSegment(a1, *(_DWORD *)a2, v4, v6, (uint64_t)&v14, v12);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 116) = HIDWORD(v15);
    bzero(*(void **)(*(void *)(a1 + 144) + 16), 4 * *(unsigned int *)(*(void *)(a1 + 144) + 8));
    if (__src) {
      memcpy(*(void **)(*(void *)(a1 + 144) + 16), __src, 4 * *(int *)(a1 + 116));
    }
    concat_volume(a1, 0, *(_DWORD *)(a1 + 116));
    if (*(_DWORD *)(a1 + 21316) == 1) {
      concat_applyBPF(*(void *)a1, *(char **)(*(void *)(a1 + 144) + 16), *(_DWORD *)(a1 + 116));
    }
    if (__src) {
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)__src);
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 12) + *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 112) = 0;
  }
  return result;
}

uint64_t Wsola__middle_0(uint64_t result)
{
  if ((*(unsigned char *)(result + 21300) & 0x20) != 0)
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 124);
    int v3 = *(_DWORD *)(result + 112);
    int v4 = *(_DWORD *)(result + 92) + v3;
    int v5 = v2 - v4;
    if (v2 - v4 >= 1)
    {
      uint64_t result = Wsola__write_audio((uint64_t *)result, *(void *)(result + 144), v3, v2 - v4);
      *(_DWORD *)(v1 + 112) += v5;
    }
  }
  return result;
}

uint64_t Wsola__tail_0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 92);
  uint64_t v2 = *(int *)(a1 + 112);
  unsigned int v3 = v1 + v2;
  int v4 = *(_DWORD *)(a1 + 124);
  if ((int)v2 <= v4) {
    int v1 = v1 + v2 - v4;
  }
  if (v3 <= v4) {
    int v5 = 0;
  }
  else {
    int v5 = v1;
  }
  uint64_t v6 = *(int *)(a1 + 116) - v2;
  *(_DWORD *)(a1 + 21312) = v5;
  if (*(_DWORD *)(a1 + 21272)) {
    *(_DWORD *)(*(void *)(a1 + 128) + 12) = v6;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(*(void *)(a1 + 128) + 16);
    uint64_t v10 = 4 * v2;
    do
    {
      int v11 = 0;
      if (v8 < v6) {
        int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 144) + 16) + v10 + 4 * v8);
      }
      *(_DWORD *)(v9 + 4 * v8++) = v11;
    }
    while (v7 != v8);
  }
  return Lookup_DeInit(*(uint64_t **)(a1 + 24));
}

uint64_t concat_midSynthesis(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v144 = *MEMORY[0x263EF8340];
  uint64_t v2 = Wsola__newunit_0(v1, v1 + 21280);
  uint64_t v3 = v2;
  if ((v2 & 0x80000000) != 0) {
    return v3;
  }
  int v4 = *(_DWORD *)(v1 + 21272);
  if ((v4 - 1) >= 2)
  {
    if (v4)
    {
      unsigned int v30 = 0;
      uint64_t v19 = *(void *)(v1 + 128);
      LODWORD(v31) = *(_DWORD *)(v1 + 88);
    }
    else
    {
      uint64_t v19 = *(void *)(v1 + 128);
      uint64_t v20 = *(void *)(v1 + 144);
      uint64_t v21 = *(unsigned int *)(v1 + 96);
      if (v21)
      {
        int v22 = *(const void **)(v20 + 16);
        memcpy(__dst, *(const void **)(v19 + 16), 4 * v21);
        memcpy(v143, v22, 4 * v21);
      }
      unsigned int v23 = *(_DWORD *)(v1 + 100);
      if (v21 < v23) {
        memcpy(&v143[v21], (const void *)(*(void *)(v20 + 16) + 4 * v21), 4 * (v23 + ~v21) + 4);
      }
      uint64_t v24 = *(unsigned __int8 *)(v1 + 104);
      if (v21)
      {
        unsigned int v25 = 0;
        float v26 = 0.0;
        float v27 = 0.0;
        do
        {
          float v28 = *(float *)&v143[v25];
          float v26 = v26 + (float)(v28 * v28);
          float v27 = v27 + (float)(v28 * __dst[v25]);
          v25 += v24;
        }
        while (v25 < v21);
        double v29 = v27;
      }
      else
      {
        float v26 = 0.0;
        double v29 = 0.0;
      }
      float v105 = 250.0;
      if (v26 >= 250.0) {
        float v105 = v26;
      }
      float v106 = v29 / sqrt(v105);
      unint64_t v31 = *(unsigned int *)(v1 + 88);
      if (v31 >= v24)
      {
        unsigned int v30 = 0;
        uint64_t v107 = (float *)v143;
        unsigned int v108 = *(unsigned __int8 *)(v1 + 104);
        do
        {
          if (v21)
          {
            unsigned int v109 = 0;
            float v110 = 0.0;
            do
            {
              float v110 = v110 + (float)(v107[v24 + v109] * __dst[v109]);
              v109 += v24;
            }
            while (v109 < v21);
          }
          else
          {
            float v110 = 0.0;
          }
          float v26 = (float)(v26 - (float)(*v107 * *v107)) + (float)(v107[v21] * v107[v21]);
          float v111 = 250.0;
          if (v26 >= 250.0) {
            float v111 = v26;
          }
          float v112 = v110 / sqrt(v111);
          if (v106 < v112)
          {
            unsigned int v30 = v108;
            float v106 = v112;
          }
          v108 += v24;
          v107 += v24;
        }
        while (v108 <= v31);
      }
      else
      {
        unsigned int v30 = 0;
      }
      if (v24 != 1)
      {
        unsigned int v113 = (v30 - (v24 >> 1)) & ~((int)(v30 - (v24 >> 1)) >> 31);
        unsigned int v114 = v30 + (v24 >> 1);
        if (v114 >= v31) {
          unsigned int v114 = *(_DWORD *)(v1 + 88);
        }
        if (v113 <= v114)
        {
          uint64_t v115 = &v143[v113];
          do
          {
            if (v21)
            {
              uint64_t v116 = 0;
              float v117 = 0.0;
              float v118 = 0.0;
              do
              {
                float v119 = *(float *)&v115[v116];
                float v117 = v117 + (float)(v119 * v119);
                float v118 = v118 + (float)(v119 * __dst[v116++]);
              }
              while (v21 != v116);
            }
            else
            {
              float v118 = 0.0;
              float v117 = 0.0;
            }
            if (v117 < 250.0) {
              float v117 = 250.0;
            }
            float v120 = v118 / sqrt(v117);
            if (v106 < v120)
            {
              unsigned int v30 = v113;
              float v106 = v120;
            }
            ++v115;
            ++v113;
          }
          while (v113 <= v114);
        }
      }
      if (v31)
      {
        uint64_t v121 = 0;
        uint64_t v122 = *(void *)(v19 + 16);
        uint64_t v123 = *(void *)(v20 + 16) + 4 * v30;
        uint64_t v124 = *(void *)(*(void *)(v1 + 136) + 16);
        do
        {
          float v125 = (float)(*(float *)(v124 + v121) * *(float *)(v123 + v121))
               + (float)(*(float *)(v124 + 4 * v31 + v121) * *(float *)(v122 + v121));
          if (v125 >= 0.0) {
            float v126 = 0.5;
          }
          else {
            float v126 = -0.5;
          }
          *(float *)(v122 + v121) = v125 + v126;
          v121 += 4;
        }
        while (4 * v31 != v121);
      }
    }
    goto LABEL_154;
  }
  unsigned int v140 = v2;
  uint64_t v5 = *(void *)(v1 + 128);
  uint64_t v6 = *(void *)(v1 + 144);
  uint64_t v7 = *(unsigned int *)(v1 + 100);
  if (v7) {
    bzero((void *)(v1 + 152), 4 * v7);
  }
  uint64_t v8 = *(unsigned int *)(v1 + 96);
  if (v8)
  {
    uint64_t v9 = *(const void **)(v6 + 16);
    memcpy(__dst, *(const void **)(v5 + 16), 4 * v8);
    memcpy(v143, v9, 4 * v8);
  }
  if (v8 < v7) {
    memcpy(&v143[v8], (const void *)(*(void *)(v6 + 16) + 4 * v8), 4 * (v7 + ~v8) + 4);
  }
  float v10 = 0.0;
  if (v8)
  {
    int v11 = __dst;
    int v12 = (float *)v143;
    uint64_t v13 = v8;
    float v14 = 0.0;
    do
    {
      float v15 = *v12++;
      float v16 = v15;
      float v10 = v10 + (float)(v16 * v16);
      float v17 = *v11++;
      float v14 = v14 + (float)(v16 * v17);
      --v13;
    }
    while (v13);
    double v18 = v14;
  }
  else
  {
    double v18 = 0.0;
  }
  float v32 = 250.0;
  if (v10 >= 250.0) {
    float v32 = v10;
  }
  double v33 = v18 / sqrt(v32);
  float v34 = v33;
  *(float *)(v1 + 152) = v34;
  if (v4)
  {
    unsigned int v35 = *(_DWORD *)(v5 + 12);
    if (v8 < v35) {
      unsigned int v35 = v8;
    }
  }
  else
  {
    unsigned int v35 = 0;
  }
  unint64_t v31 = *(unsigned int *)(v1 + 88);
  if (!v31)
  {
    unsigned int v30 = 0;
    float v39 = v33;
    goto LABEL_58;
  }
  unsigned int v30 = 0;
  if ((v31 + 1) > 2) {
    uint64_t v36 = (v31 + 1);
  }
  else {
    uint64_t v36 = 2;
  }
  uint64_t v37 = (float *)v143;
  uint64_t v38 = 1;
  float v39 = v33;
  do
  {
    if (v4)
    {
      if (!v35) {
        goto LABEL_45;
      }
      uint64_t v40 = 0;
      float v41 = 0.0;
      do
      {
        float v41 = v41 + (float)(v37[v40 + 1] * __dst[v40]);
        ++v40;
      }
      while (v35 != v40);
    }
    else
    {
      if (!v8)
      {
LABEL_45:
        float v41 = 0.0;
        goto LABEL_46;
      }
      uint64_t v42 = 0;
      float v41 = 0.0;
      do
      {
        float v41 = v41 + (float)(v37[v42 + 1] * __dst[v42]);
        ++v42;
      }
      while (v8 != v42);
    }
LABEL_46:
    float v10 = (float)(v10 - (float)(*v37 * *v37)) + (float)(v37[v8] * v37[v8]);
    ++v37;
    float v43 = 250.0;
    if (v10 >= 250.0) {
      float v43 = v10;
    }
    float v44 = v41 / sqrt(v43);
    *(float *)(v1 + 4 * v38 + 152) = v44;
    if (v39 < v44)
    {
      unsigned int v30 = v38;
      float v39 = v44;
    }
    ++v38;
  }
  while (v38 != v36);
  if (v31 >= 3
    && v30 > (int)v31 - 2
    && (float v45 = *(float *)(v1 + 152 + 4 * v31), v45 >= *(float *)(v1 + 152 + 4 * (v31 - 1)))
    && v45 >= *(float *)(v1 + 4 * (v31 - 2) + 152))
  {
    if ((int)v31 >= 2) {
      unsigned int v46 = 2;
    }
    else {
      unsigned int v46 = v31;
    }
    if ((int)v31 >= 2) {
      int v136 = 2;
    }
    else {
      int v136 = v31;
    }
    int v137 = 24;
    unint64_t v138 = v31;
    while (v136 != v138)
    {
      if (*(float *)(v1 + 152 + 4 * v138) < *(float *)(v1 + 4 * (v138 - 1) + 152))
      {
        LODWORD(v47) = 1;
        unsigned int v46 = v138;
        goto LABEL_62;
      }
      --v138;
      LODWORD(v47) = 1;
      v137 -= 4;
      if (!v137)
      {
        unsigned int v46 = v31 - 6;
        goto LABEL_62;
      }
    }
LABEL_61:
    LODWORD(v47) = 1;
  }
  else
  {
    if ((int)v30 > 1) {
      goto LABEL_60;
    }
LABEL_58:
    if (*(float *)(v1 + 156) > v34 || *(float *)(v1 + 160) > v34)
    {
LABEL_60:
      unsigned int v46 = v31 - 1;
      goto LABEL_61;
    }
    uint64_t v134 = 0;
    unsigned int v46 = v31 - 1;
    uint64_t v47 = (v31 - 2) & ~(((int)v31 - 2) >> 31);
    int v135 = (float *)(v1 + 156);
    while (v47 != v134)
    {
      if (*(v135 - 1) < *v135)
      {
        LODWORD(v47) = v134;
        break;
      }
      ++v134;
      ++v135;
      if (v134 == 6)
      {
        LODWORD(v47) = 6;
        break;
      }
    }
  }
LABEL_62:
  if (v47 <= v46)
  {
    double v48 = -1.0;
    unsigned int v49 = v30;
    do
    {
      if (v47)
      {
        float v50 = *(float *)(v1 + 152 + 4 * v47);
        if (v50 >= *(float *)(v1 + 152 + 4 * (v47 - 1)))
        {
          BOOL v52 = v50 < *(float *)(v1 + 4 * (v47 + 1) + 152);
          double v51 = v50;
          BOOL v52 = !v52 && v48 < v51;
          if (v52)
          {
            double v48 = v51;
            unsigned int v49 = v47;
          }
        }
      }
      LODWORD(v47) = v47 + 1;
    }
    while (v47 <= v46);
    BOOL v53 = v48 <= 0.0 || v30 == v49;
    if (!v53 && v48 * 1.4 >= v39) {
      unsigned int v30 = v49;
    }
  }
  if ((v31 + 1) > 1) {
    uint64_t v54 = (v31 + 1);
  }
  else {
    uint64_t v54 = 1;
  }
  uint64_t v55 = (float *)(v1 + 152);
  float v56 = 0.0;
  do
  {
    float v57 = *v55++;
    float v58 = v57;
    if (v56 < v57) {
      float v56 = v58;
    }
    --v54;
  }
  while (v54);
  float v59 = v56 * 1.2;
  *(float *)(v1 + 4 * v30 + 152) = v59;
  uint64_t v60 = *(float **)(v5 + 16);
  unint64_t v61 = v31 >> 1;
  unsigned int v62 = -(v31 >> 2);
  int v63 = (int)v31 >> 1;
  unsigned int v64 = ((int)v31 >> 1) - (v31 >> 2);
  uint64_t v139 = *(void *)(v6 + 16);
  if (v31 >= 2 && v63 >= (int)(v31 >> 2))
  {
    uint64_t v65 = (float *)((char *)v60 + 4 * v63 - (v31 & 0xFFFFFFFC));
    int v66 = (float *)(*(void *)(v6 + 16) + 4 * v30 + 4 * v63 - (v31 & 0xFFFFFFFC));
    int v67 = (float *)v143;
    unint64_t v68 = v31 >> 1;
    do
    {
      float v69 = *v66++;
      float v70 = v69;
      float v71 = *v65++;
      *v67++ = (float)(v71 * v71) + (float)(v70 * v70);
      --v68;
    }
    while (v68);
    uint64_t v72 = (v61 - 1);
    __dst[v72] = 1.0e31;
    if (v31 >= 6)
    {
      int v73 = v143;
      uint64_t v74 = 1;
      do
      {
        uint64_t v75 = 0;
        float v76 = 0.0;
        do
          float v76 = v76 + *(float *)&v73[v75++];
        while (v75 != 3);
        __dst[v74++] = v76;
        ++v73;
      }
      while (v74 != v72);
      uint64_t v77 = v72 - 1;
      int v78 = (float *)&v142;
      unsigned int v79 = 1 - (v31 >> 2);
      float v80 = 1.0e31;
      unsigned int v81 = -(v31 >> 2);
      do
      {
        float v82 = *v78++;
        float v83 = v82;
        if (v82 < v80)
        {
          unsigned int v81 = v79;
          float v80 = v83;
        }
        ++v79;
        --v77;
      }
      while (v77);
      if (v80 < 1.0e31) {
        unsigned int v62 = v81;
      }
    }
  }
  if ((v64 & 0x80000000) == 0)
  {
    unsigned int v84 = v62 + v64;
    if ((int)(v62 + v64) < 1)
    {
      unsigned int v85 = 0;
    }
    else
    {
      bzero(v143, 4 * (v62 + v64));
      memset_pattern16(__dst, &unk_20D6B45D0, 4 * v84);
      unsigned int v85 = v84;
    }
    if ((int)v85 < (int)v31)
    {
      bzero(&__dst[v85], 4 * (v31 - v85));
      memset_pattern16(&v143[v85], &unk_20D6B45D0, 4 * (v31 - v85));
    }
    if (v31 >= 2)
    {
      int v86 = 0;
      double v87 = (float)(int)v61 + (float)(int)v61;
      uint64_t v88 = &__dst[v84];
      unsigned int v89 = (float *)&v143[v84];
      do
      {
        float v90 = cos(((float)v86 + (float)v86) * 3.14159265 / v87);
        float v91 = v90 * -0.5 + 0.5;
        *v89++ = v91;
        float v92 = cos(((float)(int)v61 + (float)(int)v61) * 3.14159265 / v87);
        float v93 = v92 * -0.5 + 0.5;
        *v88++ = v93;
        ++v86;
        LODWORD(v61) = v61 - 1;
      }
      while (v61);
    }
  }
  if (v31)
  {
    BOOL v94 = (float *)v143;
    int v95 = __dst;
    unint64_t v96 = v31;
    int v97 = (float *)(v139 + 4 * v30);
    do
    {
      float v98 = *v95++;
      float v99 = v98;
      float v100 = *v94++;
      float v101 = v100;
      float v102 = *v97++;
      float v103 = (float)(v101 * v102) + (float)(v99 * *v60);
      if (v103 >= 0.0) {
        float v104 = 0.5;
      }
      else {
        float v104 = -0.5;
      }
      *v60++ = v103 + v104;
      --v96;
    }
    while (v96);
  }
  uint64_t v19 = v5;
  uint64_t v3 = v140;
LABEL_154:
  Wsola__write_audio((uint64_t *)v1, v19, 0, v31);
  unsigned int v127 = *(_DWORD *)(v1 + 92) - v30;
  int v128 = *(_DWORD *)(v1 + 21292) + v127;
  *(_DWORD *)(v1 + 21292) = v128;
  *(_DWORD *)(v1 + 21296) = v127;
  if (v128 < 0) {
    *(_DWORD *)(v1 + 21292) = 0;
  }
  int v129 = *(_DWORD *)(v1 + 124);
  unsigned int v130 = *(_DWORD *)(v1 + 120) + v30;
  *(_DWORD *)(v1 + 112) = v130;
  BOOL v131 = __OFSUB__(v130, v129);
  int v132 = v130 - v129;
  if ((v132 < 0) ^ v131 | (v132 == 0)) {
    int v132 = 0;
  }
  *(_DWORD *)(v1 + 21308) = v132;
  Wsola__middle_0(v1);
  Wsola__tail_0(v1);
  return v3;
}

uint64_t concat_endSynthesis(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 21328;
  if (a2)
  {
    *(unsigned char *)(a1 + 21384) = 1;
    Wsola__write_audio((uint64_t *)a1, *(void *)(a1 + 128), 0, *(_DWORD *)(a1 + 92));
  }
  *(unsigned char *)(v3 + 56) = 0;
  *(_DWORD *)uint64_t v3 = 0;
  UNICORN__Window__Remove((uint64_t *)(a1 + 128));
  return 0;
}

uint64_t Psola_AssignPeriRangesDyna(unsigned __int16 *a1)
{
  unsigned __int16 v1 = a1[3];
  uint64_t v2 = (unsigned __int16)(a1[2] + a1[1] + v1);
  if (a1[2] + a1[1] + v1)
  {
    uint64_t v4 = 0;
    a1[1] = 0;
    uint64_t v5 = (__int16 *)*((void *)a1 + 2);
    while (*v5 < 0)
    {
      a1[1] = ++v4;
      ++v5;
      if (v2 == v4)
      {
        a1[2] = 0;
LABEL_16:
        a1[3] = v2 - v4;
        return 0;
      }
    }
    a1[2] = 0;
    if (v4 >= v2) {
      goto LABEL_16;
    }
    __int16 v6 = 0;
    uint64_t v7 = v2 - v4;
    int v8 = *a1;
    do
    {
      int v9 = *v5++;
      if (v9 >= v8) {
        break;
      }
      a1[2] = ++v6;
      --v7;
    }
    while (v7);
    a1[3] = v2 - (v4 + v6);
    if (!(_WORD)v4 && v6)
    {
      a1[1] = 1;
      if (v6 == 1)
      {
        uint64_t v10 = (v2 - 1);
        if (v2 != 1)
        {
          do
          {
            writeToPeriVec_0((uint64_t)(a1 + 4), v2, *(_WORD *)(*((void *)a1 + 2) + 2 * v10));
            writeToPeriVec_0((uint64_t)(a1 + 16), v2, *(_WORD *)(*((void *)a1 + 5) + 2 * v10));
            writeToPeriVec_0((uint64_t)(a1 + 28), v2, *(_WORD *)(*((void *)a1 + 8) + 2 * v10));
            LODWORD(v2) = v2 - 1;
            --v10;
          }
          while (v10);
        }
        writeToPeriVec_0((uint64_t)(a1 + 16), 1u, **((__int16 **)a1 + 5) / 2);
        writeToPeriVec_0((uint64_t)(a1 + 16), 0, **((_WORD **)a1 + 5) - *(_WORD *)(*((void *)a1 + 5) + 2));
        writeToPeriVec_0((uint64_t)(a1 + 4), 1u, **((_WORD **)a1 + 5) + **((_WORD **)a1 + 2));
        uint64_t v11 = (uint64_t)(a1 + 28);
        writeToPeriVec_0(v11, 0, 0);
        writeToPeriVec_0(v11, 1u, 0);
      }
      else
      {
        a1[2] = v6 - 1;
      }
    }
  }
  return 0;
}

void Psola_AddToOlaBuf_1(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5)
{
  if (*a2 <= a5)
  {
    int v5 = a5;
    int v6 = a4;
    if (a4 < 1)
    {
      Psola_AddToOlaBufAux_1(a1, a2, (uint64_t)v13, 0, 0, a5);
    }
    else
    {
      int v10 = 0;
      do
      {
        if (v6 >= 2400) {
          int v11 = 2400;
        }
        else {
          int v11 = v6;
        }
        Psola_AddToOlaBufAux_1(a1, a2, a3, v10, v11, v5);
        v10 += v11;
        v5 += v11;
        BOOL v12 = __OFSUB__(v6, v11);
        v6 -= v11;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
}

void Psola_AddToOlaBufAux_1(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v11 = a6 + a5;
  int v12 = a6 + a5 - 2400;
  int v13 = *a2;
  if (v12 > *a2)
  {
    Psola_FlushOlaBufPart_1(a1, a2, v12);
    int v13 = *a2;
  }
  int v14 = (a6 - v13 + a2[1]) % 2400;
  if (2400 - v14 >= a5) {
    int v15 = a5;
  }
  else {
    int v15 = 2400 - v14;
  }
  int v16 = a5 - v15;
  if (v15 >= 1)
  {
    float v17 = (_WORD *)a2 + v14 + 6;
    double v18 = (__int16 *)(a3 + 2 * a4);
    int v19 = v15;
    do
    {
      __int16 v20 = *v18++;
      *v17++ += v20;
      --v19;
    }
    while (v19);
  }
  if (v16 >= 1)
  {
    int v21 = v15 + a4;
    int v22 = a2 + 3;
    unsigned int v23 = (__int16 *)(a3 + 2 * v21);
    do
    {
      __int16 v24 = *v23++;
      *v22++ += v24;
      --v16;
    }
    while (v16);
  }
  int v25 = v11 - v13;
  if (a2[2] > v25) {
    int v25 = a2[2];
  }
  a2[2] = v25;
}

__int16 *Psola_ApplyHanning_1(__int16 *result, int *a2, __int16 *a3, int a4, int a5)
{
  if (a4)
  {
    if (*a2 != a4)
    {
      if (a4 >= 1)
      {
        uint64_t v5 = 0;
        int v6 = result;
        do
        {
          *v6++ = HanningTab_1[(int)v5 / a4]
                + (HanningTab_1[(int)v5 / a4 + 1] - HanningTab_1[(int)v5 / a4]) * ((int)v5 % a4) / a4;
          v5 += 200;
        }
        while (200 * a4 != v5);
      }
      *a2 = a4;
    }
    if (a5)
    {
      if (a4 >= 1)
      {
        uint64_t v7 = a4;
        do
        {
          int v8 = *result++;
          *a3 = v8 * *a3 / 0x8000;
          ++a3;
          --v7;
        }
        while (v7);
      }
    }
    else if (a4 >= 1)
    {
      uint64_t v9 = a4;
      do
      {
        int v10 = *result++;
        *a3 = (0x7FFF - v10) * *a3 / 0x8000;
        ++a3;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t synth_bet4_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2164269057;
  }
  uint64_t result = 0;
  *a2 = &ISynth_Bet4;
  return result;
}

uint64_t synth_bet4_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2164269063;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 9357;
  }
  return result;
}

uint64_t synth_bet4_ClassClose()
{
  return 0;
}

uint64_t synth_bet4_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2164269066;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  unsigned int v53 = 0;
  __s1 = 0;
  long long v50 = xmmword_26C21F8E0;
  double v51 = off_26C21F8F0;
  if (!a5) {
    return 2164269063;
  }
  uint64_t inited = InitRsrcFunction(a3, a4, &v55);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if ((safeh_HandleCheck(a1, a2, 9357, 408) & 0x80000000) == 0)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    log_OutText(*(void *)(v55 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Entering synth_bet4_ObjOpen", v12, v13, v14, v47);
    int v15 = (void *)heap_Calloc(*(void **)(v55 + 8), 1, 22680);
    if (v15)
    {
      uint64_t v20 = (uint64_t)v15;
      *int v15 = a3;
      v15[1] = a4;
      uint64_t v21 = v55;
      void v15[2] = v55;
      v15[3] = a1;
      v15[15] = 0;
      uint64_t Int = critsec_ObjOpen(*(void *)(v21 + 16), *(void **)(v21 + 8), v15 + 4);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(v20 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = synth_bet4_loc_ParamSet(v20, "rate_baseline", v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(v20 + 16) + 40), (uint64_t)"rate", (int *)&v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = synth_bet4_loc_ParamSet(v20, "rate", v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(v20 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = synth_bet4_loc_ParamSet(v20, "pitch_baseline", v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(v20 + 16) + 40), (uint64_t)"pitch", (int *)&v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = synth_bet4_loc_ParamSet(v20, "pitch", v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      *(void *)&long long v50 = v20;
      uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "volume", 0, 100, 0x50u, &v50, (int *)&v53);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_31;
      }
      uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "rate_baseline", 50, 400, 0x64u, &v50, (int *)&v53);
      if ((Int & 0x80000000) != 0
        || (uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "rate", 50, 400, 0x64u, &v50, (int *)&v53), (Int & 0x80000000) != 0)
        || (uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "waitfactor", 0, 9, 2u, &v50, (int *)&v53), (Int & 0x80000000) != 0)
        || (uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "pitch_baseline", 50, 200, 0x64u, &v50, (int *)&v53),
            (Int & 0x80000000) != 0)
        || (uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "pitch", 50, 200, 0x64u, &v50, (int *)&v53), (Int & 0x80000000) != 0)
        || (uint64_t Int = synth_bet4_loc_ParamGetListen(v20, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v50, (int *)&v53),
            (Int & 0x80000000) != 0)
        || (*(_DWORD *)(v20 + 72) = v53, uint64_t Int = synth_bet4_loc_SynthInit(v20), (Int & 0x80000000) != 0))
      {
LABEL_31:
        uint64_t Object = Int;
      }
      else
      {
        uint64_t v23 = mfs_WSOLA__Create(*(void *)(v20 + 16), *(_WORD *)(v20 + 84));
        *(void *)(v20 + 21496) = v23;
        if (v23)
        {
          uint64_t v28 = heap_Calloc(*(void **)(*(void *)(v20 + 16) + 8), (*(_DWORD *)(v20 + 84) << 7) / 0x3E8uLL, 2);
          *(void *)(v20 + 21472) = v28;
          uint64_t v29 = v55;
          if (v28)
          {
            uint64_t Object = objc_GetObject(*(void *)(v55 + 48), (uint64_t)"SYNTHSTREAM", &v54);
            if ((Object & 0x80000000) == 0)
            {
              *(void *)(v20 + 40) = *(void *)(v54 + 8);
              if ((objc_GetObject(*(void *)(v55 + 48), (uint64_t)"AUDIOFETCHER", &v54) & 0x80000000) != 0)
              {
                uint64_t v46 = *(void *)(v20 + 16);
              }
              else
              {
                uint64_t v34 = v54;
                if (*(unsigned char *)v54 == 1)
                {
                  uint64_t v35 = *(void *)(v54 + 8);
                  if (v35)
                  {
                    *(void *)(v20 + 48) = v35;
                    *(_OWORD *)(v20 + 56) = *(_OWORD *)(v34 + 16);
LABEL_44:
                    if (!Lookup_HasSupportForPsola(*(void *)(v20 + 120), (_DWORD *)(v20 + 22640), (_DWORD *)(v20 + 22644)))*(void *)(v20 + 22640) = 0; {
                    if (!Lookup_HasSupportForWsola(*(void *)(v20 + 120), (_DWORD *)(v20 + 21420)))
                    }
                      *(_DWORD *)(v20 + 21420) = 0;
                    *(_DWORD *)(v20 + 22672) = 0;
                    if ((paramc_ParamGetStr(*(void *)(*(void *)(v20 + 16) + 40), (uint64_t)"bet4suppressbet3pcm", &__s1) & 0x80000000) == 0)
                    {
                      if (!strcmp(__s1, "yes")) {
                        *(_DWORD *)(v20 + 22672) = 1;
                      }
                      paramc_ParamRelease(*(void *)(*(void *)(v20 + 16) + 40));
                    }
                    *(void *)a5 = v20;
                    *(_DWORD *)(a5 + 8) = 9356;
                    goto LABEL_35;
                  }
                }
                objc_ReleaseObject(*(void *)(v55 + 48), (uint64_t)"AUDIOFETCHER");
                uint64_t v46 = v55;
              }
              log_OutPublic(*(void *)(v46 + 32), (uint64_t)"SYNTH_BET4", 59001, 0, v30, v31, v32, v33, v48);
              goto LABEL_44;
            }
            uint64_t v29 = *(void *)(v20 + 16);
            uint64_t v45 = 59001;
          }
          else
          {
            uint64_t v45 = 59000;
          }
        }
        else
        {
          uint64_t v45 = 59000;
          uint64_t v29 = v55;
        }
        log_OutPublic(*(void *)(v29 + 32), (uint64_t)"SYNTH_BET4", v45, 0, v24, v25, v26, v27, v48);
      }
      *(void *)a5 = v20;
      *(_DWORD *)(a5 + 8) = 9356;
      synth_bet4_ObjClose((void *)v20, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    else
    {
      log_OutPublic(*(void *)(v55 + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v16, v17, v18, v19, v48);
    }
LABEL_35:
    log_OutText(*(void *)(v55 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjOpen: %x", v36, v37, v38, Object);
    log_OutEvent(*(uint64_t ***)(v55 + 32), 24, &byte_20D5A22AE, v39, v40, v41, v42, v43, v49);
    return Object;
  }
  return 2164269064;
}

uint64_t synth_bet4_ObjClose(void *a1, int a2)
{
  int v3 = safeh_HandleCheck((uint64_t)a1, a2, 9356, 22680);
  if (v3 < 0) {
    return 2164269064;
  }
  int v7 = v3;
  uint64_t v8 = a1[2];
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Entering synth_bet4_ObjClose", v4, v5, v6, v43);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v45 = a1;
  long long v44 = *(long long *)((char *)&xmmword_26C21F8E0 + 8);
  long long v46 = *(long long *)((char *)&xmmword_26C21F8E0 + 8);
  int v10 = paramc_ListenerRemove(v9, "volume", (long long *)&v45);
  uint64_t v11 = *(void *)(v8 + 40);
  if (v10 >= 0) {
    int v12 = v7;
  }
  else {
    int v12 = v10;
  }
  uint64_t v45 = a1;
  long long v46 = v44;
  int v13 = paramc_ListenerRemove(v11, "rate", (long long *)&v45);
  uint64_t v14 = *(void *)(v8 + 40);
  if (v13 < 0 && v12 > -1) {
    int v12 = v13;
  }
  uint64_t v45 = a1;
  long long v46 = v44;
  int v16 = paramc_ListenerRemove(v14, "rate_baseline", (long long *)&v45);
  uint64_t v17 = *(void *)(v8 + 40);
  if (v16 < 0 && v12 > -1) {
    int v12 = v16;
  }
  uint64_t v45 = a1;
  long long v46 = v44;
  int v19 = paramc_ListenerRemove(v17, "waitfactor", (long long *)&v45);
  uint64_t v20 = *(void *)(v8 + 40);
  if (v19 < 0 && v12 > -1) {
    int v12 = v19;
  }
  uint64_t v45 = a1;
  long long v46 = v44;
  int v22 = paramc_ListenerRemove(v20, "pitch", (long long *)&v45);
  uint64_t v23 = *(void *)(v8 + 40);
  if (v22 < 0 && v12 > -1) {
    int v12 = v22;
  }
  uint64_t v45 = a1;
  long long v46 = v44;
  int v25 = paramc_ListenerRemove(v23, "pitch_baseline", (long long *)&v45);
  uint64_t v26 = *(void *)(v8 + 40);
  if (v25 < 0 && v12 > -1) {
    int v12 = v25;
  }
  uint64_t v45 = a1;
  long long v46 = v44;
  int v28 = paramc_ListenerRemove(v26, "audiooutputbufsamples", (long long *)&v45);
  if (v28 >= 0 || v12 <= -1) {
    uint64_t v30 = v12;
  }
  else {
    uint64_t v30 = v28;
  }
  if (a1[5])
  {
    int v31 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v30 > -1 && v31 < 0) {
      uint64_t v30 = v31;
    }
    else {
      uint64_t v30 = v30;
    }
  }
  if (a1[6])
  {
    int v33 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"AUDIOFETCHER");
    if (v33 >= 0 || (int)v30 <= -1) {
      uint64_t v30 = v30;
    }
    else {
      uint64_t v30 = v33;
    }
  }
  if (a1[15])
  {
    uint64_t v30 = Lookup_ObjClose(a1 + 15);
    a1[15] = 0;
  }
  if (a1[2687]) {
    mfs_WSOLA__Remove(a1 + 2687);
  }
  uint64_t v35 = a1[2684];
  if (v35) {
    heap_Free(*(void **)(a1[2] + 8), v35);
  }
  uint64_t v36 = a1[4];
  if (v36)
  {
    int v37 = critsec_ObjClose(v36);
    if ((int)v30 > -1 && v37 < 0) {
      uint64_t v30 = v37;
    }
    else {
      uint64_t v30 = v30;
    }
  }
  heap_Free(*(void **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjClose: %x", v39, v40, v41, v30);
  return v30;
}

uint64_t synth_bet4_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9356, 22680) & 0x80000000) != 0) {
    return 2164269064;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Entering synth_bet4_ObjReopen", v3, v4, v5, v16);
  uint64_t v10 = synth_bet4_loc_SynthInit(a1);
  if ((v10 & 0x80000000) == 0)
  {
    if (!Lookup_HasSupportForPsola(*(void *)(a1 + 120), (_DWORD *)(a1 + 22640), (_DWORD *)(a1 + 22644))) {
      *(void *)(a1 + 22640) = 0;
    }
    if (!Lookup_HasSupportForWsola(*(void *)(a1 + 120), (_DWORD *)(a1 + 21420))) {
      *(_DWORD *)(a1 + 21420) = 0;
    }
  }
  uint64_t v11 = *(unsigned __int16 **)(a1 + 21496);
  if (v11 && *(_DWORD *)(a1 + 84) != *v11)
  {
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjReopen: Changing speaking rate", v7, v8, v9, v17);
    mfs_WSOLA__Remove((uint64_t *)(a1 + 21496));
    uint64_t v12 = mfs_WSOLA__Create(*(void *)(a1 + 16), *(_WORD *)(a1 + 84));
    *(void *)(a1 + 21496) = v12;
    if (v12) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 2164269066;
    }
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v10 = v13;
    }
    else
    {
      uint64_t v14 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 21472), ((*(_DWORD *)(a1 + 84) << 7) / 0x1F4u) & 0xFFFFFE);
      if (v14) {
        *(void *)(a1 + 21472) = v14;
      }
      else {
        uint64_t v10 = 2164269066;
      }
    }
  }
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"synth_bet4_ObjReopen: %x", v7, v8, v9, v10);
  return v10;
}

uint64_t synth_bet4_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 9356, 22680) & 0x80000000) != 0) {
    return 2164269064;
  }
  synstrmaux_InitStreamOpener(a1 + 21552, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4");
  *(unsigned char *)(a1 + 21480) = 0;
  *(_DWORD *)(a1 + 22636) = 0;
  *(_OWORD *)(a1 + 22616) = 0u;
  *(_OWORD *)(a1 + 22656) = 0u;
  if (synstrmaux_BuildAudioContentType("audio/L16;rate=", *(_DWORD *)(a1 + 84), (char *)(a1 + 21504), 0x30uLL) > 0x2F) {
    return 9;
  }
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-bandpass-filter;version=4.0",
    0,
    a1 + 22456);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-f0begin;version=4.0",
    0,
    a1 + 22472);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-f0end;version=4.0",
    0,
    a1 + 22488);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-duration;version=4.0",
    0,
    a1 + 22504);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-maxfade-l;version=4.0",
    0,
    a1 + 22520);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-maxfade-r;version=4.0",
    0,
    a1 + 22536);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-adjacent-l;version=4.0",
    0,
    a1 + 22552);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-psola-adjacent-r;version=4.0",
    0,
    a1 + 22568);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), a1 + 21504, 0, a1 + 22376);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 22392);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-usids;version=4.0",
    0,
    a1 + 22408);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-usoffsets;version=5.0",
    0,
    a1 + 22424);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-usdurs-32;version=5.0",
    0,
    a1 + 22440);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 21552), a1 + 21504, a1 + 22584);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 21552), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    a1 + 22600);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 21552), *(void *)(a1 + 40), a3, a4);
  if ((v8 & 0x80000000) != 0) {
    synth_bet4_ProcessEnd(a1, a2);
  }
  return v8;
}

uint64_t synth_bet4_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v245 = 0;
  *(void *)float v246 = 0;
  uint64_t v244 = 0;
  int v243 = 0;
  v241 = 0;
  uint64_t v242 = 0;
  long long v239 = 0;
  int v240 = 0;
  uint64_t v237 = 0;
  uint64_t v238 = 0;
  uint64_t v235 = 0;
  uint64_t v236 = 0;
  uint64_t v233 = 0;
  uint64_t v234 = 0;
  uint64_t v231 = 0;
  uint64_t v232 = 0;
  uint64_t v230 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 9356, 22680);
  if ((v7 & 0x80000000) != 0) {
    return 2164269064;
  }
  *a5 = 1;
  if (!*(void *)(a1 + 48)) {
    return v7;
  }
  unsigned int v229 = 0;
  int v228 = 0;
  uint64_t v226 = 0;
  uint64_t v227 = 0;
  uint64_t v225 = 0;
  uint64_t v8 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 40) + 80))(*(void *)(a1 + 22456), *(void *)(a1 + 22464), a1 + 21412, 4, &v225);
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v23 = v8;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_64:
    log_OutPublic(v63, (uint64_t)"SYNTH_BET4", 59005, "%s%s%s%x", v9, v10, v11, v12, "contentType");
    return v23;
  }
  int v13 = v225;
  uint64_t v14 = (*(uint64_t (**)(void, void, unsigned int *, int *))(*(void *)(a1 + 40) + 144))(*(void *)(a1 + 22408), *(void *)(a1 + 22416), v246, &v243);
  if ((v14 & 0x80000000) != 0)
  {
    uint64_t v23 = v14;
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59004, "%s%x", v15, v16, v17, v18, "lhError");
    return v23;
  }
  uint64_t v23 = (*(uint64_t (**)(void, void, unsigned int *, uint64_t *))(*(void *)(a1 + 40) + 144))(*(void *)(a1 + 22392), *(void *)(a1 + 22400), &v246[1], &v244);
  if ((v23 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59004, "%s%x", v19, v20, v21, v22, "lhError");
    return v23;
  }
  if (!v246[1])
  {
    if (!v243 || !v244) {
      goto LABEL_75;
    }
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 21552), *(void *)(a1 + 40));
  }
  uint64_t v24 = (*(uint64_t (**)(void, void, _DWORD **, unsigned int *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22408), *(void *)(a1 + 22416), &v239, v246);
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v23 = v24;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22424), *(void *)(a1 + 22432), &v238, &v245);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v23 = v25;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v26 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22440), *(void *)(a1 + 22448), &v237, (char *)&v244 + 4);
  if ((v26 & 0x80000000) != 0)
  {
    uint64_t v23 = v26;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v27 = (*(uint64_t (**)(void, void, uint64_t *, unsigned int *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22472), *(void *)(a1 + 22480), &v236, &v229);
  if ((v27 & 0x80000000) != 0)
  {
    uint64_t v23 = v27;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v28 = (*(uint64_t (**)(void, void, uint64_t *, int *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22488), *(void *)(a1 + 22496), &v235, &v228);
  if ((v28 & 0x80000000) != 0)
  {
    uint64_t v23 = v28;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22504), *(void *)(a1 + 22512), &v234, (char *)&v227 + 4);
  if ((v29 & 0x80000000) != 0)
  {
    uint64_t v23 = v29;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v30 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22520), *(void *)(a1 + 22528), &v233, &v227);
  if ((v30 & 0x80000000) != 0)
  {
    uint64_t v23 = v30;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v31 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22536), *(void *)(a1 + 22544), &v232, (char *)&v226 + 4);
  if ((v31 & 0x80000000) != 0)
  {
    uint64_t v23 = v31;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v32 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22552), *(void *)(a1 + 22560), &v231, &v226);
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v23 = v32;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v33 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22568), *(void *)(a1 + 22576), &v230, (char *)&v225 + 4);
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v23 = v33;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v34 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22376), *(void *)(a1 + 22384), &v242, (char *)&v245 + 4);
  if ((v34 & 0x80000000) != 0)
  {
    uint64_t v23 = v34;
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  uint64_t v23 = (*(uint64_t (**)(void, void, char **, unsigned int *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 22392), *(void *)(a1 + 22400), &v241, &v246[1]);
  if ((v23 & 0x80000000) != 0)
  {
    uint64_t v63 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_64;
  }
  if (!*(_DWORD *)(a1 + 22672))
  {
    unsigned int v65 = v246[0];
    unsigned int v66 = v245;
    if (HIDWORD(v244) < v245) {
      unsigned int v66 = HIDWORD(v244);
    }
    if (v66 < v246[0]) {
      unsigned int v65 = v66;
    }
    uint64_t v67 = v65 & 0xFFFFFFFC;
    do
    {
      if (!v67) {
        goto LABEL_20;
      }
      int v68 = *(_DWORD *)((char *)v239 + v67 - 4);
      v67 -= 4;
    }
    while (v68 != -1);
    if (HIDWORD(v245) >> 1 < (*(_DWORD *)(v237 + v67) + *(_DWORD *)(v238 + v67)) * (*(_DWORD *)(a1 + 84) / 1000))
    {
LABEL_75:
      *a5 = 0;
      return v23;
    }
  }
LABEL_20:
  if (v246[1])
  {
    uint64_t v35 = (*(uint64_t (**)(void, void, char **))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 22600), *(void *)(a1 + 22608), &v240);
    if ((v35 & 0x80000000) != 0)
    {
      uint64_t v23 = v35;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v36, v37, v38, v39, "stream");
      return v23;
    }
  }
  uint64_t v23 = critsec_Enter(*(void **)(a1 + 32));
  if ((v23 & 0x80000000) == 0)
  {
    unsigned int v40 = v246[0];
    if (v246[0] >= v245) {
      unsigned int v40 = v245;
    }
    if (v40 >= HIDWORD(v244)) {
      unsigned int v40 = HIDWORD(v244);
    }
    HIDWORD(v245) >>= 1;
    v246[0] = v40 >> 2;
    unsigned int v41 = v246[1];
    unsigned int v212 = v246[1] >> 5;
    v246[1] >>= 5;
    if (v41 < 0x20 || !v241 || !v240) {
      goto LABEL_214;
    }
    uint64_t v221 = (uint64_t *)(a1 + 96);
    size_t v211 = v41 & 0xFFFFFFE0;
    memcpy(v240, v241, v211);
    if (!v13) {
      goto LABEL_79;
    }
    uint64_t v45 = (_DWORD *)(a1 + 22636);
    if (v229 > 4)
    {
      *uint64_t v45 = 1;
      if (*(_DWORD *)(a1 + 22640) && *(_DWORD *)(a1 + 22644))
      {
        long long v46 = *(uint64_t ***)(a1 + 22648);
        if (v46)
        {
          uint64_t v47 = *v46;
          if (*v46)
          {
            uint64_t v48 = 0;
            unsigned int v49 = 1;
            do
            {
              freePeriDesc(*(void *)(a1 + 16), v47);
              *(void *)(*(void *)(a1 + 22648) + 8 * v48) = 0;
              long long v46 = *(uint64_t ***)(a1 + 22648);
              uint64_t v48 = v49;
              uint64_t v47 = v46[v49++];
            }
            while (v47);
          }
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v46);
          *(void *)(a1 + 22648) = 0;
        }
        if ((Psola_Initialise((uint64_t *)(a1 + 22656), *(void *)(a1 + 16), *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 22640), *(_DWORD *)(a1 + 22644)) & 0x80000000) != 0)log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v50, v51, v52, v53, v206); {
        uint64_t v54 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v246[0], 40);
        }
        *(void *)(*(void *)(a1 + 22656) + 104) = v54;
        if (!v54) {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v55, v56, v57, v58, v206);
        }
        if ((synth_bet4_Psola_GetPeriDescs(a1, (uint64_t)v239, v246[0]) & 0x80000000) != 0) {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59000, 0, v59, v60, v61, v62, v206);
        }
        else {
          *(void *)(*(void *)(a1 + 22656) + 128) = *(void *)(a1 + 22648);
        }
        goto LABEL_79;
      }
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"PMK data not available, PSOLA not possible", v42, v43, v44, v206);
    }
    *uint64_t v45 = 0;
LABEL_79:
    uint64_t v219 = (_DWORD *)(a1 + 22636);
    uint64_t v214 = (unsigned int *)(a1 + 22624);
    uint64_t v217 = (unsigned int *)(a1 + 22620);
    unsigned int v69 = *(_DWORD *)(a1 + 22620);
    if (*(_DWORD *)(a1 + 22624) < v69) {
      *uint64_t v214 = v69;
    }
    int v70 = HIDWORD(v245);
    uint64_t v213 = (_DWORD *)(a1 + 21484);
    *(_DWORD *)(a1 + 21484) = v239[v246[0] - 1] != -1;
    int v71 = concat_init(*(void *)(a1 + 16), 0, 0, (uint64_t)&byte_20D5A22AE, (uint64_t)synth_bet4_loc_WsolaOutputCB, a1, v242, v70, (uint64_t)v221, *(_DWORD *)(a1 + 22632), 0);
    if (v71 < 0)
    {
      LODWORD(v23) = v71;
      LODWORD(v78) = 0;
      goto LABEL_195;
    }
    LODWORD(v23) = concat_initW((uint64_t)v221, v72);
    if ((v23 & 0x80000000) != 0)
    {
      LODWORD(v78) = 0;
      goto LABEL_158;
    }
    uint64_t v77 = 0;
    LODWORD(v78) = 0;
    unsigned int v79 = (_DWORD *)(a1 + 21464);
    int v216 = (int *)(a1 + 22668);
    uint64_t v220 = (_DWORD *)(a1 + 21424);
    float v222 = (_DWORD *)(a1 + 22616);
    int v210 = (unsigned char *)(a1 + 21480);
    if (v212 <= 1) {
      uint64_t v80 = 1;
    }
    else {
      uint64_t v80 = v212;
    }
    uint64_t v215 = v80;
    float v82 = (_DWORD *)(a1 + 21484);
    unsigned int v81 = (_DWORD *)(a1 + 22624);
    while (1)
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"*************************\\"", v73, v74, v75, v207);
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"[%d/%d, %d/%d] => ", v83, v84, v85, v77);
      uint64_t v86 = *(void *)(a1 + 16);
      double v87 = &v241[32 * v77];
      long long v88 = *((_OWORD *)v87 + 1);
      long long v223 = *(_OWORD *)v87;
      long long v224 = v88;
      synth_bet4_loc_PrintMrkIn(v86, (unsigned int *)&v223, v89, v90, v91, v92, v93, v94);
      *unsigned int v79 = 0;
      int v95 = v240;
      unint64_t v96 = &v240[32 * v77];
      *((_DWORD *)v96 + 3) = *v81;
      if (!*v82 && v77 == v246[1] - 1)
      {
        int v97 = &v95[32 * v77];
        unsigned int v100 = *((_DWORD *)v97 + 4);
        float v98 = v97 + 16;
        unsigned int v99 = v100;
        if (v100 >= 2) {
          *float v98 = v99 - 1;
        }
      }
      unsigned int v101 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 80) * *((_DWORD *)v96 + 4));
      double v102 = *(double *)(a1 + 21440);
      v76.n128_f64[0] = (double)v101 * 100.0 / v102;
      *(_DWORD *)&v240[32 * v77 + 16] = (int)v76.n128_f64[0];
      float v103 = v241;
      int v104 = *(_DWORD *)&v241[32 * v77];
      switch(v104)
      {
        case 16:
          critsec_Leave(*(void **)(a1 + 32));
          uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 40);
          unsigned int v106 = *(_DWORD *)&v241[32 * v77 + 24];
          uint64_t v107 = "pitch";
          goto LABEL_135;
        case 17:
          critsec_Leave(*(void **)(a1 + 32));
          uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 40);
          unsigned int v106 = *(_DWORD *)&v241[32 * v77 + 24];
          uint64_t v107 = "timbre";
          goto LABEL_135;
        case 18:
          critsec_Leave(*(void **)(a1 + 32));
          uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 40);
          unsigned int v106 = *(_DWORD *)&v241[32 * v77 + 24];
          uint64_t v107 = "rate";
          goto LABEL_135;
        case 19:
          critsec_Leave(*(void **)(a1 + 32));
          unsigned int v127 = 100 * *(_DWORD *)&v241[32 * v77 + 24];
          if (v127 <= 0x13947)
          {
            unsigned int v129 = v127 / 0xC8;
            if (v129 <= 0x32) {
              unsigned int v128 = 50;
            }
            else {
              unsigned int v128 = v129;
            }
          }
          else
          {
            unsigned int v128 = 400;
          }
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", v128);
          critsec_Enter(*(void **)(a1 + 32));
          goto LABEL_152;
        case 20:
        case 21:
        case 22:
        case 23:
          goto LABEL_153;
        case 24:
          critsec_Leave(*(void **)(a1 + 32));
          uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 40);
          unsigned int v106 = *(_DWORD *)&v241[32 * v77 + 24];
          uint64_t v107 = "volume";
          goto LABEL_135;
        case 25:
          critsec_Leave(*(void **)(a1 + 32));
          uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 40);
          unsigned int v106 = *(_DWORD *)&v241[32 * v77 + 24];
          uint64_t v107 = "waitfactor";
LABEL_135:
          paramc_ParamSetUInt(v105, (uint64_t)v107, v106);
          critsec_Enter(*(void **)(a1 + 32));
          goto LABEL_153;
        default:
          if (v104 == 8)
          {
            *(void *)(a1 + 21440) = 0x4059000000000000;
            if (*v219)
            {
              *int v216 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v103[32 * v77 + 24]);
            }
            else
            {
              uint64_t v136 = *(void *)(*(void *)(a1 + 16) + 32);
              uint64_t v137 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v103[32 * v77 + 24]);
              log_OutText(v136, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"XX:MARKERS_AFTER:inserting WSOLA silence of length %d\n", v138, v139, v140, v137);
              unsigned int v141 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v241[32 * v77 + 24]);
              Wsola__silence_output(v221, v141);
            }
            *(double *)(a1 + 21440) = v102;
            int v142 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)&v241[32 * v77 + 24]);
            *(_DWORD *)&v240[32 * v77 + 16] = v142;
            *uint64_t v220 = 0;
            goto LABEL_152;
          }
          if (v104 != 33) {
            goto LABEL_152;
          }
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"posCur: %d >= u32CurFrame: %d?\n", v73, v74, v75, *(unsigned int *)&v241[32 * v77 + 12]);
          unint64_t v218 = v77 + 1;
          unint64_t v78 = v78;
          break;
      }
      while (1)
      {
        if (v218 >= v246[1])
        {
          unsigned int v109 = (int *)(a1 + 22636);
          if (v218 != v246[1])
          {
            float v82 = (_DWORD *)(a1 + 21484);
            unsigned int v81 = (_DWORD *)(a1 + 22624);
            unsigned int v79 = (_DWORD *)(a1 + 21464);
            goto LABEL_153;
          }
        }
        else
        {
          unsigned int v108 = v241;
          unsigned int v109 = (int *)(a1 + 22636);
          if (*(_DWORD *)&v241[32 * v218 + 12] <= *v222) {
            goto LABEL_144;
          }
        }
        BOOL v110 = v78 >= v246[0] || v78 >= v245;
        if (v110 || v78 >= HIDWORD(v244)) {
          break;
        }
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"%d >= %d\n", v73, v74, v75, *(unsigned int *)&v241[32 * v77 + 12]);
        int v112 = v239[v78];
        if (*v109)
        {
          unsigned int v113 = (int *)(*(void *)(*(void *)(a1 + 22656) + 104) + 40 * *(int *)(*(void *)(a1 + 22656) + 96));
          *unsigned int v113 = v112;
          v113[1] = *(_DWORD *)(v238 + 4 * v78);
          v113[2] = *(_DWORD *)(v237 + 4 * v78);
          v113[3] = *(_DWORD *)(v236 + 4 * v78);
          v113[4] = *(_DWORD *)(v235 + 4 * v78);
          v113[5] = *(_DWORD *)(v234 + 4 * v78);
          v113[6] = *(_DWORD *)(v233 + 4 * v78);
          v113[7] = *(_DWORD *)(v232 + 4 * v78);
          v113[8] = *(_DWORD *)(v231 + 4 * v78);
          v113[9] = *(_DWORD *)(v230 + 4 * v78);
        }
        else
        {
          int v114 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(v238 + 4 * v78));
          int v115 = UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(v237 + 4 * v78));
          concat_initUnit((uint64_t)v221, v112, v114, v115);
        }
        *(unsigned char *)(a1 + 21481) = 1;
        if (*v220)
        {
          if (*v109)
          {
            Psola_Synthesis((uint64_t)v221, *(void *)(a1 + 22656));
          }
          else
          {
            LODWORD(v23) = concat_midSynthesis((uint64_t)v221);
            if ((v23 & 0x80000000) != 0) {
              goto LABEL_214;
            }
          }
        }
        else
        {
          int v116 = *v109;
          if (*v239 != -1)
          {
            if (v116)
            {
LABEL_121:
              Psola_Synthesis((uint64_t)v221, *(void *)(a1 + 22656));
            }
            else
            {
              LODWORD(v23) = concat_midSynthesis((uint64_t)v221);
              if ((v23 & 0x80000000) != 0) {
                goto LABEL_214;
              }
            }
            *uint64_t v220 = 1;
            goto LABEL_123;
          }
          if (v116) {
            goto LABEL_121;
          }
          concat_startSynthesis((uint64_t)v221);
        }
LABEL_123:
        *v222 += (float)((float)((float)((float)((float)*(unsigned int *)(a1 + 136) / 1000.0)
                                                     * (float)*(int *)(v237 + 4 * v78))
                                             / (float)*(unsigned int *)(a1 + 76))
                                     + 0.5);
        if (*v216)
        {
          Psola_SynthSilence_0(v221, *(int **)(*(void *)(a1 + 22656) + 16), *v216, *(int **)(a1 + 22656));
          *int v216 = 0;
        }
        if (!*v109) {
          *(_DWORD *)&v240[32 * v77 + 16] += (int)((double)(*(_DWORD *)(a1 + 21408)
        }
                                                          + *(_DWORD *)(a1 + 21404)
                                                          + *(_DWORD *)(a1 + 21392))
                                                 * 100.0
                                                 / *(double *)(a1 + 21440));
        uint64_t v117 = *(void *)(*(void *)(a1 + 16) + 32);
        UNICORN__concat_Dur2Sample(*(_DWORD *)(a1 + 136), *(_DWORD *)(v237 + 4 * v78));
        log_OutText(v117, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"pUnitsIn[%d]=%d, pSynth->u32CurSample=%d, concat_Dur2Sample: %d", v118, v119, v120, v78);
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Synth outputting unit id %d , pSynth->u32CurSample=%d", v121, v122, v123, v239[v78]);
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"pMrkOut[%d].lenCur = %d + (%d) = %d", v124, v125, v126, v77);
        ++v78;
      }
      if (v218 < v246[1])
      {
        unsigned int v108 = v241;
LABEL_144:
        if (*(_DWORD *)&v108[32 * v218] == 8 && !*v219)
        {
          mfs_Wsola__fade_out(a1 + 176, *(void *)(a1 + 224), *(_DWORD *)(a1 + 188), *(void *)(a1 + 232));
          *int v210 = 1;
          Wsola__write_audio(v221, *(void *)(a1 + 224), 0, *(_DWORD *)(a1 + 188));
          *int v210 = 0;
          unsigned int v130 = *(_DWORD *)(a1 + 180) + *v217;
          BOOL v131 = &v240[32 * v77];
          int v133 = *((_DWORD *)v131 + 4);
          int v132 = (unsigned int *)(v131 + 16);
          unsigned int v134 = *(v132 - 1);
          if (v130 != v133 + v134)
          {
            BOOL v110 = v130 >= v134;
            unsigned int v135 = v130 - v134;
            if (v135 != 0 && v110) {
              *int v132 = v135;
            }
            else {
              *(_DWORD *)&v240[32 * v246[1] - 16] = 0;
            }
          }
        }
      }
LABEL_152:
      float v82 = (_DWORD *)(a1 + 21484);
      unsigned int v81 = (_DWORD *)(a1 + 22624);
      unsigned int v79 = (_DWORD *)(a1 + 21464);
LABEL_153:
      *unsigned int v81 = *(_DWORD *)&v240[32 * v77 + 16] + *(_DWORD *)&v240[32 * v77 + 12];
      if (++v77 == v215)
      {
LABEL_158:
        if (!*v219) {
          concat_deinitW((uint64_t)v221);
        }
        if ((v23 & 0x80000000) == 0)
        {
          if (v212 < v246[1] || v78 < v246[0])
          {
            *a5 = 2;
            *v217 += *(_DWORD *)(a1 + 180);
          }
          else
          {
            *a5 = 1;
            if (!*v213)
            {
              if (*v219)
              {
                Psola_OutputFinalSilence(v221, *(void *)(a1 + 22656));
                *(unsigned char *)(a1 + 21480) = 0;
                *(_DWORD *)(a1 + 21424) = 0;
              }
              else
              {
                concat_endSynthesis((uint64_t)v221, 1);
                v76.n128_f64[0] = mfs_WSOLA__Initialise(*(void *)(a1 + 21496));
              }
            }
            __int16 v143 = *(void **)(a1 + 22656);
            if (v143)
            {
              Psola_Deinitialise(*(void *)(a1 + 16), v143);
              *(void *)(a1 + 22656) = 0;
            }
            unsigned int v144 = *v217 + *(_DWORD *)(a1 + 180);
            *uint64_t v217 = v144;
            if (!*v213)
            {
              ++*(_DWORD *)(a1 + 22616);
              uint64_t v145 = &v240[32 * v246[1] - 32];
              int v147 = *((_DWORD *)v145 + 4);
              uint64_t v146 = (unsigned int *)(v145 + 16);
              unsigned int v148 = *(v146 - 1);
              if (v144 != v147 + v148)
              {
                BOOL v110 = v144 >= v148;
                unsigned int v149 = v144 - v148;
                if (!v110) {
                  unsigned int v149 = 0;
                }
                *uint64_t v146 = v149;
                *uint64_t v214 = v144;
              }
            }
            if (HIDWORD(v245))
            {
              LODWORD(v23) = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22376), *(void *)(a1 + 22384), (2 * HIDWORD(v245)), v76);
              if ((v23 & 0x80000000) != 0) {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v150, v73, v74, v75, "contentType");
              }
            }
          }
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Written %d (pSynth->stConcat.w.samples_output)", v73, v74, v75, *(unsigned int *)(a1 + 180));
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Current %d (pSynth->u32CurSample)", v151, v152, v153, *v217);
          unsigned __int16 v159 = 0;
          do
          {
            uint64_t v160 = *(void *)(a1 + 16);
            uint64_t v161 = v159;
            uint64_t v162 = 32 * v159;
            long long v163 = *(_OWORD *)&v240[v162 + 16];
            long long v223 = *(_OWORD *)&v240[v162];
            long long v224 = v163;
            synth_bet4_loc_PrintMrkOut(v160, (int *)&v223, (uint64_t)&byte_20D5A22AE, v154, v155, v156, v157, v158, v208);
            uint64_t v164 = *(void *)(a1 + 16);
            int v165 = &v240[32 * v161];
            long long v166 = *((_OWORD *)v165 + 1);
            long long v223 = *(_OWORD *)v165;
            long long v224 = v166;
            synth_bet4_loc_PrintMrkOut(v164, (int *)&v223, (uint64_t)"markereval:", v167, v168, v169, v170, v171, v209);
            if (*(_DWORD *)&v240[v162] == 33) {
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Synth outputting phoneme marker [%c], off %d, len %d", v156, v157, v158, v240[32 * v161 + 24]);
            }
            unsigned __int16 v159 = v161 + 1;
          }
          while (v212 > (unsigned __int16)(v161 + 1));
          if ((v23 & 0x80000000) == 0
            && ((*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 22600), *(void *)(a1 + 22608), v211) & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v172, v173, v174, v175, "stream");
          }
          int v176 = (*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22392), *(void *)(a1 + 22400), v211);
          if (v176 < 0)
          {
            LODWORD(v23) = v176;
            uint64_t v187 = *(void *)(*(void *)(a1 + 16) + 32);
          }
          else
          {
            int v181 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22408), *(void *)(a1 + 22416), (4 * v78));
            if (v181 < 0)
            {
              LODWORD(v23) = v181;
              uint64_t v187 = *(void *)(*(void *)(a1 + 16) + 32);
            }
            else
            {
              int v182 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22424), *(void *)(a1 + 22432), (4 * v78));
              if ((v182 & 0x80000000) == 0)
              {
                LODWORD(v23) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22440), *(void *)(a1 + 22448), (4 * v78));
                if ((v23 & 0x80000000) != 0) {
                  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v183, v184, v185, v186, "contentType");
                }
                goto LABEL_195;
              }
              LODWORD(v23) = v182;
              uint64_t v187 = *(void *)(*(void *)(a1 + 16) + 32);
            }
          }
          log_OutPublic(v187, (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v177, v178, v179, v180, "contentType");
        }
LABEL_195:
        if (*v219 == 1)
        {
          int v188 = 4 * v78;
        }
        else
        {
          int v188 = 4 * (*(_DWORD *)(a1 + 22664) == 0);
          *(_DWORD *)(a1 + 22664) = 1;
        }
        LODWORD(v225) = v188;
        if ((v23 & 0x80000000) == 0)
        {
          int v189 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22472), *(void *)(a1 + 22480));
          if (v189 < 0)
          {
            LODWORD(v23) = v189;
            uint64_t v203 = *(void *)(*(void *)(a1 + 16) + 32);
          }
          else
          {
            int v194 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22488), *(void *)(a1 + 22496), v225);
            if (v194 < 0)
            {
              LODWORD(v23) = v194;
              uint64_t v203 = *(void *)(*(void *)(a1 + 16) + 32);
            }
            else
            {
              int v195 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22504), *(void *)(a1 + 22512), v225);
              if (v195 < 0)
              {
                LODWORD(v23) = v195;
                uint64_t v203 = *(void *)(*(void *)(a1 + 16) + 32);
              }
              else
              {
                int v196 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22520), *(void *)(a1 + 22528), v225);
                if (v196 < 0)
                {
                  LODWORD(v23) = v196;
                  uint64_t v203 = *(void *)(*(void *)(a1 + 16) + 32);
                }
                else
                {
                  int v197 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22536), *(void *)(a1 + 22544), v225);
                  if (v197 < 0)
                  {
                    LODWORD(v23) = v197;
                    uint64_t v203 = *(void *)(*(void *)(a1 + 16) + 32);
                  }
                  else
                  {
                    int v198 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22552), *(void *)(a1 + 22560), v225);
                    if ((v198 & 0x80000000) == 0)
                    {
                      LODWORD(v23) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 22568), *(void *)(a1 + 22576), v225);
                      if ((v23 & 0x80000000) != 0) {
                        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v199, v200, v201, v202, "contentType");
                      }
                      goto LABEL_214;
                    }
                    LODWORD(v23) = v198;
                    uint64_t v203 = *(void *)(*(void *)(a1 + 16) + 32);
                  }
                }
              }
            }
          }
          log_OutPublic(v203, (uint64_t)"SYNTH_BET4", 59006, "%s%s%s%x", v190, v191, v192, v193, "contentType");
        }
LABEL_214:
        int v204 = critsec_Leave(*(void **)(a1 + 32));
        if (v204 >= 0 || (int)v23 <= -1) {
          return v23;
        }
        else {
          return v204;
        }
      }
    }
  }
  return v23;
}

uint64_t synth_bet4_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9356, 22680) & 0x80000000) != 0) {
    return 2164269064;
  }
  *(unsigned char *)(a1 + 21480) = 0;
  *(_OWORD *)(a1 + 22616) = 0u;
  Lookup_DeInit(*(uint64_t **)(a1 + 120));
  if (!*(_DWORD *)(a1 + 22636)) {
    concat_endSynthesis(a1 + 96, 0);
  }
  uint64_t v3 = *(uint64_t ***)(a1 + 22648);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 1;
      do
      {
        freePeriDesc(*(void *)(a1 + 16), v4);
        *(void *)(*(void *)(a1 + 22648) + 8 * v5) = 0;
        uint64_t v3 = *(uint64_t ***)(a1 + 22648);
        uint64_t v5 = v6;
        uint64_t v4 = v3[v6++];
      }
      while (v4);
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v3);
    *(void *)(a1 + 22648) = 0;
  }
  uint64_t v7 = *(void **)(a1 + 22656);
  if (v7)
  {
    Psola_Deinitialise(*(void *)(a1 + 16), v7);
    *(void *)(a1 + 22656) = 0;
  }
  mfs_WSOLA__Initialise(*(void *)(a1 + 21496));
  concat_final_deinitW((uint64_t *)(a1 + 96));
  uint64_t v8 = *(void *)(a1 + 40);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 21552), v8);
}

uint64_t synth_bet4_loc_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  if (!strcmp(__s1, "audiooutputbufsamples"))
  {
    if ((int)LH_atoi(a3) <= 0) {
      uint64_t result = 2164269071;
    }
    else {
      uint64_t result = 0;
    }
  }
  else if (!strcmp(__s1, "volume"))
  {
    if (LH_atoi(a3) <= 0x64) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2164269071;
    }
  }
  else if (!strcmp(__s1, "rate"))
  {
    if (LH_atoi(a3) - 401 >= 0xFFFFFEA1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2164269071;
    }
  }
  else
  {
    if (!strcmp(__s1, "rate_baseline"))
    {
      BOOL v8 = __CFADD__(LH_atoi(a3) - 401, 351);
LABEL_25:
      if (v8) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 2164269071;
      }
      goto LABEL_28;
    }
    if (!strcmp(__s1, "ratewpm"))
    {
      uint64_t result = 2164269057;
      goto LABEL_28;
    }
    if (strcmp(__s1, "waitfactor"))
    {
      if (strcmp(__s1, "pitch") && strcmp(__s1, "pitch_baseline"))
      {
        uint64_t result = 0;
        goto LABEL_28;
      }
      BOOL v8 = __CFADD__(LH_atoi(a3) - 201, 151);
      goto LABEL_25;
    }
    if (LH_atoi(a3) <= 9) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 2164269071;
    }
  }
LABEL_28:
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet4_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  if (strcmp(__s1, "audiooutputbufsamples")
    && strcmp(__s1, "volume")
    && strcmp(__s1, "rate")
    && strcmp(__s1, "rate_baseline")
    && strcmp(__s1, "ratewpm")
    && strcmp(__s1, "waitfactor")
    && strcmp(__s1, "pitch")
    && strcmp(__s1, "pitch_baseline"))
  {
    return 0;
  }
  uint64_t v7 = LH_atoi(a3);
  return synth_bet4_loc_ParamSet(a1, __s1, (uint64_t)v7);
}

uint64_t synth_bet4_loc_ParamSet(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!strcmp(a2, "audiooutputbufsamples"))
  {
    uint64_t v6 = 0;
    if (a3 <= 1) {
      int v19 = 1;
    }
    else {
      int v19 = a3;
    }
    *(_DWORD *)(a1 + 72) = v19;
  }
  else
  {
    uint64_t v6 = critsec_Enter(*(void **)(a1 + 32));
    if ((v6 & 0x80000000) == 0)
    {
      if (!strcmp(a2, "volume"))
      {
        if (a3 <= 0x64)
        {
          if (a3 <= 0x50) {
            double v20 = (double)(int)a3 / 80.0;
          }
          else {
            double v20 = ((double)(int)a3 + -80.0) / 20.0 + 1.0;
          }
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set volume %d (synth %f)", v7, v8, v9, a3);
          *(double *)(a1 + 21432) = v20;
          goto LABEL_29;
        }
      }
      else if (!strcmp(a2, "rate_baseline"))
      {
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          unsigned int v26 = 0;
          *(_DWORD *)(a1 + 92) = a3;
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v26);
          synth_bet4_loc_ParamSet(a1, "rate", v26);
          uint64_t v10 = 0;
          goto LABEL_30;
        }
      }
      else
      {
        if (strcmp(a2, "rate"))
        {
          uint64_t v10 = 2164269071;
          if (!strcmp(a2, "ratewpm"))
          {
            uint64_t v10 = 2164269057;
          }
          else if (!strcmp(a2, "waitfactor"))
          {
            if (a3 <= 9)
            {
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set wait factor %d (synth %f)", v11, v12, v13, a3);
              *(double *)(a1 + 21456) = (double)(int)a3;
              goto LABEL_29;
            }
          }
          else
          {
            if (!strcmp(a2, "pitch_baseline"))
            {
              uint64_t v10 = synth_bet4_handle_pitch_baseline(a1, a3);
              goto LABEL_30;
            }
            if (strcmp(a2, "pitch")) {
              goto LABEL_29;
            }
            if ((a3 - 201) >= 0xFFFFFF69)
            {
              int v14 = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 88), a3);
              double v15 = (double)v14 + -100.0 + (double)v14 + -100.0;
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set pitch %d (synth %f)", v16, v17, v18, a3);
              *(double *)(a1 + 21448) = v15;
LABEL_29:
              uint64_t v10 = v6;
            }
          }
LABEL_30:
          critsec_Leave(*(void **)(a1 + 32));
          return v10;
        }
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          double v25 = (double)(int)MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 92), a3);
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 3, 0, (uint64_t)"Set rate %d (synth %f)", v21, v22, v23, a3);
          *(double *)(a1 + 21440) = v25;
          goto LABEL_29;
        }
      }
      uint64_t v10 = 2164269071;
      goto LABEL_30;
    }
  }
  return v6;
}

uint64_t synth_bet4_loc_ParamGetListen(uint64_t a1, unsigned char *a2, signed int a3, signed int a4, unsigned int a5, long long *a6, int *a7)
{
  if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, *a7 < a3)
    || (a5 = a4, *a7 > a4))
  {
    uint64_t v14 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v20 = v14;
      uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
      double v25 = "parameter";
      uint64_t v23 = "%s%s";
      uint64_t v22 = 59009;
      goto LABEL_8;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
  long long v26 = *a6;
  uint64_t v27 = *((void *)a6 + 2);
  uint64_t v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
    uint64_t v22 = 59010;
    uint64_t v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET4", v22, v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet4_loc_SynthInit(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  unsigned int v25 = 0;
  uint64_t v20 = 0;
  __s2 = 0;
  uint64_t v3 = (uint64_t *)(a1 + 120);
  if (*(void *)(a1 + 120))
  {
    Lookup_ObjClose((uint64_t *)(a1 + 120));
    uint64_t *v3 = 0;
  }
  Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v2 + 40), (uint64_t)"frequencyhz", (unsigned int *)(a1 + 84));
  if ((UInt & 0x80000000) != 0
    || (*(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 84),
        Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceframesize", (unsigned int *)(a1 + 80)),
        (UInt & 0x80000000) != 0)
    || (uint64_t v23 = 0,
        uint64_t v24 = 0,
        uint64_t v22 = 0,
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 80) * *(_DWORD *)(a1 + 84) / 0x3E8u,
        Uuint64_t Int = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voice", &v24),
        (UInt & 0x80000000) != 0))
  {
    uint64_t v13 = UInt;
    uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_22:
    log_OutPublic(v18, (uint64_t)"SYNTH_BET4", 59008, "%s%s", v5, v6, v7, v8, "parameter");
    return v13;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"coder", &v23);
  if ((Str & 0x80000000) != 0
    || (uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"reduction", &v22), (Str & 0x80000000) != 0))
  {
    uint64_t v13 = Str;
    uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_22;
  }
  __s[0] = 0;
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  size_t v10 = strlen(__s);
  LH_itoa(*(_DWORD *)(a1 + 84) / 0x3E8u, &__s[v10], 0xAu);
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"datapackagename", &v20) & 0x80000000) == 0 && v20 && *v20)
  {
    uint64_t Int = brokeraux_ComposeBrokerString(v2, __s, 0, 0, 0, 0, 0, (char *)__s1, 0x100uLL);
    if ((Int & 0x80000000) != 0) {
      return Int;
    }
    __strcpy_chk();
  }
  uint64_t v12 = Lookup_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), *(void *)(a1 + 24), (uint64_t)__s, v3);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t v13 = v12;
    uint64_t *v3 = 0;
    return v13;
  }
  Lookup_GetComponentID(*v3, &__s2);
  if (!__s2 || !*__s2)
  {
LABEL_25:
    *(_DWORD *)(a1 + 22632) = 0;
    uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", (int *)&v25);
    if ((Int & 0x80000000) == 0)
    {
      uint64_t Int = synth_bet4_loc_ParamSet(a1, "volume", v25);
      if ((Int & 0x80000000) == 0)
      {
        uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (int *)&v25);
        if ((Int & 0x80000000) == 0)
        {
          uint64_t Int = synth_bet4_loc_ParamSet(a1, "rate_baseline", v25);
          if ((Int & 0x80000000) == 0)
          {
            uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (int *)&v25);
            if ((Int & 0x80000000) == 0)
            {
              uint64_t Int = synth_bet4_loc_ParamSet(a1, "rate", v25);
              if ((Int & 0x80000000) == 0)
              {
                uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactor", (int *)&v25);
                if ((Int & 0x80000000) == 0)
                {
                  uint64_t Int = synth_bet4_loc_ParamSet(a1, "waitfactor", v25);
                  if ((Int & 0x80000000) == 0)
                  {
                    uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (int *)&v25);
                    if ((Int & 0x80000000) == 0)
                    {
                      uint64_t Int = synth_bet4_loc_ParamSet(a1, "pitch_baseline", v25);
                      if ((Int & 0x80000000) == 0)
                      {
                        uint64_t Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v25);
                        if ((Int & 0x80000000) == 0) {
                          return synth_bet4_loc_ParamSet(a1, "pitch", v25);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Int;
  }
  __s1[0] = 0;
  uint64_t v13 = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicecomponentid", __s1);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_22;
  }
  if (!__s1[0] || !*__s1[0] || !strcmp(__s1[0], __s2)) {
    goto LABEL_25;
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59013, "%s%s", v14, v15, v16, v17, "voice");
  return v13;
}

uint64_t synth_bet4_handle_pitch_baseline(uint64_t a1, int a2)
{
  if ((a2 - 201) < 0xFFFFFF69) {
    return 2164269071;
  }
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  unsigned int v6 = 0;
  *(_DWORD *)(a1 + 88) = a2;
  paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (int *)&v6);
  synth_bet4_loc_ParamSet(a1, "pitch", v6);
  return 0;
}

uint64_t synth_bet4_Psola_GetPeriDescs(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 8, (a3 + 1));
  *(void *)(a1 + 22648) = v6;
  if (!v6) {
    return 2164269066;
  }
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      *(void *)(*(void *)(a1 + 22648) + 8 * v7) = newPeriDesc(*(void *)(a1 + 16));
      uint64_t v9 = *(void *)(*(void *)(a1 + 22648) + 8 * v7);
      if (!v9) {
        return 2164269066;
      }
      unsigned int v10 = *(_DWORD *)(a2 + 4 * v7);
      if (v10 == -1) {
        break;
      }
      uint64_t v11 = Lookup_UnitPeriInfo(*(void **)(a1 + 120), v10, v9);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      uint64_t v8 = Psola_AssignPeriRangesDyna(*(unsigned __int16 **)(*(void *)(a1 + 22648) + 8 * v7));
      uint64_t v9 = *(void *)(*(void *)(a1 + 22648) + 8 * v7);
      if (!*(_WORD *)(v9 + 4)) {
        goto LABEL_10;
      }
LABEL_12:
      if (a3 == ++v7) {
        return v8;
      }
    }
    *(void *)uint64_t v9 = 0;
LABEL_10:
    __int16 v12 = *(_WORD *)(v9 + 2);
    if (v12)
    {
      *(_WORD *)(v9 + 4) = 1;
      *(_WORD *)(v9 + 2) = v12 - 1;
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t synth_bet4_loc_WsolaOutputCB(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 21464;
  int v38 = 0;
  *(unsigned char *)(a1 + 21482) = 0;
  uint64_t v7 = (unsigned char *)(a1 + 21482);
  if (*(double *)(a1 + 21440) != 100.0)
  {
    uint64_t v21 = 0;
    *(_DWORD *)(a1 + 176) += a3;
    do
    {
LABEL_16:
      char v37 = 1;
      *(_DWORD *)uint64_t v6 = (2 * ((274877907 * (unint64_t)*(unsigned int *)(a1 + 136)) >> 32)) & 0x3FFFFF80;
      mfs_WSOLA__TimeScaleInputBuffer(*(void *)(a1 + 21496), *(unsigned char *)(v6 + 16), a2, a3, *(_WORD **)(a1 + 21472), (int *)v6, (__int16)((int)*(double *)(a1 + 21440) - 100), &v37, v7);
      uint64_t OutputLength = WSOLA__GetOutputLength(*(void *)(a1 + 21496), *(unsigned __int8 *)(v6 + 17), &v38);
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Output: %d %d %d %d | %d\n", v25, v26, v27, a3);
      if (*(unsigned __int8 *)(v6 + 18) - 1 > 1) {
        break;
      }
      uint64_t v31 = v38 ? "Length: %d/%d\n" : "Partial length: %d/%d\n";
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v31, v28, v29, v30, OutputLength);
      if (*(_DWORD *)v6)
      {
        uint64_t v21 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 22584), *(void *)(a1 + 22592), *(void *)(a1 + 21472), (2 * *(_DWORD *)v6));
        if ((v21 & 0x80000000) != 0) {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v32, v33, v34, v35, "stream");
        }
        else {
          *(_DWORD *)(a1 + 180) += *(_DWORD *)v6;
        }
      }
    }
    while (!v38);
    return v21;
  }
  uint64_t v8 = *(void *)(a1 + 21496);
  if (*(int *)(v8 + 112) < 1)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v9 = WSOLA__GetOutputLength(v8, *(unsigned __int8 *)(v6 + 17), &v38);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"Output: %d %d %d %d | %d\n", v10, v11, v12, a3);
    if (v38) {
      uint64_t v16 = "Length";
    }
    else {
      uint64_t v16 = "Partial length: %d/%d\n";
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v16, v13, v14, v15, v9);
    uint64_t v21 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 22584), *(void *)(a1 + 22592), *(void *)(a1 + 21472), (2 * *(_DWORD *)(*(void *)(a1 + 21496) + 112)));
    if ((v21 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET4", 59007, "%s%s%s%x", v17, v18, v19, v20, "stream");
      uint64_t v22 = *(void *)(a1 + 21496);
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 21496);
      *(_DWORD *)(a1 + 180) += *(_DWORD *)(v22 + 112);
    }
    *(_DWORD *)(v22 + 112) = 0;
  }
  int v38 = 1;
  if (a3)
  {
    uint64_t v21 = (*(uint64_t (**)(void, void, __int16 *, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 22584), *(void *)(a1 + 22592), a2, (2 * a3));
    BOOL v23 = v38 == 0;
  }
  else
  {
    BOOL v23 = 0;
  }
  *(_DWORD *)uint64_t v6 = a3;
  *(int32x2_t *)(a1 + 176) = vadd_s32(*(int32x2_t *)(a1 + 176), vdup_n_s32(a3));
  if (v23) {
    goto LABEL_16;
  }
  return v21;
}

uint64_t synth_bet4_loc_PrintMrkIn(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if ((int)v8 > 32)
  {
    switch(v8)
    {
      case 0x4000:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[3];
        uint64_t v10 = "SYNC off %d, len %d";
        break;
      case 0x24:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[3];
        uint64_t v10 = "LANG off %d, len %d";
        break;
      case 0x21:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = *((char *)a2 + 24);
        uint64_t v10 = "PHONE [%c], off %d, len %d";
        break;
      default:
LABEL_15:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = "TAG %d off %d, len %d";
        break;
    }
  }
  else
  {
    switch((int)v8)
    {
      case 16:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[6];
        uint64_t v10 = "PITCH [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 17:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[6];
        uint64_t v10 = "TIMBRE [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 18:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[6];
        uint64_t v10 = "RATE [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
        goto LABEL_15;
      case 24:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[6];
        uint64_t v10 = "VOLUME [%d], off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      case 26:
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = a2[3];
        uint64_t v10 = "AUDIO off %d, len %d";
        return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
      default:
        if (v8 == 1)
        {
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v8 = a2[3];
          uint64_t v10 = "WORD off %d, len %d";
        }
        else
        {
          if (v8 != 8) {
            goto LABEL_15;
          }
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v8 = a2[6];
          uint64_t v10 = "PAUSE [%d], off %d, len %d";
        }
        break;
    }
  }
  return log_OutText(v9, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v10, a6, a7, a8, v8);
}

uint64_t synth_bet4_loc_PrintMrkOut(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  log_OutText(*(void *)(a1 + 32), (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)" => ", a6, a7, a8, v23);
  int v15 = *a2;
  if (*a2 > 32)
  {
    switch(v15)
    {
      case 0x4000:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sSYNC off %d, len %d";
        break;
      case 0x24:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sLANG off %d, len %d";
        break;
      case 0x21:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sPHONE [%c], off %d, len %d";
        break;
      default:
LABEL_15:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sTAG %d off %d, len %d";
        break;
    }
  }
  else
  {
    switch(v15)
    {
      case 16:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sPITCH [%d], off %d, len %d";
        break;
      case 17:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sTIMBRE [%d], off %d, len %d";
        break;
      case 18:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sRATE [%d], off %d, len %d";
        break;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
        goto LABEL_15;
      case 24:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sVOLUME [%d], off %d, len %d";
        break;
      case 26:
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = "%sAUDIO off %d, len %d";
        break;
      default:
        if (v15 == 1)
        {
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v17 = "%sWORD off %d, len %d";
        }
        else
        {
          if (v15 != 8) {
            goto LABEL_15;
          }
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v17 = "%sPAUSE [%d], off %d, len %d";
        }
        break;
    }
  }
  log_OutText(v16, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)v17, v12, v13, v14, a3);
  uint64_t v21 = *(void *)(a1 + 32);
  return log_OutText(v21, (uint64_t)"SYNTH_BET4", 4, 0, (uint64_t)"\\************************/", v18, v19, v20, a9);
}

void mfs_Vect__Clear(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 12) = 0;
    bzero(*(void **)(a1 + 24), 8 * *(unsigned int *)(a1 + 8));
  }
}

void mfs_Vect__Reset(uint64_t a1)
{
  if (a1) {
    bzero(*(void **)(a1 + 24), 8 * *(unsigned int *)(a1 + 8));
  }
}

uint64_t mfs_Vect__Create(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = heap_Alloc(a1, 40);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_DWORD *)(v4 + 4) = 0;
    *(_DWORD *)(v4 + 8) = a2;
    *(_DWORD *)(v4 + 12) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(_WORD *)uint64_t v4 = 22050;
    *(void *)(v4 + 32) = a1;
    uint64_t v6 = (void *)heap_Alloc(a1, 8 * a2);
    *(void *)(v5 + 24) = v6;
    if (v6)
    {
      *(_DWORD *)(v5 + 12) = 0;
      bzero(v6, 8 * *(unsigned int *)(v5 + 8));
    }
    else
    {
      heap_Free(*(void **)(v5 + 32), v5);
      return 0;
    }
  }
  return v5;
}

uint64_t *mfs_Vect__Remove(uint64_t *result)
{
  if (result)
  {
    unsigned __int16 v1 = result;
    uint64_t v2 = *result;
    if (*result)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      uint64_t v4 = *(void **)(v2 + 32);
      if (v3)
      {
        heap_Free(*(void **)(v2 + 32), v3);
        uint64_t v2 = *v1;
      }
      *(void *)(v2 + 24) = 0;
      uint64_t result = heap_Free(v4, *v1);
      *unsigned __int16 v1 = 0;
    }
  }
  return result;
}

uint64_t mfs_Vect__Resize(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 8) >= a2)
    {
      return 1;
    }
    else
    {
      *(_DWORD *)(result + 8) = a2;
      uint64_t v3 = *(uint64_t **)(result + 32);
      uint64_t v4 = heap_Realloc(v3, *(void *)(result + 24), 8 * a2);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t result = 1;
      }
      else
      {
        *(void *)(v2 + 8) = 0;
        uint64_t v6 = *(void *)(v2 + 24);
        if (v6) {
          heap_Free(v3, v6);
        }
        uint64_t v5 = 0;
        uint64_t result = 0;
      }
      *(void *)(v2 + 24) = v5;
    }
  }
  return result;
}

uint64_t mfs_Downsample__Resize(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 32) == a2) {
      return 1;
    }
    LODWORD(v3) = *(_DWORD *)(result + 36);
    if (v3 >= a2)
    {
      *(_DWORD *)(result + 32) = a2;
      if ((v3 & 0x80000000) == 0)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(result + 16);
        do
        {
          *(_DWORD *)(v14 + 4 * v13) = ((int)v13 + 1) % (*(_DWORD *)(result + 32) + 1);
          uint64_t v3 = *(int *)(result + 36);
          BOOL v7 = v13++ < v3;
        }
        while (v7);
      }
      if ((v3 & 0x40000000) == 0)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(result + 24);
        do
        {
          *(_DWORD *)(v16 + 4 * v15) = (int)v15 % (*(_DWORD *)(result + 32) + 1);
          BOOL v7 = v15++ < ((2 * *(_DWORD *)(result + 36)) | 1);
        }
        while (v7);
      }
      unsigned int v12 = *(_DWORD *)(result + 32) + 1;
      goto LABEL_25;
    }
    *(_DWORD *)(result + 36) = a2;
    uint64_t result = heap_Realloc(*(uint64_t **)(result + 48), *(void *)result, 4 * a2 + 4);
    if (result)
    {
      *(void *)uint64_t v2 = result;
      uint64_t result = heap_Realloc(*(uint64_t **)(v2 + 48), *(void *)(v2 + 8), (4 * *(_DWORD *)(v2 + 36) + 4));
      if (result)
      {
        *(void *)(v2 + 8) = result;
        uint64_t result = heap_Realloc(*(uint64_t **)(v2 + 48), *(void *)(v2 + 16), (4 * *(_DWORD *)(v2 + 36) + 4));
        if (result)
        {
          *(void *)(v2 + 16) = result;
          uint64_t result = heap_Realloc(*(uint64_t **)(v2 + 48), *(void *)(v2 + 24), (8 * *(_DWORD *)(v2 + 36) + 8));
          if (result)
          {
            *(void *)(v2 + 24) = result;
            LODWORD(v4) = *(_DWORD *)(v2 + 36);
            if ((v4 & 0x80000000) == 0)
            {
              uint64_t v5 = 0;
              uint64_t v6 = *(void *)(v2 + 16);
              do
              {
                *(_DWORD *)(v6 + 4 * v5) = ((int)v5 + 1) % (*(_DWORD *)(v2 + 32) + 1);
                uint64_t v4 = *(int *)(v2 + 36);
                BOOL v7 = v5++ < v4;
              }
              while (v7);
            }
            if ((v4 & 0x40000000) == 0)
            {
              uint64_t v8 = 0;
              do
              {
                *(_DWORD *)(result + 4 * v8) = (int)v8 % (*(_DWORD *)(v2 + 32) + 1);
                LODWORD(v4) = *(_DWORD *)(v2 + 36);
                BOOL v7 = v8++ < (int)((2 * v4) | 1);
              }
              while (v7);
            }
            unsigned int v9 = *(_DWORD *)(v2 + 32) + 1;
            if (v9 <= v4)
            {
              uint64_t v10 = *(void *)v2;
              uint64_t v11 = *(void *)(v2 + 8);
              do
              {
                *(_DWORD *)(v10 + 4 * v9) = 0;
                *(_DWORD *)(v11 + 4 * v9++) = 0;
              }
              while (v9 <= v4);
            }
            *(_DWORD *)(v2 + 32) = v4;
            unsigned int v12 = v4 + 1;
LABEL_25:
            *(_DWORD *)(v2 + 44) = v12 >> 1;
            return 1;
          }
        }
      }
    }
    *(_DWORD *)(v2 + 32) = 0;
  }
  return result;
}

uint64_t *mfs_Downsample__Generate(uint64_t a1, unsigned int a2)
{
  if (a2 > 3) {
    return 0;
  }
  uint64_t v4 = heap_Alloc(a1, 56);
  uint64_t v5 = (uint64_t *)v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(void *)(v4 + 48) = a1;
    uint64_t v14 = v4;
    switch(a2)
    {
      case 0u:
        if (!mfs_Downsample__Resize(v4, 7u)) {
          goto LABEL_18;
        }
        uint64_t v6 = 0;
        uint64_t v7 = *v5;
        do
        {
          *(_DWORD *)(v7 + v6 * 4) = mfs_CoeffCorrFast2[v6];
          ++v6;
        }
        while (v6 != 8);
        break;
      case 1u:
        if (!mfs_Downsample__Resize(v4, 0x19u)) {
          goto LABEL_18;
        }
        uint64_t v8 = 0;
        uint64_t v9 = *v5;
        do
        {
          *(_DWORD *)(v9 + v8 * 4) = mfs_CoeffStage1Fast[v8];
          ++v8;
        }
        while (v8 != 26);
        break;
      case 2u:
        if (!mfs_Downsample__Resize(v4, 5u)) {
          goto LABEL_18;
        }
        uint64_t v10 = 0;
        uint64_t v11 = *v5;
        do
        {
          *(_DWORD *)(v11 + v10 * 4) = mfs_CoeffStage2[v10];
          ++v10;
        }
        while (v10 != 5);
        break;
      case 3u:
        if (!mfs_Downsample__Resize(v4, 3u))
        {
LABEL_18:
          Downsample__Remove(&v14);
          return 0;
        }
        uint64_t v12 = *v5;
        *(void *)uint64_t v12 = 0x3F11D5D3BD8FDCAALL;
        *(_DWORD *)(v12 + 8) = 1058133459;
        break;
      default:
        return v5;
    }
  }
  return v5;
}

uint64_t mfs_Downsample__VectorNC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if (!a1 || !a2 || !a3 || a5 < a4) {
    return 1;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 12) - 1;
  if (v9 < a4 || v9 < a5) {
    return 1;
  }
  unsigned int v12 = a5 - a4 + 1;
  if (*(_DWORD *)(*a3 + 12) < v12 >> 1) {
    mfs_Vect__Resize(*a3, v12 >> 1);
  }
  int v13 = *(_DWORD *)(a1 + 44);
  int v14 = 2 * v13;
  if (v13 >= 1)
  {
    unsigned int v15 = a4 - v14 + 1;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(unsigned int *)(a1 + 40);
    int v19 = v14 + 1;
    do
    {
      if ((v15 & 0x80000000) != 0) {
        int v20 = 0;
      }
      else {
        int v20 = *(_DWORD *)(*(void *)(a2 + 24) + 8 * v15);
      }
      *(float *)(v16 + 4 * v18) = (float)v20;
      v15 += 2;
      uint64_t v18 = *(unsigned int *)(v17 + 4 * v18);
      *(_DWORD *)(a1 + 40) = v18;
      --v19;
    }
    while (v19 > 2);
  }
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v22 = (void *)(v21 + 8 * a4);
  uint64_t v23 = *(void **)(*a3 + 24);
  uint64_t v24 = (int *)(v21 + 8 * (a4 + v14 - 1));
  int v25 = *(_DWORD *)(*a3 + 12) - v13;
  if (v25 >= 1)
  {
    int v26 = v25 + 1;
    while (1)
    {
      *uint64_t v23 = *v22;
      int v27 = *(_DWORD *)v23 + mfs_Downsample__InterpolateBetweenTwoSamples(a1, *v24);
      *(_DWORD *)uint64_t v23 = v27;
      int v28 = 65534;
      if (v27 > 65534) {
        goto LABEL_23;
      }
      if (v27 <= -65537) {
        break;
      }
LABEL_24:
      ++v23;
      v22 += 2;
      v24 += 4;
      if (--v26 <= 1)
      {
        int v13 = *(_DWORD *)(a1 + 44);
        int v14 = 2 * v13;
        goto LABEL_26;
      }
    }
    int v28 = -65536;
LABEL_23:
    *(_DWORD *)uint64_t v23 = v28;
    goto LABEL_24;
  }
LABEL_26:
  unsigned int v29 = v14 + a5;
  unsigned int v30 = *(_DWORD *)(a2 + 12);
  if (v29 <= v30)
  {
    if (v13 >= 1)
    {
      unsigned int v36 = v13 + 1;
      do
      {
        uint64_t v37 = *v22;
        v22 += 2;
        *uint64_t v23 = v37;
        LODWORD(v37) = *v24;
        v24 += 4;
        *(_DWORD *)v23++ += mfs_Downsample__InterpolateBetweenTwoSamples(a1, v37);
        --v36;
      }
      while (v36 > 1);
    }
  }
  else
  {
    if ((int)(v30 + ~a5) >= 1)
    {
      unsigned int v31 = v30 - a5;
      do
      {
        uint64_t v32 = *v22;
        v22 += 2;
        *uint64_t v23 = v32;
        LODWORD(v32) = *v24;
        v24 += 4;
        *(_DWORD *)v23++ += mfs_Downsample__InterpolateBetweenTwoSamples(a1, v32);
        --v31;
      }
      while (v31 > 1);
      int v13 = *(_DWORD *)(a1 + 44);
      unsigned int v30 = *(_DWORD *)(a2 + 12);
    }
    int v33 = v13 + a5 - v30;
    if (v33 >= 1)
    {
      unsigned int v34 = v33 + 1;
      do
      {
        uint64_t v35 = *v22;
        v22 += 2;
        *uint64_t v23 = v35;
        *(_DWORD *)v23++ += mfs_Downsample__InterpolateBetweenTwoSamples(a1, 0);
        --v34;
      }
      while (v34 > 1);
    }
  }
  int v38 = *(_DWORD *)(*a3 + 12);
  if (v38 >= 1)
  {
    uint64_t v39 = *(int **)(*a3 + 24);
    unsigned int v40 = v38 + 1;
    do
    {
      *v39 /= 2;
      v39 += 2;
      --v40;
    }
    while (v40 > 1);
  }
  return 1;
}

uint64_t mfs_Downsample__InterpolateBetweenTwoSamples(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  uint64_t v4 = *(unsigned int *)(a1 + 44);
  *(float *)(v2 + 4 * v3) = (float)a2;
  if ((int)v4 < 1)
  {
    float v9 = 0.0;
  }
  else
  {
    int v5 = v3 + 1;
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = (int *)(v6 + 4 * ((int)v3 + 1 + *(_DWORD *)(a1 + 32)));
    float v9 = 0.0;
    do
    {
      uint64_t v10 = *v8--;
      float v11 = *(float *)(v2 + 4 * v10) + *(float *)(v2 + 4 * *(int *)(v6 + 4 * v5));
      LODWORD(v10) = *v7++;
      float v9 = v9 + (float)(v11 * *(float *)&v10);
      ++v5;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)(a1 + 16) + 4 * v3);
  double v12 = v9;
  BOOL v13 = v9 < 0.0;
  double v14 = 0.5;
  if (v13) {
    double v14 = -0.5;
  }
  return (int)(v14 + v12);
}

uint64_t log_wsola_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SYNTH_BET4", (a2 + 2), 0, v3);
}

uint64_t log_wsola_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SYNTH_BET4", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t mfs_WSOLA__SetWindowOverlap(unsigned __int16 *a1, int a2)
{
  a1[1] = a2;
  unint64_t v3 = 274877907 * *a1 * a2;
  int v4 = (v3 >> 63) + (SHIDWORD(v3) >> 6);
  a1[2] = v4;
  a1[8] = 2 * v4;
  a1[9] = v4;
  int v5 = (__int16)a1[6];
  signed __int16 v6 = 2 * v5 - v4;
  if (v5 < (__int16)v4) {
    signed __int16 v6 = a1[6];
  }
  a1[16] = v6;
  unsigned int v7 = 2 * (v5 + (__int16)(2 * v4)) - (__int16)v4 + v6;
  *((_DWORD *)a1 + 7) = v7;
  uint64_t v8 = *((void *)a1 + 7);
  if (!v8
    || v7 <= *(_DWORD *)(v8 + 12)
    || (uint64_t v9 = 2164269066, mfs_Vect__Resize(v8, v7) == 1)
    && mfs_Vect__Resize(*((void *)a1 + 8), *((_DWORD *)a1 + 7)) == 1
    && mfs_Vect__Resize(*((void *)a1 + 9), *((_DWORD *)a1 + 7) >> 1) == 1
    && mfs_Vect__Resize(*((void *)a1 + 10), *((_DWORD *)a1 + 7) >> 1) == 1
    && mfs_Vect__Resize(*((void *)a1 + 11), *((_DWORD *)a1 + 7) >> 2) == 1
    && mfs_Vect__Resize(*((void *)a1 + 12), *((_DWORD *)a1 + 7) >> 2) == 1)
  {
    uint64_t v10 = *((void *)a1 + 5);
    if (v10)
    {
      int v11 = (__int16)a1[2];
      int v12 = 2 * v11;
      uint64_t v13 = heap_Realloc(*((uint64_t **)a1 + 41), v10, (2 * v11));
      if (!v13) {
        return 2164269066;
      }
      uint64_t v14 = v13;
      *((void *)a1 + 5) = v13;
      if (v11 >= 1)
      {
        uint64_t v15 = 0;
        double v16 = (double)(__int16)a1[2];
        if (v12 <= 1) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v12;
        }
        uint64x2_t v29 = (uint64x2_t)vdupq_n_s64(v17 - 1);
        uint64x2_t v18 = (uint64x2_t)xmmword_20D6072C0;
        int64x2_t v27 = vdupq_n_s64(2uLL);
        float64x2_t v28 = (float64x2_t)vdupq_n_s64(0x400921FB54442D11uLL);
        uint64_t v19 = ((int)v17 + 1) & 0x1FFFELL;
        float64x2_t v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
        do
        {
          int64x2_t v33 = (int64x2_t)v18;
          int64x2_t v20 = (int64x2_t)vcgeq_u64(v29, v18);
          v21.i32[0] = v15;
          v21.i32[1] = v15 + 1;
          int32x2_t v32 = vmovn_s64(v20);
          float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(v21)), v28), v26);
          double v31 = cos(__x.f64[1]);
          double v22 = cos(__x.f64[0]);
          if (v32.i8[0])
          {
            float v23 = (1.0 - v22) * 0.5;
            *(float *)(v14 + 4 * v15) = v23;
          }
          if (v32.i8[4])
          {
            float v24 = (1.0 - v31) * 0.5;
            *(float *)(v14 + 4 * v15 + 4) = v24;
          }
          v15 += 2;
          uint64x2_t v18 = (uint64x2_t)vaddq_s64(v33, v27);
        }
        while (v19 != v15);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t mfs_WSOLA__Create(uint64_t a1, __int16 a2)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v5 = heap_Calloc(v4, 336, 1);
  signed __int16 v6 = (unsigned __int16 *)v5;
  uint64_t v26 = v5;
  if (v5)
  {
    *(void *)(v5 + 320) = a1;
    *(void *)(v5 + 328) = v4;
    *(_WORD *)uint64_t v5 = a2;
    *(_DWORD *)(v5 + 312) = 0;
    if ((mfs_WSOLA__SetWindowOverlap((unsigned __int16 *)v5, 10) & 0x80000000) == 0)
    {
      *((_DWORD *)v6 + 2) = 4;
      unsigned int v7 = 33555 * (*v6 >> 1);
      unsigned int v8 = v7 >> 22;
      v6[6] = *v6 / 0xFAu;
      signed int v9 = (__int16)v6[9];
      if ((int)(v7 >> 22) >= v9) {
        LOWORD(v8) = 2 * (v7 >> 22) - v9;
      }
      v6[16] = v8;
      unsigned int v10 = 2 * ((__int16)v6[8] + (v7 >> 22)) - (__int16)v6[2] + (__int16)v8;
      *((_DWORD *)v6 + 7) = v10;
      uint64_t v11 = *((void *)v6 + 7);
      if (v11 && v10 > *(_DWORD *)(v11 + 12))
      {
        if (mfs_Vect__Resize(v11, v10) != 1
          || mfs_Vect__Resize(*((void *)v6 + 8), *((_DWORD *)v6 + 7)) != 1
          || mfs_Vect__Resize(*((void *)v6 + 9), *((_DWORD *)v6 + 7) >> 1) != 1
          || mfs_Vect__Resize(*((void *)v6 + 10), *((_DWORD *)v6 + 7) >> 1) != 1
          || mfs_Vect__Resize(*((void *)v6 + 11), *((_DWORD *)v6 + 7) >> 2) != 1
          || mfs_Vect__Resize(*((void *)v6 + 12), *((_DWORD *)v6 + 7) >> 2) != 1)
        {
          goto LABEL_24;
        }
        unsigned int v10 = *((_DWORD *)v6 + 7);
      }
      uint64_t v12 = mfs_Vect__Create((uint64_t)v4, v10);
      *((void *)v6 + 7) = v12;
      if (v12)
      {
        uint64_t v13 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7));
        *((void *)v6 + 8) = v13;
        if (v13)
        {
          uint64_t v14 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
          *((void *)v6 + 9) = v14;
          if (v14)
          {
            uint64_t v15 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 1);
            *((void *)v6 + 10) = v15;
            if (v15)
            {
              uint64_t v16 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
              *((void *)v6 + 11) = v16;
              if (v16)
              {
                uint64_t v17 = mfs_Vect__Create((uint64_t)v4, *((_DWORD *)v6 + 7) >> 2);
                *((void *)v6 + 12) = v17;
                if (v17)
                {
                  mfs_Vect__Clear(*((void *)v6 + 7));
                  mfs_Vect__Clear(*((void *)v6 + 8));
                  mfs_Vect__Clear(*((void *)v6 + 9));
                  mfs_Vect__Clear(*((void *)v6 + 10));
                  mfs_Vect__Clear(*((void *)v6 + 11));
                  mfs_Vect__Clear(*((void *)v6 + 12));
                  unsigned int v18 = *((_DWORD *)v6 + 7);
                  uint64_t v19 = *((void *)v6 + 8);
                  *(_DWORD *)(*((void *)v6 + 7) + 12) = v18;
                  *(_DWORD *)(v19 + 12) = v18;
                  uint64_t v20 = *((void *)v6 + 10);
                  *(_DWORD *)(*((void *)v6 + 9) + 12) = v18 >> 1;
                  *(_DWORD *)(v20 + 12) = v18 >> 1;
                  v18 >>= 2;
                  uint64_t v21 = *((void *)v6 + 12);
                  *(_DWORD *)(*((void *)v6 + 11) + 12) = v18;
                  *(_DWORD *)(v21 + 12) = v18;
                  double v22 = mfs_Downsample__Generate((uint64_t)v4, 0);
                  *((void *)v6 + 15) = v22;
                  if (v22)
                  {
                    uint64_t v23 = heap_Calloc(v4, 128, 4);
                    *((void *)v6 + 18) = v23;
                    if (v23)
                    {
                      if ((WSOLA__CreateOLAWindow_0((uint64_t)v6) & 0x80000000) == 0)
                      {
                        unsigned __int16 v24 = v6[9];
                        v6[10] = v24;
                        v6[7] = 1;
                        v6[17] = v6[14] - v24;
                        mfs_WSOLA__Initialise((uint64_t)v6);
                        return (uint64_t)v6;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_24:
    mfs_WSOLA__Remove(&v26);
    return v26;
  }
  return (uint64_t)v6;
}

void *mfs_WSOLA__Remove(uint64_t *a1)
{
  uint64_t v2 = *(void **)(*a1 + 328);
  mfs_Vect__Remove((uint64_t *)(*a1 + 56));
  mfs_Vect__Remove((uint64_t *)(*a1 + 64));
  mfs_Vect__Remove((uint64_t *)(*a1 + 72));
  mfs_Vect__Remove((uint64_t *)(*a1 + 80));
  mfs_Vect__Remove((uint64_t *)(*a1 + 88));
  mfs_Vect__Remove((uint64_t *)(*a1 + 96));
  uint64_t v3 = *a1;
  if (*(void *)(*a1 + 40))
  {
    heap_Free(v2, *(void *)(*a1 + 40));
    uint64_t v3 = *a1;
  }
  if (*(void *)(v3 + 120))
  {
    Downsample__Remove((uint64_t *)(v3 + 120));
    uint64_t v3 = *a1;
  }
  if (*(void *)(v3 + 144))
  {
    heap_Free(v2, *(void *)(v3 + 144));
    uint64_t v3 = *a1;
  }
  uint64_t result = heap_Free(v2, v3);
  *a1 = 0;
  return result;
}

uint64_t WSOLA__CreateOLAWindow_0(uint64_t a1)
{
  int v2 = *(__int16 *)(a1 + 4);
  int v3 = 2 * v2;
  uint64_t v4 = heap_Alloc(*(void *)(a1 + 328), 4 * (2 * v2));
  *(void *)(a1 + 40) = v4;
  if (!v4) {
    return 2164269066;
  }
  if (v2 >= 1)
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0;
    double v7 = (double)*(__int16 *)(a1 + 4);
    if (v3 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v3;
    }
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(v8 - 1);
    uint64x2_t v9 = (uint64x2_t)xmmword_20D6072C0;
    int64x2_t v18 = vdupq_n_s64(2uLL);
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x400921FB54442D11uLL);
    uint64_t v10 = ((int)v8 + 1) & 0x1FFFELL;
    float64x2_t v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0);
    do
    {
      int64x2_t v24 = (int64x2_t)v9;
      int64x2_t v11 = (int64x2_t)vcgeq_u64(v20, v9);
      v12.i32[0] = v6;
      v12.i32[1] = v6 + 1;
      int32x2_t v23 = vmovn_s64(v11);
      float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(v12)), v19), v17);
      double v22 = cos(__x.f64[1]);
      double v13 = cos(__x.f64[0]);
      if (v23.i8[0])
      {
        float v14 = (1.0 - v13) * 0.5;
        *(float *)(v5 + 4 * v6) = v14;
      }
      if (v23.i8[4])
      {
        float v15 = (1.0 - v22) * 0.5;
        *(float *)(v5 + 4 * v6 + 4) = v15;
      }
      v6 += 2;
      uint64x2_t v9 = (uint64x2_t)vaddq_s64(v24, v18);
    }
    while (v10 != v6);
  }
  return 0;
}

double mfs_WSOLA__Initialise(uint64_t a1)
{
  uint64_t v1 = a1;
  mfs_Vect__Reset(*(void *)(a1 + 56));
  mfs_Vect__Reset(*(void *)(v1 + 64));
  mfs_Vect__Reset(*(void *)(v1 + 72));
  mfs_Vect__Reset(*(void *)(v1 + 80));
  mfs_Vect__Reset(*(void *)(v1 + 88));
  mfs_Vect__Reset(*(void *)(v1 + 96));
  *(void *)(v1 + 304) = -1;
  *(_DWORD *)(v1 + 312) = 1;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)(v1 + 104) = 0;
  *(unsigned char *)(v1 + 281) = 0;
  int v2 = *(_OWORD **)(v1 + 144);
  double result = 0.0;
  v2[30] = 0u;
  v2[31] = 0u;
  v2[28] = 0u;
  v2[29] = 0u;
  v2[26] = 0u;
  v2[27] = 0u;
  v2[24] = 0u;
  v2[25] = 0u;
  v2[22] = 0u;
  v2[23] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *int v2 = 0u;
  v2[1] = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v1 += 152;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_DWORD *)(v1 - 130) = 0;
  *(_WORD *)(v1 - 100) = 0;
  return result;
}

uint64_t mfs_WSOLA__TimeScaleInputBuffer(uint64_t a1, char a2, __int16 *a3, int a4, _WORD *a5, int *a6, int a7, char *a8, unsigned char *a9)
{
  uint64x2_t v9 = a5;
  int64x2_t v11 = a3;
  char v13 = *a8;
  int v14 = *(_DWORD *)(a1 + 312);
  if (v14)
  {
    int64x2_t v11 = &a3[*(int *)(a1 + 108)];
    uint64x2_t v9 = &a5[*(int *)(a1 + 112)];
  }
  float v15 = (_DWORD *)(a1 + 308);
  uint64_t v16 = (uint64_t *)(a1 + 72);
  int v176 = (uint64_t *)(a1 + 88);
  uint64_t v177 = (uint64_t *)(a1 + 80);
  uint64_t v175 = (uint64_t *)(a1 + 96);
  int v172 = (unsigned __int16)(a7 + 100);
LABEL_4:
  while (2)
  {
    switch(v14)
    {
      case 0:
        mfs_WSOLA__Initialise(a1);
        *(_DWORD *)(a1 + 312) = 1;
        goto LABEL_6;
      case 1:
LABEL_6:
        if (*(unsigned __int16 *)(a1 + 128) == (unsigned __int16)a7)
        {
          int v17 = *(_DWORD *)(a1 + 28);
          goto LABEL_28;
        }
        *(_WORD *)(a1 + 128) = a7;
        if (a7)
        {
          int v17 = *(_DWORD *)(a1 + 28);
          if ((__int16)v172 < 1) {
            goto LABEL_28;
          }
          int v27 = *(__int16 *)(a1 + 18);
          int v28 = v27 * v172 / 100;
          *(_WORD *)(a1 + 20) = v28;
          *(_WORD *)(a1 + 14) = (__int16)v28 / v27;
          __int16 v29 = v17 - v28;
        }
        else
        {
          __int16 v30 = *(_WORD *)(a1 + 18);
          *(_WORD *)(a1 + 20) = v30;
          *(_WORD *)(a1 + 14) = 1;
          int v17 = *(_DWORD *)(a1 + 28);
          __int16 v29 = v17 - v30;
        }
        *(_WORD *)(a1 + 34) = v29;
LABEL_28:
        uint64_t v31 = *(__int16 *)(a1 + 52);
        *(_WORD *)(a1 + 52) = 1 - v31;
        *(_WORD *)(a1 + 48) = 1 - v31;
        *(_WORD *)(a1 + 50) = v31;
        int32x2_t v32 = *(void **)(*(void *)(a1 + 56 + 8 * (__int16)(1 - v31)) + 24);
        *(void *)(a1 + 136) = v32;
        uint64_t v33 = *(void *)(a1 + 56 + 8 * v31);
        *(_DWORD *)(a1 + 304) = 0;
        memmove(v32, (const void *)(*(void *)(v33 + 24) + 8 * (v17 - *(__int16 *)(a1 + 34))), 8 * *(__int16 *)(a1 + 34));
        *(void *)(a1 + 136) += 8 * *(__int16 *)(a1 + 34);
        *(_DWORD *)(a1 + 312) = 2;
LABEL_29:
        int v34 = *v15;
        if (*v15 == -1) {
          int v34 = *(__int16 *)(a1 + 34);
        }
        int v35 = *(_DWORD *)(a1 + 108);
        int v36 = *(_DWORD *)(a1 + 28);
        int v37 = v36 + v35 - v34;
        if (v37 >= a4) {
          int v38 = a4;
        }
        else {
          int v38 = v36 + v35 - v34;
        }
        int v39 = v38 - v35 + v34;
        *(_DWORD *)(a1 + 308) = v39;
        if (v38 - v35 >= 1)
        {
          uint64_t v40 = *(void *)(a1 + 136);
          unsigned int v41 = v38 - v35 + 1;
          do
          {
            *(unsigned char *)(v40 + 4) = v13;
            int v42 = *v11++;
            *(_DWORD *)uint64_t v40 = v42;
            v40 += 8;
            --v41;
          }
          while (v41 > 1);
          *(void *)(a1 + 136) = v40;
        }
        *(_DWORD *)(a1 + 108) = v38;
        if (v37 < a4) {
          goto LABEL_44;
        }
        if (a2)
        {
          if (v39 < v36)
          {
            uint64_t v43 = *(void *)(a1 + 136);
            int v44 = v35 + v36 - v34 - v38;
            do
            {
              *(unsigned char *)(v43 + 4) = v13 | 0x80;
              *(_DWORD *)uint64_t v43 = 0;
              v43 += 8;
              --v44;
            }
            while (v44);
            *(void *)(a1 + 136) = v43;
          }
LABEL_44:
          *(unsigned char *)(a1 + 280) = v13;
          *(void *)float v15 = 0x3FFFFFFFFLL;
LABEL_45:
          if (*(_WORD *)(a1 + 128))
          {
            __int16 v45 = *(_WORD *)(a1 + 32);
            mfs_Downsample__VectorNC(*(void *)(a1 + 120), *(void *)(a1 + 56), v16, 0, *(_DWORD *)(*(void *)(a1 + 56) + 12) - 1);
            mfs_Downsample__VectorNC(*(void *)(a1 + 120), *(void *)(a1 + 64), v177, 0, *(_DWORD *)(*(void *)(a1 + 64) + 12) - 1);
            mfs_Downsample__VectorNC(*(void *)(a1 + 120), *(void *)(a1 + 72), v176, 0, *(_DWORD *)(*(void *)(a1 + 72) + 12) - 1);
            mfs_Downsample__VectorNC(*(void *)(a1 + 120), *(void *)(a1 + 80), v175, 0, *(_DWORD *)(*(void *)(a1 + 80) + 12) - 1);
            int v46 = *(__int16 *)(a1 + 32);
            int v47 = *(__int16 *)(a1 + 12);
            int v48 = v46 - v47 + 3;
            if (v46 >= v47) {
              int v48 = v46 - v47;
            }
            int v49 = v48 >> 2;
            LODWORD(v50) = (__int16)(v48 >> 2) & ~((__int16)(v48 >> 2) >> 31);
            int v51 = v50 + ((__int16)(v47 + ((unsigned __int16)(v47 & 0x8000) >> 15)) >> 1);
            int v52 = *(_DWORD *)(*(void *)(a1 + 88) + 12);
            int v53 = (__int16)v52;
            __int16 v54 = v52 - 1;
            if (v53 <= (__int16)v51) {
              LOWORD(v51) = v54;
            }
            if ((int)v50 < (__int16)v51)
            {
              unsigned __int16 v55 = v51;
              int v56 = *(__int16 *)(a1 + 18);
              uint64_t v57 = *(__int16 *)(a1 + 50);
              int v58 = *(__int16 *)(a1 + 2 * v57 + 22);
              BOOL v59 = __OFADD__(v58, v56);
              int v60 = v58 + v56;
              if (v60 < 0 != v59) {
                v60 += 3;
              }
              uint64_t v61 = *(void *)(*(void *)(a1 + 88 + 8 * v57) + 24) + 8 * (v60 >> 2);
              int v62 = *(__int16 *)(a1 + 16);
              uint64_t v50 = (unsigned __int16)v50;
              float v63 = 0.0;
              do
              {
                float v64 = 0.0;
                if (v62 >= 4)
                {
                  unsigned int v65 = (int *)(*(void *)(*(void *)(a1 + 88 + 8 * *(__int16 *)(a1 + 48)) + 24) + 8 * v50);
                  int v66 = (int)((v62 + ((v62 >> 29) & 3)) << 16) >> 18;
                  uint64_t v67 = (int *)v61;
                  do
                  {
                    int v69 = *v65;
                    v65 += 2;
                    int v68 = v69;
                    int v70 = *v67;
                    v67 += 2;
                    float v64 = v64 + (float)(v70 * v68);
                    int v71 = (__int16)v66--;
                  }
                  while (v71 > 1);
                }
                if (v64 > v63)
                {
                  float v63 = v64;
                  LOWORD(v49) = v50;
                }
                ++v50;
              }
              while (v50 != v55);
            }
            __int16 v72 = 2 * v49;
            int v73 = (__int16)(2 * v49 - 3) & ~((__int16)(2 * v49 - 3) >> 31);
            unsigned __int16 v74 = v72 + 3;
            int v75 = *(_DWORD *)(*v16 + 12);
            int v76 = (__int16)v75;
            unsigned __int16 v77 = v75 - 1;
            if (v76 <= (__int16)v74) {
              unsigned __int16 v74 = v77;
            }
            if (v73 < (__int16)v74)
            {
              unsigned __int16 v78 = v74;
              int v79 = *(__int16 *)(a1 + 18);
              uint64_t v80 = *(__int16 *)(a1 + 50);
              int v81 = *(__int16 *)(a1 + 2 * v80 + 22);
              BOOL v59 = __OFADD__(v81, v79);
              int v82 = v81 + v79;
              if (v82 < 0 != v59) {
                ++v82;
              }
              uint64_t v83 = *(void *)(*(void *)(a1 + 72 + 8 * v80) + 24) + 8 * (v82 >> 1);
              int v84 = *(__int16 *)(a1 + 16);
              uint64_t v85 = (unsigned __int16)v73;
              float v86 = 0.0;
              do
              {
                float v87 = 0.0;
                if (v84 >= 2)
                {
                  long long v88 = (int *)(*(void *)(*(void *)(a1 + 72 + 8 * *(__int16 *)(a1 + 48)) + 24) + 8 * v85);
                  int v89 = (v84 + ((unsigned __int16)(v84 & 0x8000) >> 15)) << 16 >> 17;
                  uint64_t v90 = (int *)v83;
                  do
                  {
                    int v92 = *v88;
                    v88 += 2;
                    int v91 = v92;
                    int v93 = *v90;
                    v90 += 2;
                    float v87 = v87 + (float)(v93 * v91);
                    int v94 = (__int16)v89--;
                  }
                  while (v94 > 1);
                }
                if (v87 > v86)
                {
                  float v86 = v87;
                  LOWORD(v73) = v85;
                }
                ++v85;
              }
              while (v85 != v78);
            }
            int v95 = v16;
            unint64_t v96 = v15;
            __int16 v97 = 2 * v73;
            int v98 = (__int16)(v97 - 3) & ~((__int16)(v97 - 3) >> 31);
            unsigned __int16 v99 = v97 + 3;
            int v100 = *(_DWORD *)(*(void *)(a1 + 56) + 12);
            int v101 = (__int16)v100;
            unsigned __int16 v102 = v100 - 1;
            if (v101 <= (__int16)v99) {
              unsigned __int16 v99 = v102;
            }
            if (v98 < (__int16)v99)
            {
              uint64_t v103 = (unsigned __int16)v98;
              float v104 = 0.0;
              do
              {
                float v105 = 0.0;
                if (*(__int16 *)(a1 + 16) >= 1)
                {
                  unsigned int v106 = (int *)(*(void *)(*(void *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 24) + 8 * v103);
                  int v107 = *(__int16 *)(a1 + 16);
                  unsigned int v108 = (int *)(*(void *)(*(void *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 24)
                               + 8
                               * (*(__int16 *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22) + (uint64_t)*(__int16 *)(a1 + 18)));
                  do
                  {
                    int v110 = *v106;
                    v106 += 2;
                    int v109 = v110;
                    int v111 = *v108;
                    v108 += 2;
                    float v105 = v105 + (float)(v111 * v109);
                    unsigned int v112 = (unsigned __int16)v107--;
                  }
                  while (v112 > 1);
                }
                if (v105 > v104)
                {
                  float v104 = v105;
                  LOWORD(v98) = v103;
                }
                ++v103;
              }
              while (v103 != v99);
            }
            log_wsola_Diag(*(void *)(a1 + 320), 4, (uint64_t)"Best: %d\t%d");
            __int16 v113 = v98 + v45 - *(_WORD *)(a1 + 32);
            float v15 = v96;
            uint64_t v16 = v95;
          }
          else
          {
            __int16 v113 = *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 50) + 22);
          }
          *(_WORD *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48)) = v113;
          uint64_t v18 = *(void *)(*(void *)(a1 + 56 + 8 * *(__int16 *)(a1 + 50)) + 24)
              + 8 * (*(__int16 *)(a1 + 18) + (uint64_t)*(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 50)));
          *(void *)(a1 + 288) = v18;
          *(void *)(a1 + 296) = *(void *)(*(void *)(a1 + 56 + 8 * *(__int16 *)(a1 + 48)) + 24)
                                + 8 * *(__int16 *)(a1 + 22 + 2 * *(__int16 *)(a1 + 48));
          if (*(_WORD *)(a1 + 128))
          {
            int v14 = 5;
            *(_DWORD *)(a1 + 312) = 5;
          }
          else
          {
            *(_DWORD *)(a1 + 312) = 4;
LABEL_87:
            char v114 = *(unsigned char *)(v18 + 4);
            if (*(_DWORD *)(a1 + 304) == -1) {
              *(_DWORD *)(a1 + 304) = 0;
            }
            uint64_t v115 = v114 & 0x7F;
            unsigned int v116 = *(unsigned __int8 *)(a1 + 281);
            if (v116 != v115)
            {
              if (v115 == 127) {
                int v117 = 0;
              }
              else {
                int v117 = v115;
              }
              int v118 = v117 + 1;
              int v119 = v117 + 2;
              if (v118 == v116 || v119 == v116) {
                goto LABEL_100;
              }
              int v121 = v115 - 126;
              if (v115 < 0x7E) {
                int v121 = v115 + 1;
              }
              if (v121 + 1 == v116)
              {
LABEL_100:
                log_wsola_Diag(*(void *)(a1 + 320), 1, (uint64_t)"WARNING: switch back from PhonID %u to previous PhonID %u");
                uint64_t v115 = *(unsigned __int8 *)(a1 + 281);
                *(unsigned char *)(*(void *)(a1 + 288) + 4) = *(unsigned char *)(*(void *)(a1 + 288) + 4) & 0x80 | v115;
              }
              else
              {
                if (!*(unsigned char *)(a1 + v115 + 152)) {
                  *(_DWORD *)(*(void *)(a1 + 144) + 4 * v115) = 0;
                }
                do
                {
                  *(unsigned char *)(a1 + (unsigned __int16)v116 + 152) = 2;
                  unsigned int v116 = v116
                       - 127
                       * ((((unsigned __int16)(v116 - ((517 * (unsigned __int16)v116) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v116) >> 16)) >> 6)
                       + 1;
                }
                while (v115 != (unsigned __int16)v116);
                *(unsigned char *)(a1 + 281) = v115;
              }
              *(unsigned char *)(a1 + v115 + 152) = 1;
              if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * *(unsigned __int8 *)(a1 + 281)))
              {
                int v122 = 1;
                uint64_t v123 = "ERROR: PhonID %u, restart at length %d";
              }
              else
              {
                int v122 = 3;
                uint64_t v123 = "start output phonID: %d";
              }
              log_wsola_Diag(*(void *)(a1 + 320), v122, (uint64_t)v123);
            }
            *(_DWORD *)(a1 + 312) = 1;
            uint64_t v124 = *(int **)(a1 + 288);
            if ((char)v124[1] < 0)
            {
              *a9 = 2;
              *a6 = *(_DWORD *)(a1 + 112);
              unsigned int v167 = *(unsigned __int8 *)(a1 + 281);
              if (v167 != *(unsigned __int8 *)(a1 + 280))
              {
                do
                {
                  *(unsigned char *)(a1 + (unsigned __int16)v167 + 152) = 2;
                  unsigned int v167 = v167
                       - 127
                       * ((((unsigned __int16)(v167 - ((517 * (unsigned __int16)v167) >> 16)) >> 1)
                         + ((517 * (unsigned __int16)v167) >> 16)) >> 6)
                       + 1;
                }
                while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v167);
                unsigned int v167 = *(unsigned __int8 *)(a1 + 280);
              }
              *(unsigned char *)(a1 + v167 + 152) = 2;
              *a8 = *(unsigned char *)(a1 + 281);
LABEL_179:
              *(_DWORD *)(a1 + 112) = 0;
              *(_DWORD *)(a1 + 312) = 0;
              return 0;
            }
            uint64_t v125 = *(unsigned __int8 *)(a1 + 281);
            if (*(unsigned char *)(a1 + 281))
            {
              int v126 = *a6;
              int v127 = *(_DWORD *)(a1 + 112);
              int v128 = *(_DWORD *)(a1 + 304);
              if (*a6 >= v127 + *(__int16 *)(a1 + 4) - v128) {
                int v126 = v127 + *(__int16 *)(a1 + 4) - v128;
              }
              int v129 = v126 - v127;
              if (v126 - v127 > 1 && LOBYTE(v124[2 * (v126 - v127 - 1) + 1]) != v125)
              {
                uint64_t v138 = (unsigned __int8 *)(v124 + 1);
                int v139 = 1;
                while (v129 + v139 - 1 >= 1)
                {
                  int v140 = *v138;
                  v138 += 8;
                  --v139;
                  if (v140 != v125)
                  {
                    int v130 = 0;
                    int v126 = v127 - v139;
                    int v14 = 4;
                    *(_DWORD *)(a1 + 312) = 4;
                    int v129 = -v139;
                    goto LABEL_116;
                  }
                }
              }
              int v130 = 1;
              int v14 = 1;
LABEL_116:
              *(_DWORD *)(a1 + 304) = v129 + v128;
              *(_DWORD *)(*(void *)(a1 + 144) + 4 * v125) += v129;
              int v131 = v126 - *(_DWORD *)(a1 + 112);
              if (v131 >= 1)
              {
                unsigned int v132 = v131 + 1;
                do
                {
                  int v133 = *v124;
                  v124 += 2;
                  *v9++ = v133;
                  --v132;
                }
                while (v132 > 1);
              }
              *(void *)(a1 + 288) = v124;
              if (v126 >= *a6)
              {
                *a9 = 1;
                *a6 = v126;
                *a8 = *(unsigned char *)(a1 + 281);
                *(_DWORD *)(a1 + 112) = 0;
                if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4)) {
                  goto LABEL_181;
                }
                int v168 = 4;
                goto LABEL_183;
              }
              *(_DWORD *)(a1 + 112) = v126;
              if (v130) {
                goto LABEL_157;
              }
            }
            else
            {
              int v134 = *(__int16 *)(a1 + 4);
              int v14 = 1;
              if (*(_WORD *)(a1 + 4))
              {
                int v14 = 1;
                if (LOBYTE(v124[2 * v134 - 1]))
                {
                  unsigned int v135 = v124 - 2;
                  int v136 = 1;
                  while (v134 + v136 - 1 >= 1)
                  {
                    int v137 = *((unsigned __int8 *)v135 + 12);
                    v135 += 2;
                    --v136;
                    if (v137)
                    {
                      int v14 = 4;
                      *(_DWORD *)(a1 + 312) = 4;
                      *(void *)(a1 + 288) = v135;
                      *(_DWORD *)(a1 + 304) -= v136;
                      goto LABEL_4;
                    }
                  }
                  goto LABEL_158;
                }
              }
            }
          }
          continue;
        }
        *(_DWORD *)(a1 + 108) = 0;
        *a9 = 0;
        *(unsigned char *)(a1 + 280) = v13;
        return 0;
      case 2:
        goto LABEL_29;
      case 3:
        goto LABEL_45;
      case 4:
        uint64_t v18 = *(void *)(a1 + 288);
        goto LABEL_87;
      case 5:
        char v19 = *(unsigned char *)(*(void *)(a1 + 288) + 4);
        if (*(_DWORD *)(a1 + 304) == -1) {
          *(_DWORD *)(a1 + 304) = 0;
        }
        uint64_t v20 = v19 & 0x7F;
        unsigned int v21 = *(unsigned __int8 *)(a1 + 281);
        if (v21 != v20)
        {
          if (v20 == 127) {
            int v22 = 0;
          }
          else {
            int v22 = v20;
          }
          int v23 = v22 + 1;
          int v24 = v22 + 2;
          if (v23 == v21 || v24 == v21) {
            goto LABEL_22;
          }
          int v26 = v20 - 126;
          if (v20 < 0x7E) {
            int v26 = v20 + 1;
          }
          if (v26 + 1 == v21)
          {
LABEL_22:
            log_wsola_Diag(*(void *)(a1 + 320), 1, (uint64_t)"ERROR: switch back from PhonID %u to previous PhonID %u");
            uint64_t v20 = *(unsigned __int8 *)(a1 + 281);
            *(unsigned char *)(*(void *)(a1 + 288) + 4) = *(unsigned char *)(*(void *)(a1 + 288) + 4) & 0x80 | v20;
          }
          else
          {
            if (!*(unsigned char *)(a1 + v20 + 152)) {
              *(_DWORD *)(*(void *)(a1 + 144) + 4 * v20) = 0;
            }
            do
            {
              *(unsigned char *)(a1 + (unsigned __int16)v21 + 152) = 2;
              unsigned int v21 = v21
                  - 127
                  * ((((unsigned __int16)(v21 - ((517 * (unsigned __int16)v21) >> 16)) >> 1)
                    + ((517 * (unsigned __int16)v21) >> 16)) >> 6)
                  + 1;
            }
            while (v20 != (unsigned __int16)v21);
            *(unsigned char *)(a1 + 281) = v20;
          }
          *(unsigned char *)(a1 + v20 + 152) = 1;
          if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * *(unsigned __int8 *)(a1 + 281)))
          {
            int v141 = 1;
            int v142 = "WARNING: PhonID %u, restart at length %d";
          }
          else
          {
            int v141 = 3;
            int v142 = "start output phonID: %d";
          }
          log_wsola_Diag(*(void *)(a1 + 320), v141, (uint64_t)v142);
        }
        *(_DWORD *)(a1 + 312) = 1;
        uint64_t v143 = *(void *)(a1 + 288);
        if (*(char *)(v143 + 4) < 0)
        {
          *a9 = 2;
          *a6 = *(_DWORD *)(a1 + 112);
          unsigned int v169 = *(unsigned __int8 *)(a1 + 281);
          if (v169 != *(unsigned __int8 *)(a1 + 280))
          {
            do
            {
              *(unsigned char *)(a1 + (unsigned __int16)v169 + 152) = 2;
              unsigned int v169 = v169
                   - 127
                   * ((((unsigned __int16)(v169 - ((517 * (unsigned __int16)v169) >> 16)) >> 1)
                     + ((517 * (unsigned __int16)v169) >> 16)) >> 6)
                   + 1;
            }
            while (*(unsigned __int8 *)(a1 + 280) != (unsigned __int16)v169);
            unsigned int v169 = *(unsigned __int8 *)(a1 + 280);
          }
          *(unsigned char *)(a1 + v169 + 152) = 2;
          *a8 = *(unsigned char *)(a1 + 281);
          goto LABEL_179;
        }
        uint64_t v144 = *(unsigned __int8 *)(a1 + 281);
        if (*(unsigned char *)(a1 + 281))
        {
          int v145 = *(_DWORD *)(a1 + 304);
          if (*a6 - *(_DWORD *)(a1 + 112) >= *(__int16 *)(a1 + 4) - v145) {
            int v146 = *(__int16 *)(a1 + 4) - v145;
          }
          else {
            int v146 = *a6 - *(_DWORD *)(a1 + 112);
          }
          if (v146 >= 2 && *(unsigned __int8 *)(v143 + 8 * (v146 - 1) + 4) != v144)
          {
            uint64_t v164 = (unsigned __int8 *)(v143 + 4);
            int v165 = 1;
            while (v146 + v165 - 1 >= 1)
            {
              int v166 = *v164;
              v164 += 8;
              --v165;
              if (v166 != v144)
              {
                int v147 = 0;
                int v146 = -v165;
                int v14 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                goto LABEL_148;
              }
            }
          }
          int v147 = 1;
          int v14 = 1;
LABEL_148:
          *(_DWORD *)(*(void *)(a1 + 144) + 4 * v144) += v146;
          int v148 = v146 + v145;
          uint64_t v149 = *(int *)(a1 + 304);
          int v150 = *(_DWORD *)(a1 + 112) + v148 - v149;
          *(_DWORD *)(a1 + 112) = v150;
          if (v148 > (int)v149)
          {
            uint64_t v151 = *(void *)(a1 + 40);
            uint64_t v152 = *(int **)(a1 + 296);
            do
            {
              int v153 = *(_DWORD *)v143;
              v143 += 8;
              float v154 = (float)v153;
              int v155 = *v152;
              v152 += 2;
              float v156 = (float)(*(float *)(v151 + 4 * v149) * (float)v155)
                   + (float)(*(float *)(v151 + 4 * (v149 + *(__int16 *)(a1 + 4))) * v154);
              double v157 = v156;
              if (v156 >= 0.0) {
                double v158 = 0.5;
              }
              else {
                double v158 = -0.5;
              }
              *v9++ = (int)(v158 + v157);
              ++v149;
            }
            while (v148 != v149);
            *(void *)(a1 + 296) = v152;
          }
          *(void *)(a1 + 288) = v143;
          *(_DWORD *)(a1 + 304) = v148;
          if (v150 >= *a6)
          {
            *a9 = 1;
            *a6 = *(_DWORD *)(a1 + 112);
            *a8 = *(unsigned char *)(a1 + 281);
            *(_DWORD *)(a1 + 112) = 0;
            if (*(_DWORD *)(a1 + 304) == *(__int16 *)(a1 + 4))
            {
LABEL_181:
              *(_DWORD *)(a1 + 304) = 0;
              return 0;
            }
            int v168 = 5;
LABEL_183:
            *(_DWORD *)(a1 + 312) = v168;
            return 0;
          }
          if (v147)
          {
LABEL_157:
            *(_DWORD *)(a1 + 304) = 0;
            goto LABEL_158;
          }
        }
        else
        {
          int v159 = *(__int16 *)(a1 + 4);
          int v14 = 1;
          if (*(unsigned char *)(v143 + 8 * (v159 - 1) + 4))
          {
            uint64_t v160 = 0;
            int v161 = 1;
            while (v159 + v161 - 1 >= 1)
            {
              int v162 = *(unsigned __int8 *)(v143 + v160 + 4);
              v160 += 8;
              --v161;
              if (v162)
              {
                int v14 = 5;
                *(_DWORD *)(a1 + 312) = 5;
                uint64_t v163 = *(void *)(a1 + 296) + v160 - 8;
                *(void *)(a1 + 288) = v143 + v160 - 8;
                *(void *)(a1 + 296) = v163;
                *(_DWORD *)(a1 + 304) -= v161;
                goto LABEL_4;
              }
            }
LABEL_158:
            int v14 = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t ssft_MapTtsegErrToAPI(int a1)
{
  if ((a1 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t result = a1 & 0x80001FFF;
  if ((int)result <= -2147483393)
  {
    if ((int)result >= -2147483620) {
      return 0x80000000;
    }
  }
  else
  {
    if ((int)result > -2147482625)
    {
      if ((result + 2147481600) < 0xD
        || (result + 2147482624) <= 0x16 && ((1 << result) & 0x404001) != 0)
      {
        return result;
      }
      unsigned __int16 v2 = 2176;
    }
    else
    {
      if ((result + 2147483392) < 0x14 || result == -2147483136) {
        return result;
      }
      unsigned __int16 v2 = 768;
    }
    if (result != (v2 | 0x80000000)) {
      return 0x80000000;
    }
  }
  return result;
}

uint64_t lipsync_ObjOpen(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 2281070598;
  if (a2)
  {
    uint64_t v5 = heap_Alloc(a1, 16);
    if (v5)
    {
      uint64_t v2 = 0;
      *(void *)(v5 + 8) = a1;
      *(_DWORD *)uint64_t v5 = 0;
      *a2 = v5;
    }
    else
    {
      return 2281070602;
    }
  }
  return v2;
}

uint64_t lipsync_ObjClose(uint64_t a1)
{
  return 0;
}

uint64_t lipsync_GetSyncInfo(_WORD *a1, __int16 a2, char *a3, int8x8_t *a4)
{
  uint64_t result = 2281070598;
  if (!a1 || !a3) {
    return result;
  }
  a1[1] = 1;
  *a1 = a2;
  if ((int)lipsyncinfo_GetNbrOfLhp() < 2)
  {
LABEL_7:
    if ((int)lipsyncinfo_GetNbrOfLhp() < 2) {
      return 2281070607;
    }
    int v12 = 1;
    unsigned __int16 v9 = 1;
    while (1)
    {
      PhonemeTableByunsigned int Index = lipsyncinfo_GetPhonemeTableByIndex(v12);
      if (lipsyncinfo_HeadsMatchLooselyDiphtongs(a3, PhonemeTableByIndex) == 1) {
        break;
      }
      int v12 = ++v9;
      if ((int)lipsyncinfo_GetNbrOfLhp() <= v9) {
        return 2281070607;
      }
    }
  }
  else
  {
    int v8 = 1;
    unsigned __int16 v9 = 1;
    while (1)
    {
      uint64_t v10 = lipsyncinfo_GetPhonemeTableByIndex(v8);
      if (lipsyncinfo_HeadsMatch(a3, v10)) {
        break;
      }
      int v8 = ++v9;
      if ((int)lipsyncinfo_GetNbrOfLhp() <= v9) {
        goto LABEL_7;
      }
    }
  }
  if (!v9) {
    return 2281070607;
  }
  if (v9 == 0xFFFF)
  {
LABEL_14:
    uint64_t result = 0;
    *a4 = v11;
    return result;
  }
  unsigned int v14 = (unsigned __int16)a1[1];
  int NbrOfLhp = lipsyncinfo_GetNbrOfLhp();
  if (v14 > 3 || NbrOfLhp < v9 || (int)lipsyncinfo_GetNbrOfLhp() <= v9) {
    return 2281070607;
  }
  int v16 = *(__int16 *)lipsyncinfo_GetMouthPosByIndex(v9);
  uint64_t result = 2281070607;
  if (v9 == v16)
  {
    int8x8_t v11 = vmovn_s16(*(int16x8_t *)(lipsyncinfo_GetMouthPosByIndex(v9) + 2));
    goto LABEL_14;
  }
  return result;
}

uint64_t TextMime2ve(char *__s1, int *a2, int *a3, _DWORD *a4)
{
  if (a4) {
    *a4 = 1;
  }
  if (!__s1) {
    goto LABEL_9;
  }
  int v8 = *__s1;
  if (!*__s1) {
    goto LABEL_10;
  }
  if (!strcmp(__s1, "text/plain;charset=utf-8"))
  {
    int v8 = 0;
    int v10 = 2;
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (!strcmp(__s1, "text/plain;charset=utf-16"))
  {
LABEL_9:
    int v8 = 0;
  }
  else
  {
    if (strcmp(__s1, "application/synthesis+ssml")) {
      return 0;
    }
    if (a4) {
      *a4 = 0;
    }
    int v8 = 1;
  }
LABEL_10:
  int v10 = 1;
  if (a3) {
LABEL_11:
  }
    *a3 = v10;
LABEL_12:
  if (a2) {
    *a2 = v8;
  }
  return 1;
}

uint64_t ve_ttsInitialize(uint64_t a1, uint64_t *a2)
{
  int v35 = 0;
  int v3 = -2147483638;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  __int16 v30 = 0;
  uint64_t result = 2147483654;
  if (a1 && a2)
  {
    if (*(_WORD *)a1 == 8963 && *(void *)(a1 + 16) && *(void *)(a1 + 48))
    {
      *a2 = 0;
      a2[1] = 0;
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 16) + 8))(*(void *)(a1 + 24), 1, 552);
      uint64_t v7 = v6;
      if (!v6) {
        goto LABEL_64;
      }
      *(_DWORD *)uint64_t v6 = 1933790291;
      int v8 = *(_OWORD **)(a1 + 16);
      *(_OWORD *)(v6 + 8) = *v8;
      uint64_t v9 = v6 + 8;
      *(_OWORD *)(v7 + 24) = v8[1];
      int v10 = *(_OWORD **)(a1 + 32);
      if (v10)
      {
        *(_OWORD *)(v7 + 72) = *v10;
        *(_OWORD *)(v7 + 88) = v10[1];
      }
      uint64_t v11 = *(void *)(a1 + 48);
      *(_OWORD *)(v7 + 104) = *(_OWORD *)v11;
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v11 + 16);
      *(void *)(v7 + 136) = *(void *)(v11 + 32);
      *(void *)(v7 + 152) = *(void *)(v11 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
      if (v12)
      {
        *(void *)(v7 + 184) = *(void *)v12;
        *(_OWORD *)(v7 + 200) = *(_OWORD *)(v12 + 8);
        *(_OWORD *)(v7 + 216) = *(_OWORD *)(v12 + 24);
      }
      uint64_t v13 = *(void *)(a1 + 64);
      if (v13)
      {
        *(_OWORD *)(v7 + 280) = *(_OWORD *)v13;
        *(void *)(v7 + 296) = *(void *)(v13 + 16);
        *(void *)(v7 + 304) = 0;
      }
      unsigned int v14 = *(long long **)(a1 + 80);
      if (v14)
      {
        long long v15 = *v14;
        *(void *)(v7 + 344) = *((void *)v14 + 2);
        *(_OWORD *)(v7 + 328) = v15;
        *(void *)(v7 + 352) = *(void *)(a1 + 88);
      }
      int v16 = *(_OWORD **)(a1 + 112);
      if (v16)
      {
        *(_OWORD *)(v7 + 360) = *v16;
        *(_OWORD *)(v7 + 376) = v16[1];
        *(_OWORD *)(v7 + 392) = v16[2];
      }
      int v17 = *(_OWORD **)(a1 + 120);
      if (v17)
      {
        *(_OWORD *)(v7 + 408) = *v17;
        *(_OWORD *)(v7 + 424) = v17[1];
      }
      uint64_t v18 = *(void *)(a1 + 24);
      *(void *)(v7 + 64) = v18;
      int Interface = heap_cb_Open(v9, v18, (uint64_t)&v35);
      if ((Interface & 0x80000000) == 0)
      {
        int Interface = critsec_cb_ClassOpen(v35, *(void *)(v7 + 64), v7 + 72, *(void *)(a1 + 40), (uint64_t)&v34);
        if ((Interface & 0x80000000) == 0)
        {
          int Interface = osspi_cb_cache_ClassOpen(v35, *(void *)(v7 + 64), v34, v7 + 104, *(void *)(a1 + 72), &v33);
          if ((Interface & 0x80000000) == 0)
          {
            int Interface = rsrc_Open(v35, v34, 0, 0, v7 + 440);
            if ((Interface & 0x80000000) == 0)
            {
              InitRsrcFunction(*(_WORD **)(v7 + 440), *(void *)(v7 + 448), (void *)(v7 + 456));
              uint64_t v20 = *(void *)(v7 + 456);
              *(void *)(v20 + 64) = v33;
              uint64_t v21 = *(void *)(a1 + 8);
              if (!v21)
              {
                int v3 = -2147483630;
                goto LABEL_60;
              }
              LOWORD(v31[0]) = 3;
              *((void *)&v32 + 1) = v21;
              int Interface = engbrk_GetInterface(0, &v30);
              if ((Interface & 0x80000000) == 0)
              {
                int Interface = brk_ClassOpen(*(_WORD **)(v7 + 440), *(void *)(v7 + 448), v30, (uint64_t)v31, 0, v7 + 472);
                if ((Interface & 0x80000000) == 0)
                {
                  int Interface = brk_ObjOpen(0, *(void *)(v7 + 472));
                  if ((Interface & 0x80000000) == 0)
                  {
                    int Interface = objc_ObjOpen(0, *(_WORD **)(v7 + 440), *(void *)(v7 + 448), (uint64_t *)(v20 + 48));
                    if ((Interface & 0x80000000) == 0)
                    {
                      *(void *)(v20 + 384) = 0;
                      *(void *)(v20 + 392) = 0;
                      int v22 = *(void **)(a1 + 96);
                      if (v22 && *v22 && *(void *)(a1 + 104))
                      {
                        int v23 = (void *)heap_Calloc(*(void **)(v20 + 8), 1, 8);
                        *(void *)(v20 + 384) = v23;
                        if (!v23)
                        {
LABEL_60:
                          if (*(void *)(v7 + 456))
                          {
                            ve_ttsUnInitialize(v7, 1749240915);
                            return ssft_MapTtsegErrToAPI(v3);
                          }
                          if (v33) {
                            osspi_cb_cache_ClassClose((void **)v33);
                          }
LABEL_64:
                          if (v34) {
                            critsec_cb_ClassClose(&v34);
                          }
                          if (v35) {
                            heap_cb_Close(v35);
                          }
                          if (v7) {
                            (*(void (**)(void, uint64_t))(*(void *)(a1 + 16) + 24))(*(void *)(a1 + 24), v7);
                          }
                          return ssft_MapTtsegErrToAPI(v3);
                        }
                        *int v23 = **(void **)(a1 + 96);
                        *(void *)(v20 + 392) = *(void *)(a1 + 104);
                      }
                      if (*(void *)(a1 + 112)) {
                        uint64_t v24 = v7 + 360;
                      }
                      else {
                        uint64_t v24 = 0;
                      }
                      if (*(void *)(a1 + 120)) {
                        uint64_t v25 = v7 + 408;
                      }
                      else {
                        uint64_t v25 = 0;
                      }
                      thread_cb_ClassOpen((uint64_t)v35, *(void *)(v7 + 64), v24, v25, *(void *)(a1 + 128), v20 + 400);
                      int Interface = paramc_ObjOpen(0, *(void *)(v7 + 440), *(void *)(v7 + 448), v20 + 40);
                      if ((Interface & 0x80000000) == 0)
                      {
                        int Interface = log_ClassOpen(*(_WORD **)(v7 + 440), *(void *)(v7 + 448), 0, (uint64_t *)(v7 + 464));
                        if ((Interface & 0x80000000) == 0)
                        {
                          int v26 = (uint64_t *)(v20 + 32);
                          int Interface = log_ObjOpen(*(void *)(v7 + 464), (uint64_t *)(v20 + 32));
                          if ((Interface & 0x80000000) == 0)
                          {
                            uint64_t v29 = 0;
                            if (*(void *)(v7 + 328) || *(void *)(v7 + 336) || *(void *)(v7 + 344)) {
                              log_SubscriberAdd(*v26, v7 + 328, (uint64_t)&VAutoLogSub);
                            }
                            if ((log_GetInterface(1u, &v29) & 0x80000000) == 0)
                            {
                              heap_SetLog(v35);
                              osspi_cb_cache_SetLog((uint64_t)v33, v29, *v26);
                            }
                            int Interface = compquery_GetInterface(1u, (void *)(v7 + 504));
                            if ((Interface & 0x80000000) == 0)
                            {
                              int v27 = *(uint64_t (**)(uint64_t))(*(void *)(v7 + 504) + 32);
                              uint64_t NullHandle = safeh_GetNullHandle();
                              int Interface = v27(NullHandle);
                              if ((Interface & 0x80000000) == 0)
                              {
                                int Interface = ttseg_GetInterface(3, (void *)(v7 + 480));
                                if ((Interface & 0x80000000) == 0)
                                {
                                  int Interface = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(v7 + 480)
                                                                                                 + 16))(*(void *)(v7 + 440), *(void *)(v7 + 448), v7 + 488);
                                  if ((Interface & 0x80000000) == 0)
                                  {
                                    int Interface = synthstream_GetInterface(1u, (void *)(v7 + 528));
                                    if ((Interface & 0x80000000) == 0)
                                    {
                                      int Interface = lingdb_GetInterface(1u, (void *)(v7 + 536));
                                      if ((Interface & 0x80000000) == 0)
                                      {
                                        int v3 = bet7_parse_multicore_hdr(*(void *)(v7 + 456));
                                        if ((v3 & 0x80000000) == 0)
                                        {
                                          *a2 = v7;
                                          *((_DWORD *)a2 + 2) = 1749240915;
                                          return ssft_MapTtsegErrToAPI(v3);
                                        }
                                        goto LABEL_60;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      int v3 = Interface;
      goto LABEL_60;
    }
    return ssft_MapTtsegErrToAPI(-2147474688);
  }
  return result;
}

uint64_t ve_ttsUnInitialize(uint64_t a1, int a2)
{
  uint64_t v2 = 2147483656;
  int v23 = 0;
  if (a2 == 1749240915 && *(_DWORD *)a1 == 1933790291)
  {
    if (*(_DWORD *)(a1 + 544)) {
      return 2147483665;
    }
    if ((InitRsrcFunction(*(_WORD **)(a1 + 440), *(void *)(a1 + 448), &v23) & 0x80000000) != 0) {
      return v2;
    }
    uint64_t v4 = *(void **)(a1 + 456);
    uint64_t v5 = (void *)v4[1];
    uint64_t v24 = v4[2];
    uint64_t v6 = (void **)v4[8];
    uint64_t v7 = *(void *)(a1 + 64);
    *(_DWORD *)a1 = -1933790292;
    uint64_t v8 = *(void *)(a1 + 488);
    if (v8)
    {
      int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 480) + 24))(v8, *(void *)(a1 + 496));
      if (v9 < 0) {
        goto LABEL_48;
      }
      *(void *)(a1 + 488) = safeh_GetNullHandle();
      *(void *)(a1 + 496) = v10;
    }
    else
    {
      int v9 = 0;
    }
    uint64_t v11 = *(void *)(a1 + 512);
    if (v11)
    {
      int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 504) + 40))(v11, *(void *)(a1 + 520));
      if (v9 < 0) {
        goto LABEL_48;
      }
      *(void *)(a1 + 512) = safeh_GetNullHandle();
      *(void *)(a1 + 520) = v12;
    }
    uint64_t v13 = v23;
    if (v23[4])
    {
      heap_SetLog(v5);
      if (v6) {
        osspi_cb_cache_SetLog((uint64_t)v6, 0, 0);
      }
      int v9 = log_ObjClose(v23[4]);
      if (v9 < 0) {
        goto LABEL_48;
      }
      uint64_t v13 = v23;
      v23[4] = 0;
    }
    uint64_t v14 = *(void *)(a1 + 464);
    if (v14)
    {
      int v9 = log_ClassClose(v14);
      if (v9 < 0) {
        goto LABEL_48;
      }
      *(void *)(a1 + 464) = 0;
      uint64_t v13 = v23;
    }
    uint64_t v15 = v13[6];
    if (v15)
    {
      int v9 = objc_ObjClose(v15);
      if (v9 < 0) {
        goto LABEL_48;
      }
      uint64_t v13 = v23;
      v23[6] = 0;
    }
    uint64_t v16 = v13[5];
    if (v16)
    {
      int v9 = paramc_ObjClose(v16);
      if (v9 < 0) {
        goto LABEL_48;
      }
      uint64_t v13 = v23;
      v23[5] = 0;
    }
    uint64_t v17 = v13[3];
    if (v17)
    {
      int v9 = brk_ObjClose(v17);
      if (v9 < 0) {
        goto LABEL_48;
      }
      uint64_t v13 = v23;
      v23[3] = 0;
    }
    uint64_t v18 = *(void *)(a1 + 472);
    if (v18)
    {
      int v9 = brk_ClassClose(v18);
      if (v9 < 0) {
        goto LABEL_48;
      }
      *(void *)(a1 + 472) = 0;
      uint64_t v13 = v23;
    }
    if (v13[50])
    {
      int v9 = thread_cb_ClassClose(v13 + 50);
      if (v9 < 0) {
        goto LABEL_48;
      }
      uint64_t v13 = v23;
      v23[50] = 0;
    }
    uint64_t v19 = v13[48];
    if (v19)
    {
      heap_Free((void *)v13[1], v19);
      v23[48] = 0;
    }
    uint64_t v20 = *(_WORD **)(a1 + 440);
    if (v20)
    {
      int v9 = rsrc_Close(v20, *(void *)(a1 + 448));
      if (v9 < 0) {
        goto LABEL_48;
      }
      *(void *)(a1 + 440) = safeh_GetNullHandle();
      *(void *)(a1 + 448) = v21;
    }
    if (!v6 || (int v9 = osspi_cb_cache_ClassClose(v6), (v9 & 0x80000000) == 0))
    {
      if (!v24 || (int v9 = critsec_cb_ClassClose(&v24), (v9 & 0x80000000) == 0))
      {
        if (!v5 || (int v9 = heap_cb_Close(v5), (v9 & 0x80000000) == 0))
        {
          (*(void (**)(uint64_t, uint64_t))(a1 + 32))(v7, a1);
          return ssft_MapTtsegErrToAPI(v9);
        }
      }
    }
LABEL_48:
    *(_DWORD *)a1 = 1933790291;
    return ssft_MapTtsegErrToAPI(v9);
  }
  return v2;
}

uint64_t ve_ttsOpen(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  if (a2 != 1749240915) {
    return v8;
  }
  uint64_t v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  if (*(_DWORD *)a1 != 1933790291) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Open : Begin", a6, a7, a8, v95);
  long long v101 = 0u;
  memset(v100, 0, sizeof(v100));
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a3, 1, 624);
  if (!v13) {
    return 2147483658;
  }
  uint64_t v14 = v13;
  *(void *)(v13 + 40) = a3;
  uint64_t v15 = *(void *)(a1 + 344);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 328);
  *(void *)(v13 + 64) = v15;
  *(void *)(v13 + 72) = a4;
  ++*(_DWORD *)(a1 + 544);
  int v16 = heap_cb_Open(a1 + 8, a3, (uint64_t)&v103);
  if (v16 < 0)
  {
    int v87 = v16;
    goto LABEL_32;
  }
  *(void *)(v14 + 8) = a1;
  *(_DWORD *)(v14 + 544) = 0;
  *(void *)(v14 + 552) = 0;
  *(void *)(v14 + 608) = 0;
  *(_DWORD *)uint64_t v14 = 1934574154;
  *(void *)(v14 + 112) = 0x10000000CLL;
  SetSavedMimeTypeforPlainText(v14, 0);
  int v23 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(void *)(a1 + 472));
  uint64_t v28 = *(void *)(a1 + 456);
  if (v23 < 0)
  {
    int v87 = v23;
    log_OutPublic(*(void *)(v28 + 32), (uint64_t)"VEAPI", 18002, "%s%x", v24, v25, v26, v27, "lhError");
    goto LABEL_32;
  }
  int v29 = critsec_ObjOpen(*(void *)(v28 + 16), v103, (uint64_t *)(v14 + 80));
  if (v29 < 0)
  {
    int v87 = v29;
    log_OutPublic(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18035, "%s%x", v30, v31, v32, v33, "lherror");
    brk_ObjClose(v102);
    goto LABEL_32;
  }
  int inited = rsrc_Open(v103, *(void *)(*(void *)(a1 + 456) + 16), v102, 0, v14 + 16);
  if (inited < 0
    || (uint64_t v39 = v14 + 32,
        int inited = InitRsrcFunction(*(_WORD **)(v14 + 16), *(void *)(v14 + 24), (void *)(v14 + 32)),
        inited < 0))
  {
    int v87 = inited;
    log_OutPublic(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18003, "%s%x", v35, v36, v37, v38, "lhError");
    brk_ObjClose(v102);
    critsec_ObjClose(*(void *)(v14 + 80));
    goto LABEL_32;
  }
  uint64_t v40 = *(void *)(v14 + 32);
  uint64_t v41 = *(void *)(a1 + 456);
  *(void *)(v40 + 64) = *(void *)(v41 + 64);
  *(_OWORD *)(v40 + 384) = *(_OWORD *)(v41 + 384);
  *(void *)(v40 + 400) = *(void *)(*(void *)(a1 + 456) + 400);
  *(_DWORD *)(v14 + 88) = 1;
  uint64_t v42 = *(void *)(a1 + 464);
  if (v42)
  {
    log_ObjOpen(v42, (uint64_t *)(v40 + 32));
    if (*(void *)(v14 + 48) || *(void *)(v14 + 56) || *(void *)(a1 + 344)) {
      log_SubscriberAdd(*(void *)(v40 + 32), v14 + 48, (uint64_t)&VAutoLogSub);
    }
  }
  uint64_t v43 = (uint64_t *)(v40 + 40);
  int v44 = paramc_ObjOpen(0, *(void *)(v14 + 16), *(void *)(v14 + 24), v40 + 40);
  if (v44 < 0)
  {
    int v87 = v44;
    log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 18004, "%s%x", v45, v46, v47, v48, "lhError");
    goto LABEL_32;
  }
  int v49 = (uint64_t *)(v40 + 48);
  int v50 = objc_ObjOpen(0, *(_WORD **)(v14 + 16), *(void *)(v14 + 24), (uint64_t *)(v40 + 48));
  if (v50 < 0)
  {
    int v93 = v50;
    log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 18005, "%s%x", v51, v52, v53, v54, "lhError");
    goto LABEL_41;
  }
  int v55 = paramc_ParamSetUInt(*v43, (uint64_t)"waitfactor", 1u);
  if (v55 < 0
    || (int v55 = paramc_ParamSetUInt(*v43, (uint64_t)"maxinputlength", 0xFAu), v55 < 0)
    || (int v55 = paramc_ParamSetStr(*v43, (uint64_t)"inputmimetype", "text/plain;charset=utf-16"), v55 < 0)
    || (int v55 = paramc_ParamSetStr(*v43, (uint64_t)"lidvoiceswitch", "no"), v55 < 0))
  {
    int v93 = v55;
    log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 51020, "%s%x", v56, v57, v58, v59, "lhError");
LABEL_41:
    int v87 = v93;
    goto LABEL_32;
  }
  int v60 = paramc_ParamSetInt(*v43, (uint64_t)"phonmapmrkenabled", 0);
  if (v60 < 0)
  {
    int v94 = v60;
    log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 51020, "%s%x", v61, v62, v63, v64, "lhError");
  }
  else
  {
    *((void *)&v97 + 1) = *(void *)(*(void *)(v14 + 8) + 528);
    *(void *)&long long v97 = 1;
    *(void *)&long long v98 = safeh_GetNullHandle();
    *((void *)&v98 + 1) = v65;
    uint64_t v99 = 0;
    int v66 = objc_RegisterObject(*v49, (uint64_t)"SYNTHSTREAM", &v97);
    if ((v66 & 0x80000000) == 0)
    {
      uint64_t v99 = 0;
      long long v97 = 0u;
      long long v98 = 0u;
      LOBYTE(v97) = 1;
      *((void *)&v97 + 1) = *(void *)(*(void *)(v14 + 8) + 536);
      *(void *)&long long v98 = safeh_GetNullHandle();
      *((void *)&v98 + 1) = v71;
      uint64_t v99 = 0;
      int v72 = objc_RegisterObject(*v49, (uint64_t)"LINGDB", &v97);
      if (v72 < 0)
      {
        int v87 = v72;
        log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 18007, "%s%x", v73, v74, v75, v76, "lhError");
      }
      else
      {
        *((void *)&v100[0] + 1) = ssft_hlp_ProcessPcmStream;
        *(void *)&long long v101 = ssft_hlp_ProcessTaInfoStream;
        int v77 = (*(uint64_t (**)(void, void, void, void, _OWORD *, uint64_t, void, uint64_t))(*(void *)(a1 + 480) + 32))(*(void *)(a1 + 488), *(void *)(a1 + 496), *(void *)(v14 + 16), *(void *)(v14 + 24), v100, v14, 0, v14 + 96);
        if (v77 < 0)
        {
          int v87 = v77;
          log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 18008, "%s%x", v78, v79, v80, v81, "lhError");
        }
        else
        {
          int v82 = lipsync_ObjOpen((uint64_t)v103, (uint64_t *)(v14 + 608));
          if ((v82 & 0x80000000) == 0)
          {
            *(void *)a5 = v14;
            *(_DWORD *)(a5 + 8) = 1750024778;
            log_OutText(*(void *)(*(void *)(v14 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Open : End", v84, v85, v86, v96);
            return 0;
          }
          int v87 = v82;
          log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 18011, "%s%x", v83, v84, v85, v86, "lhError");
        }
      }
      goto LABEL_32;
    }
    int v94 = v66;
    log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"VEAPI", 18006, "%s%x", v67, v68, v69, v70, "lhError");
  }
  int v87 = v94;
LABEL_32:
  if (*(void *)(v14 + 32))
  {
    ve_ttsClose(v14, 1750024778, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a1 + 32))(a3, v14);
    --*(_DWORD *)(a1 + 544);
    if (v103) {
      heap_cb_Close(v103);
    }
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18012, 0, v88, v89, v90, v91, v96);
  return ssft_MapTtsegErrToAPI(v87);
}

uint64_t SetSavedMimeTypeforPlainText(uint64_t a1, char *__s1)
{
  int v8 = 0;
  TextMime2ve(__s1, 0, 0, &v8);
  if (!v8) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 616);
  if (v4)
  {
    heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v4);
    BOOL v5 = v8 != 0;
  }
  else
  {
    BOOL v5 = 1;
  }
  *(void *)(a1 + 616) = 0;
  uint64_t result = 1;
  if (__s1)
  {
    if (v5)
    {
      int v7 = strlen(__s1);
      uint64_t result = heap_Alloc(*(void *)(*(void *)(a1 + 32) + 8), (v7 + 1));
      *(void *)(a1 + 616) = result;
      if (result)
      {
        strcpy((char *)result, __s1);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ssft_hlp_ProcessPcmStream(uint64_t a1, char a2, void *a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v34 = 0;
  int v33 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  if (!*(void *)(a1 + 480))
  {
    if (*a3)
    {
      uint64_t v16 = *(void *)(a1 + 552);
      *((void *)&v35 + 1) = *a3;
      *((void *)&v36 + 1) = v16;
      uint64_t v17 = ssft_hlp_ReadStopFlag(a1, &v33);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      if (v33 == 1)
      {
        *(void *)&long long v35 = 0;
        *(void *)&long long v36 = 0;
      }
      else
      {
        uint64_t v18 = *a6;
        *(void *)&long long v35 = (2 * *a4);
        *(void *)&long long v36 = v18;
        ssft_hlp_convertAndCopyInternalMrkRcrdsToApiMrk(a1, (uint64_t)&v34, a5, v18);
      }
      LODWORD(v37) = 16;
      uint64_t v38 = &v34;
      if ((a2 & 2) != 0)
      {
        int v19 = 0xFFFF;
        *(_DWORD *)(a1 + 452) = 0xFFFF;
      }
      else
      {
        int v19 = *(_DWORD *)(a1 + 452);
      }
      HIDWORD(v37) = v19;
      int v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 504))(a1, 1750024778, *(void *)(a1 + 496), &v37);
      *(_DWORD *)(a1 + 452) = 2;
      if (v20)
      {
        if ((v20 & 0x1FFF) != 0x807) {
          return v20 & 0x1FFF | 0x80002000;
        }
        (*(void (**)(void, void))(*(void *)(*(void *)(a1 + 8) + 480) + 128))(*(void *)(a1 + 96), *(void *)(a1 + 104));
        ssft_hlp_SetStateInterrupted(a1);
        *a3 = 0;
        *a4 = 0;
        *(void *)(a1 + 552) = 0;
        uint64_t v14 = 2147493895;
LABEL_49:
        *a6 = 0;
        return v14;
      }
    }
    if ((a2 & 2) != 0)
    {
      uint64_t v14 = 0;
      *a3 = 0;
      *a4 = 0;
      return v14;
    }
    uint64_t v14 = ssft_hlp_ReadStopFlag(a1, &v33);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    if (v33 == 1)
    {
      *a3 = 0;
      *a4 = 0;
      *(void *)(a1 + 552) = 0;
      *(_DWORD *)(a1 + 544) = 0;
      goto LABEL_49;
    }
    uint64_t v38 = &v34;
    uint64_t v37 = 8;
    int v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 504))(a1, 1750024778, *(void *)(a1 + 496), &v37);
    int v22 = v21;
    uint64_t v14 = v21 & 0x1FFF | 0x80002000;
    int v23 = v38;
    uint64_t v24 = v38[2];
    *a3 = v24;
    unint64_t v25 = (unint64_t)v23[1] >> 1;
    *a4 = v25;
    if (v24 && v25)
    {
      if (!v21)
      {
        uint64_t v14 = 0;
        goto LABEL_52;
      }
      if ((v21 & 0x1FFF) != 0x807)
      {
LABEL_48:
        *a3 = 0;
        *a4 = 0;
        *(void *)(a1 + 552) = 0;
        goto LABEL_49;
      }
    }
    unsigned int v26 = ssft_hlp_ReadStopFlag(a1, &v33);
    if (v22) {
      uint64_t v27 = v14;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v26 | v33)
    {
      uint64_t v14 = v27;
    }
    else
    {
      int v28 = (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 8) + 480) + 128))(*(void *)(a1 + 96), *(void *)(a1 + 104));
      if (!v22) {
        LODWORD(v14) = v28;
      }
      unsigned int v29 = ssft_hlp_SetStateInterrupted(a1);
      if ((int)v14 <= -1 || v29 == 0) {
        uint64_t v14 = v14;
      }
      else {
        uint64_t v14 = v29;
      }
    }
    if ((v14 & 0x80000000) != 0 || !*a3) {
      goto LABEL_48;
    }
LABEL_52:
    uint64_t v32 = v38;
    *(void *)(a1 + 552) = v38[4];
    unint64_t v15 = v32[3] / 0x38uLL;
    goto LABEL_7;
  }
  if (*a4 || *a6)
  {
    **(_DWORD **)(a1 + 472) = 16;
    uint64_t v12 = *(void *)(a1 + 480);
    *(void *)(v12 + 8) = (2 * *a4);
    uint64_t v13 = *a6;
    *(void *)(v12 + 24) = v13;
    uint64_t v14 = ssft_hlp_convertAndCopyInternalMrkRcrdsToApiMrk(a1, v12, a5, v13);
    if ((a2 & 2) != 0) {
      return v14;
    }
    goto LABEL_5;
  }
  uint64_t v14 = 0;
  if ((a2 & 2) != 0)
  {
    **(_DWORD **)(a1 + 472) = 2;
    *a3 = 0;
    *a4 = 0;
    goto LABEL_49;
  }
LABEL_5:
  if ((v14 & 0x80000000) == 0)
  {
    *a3 = *(void *)(*(void *)(a1 + 480) + 16);
    *a4 = *(_DWORD *)(a1 + 488) >> 1;
    *(void *)(a1 + 552) = *(void *)(*(void *)(a1 + 480) + 32);
    LODWORD(v15) = *(_DWORD *)(a1 + 492) / 0x38u;
LABEL_7:
    *(_DWORD *)(a1 + 544) = v15;
    *a6 = v15;
  }
  return v14;
}

uint64_t ssft_hlp_ProcessTaInfoStream(uint64_t a1, int a2, int a3, const void **a4, unsigned int *a5, void *__src, unsigned int *a7)
{
  uint64_t v22 = 0;
  int v23 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  if (a2 == 8)
  {
    size_t v14 = *a5;
    uint64_t v15 = *a7;
    *(void *)&long long v20 = v14;
    *(void *)&long long v21 = v15;
    if (v14 && *a4)
    {
      memmove(*(void **)(a1 + 520), *a4, v14);
      uint64_t v15 = *a7;
    }
    uint64_t v16 = *(void **)(a1 + 536);
    *((void *)&v20 + 1) = *(void *)(a1 + 520);
    *((void *)&v21 + 1) = v16;
    memmove(v16, __src, 40 * v15);
    LODWORD(v22) = 2048;
    int v23 = &v20;
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 504))(a1, 1750024778, *(void *)(a1 + 496), &v22);
    if (v17) {
      return v17 & 0x1FFF | 0x80002000;
    }
    else {
      return 0;
    }
  }
  else if (a2 == 4)
  {
    uint64_t v10 = *a7;
    *(void *)&long long v20 = *a5;
    *(void *)&long long v21 = v10;
    LODWORD(v22) = 1024;
    int v23 = &v20;
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, unsigned int *, void *))(a1 + 504))(a1, 1750024778, *(void *)(a1 + 496), &v22, a5, __src);
    if (v11)
    {
      return v11 & 0x1FFF | 0x80002000;
    }
    else
    {
      uint64_t v18 = *((void *)&v20 + 1);
      uint64_t result = 2147492110;
      if (*((void *)&v20 + 1))
      {
        uint64_t v19 = *((void *)&v21 + 1);
        if (*((void *)&v21 + 1))
        {
          uint64_t result = 0;
          *(void *)(a1 + 512) = *a5;
          *(void *)(a1 + 528) = *a7;
          *(void *)(a1 + 520) = v18;
          *(void *)(a1 + 536) = v19;
        }
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t ve_ttsClose(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  int v49 = 0;
  BOOL v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Close : Begin", a6, a7, a8, v48);
  HIDWORD(v48) = 0;
  int State = ssft_hlp_GetState(a1, (_DWORD *)&v48 + 1);
  if ((State & 0x80000000) == 0)
  {
    if (HIDWORD(v48) != 1) {
      return 2147483665;
    }
    *(_DWORD *)a1 = -1934574155;
    int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v49);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v13 = (void *)v49[1];
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 8) + 456) + 32);
      SetSavedMimeTypeforPlainText(a1, 0);
      if (*(void *)(a1 + 592))
      {
        int v18 = objc_ReleaseObject(v49[6], (uint64_t)"PHONMAP");
        if (v18 < 0) {
          int inited = v18;
        }
      }
      uint64_t v19 = *(void *)(a1 + 608);
      if (v19)
      {
        int v20 = lipsync_ObjClose(v19);
        if (v20 < 0 && inited > -1) {
          int inited = v20;
        }
      }
      uint64_t v22 = *(void *)(a1 + 96);
      if (v22) {
        int inited = (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(a1 + 8) + 480) + 40))(v22, *(void *)(a1 + 104));
      }
      int v23 = v49;
      uint64_t v24 = v49[4];
      if (v24)
      {
        int v25 = log_ObjClose(v24);
        if (v25 < 0 && inited > -1) {
          int inited = v25;
        }
        int v23 = v49;
        v49[4] = 0;
      }
      uint64_t v27 = v23[6];
      if (v27)
      {
        uint64_t v28 = *(void *)(a1 + 8);
        if (*(void *)(v28 + 536))
        {
          int v29 = objc_UnregisterObject(v27, (uint64_t)"LINGDB");
          if (v29 < 0 && inited > -1) {
            int inited = v29;
          }
          uint64_t v28 = *(void *)(a1 + 8);
          int v23 = v49;
        }
        if (*(void *)(v28 + 528))
        {
          int v31 = objc_UnregisterObject(v23[6], (uint64_t)"SYNTHSTREAM");
          if (v31 < 0 && inited > -1) {
            int inited = v31;
          }
          int v23 = v49;
        }
        int v33 = objc_ObjClose(v23[6]);
        if (v33 < 0 && inited > -1) {
          int inited = v33;
        }
        int v23 = v49;
        v49[6] = 0;
      }
      uint64_t v35 = v23[5];
      if (v35)
      {
        int v36 = paramc_ObjClose(v35);
        if (v36 < 0 && inited > -1) {
          int inited = v36;
        }
        int v23 = v49;
        v49[5] = 0;
      }
      uint64_t v38 = v23[3];
      if (v38)
      {
        int v39 = brk_ObjClose(v38);
        if (v39 < 0 && inited > -1) {
          int inited = v39;
        }
        v49[3] = 0;
      }
      uint64_t v41 = *(void *)(a1 + 80);
      if (v41)
      {
        int v42 = critsec_ObjClose(v41);
        if (v42 < 0 && inited > -1) {
          int inited = v42;
        }
        *(void *)(a1 + 80) = 0;
      }
      int v44 = *(_WORD **)(a1 + 16);
      if (v44)
      {
        int v45 = rsrc_Close(v44, *(void *)(a1 + 24));
        if (v45 < 0 && inited > -1) {
          int inited = v45;
        }
        int v49 = 0;
      }
      log_OutText(v14, (uint64_t)"VEAPI", 4, 0, (uint64_t)"Close : End", v15, v16, v17, v48);
      --*(_DWORD *)(*(void *)(a1 + 8) + 544);
      heap_cb_Close(v13);
      (*(void (**)(void, uint64_t))(*(void *)(a1 + 8) + 32))(*(void *)(a1 + 40), a1);
    }
    return ssft_MapTtsegErrToAPI(inited);
  }
  return ssft_MapTtsegErrToAPI(State);
}

uint64_t ssft_hlp_GetState(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = critsec_Enter(*(void **)(a1 + 80));
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v11 = v4;
    log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v5, v6, v7, v8, "lhError");
    return v11;
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 88);
    BOOL v9 = *(void **)(a1 + 80);
    return critsec_Leave(v9);
  }
}

uint64_t ve_ttsSetOutDevice(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  int v19 = 0;
  uint64_t v18 = 0;
  BOOL v9 = a2 != 1750024778 || a1 == 0;
  if (!v9 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"SetOutDevice : Begin", a6, a7, a8, v18);
    int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v18);
    if (inited < 0)
    {
      int v13 = inited;
    }
    else
    {
      if (!a3) {
        return 2147483654;
      }
      if (!*(void *)(a3 + 8)) {
        return 2147483666;
      }
      int v13 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsSetOutDevice", 2, &v19);
      if ((v13 & 0x80000000) == 0)
      {
        *(_OWORD *)(a1 + 496) = *(_OWORD *)a3;
        ssft_hlp_Unlock(a1, v19);
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"SetOutDevice : End", v14, v15, v16, v18);
      }
    }
    return ssft_MapTtsegErrToAPI(v13);
  }
  return v8;
}

uint64_t ssft_hlp_LockFromIdle(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v11 = critsec_Enter(*(void **)(a1 + 80));
  if ((v11 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%s%s%x", v7, v8, v9, v10, "function");
  }
  else
  {
    if (*(_DWORD *)(a1 + 88) == 1)
    {
      *a4 = 1;
      *(_DWORD *)(a1 + 88) = a3;
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18032, "%s%s", v7, v8, v9, v10, "function");
      LODWORD(v11) = -2147475439;
    }
    int v12 = critsec_Leave(*(void **)(a1 + 80));
    if (v12 >= 0 || (int)v11 <= -1) {
      return v11;
    }
    else {
      return v12;
    }
  }
  return v11;
}

uint64_t ssft_hlp_Unlock(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if ((critsec_Enter(*(void **)(result + 80)) & 0x80000000) != 0)
    {
      return log_OutPublic(*(void *)(*(void *)(v3 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v4, v5, v6, v7, "lhError");
    }
    else
    {
      *(_DWORD *)(v3 + 88) = a2;
      uint64_t v8 = *(void **)(v3 + 80);
      return critsec_Leave(v8);
    }
  }
  return result;
}

uint64_t ssft_hlp_ProcessMessage2Speech(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 440);
  if (a2 == 2 || v8 != a2)
  {
    *(_DWORD *)(a1 + 440) = a2;
    int v9 = ssft_hlp_PipelineName(a1, 1, a1 + 120);
    if (v9 < 0)
    {
      int v13 = v9;
      int v17 = 0;
      *(_DWORD *)(a1 + 440) = v8;
      goto LABEL_16;
    }
  }
  else if ((~*(_DWORD *)(a1 + 112) & 0xC) == 0)
  {
    goto LABEL_7;
  }
  int v10 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 8) + 480) + 192))(*(void *)(a1 + 96), *(void *)(a1 + 104), a1 + 310, a2);
  if (v10 < 0)
  {
LABEL_14:
    int v13 = v10;
    int v17 = 0;
    goto LABEL_16;
  }
LABEL_7:
  *(void *)(a1 + 456) = safeh_GetNullHandle();
  *(void *)(a1 + 464) = v11;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 472) = 0;
  if (a2 == 2) {
    int v12 = 256;
  }
  else {
    int v12 = 1;
  }
  *(_DWORD *)(a1 + 452) = 1;
  int v10 = ssft_hlp_PcmNotify(a1, v12);
  if (v10 < 0) {
    goto LABEL_14;
  }
  int v27 = 0;
  int v13 = ssft_hlp_ReadStopFlag(a1, &v27);
  if (!(v13 | v27))
  {
    uint64_t v14 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 8) + 480)
                                                                                       + 104);
    uint64_t NullHandle = safeh_GetNullHandle();
    int v13 = v14(*(void *)(a1 + 96), *(void *)(a1 + 104), a3, a4, NullHandle, v16);
  }
  int v17 = 1;
LABEL_16:
  unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 8) + 528) + 40))(a3, a4);
  if (v13 >= 0) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v13;
  }
  if (v17)
  {
    if (a2 == 2) {
      int v20 = 512;
    }
    else {
      int v20 = 2;
    }
    unsigned int v21 = ssft_hlp_PcmNotify(a1, v20);
    if ((int)v19 >= 0) {
      uint64_t v19 = v21;
    }
    else {
      uint64_t v19 = v19;
    }
  }
  if ((~*(_DWORD *)(a1 + 112) & 0xC) != 0)
  {
    unsigned int v22 = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(*(void *)(a1 + 8) + 480) + 192))(*(void *)(a1 + 96), *(void *)(a1 + 104), 0, a2);
    if ((int)v19 >= 0) {
      uint64_t v19 = v22;
    }
    else {
      uint64_t v19 = v19;
    }
  }
  if ((v19 & 0x80000000) == 0)
  {
    int v26 = 0;
    int v23 = ssft_hlp_ReadStopFlag(a1, &v26);
    if (v26 != 1 || v23 <= -1) {
      return v23;
    }
    else {
      return 2147493895;
    }
  }
  return v19;
}

uint64_t ve_ttsProcessText2Speech(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 2147483656;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v22 = v7;
  int v20 = 0;
  if (a2 != 1750024778 || !a1 || *(_DWORD *)a1 != 1934574154) {
    return v6;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2Speech : Begin", v8, v9, v10, v18);
  int v11 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsProcessText2Speech", 3, &v20);
  if ((v11 & 0x80000000) == 0)
  {
    int v15 = -2147475449;
    if (!a3 || !*(void *)(a3 + 16) || !*(void *)(a3 + 8))
    {
LABEL_18:
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2Speech : End", v12, v13, v14, v19);
      if (v20) {
        ssft_hlp_Unlock(a1, v20);
      }
      return ssft_MapTtsegErrToAPI(v15);
    }
    if (*(_DWORD *)a3 > 1u)
    {
      int v15 = -2147474688;
      goto LABEL_18;
    }
    int v16 = SetMimeTypeAccordingToTextFormat(a1, *(_DWORD *)a3);
    if (v16 < 0)
    {
LABEL_13:
      int v15 = v16;
      goto LABEL_18;
    }
    if (*(void *)(a1 + 504))
    {
      int v16 = ssft_hlp_CreateMessageWithText(a1, a2, a1, a3, 0, &NullHandle);
      if ((v16 & 0x80000000) == 0) {
        int v16 = ssft_hlp_ProcessMessage2Speech(a1, 0, NullHandle, v22);
      }
      goto LABEL_13;
    }
    ssft_hlp_Unlock(a1, v20);
    return 2147485824;
  }
  return ssft_MapTtsegErrToAPI(v11);
}

uint64_t SetMimeTypeAccordingToTextFormat(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    __s1 = 0;
    uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"inputmimetype", &__s1);
    if ((Str & 0x80000000) != 0)
    {
      uint64_t v18 = Str;
      log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 51023, "%s%x", v4, v5, v6, v7, "lhError");
    }
    else
    {
      int v8 = SetSavedMimeTypeforPlainText(a1, __s1);
      uint64_t v13 = *(void *)(a1 + 32);
      if (v8)
      {
        uint64_t v18 = paramc_ParamSetStr(*(void *)(v13 + 40), (uint64_t)"inputmimetype", "application/synthesis+ssml");
        if ((v18 & 0x80000000) != 0) {
          log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 51020, "%s%x", v14, v15, v16, v17, "lhError");
        }
      }
      else
      {
        uint64_t v18 = 2147491850;
        log_OutPublic(*(void *)(v13 + 32), (uint64_t)"VEAPI", 51024, "%s%x", v9, v10, v11, v12, "lhError");
      }
    }
  }
  else
  {
    uint64_t v19 = *(char **)(a1 + 616);
    if (v19)
    {
      uint64_t v18 = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"inputmimetype", v19);
      if ((v18 & 0x80000000) != 0) {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 51021, "%s%x", v20, v21, v22, v23, "lhError");
      }
      else {
        SetSavedMimeTypeforPlainText(a1, 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return v18;
}

uint64_t ssft_hlp_CreateMessageWithText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v11 = *(std::string::value_type **)(a4 + 16);
  __dst = 0;
  uint64_t v35 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v33 = v13;
  __s1 = 0;
  if (!a6) {
    return 2147483655;
  }
  *a6 = safeh_GetNullHandle();
  a6[1] = v14;
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a3 + 16), *(void *)(a3 + 24), &v35);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 8) + 528) + 32);
  uint64_t v17 = safeh_GetNullHandle();
  uint64_t v18 = v16(v17);
  if ((v18 & 0x80000000) == 0)
  {
    if ((paramc_ParamGetStr(*(void *)(v35 + 40), (uint64_t)"inputmimetype", &__s1) & 0x80000000) != 0)
    {
      uint64_t v19 = "text/plain;charset=utf-16";
      __src = (const char *)&aSMS_UTF16;
      __s1 = "text/plain;charset=utf-16";
      unsigned int v21 = 20;
    }
    else
    {
      uint64_t v19 = __s1;
      int v20 = strcmp(__s1, "text/plain;charset=utf-8");
      if (v20) {
        unsigned int v21 = 20;
      }
      else {
        unsigned int v21 = 10;
      }
      uint64_t v22 = (const char *)&aSMS_UTF16;
      if (!v20) {
        uint64_t v22 = "\x1B\\tn=sms\\ .daf";
      }
      __src = v22;
    }
    BOOL v24 = strcmp(v19, "text/plain;charset=utf-16") == 0;
    _Gryphon_SetOriginalText(a1, a2, v11, v12, v24);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, uint64_t, uint64_t *))(*(void *)(*(void *)(a3 + 8) + 528) + 64))(*a6, a6[1], 192, __s1, 0, 2, &NullHandle);
    BOOL v25 = a5 != 2 && *(_DWORD *)(a3 + 116) == 2;
    char v26 = !v25;
    if (v25) {
      unsigned int v27 = v21;
    }
    else {
      unsigned int v27 = 0;
    }
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void))(*(void *)(*(void *)(a3 + 8) + 528)
                                                                         + 112))(NullHandle, v33, &__dst, v27 + v12);
      if ((v18 & 0x80000000) == 0)
      {
        if ((v26 & 1) == 0) {
          memcpy(__dst, __src, v21);
        }
        memcpy((char *)__dst + v27, v11, v12);
        *(_DWORD *)(a3 + 448) = v27;
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 8) + 528) + 120))(NullHandle, v33, v27 + v12);
      }
    }
  }
  uint64_t v23 = v18;
  if (NullHandle) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 8) + 528) + 72))(NullHandle, v33);
  }
  if ((v23 & 0x80000000) != 0 && *a6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 8) + 528) + 40))(*a6, a6[1]);
    *a6 = safeh_GetNullHandle();
    a6[1] = v28;
  }
  return v23;
}

uint64_t ve_ttsAnalyzeText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v35 = v6;
  int v33 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  __s1 = 0;
  LODWORD(v30) = *(_DWORD *)a3;
  uint64_t v32 = 0;
  uint64_t result = 2147483656;
  if (a2 != 1750024778 || !a1 || *(_DWORD *)a1 != 1934574154) {
    return result;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2Speech : Begin", v7, v8, v9, v27);
  int v11 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsAnalyzeText", 3, &v33);
  if ((v11 & 0x80000000) == 0)
  {
    int v15 = -2147475449;
    if (*(void *)(a3 + 16) && *(void *)(a3 + 8))
    {
      if (*(_DWORD *)a3 > 1u)
      {
        uint64_t v22 = 0;
        int v15 = -2147474688;
        goto LABEL_20;
      }
      int Str = SetMimeTypeAccordingToTextFormat(a1, *(_DWORD *)a3);
      if ((Str & 0x80000000) == 0)
      {
        int Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"inputmimetype", &__s1);
        if ((Str & 0x80000000) == 0)
        {
          uint64_t v17 = __s1;
          if (!strcmp(__s1, "text/plain;charset=utf-16"))
          {
            uint64_t v31 = *(void *)(a3 + 8);
            uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 8);
            uint64_t v24 = v31 + 2;
          }
          else
          {
            if (strcmp(v17, "text/plain;charset=utf-8") && strcmp(v17, "application/synthesis+ssml"))
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18023, "%s%s", v18, v19, v20, v21, "typeOfChar");
              uint64_t v22 = 0;
              int v15 = -2147483641;
LABEL_20:
              log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsAnalyzeText : End", v12, v13, v14, v28);
              if (v22) {
                heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v22);
              }
              if (v33) {
                ssft_hlp_Unlock(a1, v33);
              }
              return ssft_MapTtsegErrToAPI(v15);
            }
            uint64_t v31 = *(void *)(a3 + 8);
            uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 8);
            uint64_t v24 = v31 + 1;
          }
          BOOL v25 = (void *)heap_Calloc(v23, 1, v24);
          uint64_t v22 = (uint64_t)v25;
          uint64_t v32 = v25;
          if (v25)
          {
            memcpy(v25, *(const void **)(a3 + 16), *(void *)(a3 + 8));
            if (*(void *)(a1 + 504))
            {
              int v26 = ssft_hlp_CreateMessageWithText(a1, a2, a1, (uint64_t)&v30, 2, &NullHandle);
              if ((v26 & 0x80000000) == 0) {
                int v26 = ssft_hlp_ProcessMessage2Speech(a1, 2, NullHandle, v35);
              }
              int v15 = v26;
            }
            else
            {
              int v15 = -2147481472;
            }
          }
          else
          {
            int v15 = -2147483638;
          }
          goto LABEL_20;
        }
      }
      int v15 = Str;
    }
    uint64_t v22 = 0;
    goto LABEL_20;
  }
  return ssft_MapTtsegErrToAPI(v11);
}

uint64_t ve_ttsProcessText2SpeechStartingAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v10 = 2147483656;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v50 = v11;
  uint64_t v48 = 0;
  unsigned int v46 = -1;
  unsigned int v47 = -1;
  unsigned int v44 = -1;
  unsigned int v45 = -1;
  unsigned int v43 = -1;
  uint64_t v42 = 0;
  strcpy(__s2, "unknown");
  HIBYTE(v41) = 0;
  if (a2 != 1750024778 || !a1 || *(_DWORD *)a1 != 1934574154) {
    return v10;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsProcessText2SpeechStartingAt : Begin", v12, v13, v14, v41);
  int v15 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsProcessText2SpeechStartingAt", 3, (_DWORD *)&v48 + 1);
  if ((v15 & 0x80000000) == 0)
  {
    int v16 = -2147475449;
    if (!a3 || !*(void *)(a3 + 16) || !*(void *)(a3 + 8)) {
      goto LABEL_18;
    }
    if (*(_DWORD *)a3 > 1u)
    {
      int v16 = -2147474688;
      goto LABEL_18;
    }
    if (*(void *)(a1 + 504))
    {
      int Int = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"enablerett", (int *)&v48);
      if (Int < 0)
      {
        int v16 = Int;
        goto LABEL_18;
      }
      int v16 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"enablerett", 0);
      if ((v16 & 0x80000000) == 0)
      {
        unint64_t v21 = *(unsigned int *)(a4 + 40 * a5 + 8);
        unint64_t v22 = *(void *)(a3 + 8);
        BOOL v23 = v22 >= v21;
        unint64_t v24 = v22 - v21;
        if (!v23)
        {
          log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsProcessText2SpeechStartingAt : TA Index is out of boundary", v18, v19, v20, v41);
          goto LABEL_18;
        }
        *(_DWORD *)(a1 + 560) = *(_DWORD *)a3;
        *(void *)(a1 + 568) = v24;
        *(void *)(a1 + 576) = *(void *)(a3 + 16) + v21;
        uint64_t v29 = a4 + 40 * a5;
        uint64_t v30 = *(void *)(v29 + 16);
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"volume", (int *)&v47);
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"waitfactor", (int *)&v46);
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"rate", (int *)&v45);
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"pitch", (int *)&v44);
        paramc_ParamGetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"readmode", (int *)&v43);
        paramc_ParamGetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"inputmimetype", &v42);
        __strcpy_chk();
        paramc_ParamSetStrPermanent(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
        paramc_ParamSetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"lidon", (char *)&v41 + 7);
        if (!*(void *)(v29 + 16)
          || (*(unsigned int (**)(void, void, uint64_t))(*(void *)(*(void *)(a1 + 8) + 480) + 184))(*(void *)(a1 + 96), *(void *)(a1 + 104), v30) != 1)
        {
LABEL_46:
          int v40 = ssft_hlp_CreateMessageWithText(a1, a2, a1, a1 + 560, 0, &NullHandle);
          if ((v40 & 0x80000000) == 0) {
            int v40 = ssft_hlp_ProcessMessage2Speech(a1, 0, NullHandle, v50);
          }
          int v16 = v40;
          paramc_ParamSetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"lidon", (char *)&v41 + 7);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"volume", v47);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"audioinsertervolume", v47);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"waitfactor", v46);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"rate", v45);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"audioinserterrate", v45);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"pitch", v44);
          paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"readmode", v43);
          paramc_ParamSetStrPermanent(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"inputmimetype", v52);
          goto LABEL_18;
        }
        uint64_t v31 = (char *)(v30 + 64);
        if (!strcmp((const char *)(v30 + 64), __s2) || (size_t v32 = strlen((const char *)(v30 + 64)), v32 == 7))
        {
          uint64_t v31 = __s2;
        }
        else if (v32 != 3)
        {
          goto LABEL_32;
        }
        paramc_ParamSetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"lidon", v31);
LABEL_32:
        unsigned int v33 = *(_DWORD *)(v30 + 4);
        if (v33 != 9999)
        {
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"volume", v33);
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"audioinsertervolume", *(_DWORD *)(v30 + 4));
        }
        unsigned int v34 = *(_DWORD *)(v30 + 20);
        if (v34 != 9999) {
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"waitfactor", v34);
        }
        unsigned int v35 = *(_DWORD *)(v30 + 8);
        if (v35 != 9999)
        {
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"rate", v35);
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"audioinserterrate", *(_DWORD *)(v30 + 8));
        }
        unsigned int v36 = *(_DWORD *)(v30 + 12);
        if (v36 != 9999) {
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"pitch", v36);
        }
        unsigned int v37 = *(_DWORD *)(v30 + 24);
        if (v37 != 9999) {
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"readmode", v37);
        }
        unsigned int v38 = *(_DWORD *)(v30 + 28);
        if (v38) {
          paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"initcommonbiasvalue", v38);
        }
        int v39 = (char *)(v30 + 32);
        if (strlen(v39) == 3) {
          paramc_ParamSetStr(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"initcommonbiaslanguage", v39);
        }
        goto LABEL_46;
      }
LABEL_18:
      paramc_ParamSetInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"enablerett", v48);
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsProcessText2SpeechStartingAt : End", v26, v27, v28, v41);
      if (HIDWORD(v48)) {
        ssft_hlp_Unlock(a1, SHIDWORD(v48));
      }
      return ssft_MapTtsegErrToAPI(v16);
    }
    ssft_hlp_Unlock(a1, SHIDWORD(v48));
    return 2147485824;
  }
  return ssft_MapTtsegErrToAPI(v15);
}

uint64_t ve_ttsProcessText2SpeechCooperatively(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2147483656;
  uint64_t v44 = 0;
  __int16 v43 = 0;
  BOOL v11 = a2 != 1750024778 || a1 == 0;
  if (!v11 && *(_DWORD *)a1 == 1934574154)
  {
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2SpeechCooperatively : Begin", a6, a7, a8, v41);
    int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v44);
    if (inited < 0)
    {
      int MessageWithText = inited;
    }
    else
    {
      int MessageWithText = critsec_Enter(*(void **)(a1 + 80));
      if ((MessageWithText & 0x80000000) == 0)
      {
        int v21 = *(_DWORD *)(a1 + 88);
        if ((v21 - 4) >= 2)
        {
          if (v21 == 1)
          {
            *(_DWORD *)(a1 + 88) = 4;
LABEL_17:
            int v22 = critsec_Leave(*(void **)(a1 + 80));
            if (v22 < 0 && MessageWithText > -1) {
              int MessageWithText = v22;
            }
            if (MessageWithText < 0) {
              return ssft_MapTtsegErrToAPI(MessageWithText);
            }
            if (v21 == 1)
            {
              *a4 = 1;
              *(_DWORD *)a5 = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 24) = 0;
              if (!a3 || !*(void *)(a3 + 16))
              {
                int MessageWithText = -2147475449;
                goto LABEL_50;
              }
              int MessageWithText = -2147475449;
              if (!*(void *)(a3 + 8)) {
                goto LABEL_50;
              }
              if (*(_DWORD *)a3 > 1u)
              {
                int MessageWithText = -2147474688;
                goto LABEL_50;
              }
              int v27 = SetMimeTypeAccordingToTextFormat(a1, *(_DWORD *)a3);
              if ((v27 & 0x80000000) == 0)
              {
                int MessageWithText = ssft_hlp_CreateMessageWithText(a1, a2, a1, a3, 0, (uint64_t *)(a1 + 456));
                if ((MessageWithText & 0x80000000) == 0)
                {
                  int v28 = *(_DWORD *)(a1 + 440);
                  if (v28)
                  {
                    *(_DWORD *)(a1 + 440) = 0;
                    int v29 = ssft_hlp_PipelineName(a1, 1, a1 + 120);
                    if (v29 < 0)
                    {
                      int MessageWithText = v29;
                      *(_DWORD *)(a1 + 440) = v28;
                      goto LABEL_50;
                    }
                  }
                  else if ((~*(_DWORD *)(a1 + 112) & 0xC) == 0)
                  {
                    goto LABEL_51;
                  }
                  int v38 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(*(void *)(a1 + 8)
                                                                                               + 480)
                                                                                   + 192))(*(void *)(a1 + 96), *(void *)(a1 + 104), a1 + 310, 0);
                  goto LABEL_45;
                }
LABEL_50:
                __int16 v43 = 2;
                goto LABEL_51;
              }
LABEL_48:
              int MessageWithText = v27;
              goto LABEL_50;
            }
            if (*(void *)(a5 + 16) && v21 != 6 && (uint64_t v30 = *(void *)(a5 + 8)) != 0)
            {
              *(void *)(a1 + 472) = a4;
              *(void *)(a1 + 480) = a5;
              *(_DWORD *)(a1 + 488) = v30;
              *(_DWORD *)(a1 + 492) = *(void *)(a5 + 24);
              paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 32) + 40), (uint64_t)"audiooutputbufsamples", v30 >> 1);
              *a4 = 4;
              *(_DWORD *)a5 = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 24) = 0;
              uint64_t v31 = *(uint64_t (**)(void, void, void, void, uint64_t, uint64_t, __int16 *))(*(void *)(*(void *)(a1 + 8) + 480) + 176);
              uint64_t NullHandle = safeh_GetNullHandle();
              int v34 = v31(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 456), *(void *)(a1 + 464), NullHandle, v33, &v43);
              int MessageWithText = v34;
              if ((v34 & 0x80000000) == 0) {
                goto LABEL_51;
              }
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 24) = 0;
              if ((v34 & 0x1FFF) != 0x807) {
                goto LABEL_50;
              }
            }
            else
            {
              *a4 = 32;
              *(_DWORD *)a5 = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 24) = 0;
              if (v21 == 6)
              {
                *(void *)(a1 + 472) = a4;
                *(void *)(a1 + 480) = a5;
                *(void *)(a1 + 488) = 0;
                unsigned int v35 = *(uint64_t (**)(void, void, void, void, uint64_t, uint64_t, __int16 *))(*(void *)(*(void *)(a1 + 8) + 480) + 176);
                uint64_t v36 = safeh_GetNullHandle();
                int MessageWithText = v35(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 456), *(void *)(a1 + 464), v36, v37, &v43);
                if ((MessageWithText & 0x1FFF) != 0x807)
                {
LABEL_46:
                  if (MessageWithText < 0) {
                    goto LABEL_50;
                  }
LABEL_51:
                  if ((v43 & 2) != 0)
                  {
                    *a4 = 2;
                    (*(void (**)(void, void))(*(void *)(*(void *)(a1 + 8) + 528) + 40))(*(void *)(a1 + 456), *(void *)(a1 + 464));
                    *(void *)(a1 + 456) = safeh_GetNullHandle();
                    *(void *)(a1 + 464) = v39;
                    if ((~*(_DWORD *)(a1 + 112) & 0xC) != 0) {
                      (*(void (**)(void, void, void, void))(*(void *)(*(void *)(a1 + 8) + 480)
                    }
                                                                             + 192))(*(void *)(a1 + 96), *(void *)(a1 + 104), 0, 0);
                    if (MessageWithText > -1 && v21 == 6) {
                      int MessageWithText = -2147473401;
                    }
                    ssft_hlp_Unlock(a1, 1);
                  }
                  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ProcessText2SpeechCooperatively : End", v23, v24, v25, v42);
                  return ssft_MapTtsegErrToAPI(MessageWithText);
                }
              }
              else
              {
                int v27 = (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 8) + 480) + 128))(*(void *)(a1 + 96), *(void *)(a1 + 104));
                if (v27 < 0) {
                  goto LABEL_48;
                }
              }
            }
            int v38 = ssft_hlp_SetStateInterrupted(a1);
LABEL_45:
            int MessageWithText = v38;
            goto LABEL_46;
          }
          if (!a3 && v21 == 6) {
            goto LABEL_17;
          }
        }
        else if (!a3)
        {
          goto LABEL_17;
        }
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18032, "%s%s", v16, v17, v18, v19, "function");
        int MessageWithText = -2147475439;
        goto LABEL_17;
      }
      log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%s%s%x", v16, v17, v18, v19, "function");
    }
    return ssft_MapTtsegErrToAPI(MessageWithText);
  }
  return result;
}

uint64_t ssft_hlp_PipelineName(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v14);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (!a2)
  {
    int v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    memset(v15, 0, sizeof(v15));
    __strcpy_chk();
    __strcpy_chk();
    int v7 = *(unsigned __int16 *)(a3 + 96);
    if (v7 == 11)
    {
      int v8 = 11025;
    }
    else if (v7 == 22)
    {
      int v8 = 22050;
    }
    else
    {
      int v8 = 1000 * v7;
    }
    DWORD2(v16) = v8;
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    DWORD1(v23) = 7168880;
    uint64_t inited = (*(uint64_t (**)(void, void, void, void, _OWORD *))(*(void *)(*(void *)(a1 + 8)
                                                                                             + 504)
                                                                                 + 96))(*(void *)(*(void *)(a1 + 8) + 512), *(void *)(*(void *)(a1 + 8) + 520), *(void *)(v14 + 24), *(void *)(v14 + 40), v15);
    if ((inited & 0x80000000) == 0)
    {
      __strcpy_chk();
      __strcpy_chk();
      *(_WORD *)(a3 + 96) = DWORD2(v16) / 0x3E8;
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      goto LABEL_10;
    }
    return inited;
  }
LABEL_10:
  LH_utoa(*(unsigned __int16 *)(a3 + 96), (char *)v15, 0xAu);
  strcpy((char *)(a3 + 190), "pipeline/");
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  int v9 = *(unsigned __int8 *)(a3 + 98);
  if (*(unsigned char *)(a3 + 98)
    && (v9 != 102 && v9 != 70
     || (*(unsigned __int8 *)(a3 + 99) | 0x20) != 0x75
     || (*(unsigned __int8 *)(a3 + 100) | 0x20) != 0x6C
     || (*(unsigned __int8 *)(a3 + 101) | 0x20) != 0x6C
     || *(unsigned char *)(a3 + 102)))
  {
    __strcat_chk();
    __strcat_chk();
    if (*(unsigned char *)(a3 + 162) && strcmp((const char *)(a3 + 162), "0.0.0")) {
      __strcat_chk();
    }
    __strcat_chk();
  }
  int v11 = *(_DWORD *)(a3 + 320);
  if (v11 != 2)
  {
    if (v11 == 1) {
      goto LABEL_26;
    }
    if (v11) {
      return 2147491841;
    }
  }
  __strcat_chk();
  __strcat_chk();
LABEL_26:
  __strcat_chk();
  uint64_t v10 = brk_TagQueryEx(*(void *)(v14 + 24), a3 + 190, (uint64_t)"BROKERSTRING", 1, (uint64_t)&v13);
  if ((v10 & 0x80000000) == 0) {
    brk_TagRelease(*(void *)(v14 + 24), v13);
  }
  return v10;
}

uint64_t ssft_hlp_SetStateInterrupted(uint64_t a1)
{
  uint64_t v6 = critsec_Enter(*(void **)(a1 + 80));
  if ((v6 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v2, v3, v4, v5, "lhError");
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 88);
    if (v7 > 6)
    {
      uint64_t v6 = 2147491857;
    }
    else
    {
      int v8 = 1 << v7;
      if ((v8 & 7) != 0)
      {
        uint64_t v6 = 2147491857;
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18032, 0, v2, v3, v4, v5, v10);
      }
      else if ((v8 & 0x18) != 0)
      {
        *(_DWORD *)(a1 + 88) = 6;
      }
    }
    critsec_Leave(*(void **)(a1 + 80));
  }
  return v6;
}

uint64_t ve_ttsSetParamList(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2147483656;
  uint64_t v58 = 0;
  __int16 v57 = 0;
  uint64_t v56 = 0;
  int v55 = 0;
  if (a2 != 1750024778) {
    return v8;
  }
  if (!a1) {
    return v8;
  }
  memset(__dst, 0, 324);
  if (*(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  LODWORD(v10) = a4;
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsSetParamList : Begin", a6, a7, a8, v51);
  if (!a3) {
    return 2147483654;
  }
  int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v58);
  if (inited < 0) {
    return ssft_MapTtsegErrToAPI(inited);
  }
  memcpy(__dst, (const void *)(a1 + 120), 0x144uLL);
  int v17 = *(_DWORD *)(a1 + 112);
  int v18 = *(_DWORD *)(a1 + 116);
  if ((~v17 & 0xC) != 0 && (v10 > 1 || *a3 != 20)) {
    goto LABEL_96;
  }
  if (!BYTE2(__dst[47]))
  {
    if (v10)
    {
      uint64_t v44 = v10;
      unsigned int v45 = a3;
      while (1)
      {
        int v46 = *v45;
        v45 += 33;
        if ((v46 - 1) < 4) {
          break;
        }
        if (!--v44) {
          goto LABEL_96;
        }
      }
      int v19 = 1;
      goto LABEL_11;
    }
LABEL_96:
    int inited = -2147475439;
    log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18019, "%s%x", v13, v14, v15, v16, "lhError");
    goto LABEL_141;
  }
  int v19 = 0;
  if (!v10)
  {
    LODWORD(v25) = 0;
    HIDWORD(v53) = 0;
    int v43 = 0;
LABEL_99:
    if (v19)
    {
      if (v10) {
        BYTE2(__dst[24]) = 0;
      }
      if (!v43) {
        BYTE2(__dst[40]) = 0;
      }
      int inited = ssft_hlp_PipelineName(a1, 0, (uint64_t)__dst);
      if (inited < 0)
      {
        if (!(LOBYTE(__dst[0]) | LOBYTE(__dst[16]))) {
          goto LABEL_113;
        }
        if (!HIDWORD(v53)) {
          LOWORD(__dst[24]) = 0;
        }
        BYTE2(__dst[24]) = 0;
        if (!v10) {
          BYTE2(__dst[32]) = 0;
        }
        if (!v43) {
          BYTE2(__dst[40]) = 0;
        }
        int inited = ssft_hlp_PipelineName(a1, 0, (uint64_t)__dst);
        if (inited < 0)
        {
LABEL_113:
          log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18020, "%s%x", v47, v14, v15, v16, "lhError");
          goto LABEL_138;
        }
      }
    }
    else if (inited < 0)
    {
      goto LABEL_138;
    }
    if (((*(_DWORD *)(a1 + 112) >> 2) & (*(_DWORD *)(a1 + 112) << 28 >> 31)) != ((v17 & 0xC) == 12))
    {
      if ((v17 & 0xC) == 0xC)
      {
LABEL_121:
        *(_DWORD *)(a1 + 440) = 0;
        __dst[80] = 0;
        int inited = (*(uint64_t (**)(void, void, char *, void))(*(void *)(*(void *)(a1 + 8) + 480)
                                                                           + 192))(*(void *)(a1 + 96), *(void *)(a1 + 104), (char *)&__dst[47] + 2, 0);
        if ((inited & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 112) = v17;
          *(_DWORD *)(a1 + 116) = v18;
          goto LABEL_124;
        }
LABEL_126:
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18022, "%s%x", v48, v14, v15, v16, "lhError");
        goto LABEL_138;
      }
      int inited = (*(uint64_t (**)(void, void, void, void))(*(void *)(*(void *)(a1 + 8) + 480)
                                                                         + 192))(*(void *)(a1 + 96), *(void *)(a1 + 104), 0, 0);
      if (inited < 0) {
        goto LABEL_126;
      }
    }
    if (v19 != 1 || (v17 & 8) == 0 || (v17 & 4) == 0)
    {
      *(_DWORD *)(a1 + 112) = v17;
      *(_DWORD *)(a1 + 116) = v18;
      if (!v19) {
        goto LABEL_138;
      }
LABEL_124:
      memcpy((void *)(a1 + 120), __dst, 0x144uLL);
      if (!v25) {
        goto LABEL_141;
      }
      goto LABEL_139;
    }
    goto LABEL_121;
  }
LABEL_11:
  uint64_t v10 = v10;
  uint64_t v20 = v10;
  long long v21 = a3;
  while (1)
  {
    int v23 = *v21;
    v21 += 33;
    int v22 = v23;
    if ((v23 - 8) >= 4 && v22 != 24) {
      break;
    }
    if (!--v20)
    {
      uint64_t v25 = 0;
      goto LABEL_19;
    }
  }
  int v49 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsSetParamList", 2, &v55);
  int inited = v49;
  if (v49 < 0)
  {
    int v55 = 0;
    goto LABEL_139;
  }
  uint64_t v25 = 1;
LABEL_19:
  int v54 = 0;
  uint64_t v53 = 0;
  int v26 = (const char *)(a3 + 1);
  while (1)
  {
    switch(*((_DWORD *)v26 - 1))
    {
      case 1:
        ssft_loc_strncpy(v26, (char *)__dst, 64);
        __int16 v57 = 0;
        if (strlen((const char *)__dst) == 3
          && (ssft_loc_ConvertToLanguageTLW(*(void *)(a1 + 32), &v56, &v57, (char *)__dst) & 0x80000000) == 0)
        {
          __strcpy_chk();
          heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)v56);
          uint64_t v56 = 0;
        }
        goto LABEL_25;
      case 2:
        ssft_loc_strncpy(v26, (char *)&__dst[16], 32);
LABEL_25:
        int v19 = 1;
        goto LABEL_88;
      case 3:
        ssft_loc_strncpy(v26, (char *)&__dst[32] + 2, 32);
        int v19 = 1;
        int v54 = 1;
        goto LABEL_88;
      case 4:
        unsigned int v27 = *(unsigned __int16 *)v26;
        if (v27 > 0xF)
        {
          if (v27 != 16 && v27 != 22 && v27 != 48) {
            goto LABEL_145;
          }
          goto LABEL_81;
        }
        if (v27 == 8 || v27 == 11)
        {
LABEL_81:
          LOWORD(__dst[24]) = v27;
          int v19 = 1;
          HIDWORD(v53) = 1;
          goto LABEL_88;
        }
LABEL_145:
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18013, "%s%u", v13, v14, v15, v16, "frequency");
        goto LABEL_146;
      case 5:
        ssft_loc_strncpy(v26, v59, 128);
        uint64_t v28 = *(void *)(v58 + 40);
        int v29 = v59;
        uint64_t v30 = "extraesclang";
        goto LABEL_78;
      case 6:
        ssft_loc_strncpy(v26, v59, 128);
        uint64_t v28 = *(void *)(v58 + 40);
        int v29 = v59;
        uint64_t v30 = "extraesctn";
        goto LABEL_78;
      case 7:
        uint64_t v31 = v25;
        int v32 = *(unsigned __int16 *)v26;
        uint64_t v33 = "text/plain;charset=utf-16";
        if (v32 != 1) {
          uint64_t v33 = 0;
        }
        if (v32 == 2) {
          int v34 = "text/plain;charset=utf-8";
        }
        else {
          int v34 = (char *)v33;
        }
        if (v34)
        {
          int inited = paramc_ParamSetStrPermanent(*(void *)(v58 + 40), (uint64_t)"inputmimetype", v34);
          SetSavedMimeTypeforPlainText(a1, v34);
          uint64_t v25 = v31;
          goto LABEL_88;
        }
        int inited = -2147475441;
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18017, "%s%u", v13, v14, v15, v16, "typeOfChar");
        if (!v31) {
          goto LABEL_141;
        }
LABEL_139:
        if (v55) {
          ssft_hlp_Unlock(a1, v55);
        }
LABEL_141:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsSetParamList : End", v14, v15, v16, v52);
        return ssft_MapTtsegErrToAPI(inited);
      case 8:
        int v35 = paramc_ParamSetUIntPermanent(*(void *)(v58 + 40), (uint64_t)"volume", *(unsigned __int16 *)v26);
        if (v35 < 0) {
          goto LABEL_130;
        }
        uint64_t v36 = *(void *)(v58 + 40);
        unsigned int v37 = *(unsigned __int16 *)v26;
        int v38 = "audioinsertervolume";
        goto LABEL_86;
      case 9:
        int v35 = paramc_ParamSetUIntPermanent(*(void *)(v58 + 40), (uint64_t)"rate", *(unsigned __int16 *)v26);
        if (v35 < 0)
        {
LABEL_130:
          int inited = v35;
          goto LABEL_137;
        }
        uint64_t v36 = *(void *)(v58 + 40);
        unsigned int v37 = *(unsigned __int16 *)v26;
        int v38 = "audioinserterrate";
        goto LABEL_86;
      case 0xA:
        uint64_t v36 = *(void *)(v58 + 40);
        unsigned int v37 = *(unsigned __int16 *)v26;
        int v38 = "pitch";
        goto LABEL_86;
      case 0xB:
        int inited = paramc_ParamSetUIntPermanent(*(void *)(v58 + 40), (uint64_t)"waitfactor", *(unsigned __int16 *)v26);
        paramc_ParamSetUIntPermanent(*(void *)(v58 + 40), (uint64_t)"waitfactorsetbyapi", 1u);
        goto LABEL_88;
      case 0xC:
        uint64_t v36 = *(void *)(v58 + 40);
        unsigned int v37 = *(unsigned __int16 *)v26;
        int v38 = "readmode";
        goto LABEL_86;
      case 0xD:
        int v18 = *(unsigned __int16 *)v26;
        if ((v18 - 1) < 2) {
          goto LABEL_88;
        }
        int inited = -2147475441;
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18016, "%s%u", v13, v14, v15, v16, "textMode");
        goto LABEL_138;
      case 0xE:
        unsigned int v37 = *(unsigned __int16 *)v26;
        if (v37 - 2501 < 0xFFFFF654)
        {
          int inited = -2147475441;
LABEL_137:
          log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18019, "%s%d%s%x", v13, v14, v15, v16, "parameterID");
LABEL_138:
          if (!v25) {
            goto LABEL_141;
          }
          goto LABEL_139;
        }
        uint64_t v36 = *(void *)(v58 + 40);
        int v38 = "maxinputlength";
LABEL_86:
        int v42 = paramc_ParamSetUIntPermanent(v36, (uint64_t)v38, v37);
LABEL_87:
        int inited = v42;
LABEL_88:
        if (inited < 0) {
          goto LABEL_137;
        }
        v26 += 132;
        if (!--v10)
        {
          int v43 = v53;
          LODWORD(v10) = v54;
          goto LABEL_99;
        }
        break;
      case 0xF:
        if (*(_WORD *)v26 == 1)
        {
          uint64_t v28 = *(void *)(v58 + 40);
          uint64_t v30 = "lidscope";
          int v29 = "user-defined";
        }
        else
        {
          if (*(_WORD *)v26) {
            goto LABEL_131;
          }
          uint64_t v28 = *(void *)(v58 + 40);
          uint64_t v30 = "lidscope";
          int v29 = "none";
        }
        goto LABEL_78;
      case 0x10:
        if (*(_WORD *)v26 == 1)
        {
          uint64_t v28 = *(void *)(v58 + 40);
          uint64_t v30 = "lidvoiceswitch";
          int v29 = "yes";
        }
        else
        {
          if (*(_WORD *)v26) {
            goto LABEL_131;
          }
          uint64_t v28 = *(void *)(v58 + 40);
          uint64_t v30 = "lidvoiceswitch";
          int v29 = "no";
        }
        goto LABEL_78;
      case 0x11:
        if (*(_WORD *)v26 == 1)
        {
          uint64_t v28 = *(void *)(v58 + 40);
          uint64_t v30 = "lidmode";
          int v29 = "forced-choice";
        }
        else
        {
          if (*(_WORD *)v26)
          {
LABEL_131:
            int inited = -2147475441;
            if (!v25) {
              goto LABEL_141;
            }
            goto LABEL_139;
          }
          uint64_t v28 = *(void *)(v58 + 40);
          uint64_t v30 = "lidmode";
          int v29 = "memory-bias";
        }
LABEL_78:
        int v42 = paramc_ParamSetStrPermanent(v28, (uint64_t)v30, v29);
        goto LABEL_87;
      case 0x12:
        ssft_loc_strncpy(v26, v59, 128);
        uint64_t v28 = *(void *)(v58 + 40);
        int v29 = v59;
        uint64_t v30 = "lidlanguages";
        goto LABEL_78;
      case 0x13:
        int v39 = *(unsigned __int16 *)v26;
        if (v39 == 10007)
        {
          uint64_t v36 = *(void *)(v58 + 40);
          int v38 = "markermode";
          unsigned int v37 = -1;
        }
        else if (v39 == 1)
        {
          uint64_t v36 = *(void *)(v58 + 40);
          int v38 = "markermode";
          unsigned int v37 = 1199;
        }
        else
        {
          if (*(_WORD *)v26)
          {
            log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18014, "%s%u", v13, v14, v15, v16, "markerMode");
LABEL_146:
            int inited = -2147475449;
            if (v25) {
              goto LABEL_139;
            }
            goto LABEL_141;
          }
          uint64_t v36 = *(void *)(v58 + 40);
          int v38 = "markermode";
          unsigned int v37 = 0;
        }
        goto LABEL_86;
      case 0x14:
        int v17 = *(unsigned __int16 *)v26;
        if (v17 == 12 || v17 == 3) {
          goto LABEL_88;
        }
        int inited = -2147475441;
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18015, "%s%x", v13, v14, v15, v16, "initMode");
        goto LABEL_138;
      case 0x15:
        if (*v26) {
          uint64_t v41 = v26;
        }
        else {
          uint64_t v41 = "0.0.0";
        }
        ssft_loc_strncpy(v41, (char *)&__dst[40] + 2, 12);
        int v19 = 1;
        int v54 = 1;
        LODWORD(v53) = 1;
        goto LABEL_88;
      case 0x16:
        uint64_t v36 = *(void *)(v58 + 40);
        unsigned int v37 = *(unsigned __int16 *)v26;
        int v38 = "disablefinalsentencesilence";
        goto LABEL_86;
      case 0x18:
        uint64_t v36 = *(void *)(v58 + 40);
        unsigned int v37 = *(unsigned __int16 *)v26;
        int v38 = "timbre";
        goto LABEL_86;
      default:
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18018, "%s%d", v13, v14, v15, v16, "parameterID");
        goto LABEL_146;
    }
  }
}

uint64_t ssft_loc_strncpy(const char *a1, char *a2, __int16 a3)
{
  if (a1)
  {
    if (strlen(a1) <= (unsigned __int16)(a3 - 1))
    {
      strcpy(a2, a1);
      return 0;
    }
    else
    {
      *a2 = 0;
      return 2147483657;
    }
  }
  else
  {
    uint64_t result = 2147483654;
    *a2 = 0;
  }
  return result;
}

uint64_t ssft_loc_ConvertToLanguageTLW(uint64_t a1, char **a2, _WORD *a3, char *a4)
{
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  uint64_t result = 2147483654;
  if (!a2) {
    return result;
  }
  if (!a3) {
    return result;
  }
  uint64_t result = brk_ComponentTableIteratorOpen(*(void *)(a1 + 24), (uint64_t)"pipeline/*", (uint64_t)&v24);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if ((brk_ComponentTableIteratorNext(v24) & 0x80000000) != 0)
  {
LABEL_32:
    uint64_t v13 = 2147483668;
    goto LABEL_33;
  }
  int v19 = a3;
  while (1)
  {
    if ((brk_TagIteratorOpen(*(void *)(a1 + 24), v23, "PARAMETERS/*", 1, &v22) & 0x80000000) != 0) {
      goto LABEL_31;
    }
    uint64_t v20 = 0;
    __s1 = 0;
    if ((brk_TagIteratorNext(v22, (uint64_t)&__s1, (uint64_t)&v20) & 0x80000000) != 0)
    {
      int v11 = 0;
      uint64_t v10 = 0;
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      int v11 = 0;
      do
      {
        uint64_t v12 = __s1;
        if (__s1)
        {
          if (!strcmp(__s1, "language"))
          {
            uint64_t v10 = v20;
          }
          else if (!strcmp(v12, "langcode"))
          {
            int v9 = v20;
          }
          else if (!strcmp(v12, "langid"))
          {
            int v11 = (unsigned __int16)LH_atou(v20);
          }
        }
      }
      while ((brk_TagIteratorNext(v22, (uint64_t)&__s1, (uint64_t)&v20) & 0x80000000) == 0);
    }
    brk_TagIteratorClose(v22);
    uint64_t v22 = 0;
    if (!v10 || !v9) {
      goto LABEL_31;
    }
    if (!v11) {
      int v11 = (unsigned __int16)LH_atou(v10);
    }
    if (*a2)
    {
      if (!LH_stricmp(v10, *a2))
      {
        uint64_t v14 = a4;
        uint64_t v15 = v9;
LABEL_35:
        strcpy(v14, v15);
        uint64_t v13 = 0;
        *int v19 = v11;
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    if (!*v19 && *a4) {
      break;
    }
    if (v11 == (unsigned __int16)*v19)
    {
      strcpy(a4, v9);
      int v16 = strlen(v10);
      int v17 = (char *)heap_Alloc(*(void *)(a1 + 8), (v16 + 1));
      *a2 = v17;
      uint64_t v13 = 2147483658;
      if (v17)
      {
        strcpy(v17, v10);
        uint64_t v13 = 0;
      }
      goto LABEL_33;
    }
LABEL_31:
    if ((brk_ComponentTableIteratorNext(v24) & 0x80000000) != 0) {
      goto LABEL_32;
    }
  }
  if (LH_stricmp(v9, a4)) {
    goto LABEL_31;
  }
  int v18 = strlen(v10);
  uint64_t v14 = (char *)heap_Alloc(*(void *)(a1 + 8), (v18 + 1));
  *a2 = v14;
  uint64_t v13 = 2147483658;
  if (v14)
  {
    uint64_t v15 = v10;
    goto LABEL_35;
  }
LABEL_33:
  brk_ComponentTableIteratorClose(v24);
  return v13;
}

uint64_t ve_ttsGetParamList(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  __s1 = 0;
  uint64_t v40 = 0;
  BOOL v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsGetParamList : Begin", a6, a7, a8, v37);
  if (!a3) {
    return 2147483654;
  }
  int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v40);
  if (inited < 0) {
    return ssft_MapTtsegErrToAPI(inited);
  }
  if (!a4) {
    goto LABEL_65;
  }
  unint64_t v18 = a4;
  int v19 = (char *)(a3 + 4);
  unint64_t v20 = 1;
  while (2)
  {
    switch(*((_DWORD *)v19 - 1))
    {
      case 1:
        long long v21 = (char *)(a1 + 120);
        goto LABEL_48;
      case 2:
        long long v21 = (char *)(a1 + 184);
        goto LABEL_48;
      case 3:
        long long v21 = (char *)(a1 + 250);
        goto LABEL_48;
      case 4:
        LOWORD(v22) = *(_WORD *)(a1 + 216);
        goto LABEL_53;
      case 5:
        uint64_t v23 = *(void *)(v40 + 40);
        uint64_t v24 = "extraesclang";
        goto LABEL_46;
      case 6:
        uint64_t v23 = *(void *)(v40 + 40);
        uint64_t v24 = "extraesctn";
        goto LABEL_46;
      case 7:
        int inited = paramc_ParamGetStr(*(void *)(v40 + 40), (uint64_t)"inputmimetype", &__s1);
        if (inited < 0) {
          goto LABEL_65;
        }
        int v41 = 0;
        if (TextMime2ve(__s1, 0, &v41, 0)) {
          goto LABEL_52;
        }
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18023, "%s%s", v13, v14, v15, v16, "typeOfChar");
        int inited = -2147483641;
        goto LABEL_65;
      case 8:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "volume";
        goto LABEL_51;
      case 9:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "rate";
        goto LABEL_51;
      case 0xA:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "pitch";
        goto LABEL_51;
      case 0xB:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "waitfactor";
        goto LABEL_51;
      case 0xC:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "readmode";
        goto LABEL_51;
      case 0xD:
        int v22 = *(_DWORD *)(a1 + 116);
        goto LABEL_53;
      case 0xE:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "maxinputlength";
        goto LABEL_51;
      case 0xF:
        int inited = paramc_ParamGetStr(*(void *)(v40 + 40), (uint64_t)"lidscope", &__s1);
        if (inited < 0) {
          goto LABEL_65;
        }
        unsigned int v27 = __s1;
        if (!strcmp(__s1, "none")) {
          goto LABEL_59;
        }
        uint64_t v28 = v27;
        int v29 = "user-defined";
        goto LABEL_36;
      case 0x10:
        int inited = paramc_ParamGetStr(*(void *)(v40 + 40), (uint64_t)"lidvoiceswitch", &__s1);
        if (inited < 0) {
          goto LABEL_65;
        }
        uint64_t v30 = __s1;
        if (!strcmp(__s1, "no")) {
          goto LABEL_59;
        }
        uint64_t v28 = v30;
        int v29 = "yes";
        goto LABEL_36;
      case 0x11:
        int inited = paramc_ParamGetStr(*(void *)(v40 + 40), (uint64_t)"lidmode", &__s1);
        if (inited < 0) {
          goto LABEL_65;
        }
        uint64_t v31 = __s1;
        if (!strcmp(__s1, "memory-bias")) {
          goto LABEL_59;
        }
        uint64_t v28 = v31;
        int v29 = "forced-choice";
LABEL_36:
        if (strcmp(v28, v29)) {
          goto LABEL_64;
        }
        goto LABEL_40;
      case 0x13:
        uint64_t v32 = *(void *)(v40 + 40);
        int v41 = 0;
        int inited = paramc_ParamGetUInt(v32, (uint64_t)"markermode", (unsigned int *)&v41);
        if (inited < 0)
        {
          if (*(_WORD *)v19)
          {
LABEL_40:
            *(_WORD *)int v19 = 1;
            if (inited < 0) {
              goto LABEL_65;
            }
            goto LABEL_55;
          }
        }
        else
        {
          int v33 = (unsigned __int16)v41;
          *(_WORD *)int v19 = v41;
          if (v33) {
            goto LABEL_40;
          }
        }
LABEL_59:
        *(_WORD *)int v19 = 0;
        if (inited < 0) {
          goto LABEL_65;
        }
        goto LABEL_55;
      case 0x14:
        int v22 = *(_DWORD *)(a1 + 112);
        goto LABEL_53;
      case 0x15:
        long long v21 = (char *)(a1 + 282);
        goto LABEL_48;
      case 0x16:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "disablefinalsentencesilence";
        goto LABEL_51;
      case 0x17:
        uint64_t v23 = *(void *)(v40 + 40);
        uint64_t v24 = "noclmset";
LABEL_46:
        int Str = paramc_ParamGetStr(v23, (uint64_t)v24, &__s1);
        if ((Str & 0x80000000) == 0)
        {
          long long v21 = __s1;
LABEL_48:
          int inited = ssft_loc_strncpy(v21, v19, 128);
          if (inited < 0) {
            goto LABEL_65;
          }
LABEL_55:
          v19 += 132;
          if (v20++ >= v18) {
            goto LABEL_65;
          }
          continue;
        }
        int inited = Str;
LABEL_65:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsGetParamList : End", v14, v15, v16, v38);
        return ssft_MapTtsegErrToAPI(inited);
      case 0x18:
        uint64_t v25 = *(void *)(v40 + 40);
        int v41 = 0;
        int v26 = "timbre";
LABEL_51:
        int inited = paramc_ParamGetUInt(v25, (uint64_t)v26, (unsigned int *)&v41);
        if ((inited & 0x80000000) == 0)
        {
LABEL_52:
          LOWORD(v22) = v41;
LABEL_53:
          *(_WORD *)int v19 = v22;
        }
        if ((inited & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_65;
      default:
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18018, "%s%d", v13, v14, v15, v16, "parameterID");
LABEL_64:
        int inited = -2147483641;
        goto LABEL_65;
    }
  }
}

uint64_t ve_ttsResourceLoad(uint64_t a1, int a2, const char *a3, uint64_t a4, char *a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2147483656;
  int v39 = 0;
  if (a2 != 1750024778 || a1 == 0) {
    return v8;
  }
  if (*(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceLoad : Begin", (uint64_t)a6, a7, a8, v37);
  uint64_t v8 = 2147483654;
  if (!a3 || !a5 || !a6) {
    return v8;
  }
  if (!a4) {
    return 2147483655;
  }
  int v15 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsResourceLoad", 2, &v39);
  if ((v15 & 0x80000000) == 0)
  {
    uint64_t v8 = 2147491850;
    uint64_t v16 = heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), 1, 16);
    if (v16)
    {
      int v17 = (uint64_t *)v16;
      if (!strcmp(a3, "application/x-vocalizer-resources"))
      {
        bzero(v40, 0x810uLL);
        int v23 = (*(uint64_t (**)(void, void, void, char *, uint64_t, unsigned char *))(*(void *)(*(void *)(a1 + 8) + 480)
                                                                                          + 240))(*(void *)(a1 + 96), *(void *)(a1 + 104), 0, a5, a4, v40);
        if (v23 < 0)
        {
LABEL_42:
          if (v23 < 0)
          {
            if (*v17) {
              heap_Free(*(void **)(*(void *)(a1 + 32) + 8), *v17);
            }
            heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)v17);
            int v17 = 0;
          }
          *a6 = v17;
          ssft_hlp_Unlock(a1, v39);
          log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceLoad : End", v34, v35, v36, v38);
          return ssft_MapTtsegErrToAPI(v23);
        }
        uint64_t v25 = heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), v41, 16);
        *int v17 = v25;
        if (v25)
        {
          if (v41)
          {
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            while (1)
            {
              uint64_t v28 = (const char **)&v40[8 * v27];
              size_t v29 = strlen(v28[2]);
              uint64_t v30 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), v29 + 15, 1);
              if (!v30)
              {
                heap_Free(*(void **)(*(void *)(a1 + 32) + 8), *v17);
                goto LABEL_37;
              }
              uint64_t v31 = (uint64_t)v30;
              uint64_t v32 = strcat(v30, v28[2]);
              strcpy((char *)(v31 + strlen(v32)), ";loader=broker");
              int v23 = (*(uint64_t (**)(void, void, uint64_t, const char *, void, void, uint64_t))(*(void *)(*(void *)(a1 + 8) + 480) + 72))(*(void *)(a1 + 96), *(void *)(a1 + 104), v31, v28[130], 0, 0, *v17 + v26);
              heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v31);
              if (v23 < 0) {
                break;
              }
              ++v27;
              v26 += 16;
              if (v27 >= v41) {
                goto LABEL_41;
              }
            }
            if (v27)
            {
              uint64_t v33 = 0;
              do
              {
                (*(void (**)(void, void, void, void))(*(void *)(*(void *)(a1 + 8) + 480) + 80))(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(*v17 + v33), *(void *)(*v17 + v33 + 8));
                v33 += 16;
                --v27;
              }
              while (v27);
            }
          }
LABEL_41:
          *((_DWORD *)v17 + 2) = v41;
          (*(void (**)(void, void, unsigned char *))(*(void *)(*(void *)(a1 + 8) + 480) + 248))(*(void *)(a1 + 96), *(void *)(a1 + 104), v40);
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v18 = heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), 1, 16);
        *int v17 = v18;
        if (v18)
        {
          int v19 = IsThisUrlOrRealPath(a5, 0);
          if (v19) {
            unint64_t v20 = a5;
          }
          else {
            unint64_t v20 = 0;
          }
          if (v19) {
            long long v21 = 0;
          }
          else {
            long long v21 = a5;
          }
          if (v19) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = a4;
          }
          int v23 = (*(uint64_t (**)(void, void, const char *, char *, char *, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 8) + 480) + 72))(*(void *)(a1 + 96), *(void *)(a1 + 104), a3, v20, v21, v22, *v17);
          *((_DWORD *)v17 + 2) = 0;
          goto LABEL_42;
        }
      }
LABEL_37:
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)v17);
    }
    return v8;
  }
  return ssft_MapTtsegErrToAPI(v15);
}

uint64_t ve_ttsResourceUnload(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v20 = 0;
  BOOL v8 = a2 != 1750024778 || a1 == 0;
  if (v8 || *(_DWORD *)a1 != 1934574154) {
    return 2147483656;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceUnload : Begin", a6, a7, a8, v18);
  int v11 = ssft_hlp_LockFromIdle(a1, (uint64_t)"ve_ttsResourceUnload", 2, &v20);
  if ((v11 & 0x80000000) == 0)
  {
    if (a3)
    {
      if (*((_DWORD *)a3 + 2))
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          int v11 = (*(uint64_t (**)(void, void, void, void))(*(void *)(*(void *)(a1 + 8) + 480)
                                                                          + 80))(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(*a3 + v12), *(void *)(*a3 + v12 + 8));
          if (v11 < 0) {
            break;
          }
          ++v13;
          v12 += 16;
        }
        while (v13 < *((unsigned int *)a3 + 2));
      }
      else
      {
        int v11 = (*(uint64_t (**)(void, void, void, void))(*(void *)(*(void *)(a1 + 8) + 480) + 80))(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)*a3, *(void *)(*a3 + 8));
      }
      if (*a3) {
        heap_Free(*(void **)(*(void *)(a1 + 32) + 8), *a3);
      }
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)a3);
    }
    ssft_hlp_Unlock(a1, v20);
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsResourceUnload : End", v15, v16, v17, v19);
  }
  return ssft_MapTtsegErrToAPI(v11);
}

uint64_t ve_ttsStop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  BOOL v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  int v23 = 0;
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsStop : Begin", a6, a7, a8, v21);
  int State = ssft_hlp_GetState(a1, &v23);
  if (State < 0) {
    goto LABEL_21;
  }
  if ((v23 - 5) < 0xFFFFFFFE) {
    return 2147483665;
  }
  int State = ssft_hlp_PcmNotify(a1, 32);
  if (State < 0)
  {
LABEL_21:
    int v20 = State;
  }
  else
  {
    int v13 = (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 8) + 480) + 128))(*(void *)(a1 + 96), *(void *)(a1 + 104));
    if ((v13 & 0x1FFF) == 0x11) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    int v15 = ssft_hlp_SetStateInterrupted(a1);
    if (v14) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v15 < 0;
    }
    if (v19) {
      int v20 = v15;
    }
    else {
      int v20 = v14;
    }
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"ve_ttsStop : End", v16, v17, v18, v22);
  }
  return ssft_MapTtsegErrToAPI(v20);
}

uint64_t ssft_hlp_PcmNotify(uint64_t a1, int a2)
{
  v5[0] = a2;
  v5[1] = 0;
  uint64_t v6 = 0;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *))(a1 + 504);
  if (v2 && (int v3 = v2(a1, 1750024778, *(void *)(a1 + 496), v5)) != 0) {
    return v3 & 0x1FFF | 0x80002000;
  }
  else {
    return 0;
  }
}

uint64_t ve_ttsPause(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  BOOL v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  int v19 = 0;
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Pause : Begin", a6, a7, a8, v17);
  int State = ssft_hlp_GetState(a1, &v19);
  if (State < 0)
  {
    int v13 = State;
  }
  else
  {
    if ((v19 - 5) < 0xFFFFFFFE) {
      return 2147483665;
    }
    int v13 = ssft_hlp_PcmNotify(a1, 64);
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Pause : End", v14, v15, v16, v18);
  }
  return ssft_MapTtsegErrToAPI(v13);
}

uint64_t ve_ttsResume(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  BOOL v9 = a2 != 1750024778 || a1 == 0;
  if (v9 || *(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  int v19 = 0;
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Resume : Begin", a6, a7, a8, v17);
  int State = ssft_hlp_GetState(a1, &v19);
  if (State < 0)
  {
    int v13 = State;
  }
  else
  {
    if ((v19 - 5) < 0xFFFFFFFE) {
      return 2147483665;
    }
    int v13 = ssft_hlp_PcmNotify(a1, 128);
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"Resume : End", v14, v15, v16, v18);
  }
  return ssft_MapTtsegErrToAPI(v13);
}

uint64_t ve_ttsGetLanguageList(uint64_t a1, int a2, char *a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2147483656;
  unsigned int v28 = 0;
  if (a2 == 1749240915 && *(_DWORD *)a1 == 1933790291)
  {
    log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLanguageList : Begin", a6, a7, a8, v26);
    if (a4)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (unsigned __int16)*a4;
      if (a3 && *a4)
      {
        uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 456) + 8), v13, 86);
        if (!v14)
        {
          int v19 = -2147483638;
          goto LABEL_31;
        }
        uint64_t v12 = v14;
        LODWORD(v13) = (unsigned __int16)*a4;
      }
      unsigned int v28 = v13;
      int v18 = (*(uint64_t (**)(void, void, const char *, uint64_t, unsigned int *))(*(void *)(a1 + 504)
                                                                                             + 64))(*(void *)(a1 + 512), *(void *)(a1 + 520), "eng/vocalizerautomotive", v12, &v28);
      int v19 = v18;
      if (v18 < 0)
      {
        __int16 v20 = v28;
        if (!v12) {
          goto LABEL_26;
        }
        if ((v18 & 0x1FFF) != 9 || v28 == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        __int16 v20 = v28;
        if (!v12)
        {
          *a4 = v28;
          goto LABEL_31;
        }
        if (!v28)
        {
          *a4 = 0;
          goto LABEL_27;
        }
      }
      if (*a4)
      {
        unint64_t v22 = 0;
        int v23 = (const char *)v12;
        while (1)
        {
          int v24 = ssft_loc_strncpy(v23, a3, 128);
          if (v24 < 0) {
            break;
          }
          int v24 = ssft_loc_strncpy(v23 + 64, a3 + 128, 4);
          if (v24 < 0) {
            break;
          }
          int v24 = ssft_loc_strncpy(v23 + 72, a3 + 132, 128);
          if (v24 < 0) {
            break;
          }
          ++v22;
          __int16 v20 = v28;
          if (v22 < v28)
          {
            a3 += 260;
            v23 += 86;
            if (v22 < (unsigned __int16)*a4) {
              continue;
            }
          }
          int v19 = 0;
          goto LABEL_26;
        }
        int v19 = v24;
        goto LABEL_31;
      }
LABEL_26:
      *a4 = v20;
      if (!v12)
      {
LABEL_31:
        log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLanguageList : End", v15, v16, v17, v27);
        return ssft_MapTtsegErrToAPI(v19);
      }
LABEL_27:
      heap_Free(*(void **)(*(void *)(a1 + 456) + 8), v12);
      goto LABEL_31;
    }
    return 2147483654;
  }
  return v8;
}

uint64_t ve_ttsGetNtsInfo(uint64_t a1, int a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2147483656;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  __int16 v31 = 0;
  if (a2 != 1749240915) {
    return v8;
  }
  memset(v39, 0, 64);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  memset(v38, 0, 22);
  if (*(_DWORD *)a1 != 1933790291) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetNtsInfo : Begin", a6, a7, a8, v29);
  if (a3)
  {
    unsigned __int16 v12 = strlen(a3) + 1;
    uint64_t v13 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 456) + 8), v12);
    uint64_t v32 = v13;
    if (!v13)
    {
      int v25 = -2147483638;
      goto LABEL_20;
    }
    ssft_loc_strncpy(a3, v13, v12);
  }
  int v17 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(void *)(a1 + 472));
  if (v17 < 0)
  {
    int v25 = v17;
    log_OutPublic(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18024, "%s%x", v18, v19, v20, v21, "lhError");
  }
  else
  {
    long long v37 = 0u;
    memset(v38, 0, 22);
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    int v22 = ssft_loc_ConvertToLanguageTLW(*(void *)(a1 + 456), &v32, &v31, v38);
    if ((v22 & 0x80000000) == 0)
    {
      __strcpy_chk();
      int v23 = (*(uint64_t (**)(void, void, const char *, long long *, char *))(*(void *)(a1 + 504) + 120))(*(void *)(a1 + 512), *(void *)(a1 + 520), "eng/vocalizerautomotive", &v34, v39);
      int v24 = v23 & 0x1FFF;
      if (v23 < 0 || v24 == 20)
      {
        if (v24 == 20) {
          int v26 = -2147483628;
        }
        else {
          int v26 = v23;
        }
        int v27 = ssft_loc_strncpy(&byte_20D5A22AE, a4, 1);
        if (v27 >= 0) {
          int v25 = v26;
        }
        else {
          int v25 = v27;
        }
        goto LABEL_20;
      }
      int v22 = ssft_loc_strncpy(v39, a4, 128);
    }
    int v25 = v22;
  }
LABEL_20:
  if (v33) {
    brk_ObjClose(v33);
  }
  if (v32) {
    heap_Free(*(void **)(*(void *)(a1 + 456) + 8), (uint64_t)v32);
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetNtsInfo : End", v14, v15, v16, v30);
  return ssft_MapTtsegErrToAPI(v25);
}

uint64_t ve_ttsGetClmInfo(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = 2147483656;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  __int16 v31 = 0;
  if (v8 != 1749240915) {
    return v7;
  }
  BOOL v9 = (uint64_t *)v1;
  memset(v40, 0, 448);
  memset(v39, 0, sizeof(v39));
  long long v37 = 0u;
  memset(v38, 0, 22);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  if (*(_DWORD *)v1 != 1933790291) {
    return v7;
  }
  uint64_t v10 = v3;
  int v11 = v2;
  log_OutText(*(void *)(*(void *)(v1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetClmInfo: Begin", v4, v5, v6, v29);
  if (v11)
  {
    unsigned __int16 v12 = strlen(v11) + 1;
    uint64_t v13 = (char *)heap_Alloc(*(void *)(v9[57] + 8), v12);
    uint64_t v32 = v13;
    if (!v13)
    {
      int v25 = -2147483638;
      goto LABEL_20;
    }
    ssft_loc_strncpy(v11, v13, v12);
  }
  int v17 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", v9[59]);
  if (v17 < 0)
  {
    int v25 = v17;
    log_OutPublic(*(void *)(v9[57] + 32), (uint64_t)"VEAPI", 18024, "%s%x", v18, v19, v20, v21, "lhError");
  }
  else
  {
    long long v37 = 0u;
    memset(v38, 0, 22);
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    int v22 = ssft_loc_ConvertToLanguageTLW(v9[57], &v32, &v31, (char *)v38);
    if ((v22 & 0x80000000) == 0)
    {
      __strcpy_chk();
      int v23 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char *))(v9[63] + 128))(v9[64], v9[65], "eng/vocalizerautomotive", &v34, v39);
      int v24 = v23 & 0x1FFF;
      if (v23 < 0 || v24 == 20)
      {
        if (v24 == 20) {
          int v26 = -2147483628;
        }
        else {
          int v26 = v23;
        }
        ssft_loc_strncpy(&byte_20D5A22AE, v10, 1);
        ssft_loc_strncpy(&byte_20D5A22AE, v10 + 128, 1);
        int v27 = ssft_loc_strncpy(&byte_20D5A22AE, v10 + 1152, 1);
        if (v27 >= 0) {
          int v25 = v26;
        }
        else {
          int v25 = v27;
        }
        goto LABEL_20;
      }
      ssft_loc_strncpy(v39, v10, 128);
      ssft_loc_strncpy(v40, v10 + 128, 1024);
      int v22 = ssft_loc_strncpy(v41, v10 + 1152, 1024);
    }
    int v25 = v22;
  }
LABEL_20:
  if (v33) {
    brk_ObjClose(v33);
  }
  if (v32) {
    heap_Free(*(void **)(v9[57] + 8), (uint64_t)v32);
  }
  log_OutText(*(void *)(v9[57] + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetClmInfo : End", v14, v15, v16, v30);
  return ssft_MapTtsegErrToAPI(v25);
}

uint64_t ve_ttsGetVoiceList(uint64_t a1, int a2, const char *a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2147483656;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unsigned int v37 = 0;
  __int16 v36 = 0;
  if (a2 != 1749240915) {
    return v8;
  }
  long long v43 = 0u;
  memset(v44, 0, 22);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  if (*(_DWORD *)a1 != 1933790291) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetVoiceList : Begin", a6, a7, a8, v34);
  if (!a5) {
    return 2147483654;
  }
  if (a3)
  {
    unsigned __int16 v13 = strlen(a3) + 1;
    uint64_t v14 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 456) + 8), v13);
    uint64_t v38 = v14;
    if (!v14) {
      goto LABEL_18;
    }
    ssft_loc_strncpy(a3, v14, v13);
  }
  int v18 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(void *)(a1 + 472));
  if (v18 < 0)
  {
    int v28 = v18;
    log_OutPublic(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18024, "%s%x", v19, v20, v21, v22, "lhError");
    goto LABEL_37;
  }
  long long v43 = 0u;
  memset(v44, 0, 22);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  int v23 = ssft_loc_ConvertToLanguageTLW(*(void *)(a1 + 456), &v38, &v36, (char *)v44);
  if (v23 < 0)
  {
LABEL_36:
    int v28 = v23;
    goto LABEL_37;
  }
  __strcpy_chk();
  uint64_t v24 = 0;
  uint64_t v25 = (unsigned __int16)*a5;
  if (a4 && *a5)
  {
    uint64_t v26 = heap_Calloc(*(void **)(*(void *)(a1 + 456) + 8), v25, 200);
    if (v26)
    {
      uint64_t v24 = v26;
      LODWORD(v25) = (unsigned __int16)*a5;
      goto LABEL_13;
    }
LABEL_18:
    int v28 = -2147483638;
    goto LABEL_37;
  }
LABEL_13:
  unsigned int v37 = v25;
  int v27 = (*(uint64_t (**)(void, void, const char *, long long *, uint64_t, unsigned int *))(*(void *)(a1 + 504) + 72))(*(void *)(a1 + 512), *(void *)(a1 + 520), "eng/vocalizerautomotive", &v40, v24, &v37);
  int v28 = v27;
  if ((v27 & 0x80000000) == 0)
  {
    __int16 v29 = v37;
    if (!v24)
    {
      *a5 = v37;
      goto LABEL_37;
    }
    if (!v37)
    {
      *a5 = 0;
LABEL_35:
      heap_Free(*(void **)(*(void *)(a1 + 456) + 8), v24);
      goto LABEL_37;
    }
LABEL_23:
    if (*a5)
    {
      unint64_t v30 = 0;
      __int16 v31 = (char *)(a4 + 640);
      uint64_t v32 = (const char *)(v24 + 136);
      while (1)
      {
        int v23 = ssft_loc_strncpy(v32 - 136, v31 - 384, 128);
        if (v23 < 0) {
          goto LABEL_36;
        }
        int v23 = ssft_loc_strncpy(v32 - 104, v31 - 512, 128);
        if (v23 < 0) {
          goto LABEL_36;
        }
        int v23 = ssft_loc_strncpy(v32 - 12, v31 - 640, 128);
        if (v23 < 0) {
          goto LABEL_36;
        }
        int v23 = ssft_loc_strncpy(v32 - 40, v31 - 256, 128);
        if (v23 < 0) {
          goto LABEL_36;
        }
        int v23 = ssft_loc_strncpy(v32 - 28, v31 - 128, 128);
        if (v23 < 0) {
          goto LABEL_36;
        }
        int v23 = ssft_loc_strncpy(v32, v31, 128);
        if (v23 < 0) {
          goto LABEL_36;
        }
        ++v30;
        __int16 v29 = v37;
        if (v30 < v37)
        {
          v31 += 768;
          v32 += 200;
          if (v30 < (unsigned __int16)*a5) {
            continue;
          }
        }
        int v28 = 0;
        goto LABEL_34;
      }
    }
    goto LABEL_34;
  }
  __int16 v29 = v37;
  if (v24 && (v27 & 0x1FFF) == 9 && v37) {
    goto LABEL_23;
  }
LABEL_34:
  *a5 = v29;
  if (v24) {
    goto LABEL_35;
  }
LABEL_37:
  if (v39) {
    brk_ObjClose(v39);
  }
  if (v38) {
    heap_Free(*(void **)(*(void *)(a1 + 456) + 8), (uint64_t)v38);
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetVoiceList : End", v15, v16, v17, v35);
  return ssft_MapTtsegErrToAPI(v28);
}

uint64_t ve_ttsGetSpeechDBList(uint64_t a1, int a2, const char *a3, const char *a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v9 = -2147483638;
  long long v40 = 0;
  uint64_t v41 = 0;
  unsigned int v39 = 0;
  __int16 v38 = 0;
  uint64_t result = 2147483656;
  if (a2 != 1749240915) {
    return result;
  }
  long long v45 = 0u;
  memset(v46, 0, 22);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v42 = 0u;
  if (*(_DWORD *)a1 != 1933790291) {
    return result;
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetSpeechDBList : Begin", (uint64_t)a6, a7, a8, v36);
  uint64_t result = 2147483654;
  if (!a4 || !a6) {
    return result;
  }
  if (a3)
  {
    unsigned __int16 v15 = strlen(a3) + 1;
    uint64_t v16 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 456) + 8), v15);
    long long v40 = v16;
    if (!v16)
    {
      uint64_t v21 = 0;
      goto LABEL_36;
    }
    ssft_loc_strncpy(a3, v16, v15);
  }
  unsigned __int16 v20 = strlen(a4) + 1;
  uint64_t v21 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 456) + 8), v20);
  if (v21)
  {
    ssft_loc_strncpy(a4, v21, v20);
    int v22 = brk_ObjOpen((uint64_t)"eng/vocalizerautomotive", *(void *)(a1 + 472));
    if (v22 < 0)
    {
      int v32 = v22;
      log_OutPublic(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 18024, "%s%x", v23, v24, v25, v26, "lhError");
      int v9 = v32;
      goto LABEL_36;
    }
    long long v45 = 0u;
    memset(v46, 0, 22);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    int v27 = ssft_loc_ConvertToLanguageTLW(*(void *)(a1 + 456), &v40, &v38, (char *)v46);
    if (v27 < 0)
    {
LABEL_33:
      int v9 = v27;
      goto LABEL_36;
    }
    __strcpy_chk();
    uint64_t v28 = 0;
    uint64_t v29 = (unsigned __int16)*a6;
    if (!a5 || !*a6)
    {
LABEL_15:
      unsigned int v39 = v29;
      int v31 = (*(uint64_t (**)(void, void, const char *, long long *, char *, uint64_t, unsigned int *))(*(void *)(a1 + 504) + 88))(*(void *)(a1 + 512), *(void *)(a1 + 520), "eng/vocalizerautomotive", &v42, v21, v28, &v39);
      int v9 = v31;
      if (v31 < 0)
      {
        if (!v28 || (v31 & 0x1FFF) != 9)
        {
          *a6 = v39;
          if (!v28) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
      }
      else if (!v28)
      {
        *a6 = v39;
        goto LABEL_36;
      }
      __int16 v33 = v39;
      if (v39 && *a6)
      {
        unint64_t v34 = 0;
        uint64_t v35 = v28 + 96;
        while (1)
        {
          int v27 = ssft_loc_strncpy((const char *)(v35 - 32), (char *)(a5 + 256), 128);
          if (v27 < 0) {
            goto LABEL_33;
          }
          int v27 = ssft_loc_strncpy((const char *)(v35 - 96), (char *)(a5 + 128), 128);
          if (v27 < 0) {
            goto LABEL_33;
          }
          int v27 = ssft_loc_strncpy((const char *)v35, (char *)a5, 128);
          if (v27 < 0) {
            goto LABEL_33;
          }
          int v27 = ssft_loc_strncpy((const char *)(v35 + 44), (char *)(a5 + 384), 128);
          if (v27 < 0) {
            goto LABEL_33;
          }
          *(_WORD *)(a5 + 512) = *(_WORD *)(v35 + 76);
          ++v34;
          __int16 v33 = v39;
          if (v34 < v39)
          {
            a5 += 514;
            v35 += 174;
            if (v34 < (unsigned __int16)*a6) {
              continue;
            }
          }
          int v9 = 0;
          break;
        }
      }
      *a6 = v33;
LABEL_35:
      heap_Free(*(void **)(*(void *)(a1 + 456) + 8), v28);
      goto LABEL_36;
    }
    uint64_t v30 = heap_Calloc(*(void **)(*(void *)(a1 + 456) + 8), v29, 174);
    if (v30)
    {
      uint64_t v28 = v30;
      LODWORD(v29) = (unsigned __int16)*a6;
      goto LABEL_15;
    }
  }
LABEL_36:
  if (v41) {
    brk_ObjClose(v41);
  }
  if (v40) {
    heap_Free(*(void **)(*(void *)(a1 + 456) + 8), (uint64_t)v40);
  }
  if (v21) {
    heap_Free(*(void **)(*(void *)(a1 + 456) + 8), (uint64_t)v21);
  }
  log_OutText(*(void *)(*(void *)(a1 + 456) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetSpeechDBList : End", v17, v18, v19, v37);
  return ssft_MapTtsegErrToAPI(v9);
}

uint64_t ve_ttsGetLipSyncInfo(uint64_t a1, int a2, int a3, int8x8_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v40 = 0;
  uint64_t v8 = 2147483656;
  __int16 v38 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  __s1 = 0;
  if (a2 != 1750024778 || !a1 || *(_DWORD *)a1 != 1934574154) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLipSyncInfo : Begin", a6, a7, a8, v32);
  if (!a4) {
    return 2147483654;
  }
  int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v40);
  if (inited < 0) {
    return ssft_MapTtsegErrToAPI(inited);
  }
  uint64_t v13 = *(void *)(a1 + 584);
  if (!v13)
  {
    int inited = objc_GetObject(*(void *)(v40 + 48), (uint64_t)"PHONMAP", &v35);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v14 = v35;
      uint64_t v13 = *(void *)(v35 + 8);
      *(void *)(a1 + 584) = v13;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(v14 + 16);
      goto LABEL_9;
    }
    return ssft_MapTtsegErrToAPI(inited);
  }
LABEL_9:
  v39[0] = a3;
  v39[1] = 0;
  if (((*(uint64_t (**)(void, void, void, unsigned char *, char **, void))(v13 + 64))(*(void *)(a1 + 592), *(void *)(a1 + 600), 0, v39, &v36, 0) & 0x80000000) == 0)
  {
    __int16 v37 = 1024;
    int inited = (*(uint64_t (**)(void, void, __int16 *, __int16 *, void))(*(void *)(a1 + 584) + 144))(*(void *)(a1 + 592), *(void *)(a1 + 600), &v38, &v37, 0);
    if ((inited & 0x80000000) == 0)
    {
      int inited = (*(uint64_t (**)(void, void, __int16 *, __int16 *, char *))(*(void *)(a1 + 584) + 144))(*(void *)(a1 + 592), *(void *)(a1 + 600), &v38, &v37, v41);
      if ((inited & 0x80000000) == 0)
      {
        if ((paramc_ParamGet(*(void *)(v40 + 40), (uint64_t)"voiceml", &__s1, 0) & 0x80000000) != 0)
        {
          unsigned __int16 v20 = v36;
        }
        else
        {
          int v19 = strcmp(__s1, "yes");
          unsigned __int16 v20 = v36;
          if (a3 != 35 && !v19 && v38 == 1) {
            unsigned __int16 v20 = ++v36;
          }
        }
        int SyncInfo = lipsync_GetSyncInfo(*(_WORD **)(a1 + 608), a3, v20, a4);
        if (SyncInfo < 0)
        {
          int v30 = SyncInfo;
          log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18031, "%s%x", v22, v23, v24, v25, "lhError");
          int inited = v30;
        }
        else
        {
          int v29 = ssft_loc_strncpy(v36, (char *)&a4[1], 8);
          if ((v29 & 0x80000000) == 0) {
            log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 4, 0, (uint64_t)"GetLipSyncInfo : End", v26, v27, v28, v33);
          }
          int inited = v29;
        }
      }
    }
    return ssft_MapTtsegErrToAPI(inited);
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18030, "%s%x", v15, v16, v17, v18, "lhError");
  return 2147483919;
}

uint64_t ve_ttsGetProductVersion(uint64_t a1)
{
  if (!a1) {
    return 2147483654;
  }
  uint64_t result = 0;
  *(_WORD *)a1 = 791;
  *(unsigned char *)(a1 + 2) = 2;
  return result;
}

uint64_t ve_ttsGetAdditionalProductInfo(uint64_t a1)
{
  if (!a1) {
    return 2147483654;
  }
  uint64_t result = 0;
  *(_DWORD *)a1 = 168495080;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

uint64_t ve_ttsGetRsrc(uint64_t a1, int a2, void *a3)
{
  uint64_t result = 2147483656;
  uint64_t v8 = 0;
  BOOL v5 = a2 != 1750024778 || a1 == 0;
  if (!v5 && *(_DWORD *)a1 == 1934574154)
  {
    int inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v8);
    if (inited < 0)
    {
      return ssft_MapTtsegErrToAPI(inited);
    }
    else
    {
      uint64_t result = 0;
      *a3 = v8;
    }
  }
  return result;
}

const char *ve_ttsGetErrorString(int a1)
{
  uint64_t v2 = 0;
  uint64_t result = "Unknown error code";
  while (errStringCodes[v2] != a1)
  {
    v2 += 4;
    if (v2 == 296) {
      return result;
    }
  }
  return *(const char **)&errStringCodes[v2 + 2];
}

uint64_t ssft_LogOutText(uint64_t a1, int a2, uint64_t a3, int a4, char *__format, va_list a6)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 8))
  {
    if (vsnprintf(__str, 0x800uLL, __format, a6) >= 0x7FF) {
      __str[2047] = 0;
    }
    if ((int)a3 <= 1) {
      (*(void (**)(void, uint64_t, char *))(a1 + 8))(*(void *)(a1 + 24), a3, __str);
    }
  }
  return 0;
}

uint64_t ssft_LogOutPublic(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)a1) {
    (*(void (**)(void, uint64_t, void, uint64_t, uint64_t))a1)(*(void *)(a1 + 24), a3, a4, a5, a6);
  }
  return 0;
}

uint64_t ssft_LogOutEvent(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 16);
  if (v2 && (a2 > 0x1A || ((1 << a2) & 0x7E3FCE1) == 0)) {
    v2(*(void *)(a1 + 24));
  }
  return 0;
}

uint64_t ssft_LogGetLogLevel()
{
  return 0;
}

uint64_t ssft_hlp_convertAndCopyInternalMrkRcrdsToApiMrk(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v33 = 0;
  uint64_t v32 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), &v32);
  if ((inited & 0x80000000) == 0)
  {
    if ((paramc_ParamGetUInt(*(void *)(v32 + 40), (uint64_t)"markermode", &v33) & 0x80000000) != 0) {
      unsigned int v33 = 0;
    }
    unsigned int v9 = 0;
    if (a4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      int v11 = (void *)(a3 + 24);
      for (uint64_t i = a4; i; --i)
      {
        uint64_t v13 = v10 + 56 * v9;
        *(_WORD *)(v13 + 40) = 0;
        uint64_t v14 = v13 + 40;
        *(_DWORD *)(v14 + 4) = 0;
        uint64_t v15 = (_DWORD *)(v14 + 4);
        *(void *)(v14 + 8) = 0;
        uint64_t v16 = (void *)(v14 + 8);
        int v17 = *((_DWORD *)v11 - 6);
        if (v17 <= 32)
        {
          if (v17 == 1)
          {
            int v18 = 0;
            int v19 = 2;
            goto LABEL_22;
          }
          if (v17 != 26)
          {
            if (v17 == 29)
            {
              int v18 = 0;
              *uint64_t v16 = *v11;
              int v19 = 8;
              goto LABEL_22;
            }
            goto LABEL_35;
          }
        }
        else
        {
          if (v17 <= 39)
          {
            if (v17 == 33)
            {
              int v18 = 0;
              *(_WORD *)uint64_t v14 = *(_DWORD *)v11;
              int v19 = 4;
              goto LABEL_22;
            }
            if (v17 == 38)
            {
LABEL_10:
              int v18 = 0;
              *uint64_t v16 = *v11;
              int v19 = 0x10000;
LABEL_22:
              uint64_t v20 = v10 + 56 * v9;
              *(_DWORD *)uint64_t v20 = v19;
              uint64_t v22 = *((unsigned int *)v11 - 5);
              unint64_t v21 = *((unsigned int *)v11 - 4);
              *(void *)(v20 + 8) = v22;
              uint64_t v23 = (void *)(v20 + 8);
              *(void *)(v20 + 16) = v21;
              uint64_t v24 = (unint64_t *)(v20 + 16);
              if (*(_DWORD *)(a1 + 116) == 2)
              {
                uint64_t v25 = *(unsigned int *)(a1 + 448);
                if (v22 >= v25) {
                  int v18 = 0;
                }
                if (v18 == 1)
                {
                  unint64_t v26 = v21 - (v25 - v22);
                  if (v21 < v25 - v22) {
                    unint64_t v26 = 0;
                  }
                  *uint64_t v24 = v26;
                }
                uint64_t v27 = v22 - v25;
                if (v22 <= v25) {
                  uint64_t v27 = 0;
                }
                *uint64_t v23 = v27;
              }
              uint64_t v28 = *(void *)((char *)v11 - 12);
              *(void *)&long long v29 = v28;
              *((void *)&v29 + 1) = HIDWORD(v28);
              *(_OWORD *)(v10 + 56 * v9++ + 24) = v29;
              goto LABEL_33;
            }
            goto LABEL_35;
          }
          if (v17 != 0x4000)
          {
            if (v17 == 40)
            {
              int v18 = 0;
              *uint64_t v16 = *v11;
              int v19 = 16;
              goto LABEL_22;
            }
LABEL_35:
            if (v33 == -1)
            {
              if (v17 <= 997)
              {
                int v30 = v17 - 2;
                int v18 = 0;
                int v19 = 589824;
                switch(v30)
                {
                  case 0:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 0x40000;
                    goto LABEL_22;
                  case 1:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 327680;
                    goto LABEL_22;
                  case 2:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 393216;
                    goto LABEL_22;
                  case 3:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 196608;
                    goto LABEL_22;
                  case 4:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 458752;
                    goto LABEL_22;
                  case 5:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 0x80000;
                    goto LABEL_22;
                  case 6:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 1024;
                    goto LABEL_22;
                  case 7:
                    goto LABEL_22;
                  case 8:
                    int v18 = 0;
                    int v19 = 655360;
                    goto LABEL_22;
                  case 9:
                    int v18 = 0;
                    int v19 = 720896;
                    goto LABEL_22;
                  case 10:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 786432;
                    goto LABEL_22;
                  case 11:
                    int v18 = 0;
                    int v19 = 851968;
                    goto LABEL_22;
                  case 12:
                    int v18 = 0;
                    int v19 = 917504;
                    goto LABEL_22;
                  case 14:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 983040;
                    goto LABEL_22;
                  case 15:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 2555904;
                    goto LABEL_22;
                  case 16:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 0x100000;
                    goto LABEL_22;
                  case 17:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 1114112;
                    goto LABEL_22;
                  case 18:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 1179648;
                    goto LABEL_22;
                  case 19:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1310720;
                    goto LABEL_22;
                  case 20:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1376256;
                    goto LABEL_22;
                  case 22:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 1441792;
                    goto LABEL_22;
                  case 23:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 2048;
                    goto LABEL_22;
                  case 29:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 1245184;
                    goto LABEL_22;
                  case 30:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 0x20000;
                    goto LABEL_22;
                  case 32:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1507328;
                    goto LABEL_22;
                  case 34:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1572864;
                    goto LABEL_22;
                  case 35:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1638400;
                    goto LABEL_22;
                  case 36:
                    goto LABEL_10;
                  case 37:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1703936;
                    goto LABEL_22;
                  case 39:
                    int v18 = 0;
                    int v19 = 1769472;
                    goto LABEL_22;
                  case 48:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1835008;
                    goto LABEL_22;
                  case 49:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1900544;
                    goto LABEL_22;
                  case 50:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 1966080;
                    goto LABEL_22;
                  case 51:
                    int v18 = 0;
                    *uint64_t v15 = *(_DWORD *)v11;
                    int v19 = 2031616;
                    goto LABEL_22;
                  case 52:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 0x200000;
                    goto LABEL_22;
                  case 53:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 2162688;
                    goto LABEL_22;
                  case 54:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 2228224;
                    goto LABEL_22;
                  case 55:
                    int v18 = 0;
                    *uint64_t v16 = *v11;
                    int v19 = 2293760;
                    goto LABEL_22;
                  default:
                    goto LABEL_33;
                }
                goto LABEL_33;
              }
              if (v17 == 998)
              {
                int v18 = 0;
                int v19 = 2359296;
                goto LABEL_22;
              }
              if (v17 == 999)
              {
                int v18 = 0;
                int v19 = 2424832;
                goto LABEL_22;
              }
            }
            goto LABEL_33;
          }
          if (*((_DWORD *)v11 - 4))
          {
            int v18 = 1;
            int v19 = 1;
            goto LABEL_22;
          }
        }
LABEL_33:
        v11 += 4;
      }
    }
    *(void *)(a2 + 24) = v9;
  }
  return inited;
}

uint64_t ssft_hlp_ReadStopFlag(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = critsec_Enter(*(void **)(a1 + 80));
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v11 = v4;
    log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"VEAPI", 18033, "%s%x", v5, v6, v7, v8, "lhError");
    return v11;
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 88) == 6;
    unsigned int v9 = *(void **)(a1 + 80);
    return critsec_Leave(v9);
  }
}

uint64_t bet7_parse_multicore_hdr(uint64_t a1)
{
  __s1 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (brk_TagIteratorOpen(*(void *)(a1 + 24), "multicore", "PARAMETERS/*", 1, &v16)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v16 == 0;
  }
  if (!v2)
  {
    while ((brk_TagIteratorNext(v16, (uint64_t)&__s1, (uint64_t)&v14) & 0x80000000) == 0)
    {
      int v3 = __s1;
      int v4 = strcmp(__s1, "affinitylist");
      uint64_t v5 = v14;
      if (v4) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v14 == 0;
      }
      if (!v6)
      {
        if ((paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)v3, v14) & 0x1FFF) == 0xA) {
          break;
        }
        uint64_t v5 = v14;
        int v3 = __s1;
      }
      if (!strcmp(v3, "forceaffinity") && v5 != 0)
      {
        unsigned int v8 = *v5 - 48;
        BOOL v9 = v8 > 0x3E;
        uint64_t v10 = (1 << v8) & 0x4040000040400001;
        BOOL v11 = v9 || v10 == 0;
        unsigned int v12 = v11;
        if ((paramc_ParamSetInt(*(void *)(a1 + 40), (uint64_t)"forceaffinity", v12) & 0x1FFF) == 0xA) {
          break;
        }
      }
    }
    brk_TagIteratorClose(v16);
  }
  return 0;
}

uint64_t vplatform_GetInterfaces(void *a1, _WORD *a2)
{
  if (*a2 != 512) {
    return 2147484416;
  }
  uint64_t Interface = vplatform_heap_GetInterface((uint64_t)a1);
  if (Interface
    || (uint64_t Interface = vplatform_critsec_GetInterface((uint64_t)a1), Interface)
    || (uint64_t Interface = vplatform_data_GetInterface(a1, (uint64_t)a2), Interface)
    || (uint64_t Interface = vplatform_log_GetInterface((uint64_t)a1), Interface)
    || (uint64_t Interface = vplatform_thread_GetInterface((uint64_t)a1), Interface)
    || (uint64_t Interface = vplatform_clock_GetInterface(a1), Interface)
    || (uint64_t Interface = vplatform_dynlib_GetInterface((uint64_t)a1), Interface))
  {
    vplatform_ReleaseInterfaces((uint64_t)a1);
  }
  return Interface;
}

uint64_t vplatform_ReleaseInterfaces(uint64_t a1)
{
  BOOL v2 = *(void ***)(a1 + 104);
  if (v2)
  {
    vplatform_clock_ReleaseInterface(v2);
    *(void *)(a1 + 104) = 0;
  }
  int v3 = *(kaldi::nnet1::Component **)(a1 + 88);
  if (v3)
  {
    kaldi::nnet1::Component::IsUpdatable(v3);
    *(void *)(a1 + 88) = 0;
  }
  int v4 = *(kaldi::nnet1::Component **)(a1 + 64);
  if (v4)
  {
    kaldi::nnet1::Component::IsUpdatable(v4);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 72);
  if (v5)
  {
    vplatform_data_ReleaseInterface(v5);
    *(void *)(a1 + 72) = 0;
  }
  BOOL v6 = *(kaldi::nnet1::Component **)(a1 + 40);
  if (v6)
  {
    kaldi::nnet1::Component::IsUpdatable(v6);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v7 = *(kaldi::nnet1::Component **)(a1 + 112);
  if (v7)
  {
    kaldi::nnet1::Component::IsUpdatable(v7);
    *(void *)(a1 + 112) = 0;
  }
  kaldi::nnet1::Component::IsUpdatable(*(kaldi::nnet1::Component **)(a1 + 24));
  return 0;
}

uint64_t vplatform_BuildBrokerIdFromFullPath(int a1, char *__s, void **a3, char **a4)
{
  BOOL v6 = __s;
  *a3 = 0;
  if (a4) {
    *a4 = 0;
  }
  unsigned int v8 = 1;
  BOOL v9 = __s;
  while (1)
  {
    int v10 = *v9;
    if (v10 != 47 && v10 != 92) {
      break;
    }
    __s = ++v9;
LABEL_9:
    ++v8;
  }
  if (*v9)
  {
    ++v9;
    goto LABEL_9;
  }
  uint64_t v11 = 2147483658;
  unsigned int v12 = vplatform_CopyToChar(a1, __s);
  *a3 = v12;
  if (v12)
  {
    vplatform_data_BuildBrokerIdFromFilename((uint64_t)v12, v12);
    if (!a4) {
      return 0;
    }
    uint64_t v13 = (char *)vplatform_heap_Calloc(a1, v8, 1uLL);
    *a4 = v13;
    if (v13)
    {
      char v14 = *v6;
      if (*v6)
      {
        uint64_t v15 = (unsigned __int8 *)(v6 + 1);
        do
        {
          *v13++ = v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      return 0;
    }
    else
    {
      vplatform_heap_Free(a1, *a3);
      *a3 = 0;
    }
  }
  return v11;
}

uint64_t vplatform_AddFileToFileList(uint64_t *a1, unsigned __int8 *a2, char *__s1, void *a4)
{
  int v4 = a4;
  uint64_t v7 = *a1;
  uint64_t v8 = *a4;
  if (*a4)
  {
    int v9 = *((_DWORD *)a1 + 10);
    while (1)
    {
      uint64_t v10 = v8;
      if (v9)
      {
        if (!strcmp(__s1, *(const char **)(v8 + 8))) {
          break;
        }
      }
      uint64_t v8 = *(void *)(v10 + 32);
      if (!v8)
      {
        int v4 = (void *)(v10 + 32);
        goto LABEL_7;
      }
    }
    uint64_t result = 2147483672;
    char v14 = *(unsigned char **)v10;
    int v15 = *a2;
    if (*a2)
    {
      int v16 = a2 + 1;
      while (1)
      {
        int v17 = *v14;
        if (v15 != v17 && (v15 != 92 || v17 != 47) && (v15 != 47 || v17 != 92)) {
          break;
        }
        ++v14;
        int v18 = *v16++;
        int v15 = v18;
        if (!v18) {
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      if (!*v14)
      {
        ++*(_DWORD *)(v10 + 24);
        return 2;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = vplatform_heap_Calloc(v7, 1uLL, 0x28uLL);
    *int v4 = v11;
    if (v11)
    {
      unsigned int v12 = v11;
      uint64_t result = 0;
      v12[4] = 0;
      *(void *)(*v4 + 8) = __s1;
      *(void *)*int v4 = a2;
      *(_DWORD *)(*v4 + 24) = 1;
    }
    else
    {
      vplatform_heap_Free(v7, __s1);
      vplatform_heap_Free(v7, a2);
      return 2147483658;
    }
  }
  return result;
}

uint64_t vplatform_RemoveFileFromFileList(uint64_t *a1, const char *a2, void *a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void **)(v3 + 8);
    if (!strcmp(*(const char **)(v3 + 8), a2))
    {
      uint64_t v8 = 0;
LABEL_7:
      unsigned int v9 = *(_DWORD *)(v3 + 24);
      if (*(void *)(v3 + 16)) {
        BOOL v10 = v9 == 1;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return 2147483922;
      }
      if (v9 >= 2)
      {
        uint64_t result = 0;
        *(_DWORD *)(v3 + 24) = v9 - 1;
        return result;
      }
      unsigned int v12 = (void *)(v8 + 32);
      if (!v8) {
        unsigned int v12 = a3;
      }
      *unsigned int v12 = *(void *)(v3 + 32);
      if (*(void *)v3) {
        vplatform_heap_Free(v6, *(void **)v3);
      }
      if (*v7) {
        vplatform_heap_Free(v6, *v7);
      }
      vplatform_heap_Free(v6, (void *)v3);
    }
    else
    {
      while (1)
      {
        uint64_t v8 = v3;
        uint64_t v3 = *(void *)(v3 + 32);
        if (!v3) {
          break;
        }
        if (!strcmp(*(const char **)(v3 + 8), a2))
        {
          uint64_t v7 = (void **)(v3 + 8);
          goto LABEL_7;
        }
      }
    }
  }
  return 0;
}

uint64_t vplatform_FindFiles(uint64_t *a1, DIR *a2, unsigned int a3, uint64_t a4, const char **a5, void *a6, int a7)
{
  uint64_t result = 2147483655;
  if (a3 && a6)
  {
    if (a5) {
      *a5 = 0;
    }
    unint64_t v14 = 0;
    unint64_t v15 = a3;
    do
    {
      int v20 = 1;
      uint64_t result = vplatform_file_IsDirectory((int)a1, *(char **)(a4 + 8 * v14), &v20);
      if (result == -2147483647)
      {
        int v20 = 1;
      }
      else
      {
        if (result) {
          return result;
        }
        if (v20 != 1)
        {
          int v18 = 0;
          int v19 = 0;
          uint64_t result = vplatform_BuildBrokerIdFromFullPath((int)a2, *(char **)(a4 + 8 * v14), (void **)&v19, (char **)&v18);
          if (!result)
          {
            int v16 = v19;
            uint64_t result = vplatform_AddFileToFileList(a1, (unsigned __int8 *)v18, v19, a6);
            if (result == 2)
            {
              vplatform_heap_Free((int)a2, v16);
              vplatform_heap_Free((int)a2, v18);
              uint64_t result = 0;
            }
          }
          goto LABEL_15;
        }
      }
      uint64_t result = vplatform_WalkDir((uint64_t)a1, a2, *(char **)(a4 + 8 * v14), a5, a6, a7, 1);
LABEL_15:
      ++v14;
      if (result) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v14 >= v15;
      }
    }
    while (!v17);
  }
  return result;
}

uint64_t vplatform_WalkDir(uint64_t a1, DIR *a2, char *a3, const char **a4, void *a5, int a6, uint64_t a7)
{
  unint64_t v34 = 0;
  __s = 0;
  if (!a3) {
    return 2147483655;
  }
  int v36 = 0;
  LODWORD(result) = vplatform_find_Open(a1, a2, a3, &__s, &v36, &v34);
  if (result) {
    goto LABEL_51;
  }
  do
  {
    if (a6 == 1 && v36 == 1)
    {
      unint64_t v14 = vplatform_CombinePath((int)a2, a3, __s);
      if (!v14) {
        goto LABEL_45;
      }
      unint64_t v15 = v14;
      int v16 = vplatform_WalkDir(a1, a2, v14, a4, a5, 1, a7);
      goto LABEL_7;
    }
    if (a7 == 1 && a4 && v36 == 2)
    {
      int v18 = vplatform_CombinePath((int)a2, a3, __s);
      if (!v18) {
        goto LABEL_45;
      }
      unint64_t v15 = v18;
      __int16 v37 = 0;
      int v17 = vplatform_file_Open(a1, (int)a2, v18, "rb", &v37);
      if (!v17)
      {
        uint64_t Size = vplatform_file_GetSize(v37);
        size_t v20 = Size;
        if (*a4)
        {
          int v21 = strlen(*a4);
          uint64_t v22 = (const char *)vplatform_heap_Realloc((int)a2, (void *)*a4, (v20 + v21 + 1));
        }
        else
        {
          uint64_t v22 = (const char *)vplatform_heap_Calloc((int)a2, Size + 1, 1uLL);
        }
        int v17 = -2147483638;
        if (v22)
        {
          *a4 = v22;
          uint64_t v27 = (char *)&v22[strlen(v22)];
          uint64_t v28 = vplatform_file_Read(v27, 1uLL, v20, v37);
          if (v20 == v28) {
            int v17 = 0;
          }
          else {
            int v17 = -2147483644;
          }
          if (v20 == v28) {
            size_t v29 = v20;
          }
          else {
            size_t v29 = 0;
          }
          v27[v29] = 0;
        }
        vplatform_file_Close(v37);
      }
      goto LABEL_36;
    }
    if (v36 != 3) {
      goto LABEL_24;
    }
    uint64_t v23 = vplatform_CopyToChar((int)a2, __s);
    if (!v23) {
      goto LABEL_45;
    }
    unint64_t v15 = v23;
    vplatform_data_BuildBrokerIdFromFilename((uint64_t)v23, v23);
    if (a7 != 1)
    {
      int v16 = vplatform_RemoveFileFromFileList((uint64_t *)a1, v15, a5);
LABEL_7:
      int v17 = v16;
LABEL_36:
      vplatform_heap_Free((int)a2, v15);
      goto LABEL_37;
    }
    uint64_t v24 = (unsigned __int8 *)vplatform_CombinePath((int)a2, a3, __s);
    if (!v24)
    {
      vplatform_heap_Free((int)a2, v15);
LABEL_45:
      vplatform_heap_Free((int)a2, __s);
      int v31 = -2147483638;
      goto LABEL_46;
    }
    uint64_t v25 = v24;
    int v26 = vplatform_AddFileToFileList((uint64_t *)a1, v24, v15, a5);
    if (!v26) {
      goto LABEL_22;
    }
    int v17 = v26;
    if (v26 == 2)
    {
      vplatform_heap_Free((int)a2, v15);
      vplatform_heap_Free((int)a2, v25);
LABEL_22:
      if (!*(_DWORD *)(a1 + 40)) {
        a5 = (void *)(*a5 + 32);
      }
LABEL_24:
      vplatform_heap_Free((int)a2, __s);
      goto LABEL_38;
    }
LABEL_37:
    vplatform_heap_Free((int)a2, __s);
    if (v17) {
      goto LABEL_40;
    }
LABEL_38:
    int Next = vplatform_find_Next((uint64_t)v34, &__s, &v36);
  }
  while (!Next);
  int v17 = Next;
LABEL_40:
  if (v17 == -2147483628) {
    int v31 = 0;
  }
  else {
    int v31 = v17;
  }
LABEL_46:
  LODWORD(result) = vplatform_find_Close(v34);
  if (result) {
    BOOL v32 = v31 == 0;
  }
  else {
    BOOL v32 = 0;
  }
  if (!v32) {
    LODWORD(result) = v31;
  }
LABEL_51:
  if (result == -2147483628) {
    return 0;
  }
  else {
    return result;
  }
}

void vplatform_FreeFiles(int a1, void *a2, void **a3)
{
  if (a2) {
    vplatform_heap_Free(a1, a2);
  }
  if (a3)
  {
    do
    {
      if (*a3) {
        vplatform_heap_Free(a1, *a3);
      }
      uint64_t v5 = a3[1];
      if (v5) {
        vplatform_heap_Free(a1, v5);
      }
      uint64_t v6 = (void **)a3[4];
      vplatform_heap_Free(a1, a3);
      a3 = v6;
    }
    while (v6);
  }
}

uint64_t vplatform_list_CountEntries(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a2 - 1;
  if (a2 == 1)
  {
    uint64_t v5 = *a1 != 10;
    do
    {
LABEL_11:
      int v6 = *a1++;
      if (v6 == 10) {
        ++v5;
      }
      --a2;
    }
    while (a2);
    return v5;
  }
  do
  {
    int v3 = a1[v2];
    if (v3 != 32 && v3 != 9) {
      break;
    }
    --v2;
  }
  while (v2);
  uint64_t v5 = a1[v2] != 10;
  if (a2) {
    goto LABEL_11;
  }
  return v5;
}

uint64_t vplatform_list_GetEntry(int a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 2147483652;
  uint64_t v8 = *a2;
  while (1)
  {
    int v9 = *(unsigned __int8 *)(v8 + v6);
    if (!*(unsigned char *)(v8 + v6)) {
      return v7;
    }
    if (v9 == 9 || v9 == 32) {
      break;
    }
    ++v6;
  }
  BOOL v10 = vplatform_heap_Malloc(a1, (v6 + 1));
  *(void *)(a3 + 8) = v10;
  if (!v10) {
    return 2147483658;
  }
  for (uint64_t i = 0; ; ++i)
  {
    int v12 = *(unsigned __int8 *)(v8 + i);
    if (v12 == 9 || v12 == 32) {
      break;
    }
    *(unsigned char *)(*(void *)(a3 + 8) + i) = v12;
  }
  *(unsigned char *)(*(void *)(a3 + 8) + i) = 0;
  for (uint64_t j = (unsigned char *)(v8 + i); ; ++j)
  {
    int v14 = *j;
    if (v14 != 9 && v14 != 32) {
      break;
    }
  }
  if (!*j) {
    goto LABEL_39;
  }
  for (uint64_t k = 0; v14 != 10 && v14 != 0; LOBYTE(v14) = j[++k])
    ;
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = v17;
    unsigned int v19 = j[v17 - 1 + k];
    BOOL v20 = v19 > 0x20;
    uint64_t v21 = (1 << v19) & 0x100002200;
    if (v20 || v21 == 0) {
      break;
    }
    uint64_t v17 = v18 - 1;
  }
  while (&j[k - 1 + v18] > j);
  uint64_t v23 = k + v18;
  uint64_t v24 = &j[k + v18];
  if (v24 - 1 <= j)
  {
LABEL_39:
    vplatform_heap_Free(a1, *(void **)(a3 + 8));
    return v7;
  }
  uint64_t v25 = vplatform_heap_Malloc(a1, (k + v18 + 1));
  *(void *)a3 = v25;
  if (!v25)
  {
    vplatform_heap_Free(a1, *(void **)(a3 + 8));
    return 2147483658;
  }
  uint64_t v26 = 0;
  if (v23)
  {
    do
    {
      *(unsigned char *)(*(void *)a3 + v26) = j[v26];
      ++v26;
      --v23;
    }
    while (v23);
    uint64_t v25 = *(unsigned char **)a3;
    uint64_t v26 = v26;
    uint64_t j = v24;
  }
  v25[v26] = 0;
  *(void *)(a3 + 16) = 0;
  while (1)
  {
    unsigned int v27 = *j;
    BOOL v20 = v27 > 0x20;
    uint64_t v28 = (1 << v27) & 0x100002600;
    if (v20 || v28 == 0) {
      break;
    }
    ++j;
  }
  uint64_t v7 = 0;
  *a2 = (uint64_t)j;
  return v7;
}

uint64_t vplatform_ParseListFile(int a1, int a2, char *a3, void *a4)
{
  uint64_t v18 = 0;
  uint64_t v6 = vplatform_file_Open(a1, a2, a3, "rb", &v18);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v18 == 0;
  }
  if (!v7)
  {
    uint64_t v6 = 2147483658;
    uint64_t Size = vplatform_file_GetSize(v18);
    int v9 = (unsigned __int8 *)vplatform_heap_Malloc(a2, Size + 1);
    if (v9)
    {
      BOOL v10 = v9;
      if (Size == vplatform_file_Read(v9, 1uLL, Size, v18))
      {
        v10[Size] = 0;
        uint64_t v11 = vplatform_list_CountEntries(v10, Size);
        unint64_t v12 = v11;
        uint64_t v17 = v10;
        if (*v10 == 239 && v10[1] == 187 && v10[2] == 191) {
          uint64_t v17 = v10 + 3;
        }
        if (v11)
        {
          unint64_t v13 = 1;
          while (1)
          {
            int v14 = vplatform_heap_Calloc(a2, 1uLL, 0x28uLL);
            *a4 = v14;
            if (!v14) {
              break;
            }
            uint64_t Entry = vplatform_list_GetEntry(a2, (uint64_t *)&v17, (uint64_t)v14);
            uint64_t v6 = Entry;
            if (v13 < v12)
            {
              a4 = (void *)(*a4 + 32);
              ++v13;
              if (!Entry) {
                continue;
              }
            }
            goto LABEL_20;
          }
          uint64_t v6 = 2147483658;
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
      else
      {
        uint64_t v6 = 2147483652;
      }
LABEL_20:
      vplatform_heap_Free(a2, v10);
    }
    if (v18) {
      vplatform_file_Close(v18);
    }
  }
  return v6;
}

uint64_t vplatform_GetBinaryBrokerFile(int a1, int a2, char *a3, void *a4)
{
  unint64_t v12 = 0;
  *a4 = 0;
  uint64_t v6 = vplatform_file_Open(a1, a2, a3, "rb", &v12);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v12 == 0;
  }
  if (!v7)
  {
    uint64_t v6 = 2147483652;
    size_t Size = vplatform_file_GetSize(v12);
    int v9 = vplatform_heap_Malloc(a2, Size + 1);
    if (v9)
    {
      BOOL v10 = v9;
      if (Size == vplatform_file_Read(v9, 1uLL, Size, v12))
      {
        v10[Size] = 0;
        *a4 = v10;
        vplatform_file_Close(v12);
        return 0;
      }
      vplatform_heap_Free(a2, v10);
    }
    else
    {
      uint64_t v6 = 2147483658;
    }
    if (v12) {
      vplatform_file_Close(v12);
    }
  }
  return v6;
}

uint64_t vplatform_data_GetFullPathName(char *__s1, void *a2, uint64_t a3)
{
  uint64_t v3 = 2147483668;
  uint64_t v4 = *(void *)(a3 + 24);
  *a2 = 0;
  if (v4)
  {
    while (strcmp(__s1, *(const char **)(v4 + 8)))
    {
      uint64_t v4 = *(void *)(v4 + 32);
      if (!v4) {
        return v3;
      }
    }
    uint64_t v3 = 0;
    *a2 = *(void *)v4;
  }
  return v3;
}

uint64_t vplatform_data_GetInterface(void *a1, uint64_t a2)
{
  uint64_t v4 = (DIR *)a1[3];
  a1[9] = 0;
  uint64_t v5 = vplatform_heap_Calloc((int)v4, 1uLL, 0x30uLL);
  if (!v5) {
    return 2147483658;
  }
  uint64_t v6 = v5;
  *(void *)uint64_t v5 = v4;
  *((void *)v5 + 4) = 0;
  if (*(unsigned char *)(a2 + 64)) {
    *((_DWORD *)v5 + 10) = 1;
  }
  if (*(_WORD *)(a2 + 2))
  {
    uint64_t Files = vplatform_FindFiles((uint64_t *)v5, v4, *(unsigned __int16 *)(a2 + 2), *(void *)(a2 + 8), (const char **)v5 + 2, (void *)v5 + 3, 1);
    if (!Files)
    {
      uint64_t BinaryBrokerFile = vplatform_data_StoreDataFiles((const char *)v6[2], v6[3], (int)v6, (int)v4, *(char **)(a2 + 48), *(char **)(a2 + 56));
      goto LABEL_12;
    }
LABEL_13:
    vplatform_FreeFiles(*v6, (void *)v6[2], (void **)v6[3]);
    vplatform_heap_Free(*v6, v6);
    return Files;
  }
  int v9 = *(char **)(a2 + 56);
  if (v9)
  {
    uint64_t Files = vplatform_ParseListFile((int)v5, (int)v4, v9, (void *)v5 + 3);
    if (Files) {
      goto LABEL_13;
    }
    BOOL v10 = *(char **)(a2 + 48);
    if (v10)
    {
      uint64_t BinaryBrokerFile = vplatform_GetBinaryBrokerFile((int)v6, (int)v4, v10, v6 + 2);
LABEL_12:
      uint64_t Files = BinaryBrokerFile;
      if (BinaryBrokerFile) {
        goto LABEL_13;
      }
    }
  }
  if (!a1[1]) {
    a1[1] = v6[2];
  }
  uint64_t Files = 0;
  a1[6] = &IDataStream;
  a1[7] = 0;
  a1[9] = v6;
  return Files;
}

uint64_t vplatform_data_ReleaseInterface(void *a1)
{
  if (!a1) {
    return 2147483654;
  }
  vplatform_FreeFiles(*(void *)a1, *((void **)a1 + 2), *((void ***)a1 + 3));
  vplatform_heap_Free(*(void *)a1, a1);
  return 0;
}

uint64_t vplatform_data_StoreDataFiles(const char *a1, uint64_t a2, int a3, int a4, char *__filename, char *a6)
{
  __streauint64_t m = 0;
  if (!((unint64_t)__filename | (unint64_t)a6)) {
    return 0;
  }
  uint64_t result = 2147483655;
  if (__filename)
  {
    if (a6)
    {
      uint64_t result = vplatform_file_Open(a3, a4, __filename, "wb", &__stream);
      if (!result)
      {
        unsigned int v12 = strlen(a1);
        size_t v13 = vplatform_file_Write(a1, 1uLL, v12, __stream);
        uint64_t v14 = vplatform_file_Close(__stream);
        uint64_t result = 2147483653;
        if (v13 == v12)
        {
          uint64_t result = v14;
          if (!v14)
          {
            uint64_t result = vplatform_file_Open(a3, a4, a6, "wb", &__stream);
            if (!result)
            {
              if (a2)
              {
                while (1)
                {
                  int v15 = strlen(*(const char **)(a2 + 8));
                  int v16 = (char *)vplatform_heap_Malloc(a4, (v15 + 1));
                  if (!v16) {
                    break;
                  }
                  uint64_t v17 = v16;
                  size_t v18 = 0;
                  unsigned int v19 = *(const char **)(a2 + 8);
                  do
                  {
                    v17[v18] = v19[v18];
                    ++v18;
                    unsigned int v19 = *(const char **)(a2 + 8);
                  }
                  while (v18 <= strlen(v19));
                  unsigned int v20 = strlen(v17);
                  vplatform_file_Write(v17, v20, 1uLL, __stream);
                  vplatform_heap_Free(a4, v17);
                  vplatform_file_Write("\t", 1uLL, 1uLL, __stream);
                  unsigned int v21 = strlen(*(const char **)a2);
                  vplatform_file_Write(*(const void **)a2, v21, 1uLL, __stream);
                  vplatform_file_Write("\r\n", 2uLL, 1uLL, __stream);
                  a2 = *(void *)(a2 + 32);
                  if (!a2) {
                    return vplatform_file_Close(__stream);
                  }
                }
                vplatform_file_Close(__stream);
                return 2147483658;
              }
              else
              {
                return vplatform_file_Close(__stream);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t vplatform_data_BuildBrokerIdFromFilename(uint64_t a1, char *__s)
{
  if (*__s)
  {
    for (size_t i = 0; i < strlen(__s); ++i)
    {
      int v5 = __s[i];
      if (v5 == 95)
      {
        LOBYTE(v5) = 47;
      }
      else if (v5 == 46)
      {
        *(unsigned char *)(a1 + i) = 0;
        return 0;
      }
      *(unsigned char *)(a1 + i) = v5;
    }
  }
  return 0;
}

uint64_t vplatform_critsec_ObjOpen(int a1, uint64_t a2, pthread_mutex_t **a3)
{
  if (!a3) {
    return 2147483655;
  }
  *a3 = 0;
  int v5 = (pthread_mutex_t *)vplatform_heap_Calloc(a2, 1uLL, 0x58uLL);
  if (!v5) {
    return 2147483658;
  }
  uint64_t v6 = v5;
  *(void *)&v5[1].__opaque[8] = a2;
  pthread_mutex_init(v5, 0);
  uint64_t result = 0;
  *(_DWORD *)v6[1].__opaque = 0;
  v6[1].__sig = 0;
  *a3 = v6;
  return result;
}

uint64_t vplatform_critsec_ObjClose(uint64_t a1)
{
  return 0;
}

uint64_t vplatform_critsec_Enter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(_opaque_pthread_t **)(a1 + 64);
    if (v2 != pthread_self())
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      *(void *)(a1 + 64) = pthread_self();
    }
    ++*(_DWORD *)(a1 + 72);
  }
  return 0;
}

uint64_t vplatform_critsec_Leave(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(_opaque_pthread_t **)(a1 + 64);
    if (v2 == pthread_self())
    {
      int v4 = *(_DWORD *)(a1 + 72);
      if (v4)
      {
        int v5 = v4 - 1;
        *(_DWORD *)(a1 + 72) = v5;
        if (!v5)
        {
          *(void *)(a1 + 64) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)a1);
        }
      }
    }
  }
  return 0;
}

uint64_t vplatform_critsec_GetInterface(uint64_t a1)
{
  *(void *)(a1 + 32) = &ICritSec;
  *(void *)(a1 + 40) = 0;
  return 0;
}

uint64_t vplatform_log_GetInterface(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return 0;
}

BOOL IsAudioFile(char *a1)
{
  return strchr(a1, 46) && strchr(a1, 58) && strstr(a1, "audio/");
}

uint64_t vplatform_audiostream_Open(int a1, int a2, char *__s, FILE **a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)__filename = *(_OWORD *)".daf";
  long long v18 = unk_20D6B4748;
  *a4 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (strcspn(__s, ":") > 0x1F) {
    return 2147483655;
  }
  __streauint64_t m = 0;
  __strncpy_chk();
  int v9 = strchr(__s, 58);
  uint64_t v8 = vplatform_file_Open(a1, a2, v9 + 1, "rb", &__stream);
  if (!v8)
  {
    size_t Size = vplatform_file_GetSize(__stream);
    uint64_t v11 = vplatform_heap_Calloc(a2, Size + 1, 1uLL);
    if (v11)
    {
      unsigned int v12 = v11;
      uint64_t v8 = 2147483652;
      if (vplatform_file_Read(v11, 1uLL, Size, __stream) == Size)
      {
        uint64_t v8 = vplatform_file_Close(__stream);
        if (!v8)
        {
          uint64_t v8 = vplatform_file_Open(a1, a2, __filename, "wb", (FILE **)__stream);
          if (!v8)
          {
            size_t v13 = vplatform_file_Write(v12, 1uLL, Size, __stream);
            uint64_t v14 = vplatform_file_Close(__stream);
            uint64_t v8 = 2147483652;
            if (v13 == Size)
            {
              uint64_t v8 = v14;
              if (!v14)
              {
                uint64_t v8 = vplatform_file_Open(a1, a2, __filename, "rb", &__stream);
                if (!v8) {
                  *a4 = __stream;
                }
              }
            }
          }
        }
      }
      vplatform_heap_Free(a2, v12);
    }
    else
    {
      vplatform_file_Close(__stream);
      return 2147483658;
    }
  }
  return v8;
}

uint64_t vplatform_datastream_Open(uint64_t a1, FILE *a2, char *a3, char *a4, FILE ***a5)
{
  uint64_t v5 = 2147483655;
  if (a1 && a3 && a4 && a5)
  {
    *a5 = 0;
    uint64_t v11 = (FILE **)vplatform_heap_Malloc((int)a2, 0x18uLL);
    if (v11)
    {
      unsigned int v12 = v11;
      *uint64_t v11 = 0;
      *((_DWORD *)v11 + 2) = 0;
      void v11[2] = a2;
      if (*a4 == 114 && IsAudioFile(a3))
      {
        uint64_t v5 = vplatform_audiostream_Open(a1, (int)a2, a3, v12);
        int v13 = 2;
      }
      else
      {
        uint64_t v5 = vplatform_localstream_Open(a1, (int)a2, a3, a4, v12);
        int v13 = 1;
      }
      *((_DWORD *)v12 + 2) = v13;
      if (v5) {
        vplatform_datastream_Close(v12);
      }
      else {
        *a5 = v12;
      }
    }
    else
    {
      return 2147483658;
    }
  }
  return v5;
}

uint64_t vplatform_datastream_Close(_DWORD *a1)
{
  if (a1)
  {
    if ((a1[2] - 1) <= 1)
    {
      uint64_t v2 = *(FILE **)a1;
      if (*(void *)a1) {
        vplatform_file_Close(v2);
      }
    }
    vplatform_heap_Free(*((void *)a1 + 2), a1);
  }
  return 0;
}

uint64_t vplatform_datastream_Read(void *a1, size_t a2, size_t a3, uint64_t a4)
{
  if (a4 && (*(_DWORD *)(a4 + 8) - 1) <= 1) {
    return vplatform_file_Read(a1, a2, a3, *(FILE **)a4);
  }
  else {
    return 0;
  }
}

uint64_t vplatform_datastream_Seek(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  if (a1 && (*(_DWORD *)(a1 + 8) - 1) <= 1) {
    return vplatform_file_Seek(*(FILE **)a1, a2, a3, a4);
  }
  else {
    return 2147483655;
  }
}

uint64_t vplatform_datastream_GetSize(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 8) - 1) <= 1) {
    return vplatform_file_GetSize(*(FILE **)a1);
  }
  else {
    return 0;
  }
}

uint64_t vplatform_datastream_Error(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 8) - 1) <= 1) {
    return vplatform_file_Error(*(FILE **)a1);
  }
  else {
    return 2147483655;
  }
}

size_t vplatform_datastream_Write(void *__ptr, size_t a2, size_t a3, uint64_t a4)
{
  size_t result = 2147483649;
  if (!a4) {
    return 2147483655;
  }
  if (*(_DWORD *)(a4 + 8) == 1) {
    return vplatform_file_Write(__ptr, a2, a3, *(FILE **)a4);
  }
  return result;
}

uint64_t vplatform_localstream_Open(uint64_t a1, int a2, char *__filename, char *__mode, FILE **a5)
{
  *a5 = 0;
  uint64_t FullPathName = 2147483655;
  if (!a1 || !__filename || !__mode) {
    return FullPathName;
  }
  if (*__mode == 114 && !strchr(__filename, 46))
  {
    unsigned int v12 = 0;
    uint64_t FullPathName = vplatform_data_GetFullPathName(__filename, &v12, a1);
    if (!FullPathName) {
      uint64_t FullPathName = vplatform_file_Open(a1, a2, (char *)v12, "rb", a5);
    }
    kaldi::nnet1::Component::IsUpdatable(v12);
    return FullPathName;
  }
  return vplatform_file_Open(a1, a2, __filename, __mode, a5);
}

uint64_t vplatform_find_Open(int a1, DIR *a2, char *a3, char **a4, int *a5, DIR ***a6)
{
  uint64_t Next = 2147483917;
  if (a3 && a6 && *a3)
  {
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
    unsigned int v12 = opendir(a3);
    if (v12)
    {
      int v13 = v12;
      uint64_t v14 = (DIR **)vplatform_heap_Malloc((int)a2, 0x18uLL);
      if (v14)
      {
        int v15 = v14;
        v14[1] = (DIR *)a3;
        v14[2] = v13;
        *uint64_t v14 = a2;
        uint64_t Next = vplatform_find_Next((uint64_t)v14, a4, a5);
        if (Next) {
          vplatform_find_Close(v15);
        }
        else {
          *a6 = v15;
        }
      }
      else
      {
        closedir(v13);
        return 2147483658;
      }
    }
    else
    {
      return 2147483668;
    }
  }
  return Next;
}

uint64_t vplatform_find_Next(uint64_t a1, char **a2, int *a3)
{
  uint64_t v3 = 2147483658;
  if (!a1) {
    return 2147483917;
  }
  *a2 = 0;
  *a3 = 0;
  BOOL v7 = readdir(*(DIR **)(a1 + 16));
  if (!v7) {
    return 2147483668;
  }
  uint64_t v8 = v7;
  while (1)
  {
    d_name = v8->d_name;
    if (strcmp(v8->d_name, "."))
    {
      if (strcmp(v8->d_name, "..")) {
        break;
      }
    }
    uint64_t v8 = readdir(*(DIR **)(a1 + 16));
    if (!v8) {
      return 2147483668;
    }
  }
  uint64_t v11 = vplatform_CombinePath(*(void *)a1, *(char **)(a1 + 8), v8->d_name);
  if (v11)
  {
    unsigned int v12 = v11;
    memset(&v18, 0, sizeof(v18));
    if (stat(v11, &v18) || (v18.st_mode & 0xF000) != 0x4000)
    {
      size_t v14 = strlen(v8->d_name);
      if (v14 < 5) {
        goto LABEL_20;
      }
      int v15 = (char *)&v8->d_reclen + v14 + 1;
      if (!strcasecmp(v15, ".hdr"))
      {
        int v13 = 2;
      }
      else
      {
        if (strcasecmp(v15, ".dat")) {
          goto LABEL_20;
        }
        int v13 = 3;
      }
    }
    else
    {
      int v13 = 1;
    }
    *a3 = v13;
LABEL_20:
    vplatform_heap_Free(*(void *)a1, v12);
    size_t v16 = strlen(d_name);
    uint64_t v17 = (char *)vplatform_heap_Malloc(*(void *)a1, v16 + 1);
    *a2 = v17;
    if (v17)
    {
      strcpy(v17, d_name);
      return 0;
    }
  }
  return v3;
}

uint64_t vplatform_find_Close(DIR **a1)
{
  uint64_t v1 = 2147483917;
  if (a1)
  {
    if (closedir(a1[2]))
    {
      return 2147483918;
    }
    else
    {
      vplatform_heap_Free((int)*a1, a1);
      return 0;
    }
  }
  return v1;
}

char *vplatform_CombinePath(int a1, char *__s, const char *a3)
{
  unsigned int v6 = strlen(__s);
  size_t v7 = strlen(a3);
  uint64_t v8 = (char *)vplatform_heap_Malloc(a1, v7 + v6 + 2);
  int v9 = v8;
  if (v8)
  {
    strcpy(v8, __s);
    int v10 = v9[v6 - 1];
    if (v10 != 47 && v10 != 92) {
      *(_WORD *)&v9[strlen(v9)] = 47;
    }
    strcat(v9, a3);
  }
  return v9;
}

unsigned char *vplatform_CopyToChar(int a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = vplatform_heap_Malloc(a1, v4 + 1);
  if (v5)
  {
    size_t v6 = 0;
    do
    {
      int v7 = __s[v6];
      if ((v7 - 65) < 0x1A) {
        LOBYTE(v7) = v7 + 32;
      }
      v5[v6++] = v7;
    }
    while (v6 <= strlen(__s));
  }
  return v5;
}

uint64_t vplatform_file_Open(int a1, int a2, char *__filename, char *__mode, FILE **a5)
{
  size_t v6 = fopen(__filename, __mode);
  *a5 = v6;
  if (v6) {
    return 0;
  }
  else {
    return 2147483651;
  }
}

uint64_t vplatform_file_Close(FILE *a1)
{
  if (fclose(a1)) {
    return 2147483907;
  }
  else {
    return 0;
  }
}

uint64_t vplatform_file_Read(void *a1, size_t a2, size_t a3, FILE *a4)
{
  size_t v5 = fread(a1, a2, a3, a4);
  if (!v5 && ferror(a4)) {
    return 0xFFFFFFFFLL;
  }
  return v5;
}

uint64_t vplatform_file_Seek(FILE *a1, unint64_t a2, unsigned int a3, int a4)
{
  if (a3 > 2) {
    return 2147483655;
  }
  uint64_t v4 = 2147483908;
  if (!(a2 >> 31))
  {
    if (fseek(a1, a4 * a2, a3)) {
      return 2147483908;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t vplatform_file_GetSize(FILE *a1)
{
  unsigned int v2 = MEMORY[0x210559E70]();
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  int v3 = fseek(a1, 0, 2);
  uint64_t result = 0;
  if (v3) {
    return result;
  }
  unsigned int v5 = MEMORY[0x210559E70](a1);
  if ((v5 & 0x80000000) != 0) {
    return 0;
  }
  if (fseek(a1, v2, 0)) {
    return 0;
  }
  return v5;
}

uint64_t vplatform_file_Error(FILE *a1)
{
  if (ferror(a1)) {
    return 2147483652;
  }
  else {
    return 0;
  }
}

uint64_t vplatform_file_IsDirectory(int a1, char *a2, _DWORD *a3)
{
  memset(&v5, 0, sizeof(v5));
  *a3 = 0;
  if (stat(a2, &v5)) {
    return 2147483918;
  }
  uint64_t result = 0;
  if ((v5.st_mode & 0xF000) == 0x4000) {
    *a3 = 1;
  }
  return result;
}

uint64_t vplatform_thread_ObjOpen(int a1, uint64_t a2, void *a3)
{
  uint64_t v5 = 2147483912;
  size_t v6 = vplatform_heap_Malloc(a2, 0x10uLL);
  *a3 = v6;
  if (!v6) {
    return 2147483654;
  }
  int v7 = v6;
  *((_DWORD *)v6 + 2) = 135972;
  uint64_t v8 = vplatform_heap_Malloc(a2, 0x10uLL);
  if (!v8)
  {
LABEL_7:
    vplatform_heap_Free(a2, a3);
    return v5;
  }
  int v9 = v8;
  int v10 = vplatform_heap_Malloc(a2, 8uLL);
  *int v9 = v10;
  if (!v10)
  {
    vplatform_heap_Free(a2, v9);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  v9[1] = a2;
  void *v7 = v9;
  return v5;
}

uint64_t vplatform_thread_ObjClose(_DWORD *a1)
{
  uint64_t result = 2147483654;
  if (a1)
  {
    if (a1[2] == 135972)
    {
      uint64_t v3 = *(void *)a1;
      if (*(void *)a1)
      {
        vplatform_heap_Free(*(void *)(v3 + 8), *(void **)v3);
        vplatform_heap_Free(*(void *)(v3 + 8), a1);
        vplatform_heap_Free(*(void *)(v3 + 8), (void *)v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_thread_Start(uint64_t a1, void *(__cdecl *a2)(void *), void *a3, size_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135972)
    {
      size_t v6 = *(pthread_t ***)a1;
      if (*(void *)a1)
      {
        memset(&v10, 0, sizeof(v10));
        pthread_attr_init(&v10);
        pthread_attr_setstacksize(&v10, a4);
        pthread_attr_setdetachstate(&v10, 1);
        if (pthread_create(*v6, &v10, a2, a3)) {
          return 2147483651;
        }
        else {
          return 0;
        }
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_thread_Join(uint64_t a1, void **a2)
{
  uint64_t result = 2147483654;
  uint64_t v5 = a2;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135972)
    {
      uint64_t v4 = *(pthread_t ***)a1;
      if (v4)
      {
        if (a2) {
          a2 = &v5;
        }
        return (pthread_join(**v4, a2) != 0) << 31;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_thread_SleepMs(uint64_t a1, int a2)
{
  return 0;
}

uint64_t vplatform_thread_GetCallingThreadId(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = 0;
    *a2 += pthread_self();
  }
  return 0;
}

uint64_t vplatform_Semaphore_ObjOpen(int a1, sem_t *a2, unsigned int a3, uint64_t a4, sem_t ****a5)
{
  uint64_t v8 = 2147483912;
  int v9 = (sem_t ***)vplatform_heap_Malloc((int)a2, 0x10uLL);
  *a5 = v9;
  if (!v9) {
    return 2147483654;
  }
  pthread_attr_t v10 = v9;
  *((_DWORD *)v9 + 2) = 135973;
  uint64_t v11 = (sem_t **)vplatform_heap_Malloc((int)a2, 0x10uLL);
  if (!v11)
  {
LABEL_7:
    vplatform_heap_Free((int)a2, a5);
    return v8;
  }
  unsigned int v12 = v11;
  int v13 = (sem_t *)vplatform_heap_Malloc((int)a2, 4uLL);
  *unsigned int v12 = v13;
  if (!v13)
  {
    vplatform_heap_Free((int)a2, v12);
    goto LABEL_7;
  }
  v12[1] = a2;
  sem_init(v13, 0, a3);
  uint64_t v8 = 0;
  void *v10 = v12;
  return v8;
}

uint64_t vplatform_Semaphore_ObjClose(_DWORD *a1)
{
  uint64_t result = 2147483654;
  if (a1)
  {
    if (a1[2] == 135973)
    {
      uint64_t v3 = *(void *)a1;
      if (*(void *)a1)
      {
        sem_destroy(*(sem_t **)v3);
        vplatform_heap_Free(*(void *)(v3 + 8), *(void **)v3);
        vplatform_heap_Free(*(void *)(v3 + 8), a1);
        vplatform_heap_Free(*(void *)(v3 + 8), (void *)v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t vplatform_Semaphore_Acquire(uint64_t a1)
{
  uint64_t v1 = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135973)
    {
      if (*(void *)a1)
      {
        if (sem_wait(**(sem_t ***)a1)) {
          return 2147483918;
        }
        else {
          return 0;
        }
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return v1;
}

uint64_t vplatform_Semaphore_Release(uint64_t a1)
{
  uint64_t v1 = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135973)
    {
      if (*(void *)a1)
      {
        if (sem_post(**(sem_t ***)a1)) {
          return 2147483918;
        }
        else {
          return 0;
        }
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return v1;
}

uint64_t vplatform_thread_GetInterface(uint64_t a1)
{
  *(void *)(a1 + 112) = &IVthreadInterface;
  *(void *)(a1 + 120) = &IVSemaphoreInterface;
  return 0;
}

uint64_t vplatform_dynlib_Open(int a1, uint64_t a2, const char *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 2147483654;
  if (a5)
  {
    *a5 = 0;
    int v9 = vplatform_heap_Malloc(a2, 0x10uLL);
    if (v9)
    {
      pthread_attr_t v10 = v9;
      *int v9 = a2;
      uint64_t v11 = dlopen(a3, 130);
      v10[1] = v11;
      if (v11)
      {
        uint64_t v5 = 0;
        *a5 = v10;
      }
      else
      {
        vplatform_heap_Free(a2, v10);
        return 2147483661;
      }
    }
    else
    {
      return 2147483658;
    }
  }
  return v5;
}

uint64_t vplatform_dynlib_Close(void **a1)
{
  if (!a1) {
    return 2147483654;
  }
  uint64_t v2 = (dlclose(a1[1]) != 0) << 31;
  vplatform_heap_Free((int)*a1, a1);
  return v2;
}

uint64_t vplatform_dynlib_GetSymbol(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v3 = 2147483654;
  if (a3)
  {
    *a3 = 0;
    if (a1)
    {
      if (a2)
      {
        uint64_t v5 = dlsym(*(void **)(a1 + 8), a2);
        *a3 = v5;
        if (v5) {
          return 0;
        }
        else {
          return 2147483654;
        }
      }
    }
  }
  return v3;
}

uint64_t vplatform_dynlib_Exists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  return 2147483649;
}

uint64_t vplatform_dynlib_GetInterface(uint64_t a1)
{
  *(void *)(a1 + 64) = &IDynLib;
  return 0;
}

uint64_t vplatform_clock_GetRelativeTime(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 2147483654;
  }
  unsigned long long v20 = 0u;
  long long v21 = 0u;
  memset(&v22, 0, sizeof(v22));
  gettimeofday((timeval *)&v20, 0);
  times(&v22);
  clock_t tms_utime = v22.tms_utime;
  uint64_t v5 = *(void *)(a1 + 8);
  if ((uint64_t)v20 < *(void *)v5
    || ((int v6 = *(_DWORD *)(v5 + 8), (void)v20 == *(void *)v5) ? (v7 = SDWORD2(v20) < v6) : (v7 = 0), v7))
  {
    int v8 = 0;
  }
  else
  {
    int v8 = (DWORD2(v20) - v6) / 1000 + 1000 * (v20 - *(void *)v5);
  }
  clock_t tms_stime = v22.tms_stime;
  *a2 = v8;
  clock_t v10 = *(void *)(v5 + 16);
  BOOL v11 = tms_utime >= v10;
  clock_t v12 = tms_utime - v10;
  if (v11)
  {
    unint64_t v15 = 1000 * v12;
    unint64_t v16 = sysconf(3);
    uint64_t v5 = *(void *)(a1 + 8);
    unint64_t v13 = v15 / v16;
  }
  else
  {
    LODWORD(v13) = 0;
  }
  a2[1] = v13;
  clock_t v17 = *(void *)(v5 + 24);
  BOOL v11 = tms_stime >= v17;
  clock_t v18 = tms_stime - v17;
  if (v11) {
    unint64_t v19 = 1000 * v18 / sysconf(3);
  }
  else {
    LODWORD(v19) = 0;
  }
  uint64_t result = 0;
  a2[2] = v19;
  return result;
}

uint64_t vplatform_clock_GetInterface(void *a1)
{
  uint64_t v2 = 2147483658;
  uint64_t v3 = a1[3];
  uint64_t v4 = vplatform_heap_Calloc(v3, 1uLL, 0x10uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = (timeval *)vplatform_heap_Calloc(v3, 1uLL, 0x20uLL);
    v5[1] = v6;
    if (v6)
    {
      BOOL v7 = v6;
      memset(&v9, 0, sizeof(v9));
      gettimeofday(v6, 0);
      times(&v9);
      uint64_t v2 = 0;
      v7[1] = *(timeval *)&v9.tms_utime;
      a1[12] = &IClock;
      *uint64_t v5 = v3;
      a1[13] = v5;
    }
    else
    {
      vplatform_heap_Free(v3, v5);
    }
  }
  return v2;
}

uint64_t vplatform_clock_ReleaseInterface(void **a1)
{
  return 0;
}

void *vplatform_heap_Malloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0xC26084B4uLL);
}

void *vplatform_heap_Calloc(int a1, size_t count, size_t size)
{
  return malloc_type_calloc(count, size, 0xB57657CEuLL);
}

void *vplatform_heap_Realloc(int a1, void *ptr, size_t size)
{
  return malloc_type_realloc(ptr, size, 0x401FF21CuLL);
}

void vplatform_heap_Free(int a1, void *a2)
{
}

uint64_t vplatform_heap_GetInterface(uint64_t a1)
{
  *(void *)(a1 + 16) = &IHeap;
  *(void *)(a1 + 24) = 0;
  return 0;
}

void boost::filesystem::path::~path(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void *boost::filesystem::path::parent_path@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  std::string::size_type v6 = (char *)this;
  if (*((char *)this + 23) < 0) {
    std::string::size_type v6 = *(char **)this;
  }
  parent_path_size = boost::filesystem::path::find_parent_path_size(this, a2, a3, a4);
  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, v6, (char *)&parent_path_size[(void)v6], (unint64_t)parent_path_size);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<char const*,char const*>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  uint64_t v8 = this;
  if ((v12 & 0x80) != 0) {
    uint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    uint64_t v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void boost::filesystem::path::append_v3(std::string *this, std::string *a2)
{
  std::string::size_type v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  char v3 = v2;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = a2->__r_.__value_.__l.__size_;
  }
  if (v5)
  {
    if (this == a2)
    {
      if ((char)v2 < 0) {
        std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, size);
      }
      else {
        std::string __p = *a2;
      }
      boost::filesystem::path::append_v3((boost::filesystem::path *)a2, (const boost::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      if ((v2 & 0x80u) == 0) {
        uint64_t v9 = (const boost::filesystem::path *)a2;
      }
      else {
        uint64_t v9 = (const boost::filesystem::path *)a2->__r_.__value_.__r.__words[0];
      }
      if (*(unsigned char *)v9 != 47)
      {
        boost::filesystem::path::append_separator_if_needed(this);
        std::string::size_type v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        uint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
        char v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      if (v3 >= 0) {
        std::string::size_type v10 = (const std::string::value_type *)a2;
      }
      else {
        std::string::size_type v10 = v8;
      }
      if (v3 >= 0) {
        std::string::size_type size = v2;
      }
      std::string::append(this, v10, size);
    }
  }
}

void sub_20D2B232C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type boost::filesystem::path::append_separator_if_needed(std::string *this)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return 0;
    }
    std::string::size_type v2 = (char *)this + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(this, 47);
      return size;
    }
    return 0;
  }
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::size_type v2 = (char *)(this->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }
  return size;
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::size_type v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    std::string::size_type v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    size_t v14 = this;
    if ((v6 & 0x80) != 0) {
      size_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (size_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *size_t i = v16;
    }
    *size_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_20D2B2508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *anonymous namespace'::find_root_directory_start(_anonymous_namespace_ *this, const char *a2, void *a3, unint64_t *a4)
{
  *a3 = 0;
  if (a2 && *(unsigned char *)this == 47)
  {
    if ((unint64_t)a2 < 2 || *((unsigned char *)this + 1) != 47) {
      return 0;
    }
    std::string::size_type v5 = a2 - 2;
    if (a2 != (const char *)2)
    {
      unint64_t v6 = (char *)this + 2;
      if (*((unsigned char *)this + 2) == 47) {
        return 0;
      }
      uint64_t v8 = memchr(v6, 47, (size_t)v5);
      std::string::size_type v9 = (const char *)(v8 - v6);
      if (!v8) {
        std::string::size_type v9 = v5;
      }
      a2 = v9 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

const char *boost::filesystem::path::find_parent_path_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    std::string::size_type v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    std::string::size_type v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v19 = 0;
  int v7 = *((char *)v4 + 23);
  if ((unint64_t)v5 >= v19) {
    uint64_t v8 = (const char *)v19;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = v4;
  }
  else {
    std::string::size_type v9 = *(boost::filesystem::path **)v4;
  }
  std::string::size_type v10 = (char *)v9 - 1;
  unint64_t v11 = v5;
  while ((unint64_t)v11 > v19)
  {
    unint64_t v12 = v11 - 1;
    int v13 = (v11--)[(void)v10];
    if (v13 == 47)
    {
      uint64_t v8 = v12 + 1;
      break;
    }
  }
  if ((unint64_t)v8 >= v19) {
    unint64_t v14 = v19;
  }
  else {
    unint64_t v14 = (unint64_t)v8;
  }
  if (v7 >= 0) {
    unint64_t v15 = v4;
  }
  else {
    unint64_t v15 = *(boost::filesystem::path **)v4;
  }
  char v16 = (char *)v15 - 1;
  std::string::size_type v17 = v8;
  while ((unint64_t)v17 > v19)
  {
    if (v17[(void)v16] != 47) {
      return v17;
    }
    if (root_directory_start == --v17)
    {
      if (v5 == v8) {
        return root_directory_start;
      }
      else {
        return root_directory_start + 1;
      }
    }
  }
  if (v5 == v8) {
    return 0;
  }
  else {
    return (const char *)v14;
  }
}

void anonymous namespace'::path_locale_deleter::~path_locale_deleter(_anonymous_namespace_::path_locale_deleter *this)
{
  {
    operator delete(v1);
  }
}

uint64_t SoundStormP2APromptInference::set_dynamic_prompt(void *a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v86, &byte_20D5A22AE);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4) {
    goto LABEL_18;
  }
  if (a1 + 18 != (void *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)(a1 + 17), (const void **)a2))
  {
    *(void *)&long long v84 = a2;
    std::string::size_type v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 17, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v84);
    unint64_t v6 = v5;
    if (*((char *)v5 + 79) >= 0) {
      size_t v7 = *((unsigned __int8 *)v5 + 79);
    }
    else {
      size_t v7 = v5[8];
    }
    uint64_t v8 = &v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&v87, v7 + 1);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if (*((char *)v6 + 79) >= 0) {
        std::string::size_type v9 = v6 + 7;
      }
      else {
        std::string::size_type v9 = (const void *)v6[7];
      }
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 47;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    std::string v86 = v87;
LABEL_18:
    std::string::size_type v10 = a1 + 11;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](a1 + 11);
    unint64_t v11 = a1 + 14;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100](a1 + 14);
    if (a1[6])
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      unint64_t v14 = (unsigned __int8 *)(a1 + 9);
      uint64_t v69 = (uint64_t)(a1 + 16);
      uint64_t v70 = (uint64_t)(a1 + 13);
      uint64_t v71 = (unsigned __int8 *)(a1 + 9);
      int v72 = a1 + 14;
      do
      {
        std::to_string(&v87, v13);
        unint64_t v15 = std::string::insert(&v87, 0, "prompt_k_");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v85 = v15->__r_.__value_.__r.__words[2];
        long long v84 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        std::to_string(&v87, v13);
        std::string::size_type v17 = std::string::insert(&v87, 0, "prompt_v_");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        std::string::size_type v83 = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v82 = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(v79, "prompt_k");
        uint64_t v19 = a1[7];
        unsigned __int8 v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v14, (const void **)&v84);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v20, &v74);
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v21 = &v86;
        }
        else {
          long long v21 = (std::string *)v86.__r_.__value_.__r.__words[0];
        }
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v86.__r_.__value_.__l.__size_;
        }
        uint64_t v23 = std::string::insert(&v74, 0, (const std::string::value_type *)v21, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v76 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v75 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, void))(*(void *)v19 + 40))(__p, v19, 1936946287, v75, 0);
        _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v81, (uint64_t)v79, (uint64_t)__p);
        uint64_t v26 = (_OWORD *)a1[12];
        unint64_t v25 = a1[13];
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v28 = ((uint64_t)v26 - *v10) >> 4;
          if ((unint64_t)(v28 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v25 - *v10;
          uint64_t v30 = v29 >> 3;
          if (v29 >> 3 <= (unint64_t)(v28 + 1)) {
            uint64_t v30 = v28 + 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          uint64_t v89 = v70;
          BOOL v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v70, v31);
          unsigned int v33 = &v32[16 * v28];
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
          v87.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
          uint64_t v88 = &v32[16 * v34];
          *(_OWORD *)unsigned int v33 = v81;
          long long v81 = 0uLL;
          v87.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 16);
          std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(v10, &v87);
          unsigned int v27 = (_OWORD *)a1[12];
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&v87.__r_.__value_.__l.__data_);
        }
        else
        {
          *uint64_t v26 = v81;
          unsigned int v27 = v26 + 1;
          long long v81 = 0uLL;
        }
        a1[12] = v27;
        if (v78 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v76) < 0) {
          operator delete(v75[0]);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (v80 < 0) {
          operator delete(v79[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v79, "prompt_v");
        uint64_t v35 = a1[7];
        int v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v14, (const void **)v82);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v36, &v74);
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v37 = &v86;
        }
        else {
          __int16 v37 = (std::string *)v86.__r_.__value_.__r.__words[0];
        }
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v38 = v86.__r_.__value_.__l.__size_;
        }
        unsigned int v39 = std::string::insert(&v74, 0, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        std::string::size_type v76 = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v75 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, void))(*(void *)v35 + 40))(__p, v35, 1936946287, v75, 0);
        _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v81, (uint64_t)v79, (uint64_t)__p);
        uint64_t v42 = (_OWORD *)a1[15];
        unint64_t v41 = a1[16];
        if ((unint64_t)v42 >= v41)
        {
          uint64_t v44 = ((uint64_t)v42 - *v11) >> 4;
          if ((unint64_t)(v44 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v41 - *v11;
          uint64_t v46 = v45 >> 3;
          if (v45 >> 3 <= (unint64_t)(v44 + 1)) {
            uint64_t v46 = v44 + 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          uint64_t v89 = v69;
          uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v69, v47);
          int v49 = &v48[16 * v44];
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          v87.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
          uint64_t v88 = &v48[16 * v50];
          *(_OWORD *)int v49 = v81;
          long long v81 = 0uLL;
          v87.__r_.__value_.__r.__words[2] = (std::string::size_type)(v49 + 16);
          std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(v11, &v87);
          long long v43 = (_OWORD *)a1[15];
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((void **)&v87.__r_.__value_.__l.__data_);
        }
        else
        {
          *uint64_t v42 = v81;
          long long v43 = v42 + 1;
          long long v81 = 0uLL;
        }
        a1[15] = v43;
        if (v78 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v76) < 0) {
          operator delete(v75[0]);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        unint64_t v73 = v13;
        if (v80 < 0) {
          operator delete(v79[0]);
        }
        uint64_t v51 = v10;
        uint64_t v52 = v12;
        InferenceEngine::DataTensor::get_shape(*(InferenceEngine::DataTensor **)(*v10 + v12), 0, &v87.__r_.__value_.__l.__data_);
        unint64_t v53 = *(void *)v87.__r_.__value_.__l.__data_;
        int v54 = a1;
        uint64_t v55 = a1[5];
        unint64_t v56 = v54[3];
        unint64_t v57 = v54[4];
        v87.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
        operator delete(v87.__r_.__value_.__l.__data_);
        unint64_t v59 = v54[4];
        uint64_t v58 = v54[5];
        int v60 = v54;
        unint64_t v61 = v54[3];
        uint64_t v62 = operator new(0x20uLL);
        v87.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 4);
        v87.__r_.__value_.__r.__words[2] = (std::string::size_type)(v62 + 4);
        *uint64_t v62 = v58;
        v62[1] = v53 / (v57 * v55 * (v56 / v57));
        v62[2] = v59;
        v62[3] = v61 / v59;
        v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        std::string::size_type v10 = v51;
        uint64_t v63 = v52;
        InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(*v51 + v52), (uint64_t)&v87);
        unint64_t v11 = v72;
        InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(*v72 + v52), (uint64_t)&v87);
        a1 = v60;
        if (v87.__r_.__value_.__r.__words[0])
        {
          v87.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        unint64_t v14 = v71;
        if (SHIBYTE(v83) < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v85) < 0) {
          operator delete((void *)v84);
        }
        unint64_t v13 = v73 + 1;
        uint64_t v12 = v63 + 16;
      }
      while (v73 + 1 < a1[6]);
    }
    goto LABEL_89;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v64 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v66 = (const void *)a2;
    }
    else {
      int v66 = *(const void **)a2;
    }
    LODWORD(v87.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
    _os_log_impl(&dword_20CD80000, v64, OS_LOG_TYPE_ERROR, "Prompt '%s' is not defined.", (uint8_t *)&v87, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v67 = (const void *)a2;
  }
  else {
    uint64_t v67 = *(const void **)a2;
  }
  Diagnostics::log(3, "Prompt '%s' is not defined.", v65, v67);
LABEL_89:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_20D2B2E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (*(char *)(v55 - 153) < 0) {
    operator delete(*(void **)(v55 - 176));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  if (*a1)
  {
    if (*a1 != 1)
    {
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v7 = *a1;
      if (v7 > 9) {
        uint64_t v8 = "number";
      }
      else {
        uint64_t v8 = off_2641152A0[v7];
      }
      std::string::basic_string[abi:ne180100]<0>(&v11, v8);
      std::string::size_type v9 = std::string::insert(&v11, 0, "cannot use operator[] with a string argument with ");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
      long long v12 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(305, (uint64_t)&v12, exception);
    }
    uint64_t v4 = (uint64_t **)*((void *)a1 + 1);
  }
  else
  {
    *a1 = 1;
    uint64_t v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *uint64_t v4 = (uint64_t *)(v4 + 1);
    *((void *)a1 + 1) = v4;
  }
  *(void *)&long long v12 = a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 7;
}

void sub_20D2B307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(void *a1, uint64_t a2, uint64_t a3)
{
  v15[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream((uint64_t *)&v12);
  std::istream::tellg();
  unint64_t v6 = v11 >> 1;
  long long v12 = (void *)*MEMORY[0x263F8C2A8];
  *(void **)((char *)&v12 + *((void *)v12 - 3)) = *(void **)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x210558FE0](&v14);
  std::istream::~istream();
  MEMORY[0x210559500](v15);
  unint64_t v7 = operator new(8uLL);
  long long v12 = v7;
  void *v7 = v6;
  std::string::size_type v13 = v7 + 1;
  unint64_t v14 = v7 + 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "fp16");
  uint64_t v8 = operator new(0x80uLL);
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *uint64_t v8 = off_26C2190A8;
  *a1 = InferenceEngine::DataTensor::DataTensor(v8 + 3, a2, __p, &v12, a3);
  a1[1] = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12)
  {
    std::string::size_type v13 = v12;
    operator delete(v12);
  }
}

void sub_20D2B32A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v32);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t SoundStormP2APromptInference::clean(SoundStormP2APromptInference *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

void SoundStormP2APromptInference::prepare_inputs(void *a1, void *a2)
{
  char v3 = (std::__shared_weak_count *)a2[1];
  v24[0] = *a2;
  v24[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SoundStormP2ABaseInference::prepare_inputs((uint64_t)a1, (uint64_t)v24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (a1[6])
  {
    for (unint64_t i = 0; i < a1[6]; ++i)
    {
      std::to_string(&v22, i);
      std::string::size_type v5 = std::string::insert(&v22, 0, "prompt_k_");
      unint64_t v6 = (std::string::value_type *)v5->__r_.__value_.__r.__words[0];
      std::string::size_type size = v5->__r_.__value_.__l.__size_;
      v23[0] = v5->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v23 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
      int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      std::to_string(&v22, i);
      std::string::size_type v9 = std::string::insert(&v22, 0, "prompt_v_");
      char v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
      std::string::size_type v11 = v9->__r_.__value_.__l.__size_;
      v21[0] = v9->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
      int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = a1[1];
      if (v8 < 0)
      {
        std::string::__init_copy_ctor_external(&v20, v6, size);
      }
      else
      {
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
        v20.__r_.__value_.__l.__size_ = size;
        LODWORD(v20.__r_.__value_.__r.__words[2]) = v23[0];
        *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v23 + 3);
        *((unsigned char *)&v20.__r_.__value_.__s + 23) = v8;
      }
      long long v14 = *(_OWORD *)(a1[11] + 16 * i);
      long long v19 = v14;
      if (*((void *)&v14 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::string *, long long *))(*(void *)v13 + 8))(v13, &v20, &v19);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = a1[1];
      if (v12 < 0)
      {
        std::string::__init_copy_ctor_external(&v18, v10, v11);
      }
      else
      {
        v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
        v18.__r_.__value_.__l.__size_ = v11;
        LODWORD(v18.__r_.__value_.__r.__words[2]) = v21[0];
        *(_DWORD *)((char *)&v18.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v21 + 3);
        *((unsigned char *)&v18.__r_.__value_.__s + 23) = v12;
      }
      long long v16 = *(_OWORD *)(a1[14] + 16 * i);
      long long v17 = v16;
      if (*((void *)&v16 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::string *, long long *))(*(void *)v15 + 8))(v15, &v18, &v17);
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if ((v12 & 0x80000000) == 0)
        {
LABEL_29:
          if (v8 < 0) {
            goto LABEL_34;
          }
          continue;
        }
      }
      else if ((v12 & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(v10);
      if (v8 < 0) {
LABEL_34:
      }
        operator delete(v6);
    }
  }
}

void sub_20D2B35E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D2B367C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    JUMPOUT(0x20D2B3670);
  }
  JUMPOUT(0x20D2B3674);
}

uint64_t InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48) == 1
    && *(void *)(a1 + 56) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(a1 + 56), a2))
  {
    unint64_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v4, a2);
    unsigned int v8 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)&v8);
    return v8;
  }
  return a3;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,std::string>,0>(uint64_t *a1, unsigned __int8 *a2, const void **a3, const void ***a4)
{
  if (*a2 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v10 = *a2;
    if (v10 > 9) {
      std::string::size_type v11 = "number";
    }
    else {
      std::string::size_type v11 = off_2641152A0[v10];
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, v11);
    int v12 = std::string::insert(&v14, 0, "cannot use value() with ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
    long long v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v17, exception);
  }
  *(void *)&long long v17 = a2;
  std::string::size_type v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0x8000000000000000;
  *((void *)&v17 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a2 + 1), a3);
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v14.__r_.__value_.__r.__words[2] = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0x8000000000000000;
  int v7 = *a2;
  if (v7 == 2)
  {
    v14.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v14.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
  }
  else
  {
    unint64_t v16 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v17, (unsigned __int8 **)&v14))
  {
    std::map<std::string,std::string>::map[abi:ne180100](a1, a4);
  }
  else
  {
    unsigned int v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(a1, v8);
  }
}

void sub_20D2B3890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t SoundStormInference::clean(SoundStormInference *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  uint64_t v4 = (void **)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (*a2 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v20 = *a2;
    if (v20 > 9) {
      long long v21 = "number";
    }
    else {
      long long v21 = off_2641152A0[v20];
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, v21);
    std::string v22 = std::string::insert(&v29, 0, "type must be object, but is ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v27, exception);
  }
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  int v24 = (uint64_t *)&v25;
  std::string::size_type v5 = (void *)*((void *)a2 + 1);
  unsigned int v8 = (void *)*v5;
  unint64_t v6 = v5 + 1;
  int v7 = v8;
  if (v8 == v6)
  {
    unint64_t v16 = 0;
  }
  else
  {
    std::string::size_type v9 = (uint64_t *)&v25;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)(v7 + 7), &v29);
      if (*((char *)v7 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v7[4], v7[5]);
      }
      else {
        std::string v27 = *(std::string *)(v7 + 4);
      }
      std::string __p = v29;
      unint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v24, v9, &v31, &v30, (const void **)&v27.__r_.__value_.__l.__data_);
      std::string::size_type v11 = *v10;
      if (!*v10)
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)&v24, (uint64_t)&v27, (uint64_t)&v29);
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v24, (uint64_t)v31, v10, (uint64_t *)v29.__r_.__value_.__l.__data_);
        std::string::size_type v11 = (uint64_t *)v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v29, 0);
      }
      int v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          std::string::size_type v9 = v12;
          int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          std::string::size_type v9 = (uint64_t *)v11[2];
          BOOL v13 = *v9 == (void)v11;
          std::string::size_type v11 = v9;
        }
        while (!v13);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      std::string v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          std::string v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v7[2];
          BOOL v13 = *v15 == (void)v7;
          int v7 = v15;
        }
        while (!v13);
      }
      int v7 = v15;
    }
    while (v15 != v6);
    unint64_t v16 = *v4;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)a1, v16);
  long long v17 = v25;
  *a1 = v24;
  a1[1] = v17;
  uint64_t v18 = v26;
  a1[2] = v26;
  if (v18)
  {
    void v17[2] = v4;
    int v24 = (uint64_t *)&v25;
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    long long v17 = 0;
  }
  else
  {
    *a1 = v4;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v24, v17);
}

void sub_20D2B3BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v28, *(void **)(v28 + 8));
  _Unwind_Resume(a1);
}

void AnetecStreamingDecoderBaseInference::get_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v68, "decoder_chunk_out");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v4 + 32))(&v70, v4, v68);
  uint64_t v5 = *a2;
  long long v6 = v70;
  long long v70 = 0uLL;
  int v7 = *(std::__shared_weak_count **)(v5 + 8);
  *(_OWORD *)uint64_t v5 = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((void *)&v70 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
  }
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  uint64_t v8 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v66, "obuf_0");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v8 + 32))(&v70, v8, v66);
  uint64_t v9 = *a2;
  long long v10 = v70;
  long long v70 = 0uLL;
  std::string::size_type v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v67 < 0) {
    operator delete(v66[0]);
  }
  uint64_t v12 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v64, "obuf_1_0");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v12 + 32))(&v70, v12, v64);
  uint64_t v13 = *a2;
  long long v14 = v70;
  long long v70 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 40);
  *(_OWORD *)(v13 + 32) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  uint64_t v16 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v62, "obuf_1");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v16 + 32))(&v70, v16, v62);
  uint64_t v17 = *a2;
  long long v18 = v70;
  long long v70 = 0uLL;
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 56);
  *(_OWORD *)(v17 + 48) = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  uint64_t v20 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "obuf_2_0");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v20 + 32))(&v70, v20, __p);
  uint64_t v21 = *a2;
  long long v22 = v70;
  long long v70 = 0uLL;
  long long v23 = *(std::__shared_weak_count **)(v21 + 72);
  *(_OWORD *)(v21 + 64) = v22;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v24 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v58, "obuf_2");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v24 + 32))(&v70, v24, v58);
  uint64_t v25 = *a2;
  long long v26 = v70;
  long long v70 = 0uLL;
  std::string v27 = *(std::__shared_weak_count **)(v25 + 88);
  *(_OWORD *)(v25 + 80) = v26;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  uint64_t v28 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v56, "obuf_3_0");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v28 + 32))(&v70, v28, v56);
  uint64_t v29 = *a2;
  long long v30 = v70;
  long long v70 = 0uLL;
  unint64_t v31 = *(std::__shared_weak_count **)(v29 + 104);
  *(_OWORD *)(v29 + 96) = v30;
  if (v31)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  uint64_t v32 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v54, "obuf_3");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v32 + 32))(&v70, v32, v54);
  uint64_t v33 = *a2;
  long long v34 = v70;
  long long v70 = 0uLL;
  uint64_t v35 = *(std::__shared_weak_count **)(v33 + 120);
  *(_OWORD *)(v33 + 112) = v34;
  if (v35)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  uint64_t v36 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v52, "obuf_4_0");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v36 + 32))(&v70, v36, v52);
  uint64_t v37 = *a2;
  long long v38 = v70;
  long long v70 = 0uLL;
  unsigned int v39 = *(std::__shared_weak_count **)(v37 + 136);
  *(_OWORD *)(v37 + 128) = v38;
  if (v39)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  uint64_t v40 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v50, "obuf_4");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v40 + 32))(&v70, v40, v50);
  uint64_t v41 = *a2;
  long long v42 = v70;
  long long v70 = 0uLL;
  long long v43 = *(std::__shared_weak_count **)(v41 + 152);
  *(_OWORD *)(v41 + 144) = v42;
  if (v43)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  uint64_t v44 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(v48, "obuf_5");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v44 + 32))(&v70, v44, v48);
  uint64_t v45 = *a2;
  long long v46 = v70;
  long long v70 = 0uLL;
  unint64_t v47 = *(std::__shared_weak_count **)(v45 + 168);
  *(_OWORD *)(v45 + 160) = v46;
  if (v47)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
}

void sub_20D2B41F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AnetecStreamingDecoderBaseInference::prepare_inputs(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v5 = (std::__shared_weak_count *)(*a2)[1];
  uint64_t v46 = **a2;
  unint64_t v47 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v46);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  long long v6 = *(void (****)(void, uint64_t *))(a1 + 296);
  int v7 = (std::__shared_weak_count *)(*a2)[3];
  uint64_t v44 = (*a2)[2];
  uint64_t v45 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v6)(v6, &v44);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  uint64_t v8 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v9 = (std::__shared_weak_count *)(*a2)[5];
  uint64_t v42 = (*a2)[4];
  long long v43 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v8)(v8, &v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  long long v10 = *(void (****)(void, uint64_t *))(a1 + 296);
  std::string::size_type v11 = (std::__shared_weak_count *)(*a2)[7];
  uint64_t v40 = (*a2)[6];
  uint64_t v41 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v10)(v10, &v40);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v12 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v13 = (std::__shared_weak_count *)(*a2)[9];
  uint64_t v38 = (*a2)[8];
  unsigned int v39 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v12)(v12, &v38);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  long long v14 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v15 = (std::__shared_weak_count *)(*a2)[11];
  uint64_t v36 = (*a2)[10];
  uint64_t v37 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v14)(v14, &v36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v16 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v17 = (std::__shared_weak_count *)(*a2)[13];
  uint64_t v34 = (*a2)[12];
  uint64_t v35 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v16)(v16, &v34);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  long long v18 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v19 = (std::__shared_weak_count *)(*a2)[15];
  uint64_t v32 = (*a2)[14];
  uint64_t v33 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v18)(v18, &v32);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v20 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v21 = (std::__shared_weak_count *)(*a2)[17];
  uint64_t v30 = (*a2)[16];
  unint64_t v31 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v20)(v20, &v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  long long v22 = *(void (****)(void, uint64_t *))(a1 + 296);
  long long v23 = (std::__shared_weak_count *)(*a2)[19];
  uint64_t v28 = (*a2)[18];
  uint64_t v29 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v22)(v22, &v28);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v24 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v25 = (std::__shared_weak_count *)(*a2)[21];
  uint64_t v26 = (*a2)[20];
  std::string v27 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v24)(v24, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_20D2B469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AnetecStreamingDecoderBaseInference::inference(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "Anetec streaming inference decoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Anetec streaming inference decoder begin.", v7);
  uint64_t v8 = (char *)operator new(0xC8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_26C1EE1C8;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v22 = *a2;
  long long v23 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[13])(a1, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[37] + 48))(a1[37]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    double v25 = (double)((v12.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEBUG, "Anetec streaming decoder inference time (per step): %.3f s", buf, 0xCu);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(7, "Anetec streaming decoder inference time (per step): %.3f s", v14, (double)((v13.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0);
  uint64_t v20 = v8 + 24;
  uint64_t v21 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  ((void (*)(void **, char **))(*a1)[14])(a1, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  (*(void (**)(void *))(*a1[37] + 56))(a1[37]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEBUG, "Anetec streaming inference decoder end.", buf, 2u);
  }
  Diagnostics::log(7, "Anetec streaming inference decoder end.", v16);
  long long v18 = v8 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v17 = *(void *)(a3 + 24);
  if (!v17) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char **))(*(void *)v17 + 48))(v17, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_20D2B4B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v16 + 296) + 56))(*(void *)(v16 + 296));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D2B4BF0(_Unwind_Exception *a1)
{
}

void sub_20D2B4BFC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D2B4C04);
  }
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBuf>::__on_zero_shared(void *a1)
{
  std::string::size_type v2 = (std::__shared_weak_count *)a1[24];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[20];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[18];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)a1[16];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v7 = (std::__shared_weak_count *)a1[14];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[12];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::chrono::steady_clock::time_point v10 = (std::__shared_weak_count *)a1[8];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string::size_type v11 = (std::__shared_weak_count *)a1[6];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::chrono::steady_clock::time_point v12 = (std::__shared_weak_count *)a1[4];
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBuf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBuf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AnetecStreamingDecoderBaseInference::~AnetecStreamingDecoderBaseInference(AnetecStreamingDecoderBaseInference *this)
{
  *(void *)this = off_26C1EDBC0;
  std::string::size_type v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C1EDBC0;
  std::string::size_type v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void PersistentModule::~PersistentModule(void **this)
{
  *this = off_26C201B20;
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  Module::~Module((Module *)this);
}

{
  uint64_t vars8;

  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

void Module::~Module(Module *this)
{
  *(void *)this = off_26C205918;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 208));
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  std::string::size_type v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100]((void *)this + 14);
  char v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*((void **)this + 2));
}

uint64_t std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](void *a1)
{
  std::string::size_type v2 = (void **)a1[1];
  char v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    char v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    long long v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        std::chrono::steady_clock::time_point v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      std::string::size_type v2 = (void **)a1[1];
      char v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      char v3 = (void **)a1[2];
      std::string::size_type v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<char **>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<Observer>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<Observer>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v6 = *(void **)a1;
    operator delete(v6);
  }
}

void AnetecStreamingDecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)v3 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(*(void *)v3 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v109, *(void *)(v5 + 8), *(void *)(v5 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEFAULT, "Anetec streaming decoder module start.", buf, 2u);
  }
  std::string::size_type v85 = v4;
  Diagnostics::log(5, "Anetec streaming decoder module start.", v7);
  std::mutex::lock((std::mutex *)(a1 + 296));
  *(unsigned char *)(a1 + 288) = 1;
  v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)buf = 0;
  int v107 = 0;
  uint64_t v108 = 0;
  uint64_t v8 = v109;
  if (v110 - v109 != 24)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 48;
    do
    {
      uint64_t v103 = 0;
      float v104 = 0;
      uint64_t v105 = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&v103, v10 + v8 - 48, v10 + v8, 2uLL);
      std::string::basic_string[abi:ne180100]<0>(&v114, "code_chunk");
      InferenceEngine::DataTensor::build_from_2d_array<float>(&v103, &v102);
      uint64_t v11 = *(void *)(a1 + 272);
      long long v12 = v102;
      long long v102 = 0uLL;
      unint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
      *(_OWORD *)uint64_t v11 = v12;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (*((void *)&v102 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
      }
      if (v115 < 0) {
        operator delete((void *)v114);
      }
      if (!(*(_DWORD *)(v5 + 32) | v9))
      {
        uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "encoder_output_dim");
        LODWORD(__p[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v14, (int *)__p);
        unint64_t v15 = SLODWORD(__p[0]);
        LODWORD(v99[0]) = 0;
        std::vector<float>::vector(__p, 6uLL, v99);
        std::vector<std::vector<float>>::vector(&v102, v15, (uint64_t)__p);
        std::vector<std::vector<std::vector<float>>>::vector(&v114, 1uLL, (uint64_t *)&v102);
        v100[0] = &v102;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        uint64_t v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v100[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v16, (int *)v100);
        uint64_t v17 = SLODWORD(v100[0]);
        LODWORD(v98[0]) = 0;
        std::vector<float>::vector(v100, 1uLL, v98);
        std::vector<std::vector<float>>::vector(__p, 16 * v17, (uint64_t)v100);
        std::vector<std::vector<std::vector<float>>>::vector(&v102, 1uLL, (uint64_t *)__p);
        v99[0] = __p;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        if (v100[0])
        {
          v100[1] = v100[0];
          operator delete(v100[0]);
        }
        long long v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v99[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v18, (int *)v99);
        uint64_t v19 = SLODWORD(v99[0]);
        LODWORD(v97[0]) = 0;
        std::vector<float>::vector(v99, 0x36uLL, v97);
        std::vector<std::vector<float>>::vector(v100, 8 * v19, (uint64_t)v99);
        std::vector<std::vector<std::vector<float>>>::vector(__p, 3uLL, (uint64_t *)v100);
        v98[0] = v100;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v98);
        if (v99[0])
        {
          v99[1] = v99[0];
          operator delete(v99[0]);
        }
        uint64_t v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v98[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v20, (int *)v98);
        uint64_t v21 = SLODWORD(v98[0]);
        LODWORD(v96[0]) = 0;
        std::vector<float>::vector(v98, 0xAuLL, v96);
        std::vector<std::vector<float>>::vector(v99, 8 * v21, (uint64_t)v98);
        std::vector<std::vector<std::vector<float>>>::vector(v100, 1uLL, (uint64_t *)v99);
        v97[0] = v99;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
        if (v98[0])
        {
          v98[1] = v98[0];
          operator delete(v98[0]);
        }
        uint64_t v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v97[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v22, (int *)v97);
        uint64_t v23 = SLODWORD(v97[0]);
        LODWORD(v95[0]) = 0;
        std::vector<float>::vector(v97, 0x36uLL, v95);
        std::vector<std::vector<float>>::vector(v98, 4 * v23, (uint64_t)v97);
        std::vector<std::vector<std::vector<float>>>::vector(v99, 3uLL, (uint64_t *)v98);
        v96[0] = v98;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
        if (v97[0])
        {
          v97[1] = v97[0];
          operator delete(v97[0]);
        }
        uint64_t v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v96[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v24, (int *)v96);
        uint64_t v25 = SLODWORD(v96[0]);
        LODWORD(v94[0]) = 0;
        std::vector<float>::vector(v96, 0x3CuLL, v94);
        std::vector<std::vector<float>>::vector(v97, 4 * v25, (uint64_t)v96);
        std::vector<std::vector<std::vector<float>>>::vector(v98, 1uLL, (uint64_t *)v97);
        v95[0] = v97;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
        if (v96[0])
        {
          v96[1] = v96[0];
          operator delete(v96[0]);
        }
        uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v95[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v26, (int *)v95);
        uint64_t v27 = SLODWORD(v95[0]);
        LODWORD(v92[0]) = 0;
        std::vector<float>::vector(v95, 0x36uLL, v92);
        std::vector<std::vector<float>>::vector(v96, 2 * v27, (uint64_t)v95);
        std::vector<std::vector<std::vector<float>>>::vector(v97, 3uLL, (uint64_t *)v96);
        v94[0] = v96;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
        if (v95[0])
        {
          v95[1] = v95[0];
          operator delete(v95[0]);
        }
        uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v94[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v28, (int *)v94);
        uint64_t v29 = SLODWORD(v94[0]);
        LODWORD(v91[0]) = 0;
        std::vector<float>::vector(v94, 0xF0uLL, v91);
        std::vector<std::vector<float>>::vector(v95, 2 * v29, (uint64_t)v94);
        std::vector<std::vector<std::vector<float>>>::vector(v96, 1uLL, (uint64_t *)v95);
        v92[0] = v95;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
        if (v94[0])
        {
          v94[1] = v94[0];
          operator delete(v94[0]);
        }
        uint64_t v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v92[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v30, (int *)v92);
        unint64_t v31 = SLODWORD(v92[0]);
        LODWORD(v112) = 0;
        std::vector<float>::vector(v92, 0x36uLL, &v112);
        std::vector<std::vector<float>>::vector(v94, v31, (uint64_t)v92);
        std::vector<std::vector<std::vector<float>>>::vector(v95, 3uLL, (uint64_t *)v94);
        v91[0] = v94;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
        if (v92[0])
        {
          v92[1] = v92[0];
          operator delete(v92[0]);
        }
        uint64_t v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 376), "ndim");
        LODWORD(v91[0]) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v32, (int *)v91);
        unint64_t v33 = SLODWORD(v91[0]);
        int v90 = 0;
        std::vector<float>::vector(v91, 6uLL, &v90);
        std::vector<std::vector<float>>::vector(v92, v33, (uint64_t)v91);
        std::vector<std::vector<std::vector<float>>>::vector(v94, 1uLL, (uint64_t *)v92);
        unsigned int v112 = v92;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v112);
        if (v91[0])
        {
          v91[1] = v91[0];
          operator delete(v91[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)&v114, v91);
        uint64_t v34 = *(void *)(a1 + 272);
        long long v35 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        uint64_t v36 = *(std::__shared_weak_count **)(v34 + 24);
        *(_OWORD *)(v34 + 16) = v35;
        if (v36)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_1_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)&v102, v91);
        uint64_t v37 = *(void *)(a1 + 272);
        long long v38 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        unsigned int v39 = *(std::__shared_weak_count **)(v37 + 40);
        *(_OWORD *)(v37 + 32) = v38;
        if (v39)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_1");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, v91);
        uint64_t v40 = *(void *)(a1 + 272);
        long long v41 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        uint64_t v42 = *(std::__shared_weak_count **)(v40 + 56);
        *(_OWORD *)(v40 + 48) = v41;
        if (v42)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_2_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v100, v91);
        uint64_t v43 = *(void *)(a1 + 272);
        long long v44 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        uint64_t v45 = *(std::__shared_weak_count **)(v43 + 72);
        *(_OWORD *)(v43 + 64) = v44;
        if (v45)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_2");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v99, v91);
        uint64_t v46 = *(void *)(a1 + 272);
        long long v47 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        uint64_t v48 = *(std::__shared_weak_count **)(v46 + 88);
        *(_OWORD *)(v46 + 80) = v47;
        if (v48)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_3_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v98, v91);
        uint64_t v49 = *(void *)(a1 + 272);
        long long v50 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        char v51 = *(std::__shared_weak_count **)(v49 + 104);
        *(_OWORD *)(v49 + 96) = v50;
        if (v51)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_3");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v97, v91);
        uint64_t v52 = *(void *)(a1 + 272);
        long long v53 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        int v54 = *(std::__shared_weak_count **)(v52 + 120);
        *(_OWORD *)(v52 + 112) = v53;
        if (v54)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_4_0");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v96, v91);
        uint64_t v55 = *(void *)(a1 + 272);
        long long v56 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        char v57 = *(std::__shared_weak_count **)(v55 + 136);
        *(_OWORD *)(v55 + 128) = v56;
        if (v57)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_4");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v95, v91);
        uint64_t v58 = *(void *)(a1 + 272);
        long long v59 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        int v60 = *(std::__shared_weak_count **)(v58 + 152);
        *(_OWORD *)(v58 + 144) = v59;
        if (v60)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v92, "ibuf_5");
        InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)v94, v91);
        uint64_t v61 = *(void *)(a1 + 272);
        long long v62 = *(_OWORD *)v91;
        v91[0] = 0;
        v91[1] = 0;
        char v63 = *(std::__shared_weak_count **)(v61 + 168);
        *(_OWORD *)(v61 + 160) = v62;
        if (v63)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          if (v91[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1]);
          }
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(void *)(a1 + 272) + 48), 1);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(void *)(a1 + 272) + 80), 1);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(void *)(a1 + 272) + 112), 1);
        InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(*(void *)(a1 + 272) + 144), 1);
        v92[0] = v94;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
        v94[0] = v95;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
        v95[0] = v96;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v95);
        v96[0] = v97;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
        v97[0] = v98;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
        v98[0] = v99;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v98);
        v99[0] = v100;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        v100[0] = __p;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
        __p[0] = &v102;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(void *)&long long v102 = &v114;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
      }
      uint64_t v64 = *(void *)(a1 + 360);
      char v65 = *(std::__shared_weak_count **)(a1 + 280);
      uint64_t v88 = *(void *)(a1 + 272);
      uint64_t v89 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v113[0] = &off_26C1EE0C8;
      v113[1] = a1;
      v113[2] = buf;
      v113[3] = v113;
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v64 + 96))(v64, &v88, v113);
      std::__function::__value_func<int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::~__value_func[abi:ne180100](v113);
      if (v89) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      }
      *(void *)&long long v114 = &v103;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      ++v9;
      uint64_t v8 = v109;
      v10 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3) - 1 > v9);
  }
  int v66 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v66 + 8) = 0u;
  *(void *)int v66 = off_26C215330;
  *((_OWORD *)v66 + 2) = 0u;
  *((void *)v66 + 3) = v66 + 32;
  uint64_t v67 = (uint64_t)(v66 + 24);
  uint64_t v68 = (char *)operator new(0x90uLL);
  char v69 = v68;
  *((void *)v68 + 1) = 0;
  *((void *)v68 + 2) = 0;
  *(void *)uint64_t v68 = off_26C216718;
  *(_OWORD *)(v68 + 88) = 0u;
  *(_OWORD *)(v68 + 72) = 0u;
  *(_OWORD *)(v68 + 56) = 0u;
  *(_OWORD *)(v68 + 40) = 0u;
  *(_OWORD *)(v68 + 104) = 0u;
  *(_OWORD *)(v68 + 120) = 0u;
  *((void *)v68 + 16) = 0;
  *((void *)v68 + 17) = 0;
  *(_OWORD *)(v68 + 24) = 0u;
  *((_WORD *)v68 + 12) = 257;
  *((void *)v68 + 12) = 0;
  *((_OWORD *)v68 + 4) = 0u;
  *((_OWORD *)v68 + 5) = 0u;
  *((_OWORD *)v68 + 2) = 0u;
  *((_OWORD *)v68 + 3) = 0u;
  *((void *)v68 + 15) = 0;
  *((_WORD *)v68 + 68) = 0;
  uint64_t v103 = (uint64_t *)(v68 + 24);
  float v104 = v68;
  long long v70 = *(char **)buf;
  uint64_t v71 = (uint64_t)v107;
  if (*(char **)buf != v107)
  {
    int v72 = *(float **)buf;
    do
    {
      *int v72 = *v72 * 32767.0;
      ++v72;
    }
    while (v72 != (float *)v71);
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v68 + 80, v70, v71, (v71 - (uint64_t)v70) >> 2);
  *((_WORD *)v69 + 12) = *(_WORD *)(v5 + 36);
  Agglomerate::set<std::shared_ptr<AudioSegmentation>>(v67, (unint64_t *)&v103);
  uint64_t v73 = *a2;
  std::string v74 = *(void **)(*a2 + 8);
  {
    std::string::size_type v76 = *(std::__shared_weak_count **)(*(void *)v75 + 16);
    *(void *)&long long v114 = *(void *)(*(void *)v75 + 8);
    *((void *)&v114 + 1) = v76;
    if (v76) {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v67, (unint64_t *)&v114);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    uint64_t v73 = *a2;
    std::string v74 = *(void **)(*a2 + 8);
  }
  {
    char v78 = *(std::__shared_weak_count **)(*(void *)v77 + 16);
    *(void *)&long long v114 = *(void *)(*(void *)v77 + 8);
    *((void *)&v114 + 1) = v78;
    if (v78) {
      atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Agglomerate::set<std::shared_ptr<FrontendFeature>>(v67, (unint64_t *)&v114);
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
  }
  std::string v86 = v66 + 24;
  std::string v87 = (std::__shared_weak_count *)v66;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v66 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, char **))(*(void *)a1 + 72))(a1, &v86);
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  int v107 = *(char **)buf;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v79 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v80.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v114) = 134217984;
    *(double *)((char *)&v114 + 4) = (double)((v80.__d_.__rep_ - v83.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v79, OS_LOG_TYPE_DEFAULT, "Anetec streaming decoder module inference time (per cache): %.3f s", (uint8_t *)&v114, 0xCu);
  }
  v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Anetec streaming decoder module inference time (per cache): %.3f s", v82, (double)((v81.__d_.__rep_ - v83.__d_.__rep_) / 1000000) / 1000.0);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v69);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
  if (*(void *)buf)
  {
    int v107 = *(char **)buf;
    operator delete(*(void **)buf);
  }
  std::mutex::unlock((std::mutex *)(a1 + 296));
  *(void *)buf = &v109;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
}

void sub_20D2B5FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  char v57 = *(void **)(v55 - 224);
  if (v57)
  {
    *(void *)(v55 - 216) = v57;
    operator delete(v57);
  }
  std::mutex::unlock(a12);
  *(void *)(v55 - 224) = v55 - 192;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 224));
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::map<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__find_equal<std::type_index>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 40;
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D2B6524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, 4 * v15);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void Agglomerate::set<std::shared_ptr<AudioSegmentation>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206518;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206518;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

uint64_t std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__count_unique<std::type_index>(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    unint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = 1;
    do
    {
      unint64_t v5 = *(void *)(v2[4] + 8);
      if (!std::type_info::before[abi:ne180100](v3, v5))
      {
        if (!std::type_info::before[abi:ne180100](v5, v3)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

void Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206718;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206718;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::set<std::shared_ptr<FrontendFeature>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206478;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206478;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__find_equal<std::type_index>(a1, &v12, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    long long v6 = (uint64_t *)operator new(0x30uLL);
    v6[4] = **a3;
    v6[5] = 0;
    uint64_t v8 = v12;
    *long long v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    std::__shared_weak_count *v7 = v6;
    uint64_t v9 = **(void **)a1;
    uint64_t v10 = v6;
    if (v9)
    {
      *(void *)a1 = v9;
      uint64_t v10 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v10);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void Agglomerate::ItemHolder<std::shared_ptr<FrontendFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206478;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<FrontendFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206478;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::__find_equal<std::type_index>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = *(void *)(a3 + 8);
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = *(void *)(v4[4] + 8);
        if (!std::type_info::before[abi:ne180100](v6, v8)) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (!std::type_info::before[abi:ne180100](v8, v6)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v7;
  return v5;
}

BOOL std::type_info::before[abi:ne180100](unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0 && (a2 & 0x8000000000000000) != 0) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  }
  else {
    return a1 < a2;
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<RateMarker>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206718;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<std::vector<RateMarker>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206718;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<AudioSegmentation>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206518;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<AudioSegmentation>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206518;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<AudioSegmentation>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<AudioSegmentation>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)(a1 + 8);
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<Unit>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Unit>::destroy[abi:ne180100](uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 160);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
  }
}

void std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<MarkerRecord>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

void std::__shared_ptr_emplace<AudioSegmentation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AudioSegmentation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char **std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::target_type()
{
}

uint64_t std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "AnetecStreamingDecoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "AnetecStreamingDecoder inference cancelled.", v6);
    uint64_t v7 = 1;
    if (v2) {
LABEL_7:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = *(void *)(v4 + 272);
    uint64_t v13 = *(void *)(v11 + 16);
    uint64_t v12 = *(std::__shared_weak_count **)(v11 + 24);
    uint64_t v73 = v13;
    std::string v74 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v10, &v73);
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    uint64_t v14 = *(void *)(v3 + 32);
    uint64_t v15 = *(void *)(v4 + 272);
    uint64_t v17 = *(void *)(v15 + 32);
    uint64_t v16 = *(std::__shared_weak_count **)(v15 + 40);
    uint64_t v71 = v17;
    int v72 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v14, &v71);
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    uint64_t v18 = *(void *)(v3 + 48);
    uint64_t v19 = *(void *)(v4 + 272);
    uint64_t v21 = *(void *)(v19 + 48);
    uint64_t v20 = *(std::__shared_weak_count **)(v19 + 56);
    uint64_t v69 = v21;
    long long v70 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v18, &v69);
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    uint64_t v22 = *(void *)(v3 + 64);
    uint64_t v23 = *(void *)(v4 + 272);
    uint64_t v25 = *(void *)(v23 + 64);
    uint64_t v24 = *(std::__shared_weak_count **)(v23 + 72);
    uint64_t v67 = v25;
    uint64_t v68 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v22, &v67);
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
    uint64_t v26 = *(void *)(v3 + 80);
    uint64_t v27 = *(void *)(v4 + 272);
    uint64_t v29 = *(void *)(v27 + 80);
    uint64_t v28 = *(std::__shared_weak_count **)(v27 + 88);
    uint64_t v65 = v29;
    int v66 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v26, &v65);
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    uint64_t v30 = *(void *)(v3 + 96);
    uint64_t v31 = *(void *)(v4 + 272);
    uint64_t v33 = *(void *)(v31 + 96);
    uint64_t v32 = *(std::__shared_weak_count **)(v31 + 104);
    uint64_t v63 = v33;
    uint64_t v64 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v30, &v63);
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    uint64_t v34 = *(void *)(v3 + 112);
    uint64_t v35 = *(void *)(v4 + 272);
    uint64_t v37 = *(void *)(v35 + 112);
    uint64_t v36 = *(std::__shared_weak_count **)(v35 + 120);
    uint64_t v61 = v37;
    long long v62 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v34, &v61);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    uint64_t v38 = *(void *)(v3 + 128);
    uint64_t v39 = *(void *)(v4 + 272);
    uint64_t v41 = *(void *)(v39 + 128);
    uint64_t v40 = *(std::__shared_weak_count **)(v39 + 136);
    uint64_t v59 = v41;
    int v60 = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v38, &v59);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    uint64_t v42 = *(void *)(v3 + 144);
    uint64_t v43 = *(void *)(v4 + 272);
    uint64_t v45 = *(void *)(v43 + 144);
    long long v44 = *(std::__shared_weak_count **)(v43 + 152);
    uint64_t v57 = v45;
    uint64_t v58 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v42, &v57);
    if (v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    }
    uint64_t v46 = *(void *)(v3 + 160);
    uint64_t v47 = *(void *)(v4 + 272);
    uint64_t v49 = *(void *)(v47 + 160);
    uint64_t v48 = *(std::__shared_weak_count **)(v47 + 168);
    uint64_t v55 = v49;
    long long v56 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v46, &v55);
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    InferenceEngine::DataTensor::get_3d_array<float>(*(InferenceEngine::DataTensor **)v3, v51);
    uint64_t v50 = *(void *)v51[0];
    long long v53 = 0;
    uint64_t v54 = 0;
    *(void *)buf = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)v50, *(void *)(v50 + 8), (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 2);
    uint64_t v75 = (void **)v51;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v75);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(*(void *)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), *(char **)buf, v53, (uint64_t)&v53[-*(void *)buf] >> 2);
    if (*(void *)buf)
    {
      long long v53 = *(char **)buf;
      operator delete(*(void **)buf);
    }
    uint64_t v7 = 0;
    if (v2) {
      goto LABEL_7;
    }
  }
  return v7;
}

void sub_20D2B751C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C1EE0C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C1EE0C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecStreamingDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AnetecStreamingDecoderBuf>)>::~__func()
{
}

void std::__shared_ptr_emplace<Agglomerate>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Agglomerate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Agglomerate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AnetecStreamingDecoderModule::prepare(AnetecStreamingDecoderModule *this)
{
  if (!*((unsigned char *)this + 288))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    uint64_t v4 = (char *)operator new(0x48uLL);
    *(void *)uint64_t v4 = off_26C215E58;
    *((void *)v4 + 1) = 0;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *((_WORD *)v4 + 12) = 257;
    *((void *)v4 + 4) = 0;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 5) = 0;
    *((void *)v4 + 6) = 0;
    *((_DWORD *)v4 + 14) = 0;
    v16[0] = (unint64_t)(v4 + 24);
    v16[1] = (unint64_t)v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "num_vqs");
    unsigned int v11 = 8;
    int v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 376, (const void **)__p, &v11);
    int v10 = 0;
    std::vector<float>::vector(buf, v5, &v10);
    std::vector<std::vector<float>>::resize((uint64_t *)v4 + 4, 2uLL, (uint64_t)buf);
    if (*(void *)buf)
    {
      uint64_t v15 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v6 = (char *)operator new(0xB0uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)unint64_t v6 = off_26C215FA8;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *((void *)v6 + 21) = 0;
    *(_OWORD *)(v6 + 24) = 0u;
    *(void *)buf = v6 + 24;
    uint64_t v15 = v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 8) = 0u;
    *(void *)uint64_t v7 = off_26C215330;
    *((_OWORD *)v7 + 2) = 0u;
    *((void *)v7 + 3) = v7 + 32;
    Agglomerate::set<std::shared_ptr<AcousticFeature>>((uint64_t)(v7 + 24), v16);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v7 + 24), (unint64_t *)buf);
    unint64_t v8 = v7 + 24;
    uint64_t v9 = (std::__shared_weak_count *)v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(AnetecStreamingDecoderModule *, char **))(*(void *)this + 80))(this, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
}

void sub_20D2B79B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
  unint64_t v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      uint64_t v21 = (void *)(v5 + 24 * a2);
      if (v6 != v21)
      {
        uint64_t v22 = (void *)a1[1];
        do
        {
          uint64_t v24 = (void *)*(v22 - 3);
          v22 -= 3;
          uint64_t v23 = v24;
          if (v24)
          {
            *(v6 - 2) = v23;
            operator delete(v23);
          }
          unint64_t v6 = v22;
        }
        while (v22 != v21);
      }
      a1[1] = (uint64_t)v21;
    }
  }
  else
  {
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v11 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v6) >> 3) >= v8)
    {
      uint64_t v25 = &v6[3 * v8];
      uint64_t v26 = 24 * a2 - 24 * v7;
      do
      {
        *unint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v6 += 3;
        v26 -= 24;
      }
      while (v26);
      a1[1] = (uint64_t)v25;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = a1 + 2;
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= a2) {
        uint64_t v13 = a2;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v13;
      }
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v10, v14);
      uint64_t v16 = &v15[24 * v7];
      v27[0] = v15;
      v27[1] = v16;
      uint64_t v28 = v16;
      uint64_t v29 = &v15[24 * v17];
      uint64_t v18 = 3 * a2;
      uint64_t v19 = &v15[24 * a2];
      uint64_t v20 = 8 * v18 - 24 * v7;
      do
      {
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v16 += 24;
        v20 -= 24;
      }
      while (v20);
      uint64_t v28 = v19;
      std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v27);
      std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v27);
    }
  }
}

void sub_20D2B7BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<AcousticFeature>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v8 = (char ***)off_26C206458;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  unint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    unint64_t v8 = (char ***)off_26C206458;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<AcousticFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206458;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<AcousticFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206458;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<FrontendFeature>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<FrontendFeature>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)a1;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<Prompt>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<WordFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::allocator<PhoneFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<PhoneFeature>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::allocator<WordFeature>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void std::allocator<Prompt>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<FrontendFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FrontendFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AcousticFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<AcousticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AcousticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AnetecStreamingDecoderModule::~AnetecStreamingDecoderModule(AnetecStreamingDecoderModule *this)
{
  AnetecStreamingDecoderModule::~AnetecStreamingDecoderModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = off_26C1EDA60;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 48, *((unsigned __int8 *)this + 376));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  Module::~Module(this);
}

void Module::Module(Module *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 850045863;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *(void *)this = off_26C205918;
  *((void *)this + 1) = (char *)this + 16;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((unsigned char *)this + 160) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  MEMORY[0x210559270]((char *)this + 208);
}

void sub_20D2B841C(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 207) < 0) {
    operator delete(*(void **)(v2 + 184));
  }
  long long v6 = *(std::__shared_weak_count **)(v2 + 176);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](v3);
  unint64_t v7 = *(std::__shared_weak_count **)(v2 + 104);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::mutex::~mutex(v1);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get<VoiceConfig>(void *a1, long long **a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 7));
  uint64_t v5 = (uint64_t)(a2 + 4);
  {
    long long v6 = *a2;
    unint64_t v7 = (std::__shared_weak_count *)operator new(0x38uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)off_26C2163D0;
    unint64_t v8 = (void (***)(VoiceConfigImpl *__hidden))&v7[1];
    long long v9 = off_26C201700;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_26C201700;
    v7[1].__shared_owners_ = 0;
    v7[1].__shared_weak_owners_ = 0;
    v7[2].__vftable = 0;
    v13[0] = (unint64_t)&v7[1];
    v13[1] = (unint64_t)v7;
    if (*((char *)v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
      long long v9 = *v8;
    }
    else
    {
      std::string v14 = *(std::string *)((unsigned char *)v6 + 1);
    }
    std::string __p = v14;
    memset(&v14, 0, sizeof(v14));
    ((void (*)(void (***)(VoiceConfigImpl *__hidden), std::string *))v9[10])(v8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v10 = *v6;
      v14.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
    }
    std::string __p = v14;
    memset(&v14, 0, sizeof(v14));
    ((void (*)(void (***)(VoiceConfigImpl *__hidden), std::string *))(*v8)[10])(v8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    Agglomerate::set<std::shared_ptr<VoiceConfig>>(v5, v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  *a1 = *(void *)(*(void *)v11 + 8);
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D2B8684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  std::recursive_mutex::unlock(v23);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = off_26C219150;
  uint64_t result = InferenceEngine::MLInferenceModel::MLInferenceModel(v6 + 3, a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_20D2B874C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::MLInferenceModel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<InferenceEngine::MLInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<InferenceEngine::MLInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::set<std::shared_ptr<VoiceConfig>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v8 = (char ***)off_26C206398;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  unint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    unint64_t v8 = (char ***)off_26C206398;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<VoiceConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206398;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<VoiceConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206398;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void SharedObjectPool::get<SynthesizerConfig>(void *a1, uint64_t a2)
{
  unint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  uint64_t v5 = a2 + 32;
  {
    long long v6 = (char *)operator new(0x98uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)long long v6 = off_26C216910;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 28) = xmmword_20D6B49E0;
    __asm { FMOV            V1.2S, #1.0 }
    *(void *)(v6 + 44) = _D1;
    *(_OWORD *)(v6 + 52) = 0u;
    *(_OWORD *)(v6 + 68) = 0u;
    *(_OWORD *)(v6 + 84) = 0u;
    *(_OWORD *)(v6 + 100) = 0u;
    *(_OWORD *)(v6 + 116) = 0u;
    *(_OWORD *)(v6 + 132) = 0u;
    v14[0] = (unint64_t)(v6 + 24);
    v14[1] = (unint64_t)v6;
    Agglomerate::set<std::shared_ptr<SynthesizerConfig>>(v5, v14);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  uint64_t v13 = *(void *)(*(void *)v12 + 16);
  *a1 = *(void *)(*(void *)v12 + 8);
  a1[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D2B8B1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<SynthesizerConfig>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v8 = (char ***)off_26C206598;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  unint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    unint64_t v8 = (char ***)off_26C206598;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<SynthesizerConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206598;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<SynthesizerConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206598;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<SynthesizerConfig>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<SynthesizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SynthesizerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t v17 = operator new(0x38uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  char v43 = 0;
  *uint64_t v17 = 0;
  v17[1] = v9;
  uint64_t v18 = (std::string *)(v17 + 2);
  uint64_t v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v17[4] = *((void *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  void v17[5] = 0;
  v17[6] = 0;
  char v43 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v27 = operator new(8 * *(void *)&prime);
          uint64_t v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v16;
          if (*v16)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v16;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *uint64_t v30 = *v36;
                  void *v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                uint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    *uint64_t v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    uint64_t v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_20D2B9284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void AnetecDecoderBaseInference::get_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder_out");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v3 + 32))(&v14, v3, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v14, v8);
  uint64_t v4 = *(void *)v8[0];
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v9 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v9, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
  uint64_t v16 = (void **)v8;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  unint64_t v5 = (char *)v9;
  uint64_t v6 = (uint64_t)v10;
  if (v9 != v10)
  {
    unint64_t v7 = (float *)v9;
    do
    {
      float *v7 = *v7 * 32767.0;
      ++v7;
    }
    while (v7 != (float *)v6);
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(*(void *)a2 + 56), v5, v6, (v6 - (uint64_t)v5) >> 2);
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_20D2B940C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  float v22 = *(std::__shared_weak_count **)(v20 - 32);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void AnetecDecoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "codes");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)(*(void *)a2 + 8), &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  uint64_t v4 = *(void (****)(void, uint64_t *))(a1 + 296);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D2B9528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void AnetecDecoderBaseInference::inference(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "Anetec inference decoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Anetec inference decoder begin.", v7);
  char v8 = (char *)operator new(0x90uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = off_26C216718;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *((void *)v8 + 16) = 0;
  *((void *)v8 + 17) = 0;
  *((_WORD *)v8 + 12) = 257;
  *((void *)v8 + 12) = 0;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((void *)v8 + 15) = 0;
  *((_WORD *)v8 + 68) = 0;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v22 = *a2;
  BOOL v23 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[13])(a1, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[37] + 48))(a1[37]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    double v25 = (double)((v12.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEFAULT, "Anetec decoder inference time: %.3f s", buf, 0xCu);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Anetec decoder inference time: %.3f s", v14, (double)((v13.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0);
  uint64_t v20 = v8 + 24;
  float v21 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  ((void (*)(void **, char **))(*a1)[14])(a1, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  (*(void (**)(void *))(*a1[37] + 56))(a1[37]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEBUG, "Anetec inference decoder end.", buf, 2u);
  }
  Diagnostics::log(7, "Anetec inference decoder end.", v16);
  uint64_t v18 = v8 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v17 = *(void *)(a3 + 24);
  if (!v17) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char **))(*(void *)v17 + 48))(v17, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_20D2B9978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v16 + 296) + 56))(*(void *)(v16 + 296));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D2B9A10(_Unwind_Exception *a1)
{
}

void sub_20D2B9A1C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D2B9A24);
  }
  __clang_call_terminate(a1);
}

void AnetecDecoderBaseInference::~AnetecDecoderBaseInference(AnetecDecoderBaseInference *this)
{
  *(void *)this = off_26C1ED998;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C1ED998;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void AnetecDecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)v4 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "Anetec decoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "Anetec decoder module start.", v8);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(unsigned char *)(a1 + 272) = 1;
  uint64_t v9 = *(void *)(a1 + 344);
  uint64_t v10 = v6;
  uint64_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v13[0] = &off_26C1EDEB8;
  v13[1] = a1;
  unint64_t v13[2] = a2;
  v13[3] = v13;
  (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v9 + 96))(v9, &v10, v13);
  std::__function::__value_func<int ()(std::shared_ptr<AudioSegmentation>)>::~__value_func[abi:ne180100](v13);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D2B9CAC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(std::shared_ptr<AudioSegmentation>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::mutex::unlock(v5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<int ()(std::shared_ptr<AudioSegmentation>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::target_type()
{
}

uint64_t std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  unint64_t v18 = *a2;
  uint64_t v19 = v2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  if (v3[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "AnetecDecoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "AnetecDecoder inference cancelled.", v5, v18, v19);
    if (v2) {
LABEL_7:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    char v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(void *)char v8 = off_26C215330;
    *((_OWORD *)v8 + 2) = 0u;
    *((void *)v8 + 3) = v8 + 32;
    uint64_t v9 = (uint64_t)(v8 + 24);
    uint64_t v10 = *(uint64_t **)(a1 + 16);
    uint64_t v11 = *v10;
    std::chrono::steady_clock::time_point v12 = *(void **)(*v10 + 8);
    {
      std::string v14 = *(std::__shared_weak_count **)(*(void *)v13 + 16);
      *(void *)buf = *(void *)(*(void *)v13 + 8);
      float v21 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v9, (unint64_t *)buf);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      unint64_t v15 = *(uint64_t **)(a1 + 16);
      uint64_t v11 = *v15;
      std::chrono::steady_clock::time_point v12 = *(void **)(*v15 + 8);
    }
    {
      uint64_t v17 = *(std::__shared_weak_count **)(*(void *)v16 + 16);
      *(void *)buf = *(void *)(*(void *)v16 + 8);
      float v21 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Agglomerate::set<std::shared_ptr<FrontendFeature>>(v9, (unint64_t *)buf);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    Agglomerate::set<std::shared_ptr<AudioSegmentation>>(v9, &v18);
    *(void *)buf = v8 + 24;
    float v21 = (std::__shared_weak_count *)v8;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(unsigned char *, uint8_t *))(*(void *)v3 + 72))(v3, buf);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    if (v2) {
      goto LABEL_7;
    }
  }
  return 1;
}

void sub_20D2BA004(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void sub_20D2BA060()
{
  if (!v0) {
    JUMPOUT(0x20D2BA058);
  }
  JUMPOUT(0x20D2BA050);
}

__n128 std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C1EDEB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_26C1EDEB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<AnetecDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AudioSegmentation>)>::~__func()
{
}

void AnetecDecoderModule::prepare(AnetecDecoderModule *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  if (!*((unsigned char *)this + 272))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20CD80000, v3, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v4);
    uint64_t v5 = (char *)operator new(0x48uLL);
    *(void *)uint64_t v5 = off_26C215E58;
    *((void *)v5 + 1) = 0;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *((_WORD *)v5 + 12) = 257;
    *((void *)v5 + 4) = 0;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 5) = 0;
    *((void *)v5 + 6) = 0;
    *((_DWORD *)v5 + 14) = 0;
    v17[0] = (unint64_t)(v5 + 24);
    v17[1] = (unint64_t)v5;
    std::string::basic_string[abi:ne180100]<0>(__p, "num_vqs");
    unsigned int v12 = 8;
    int v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 360, (const void **)__p, &v12);
    int v11 = 0;
    std::vector<float>::vector(buf, v6, &v11);
    std::vector<std::vector<float>>::resize((uint64_t *)v5 + 4, 0x64uLL, (uint64_t)buf);
    if (*(void *)buf)
    {
      uint64_t v16 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v7 = (char *)operator new(0xB0uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)unint64_t v7 = off_26C215FA8;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *((void *)v7 + 21) = 0;
    *(_OWORD *)(v7 + 24) = 0u;
    *(void *)buf = v7 + 24;
    uint64_t v16 = v7;
    char v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 8) = 0u;
    *(void *)char v8 = off_26C215330;
    *((_OWORD *)v8 + 2) = 0u;
    *((void *)v8 + 3) = v8 + 32;
    Agglomerate::set<std::shared_ptr<AcousticFeature>>((uint64_t)(v8 + 24), v17);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v8 + 24), (unint64_t *)buf);
    uint64_t v9 = v8 + 24;
    uint64_t v10 = (std::__shared_weak_count *)v8;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(AnetecDecoderModule *, char **))(*(void *)this + 80))(this, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  std::mutex::unlock(v2);
}

void sub_20D2BA3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

void AnetecDecoderModule::~AnetecDecoderModule(AnetecDecoderModule *this)
{
  AnetecDecoderModule::~AnetecDecoderModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C1ED818;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

void EspressoParallelNeuralAMInference::inference(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v170 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t v99 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEFAULT, "Parallel AM inference begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference begin.", v7);
  char v8 = (char *)operator new(0x88uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = off_26C215E20;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *((_WORD *)v8 + 12) = 257;
  *((_OWORD *)v8 + 2) = 0u;
  *(void *)(v8 + 126) = 0;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    v8[132] = FastSpeechUtils::has_whisper(v9[1], v9[2]);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    v8[132] = FastSpeechUtils::has_whisper(v9[1], v9[2]);
  }
  uint64_t v11 = a1 + 416;
  if (*(char *)(a1 + 439) < 0) {
    uint64_t v11 = *(void *)(a1 + 416);
  }
  uint64_t v12 = a1 + 440;
  if (*(char *)(a1 + 463) < 0) {
    uint64_t v12 = *(void *)(a1 + 440);
  }
  uint64_t v13 = operator new(0x10uLL);
  int v155 = v13 + 2;
  *uint64_t v13 = v11;
  v13[1] = v12;
  int v153 = v13;
  float v154 = v13 + 2;
  char v14 = *a2;
  uint64_t v16 = (*a2)[4];
  uint64_t v15 = (*a2)[5];
  uint64_t v17 = (int *)operator new(8uLL);
  v152.__begin_ = v17;
  *(void *)uint64_t v17 = ((unint64_t)(v15 - v16) >> 2) | 0x100000000;
  v152.__end_cap_.__value_ = v17 + 2;
  v152.__end_ = v17 + 2;
  unint64_t v18 = (int *)operator new(8uLL);
  v151.__begin_ = v18;
  *(void *)unint64_t v18 = 0x100000001;
  v151.__end_cap_.__value_ = v18 + 2;
  v151.__end_ = v18 + 2;
  uint64_t v19 = (int *)operator new(8uLL);
  v150.__begin_ = v19;
  *(void *)uint64_t v19 = 0;
  v150.__end_cap_.__value_ = v19 + 2;
  v150.__end_ = v19 + 2;
  uint64_t v20 = (int *)operator new(8uLL);
  v149.__begin_ = v20;
  *(void *)uint64_t v20 = 0;
  v149.__end_cap_.__value_ = v20 + 2;
  v149.__end_ = v20 + 2;
  float v21 = (int *)operator new(8uLL);
  v148.__begin_ = v21;
  *(void *)float v21 = 0;
  v148.__end_cap_.__value_ = v21 + 2;
  v148.__end_ = v21 + 2;
  uint64_t v22 = (int *)operator new(8uLL);
  v147.__begin_ = v22;
  *(void *)uint64_t v22 = 0x100000002;
  v147.__end_cap_.__value_ = v22 + 2;
  v147.__end_ = v22 + 2;
  std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(&v145, v14 + 15, v14 + 24, v14 + 33, v14 + 18, v14 + 27, v14 + 36, v14 + 21, v14 + 30, v14 + 39);
  if (*(unsigned char *)(a1 + 224))
  {
    BOOL v23 = v146;
    v144[0] = v145;
    v144[1] = (uint64_t)v146;
    if (v146) {
      atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(a1 + 224, v144, (uint64_t)&v153, &v152, &v151, &v150, &v149, &v148, &v147);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  *(float *)buf = (float)*((int *)*a2 + 90);
  std::vector<float>::vector(v143, 1uLL, buf);
  unint64_t v24 = (int *)(*a2)[42];
  double v25 = (int *)(*a2)[43];
  uint64_t v142 = 0;
  int v140 = 0;
  int v141 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v140, v24, v25, v25 - v24);
  if (*(char *)(a1 + 511) < 0) {
    uint64_t v26 = *(void *)(a1 + 496);
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(a1 + 511);
  }
  uint64_t v27 = (const std::string::value_type **)(a1 + 488);
  if (v26) {
    EspressoParallelNeuralAMInferenceBase::add_language_id_inputs((uint64_t *)(a1 + 488), &v140, (uint64_t)&v153, &v152, &v151, &v150, &v149, &v148, &v147);
  }
  if (*(char *)(a1 + 487) < 0) {
    uint64_t v28 = *(void *)(a1 + 472);
  }
  else {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 487);
  }
  if (v28) {
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 464), v143, (uint64_t)&v153, &v152, &v151, &v150, &v149, &v148, &v147);
  }
  std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>((uint64_t *)&v138, *a2 + 46);
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v29 = v139;
    v137[0] = v138;
    v137[1] = v139;
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(a1 + 224, (uint64_t)v137, (uint64_t)&v153, &v152, &v151, &v150, &v149, &v148, &v147);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  int v100 = (unsigned char *)(a1 + 224);
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  begiuint64_t n = v147.__begin_;
  int v31 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape input");
  if (v31)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v59 = v136;
    int v60 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    long long v62 = __p;
    if (v59 < 0) {
      long long v62 = v60;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v62, v31, status_string);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v136 < 0) {
    operator delete(__p[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint8x8_t v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = (double)((v33.__d_.__rep_ - v30.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v32, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso reshaping time: %.3f s", v35, (double)((v34.__d_.__rep_ - v30.__d_.__rep_) / 1000000) / 1000.0, begin);
  int v36 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v133, "Unable to build plan");
  if (v36)
  {
    uint64_t v63 = __cxa_allocate_exception(0x10uLL);
    int v64 = v134;
    uint64_t v65 = (void **)v133[0];
    int v66 = (const char *)espresso_get_status_string();
    uint64_t v67 = v133;
    if (v64 < 0) {
      uint64_t v67 = v65;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v67, v36, v66);
    MEMORY[0x210558D40](v63, buf);
    __cxa_throw(v63, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v134 < 0) {
    operator delete(v133[0]);
  }
  unint64_t v37 = (int *)(*a2)[4];
  uint64_t v38 = (int *)(*a2)[5];
  uint64_t v132 = 0;
  int v130 = 0;
  int v131 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v130, v37, v38, v38 - v37);
  unint64_t v39 = v131;
  uint64_t v40 = v130;
  uint64_t v41 = operator new(0x10uLL);
  *uint64_t v41 = 1;
  v41[1] = (v39 - v40) >> 2;
  *(_OWORD *)buf = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  uint64_t v169 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)buf = v130;
  LODWORD(v169) = 65568;
  operator delete(v41);
  int v42 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v128, "Unable to bind input");
  if (v42)
  {
    uint64_t v68 = __cxa_allocate_exception(0x10uLL);
    int v69 = v129;
    long long v70 = (void **)v128[0];
    uint64_t v71 = (const char *)espresso_get_status_string();
    int v72 = v128;
    if (v69 < 0) {
      int v72 = v70;
    }
    StringFormatter::StringFormatter((StringFormatter *)v126, "%s Error: %d, %s", (const char *)v72, v42, v71);
    MEMORY[0x210558D40](v68, v126);
    __cxa_throw(v68, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  v122[0] = (float)(unint64_t)(((*a2)[5] - (*a2)[4]) >> 2);
  std::vector<float>::vector(v125, 1uLL, v122);
  char v43 = operator new(8uLL);
  *char v43 = 1;
  memset(v126, 0, sizeof(v126));
  uint64_t v127 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void **)&v126[0] = v125[0];
  LODWORD(v127) = 65568;
  operator delete(v43);
  int v44 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v123, "Unable to bind input_lengths");
  if (v44)
  {
    uint64_t v73 = __cxa_allocate_exception(0x10uLL);
    int v74 = v124;
    uint64_t v75 = (void **)v123[0];
    std::string::size_type v76 = (const char *)espresso_get_status_string();
    uint64_t v77 = v123;
    if (v74 < 0) {
      uint64_t v77 = v75;
    }
    StringFormatter::StringFormatter((StringFormatter *)v122, "%s Error: %d, %s", (const char *)v77, v44, v76);
    MEMORY[0x210558D40](v73, v122);
    __cxa_throw(v73, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  if (*v100)
  {
    uint64_t v45 = v146;
    v119[0] = v145;
    v119[1] = (uint64_t)v146;
    if (v146) {
      atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer((uint64_t)v100, v119, *(void *)(a1 + 560), (uint64_t)v122, (uint64_t)v121, (uint64_t)v120);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  if (*(char *)(a1 + 511) < 0)
  {
    std::string::size_type v47 = *(void *)(a1 + 496);
    uint64_t v46 = (std::string *)(a1 + 464);
    if (!v47) {
      goto LABEL_60;
    }
    std::string::__init_copy_ctor_external(&v116, *v27, v47);
  }
  else
  {
    uint64_t v46 = (std::string *)(a1 + 464);
    if (!*(unsigned char *)(a1 + 511)) {
      goto LABEL_60;
    }
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = *(_OWORD *)v27;
    v116.__r_.__value_.__r.__words[2] = *(void *)(a1 + 504);
  }
  EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer((uint64_t)&v116, &v140, *(void *)(a1 + 560), (uint64_t)v118);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
LABEL_60:
  if (*(char *)(a1 + 487) < 0)
  {
    std::string::size_type v48 = *(void *)(a1 + 472);
    if (!v48) {
      goto LABEL_67;
    }
    std::string::__init_copy_ctor_external(&v115, v46->__r_.__value_.__l.__data_, v48);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 487)) {
      goto LABEL_67;
    }
    std::string v115 = *v46;
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v115, v143, *(void *)(a1 + 560), (uint64_t)v117);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
LABEL_67:
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v49 = v138;
    uint64_t v50 = v139;
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer((uint64_t)v100, v49, *(void *)(a1 + 560), (uint64_t)v114);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
  }
  int v51 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v112, &byte_20D5A22AE);
  if (v51)
  {
    char v78 = __cxa_allocate_exception(0x10uLL);
    int v79 = v113;
    std::chrono::steady_clock::time_point v80 = (void **)v112[0];
    std::chrono::steady_clock::time_point v81 = (const char *)espresso_get_status_string();
    int v82 = v112;
    if (v79 < 0) {
      int v82 = v80;
    }
    StringFormatter::StringFormatter((StringFormatter *)v111, "%s Error: %d, %s", (const char *)v82, v51, v81);
    MEMORY[0x210558D40](v78, v111);
    __cxa_throw(v78, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  int v52 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v109, "Unable to bind output_mel");
  if (v52)
  {
    std::chrono::steady_clock::time_point v83 = __cxa_allocate_exception(0x10uLL);
    int v84 = v110;
    std::string::size_type v85 = (void **)v109[0];
    std::string v86 = (const char *)espresso_get_status_string();
    std::string v87 = v109;
    if (v84 < 0) {
      std::string v87 = v85;
    }
    StringFormatter::StringFormatter((StringFormatter *)v107, "%s Error: %d, %s", (const char *)v87, v52, v86);
    MEMORY[0x210558D40](v83, v107);
    __cxa_throw(v83, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v110 < 0) {
    operator delete(v109[0]);
  }
  EspressoUtils::convert_espbuffer_to_2d_vector(v107, (uint64_t)v111);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v8 + 4);
  *((_OWORD *)v8 + 2) = *(_OWORD *)v107;
  *((void *)v8 + 6) = v108;
  uint64_t v108 = 0;
  memset(v107, 0, sizeof(v107));
  *(void *)&long long v156 = v107;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  free(v111[0]);
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v8 + 56), *((void *)v8 + 4), *((void *)v8 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v8 + 5) - *((void *)v8 + 4)) >> 3));
  if (*(char *)(a1 + 559) < 0)
  {
    if (!*(void *)(a1 + 544)) {
      goto LABEL_86;
    }
  }
  else if (!*(unsigned char *)(a1 + 559))
  {
    goto LABEL_86;
  }
  int v53 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v105, "Unable to bind output_alignment");
  if (v53)
  {
    char v93 = __cxa_allocate_exception(0x10uLL);
    int v94 = v106;
    uint64_t v95 = (void **)v105[0];
    uint64_t v96 = (const char *)espresso_get_status_string();
    long long v97 = v105;
    if (v94 < 0) {
      long long v97 = v95;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v156, "%s Error: %d, %s", (const char *)v97, v53, v96);
    MEMORY[0x210558D40](v93, &v156);
    __cxa_throw(v93, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  EspressoUtils::convert_espbuffer_to_2d_vector(&v156, (uint64_t)v107);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v8 + 10);
  *((_OWORD *)v8 + 5) = v156;
  *((void *)v8 + 12) = v157;
  uint64_t v157 = 0;
  long long v156 = 0uLL;
  double v158 = (void **)&v156;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v158);
  free(*(void **)v107);
LABEL_86:
  int v54 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v103, &byte_20D5A22AE);
  if (v54)
  {
    uint64_t v88 = __cxa_allocate_exception(0x10uLL);
    int v89 = v104;
    int v90 = (void **)v103[0];
    uint64_t v91 = (const char *)espresso_get_status_string();
    int v92 = v103;
    if (v89 < 0) {
      int v92 = v90;
    }
    StringFormatter::StringFormatter((StringFormatter *)v107, "%s Error: %d, %s", (const char *)v92, v54, v91);
    MEMORY[0x210558D40](v88, v107);
    __cxa_throw(v88, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v55 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v107 = 0;
    _os_log_impl(&dword_20CD80000, v55, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end.", v107, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference end.", v56);
  long long v101 = v8 + 24;
  long long v102 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v57 = *(void *)(v99 + 24);
  if (!v57) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char **))(*(void *)v57 + 48))(v57, &v101);
  if (v102) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v102);
  }
  if (v125[0])
  {
    v125[1] = v125[0];
    operator delete(v125[0]);
  }
  if (v130)
  {
    int v131 = v130;
    operator delete(v130);
  }
  if (v139) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v139);
  }
  if (v140)
  {
    int v141 = v140;
    operator delete(v140);
  }
  if (v143[0])
  {
    v143[1] = v143[0];
    operator delete(v143[0]);
  }
  if (v146) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v146);
  }
  if (v147.__begin_)
  {
    v147.__end_ = v147.__begin_;
    operator delete(v147.__begin_);
  }
  if (v148.__begin_)
  {
    v148.__end_ = v148.__begin_;
    operator delete(v148.__begin_);
  }
  if (v149.__begin_)
  {
    v149.__end_ = v149.__begin_;
    operator delete(v149.__begin_);
  }
  if (v150.__begin_)
  {
    v150.__end_ = v150.__begin_;
    operator delete(v150.__begin_);
  }
  if (v151.__begin_)
  {
    v151.__end_ = v151.__begin_;
    operator delete(v151.__begin_);
  }
  if (v152.__begin_)
  {
    v152.__end_ = v152.__begin_;
    operator delete(v152.__begin_);
  }
  if (v153)
  {
    float v154 = v153;
    operator delete(v153);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_20D2BB564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (SLOBYTE(STACK[0x8B7]) < 0)
  {
    operator delete((void *)STACK[0x8A0]);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a29 < 0) {
        operator delete(a24);
      }
      uint8x8_t v32 = (void *)STACK[0x668];
      if (STACK[0x668])
      {
        STACK[0x670] = (unint64_t)v32;
        operator delete(v32);
      }
      std::chrono::steady_clock::time_point v33 = (void *)STACK[0x740];
      if (STACK[0x740])
      {
        STACK[0x748] = (unint64_t)v33;
        operator delete(v33);
      }
      if (STACK[0x7A0]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x7A0]);
      }
      std::chrono::steady_clock::time_point v34 = (void *)STACK[0x7A8];
      if (STACK[0x7A8])
      {
        STACK[0x7B0] = (unint64_t)v34;
        operator delete(v34);
      }
      uint64_t v35 = (void *)STACK[0x7C0];
      if (STACK[0x7C0])
      {
        STACK[0x7C8] = (unint64_t)v35;
        operator delete(v35);
      }
      if (STACK[0x7F0]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x7F0]);
      }
      int v36 = (void *)STACK[0x7F8];
      if (STACK[0x7F8])
      {
        STACK[0x800] = (unint64_t)v36;
        operator delete(v36);
      }
      unint64_t v37 = (void *)STACK[0x810];
      if (STACK[0x810])
      {
        STACK[0x818] = (unint64_t)v37;
        operator delete(v37);
      }
      uint64_t v38 = (void *)STACK[0x828];
      if (STACK[0x828])
      {
        STACK[0x830] = (unint64_t)v38;
        operator delete(v38);
      }
      unint64_t v39 = (void *)STACK[0x840];
      if (STACK[0x840])
      {
        STACK[0x848] = (unint64_t)v39;
        operator delete(v39);
      }
      uint64_t v40 = (void *)STACK[0x858];
      if (STACK[0x858])
      {
        STACK[0x860] = (unint64_t)v40;
        operator delete(v40);
      }
      uint64_t v41 = (void *)STACK[0x870];
      if (STACK[0x870])
      {
        STACK[0x878] = (unint64_t)v41;
        operator delete(v41);
      }
      int v42 = (void *)STACK[0x888];
      if (STACK[0x888])
      {
        STACK[0x890] = (unint64_t)v42;
        operator delete(v42);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t v17 = (char *)operator new(0xA8uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)uint64_t v17 = off_26C216440;
  *(_OWORD *)(v17 + 24) = 0u;
  uint64_t v46 = (uint64_t)(v17 + 24);
  *(_OWORD *)(v17 + 72) = 0u;
  uint64_t v45 = (uint64_t *)(v17 + 96);
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *(_OWORD *)(v17 + 152) = 0u;
  uint64_t v18 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v19 = 0;
    do
    {
      float v20 = *(float *)(v18 + 4 * v19);
      int v21 = *(_DWORD *)(*a5 + 4 * v19);
      int v22 = *(_DWORD *)(*a8 + 4 * v19);
      BOOL v23 = (char *)operator new(0xCuLL);
      std::string::size_type v48 = v23 + 12;
      uint64_t v49 = v23 + 12;
      *(float *)BOOL v23 = roundf(v20);
      *((_DWORD *)v23 + 1) = v21;
      *((_DWORD *)v23 + 2) = v22;
      std::string __p = v23;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v46, *((void *)v17 + 4), v23, v23 + 12, 3);
      unint64_t v24 = *((void *)v17 + 13);
      if (v24 >= *((void *)v17 + 14))
      {
        uint64_t v25 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v45, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v45, (uint64_t)&__p);
        uint64_t v25 = v24 + 24;
      }
      *((void *)v17 + 13) = v25;
      if (__p)
      {
        std::string::size_type v48 = __p;
        operator delete(__p);
      }
      ++v19;
      uint64_t v18 = *a2;
    }
    while (v19 < (a2[1] - *a2) >> 2);
  }
  uint64_t v26 = *a3;
  int v44 = (uint64_t *)(v17 + 120);
  if (a3[1] != *a3)
  {
    unint64_t v27 = 0;
    do
    {
      float v28 = *(float *)(v26 + 4 * v27);
      int v29 = *(_DWORD *)(*a6 + 4 * v27);
      int v30 = *(_DWORD *)(*a9 + 4 * v27);
      int v31 = (char *)operator new(0xCuLL);
      std::string::size_type v48 = v31 + 12;
      uint64_t v49 = v31 + 12;
      *(float *)int v31 = roundf(v28);
      *((_DWORD *)v31 + 1) = v29;
      *((_DWORD *)v31 + 2) = v30;
      std::string __p = v31;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v17 + 48), *((void *)v17 + 7), v31, v31 + 12, 3);
      unint64_t v32 = *((void *)v17 + 16);
      if (v32 >= *((void *)v17 + 17))
      {
        uint64_t v33 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v44, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v44, (uint64_t)&__p);
        uint64_t v33 = v32 + 24;
      }
      *((void *)v17 + 16) = v33;
      if (__p)
      {
        std::string::size_type v48 = __p;
        operator delete(__p);
      }
      ++v27;
      uint64_t v26 = *a3;
    }
    while (v27 < (a3[1] - *a3) >> 2);
  }
  uint64_t v34 = *a4;
  char v43 = (uint64_t *)(v17 + 144);
  if (a4[1] != *a4)
  {
    unint64_t v35 = 0;
    do
    {
      int v36 = *(_DWORD *)(v34 + 4 * v35);
      int v37 = *(_DWORD *)(*a7 + 4 * v35);
      int v38 = *(_DWORD *)(*a10 + 4 * v35);
      unint64_t v39 = (char *)operator new(0xCuLL);
      std::string::size_type v48 = v39 + 12;
      uint64_t v49 = v39 + 12;
      *(_DWORD *)unint64_t v39 = v36;
      *((_DWORD *)v39 + 1) = v37;
      *((_DWORD *)v39 + 2) = v38;
      std::string __p = v39;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v17 + 72), *((void *)v17 + 10), v39, v39 + 12, 3);
      unint64_t v40 = *((void *)v17 + 19);
      if (v40 >= *((void *)v17 + 20))
      {
        uint64_t v41 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v43, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v43, (uint64_t)&__p);
        uint64_t v41 = v40 + 24;
      }
      *((void *)v17 + 19) = v41;
      if (__p)
      {
        std::string::size_type v48 = __p;
        operator delete(__p);
      }
      ++v35;
      uint64_t v34 = *a4;
    }
    while (v35 < (a4[1] - *a4) >> 2);
  }
  *a1 = v46;
  a1[1] = (uint64_t)v17;
}

void sub_20D2BBC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *a12, void **a13, void *a14, void **a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::string __p = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v19 = *a11;
  if (*a11)
  {
    v17[3].__shared_owners_ = (uint64_t)v19;
    operator delete(v19);
  }
  float v20 = *a13;
  if (*a13)
  {
    v17[2].__shared_owners_ = (uint64_t)v20;
    operator delete(v20);
  }
  int v21 = *a15;
  if (*a15)
  {
    v17[1].__shared_owners_ = (uint64_t)v21;
    operator delete(v21);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(uint64_t a1, uint64_t *a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(char **)(a3 + 8);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v16 = a1 + 8;
  uint64_t v17 = v18;
  if (*(char *)(v16 + 23) >= 0) {
    uint64_t v17 = v16;
  }
  if (*(char *)(v16 + 47) >= 0) {
    uint64_t v19 = v16 + 24;
  }
  else {
    uint64_t v19 = *(void *)(v16 + 24);
  }
  int v20 = *(char *)(v16 + 71);
  uint64_t v23 = *(void *)(v16 + 48);
  uint64_t v21 = v16 + 48;
  uint64_t v22 = v23;
  uint64_t v33 = v17;
  v34[0] = v19;
  if (v20 >= 0) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v22;
  }
  v34[1] = v24;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&v33, (char *)&v35, 3);
  end = a4->__end_;
  uint64_t v33 = 0x300000003;
  LODWORD(v34[0]) = 3;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&v33, (char *)v34 + 4, 3);
  uint64_t v26 = a5->__end_;
  uint64_t v27 = *a2;
  unint64_t v28 = ((uint64_t)(*(void *)(*a2 + 32) - *(void *)(*a2 + 24)) >> 2) / 3uLL;
  LODWORD(v33) = ((uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2) / 3uLL;
  HIDWORD(v33) = v28;
  LODWORD(v34[0]) = ((uint64_t)(*(void *)(v27 + 56) - *(void *)(v27 + 48)) >> 2) / 3uLL;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v26, (char *)&v33, (char *)v34 + 4, 3);
  int v29 = a6->__end_;
  uint64_t v33 = 0x100000001;
  LODWORD(v34[0]) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v29, (char *)&v33, (char *)v34 + 4, 3);
  int v30 = a7->__end_;
  uint64_t v33 = 0;
  LODWORD(v34[0]) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v30, (char *)&v33, (char *)v34 + 4, 3);
  int v31 = a8->__end_;
  uint64_t v33 = 0;
  LODWORD(v34[0]) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v31, (char *)&v33, (char *)v34 + 4, 3);
  unint64_t v32 = a9->__end_;
  uint64_t v33 = 0x300000003;
  LODWORD(v34[0]) = 3;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v32, (char *)&v33, (char *)v34 + 4, 3);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20D2BBFAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EspressoParallelNeuralAMInferenceBase::add_language_id_inputs(uint64_t *a1, void *a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(char **)(a3 + 8);
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = (uint64_t *)*a1;
  }
  uint64_t v23 = v16;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&v23, (char *)&v24, 1);
  end = a4->__end_;
  LODWORD(v23) = (a2[1] - *a2) >> 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v18 = a5->__end_;
  LODWORD(v23) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v18, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v19 = a6->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v19, (char *)&v23, (char *)&v23 + 4, 1);
  int v20 = a7->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v20, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v21 = a8->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v21, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v22 = a9->__end_;
  LODWORD(v23) = 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v22, (char *)&v23, (char *)&v23 + 4, 1);
}

void EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs(uint64_t *a1, void *a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(char **)(a3 + 8);
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = (uint64_t *)*a1;
  }
  uint64_t v23 = v16;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&v23, (char *)&v24, 1);
  end = a4->__end_;
  LODWORD(v23) = (a2[1] - *a2) >> 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v18 = a5->__end_;
  LODWORD(v23) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v18, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v19 = a6->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v19, (char *)&v23, (char *)&v23 + 4, 1);
  int v20 = a7->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v20, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v21 = a8->__end_;
  LODWORD(v23) = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v21, (char *)&v23, (char *)&v23 + 4, 1);
  uint64_t v22 = a9->__end_;
  LODWORD(v23) = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v22, (char *)&v23, (char *)&v23 + 4, 1);
}

char *std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>(uint64_t *a1, uint64_t *a2)
{
  __n128 result = (char *)operator new(0x30uLL);
  uint64_t v5 = result;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)__n128 result = off_26C216248;
  *((void *)result + 3) = 0;
  uint64_t v6 = (uint64_t)(result + 24);
  *((_OWORD *)result + 2) = 0u;
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      __n128 result = std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v6, *((void *)v5 + 4), *(char **)(v7 + v8), *(char **)(v7 + v8 + 8), (uint64_t)(*(void *)(v7 + v8 + 8) - *(void *)(v7 + v8)) >> 2);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v9);
  }
  *a1 = v6;
  a1[1] = (uint64_t)v5;
  return result;
}

void sub_20D2BC398(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<int> *a4, std::vector<int> *a5, std::vector<int> *a6, std::vector<int> *a7, std::vector<int> *a8, std::vector<int> *a9)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(char **)(a3 + 8);
  uint64_t v18 = *(void *)(a1 + 136);
  uint64_t v16 = a1 + 136;
  uint64_t v17 = v18;
  if (*(char *)(v16 + 23) >= 0) {
    uint64_t v17 = v16;
  }
  uint64_t __src = v17;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(a3, v15, (char *)&__src, (char *)&v26, 1);
  end = a4->__end_;
  LODWORD(__src) = 5;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a4, end, (char *)&__src, (char *)&__src + 4, 1);
  int v20 = a5->__end_;
  LODWORD(__src) = ((uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 2) / 5uLL;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a5, v20, (char *)&__src, (char *)&__src + 4, 1);
  uint64_t v21 = a6->__end_;
  uint64_t __src = 0x100000001;
  int v26 = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a6, v21, (char *)&__src, v27, 3);
  uint64_t v22 = a7->__end_;
  uint64_t __src = 0;
  int v26 = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a7, v22, (char *)&__src, v27, 3);
  uint64_t v23 = a8->__end_;
  uint64_t __src = 0;
  int v26 = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a8, v23, (char *)&__src, v27, 3);
  uint64_t v24 = a9->__end_;
  uint64_t __src = 0x300000003;
  int v26 = 3;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a9, v24, (char *)&__src, v27, 3);
}

void EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)*a2;
  unint64_t v11 = ((uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2) / 3uLL;
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 1;
  v12[1] = v11;
  v12[2] = 3;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)a4 = *v10;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v12);
  int v13 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind encoder input_feature_scale");
  if (v13)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v23 = v42;
    uint64_t v24 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v26 = __p;
    if (v23 < 0) {
      int v26 = v24;
    }
    StringFormatter::StringFormatter((StringFormatter *)v43, "%s Error: %d, %s", (const char *)v26, v13, status_string);
    MEMORY[0x210558D40](exception, v43);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = *a2;
  unint64_t v15 = ((uint64_t)(*(void *)(*a2 + 32) - *(void *)(*a2 + 24)) >> 2) / 3uLL;
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = 1;
  v16[1] = v15;
  unint64_t v16[2] = 3;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(void *)(a5 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)a5 = *(void *)(v14 + 24);
  *(_DWORD *)(a5 + 160) = 65568;
  operator delete(v16);
  int v17 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v39, "Unable to bind encoder input_feature_bias");
  if (v17)
  {
    uint64_t v27 = __cxa_allocate_exception(0x10uLL);
    int v28 = v40;
    int v29 = (void **)v39[0];
    int v30 = (const char *)espresso_get_status_string();
    int v31 = v39;
    if (v28 < 0) {
      int v31 = v29;
    }
    StringFormatter::StringFormatter((StringFormatter *)v43, "%s Error: %d, %s", (const char *)v31, v17, v30);
    MEMORY[0x210558D40](v27, v43);
    __cxa_throw(v27, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  uint64_t v18 = *a2;
  unint64_t v19 = ((uint64_t)(*(void *)(*a2 + 56) - *(void *)(*a2 + 48)) >> 2) / 3uLL;
  int v20 = operator new(0x18uLL);
  *int v20 = 1;
  v20[1] = v19;
  v20[2] = 3;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(void *)(a6 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)a6 = *(void *)(v18 + 48);
  *(_DWORD *)(a6 + 160) = 65568;
  operator delete(v20);
  int v21 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v37, "Unable to bind encoder input_feature_variance_scale_switch");
  if (v21)
  {
    unint64_t v32 = __cxa_allocate_exception(0x10uLL);
    int v33 = v38;
    uint64_t v34 = (void **)v37[0];
    uint64_t v35 = (const char *)espresso_get_status_string();
    int v36 = v37;
    if (v33 < 0) {
      int v36 = v34;
    }
    StringFormatter::StringFormatter((StringFormatter *)v43, "%s Error: %d, %s", (const char *)v36, v21, v35);
    MEMORY[0x210558D40](v32, v43);
    __cxa_throw(v32, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
}

void sub_20D2BC9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 2;
  uint64_t v7 = operator new(0x10uLL);
  void *v7 = 1;
  v7[1] = v6;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)a4 = *a2;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v7);
  int v8 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind language embedding");
  if (v8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v10 = v15;
    unint64_t v11 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v13 = __p;
    if (v10 < 0) {
      int v13 = v11;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v13, v8, status_string);
    MEMORY[0x210558D40](exception, v16);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D2BCC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 2;
  uint64_t v7 = operator new(8uLL);
  void *v7 = v6;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)a4 = *a2;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v7);
  int v8 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind speaker id");
  if (v8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v10 = v15;
    unint64_t v11 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v13 = __p;
    if (v10 < 0) {
      int v13 = v11;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v13, v8, status_string);
    MEMORY[0x210558D40](exception, v16);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D2BCDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = ((uint64_t)(a2[1] - *a2) >> 2) / 5uLL;
  uint64_t v7 = operator new(0x18uLL);
  void *v7 = 1;
  v7[1] = v6;
  v7[2] = 5;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)a4 = *a2;
  *(_DWORD *)(a4 + 160) = 65568;
  operator delete(v7);
  int v8 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind encoder input_sentence_prosody");
  if (v8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v10 = v15;
    unint64_t v11 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v13 = __p;
    if (v10 < 0) {
      int v13 = v11;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v13, v8, status_string);
    MEMORY[0x210558D40](exception, v16);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D2BCFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void EspressoUtils::convert_espbuffer_to_2d_vector(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 80);
  unint64_t v5 = *(void *)(a2 + 88);
  int v10 = 0;
  std::vector<float>::vector(__p, v4, &v10);
  std::vector<std::vector<float>>::vector(a1, v5, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(char **)a2;
    uint64_t v8 = 4 * v4;
    do
    {
      unint64_t v9 = &v7[v8];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*a1 + v6), v7, (uint64_t)&v7[v8], v4);
      v6 += 24;
      uint64_t v7 = v9;
      --v5;
    }
    while (v5);
  }
}

void sub_20D2BD0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v6 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(a1 + 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    int v28 = &v18[8 * v15];
    int v29 = &v28[8 * a5];
    uint64_t v30 = 8 * a5;
    int v31 = v28;
    do
    {
      uint64_t v32 = *(void *)v6;
      v6 += 8;
      *(void *)int v31 = v32;
      v31 += 8;
      v30 -= 8;
    }
    while (v30);
    int v33 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      uint64_t v34 = __dst;
      do
      {
        uint64_t v35 = *((void *)v34 - 1);
        v34 -= 8;
        *((void *)v28 - 1) = v35;
        v28 -= 8;
      }
      while (v34 != v33);
    }
    int v36 = &v18[8 * v17];
    int v37 = *(unsigned char **)(a1 + 8);
    uint64_t v38 = v37 - __dst;
    if (v37 != __dst) {
      memmove(v29, __dst, v37 - __dst);
    }
    unint64_t v39 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v29[v38];
    *(void *)(a1 + 16) = v36;
    if (v39)
    {
      operator delete(v39);
    }
    return;
  }
  uint64_t v19 = v12 - (void)__dst;
  uint64_t v20 = (uint64_t)(v12 - (void)__dst) >> 3;
  if (v20 >= a5)
  {
    int v21 = &__src[8 * a5];
    int v23 = *(char **)(a1 + 8);
LABEL_16:
    uint64_t v24 = &__dst[8 * a5];
    int v25 = &v23[-8 * a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)int v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], __dst, v23 - v24);
    }
    if (v21 != v6)
    {
      memmove(__dst, v6, v21 - v6);
    }
    return;
  }
  int v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(a1 + 8), &__src[8 * v20], a4 - v21);
  }
  int v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_16;
  }
}

void std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(std::vector<int> *a1, int *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v6 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  uint64_t v10 = value;
  std::vector<int>::pointer end = a1->__end_;
  if (a5 > value - end)
  {
    begiuint64_t n = a1->__begin_;
    unint64_t v14 = a5 + end - a1->__begin_;
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __dst - begin;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      uint64_t v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    int v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      int v31 = *v6++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    std::vector<int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return;
  }
  uint64_t v19 = (char *)end - (char *)__dst;
  uint64_t v20 = end - __dst;
  if (v20 >= a5)
  {
    int v21 = &__src[4 * a5];
    std::vector<int>::pointer v23 = a1->__end_;
LABEL_16:
    uint64_t v24 = (char *)&__dst[a5];
    std::vector<int>::pointer v25 = &v23[-a5];
    int v26 = v23;
    if (v25 < end)
    {
      int v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while (v25 < end);
    }
    a1->__end_ = v26;
    if (v23 != (std::vector<int>::pointer)v24) {
      memmove(&v23[-(((char *)v23 - v24) >> 2)], __dst, (char *)v23 - v24);
    }
    if (v21 != (char *)v6)
    {
      memmove(__dst, v6, v21 - (char *)v6);
    }
    return;
  }
  int v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(a1->__end_, &__src[4 * v20], a4 - v21);
  }
  std::vector<int>::pointer v23 = (std::vector<int>::pointer)((char *)end + v22);
  a1->__end_ = (std::vector<int>::pointer)((char *)end + v22);
  if (v19 >= 1) {
    goto LABEL_16;
  }
}

void sub_20D2BD4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SentFeatureData>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<SentFeatureData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SentFeatureData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureScaleData>::__on_zero_shared(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 96);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<FeatureScaleData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FeatureScaleData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveNetFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__shared_ptr_emplace<WaveNetFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WaveNetFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EspressoParallelNeuralAMDecoupledInference::inference(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v278 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t v181 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEFAULT, "Parallel AM inference begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference begin.", v7);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder begin.", v9);
  uint64_t v10 = (char *)operator new(0x88uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = off_26C215E20;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_WORD *)v10 + 12) = 257;
  *((_OWORD *)v10 + 2) = 0u;
  *(void *)(v10 + 126) = 0;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  uint64_t v11 = *a2;
  unint64_t v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    v10[132] = FastSpeechUtils::has_whisper(v11[1], v11[2]);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  else
  {
    v10[132] = FastSpeechUtils::has_whisper(v11[1], v11[2]);
  }
  uint64_t v13 = a1 + 416;
  if (*(char *)(a1 + 439) < 0) {
    uint64_t v13 = *(void *)(a1 + 416);
  }
  uint64_t v14 = a1 + 440;
  if (*(char *)(a1 + 463) < 0) {
    uint64_t v14 = *(void *)(a1 + 440);
  }
  uint64_t v15 = operator new(0x10uLL);
  float v258 = v15 + 2;
  *uint64_t v15 = v13;
  v15[1] = v14;
  int v256 = v15;
  float v257 = v15 + 2;
  uint64_t v16 = *a2;
  uint64_t v18 = (*a2)[4];
  uint64_t v17 = (*a2)[5];
  uint64_t v19 = (int *)operator new(8uLL);
  v255.__begin_ = v19;
  *(void *)uint64_t v19 = ((unint64_t)(v17 - v18) >> 2) | 0x100000000;
  v255.__end_cap_.__value_ = v19 + 2;
  v255.__end_ = v19 + 2;
  uint64_t v20 = (int *)operator new(8uLL);
  v254.__begin_ = v20;
  *(void *)uint64_t v20 = 0x100000001;
  v254.__end_cap_.__value_ = v20 + 2;
  v254.__end_ = v20 + 2;
  int v21 = (int *)operator new(8uLL);
  v253.__begin_ = v21;
  *(void *)int v21 = 0;
  v253.__end_cap_.__value_ = v21 + 2;
  v253.__end_ = v21 + 2;
  int64_t v22 = (int *)operator new(8uLL);
  v252.__begin_ = v22;
  *(void *)int64_t v22 = 0;
  v252.__end_cap_.__value_ = v22 + 2;
  v252.__end_ = v22 + 2;
  std::vector<int>::pointer v23 = (int *)operator new(8uLL);
  v251.__begin_ = v23;
  *(void *)std::vector<int>::pointer v23 = 0;
  v251.__end_cap_.__value_ = v23 + 2;
  v251.__end_ = v23 + 2;
  uint64_t v24 = (int *)operator new(8uLL);
  v250.__begin_ = v24;
  *(void *)uint64_t v24 = 0x100000002;
  v250.__end_cap_.__value_ = v24 + 2;
  v250.__end_ = v24 + 2;
  std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(&v248, v16 + 15, v16 + 24, v16 + 33, v16 + 18, v16 + 27, v16 + 36, v16 + 21, v16 + 30, v16 + 39);
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<int>::pointer v25 = v249;
    v247[0] = v248;
    v247[1] = (uint64_t)v249;
    if (v249) {
      atomic_fetch_add_explicit(&v249->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(a1 + 224, v247, (uint64_t)&v256, &v255, &v254, &v253, &v252, &v251, &v250);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  int v26 = (int *)(*a2)[42];
  int v27 = (int *)(*a2)[43];
  uint64_t v246 = 0;
  uint64_t v244 = 0;
  uint64_t v245 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v244, v26, v27, v27 - v26);
  *(float *)buf = (float)*((int *)*a2 + 90);
  std::vector<float>::vector(v243, 1uLL, buf);
  if (*(char *)(a1 + 487) < 0) {
    uint64_t v28 = *(void *)(a1 + 472);
  }
  else {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 487);
  }
  if (v28) {
    EspressoParallelNeuralAMInferenceBase::add_language_id_inputs((uint64_t *)(a1 + 464), &v244, (uint64_t)&v256, &v255, &v254, &v253, &v252, &v251, &v250);
  }
  if (*(char *)(a1 + 511) < 0) {
    uint64_t v29 = *(void *)(a1 + 496);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(a1 + 511);
  }
  if (v29) {
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 488), v243, (uint64_t)&v256, &v255, &v254, &v253, &v252, &v251, &v250);
  }
  uint64_t v180 = (const std::string::value_type **)(a1 + 464);
  std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>((uint64_t *)&v241, *a2 + 46);
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v30 = v242;
    v240[0] = v241;
    v240[1] = v242;
    if (v242) {
      atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs(a1 + 224, (uint64_t)v240, (uint64_t)&v256, &v255, &v254, &v253, &v252, &v251, &v250);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
  v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  begiuint64_t n = v250.__begin_;
  int v32 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape encoder input");
  if (v32)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v104 = v239;
    uint64_t v105 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v107 = __p;
    if (v104 < 0) {
      int v107 = v105;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v107, v32, status_string);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v239 < 0) {
    operator delete(__p[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = (double)((v34.__d_.__rep_ - v31.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_DEFAULT, "Parallel AM Encoder Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Encoder Espresso reshaping time: %.3f s", v36, (double)((v35.__d_.__rep_ - v31.__d_.__rep_) / 1000000) / 1000.0, begin);
  int v37 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v236, "Unable to build encoder plan");
  if (v37)
  {
    uint64_t v108 = __cxa_allocate_exception(0x10uLL);
    int v109 = v237;
    char v110 = (void **)v236[0];
    uint64_t v111 = (const char *)espresso_get_status_string();
    unsigned int v112 = v236;
    if (v109 < 0) {
      unsigned int v112 = v110;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v112, v37, v111);
    MEMORY[0x210558D40](v108, buf);
    __cxa_throw(v108, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v237 < 0) {
    operator delete(v236[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = ((*a2)[5] - (*a2)[4]) >> 2;
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_DEFAULT, "Parallel AM input length: %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM input length: %ld", v39, ((*a2)[5] - (*a2)[4]) >> 2);
  uint64_t v41 = (int *)(*a2)[4];
  char v42 = (int *)(*a2)[5];
  uint64_t v235 = 0;
  uint64_t v233 = 0;
  uint64_t v234 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v233, v41, v42, v42 - v41);
  char v43 = v234;
  int v44 = v233;
  uint64_t v45 = operator new(0x10uLL);
  *uint64_t v45 = 1;
  v45[1] = (v43 - v44) >> 2;
  *(_OWORD *)buf = 0u;
  long long v268 = 0u;
  long long v269 = 0u;
  long long v270 = 0u;
  long long v271 = 0u;
  long long v272 = 0u;
  long long v273 = 0u;
  long long v274 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  uint64_t v277 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)buf = v233;
  LODWORD(v277) = 65568;
  operator delete(v45);
  int v46 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v231, "Unable to bind encoder input");
  if (v46)
  {
    char v113 = __cxa_allocate_exception(0x10uLL);
    int v114 = v232;
    std::string v115 = (void **)v231[0];
    std::string v116 = (const char *)espresso_get_status_string();
    int v117 = v231;
    if (v114 < 0) {
      int v117 = v115;
    }
    StringFormatter::StringFormatter((StringFormatter *)v229, "%s Error: %d, %s", (const char *)v117, v46, v116);
    MEMORY[0x210558D40](v113, v229);
    __cxa_throw(v113, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v232 < 0) {
    operator delete(v231[0]);
  }
  v225[0] = (float)(unint64_t)(((*a2)[5] - (*a2)[4]) >> 2);
  std::vector<float>::vector(v228, 1uLL, v225);
  std::string::size_type v47 = operator new(8uLL);
  *std::string::size_type v47 = 1;
  memset(v229, 0, sizeof(v229));
  uint64_t v230 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void **)&v229[0] = v228[0];
  LODWORD(v230) = 65568;
  operator delete(v47);
  int v48 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v226, "Unable to bind encoder input_lengths");
  if (v48)
  {
    int v118 = __cxa_allocate_exception(0x10uLL);
    int v119 = v227;
    uint64_t v120 = (void **)v226[0];
    int v121 = (const char *)espresso_get_status_string();
    int v122 = v226;
    if (v119 < 0) {
      int v122 = v120;
    }
    StringFormatter::StringFormatter((StringFormatter *)v225, "%s Error: %d, %s", (const char *)v122, v48, v121);
    MEMORY[0x210558D40](v118, v225);
    __cxa_throw(v118, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v227 < 0) {
    operator delete(v226[0]);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v49 = v249;
    v222[0] = v248;
    v222[1] = (uint64_t)v249;
    if (v249) {
      atomic_fetch_add_explicit(&v249->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer(a1 + 224, v222, *(void *)(a1 + 704), (uint64_t)v225, (uint64_t)v224, (uint64_t)v223);
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  if (*(char *)(a1 + 487) < 0)
  {
    std::string::size_type v51 = *(void *)(a1 + 472);
    uint64_t v50 = (std::string *)(a1 + 488);
    if (!v51) {
      goto LABEL_68;
    }
    std::string::__init_copy_ctor_external(&v219, *v180, v51);
  }
  else
  {
    uint64_t v50 = (std::string *)(a1 + 488);
    if (!*(unsigned char *)(a1 + 487)) {
      goto LABEL_68;
    }
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)v180;
    v219.__r_.__value_.__r.__words[2] = *(void *)(a1 + 480);
  }
  EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer((uint64_t)&v219, &v244, *(void *)(a1 + 704), (uint64_t)v221);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
LABEL_68:
  if (*(char *)(a1 + 511) < 0)
  {
    std::string::size_type v52 = *(void *)(a1 + 496);
    if (!v52) {
      goto LABEL_75;
    }
    std::string::__init_copy_ctor_external(&v218, v50->__r_.__value_.__l.__data_, v52);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 511)) {
      goto LABEL_75;
    }
    std::string v218 = *v50;
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v218, v243, *(void *)(a1 + 704), (uint64_t)v220);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
LABEL_75:
  if (*(unsigned char *)(a1 + 352))
  {
    int v53 = v241;
    int v54 = v242;
    if (v242) {
      atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer(a1 + 224, v53, *(void *)(a1 + 704), (uint64_t)v217);
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
  }
  v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v56 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v215, &byte_20D5A22AE);
  if (v56)
  {
    uint64_t v123 = __cxa_allocate_exception(0x10uLL);
    int v124 = v216;
    uint64_t v125 = (void **)v215[0];
    int v126 = (const char *)espresso_get_status_string();
    uint64_t v127 = v215;
    if (v124 < 0) {
      uint64_t v127 = v125;
    }
    StringFormatter::StringFormatter((StringFormatter *)v264, "%s Error: %d, %s", (const char *)v127, v56, v126);
    MEMORY[0x210558D40](v123, v264);
    __cxa_throw(v123, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v216 < 0) {
    operator delete(v215[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)uint64_t v264 = 134217984;
    *(double *)&v264[4] = (double)((v58.__d_.__rep_ - v55.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v57, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso encoder inference time: %.3f s", v264, 0xCu);
  }
  v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso encoder inference time: %.3f s", v60, (double)((v59.__d_.__rep_ - v55.__d_.__rep_) / 1000000) / 1000.0);
  int v61 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v213, "Unable to bind encoder output_encoder_output");
  if (v61)
  {
    int v128 = __cxa_allocate_exception(0x10uLL);
    int v129 = v214;
    int v130 = (void **)v213[0];
    int v131 = (const char *)espresso_get_status_string();
    uint64_t v132 = v213;
    if (v129 < 0) {
      uint64_t v132 = v130;
    }
    StringFormatter::StringFormatter((StringFormatter *)v212, "%s Error: %d, %s", (const char *)v132, v61, v131);
    MEMORY[0x210558D40](v128, v212);
    __cxa_throw(v128, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v214 < 0) {
    operator delete(v213[0]);
  }
  if (*(char *)(a1 + 583) < 0)
  {
    if (!*(void *)(a1 + 568)) {
      goto LABEL_98;
    }
  }
  else if (!*(unsigned char *)(a1 + 583))
  {
    goto LABEL_98;
  }
  int v62 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v210, "Unable to bind encoder output_alignment");
  if (v62)
  {
    uint64_t v173 = __cxa_allocate_exception(0x10uLL);
    int v174 = v211;
    uint64_t v175 = (void **)v210[0];
    int v176 = (const char *)espresso_get_status_string();
    uint64_t v177 = v210;
    if (v174 < 0) {
      uint64_t v177 = v175;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v177, v62, v176);
    MEMORY[0x210558D40](v173, v262);
    __cxa_throw(v173, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v211 < 0) {
    operator delete(v210[0]);
  }
  EspressoUtils::convert_espbuffer_to_2d_vector(v262, (uint64_t)v212);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v10 + 10);
  *((_OWORD *)v10 + 5) = *(_OWORD *)v262;
  *((void *)v10 + 12) = v263;
  uint64_t v263 = 0;
  memset(v262, 0, sizeof(v262));
  *(void *)v260 = v262;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v260);
  free(v212[0]);
LABEL_98:
  int v63 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v208, "Unable to bind encoder output_decoder_length_");
  if (v63)
  {
    int v133 = __cxa_allocate_exception(0x10uLL);
    int v134 = v209;
    unsigned int v135 = (void **)v208[0];
    char v136 = (const char *)espresso_get_status_string();
    int v137 = v208;
    if (v134 < 0) {
      int v137 = v135;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v137, v63, v136);
    MEMORY[0x210558D40](v133, v262);
    __cxa_throw(v133, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v209 < 0) {
    operator delete(v208[0]);
  }
  int v64 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v206, &byte_20D5A22AE);
  if (v64)
  {
    uint64_t v138 = __cxa_allocate_exception(0x10uLL);
    int v139 = v207;
    int v140 = (void **)v206[0];
    int v141 = (const char *)espresso_get_status_string();
    uint64_t v142 = v206;
    if (v139 < 0) {
      uint64_t v142 = v140;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v142, v64, v141);
    MEMORY[0x210558D40](v138, v262);
    __cxa_throw(v138, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v207 < 0) {
    operator delete(v206[0]);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v262 = 0;
    _os_log_impl(&dword_20CD80000, v65, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder end.", v262, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder end.", v66);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v262 = 0;
    _os_log_impl(&dword_20CD80000, v67, OS_LOG_TYPE_DEBUG, "Parallel AM inference decoder begin.", v262, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference decoder begin.", v68);
  uint64_t v69 = a1 + 608;
  if (*(char *)(a1 + 631) < 0) {
    uint64_t v69 = *(void *)(a1 + 608);
  }
  long long v70 = operator new(8uLL);
  uint64_t v203 = v70;
  *long long v70 = v69;
  int v204 = v70 + 1;
  uint64_t v205 = v70 + 1;
  int v71 = v265;
  int v72 = (int *)operator new(4uLL);
  v202.__begin_ = v72;
  *int v72 = v71;
  v202.__end_ = v72 + 1;
  v202.__end_cap_.__value_ = v72 + 1;
  int v73 = v266;
  int v74 = (int *)operator new(4uLL);
  v201.__begin_ = v74;
  *int v74 = v73;
  v201.__end_ = v74 + 1;
  v201.__end_cap_.__value_ = v74 + 1;
  uint64_t v75 = (int *)operator new(4uLL);
  v200.__begin_ = v75;
  *uint64_t v75 = 1;
  v200.__end_ = v75 + 1;
  v200.__end_cap_.__value_ = v75 + 1;
  std::string::size_type v76 = (int *)operator new(4uLL);
  v199.__begin_ = v76;
  *std::string::size_type v76 = 1;
  v199.__end_ = v76 + 1;
  v199.__end_cap_.__value_ = v76 + 1;
  uint64_t v77 = (int *)operator new(4uLL);
  v198.__begin_ = v77;
  *uint64_t v77 = 0;
  v198.__end_ = v77 + 1;
  v198.__end_cap_.__value_ = v77 + 1;
  char v78 = (int *)operator new(4uLL);
  v197.__begin_ = v78;
  *char v78 = 3;
  v197.__end_ = v78 + 1;
  v197.__end_cap_.__value_ = v78 + 1;
  if (*(char *)(a1 + 679) < 0) {
    uint64_t v79 = *(void *)(a1 + 664);
  }
  else {
    uint64_t v79 = *(unsigned __int8 *)(a1 + 679);
  }
  std::chrono::steady_clock::time_point v80 = (const std::string::value_type **)(a1 + 656);
  if (v79) {
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 656), v243, (uint64_t)&v203, &v202, &v201, &v200, &v199, &v198, &v197);
  }
  v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::vector<int>::pointer v179 = v197.__begin_;
  int v82 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(v195, "Unable to reshape decoder input");
  if (v82)
  {
    uint64_t v143 = __cxa_allocate_exception(0x10uLL);
    int v144 = v196;
    uint64_t v145 = (void **)v195[0];
    int v146 = (const char *)espresso_get_status_string();
    std::vector<int> v147 = v195;
    if (v144 < 0) {
      std::vector<int> v147 = v145;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v147, v82, v146);
    MEMORY[0x210558D40](v143, v262);
    __cxa_throw(v143, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v196 < 0) {
    operator delete(v195[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v83 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v84.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v262 = 134217984;
    *(double *)&v262[4] = (double)((v84.__d_.__rep_ - v81.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v83, OS_LOG_TYPE_DEFAULT, "Parallel AM Decoder Espresso reshaping time: %.3f s", v262, 0xCu);
  }
  v85.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Decoder Espresso reshaping time: %.3f s", v86, (double)((v85.__d_.__rep_ - v81.__d_.__rep_) / 1000000) / 1000.0, v179);
  int v87 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v193, "Unable to build decoder plan");
  if (v87)
  {
    std::vector<int> v148 = __cxa_allocate_exception(0x10uLL);
    int v149 = v194;
    std::vector<int> v150 = (void **)v193[0];
    std::vector<int> v151 = (const char *)espresso_get_status_string();
    std::vector<int> v152 = v193;
    if (v149 < 0) {
      std::vector<int> v152 = v150;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v152, v87, v151);
    MEMORY[0x210558D40](v148, v262);
    __cxa_throw(v148, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v194 < 0) {
    operator delete(v193[0]);
  }
  int v88 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v191, "Unable to bind decoder decoder_input");
  if (v88)
  {
    int v153 = __cxa_allocate_exception(0x10uLL);
    int v154 = v192;
    int v155 = (void **)v191[0];
    long long v156 = (const char *)espresso_get_status_string();
    uint64_t v157 = v191;
    if (v154 < 0) {
      uint64_t v157 = v155;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v157, v88, v156);
    MEMORY[0x210558D40](v153, v262);
    __cxa_throw(v153, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v192 < 0) {
    operator delete(v191[0]);
  }
  int v89 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v189, "Unable to build decoder decoder_length");
  if (v89)
  {
    double v158 = __cxa_allocate_exception(0x10uLL);
    int v159 = v190;
    long long v160 = (void **)v189[0];
    long long v161 = (const char *)espresso_get_status_string();
    long long v162 = v189;
    if (v159 < 0) {
      long long v162 = v160;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v162, v89, v161);
    MEMORY[0x210558D40](v158, v262);
    __cxa_throw(v158, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v190 < 0) {
    operator delete(v189[0]);
  }
  if (*(char *)(a1 + 679) < 0)
  {
    std::string::size_type v90 = *(void *)(a1 + 664);
    if (!v90) {
      goto LABEL_142;
    }
    std::string::__init_copy_ctor_external(&v188, *v80, v90);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 679)) {
      goto LABEL_142;
    }
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = *(_OWORD *)v80;
    v188.__r_.__value_.__r.__words[2] = *(void *)(a1 + 672);
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v188, v243, *(void *)(a1 + 712), (uint64_t)v220);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v188.__r_.__value_.__l.__data_);
  }
LABEL_142:
  v91.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v92 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v186, &byte_20D5A22AE);
  if (v92)
  {
    long long v163 = __cxa_allocate_exception(0x10uLL);
    int v164 = v187;
    long long v165 = (void **)v186[0];
    long long v166 = (const char *)espresso_get_status_string();
    long long v167 = v186;
    if (v164 < 0) {
      long long v167 = v165;
    }
    StringFormatter::StringFormatter((StringFormatter *)v262, "%s Error: %d, %s", (const char *)v167, v92, v166);
    MEMORY[0x210558D40](v163, v262);
    __cxa_throw(v163, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v187 < 0) {
    operator delete(v186[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v93 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v94.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v262 = 134217984;
    *(double *)&v262[4] = (double)((v94.__d_.__rep_ - v91.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v93, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso decoder inference time: %.3f s", v262, 0xCu);
  }
  v95.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso decoder inference time: %.3f s", v96, (double)((v95.__d_.__rep_ - v91.__d_.__rep_) / 1000000) / 1000.0);
  espresso_network_bind_buffer();
  EspressoUtils::convert_espbuffer_to_2d_vector(v260, (uint64_t)v262);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v10 + 4);
  *((_OWORD *)v10 + 2) = *(_OWORD *)v260;
  *((void *)v10 + 6) = v261;
  uint64_t v261 = 0;
  memset(v260, 0, sizeof(v260));
  int v259 = v260;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v10 + 56), *((void *)v10 + 4), *((void *)v10 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v10 + 5) - *((void *)v10 + 4)) >> 3));
  free(*(void **)v262);
  free(*(void **)v264);
  free(v212[0]);
  int v97 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v184, &byte_20D5A22AE);
  if (v97)
  {
    long long v168 = __cxa_allocate_exception(0x10uLL);
    int v169 = v185;
    uint64_t v170 = (void **)v184[0];
    uint64_t v171 = (const char *)espresso_get_status_string();
    int v172 = v184;
    if (v169 < 0) {
      int v172 = v170;
    }
    StringFormatter::StringFormatter((StringFormatter *)v260, "%s Error: %d, %s", (const char *)v172, v97, v171);
    MEMORY[0x210558D40](v168, v260);
    __cxa_throw(v168, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v185 < 0) {
    operator delete(v184[0]);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v98 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v260 = 0;
    _os_log_impl(&dword_20CD80000, v98, OS_LOG_TYPE_DEBUG, "Parallel AM inference decoder end.", v260, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference decoder end.", v99);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v100 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v260 = 0;
    _os_log_impl(&dword_20CD80000, v100, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end.", v260, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference end.", v101);
  int v182 = v10 + 24;
  uint64_t v183 = (std::__shared_weak_count *)v10;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  uint64_t v102 = *(void *)(v181 + 24);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char **))(*(void *)v102 + 48))(v102, &v182);
  if (v183) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v183);
  }
  if (v197.__begin_)
  {
    v197.__end_ = v197.__begin_;
    operator delete(v197.__begin_);
  }
  if (v198.__begin_)
  {
    v198.__end_ = v198.__begin_;
    operator delete(v198.__begin_);
  }
  if (v199.__begin_)
  {
    v199.__end_ = v199.__begin_;
    operator delete(v199.__begin_);
  }
  if (v200.__begin_)
  {
    v200.__end_ = v200.__begin_;
    operator delete(v200.__begin_);
  }
  if (v201.__begin_)
  {
    v201.__end_ = v201.__begin_;
    operator delete(v201.__begin_);
  }
  if (v202.__begin_)
  {
    v202.__end_ = v202.__begin_;
    operator delete(v202.__begin_);
  }
  if (v203)
  {
    int v204 = v203;
    operator delete(v203);
  }
  if (v228[0])
  {
    v228[1] = v228[0];
    operator delete(v228[0]);
  }
  if (v233)
  {
    uint64_t v234 = v233;
    operator delete(v233);
  }
  if (v242) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v242);
  }
  if (v243[0])
  {
    v243[1] = v243[0];
    operator delete(v243[0]);
  }
  if (v244)
  {
    uint64_t v245 = v244;
    operator delete(v244);
  }
  if (v249) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v249);
  }
  if (v250.__begin_)
  {
    v250.__end_ = v250.__begin_;
    operator delete(v250.__begin_);
  }
  if (v251.__begin_)
  {
    v251.__end_ = v251.__begin_;
    operator delete(v251.__begin_);
  }
  if (v252.__begin_)
  {
    v252.__end_ = v252.__begin_;
    operator delete(v252.__begin_);
  }
  if (v253.__begin_)
  {
    v253.__end_ = v253.__begin_;
    operator delete(v253.__begin_);
  }
  if (v254.__begin_)
  {
    v254.__end_ = v254.__begin_;
    operator delete(v254.__begin_);
  }
  if (v255.__begin_)
  {
    v255.__end_ = v255.__begin_;
    operator delete(v255.__begin_);
  }
  if (v256)
  {
    float v257 = v256;
    operator delete(v256);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
}

void sub_20D2BF454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x9A7]) < 0)
  {
    operator delete((void *)STACK[0x990]);
    if ((v72 & 1) == 0)
    {
LABEL_6:
      if (a72 < 0) {
        operator delete(a70);
      }
      uint64_t v75 = (void *)STACK[0x728];
      if (STACK[0x728])
      {
        STACK[0x730] = (unint64_t)v75;
        operator delete(v75);
      }
      std::string::size_type v76 = (void *)STACK[0x808];
      if (STACK[0x808])
      {
        STACK[0x810] = (unint64_t)v76;
        operator delete(v76);
      }
      if (STACK[0x868]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x868]);
      }
      uint64_t v77 = (void *)STACK[0x870];
      if (STACK[0x870])
      {
        STACK[0x878] = (unint64_t)v77;
        operator delete(v77);
      }
      char v78 = (void *)STACK[0x888];
      if (STACK[0x888])
      {
        STACK[0x890] = (unint64_t)v78;
        operator delete(v78);
      }
      if (STACK[0x8B8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x8B8]);
      }
      uint64_t v79 = (void *)STACK[0x8C0];
      if (STACK[0x8C0])
      {
        STACK[0x8C8] = (unint64_t)v79;
        operator delete(v79);
      }
      std::chrono::steady_clock::time_point v80 = (void *)STACK[0x8D8];
      if (STACK[0x8D8])
      {
        STACK[0x8E0] = (unint64_t)v80;
        operator delete(v80);
      }
      std::chrono::steady_clock::time_point v81 = (void *)STACK[0x8F0];
      if (STACK[0x8F0])
      {
        STACK[0x8F8] = (unint64_t)v81;
        operator delete(v81);
      }
      int v82 = (void *)STACK[0x908];
      if (STACK[0x908])
      {
        STACK[0x910] = (unint64_t)v82;
        operator delete(v82);
      }
      std::chrono::steady_clock::time_point v83 = (void *)STACK[0x920];
      if (STACK[0x920])
      {
        STACK[0x928] = (unint64_t)v83;
        operator delete(v83);
      }
      std::chrono::steady_clock::time_point v84 = (void *)STACK[0x938];
      if (STACK[0x938])
      {
        STACK[0x940] = (unint64_t)v84;
        operator delete(v84);
      }
      std::chrono::steady_clock::time_point v85 = (void *)STACK[0x950];
      if (STACK[0x950])
      {
        STACK[0x958] = (unint64_t)v85;
        operator delete(v85);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v73);
  goto LABEL_6;
}

void EspressoParallelNeuralAMDecoupledStreamingInference::inference(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v376 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "Parallel AM inference begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference begin.", v6);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "Parallel AM inference encoder begin.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference encoder begin.", v8);
  memset(v344, 0, sizeof(v344));
  uint64_t v345 = 0;
  uint64_t v9 = a1 + 936;
  if (*(char *)(a1 + 959) < 0) {
    uint64_t v9 = *(void *)(a1 + 936);
  }
  uint64_t v10 = a1 + 960;
  if (*(char *)(a1 + 983) < 0) {
    uint64_t v10 = *(void *)(a1 + 960);
  }
  uint64_t v245 = a1;
  uint64_t v11 = operator new(0x10uLL);
  unsigned int v343 = v11 + 2;
  *uint64_t v11 = v9;
  v11[1] = v10;
  uint64_t v341 = v11;
  unsigned int v342 = v11 + 2;
  unint64_t v12 = *a2;
  uint64_t v14 = (*a2)[4];
  uint64_t v13 = (*a2)[5];
  uint64_t v15 = (int *)operator new(8uLL);
  v340.__begin_ = v15;
  *(void *)uint64_t v15 = ((unint64_t)(v13 - v14) >> 2) | 0x100000000;
  v340.__end_cap_.__value_ = v15 + 2;
  v340.__end_ = v15 + 2;
  uint64_t v16 = (int *)operator new(8uLL);
  v339.__begin_ = v16;
  *(void *)uint64_t v16 = 0x100000001;
  v339.__end_cap_.__value_ = v16 + 2;
  v339.__end_ = v16 + 2;
  uint64_t v17 = (int *)operator new(8uLL);
  v338.__begin_ = v17;
  *(void *)uint64_t v17 = 0;
  v338.__end_cap_.__value_ = v17 + 2;
  v338.__end_ = v17 + 2;
  uint64_t v18 = (int *)operator new(8uLL);
  v337.__begin_ = v18;
  *(void *)uint64_t v18 = 0;
  v337.__end_cap_.__value_ = v18 + 2;
  v337.__end_ = v18 + 2;
  uint64_t v19 = (int *)operator new(8uLL);
  v336.__begin_ = v19;
  *(void *)uint64_t v19 = 0;
  v336.__end_cap_.__value_ = v19 + 2;
  v336.__end_ = v19 + 2;
  uint64_t v20 = (int *)operator new(8uLL);
  v335.__begin_ = v20;
  *(void *)uint64_t v20 = 0x100000002;
  v335.__end_cap_.__value_ = v20 + 2;
  v335.__end_ = v20 + 2;
  std::allocate_shared[abi:ne180100]<FeatureScaleData,std::allocator<FeatureScaleData>,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &,void>(&v333, v12 + 15, v12 + 24, v12 + 33, v12 + 18, v12 + 27, v12 + 36, v12 + 21, v12 + 30, v12 + 39);
  int v21 = (unsigned char *)(a1 + 744);
  if (*(unsigned char *)(a1 + 744))
  {
    int64_t v22 = v334;
    v332[0] = v333;
    v332[1] = (uint64_t)v334;
    if (v334) {
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::add_feature_scale_inputs(a1 + 744, v332, (uint64_t)&v341, &v340, &v339, &v338, &v337, &v336, &v335);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  std::vector<int>::pointer v23 = (int *)(*a2)[42];
  uint64_t v24 = (int *)(*a2)[43];
  uint64_t v331 = 0;
  uint64_t v329 = 0;
  uint64_t v330 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v329, v23, v24, v24 - v23);
  *(float *)buf = (float)*((int *)*a2 + 90);
  std::vector<float>::vector(v328, 1uLL, buf);
  std::vector<int>::pointer v25 = (const void *)(*a2)[52];
  uint64_t v26 = (*a2)[53];
  uint64_t v327 = 0;
  uint64_t v325 = 0;
  uint64_t v326 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v325, v25, v26, (v26 - (uint64_t)v25) >> 2);
  if (*(char *)(a1 + 1007) < 0) {
    uint64_t v27 = *(void *)(a1 + 992);
  }
  else {
    uint64_t v27 = *(unsigned __int8 *)(a1 + 1007);
  }
  if (v27) {
    EspressoParallelNeuralAMInferenceBase::add_language_id_inputs((uint64_t *)(a1 + 984), &v329, (uint64_t)&v341, &v340, &v339, &v338, &v337, &v336, &v335);
  }
  if (*(char *)(a1 + 1031) < 0) {
    uint64_t v29 = *(void *)(a1 + 1016);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(a1 + 1031);
  }
  uint64_t v30 = (const std::string::value_type **)(a1 + 1008);
  if (v29) {
    EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)(a1 + 1008), v328, (uint64_t)&v341, &v340, &v339, &v338, &v337, &v336, &v335);
  }
  std::chrono::steady_clock::time_point v31 = (const std::string::value_type **)(a1 + 1032);
  if (*(char *)(a1 + 1055) < 0)
  {
    if (!*(void *)(a1 + 1040)) {
      goto LABEL_36;
    }
  }
  else if (!*(unsigned char *)(a1 + 1055))
  {
    goto LABEL_36;
  }
  if (*(char *)(a1 + 1055) >= 0) {
    int v32 = (const std::string::value_type *)(a1 + 1032);
  }
  else {
    int v32 = *v31;
  }
  *(void *)buf = v32;
  std::vector<char const*>::__insert_with_size[abi:ne180100]<char const* const*,char const* const*>((uint64_t)&v341, (char *)v342, (char *)buf, (char *)&buf[8], 1);
  *(_DWORD *)buf = (unint64_t)(v326 - (unsigned char *)v325) >> 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v340, v340.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 1;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v339, v339.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v338, v338.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v337, v337.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 0;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v336, v336.__end_, (char *)buf, (char *)&buf[4], 1);
  *(_DWORD *)buf = 2;
  std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(&v335, v335.__end_, (char *)buf, (char *)&buf[4], 1);
LABEL_36:
  std::allocate_shared[abi:ne180100]<SentFeatureData,std::allocator<SentFeatureData>,std::vector<std::vector<float>> &,void>((uint64_t *)&v323, *a2 + 46);
  if (*(unsigned char *)(a1 + 872))
  {
    int v33 = v324;
    v322[0] = v323;
    v322[1] = v324;
    if (v324) {
      atomic_fetch_add_explicit(&v324->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::add_sent_feature_inputs((uint64_t)v21, (uint64_t)v322, (uint64_t)&v341, &v340, &v339, &v338, &v337, &v336, &v335);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  uint64_t v28 = (const std::string::value_type **)(a1 + 984);
  v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  begiuint64_t n = v335.__begin_;
  int v35 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape encoder input");
  if (v35)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v187 = v321;
    std::string v188 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    char v190 = __p;
    if (v187 < 0) {
      char v190 = v188;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v190, v35, status_string);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v321 < 0) {
    operator delete(__p[0]);
  }
  v241 = a2;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = (double)((v37.__d_.__rep_ - v34.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEFAULT, "Parallel AM Encoder Espresso reshaping time: %.3f s", buf, 0xCu);
  }
  v38.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Encoder Espresso reshaping time: %.3f s", v39, (double)((v38.__d_.__rep_ - v34.__d_.__rep_) / 1000000) / 1000.0, begin);
  int v40 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v318, "Unable to build encoder plan");
  if (v40)
  {
    uint64_t v191 = __cxa_allocate_exception(0x10uLL);
    int v192 = v319;
    uint64_t v193 = (void **)v318[0];
    char v194 = (const char *)espresso_get_status_string();
    int v195 = v318;
    if (v192 < 0) {
      int v195 = v193;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v195, v40, v194);
    MEMORY[0x210558D40](v191, buf);
    __cxa_throw(v191, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v319 < 0) {
    operator delete(v318[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = ((*a2)[5] - (*a2)[4]) >> 2;
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v43;
    _os_log_impl(&dword_20CD80000, v41, OS_LOG_TYPE_DEFAULT, "Parallel AM input length: %ld", buf, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM input length: %ld", v42, ((*a2)[5] - (*a2)[4]) >> 2);
  int v44 = (int *)(*a2)[4];
  uint64_t v45 = (int *)(*a2)[5];
  uint64_t v317 = 0;
  uint64_t v315 = 0;
  v316 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v315, v44, v45, v45 - v44);
  int v46 = v316;
  std::string::size_type v47 = v315;
  int v48 = operator new(0x10uLL);
  *int v48 = 1;
  v48[1] = (v46 - v47) >> 2;
  *(_OWORD *)buf = 0u;
  long long v366 = 0u;
  long long v367 = 0u;
  long long v368 = 0u;
  long long v369 = 0u;
  long long v370 = 0u;
  long long v371 = 0u;
  long long v372 = 0u;
  long long v373 = 0u;
  long long v374 = 0u;
  uint64_t v375 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)buf = v315;
  LODWORD(v375) = 65568;
  operator delete(v48);
  uint64_t v49 = v241;
  int v50 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v313, "Unable to bind encoder input");
  if (v50)
  {
    char v196 = __cxa_allocate_exception(0x10uLL);
    int v197 = v314;
    std::vector<int> v198 = (void **)v313[0];
    std::vector<int> v199 = (const char *)espresso_get_status_string();
    std::vector<int> v200 = v313;
    if (v197 < 0) {
      std::vector<int> v200 = v198;
    }
    StringFormatter::StringFormatter((StringFormatter *)v311, "%s Error: %d, %s", (const char *)v200, v50, v199);
    MEMORY[0x210558D40](v196, v311);
    __cxa_throw(v196, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v314 < 0) {
    operator delete(v313[0]);
  }
  v307[0] = (float)(unint64_t)(((*v241)[5] - (*v241)[4]) >> 2);
  std::vector<float>::vector(v310, 1uLL, v307);
  std::string::size_type v51 = operator new(8uLL);
  *std::string::size_type v51 = 1;
  memset(v311, 0, sizeof(v311));
  uint64_t v312 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void **)&v311[0] = v310[0];
  LODWORD(v312) = 65568;
  operator delete(v51);
  int v52 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v308, "Unable to bind encoder input_lengths");
  if (v52)
  {
    std::vector<int> v201 = __cxa_allocate_exception(0x10uLL);
    int v202 = v309;
    uint64_t v203 = (void **)v308[0];
    int v204 = (const char *)espresso_get_status_string();
    uint64_t v205 = v308;
    if (v202 < 0) {
      uint64_t v205 = v203;
    }
    StringFormatter::StringFormatter((StringFormatter *)v307, "%s Error: %d, %s", (const char *)v205, v52, v204);
    MEMORY[0x210558D40](v201, v307);
    __cxa_throw(v201, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v309 < 0) {
    operator delete(v308[0]);
  }
  if (*v21)
  {
    int v53 = v334;
    v304[0] = v333;
    v304[1] = (uint64_t)v334;
    if (v334) {
      atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::convert_feature_scale_data_to_espresso_buffer((uint64_t)v21, v304, *(void *)(a1 + 704), (uint64_t)v307, (uint64_t)v306, (uint64_t)v305);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
  }
  if (*(char *)(a1 + 1007) < 0)
  {
    std::string::size_type v54 = *(void *)(a1 + 992);
    if (!v54) {
      goto LABEL_73;
    }
    std::string::__init_copy_ctor_external(&v290, *v28, v54);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1007)) {
      goto LABEL_73;
    }
    *(_OWORD *)&v290.__r_.__value_.__l.__data_ = *(_OWORD *)v28;
    v290.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1000);
  }
  EspressoParallelNeuralAMInferenceBase::convert_language_id_data_to_espresso_buffer((uint64_t)&v290, &v329, *(void *)(a1 + 704), (uint64_t)v303);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v290.__r_.__value_.__l.__data_);
  }
LABEL_73:
  if (*(char *)(a1 + 1031) < 0)
  {
    std::string::size_type v55 = *(void *)(a1 + 1016);
    if (!v55) {
      goto LABEL_80;
    }
    std::string::__init_copy_ctor_external(&v289, *v30, v55);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1031)) {
      goto LABEL_80;
    }
    *(_OWORD *)&v289.__r_.__value_.__l.__data_ = *(_OWORD *)v30;
    v289.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1024);
  }
  EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v289, v328, *(void *)(a1 + 704), (uint64_t)v302);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v289.__r_.__value_.__l.__data_);
  }
LABEL_80:
  if (*(char *)(a1 + 1055) < 0)
  {
    std::string::size_type v56 = *(void *)(a1 + 1040);
    if (!v56) {
      goto LABEL_90;
    }
    std::string::__init_copy_ctor_external(&v288, *v31, v56);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1055)) {
      goto LABEL_90;
    }
    *(_OWORD *)&v288.__r_.__value_.__l.__data_ = *(_OWORD *)v31;
    v288.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1048);
  }
  uint64_t v57 = v326;
  std::chrono::steady_clock::time_point v58 = v325;
  std::chrono::steady_clock::time_point v59 = operator new(0x10uLL);
  *std::chrono::steady_clock::time_point v59 = 1;
  v59[1] = (v57 - v58) >> 2;
  long long v291 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  long long v294 = 0u;
  long long v295 = 0u;
  long long v296 = 0u;
  long long v297 = 0u;
  long long v298 = 0u;
  long long v299 = 0u;
  long long v300 = 0u;
  uint64_t v301 = 0;
  espresso_buffer_pack_tensor_shape();
  *(void *)&long long v291 = v325;
  LODWORD(v301) = 65568;
  operator delete(v59);
  int v60 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v361, "Unable to bind input style");
  if (v60)
  {
    uint64_t v226 = __cxa_allocate_exception(0x10uLL);
    int v227 = v362;
    int v228 = *(const char **)v361;
    unsigned int v229 = (const char *)espresso_get_status_string();
    uint64_t v230 = v361;
    if (v227 < 0) {
      uint64_t v230 = v228;
    }
    StringFormatter::StringFormatter((StringFormatter *)v287, "%s Error: %d, %s", v230, v60, v229);
    MEMORY[0x210558D40](v226, v287);
    __cxa_throw(v226, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v362 < 0) {
    operator delete(*(void **)v361);
  }
  if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v288.__r_.__value_.__l.__data_);
  }
LABEL_90:
  if (*(unsigned char *)(a1 + 872))
  {
    int v61 = v323;
    int v62 = v324;
    if (v324) {
      atomic_fetch_add_explicit(&v324->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::convert_sent_feature_data_to_espresso_buffer((uint64_t)v21, v61, *(void *)(a1 + 704), (uint64_t)v287);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
  }
  v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v64 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v285, &byte_20D5A22AE);
  if (v64)
  {
    uint64_t v206 = __cxa_allocate_exception(0x10uLL);
    int v207 = v286;
    uint64_t v208 = (void **)v285[0];
    char v209 = (const char *)espresso_get_status_string();
    int v210 = v285;
    if (v207 < 0) {
      int v210 = v208;
    }
    StringFormatter::StringFormatter((StringFormatter *)v361, "%s Error: %d, %s", (const char *)v210, v64, v209);
    MEMORY[0x210558D40](v206, v361);
    __cxa_throw(v206, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v286 < 0) {
    operator delete(v285[0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v66.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)uint64_t v361 = 134217984;
    *(double *)&v361[4] = (double)((v66.__d_.__rep_ - v63.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v65, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso encoder inference time: %.3f s", v361, 0xCu);
  }
  v67.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM Espresso encoder inference time: %.3f s", v68, (double)((v67.__d_.__rep_ - v63.__d_.__rep_) / 1000000) / 1000.0);
  int v69 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v283, "Unable to bind encoder output_encoder_output");
  if (v69)
  {
    char v211 = __cxa_allocate_exception(0x10uLL);
    int v212 = v284;
    uint64_t v213 = (void **)v283[0];
    char v214 = (const char *)espresso_get_status_string();
    uint64_t v215 = v283;
    if (v212 < 0) {
      uint64_t v215 = v213;
    }
    StringFormatter::StringFormatter((StringFormatter *)v282, "%s Error: %d, %s", (const char *)v215, v69, v214);
    MEMORY[0x210558D40](v211, v282);
    __cxa_throw(v211, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v284 < 0) {
    operator delete(v283[0]);
  }
  if ((*(char *)(a1 + 1103) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 1103)) {
      goto LABEL_113;
    }
LABEL_109:
    int v70 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v280, "Unable to bind encoder output_alignment");
    if (v70)
    {
      uint64_t v231 = __cxa_allocate_exception(0x10uLL);
      int v232 = v281;
      uint64_t v233 = (void **)v280[0];
      uint64_t v234 = (const char *)espresso_get_status_string();
      uint64_t v235 = v280;
      if (v232 < 0) {
        uint64_t v235 = v233;
      }
      StringFormatter::StringFormatter((StringFormatter *)v350, "%s Error: %d, %s", (const char *)v235, v70, v234);
      MEMORY[0x210558D40](v231, v350);
      __cxa_throw(v231, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v281 < 0) {
      operator delete(v280[0]);
    }
    EspressoUtils::convert_espbuffer_to_2d_vector(v350, (uint64_t)v282);
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v344);
    *(_OWORD *)size_t v344 = *(_OWORD *)v350;
    uint64_t v345 = v351;
    *(void *)&long long v351 = 0;
    memset(v350, 0, sizeof(v350));
    *(void *)&v259[0] = v350;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
    free(v282[0]);
    goto LABEL_113;
  }
  if (*(void *)(a1 + 1088)) {
    goto LABEL_109;
  }
LABEL_113:
  int v71 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v278, "Unable to bind encoder output_decoder_length_");
  if (v71)
  {
    char v216 = __cxa_allocate_exception(0x10uLL);
    int v217 = v279;
    std::string v218 = (void **)v278[0];
    std::string v219 = (const char *)espresso_get_status_string();
    uint64_t v220 = v278;
    if (v217 < 0) {
      uint64_t v220 = v218;
    }
    StringFormatter::StringFormatter((StringFormatter *)v350, "%s Error: %d, %s", (const char *)v220, v71, v219);
    MEMORY[0x210558D40](v216, v350);
    __cxa_throw(v216, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v279 < 0) {
    operator delete(v278[0]);
  }
  int v72 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v276, &byte_20D5A22AE);
  if (v72)
  {
    uint64_t v221 = __cxa_allocate_exception(0x10uLL);
    int v222 = v277;
    long long v223 = (void **)v276[0];
    long long v224 = (const char *)espresso_get_status_string();
    uint64_t v225 = v276;
    if (v222 < 0) {
      uint64_t v225 = v223;
    }
    StringFormatter::StringFormatter((StringFormatter *)v350, "%s Error: %d, %s", (const char *)v225, v72, v224);
    MEMORY[0x210558D40](v221, v350);
    __cxa_throw(v221, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v277 < 0) {
    operator delete(v276[0]);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v350 = 0;
    _os_log_impl(&dword_20CD80000, v73, OS_LOG_TYPE_DEFAULT, "Parallel AM inference encoder end.", v350, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference encoder end.", v74);
  int v75 = 0;
  int v243 = (int)*(float *)v282[0];
  int v239 = v364 - 1;
  uint64_t v244 = (void *)(a1 + 1128);
  int v240 = (std::string *)(a1 + 1176);
  while (v75 < v243)
  {
    kdebug_trace();
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::size_type v76 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v350 = 0;
      _os_log_impl(&dword_20CD80000, v76, OS_LOG_TYPE_DEFAULT, "Parallel AM inference decoder begin.", v350, 2u);
    }
    Diagnostics::log(5, "Parallel AM inference decoder begin.", v77);
    char v78 = (char *)operator new(0x88uLL);
    *((void *)v78 + 1) = 0;
    *((void *)v78 + 2) = 0;
    *(void *)char v78 = off_26C215E20;
    *(_OWORD *)(v78 + 24) = 0u;
    *(_OWORD *)(v78 + 40) = 0u;
    *(_OWORD *)(v78 + 120) = 0u;
    *(_OWORD *)(v78 + 56) = 0u;
    *(_OWORD *)(v78 + 72) = 0u;
    *(_OWORD *)(v78 + 88) = 0u;
    *(_OWORD *)(v78 + 104) = 0u;
    *((_WORD *)v78 + 12) = 257;
    *((_OWORD *)v78 + 2) = 0u;
    *(void *)(v78 + 126) = 0;
    *((_OWORD *)v78 + 3) = 0u;
    *((_OWORD *)v78 + 4) = 0u;
    *((_OWORD *)v78 + 5) = 0u;
    *((_OWORD *)v78 + 6) = 0u;
    *((_OWORD *)v78 + 7) = 0u;
    uint64_t v79 = *v49;
    std::chrono::steady_clock::time_point v80 = (std::__shared_weak_count *)v49[1];
    if (v80)
    {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
      v78[132] = FastSpeechUtils::has_whisper(v79[1], v79[2]);
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }
    else
    {
      v78[132] = FastSpeechUtils::has_whisper(v79[1], v79[2]);
    }
    std::chrono::steady_clock::time_point v81 = v244;
    int v82 = *(_DWORD *)(v245 + 1228);
    int v83 = *(_DWORD *)(v245 + 1224) + v75 + *(_DWORD *)(v245 + 1232);
    if (v83 >= v239) {
      int v84 = v239;
    }
    else {
      int v84 = *(_DWORD *)(v245 + 1224) + v75 + *(_DWORD *)(v245 + 1232);
    }
    if (v83 >= v243 - 1) {
      int v85 = v243 - 1;
    }
    else {
      int v85 = *(_DWORD *)(v245 + 1224) + v75 + *(_DWORD *)(v245 + 1232);
    }
    if (*(char *)(v245 + 1151) < 0) {
      std::chrono::steady_clock::time_point v81 = (void *)*v244;
    }
    std::string v86 = operator new(8uLL);
    long long v273 = v86;
    *std::string v86 = v81;
    long long v275 = v86 + 1;
    long long v274 = v86 + 1;
    int v87 = v363;
    int v88 = (int *)operator new(4uLL);
    uint64_t v242 = (uint64_t *)(v78 + 32);
    v272.__begin_ = v88;
    *int v88 = v87;
    v272.__end_cap_.__value_ = v88 + 1;
    v272.__end_ = v88 + 1;
    int v89 = (int *)operator new(4uLL);
    int v90 = v82;
    int v91 = v75;
    uint64_t v92 = (v75 - v82) & ~((v75 - v82) >> 31);
    int v93 = v84 - v92 + 1;
    v271.__begin_ = v89;
    *int v89 = v93;
    v271.__end_cap_.__value_ = v89 + 1;
    v271.__end_ = v89 + 1;
    std::chrono::steady_clock::time_point v94 = (int *)operator new(4uLL);
    v270.__begin_ = v94;
    *std::chrono::steady_clock::time_point v94 = 1;
    v270.__end_cap_.__value_ = v94 + 1;
    v270.__end_ = v94 + 1;
    std::chrono::steady_clock::time_point v95 = (int *)operator new(4uLL);
    v269.__begin_ = v95;
    *std::chrono::steady_clock::time_point v95 = 1;
    v269.__end_cap_.__value_ = v95 + 1;
    v269.__end_ = v95 + 1;
    uint64_t v96 = (int *)operator new(4uLL);
    v268.__begin_ = v96;
    *uint64_t v96 = 0;
    v268.__end_cap_.__value_ = v96 + 1;
    v268.__end_ = v96 + 1;
    int v97 = (int *)operator new(4uLL);
    v267.__begin_ = v97;
    int *v97 = 3;
    v267.__end_cap_.__value_ = v97 + 1;
    v267.__end_ = v97 + 1;
    if (*(char *)(v245 + 1199) < 0)
    {
      if (!*(void *)(v245 + 1184)) {
        goto LABEL_145;
      }
LABEL_144:
      EspressoParallelNeuralAMInferenceBase::add_speaker_id_inputs((uint64_t *)v240, v328, (uint64_t)&v273, &v272, &v271, &v270, &v269, &v268, &v267);
      goto LABEL_145;
    }
    if (*(unsigned char *)(v245 + 1199)) {
      goto LABEL_144;
    }
LABEL_145:
    v98.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::vector<int>::pointer v237 = v267.__begin_;
    int v99 = espresso_network_change_input_blob_shapes_seq_rank();
    std::string::basic_string[abi:ne180100]<0>(v265, "Unable to reshape decoder input");
    if (v99)
    {
      long long v161 = __cxa_allocate_exception(0x10uLL);
      int v162 = v266;
      long long v163 = (void **)v265[0];
      int v164 = (const char *)espresso_get_status_string();
      long long v165 = v265;
      if (v162 < 0) {
        long long v165 = v163;
      }
      StringFormatter::StringFormatter((StringFormatter *)v350, "%s Error: %d, %s", (const char *)v165, v99, v164);
      MEMORY[0x210558D40](v161, v350);
      __cxa_throw(v161, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v266 < 0) {
      operator delete(v265[0]);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v100 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v101.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)uint64_t v350 = 134217984;
      *(double *)&v350[4] = (double)((v101.__d_.__rep_ - v98.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_20CD80000, v100, OS_LOG_TYPE_DEFAULT, "Parallel AM Decoder Espresso reshaping time: %.3f s", v350, 0xCu);
    }
    v102.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(5, "Parallel AM Decoder Espresso reshaping time: %.3f s", v103, (double)((v102.__d_.__rep_ - v98.__d_.__rep_) / 1000000) / 1000.0, v237);
    int v104 = espresso_plan_build();
    std::string::basic_string[abi:ne180100]<0>(v263, "Unable to build decoder plan");
    if (v104)
    {
      long long v156 = __cxa_allocate_exception(0x10uLL);
      int v157 = v264;
      double v158 = (void **)v263[0];
      int v159 = (const char *)espresso_get_status_string();
      long long v160 = v263;
      if (v157 < 0) {
        long long v160 = v158;
      }
      StringFormatter::StringFormatter((StringFormatter *)v350, "%s Error: %d, %s", (const char *)v160, v104, v159);
      MEMORY[0x210558D40](v156, v350);
      __cxa_throw(v156, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v264 < 0) {
      operator delete(v263[0]);
    }
    uint64_t v105 = *(void *)v361;
    uint64_t v106 = v363;
    int v107 = operator new(0x18uLL);
    *int v107 = 1;
    v107[1] = v93;
    void v107[2] = v106;
    *(_OWORD *)uint64_t v350 = 0u;
    long long v351 = 0u;
    long long v352 = 0u;
    long long v353 = 0u;
    long long v354 = 0u;
    long long v355 = 0u;
    long long v356 = 0u;
    long long v357 = 0u;
    long long v358 = 0u;
    long long v359 = 0u;
    uint64_t v360 = 0;
    espresso_buffer_pack_tensor_shape();
    *(void *)uint64_t v350 = v105 + 4 * v106 * v92;
    LODWORD(v360) = 65568;
    operator delete(v107);
    int v108 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v261, "Unable to bind decoder decoder_input");
    if (v108)
    {
      uint64_t v171 = __cxa_allocate_exception(0x10uLL);
      int v172 = v262;
      uint64_t v173 = (void **)v261[0];
      int v174 = (const char *)espresso_get_status_string();
      uint64_t v175 = v261;
      if (v172 < 0) {
        uint64_t v175 = v173;
      }
      StringFormatter::StringFormatter((StringFormatter *)v259, "%s Error: %d, %s", (const char *)v175, v108, v174);
      MEMORY[0x210558D40](v171, v259);
      __cxa_throw(v171, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v262 < 0) {
      operator delete(v261[0]);
    }
    *(float *)uint64_t v349 = (float)(v85 - v92 + 1);
    std::vector<float>::vector(v258, 1uLL, v349);
    int v109 = operator new(8uLL);
    *int v109 = 1;
    memset(v259, 0, sizeof(v259));
    uint64_t v260 = 0;
    espresso_buffer_pack_tensor_shape();
    *(void **)&v259[0] = v258[0];
    LODWORD(v260) = 65568;
    operator delete(v109);
    int v110 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v256, "Unable to build decoder decoder_length");
    if (v110)
    {
      long long v166 = __cxa_allocate_exception(0x10uLL);
      int v167 = v257;
      long long v168 = (void **)v256[0];
      int v169 = (const char *)espresso_get_status_string();
      uint64_t v170 = v256;
      if (v167 < 0) {
        uint64_t v170 = v168;
      }
      StringFormatter::StringFormatter((StringFormatter *)v349, "%s Error: %d, %s", (const char *)v170, v110, v169);
      MEMORY[0x210558D40](v166, v349);
      __cxa_throw(v166, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v257 < 0) {
      operator delete(v256[0]);
    }
    if (*(char *)(v245 + 1199) < 0)
    {
      std::string::size_type v111 = *(void *)(v245 + 1184);
      if (!v111) {
        goto LABEL_168;
      }
      std::string::__init_copy_ctor_external(&v255, v240->__r_.__value_.__l.__data_, v111);
    }
    else
    {
      if (!*(unsigned char *)(v245 + 1199)) {
        goto LABEL_168;
      }
      std::string v255 = *v240;
    }
    EspressoParallelNeuralAMInferenceBase::convert_speaker_id_data_to_espresso_buffer((uint64_t)&v255, v328, *(void *)(v245 + 712), (uint64_t)v302);
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v255.__r_.__value_.__l.__data_);
    }
LABEL_168:
    v112.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    BOOL v113 = !NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)v112.__d_.__rep_);
    if (v91 < 1) {
      LOBYTE(v113) = 1;
    }
    if (v113)
    {
      int v115 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(v252, &byte_20D5A22AE);
      if (v115)
      {
        uint64_t v181 = __cxa_allocate_exception(0x10uLL);
        int v182 = v253;
        uint64_t v183 = (void **)v252[0];
        uint64_t v184 = (const char *)espresso_get_status_string();
        char v185 = v252;
        if (v182 < 0) {
          char v185 = v183;
        }
        StringFormatter::StringFormatter((StringFormatter *)v349, "%s Error: %d, %s", (const char *)v185, v115, v184);
        MEMORY[0x210558D40](v181, v349);
        __cxa_throw(v181, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (v253 < 0) {
        operator delete(v252[0]);
      }
    }
    else
    {
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN51EspressoParallelNeuralAMDecoupledStreamingInference9inferenceENSt3__110shared_ptrI15TacotronFeatureEENS0_8functionIFiNS1_I14WaveNetFeatureEEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_105;
      block[4] = v245;
      dispatch_block_t v114 = dispatch_block_create((dispatch_block_flags_t)0, block);
      dispatch_async(*(dispatch_queue_t *)(v245 + 1240), v114);
      dispatch_block_wait(v114, 0xFFFFFFFFFFFFFFFFLL);
      _Block_release(v114);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string v116 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v117.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)uint64_t v349 = 134217984;
      *(double *)&v349[4] = (double)((v117.__d_.__rep_ - v112.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_20CD80000, v116, OS_LOG_TYPE_DEFAULT, "Parallel AM Espresso decoder inference time: %.3f s", v349, 0xCu);
    }
    v118.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(5, "Parallel AM Espresso decoder inference time: %.3f s", v119, (double)((v118.__d_.__rep_ - v112.__d_.__rep_) / 1000000) / 1000.0);
    espresso_network_bind_buffer();
    EspressoUtils::convert_espbuffer_to_2d_vector(&v250, (uint64_t)v349);
    free(*(void **)v349);
    if (v91 >= v90) {
      int v120 = v90;
    }
    else {
      int v120 = v91;
    }
    signed int v121 = *(_DWORD *)(v245 + 1224) + v120;
    if (v121 >= (int)(-1431655765 * ((unint64_t)(v251 - v250) >> 3))) {
      signed int v121 = -1431655765 * ((unint64_t)(v251 - v250) >> 3);
    }
    uint64_t v122 = v250 + 24 * v120;
    uint64_t v123 = v250 + 24 * v121;
    int v124 = v78 + 48;
    unint64_t v125 = v121 - (uint64_t)v120;
    int v126 = (char *)*((void *)v78 + 4);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v78 + 6) - (void)v126) >> 3) >= v125)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v78 + 5) - (void)v126) >> 3) >= v125)
      {
        int v131 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(v122, v123, v126);
        std::vector<int> v150 = (char *)*((void *)v78 + 5);
        if (v150 != v131)
        {
          std::vector<int> v151 = (char *)*((void *)v78 + 5);
          do
          {
            int v153 = (void *)*((void *)v151 - 3);
            v151 -= 24;
            std::vector<int> v152 = v153;
            if (v153)
            {
              *((void *)v150 - 2) = v152;
              operator delete(v152);
            }
            std::vector<int> v150 = v151;
          }
          while (v151 != v131);
        }
        goto LABEL_195;
      }
      uint64_t v130 = v122 + 8 * ((uint64_t)(*((void *)v78 + 5) - (void)v126) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(v122, v130, v126);
      int v129 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)(v78 + 48), v130, v123, *((void **)v78 + 5));
    }
    else
    {
      std::vector<std::vector<int>>::__vdeallocate(v242);
      if (v125 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v127 = 0x5555555555555556 * ((*v124 - *v242) >> 3);
      if (v127 <= v125) {
        unint64_t v127 = v125;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((*v124 - *v242) >> 3) >= 0x555555555555555) {
        unint64_t v128 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v128 = v127;
      }
      std::vector<std::vector<float>>::__vallocate[abi:ne180100](v242, v128);
      int v129 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)(v78 + 48), v122, v123, *((void **)v78 + 5));
    }
    int v131 = v129;
LABEL_195:
    *((void *)v78 + 5) = v131;
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v78 + 56), *((void *)v78 + 4), (uint64_t)v131, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v131[-*((void *)v78 + 4)] >> 3));
    int v132 = espresso_plan_build_clean();
    std::string::basic_string[abi:ne180100]<0>(v248, &byte_20D5A22AE);
    if (v132)
    {
      int v176 = __cxa_allocate_exception(0x10uLL);
      int v177 = v249;
      uint64_t v178 = (void **)v248[0];
      std::vector<int>::pointer v179 = (const char *)espresso_get_status_string();
      uint64_t v180 = v248;
      if (v177 < 0) {
        uint64_t v180 = v178;
      }
      StringFormatter::StringFormatter((StringFormatter *)v346, "%s Error: %d, %s", (const char *)v180, v132, v179);
      MEMORY[0x210558D40](v176, v346);
      __cxa_throw(v176, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v249 < 0) {
      operator delete(v248[0]);
    }
    int v133 = *(uint64_t **)v344;
    int v134 = *(uint64_t **)&v344[2];
    if (*(void *)v344 != *(void *)&v344[2])
    {
      if (*(void *)&v344[2] - *(void *)v344 == 24
        && (0xAAAAAAAAAAAAAAABLL * ((v251 - v250) >> 3) > 1
         || (*v241)[5] - (*v241)[4] == *(void *)(*(void *)v344 + 8) - **(void **)v344))
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v78 + 80), *(uint64_t *)v344, *(uint64_t *)&v344[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v344[2] - *(void *)v344) >> 3));
      }
      else
      {
        do
        {
          __dst = 0;
          *(void *)uint64_t v346 = 0;
          uint64_t v348 = 0;
          uint64_t v135 = *v133;
          unint64_t v136 = (v133[1] - *v133) >> 2;
          if (v136 >= v91) {
            uint64_t v137 = v91;
          }
          else {
            uint64_t v137 = (v133[1] - *v133) >> 2;
          }
          if (v136 >= v137 - 0x5555555555555555 * ((uint64_t)(*((void *)v78 + 5) - *((void *)v78 + 4)) >> 3)) {
            unint64_t v136 = v137 - 0x5555555555555555 * ((uint64_t)(*((void *)v78 + 5) - *((void *)v78 + 4)) >> 3);
          }
          uint64_t v138 = (const void *)(v135 + 4 * v137);
          uint64_t v139 = v135 + 4 * v136;
          unint64_t v140 = v136 - v137;
          if (v136 == v137)
          {
            int v141 = 0;
            size_t v142 = v139 - (void)v138;
          }
          else
          {
            if (v140 >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            std::vector<int>::__vallocate[abi:ne180100](v346, v140);
            int v141 = (char *)__dst;
            size_t v142 = v139 - (void)v138;
            memmove(__dst, v138, v142);
          }
          __dst = &v141[v142];
          unint64_t v143 = *((void *)v78 + 11);
          if (v143 >= *((void *)v78 + 12))
          {
            uint64_t v144 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)v78 + 10, (uint64_t)v346);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)(v78 + 80), (uint64_t)v346);
            uint64_t v144 = v143 + 24;
          }
          *((void *)v78 + 11) = v144;
          if (*(void *)v346)
          {
            __dst = *(void **)v346;
            operator delete(*(void **)v346);
          }
          v133 += 3;
        }
        while (v133 != v134);
      }
    }
    v78[24] = v91 == 0;
    int v145 = *(_DWORD *)(v245 + 1224) + v91;
    v78[25] = v145 >= v243;
    kdebug_trace();
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v146 = Diagnostics_GetLogObject(void)::__profile_log_default;
    int v75 = v145;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v346 = 0;
      _os_log_impl(&dword_20CD80000, v146, OS_LOG_TYPE_DEFAULT, "Parallel AM inference decoder end.", v346, 2u);
    }
    Diagnostics::log(5, "Parallel AM inference decoder end.", v147);
    uint64_t v246 = v78 + 24;
    float v247 = (std::__shared_weak_count *)v78;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v78 + 1, 1uLL, memory_order_relaxed);
    uint64_t v148 = *(void *)(a3 + 24);
    uint64_t v49 = v241;
    if (!v148) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int v149 = (*(uint64_t (**)(uint64_t, char **))(*(void *)v148 + 48))(v148, &v246);
    if (v247) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v247);
    }
    *(void *)uint64_t v346 = &v250;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v346);
    if (v258[0])
    {
      v258[1] = v258[0];
      operator delete(v258[0]);
    }
    if (v267.__begin_)
    {
      v267.__end_ = v267.__begin_;
      operator delete(v267.__begin_);
    }
    if (v268.__begin_)
    {
      v268.__end_ = v268.__begin_;
      operator delete(v268.__begin_);
    }
    if (v269.__begin_)
    {
      v269.__end_ = v269.__begin_;
      operator delete(v269.__begin_);
    }
    if (v270.__begin_)
    {
      v270.__end_ = v270.__begin_;
      operator delete(v270.__begin_);
    }
    if (v271.__begin_)
    {
      v271.__end_ = v271.__begin_;
      operator delete(v271.__begin_);
    }
    if (v272.__begin_)
    {
      v272.__end_ = v272.__begin_;
      operator delete(v272.__begin_);
    }
    if (v273)
    {
      long long v274 = v273;
      operator delete(v273);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78);
    if (v149) {
      break;
    }
  }
  free(*(void **)v361);
  free(v282[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v154 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v350 = 0;
    _os_log_impl(&dword_20CD80000, v154, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end.", v350, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference end.", v155);
  if (v310[0])
  {
    v310[1] = v310[0];
    operator delete(v310[0]);
  }
  if (v315)
  {
    v316 = v315;
    operator delete(v315);
  }
  if (v324) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v324);
  }
  if (v325)
  {
    uint64_t v326 = v325;
    operator delete(v325);
  }
  if (v328[0])
  {
    v328[1] = v328[0];
    operator delete(v328[0]);
  }
  if (v329)
  {
    uint64_t v330 = v329;
    operator delete(v329);
  }
  if (v334) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v334);
  }
  if (v335.__begin_)
  {
    v335.__end_ = v335.__begin_;
    operator delete(v335.__begin_);
  }
  if (v336.__begin_)
  {
    v336.__end_ = v336.__begin_;
    operator delete(v336.__begin_);
  }
  if (v337.__begin_)
  {
    v337.__end_ = v337.__begin_;
    operator delete(v337.__begin_);
  }
  if (v338.__begin_)
  {
    v338.__end_ = v338.__begin_;
    operator delete(v338.__begin_);
  }
  if (v339.__begin_)
  {
    v339.__end_ = v339.__begin_;
    operator delete(v339.__begin_);
  }
  if (v340.__begin_)
  {
    v340.__end_ = v340.__begin_;
    operator delete(v340.__begin_);
  }
  if (v341)
  {
    unsigned int v342 = v341;
    operator delete(v341);
  }
  *(void *)buf = v344;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_20D2C20B0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xCA7]) < 0)
  {
    operator delete((void *)STACK[0xC90]);
    if ((v2 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x34F]) < 0) {
        operator delete((void *)STACK[0x338]);
      }
      unint64_t v4 = (void *)STACK[0x948];
      if (STACK[0x948])
      {
        STACK[0x950] = (unint64_t)v4;
        operator delete(v4);
      }
      unint64_t v5 = (void *)STACK[0xA28];
      if (STACK[0xA28])
      {
        STACK[0xA30] = (unint64_t)v5;
        operator delete(v5);
      }
      if (STACK[0xA88]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xA88]);
      }
      uint64_t v6 = (void *)STACK[0xA90];
      if (STACK[0xA90])
      {
        STACK[0xA98] = (unint64_t)v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)STACK[0xAA8];
      if (STACK[0xAA8])
      {
        STACK[0xAB0] = (unint64_t)v7;
        operator delete(v7);
      }
      uint64_t v8 = (void *)STACK[0xAC0];
      if (STACK[0xAC0])
      {
        STACK[0xAC8] = (unint64_t)v8;
        operator delete(v8);
      }
      if (STACK[0xAF0]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xAF0]);
      }
      uint64_t v9 = (void *)STACK[0xAF8];
      if (STACK[0xAF8])
      {
        STACK[0xB00] = (unint64_t)v9;
        operator delete(v9);
      }
      uint64_t v10 = (void *)STACK[0xB10];
      if (STACK[0xB10])
      {
        STACK[0xB18] = (unint64_t)v10;
        operator delete(v10);
      }
      uint64_t v11 = (void *)STACK[0xB28];
      if (STACK[0xB28])
      {
        STACK[0xB30] = (unint64_t)v11;
        operator delete(v11);
      }
      unint64_t v12 = (void *)STACK[0xB40];
      if (STACK[0xB40])
      {
        STACK[0xB48] = (unint64_t)v12;
        operator delete(v12);
      }
      uint64_t v13 = (void *)STACK[0xB58];
      if (STACK[0xB58])
      {
        STACK[0xB60] = (unint64_t)v13;
        operator delete(v13);
      }
      uint64_t v14 = (void *)STACK[0xB70];
      if (STACK[0xB70])
      {
        STACK[0xB78] = (unint64_t)v14;
        operator delete(v14);
      }
      uint64_t v15 = (void *)STACK[0xB88];
      if (STACK[0xB88])
      {
        STACK[0xB90] = (unint64_t)v15;
        operator delete(v15);
      }
      STACK[0x960] = (unint64_t)&STACK[0xBA0];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x960]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20D2C28E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN51EspressoParallelNeuralAMDecoupledStreamingInference9inferenceENSt3__110shared_ptrI15TacotronFeatureEENS0_8functionIFiNS1_I14WaveNetFeatureEEEEE_block_invoke()
{
  int v0 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  if (v0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v2 = v7;
    uint64_t v3 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    unint64_t v5 = __p;
    if (v2 < 0) {
      unint64_t v5 = v3;
    }
    StringFormatter::StringFormatter((StringFormatter *)v8, "%s Error: %d, %s", (const char *)v5, v0, status_string);
    MEMORY[0x210558D40](exception, v8);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D2C29DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_20D2C2BA0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D2C2BA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void ParallelNeuralAcousticModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v188 = *MEMORY[0x263EF8340];
  kdebug_trace();
  std::mutex::lock((std::mutex *)(a1 + 384));
  *(unsigned char *)(a1 + 288) = 1;
  uint64_t v5 = *(void *)(*(void *)v4 + 16);
  *(void *)&long long v147 = *(void *)(*(void *)v4 + 8);
  *((void *)&v147 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = *(std::__shared_weak_count **)(*(void *)v6 + 16);
  uint64_t v145 = *(void *)(*(void *)v6 + 8);
  int v146 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = v147;
  uint64_t v9 = *(void *)(v147 + 8);
  if (v9 != *(void *)(v147 + 16) && *(unsigned char *)(v9 + 60)) {
    *(void *)(a1 + 480) = 0;
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v143 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v142 = 0;
  uint64_t v11 = *(void *)(a1 + 464);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)&v147 + 1);
  if (*((void *)&v147 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v147 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = *(_DWORD *)(a1 + 344);
  ParallelNeuralAMInference::Config::Config((ParallelNeuralAMInference::Config *)v173, (const ParallelNeuralAMInference::Config *)(v11 + 8));
  unint64_t v14 = (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 2;
  LODWORD(__dst) = 1065353216;
  std::vector<float>::vector(&v139, v14, &__dst);
  __dst = 0;
  long long v166 = 0;
  uint64_t v167 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__dst, v139, (uint64_t)v140.__r_.__value_.__l.__data_, (uint64_t)(v140.__r_.__value_.__r.__words[0] - (void)v139) >> 2);
  int v162 = 0;
  long long v163 = 0;
  uint64_t v164 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v162, v139, (uint64_t)v140.__r_.__value_.__l.__data_, (uint64_t)(v140.__r_.__value_.__r.__words[0] - (void)v139) >> 2);
  int v159 = 0;
  long long v160 = 0;
  uint64_t v161 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v159, v139, (uint64_t)v140.__r_.__value_.__l.__data_, (uint64_t)(v140.__r_.__value_.__r.__words[0] - (void)v139) >> 2);
  uint64_t v15 = *(unsigned char **)(v8 + 120);
  uint64_t v16 = *(unsigned char **)(v8 + 128);
  if (v15 != v16) {
    memmove(__dst, v15, v16 - v15);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v130 = v10.__d_.__rep_;
  uint64_t v17 = *(unsigned char **)(v8 + 144);
  uint64_t v18 = *(unsigned char **)(v8 + 152);
  if (v17 != v18) {
    memmove(v162, v17, v18 - v17);
  }
  uint64_t v19 = *(unsigned char **)(v8 + 168);
  char v20 = *(unsigned char **)(v8 + 176);
  if (v19 != v20) {
    memmove(v159, v19, v20 - v19);
  }
  if ((void **)(v8 + 120) != &__dst) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 120), (char *)__dst, (uint64_t)v166, (v166 - (unsigned char *)__dst) >> 2);
  }
  if ((Observable **)(v8 + 144) != &v162) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 144), (char *)v162, (uint64_t)v163, (v163 - v162) >> 2);
  }
  if ((void **)(v8 + 168) != &v159) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 168), (char *)v159, (uint64_t)v160, (v160 - (unsigned char *)v159) >> 2);
  }
  unint64_t v21 = (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 2;
  LODWORD(v154) = 0;
  std::vector<float>::vector(&v157, v21, &v154);
  int v154 = 0;
  int v155 = 0;
  uint64_t v156 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v154, v157, (uint64_t)v158, (v158 - (unsigned char *)v157) >> 2);
  std::vector<int> v151 = 0;
  std::vector<int> v152 = 0;
  uint64_t v153 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v151, v157, (uint64_t)v158, (v158 - (unsigned char *)v157) >> 2);
  std::string __p = 0;
  int v149 = 0;
  uint64_t v150 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v157, (uint64_t)v158, (v158 - (unsigned char *)v157) >> 2);
  int64_t v22 = *(unsigned char **)(v8 + 192);
  std::vector<int>::pointer v23 = *(unsigned char **)(v8 + 200);
  if (v22 != v23)
  {
    memmove(v154, v22, v23 - v22);
    uint64_t v24 = (float *)v154;
    int v25 = v155;
    if (v154 != v155)
    {
      do
      {
        *uint64_t v24 = *v24 / (float)v13;
        ++v24;
      }
      while (v24 != v25);
    }
  }
  uint64_t v26 = *(unsigned char **)(v8 + 216);
  uint64_t v27 = *(unsigned char **)(v8 + 224);
  if (v26 != v27) {
    memmove(v151, v26, v27 - v26);
  }
  uint64_t v28 = *(unsigned char **)(v8 + 240);
  uint64_t v29 = *(unsigned char **)(v8 + 248);
  if (v28 != v29) {
    memmove(__p, v28, v29 - v28);
  }
  if ((void **)(v8 + 192) != &v154) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 192), (char *)v154, (uint64_t)v155, ((char *)v155 - (unsigned char *)v154) >> 2);
  }
  if ((void **)(v8 + 216) != &v151) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 216), (char *)v151, (uint64_t)v152, (v152 - (unsigned char *)v151) >> 2);
  }
  if ((void **)(v8 + 240) != &__p) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 240), (char *)__p, (uint64_t)v149, (v149 - (unsigned char *)__p) >> 2);
  }
  uint64_t v30 = (void **)(v8 + 264);
  unint64_t v31 = (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 2;
  if (v173[1]) {
    LODWORD(v168) = 1065353216;
  }
  else {
    LODWORD(v168) = 0;
  }
  std::vector<float>::vector(buf, v31, &v168);
  int v32 = *v30;
  if (*v30)
  {
    *(void *)(v8 + 272) = v32;
    operator delete(v32);
    *uint64_t v30 = 0;
    *(void *)(v8 + 272) = 0;
    *(void *)(v8 + 280) = 0;
  }
  *(_OWORD *)uint64_t v30 = *(_OWORD *)buf;
  *(void *)(v8 + 280) = v172;
  unint64_t v33 = (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 2;
  if (v173[2]) {
    LODWORD(v168) = 1065353216;
  }
  else {
    LODWORD(v168) = 0;
  }
  std::vector<float>::vector(buf, v33, &v168);
  std::chrono::steady_clock::time_point v34 = *(void **)(v8 + 288);
  if (v34)
  {
    *(void *)(v8 + 296) = v34;
    operator delete(v34);
    *(void *)(v8 + 288) = 0;
    *(void *)(v8 + 296) = 0;
    *(void *)(v8 + 304) = 0;
  }
  *(_OWORD *)(v8 + 288) = *(_OWORD *)buf;
  *(void *)(v8 + 304) = v172;
  unint64_t v35 = (uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 2;
  if (v173[3]) {
    LODWORD(v168) = 1065353216;
  }
  else {
    LODWORD(v168) = 0;
  }
  std::vector<float>::vector(buf, v35, &v168);
  std::chrono::steady_clock::time_point v37 = (void *)(v8 + 312);
  int v36 = *(void **)(v8 + 312);
  if (v36)
  {
    *(void *)(v8 + 320) = v36;
    operator delete(v36);
    *std::chrono::steady_clock::time_point v37 = 0;
    *(void *)(v8 + 320) = 0;
    *(void *)(v8 + 328) = 0;
  }
  *(_OWORD *)std::chrono::steady_clock::time_point v37 = *(_OWORD *)buf;
  *(void *)(v8 + 328) = v172;
  if (v185[1])
  {
    if (*(char *)(v8 + 415) < 0)
    {
      if (!*(void *)(v8 + 400)) {
        goto LABEL_66;
      }
    }
    else if (!*(unsigned char *)(v8 + 415))
    {
      goto LABEL_66;
    }
    std::chrono::steady_clock::time_point v38 = (void *)(v8 + 392);
    if (v185 == (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v184, (const void **)(v8 + 392)))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      char v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        int v44 = (void *)(v8 + 392);
        if (*(char *)(v8 + 415) < 0) {
          int v44 = (void *)*v38;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v44;
        _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_ERROR, "Unable to find sentence style %s in sentence_prosody_bias", buf, 0xCu);
      }
      if (*(char *)(v8 + 415) < 0) {
        std::chrono::steady_clock::time_point v38 = (void *)*v38;
      }
      Diagnostics::log(3, "Unable to find sentence style %s in sentence_prosody_bias", v43, v38);
    }
    else
    {
      uint64_t v40 = *(void *)(v8 + 32);
      uint64_t v39 = *(void *)(v8 + 40);
      long long v168 = (uint8_t *)(v8 + 392);
      uint64_t v41 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v184, (const void **)(v8 + 392), (long long **)&v168);
      std::vector<std::vector<float>>::vector(buf, (v39 - v40) >> 2, (uint64_t)(v41 + 7));
      std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(v8 + 368));
      *(_OWORD *)(v8 + 368) = *(_OWORD *)buf;
      *(void *)(v8 + 384) = v172;
      uint64_t v172 = 0;
      memset(buf, 0, sizeof(buf));
      long long v168 = buf;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
    }
  }
LABEL_66:
  if (__p)
  {
    int v149 = __p;
    operator delete(__p);
  }
  if (v151)
  {
    std::vector<int> v152 = v151;
    operator delete(v151);
  }
  if (v154)
  {
    int v155 = (float *)v154;
    operator delete(v154);
  }
  if (v157)
  {
    double v158 = v157;
    operator delete(v157);
  }
  if (v159)
  {
    long long v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    long long v163 = v162;
    operator delete(v162);
  }
  if (__dst)
  {
    long long v166 = __dst;
    operator delete(__dst);
  }
  if (v139)
  {
    v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
    operator delete(v139);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v185[0]);
  if (v183 < 0) {
    operator delete(v182);
  }
  if (v181 < 0) {
    operator delete(v180);
  }
  if (v179 < 0) {
    operator delete(v178);
  }
  if (v177 < 0) {
    operator delete(v176);
  }
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  if ((v173[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v173[8]);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v45 = *(void *)(a1 + 464);
  uint64_t v46 = v147;
  long long v141 = v147;
  if (*((void *)&v147 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v147 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  ParallelNeuralAMInference::Config::Config((ParallelNeuralAMInference::Config *)v173, (const ParallelNeuralAMInference::Config *)(v45 + 8));
  __dst = 0;
  long long v166 = 0;
  uint64_t v167 = 0;
  int v47 = v186;
  if (v186 < 1
    || (uint64_t v49 = *(void *)(v46 + 32),
        uint64_t v48 = *(void *)(v46 + 40),
        v186 >= (unint64_t)((v48 - v49) >> 2)))
  {
    std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((uint64_t)&__dst, &v141);
  }
  else if (v48 != v49)
  {
    uint64_t v50 = 0;
    int v51 = 0;
    do
    {
      int v52 = (char *)operator new(0x228uLL);
      *((void *)v52 + 1) = 0;
      *((void *)v52 + 2) = 0;
      *(void *)int v52 = off_26C216280;
      *(_OWORD *)(v52 + 40) = 0u;
      *(_OWORD *)(v52 + 56) = 0u;
      *(_OWORD *)(v52 + 72) = 0u;
      *(_OWORD *)(v52 + 88) = 0u;
      *(_OWORD *)(v52 + 104) = 0u;
      *(_OWORD *)(v52 + 120) = 0u;
      *(_OWORD *)(v52 + 136) = 0u;
      *(_OWORD *)(v52 + 152) = 0u;
      *(_OWORD *)(v52 + 168) = 0u;
      *(_OWORD *)(v52 + 184) = 0u;
      *(_OWORD *)(v52 + 200) = 0u;
      *(_OWORD *)(v52 + 216) = 0u;
      *(_OWORD *)(v52 + 232) = 0u;
      *(_OWORD *)(v52 + 248) = 0u;
      *(_OWORD *)(v52 + 24) = 0u;
      *(_OWORD *)(v52 + 264) = 0u;
      *(_OWORD *)(v52 + 280) = 0u;
      *(_OWORD *)(v52 + 296) = 0u;
      *(_OWORD *)(v52 + 312) = 0u;
      *(_OWORD *)(v52 + 328) = 0u;
      *(_OWORD *)(v52 + 344) = 0u;
      *(_OWORD *)(v52 + 360) = 0u;
      *(_OWORD *)(v52 + 376) = 0u;
      *((_WORD *)v52 + 12) = 257;
      *((_OWORD *)v52 + 3) = 0u;
      *((_OWORD *)v52 + 4) = 0u;
      *((_OWORD *)v52 + 5) = 0u;
      *((_OWORD *)v52 + 6) = 0u;
      *((_OWORD *)v52 + 7) = 0u;
      *((_OWORD *)v52 + 8) = 0u;
      *((_OWORD *)v52 + 9) = 0u;
      *((_OWORD *)v52 + 10) = 0u;
      *((_OWORD *)v52 + 11) = 0u;
      *((_OWORD *)v52 + 12) = 0u;
      *((_OWORD *)v52 + 13) = 0u;
      *((_OWORD *)v52 + 14) = 0u;
      *((_OWORD *)v52 + 15) = 0u;
      *((_OWORD *)v52 + 16) = 0u;
      *((_OWORD *)v52 + 17) = 0u;
      *((_OWORD *)v52 + 18) = 0u;
      *((_OWORD *)v52 + 19) = 0u;
      *((_OWORD *)v52 + 20) = 0u;
      *((_OWORD *)v52 + 21) = 0u;
      *((_OWORD *)v52 + 22) = 0u;
      *((_OWORD *)v52 + 23) = 0u;
      *((_OWORD *)v52 + 2) = 0u;
      *(_OWORD *)(v52 + 520) = 0u;
      *(_OWORD *)(v52 + 536) = 0u;
      *(_OWORD *)(v52 + 488) = 0u;
      *(_OWORD *)(v52 + 504) = 0u;
      *(_OWORD *)(v52 + 456) = 0u;
      *(_OWORD *)(v52 + 472) = 0u;
      *(_OWORD *)(v52 + 424) = 0u;
      *(_OWORD *)(v52 + 440) = 0u;
      *(_OWORD *)(v52 + 392) = 0u;
      *(_OWORD *)(v52 + 408) = 0u;
      uint64_t v139 = v52 + 24;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      uint64_t v53 = *(void *)(v46 + 8);
      int v54 = -991146299 * ((unint64_t)(*(void *)(v46 + 16) - v53) >> 3);
      if (v47 + v51 < v54) {
        int v54 = v47 + v51;
      }
      std::vector<TacotronPhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TacotronPhoneFeature*>,std::__wrap_iter<TacotronPhoneFeature*>>((uint64_t)(v52 + 32), (std::string *)(v53 + 104 * v50), (std::string *)(v53 + 104 * v54), v54 - v50);
      uint64_t v55 = *(void *)(v46 + 32);
      unint64_t v56 = (unint64_t)(*(void *)(v46 + 40) - v55) >> 2;
      if (v186 + v51 < (int)v56) {
        LODWORD(v56) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 56, (char *)(v55 + 4 * v50), v55 + 4 * (int)v56, (int)v56 - v50);
      uint64_t v57 = *(void *)(v46 + 56);
      uint64_t v58 = *(void *)(v46 + 64);
      if (v57 != v58)
      {
        int v59 = -1431655765 * ((unint64_t)(v58 - v57) >> 3);
        if (v186 + v51 < v59) {
          int v59 = v186 + v51;
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v52 + 80), v57 + 24 * v50, v57 + 24 * v59, v59 - v50);
      }
      uint64_t v60 = *(void *)(v46 + 96);
      uint64_t v61 = *(void *)(v46 + 104);
      if (v60 != v61)
      {
        int v62 = -1431655765 * ((unint64_t)(v61 - v60) >> 3);
        if (v186 + v51 < v62) {
          int v62 = v186 + v51;
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v52 + 120), v60 + 24 * v50, v60 + 24 * v62, v62 - v50);
      }
      uint64_t v63 = *(void *)(v46 + 120);
      unint64_t v64 = (unint64_t)(*(void *)(v46 + 128) - v63) >> 2;
      if (v186 + v51 < (int)v64) {
        LODWORD(v64) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 144, (char *)(v63 + 4 * v50), v63 + 4 * (int)v64, (int)v64 - v50);
      uint64_t v65 = *(void *)(v46 + 144);
      unint64_t v66 = (unint64_t)(*(void *)(v46 + 152) - v65) >> 2;
      if (v186 + v51 < (int)v66) {
        LODWORD(v66) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 168, (char *)(v65 + 4 * v50), v65 + 4 * (int)v66, (int)v66 - v50);
      uint64_t v67 = *(void *)(v46 + 168);
      unint64_t v68 = (unint64_t)(*(void *)(v46 + 176) - v67) >> 2;
      if (v186 + v51 < (int)v68) {
        LODWORD(v68) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 192, (char *)(v67 + 4 * v50), v67 + 4 * (int)v68, (int)v68 - v50);
      uint64_t v69 = *(void *)(v46 + 192);
      unint64_t v70 = (unint64_t)(*(void *)(v46 + 200) - v69) >> 2;
      if (v186 + v51 < (int)v70) {
        LODWORD(v70) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 216, (char *)(v69 + 4 * v50), v69 + 4 * (int)v70, (int)v70 - v50);
      uint64_t v71 = *(void *)(v46 + 216);
      unint64_t v72 = (unint64_t)(*(void *)(v46 + 224) - v71) >> 2;
      if (v186 + v51 < (int)v72) {
        LODWORD(v72) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 240, (char *)(v71 + 4 * v50), v71 + 4 * (int)v72, (int)v72 - v50);
      uint64_t v73 = *(void *)(v46 + 240);
      unint64_t v74 = (unint64_t)(*(void *)(v46 + 248) - v73) >> 2;
      if (v186 + v51 < (int)v74) {
        LODWORD(v74) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 264, (char *)(v73 + 4 * v50), v73 + 4 * (int)v74, (int)v74 - v50);
      uint64_t v75 = *(void *)(v46 + 264);
      unint64_t v76 = (unint64_t)(*(void *)(v46 + 272) - v75) >> 2;
      if (v186 + v51 < (int)v76) {
        LODWORD(v76) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 288, (char *)(v75 + 4 * v50), v75 + 4 * (int)v76, (int)v76 - v50);
      uint64_t v77 = *(void *)(v46 + 288);
      unint64_t v78 = (unint64_t)(*(void *)(v46 + 296) - v77) >> 2;
      if (v186 + v51 < (int)v78) {
        LODWORD(v78) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 312, (char *)(v77 + 4 * v50), v77 + 4 * (int)v78, (int)v78 - v50);
      uint64_t v79 = *(void *)(v46 + 312);
      unint64_t v80 = (unint64_t)(*(void *)(v46 + 320) - v79) >> 2;
      if (v186 + v51 < (int)v80) {
        LODWORD(v80) = v186 + v51;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 336, (char *)(v79 + 4 * v50), v79 + 4 * (int)v80, (int)v80 - v50);
      uint64_t v81 = *(void *)(v46 + 336);
      uint64_t v82 = *(void *)(v46 + 344);
      if (v81 != v82)
      {
        unint64_t v83 = (unint64_t)(v82 - v81) >> 2;
        if (v186 + v51 < (int)v83) {
          LODWORD(v83) = v186 + v51;
        }
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v52 + 360, (char *)(v81 + 4 * v50), v81 + 4 * (int)v83, (int)v83 - v50);
      }
      *((_DWORD *)v52 + 96) = *(_DWORD *)(v46 + 360);
      uint64_t v84 = *(void *)(v46 + 368);
      uint64_t v85 = *(void *)(v46 + 376);
      if (v84 != v85)
      {
        int v86 = -1431655765 * ((unint64_t)(v85 - v84) >> 3);
        if (v186 + v51 < v86) {
          int v86 = v186 + v51;
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v52 + 392), v84 + 24 * v50, v84 + 24 * v86, v86 - v50);
      }
      std::string::operator=((std::string *)(v52 + 416), (const std::string *)(v46 + 392));
      uint64_t v46 = v141;
      uint64_t v87 = *(void *)(v141 + 440);
      uint64_t v88 = *(void *)(v141 + 448);
      if (v87 != v88)
      {
        unint64_t v89 = (unint64_t)(v88 - v87) >> 2;
        if (v186 + v51 < (int)v89) {
          LODWORD(v89) = v186 + v51;
        }
        std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)v139 + 440, (char *)(v87 + 4 * v50), v87 + 4 * (int)v89, (int)v89 - v50);
      }
      uint64_t v90 = *(void *)(v46 + 464);
      uint64_t v91 = *(void *)(v46 + 472);
      if (v90 != v91)
      {
        int v92 = -1431655765 * ((unint64_t)(v91 - v90) >> 3);
        if (v186 + v51 < v92) {
          int v92 = v186 + v51;
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)v139 + 464, v90 + 24 * v50, v90 + 24 * v92, v92 - v50);
      }
      uint64_t v93 = *(void *)(v46 + 488);
      uint64_t v94 = *(void *)(v46 + 496);
      if (v93 != v94)
      {
        int v95 = -1431655765 * ((unint64_t)(v94 - v93) >> 3);
        if (v186 + v51 < v95) {
          int v95 = v186 + v51;
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)v139 + 488, v93 + 24 * v50, v93 + 24 * v95, v95 - v50);
      }
      std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((uint64_t)&__dst, (long long *)&v139);
      if (v140.__r_.__value_.__r.__words[0]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v140.__r_.__value_.__l.__data_);
      }
      int v47 = v186;
      v51 += v186;
      uint64_t v50 = v51;
    }
    while (v51 < (unint64_t)((uint64_t)(*(void *)(v46 + 40) - *(void *)(v46 + 32)) >> 2));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v185[0]);
  if (v183 < 0) {
    operator delete(v182);
  }
  if (v181 < 0) {
    operator delete(v180);
  }
  if (v179 < 0) {
    operator delete(v178);
  }
  if (v177 < 0) {
    operator delete(v176);
  }
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  if ((v173[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v173[8]);
  }
  if (*((void *)&v141 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v141 + 1));
  }
  LODWORD(v157) = 0;
  if (v166 != __dst)
  {
    do
    {
      TacotronAlignment::alignment_reset(*(TacotronAlignment **)(a1 + 448));
      ParallelNeuralAMInference::Config::Config((ParallelNeuralAMInference::Config *)v173, (const ParallelNeuralAMInference::Config *)(*(void *)(a1 + 464) + 8));
      unint64_t v96 = v187;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v185[0]);
      if (v183 < 0) {
        operator delete(v182);
      }
      if (v181 < 0) {
        operator delete(v180);
      }
      if (v179 < 0) {
        operator delete(v178);
      }
      if (v177 < 0) {
        operator delete(v176);
      }
      if (v175 < 0) {
        operator delete(v174[0]);
      }
      if ((v173[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v173[8]);
      }
      if ((int)v96 >= 1
        && v96 < (uint64_t)(*(void *)(*((void *)__dst + 2 * (int)v157) + 40)
                         - *(void *)(*((void *)__dst + 2 * (int)v157) + 32)) >> 2)
      {
        SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v162, *(void *)(a1 + 168));
        StringFormatter::StringFormatter((StringFormatter *)v173, "Input exceeds maximum input phone length %d", v96);
        LODWORD(v159) = *(_DWORD *)&v173[16];
        *(_DWORD *)((char *)&v159 + 3) = *(_DWORD *)&v173[19];
        LODWORD(v139) = 201;
        if ((v173[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v173, *(std::string::size_type *)&v173[8]);
          int v128 = (int)v139;
        }
        else
        {
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *(_OWORD *)v173;
          LODWORD(v140.__r_.__value_.__r.__words[2]) = v159;
          *(_DWORD *)((char *)&v140.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v159 + 3);
          *((unsigned char *)&v140.__r_.__value_.__s + 23) = v173[23];
          int v128 = 201;
        }
        *(_DWORD *)uint64_t v173 = v128;
        *(std::string *)&v173[8] = v140;
        if (v162) {
          Observable::emit((uint64_t **)v162, "tts.errors", v173);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&v139, "Inputs too long! Exceeds maximum input phone length %d", v96);
        MEMORY[0x210558D40](exception, &v139);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      int v97 = *(void (****)(void, uint64_t *, void *))(a1 + 464);
      uint64_t v137 = *((void *)__dst + 2 * (int)v157);
      std::chrono::steady_clock::time_point v98 = (std::__shared_weak_count *)*((void *)__dst + 2 * (int)v157 + 1);
      uint64_t v138 = v98;
      if (v98) {
        atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v170 = 0;
      int v99 = operator new(0x48uLL);
      *int v99 = &off_26C214CD0;
      v99[1] = a1;
      v99[2] = &v147;
      v99[3] = &rep;
      v99[4] = &v142;
      v99[5] = &v143;
      v99[6] = &v157;
      v99[7] = &__dst;
      v99[8] = &v145;
      uint64_t v170 = v99;
      (**v97)(v97, &v137, v169);
      std::__function::__value_func<int ()(std::shared_ptr<WaveNetFeature>)>::~__value_func[abi:ne180100](v169);
      if (v138) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v138);
      }
      unint64_t v100 = (int)v157 + 1;
      LODWORD(v157) = v157 + 1;
    }
    while (v100 < (v166 - (unsigned char *)__dst) >> 4);
  }
  uint64_t v101 = (unsigned __int128)((std::chrono::steady_clock::now().__d_.__rep_ - v130) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v102 = Diagnostics_GetLogObject(void)::__profile_log_default;
  double v104 = (double)(uint64_t)((v101 >> 18) + ((unint64_t)v101 >> 63)) / 1000.0;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v173 = 134218496;
    *(void *)&_OWORD v173[4] = v142 + v143;
    *(_WORD *)&v173[12] = 2048;
    *(double *)&v173[14] = (double)(uint64_t)((v101 >> 18) + ((unint64_t)v101 >> 63)) / 1000.0;
    *(_WORD *)&v173[22] = 2048;
    *(double *)&v173[24] = (double)(unint64_t)(v142 + v143) / v104;
    _os_log_impl(&dword_20CD80000, v102, OS_LOG_TYPE_DEFAULT, "Parallel AM inference end, total frames = %lu, Run Time : %.3f s, %.3f frames/s", v173, 0x20u);
  }
  Diagnostics::log(5, "Parallel AM inference end, total frames = %lu, Run Time : %.3f s, %.3f frames/s", v103, v142 + v143, *(void *)&v104, (double)(unint64_t)(v142 + v143) / v104);
  kdebug_trace();
  if (!*(unsigned char *)(a1 + 160))
  {
    int v105 = *(_DWORD *)(a1 + 348);
    int v106 = *(_DWORD *)(a1 + 344);
    uint64_t v107 = *(void *)(a1 + 480);
    uint64_t v108 = *(void *)(a1 + 448);
    int v109 = (std::__shared_weak_count *)*((void *)&v147 + 1);
    long long v136 = v147;
    if (*((void *)&v147 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v147 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    SharedObjectPool::get_if<TrackSubstitutions>(&v134, *(void *)(a1 + 168));
    float v110 = (float)v105 / (float)v106;
    TacotronAlignment::accumulate_word_markers((uint64_t **)&v139, v108, (uint64_t)&v136, v107, &v134, v110);
    if (v135) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v135);
    }
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
    uint64_t v111 = *(void *)(v147 + 8);
    uint64_t v112 = *(void *)(v147 + 16);
    if (v111 == v112)
    {
      int v113 = 0;
      float v114 = 0.0;
    }
    else
    {
      int v113 = 0;
      float v114 = 0.0;
      uint64_t v115 = *(void *)(v147 + 8);
      do
      {
        v113 += *(_DWORD *)(v115 + 56);
        float v114 = v114 + *(float *)(v115 + 64);
        v115 += 104;
      }
      while (v115 != v112);
    }
    float v116 = v114 / (float)(unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v112 - v111) >> 3));
    int v117 = v143;
    *(void *)(a1 + 480) = (unint64_t)(float)((float)((float)(unint64_t)(v143 * *(int *)(a1 + 348)) / v116)
                                                    + (float)*(unint64_t *)(a1 + 480));
    std::chrono::steady_clock::time_point v118 = v139;
    int v119 = *(void **)v139;
    int v120 = (void *)*((void *)v139 + 1);
    if (*(void **)v139 != v120)
    {
      uint64_t v121 = v119[3];
      float v122 = (float)(*(_DWORD *)(a1 + 344) * v117) / (float)v113;
      do
      {
        v119[3] = (unint64_t)(float)((float)(unint64_t)v107
                                          + (float)((float)(unint64_t)(v119[3] - v121) * v122));
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v123 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          uint64_t v125 = v119[1];
          uint64_t v126 = v119[2] + v125;
          unint64_t v127 = (void *)v119[3];
          *(_DWORD *)uint64_t v173 = 134218752;
          *(void *)&_OWORD v173[4] = v125;
          *(_WORD *)&v173[12] = 2048;
          *(void *)&v173[14] = v126;
          *(_WORD *)&v173[22] = 2048;
          *(double *)&v173[24] = (float)((float)(unint64_t)v127 / v110);
          LOWORD(v174[0]) = 2048;
          *(void **)((char *)v174 + 2) = v127;
          _os_log_impl(&dword_20CD80000, v123, OS_LOG_TYPE_INFO, "Parallel Neural Acoustic Module word marker [%zu, %zu], time: %.0f, sample_idx: %ld", v173, 0x2Au);
        }
        Diagnostics::log(6, "Parallel Neural Acoustic Module word marker [%zu, %zu], time: %.0f, sample_idx: %ld", v124, v119[1], v119[2] + v119[1], (float)((float)(unint64_t)v119[3] / v110), v119[3]);
        v119 += 7;
      }
      while (v119 != v120);
      if (*v118 != v118[1])
      {
        int v131 = 5;
        uint64_t v132 = 0;
        int v133 = v118;
        (*(void (**)(uint64_t, int *))(*(void *)a1 + 88))(a1, &v131);
        SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(v173, *(void *)(a1 + 168));
        if (*(void *)v173) {
          Observable::emit(*(uint64_t ***)v173, (char *)TTSSynthesizerEvent::MarkersGenerated, v118);
        }
        if (*(void *)&v173[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v173[8]);
        }
      }
    }
    if (v140.__r_.__value_.__r.__words[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v140.__r_.__value_.__l.__data_);
    }
  }
  *(void *)uint64_t v173 = &__dst;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
  if (v146) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v146);
  }
  if (*((void *)&v147 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v147 + 1));
  }
  std::mutex::unlock((std::mutex *)(a1 + 384));
}

void sub_20D2C4088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a70);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  a69 = (uint64_t)&a57;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

ParallelNeuralAMInference::Config *ParallelNeuralAMInference::Config::Config(ParallelNeuralAMInference::Config *this, const ParallelNeuralAMInference::Config *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 5);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((_OWORD *)this + 5) = v7;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 15) = *((void *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v8;
  }
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 19) = *((void *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v9;
  }
  std::map<std::string,std::vector<float>>::map[abi:ne180100]((void *)this + 20, (const void ***)a2 + 20);
  *((void *)this + 23) = *((void *)a2 + 23);
  return this;
}

void sub_20D2C44C4(_Unwind_Exception *exception_object)
{
  if (v1[127] < 0) {
    operator delete(*v6);
  }
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ParallelNeuralAMInference::Config::~Config(ParallelNeuralAMInference::Config *this)
{
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(void *a1, uint64_t a2)
{
  long long v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D2C4678(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<int ()(std::shared_ptr<WaveNetFeature>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void SharedObjectPool::get_if<TrackSubstitutions>(void *a1, uint64_t a2)
{
  long long v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D2C47A4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target_type()
{
}

uint64_t std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)*a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v4 + 160))
  {
    if (*(unsigned char *)(**(void **)(a1 + 16) + 2)) {
      goto LABEL_8;
    }
    v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v58 = a1;
    uint64_t v11 = **(void **)(a1 + 24);
    int v54 = (unsigned char *)v4;
    uint64_t v53 = v2;
    if (*(unsigned char *)(v4 + 289))
    {
      uint64_t v12 = *(void *)(v4 + 448);
      v64[0] = (uint64_t)v3;
      v64[1] = (uint64_t)v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v13 = *(void **)(v58 + 16);
      unint64_t v14 = (std::__shared_weak_count *)v13[1];
      v63[0] = *v13;
      v63[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      **(void **)(v58 + 32) = TacotronAlignment::trim_silences(v12, v64, (uint64_t)v63, *(void *)(v4 + 480));
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v2) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
    }
    double v15 = (double)((v10.__d_.__rep_ - v11) / 1000000) / 1000.0;
    double v16 = (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3)) / v15 / (1000.0 / (double)*(int *)(v4 + 344));
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    float v17 = v16;
    uint64_t v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v20 = **(void **)(v58 + 40) == 0;
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3);
      int v22 = **(_DWORD **)(v58 + 48);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v21;
      __int16 v66 = 2048;
      double v67 = (double)((v10.__d_.__rep_ - v11) / 1000000) / 1000.0;
      __int16 v68 = 2048;
      double v69 = (double)v21 / v15;
      double v23 = v17;
      __int16 v70 = 2048;
      double v71 = v17;
      __int16 v72 = 1024;
      int v73 = v22;
      _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_DEFAULT, "Parallel AM inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f, inference_idx = %d", buf, 0x36u);
    }
    else
    {
      double v23 = v17;
    }
    Diagnostics::log(5, "Parallel AM inference first = %d, total frames = %lu, Run Time : %.3f s, %.3f frames/s, rtf: %.3f, inference_idx = %d", v19, **(void **)(v58 + 40) == 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3), *(void *)&v15, (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3)) / v15, *(void *)&v23, **(unsigned int **)(v58 + 48));
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[5] - v3[4]) >> 3);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl(&dword_20CD80000, v24, OS_LOG_TYPE_DEFAULT, "Parallel AM inference generates %lu number of mel", buf, 0xCu);
    }
    Diagnostics::log(5, "Parallel AM inference generates %lu number of mel", v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[5] - v3[4]) >> 3));
    int v27 = *(_DWORD *)(v4 + 364);
    uint64_t v28 = *(NeuralThermalFallbackConnection **)(v4 + 272);
    if (v28)
    {
      if ((NeuralThermalFallbackConnection::should_fallback(v28) & 1) == 0) {
        goto LABEL_36;
      }
    }
    else if (!NeuralTTSUtils::check_thermal_limit((NeuralTTSUtils *)2))
    {
      goto LABEL_36;
    }
    if (*(float *)(v4 + 372) >= v17) {
      int v27 = -1431655765 * ((v3[2] - v3[1]) >> 3);
    }
    else {
      int v27 = *(_DWORD *)(v4 + 368);
    }
LABEL_36:
    if (MGGetSInt32Answer() == 6 && *(unsigned char *)(v4 + 376)) {
      int v27 = -1431655765 * ((v3[2] - v3[1]) >> 3);
    }
    if (v3[7] != v3[8])
    {
      TacotronAlignment::append_alignments(*(void *)(v4 + 448), v3 + 7);
      uint64_t v29 = *(void *)(v4 + 448);
      uint64_t v30 = *(void *)(**(void **)(v58 + 56) + 16 * **(int **)(v58 + 48));
      memset(v62, 0, sizeof(v62));
      std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(v62, *(void *)(v30 + 8), *(void *)(v30 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 3));
      TacotronAlignment::generate_speech_rate(buf, v29, v62, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[2] - v3[1]) >> 3), -1431655765 * ((uint64_t)(v3[2] - v3[1]) >> 3), (uint64_t)(*(void *)(*(void *)(**(void **)(v58 + 56) + 16 * **(int **)(v58 + 48)) + 40)- *(void *)(*(void *)(**(void **)(v58 + 56) + 16 * **(int **)(v58 + 48)) + 32)) >> 2);
      v61[0] = (void **)v62;
      std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](v61);
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v3 + 10), v3[11], *(char **)buf, *(char **)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(void *)(v4 + 168));
    unint64_t v31 = *(uint64_t ***)buf;
    if (*(void *)buf)
    {
      Observable::emit(*(uint64_t ***)buf, "tts.feature.neural.mel", v3 + 1);
      Observable::emit(v31, "tts.feature.neural.alignment", v3 + 7);
    }
    uint64_t v32 = v3[1];
    uint64_t v33 = v3[2];
    if (v33 == v32)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 3);
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v55 = 4 * v27;
      uint64_t v56 = 24 * v27;
      do
      {
        uint64_t v39 = (char *)operator new(0x88uLL);
        *((void *)v39 + 1) = 0;
        *((void *)v39 + 2) = 0;
        *(void *)uint64_t v39 = off_26C215E20;
        *(_OWORD *)(v39 + 40) = 0u;
        *(_OWORD *)(v39 + 56) = 0u;
        *(_OWORD *)(v39 + 72) = 0u;
        *(_OWORD *)(v39 + 88) = 0u;
        *(_OWORD *)(v39 + 104) = 0u;
        *(_OWORD *)(v39 + 120) = 0u;
        *(_OWORD *)(v39 + 24) = 0u;
        *((_WORD *)v39 + 12) = 257;
        *((_OWORD *)v39 + 2) = 0u;
        uint64_t v40 = (uint64_t)(v39 + 32);
        *((_OWORD *)v39 + 3) = 0u;
        *((_OWORD *)v39 + 4) = 0u;
        *((_OWORD *)v39 + 5) = 0u;
        *((_OWORD *)v39 + 6) = 0u;
        *((_OWORD *)v39 + 7) = 0u;
        *(void *)(v39 + 126) = 0;
        v39[132] = *((unsigned char *)v3 + 108);
        uint64_t v41 = v37 + v32;
        v61[0] = (void **)(v39 + 24);
        v61[1] = (void **)v39;
        unint64_t v57 = v38 + v27;
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 3) <= v57)
        {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v40, v41, v33, 0xAAAAAAAAAAAAAAABLL * ((v35 + v33 - v32) >> 3));
          char v42 = v3;
          uint64_t v47 = v3[10];
          uint64_t v46 = v3[11];
          if (v47 != v46) {
            std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v39 + 104, (char *)(v36 + v47), v46, (v34 + v46 - v47) >> 2);
          }
          uint64_t v49 = v3[4];
          uint64_t v48 = v3[5];
          if (v49 != v48) {
            std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v39 + 56), v37 + v49, v48, 0xAAAAAAAAAAAAAAABLL * ((v35 + v48 - v49) >> 3));
          }
          char v45 = *((unsigned char *)v3 + 1);
        }
        else
        {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v40, v41, v56 + v37 + v32, v27);
          char v42 = v3;
          uint64_t v43 = v3[10];
          if (v43 != v3[11]) {
            std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v39 + 104, (char *)(v36 + v43), v36 + v43 + v55, v27);
          }
          uint64_t v44 = v3[4];
          if (v44 != v3[5]) {
            std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t)(v39 + 56), v37 + v44, v37 + v44 + v56, v27);
          }
          char v45 = 0;
        }
        v39[25] = v45;
        *((_DWORD *)v39 + 32) = v38 + **(_DWORD **)(v58 + 40);
        if (v38) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = *v42 != 0;
        }
        v39[24] = v50;
        v39[133] = v54[289];
        int v51 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v51 + 8) = 0u;
        *(void *)int v51 = off_26C215330;
        *((_OWORD *)v51 + 2) = 0u;
        *((void *)v51 + 3) = v51 + 32;
        Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)(v51 + 24), (unint64_t *)v61);
        Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v51 + 24), *(unint64_t **)(v58 + 64));
        int v59 = v51 + 24;
        uint64_t v60 = (std::__shared_weak_count *)v51;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v51 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(unsigned char *, char **))(*(void *)v54 + 72))(v54, &v59);
        if (v60) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39);
        uint64_t v32 = v3[1];
        uint64_t v33 = v3[2];
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 3);
        v37 += v56;
        v36 += v55;
        v35 -= v56;
        v34 -= v55;
        v38 += v27;
      }
      while (v52 > v57);
    }
    uint64_t v2 = v53;
    **(void **)(v58 + 40) += v52;
    (*(std::chrono::steady_clock::time_point **)(v58 + 24))->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v8 = 0;
    if (v53) {
      goto LABEL_9;
    }
    return v8;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "Parallel AM inference cancelled.", buf, 2u);
  }
  Diagnostics::log(5, "Parallel AM inference cancelled.", v6);
LABEL_8:
  uint64_t v8 = 1;
  if (v2) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v8;
}

void sub_20D2C51D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28 = *(void **)(v26 - 192);
  if (v28)
  {
    *(void *)(v26 - 184) = v28;
    operator delete(v28);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D2C5308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Agglomerate::set<std::shared_ptr<WaveNetFeature>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C206438;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  long long v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C206438;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<WaveNetFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206438;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<WaveNetFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206438;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

char *std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      long long v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      uint64_t v11 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 24), *v11, *(void *)(a2 + v7 + 32));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        *(void *)(a4 + v7 + 40) = *(void *)(a2 + v7 + 40);
        *(_OWORD *)(a4 + v7 + 24) = v12;
      }
      long long v13 = *(_OWORD *)(a2 + v7 + 48);
      long long v14 = *(_OWORD *)(a2 + v7 + 64);
      *(void *)(a4 + v7 + 80) = 0;
      double v15 = (void *)(a4 + v7 + 80);
      *((_OWORD *)v15 - 2) = v13;
      *((_OWORD *)v15 - 1) = v14;
      v15[1] = 0;
      void v15[2] = 0;
      std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v15, *(void *)(a2 + v7 + 80), *(void *)(a2 + v7 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + v7 + 88) - *(void *)(a2 + v7 + 80)) >> 3));
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20D2C5788(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  while (v2 != v1)
  {
    v2 -= 104;
    std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MarkerRecord>::__init_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<MarkerRecord>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20D2C5844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<MarkerRecord>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  unint64_t v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    long long v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(void *)uint64_t v4 = *((void *)v6 - 1);
      uint64_t v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v10 = v16;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        uint64_t v10 = v4;
      }
      long long v11 = *(long long *)((char *)v6 + 24);
      *(_WORD *)(v4 + 48) = *((_WORD *)v6 + 20);
      *(_OWORD *)(v4 + 32) = v11;
      uint64_t v4 = v10 + 56;
      uint64_t v16 = v10 + 56;
      long long v6 = (long long *)((char *)v6 + 56);
    }
    while (v7 + 56 != a3);
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v4;
}

void sub_20D2C5988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 25) < 0) {
        operator delete(*(void **)(v3 - 48));
      }
      v3 -= 56;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

__n128 std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C214CD0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &off_26C214CD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

void std::__function::__func<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<ParallelNeuralAcousticModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<WaveNetFeature>)>::~__func()
{
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::map<std::string,std::vector<float>>::map[abi:ne180100](void *a1, const void ***a2)
{
  a1[1] = 0;
  long long v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  long long v4 = a2 + 1;
  unint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, v3, &v18, &v17, v5 + 4);
      if (!*v6)
      {
        uint64_t v7 = (uint64_t **)v6;
        uint64_t v8 = (char *)operator new(0x50uLL);
        long long v9 = (uint64_t *)v8;
        v15[0] = v8;
        v15[1] = v3;
        char v16 = 0;
        if (*((char *)v5 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v8 + 32), (const std::string::value_type *)v5[4], (std::string::size_type)v5[5]);
        }
        else
        {
          long long v10 = *((_OWORD *)v5 + 2);
          *((void *)v8 + 6) = v5[6];
          *((_OWORD *)v8 + 2) = v10;
        }
        v9[7] = 0;
        v9[8] = 0;
        v9[9] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9 + 7, v5[7], (uint64_t)v5[8], ((unsigned char *)v5[8] - (unsigned char *)v5[7]) >> 2);
        char v16 = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v18, v7, v9);
        v15[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
      }
      long long v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          long long v12 = (const void ***)v11;
          long long v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (const void ***)v5[2];
          BOOL v13 = *v12 == v5;
          unint64_t v5 = (const void **)v12;
        }
        while (!v13);
      }
      unint64_t v5 = (const void **)v12;
    }
    while (v12 != v4);
  }
  return a1;
}

void sub_20D2C5D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::vector<TacotronPhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TacotronPhoneFeature*>,std::__wrap_iter<TacotronPhoneFeature*>>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(std::string **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<TacotronPhoneFeature>::__vdeallocate((void **)a1);
    if (a4 > 0x276276276276276) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    BOOL v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(__str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  char v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(__str, a3, v9);
  for (uint64_t i = *(void *)(a1 + 8); (std::string *)i != v14; std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](i))
    i -= 104;
  *(void *)(a1 + 8) = v14;
}

void sub_20D2C5F64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20D2C5F6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v13 = (char *)operator new(16 * v12);
    char v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)char v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v8 = *(void **)a1;
      unint64_t v5 = *(void **)(a1 + 8);
    }
    char v16 = &v13[16 * v12];
    uint64_t v7 = v14 + 16;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v17;
        v14 -= 16;
        *unint64_t v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      uint64_t v8 = *(void **)a1;
      uint64_t v18 = *(void **)(a1 + 8);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
      while (v18 != v8)
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        v18 -= 2;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *unint64_t v5 = *(void *)a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    unint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      long long v6 = *(_OWORD *)&v5[2].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[2].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v6;
      if (this != v5) {
        std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)&this[3].__r_.__value_.__l.__size_, v5[3].__r_.__value_.__l.__size_, v5[3].__r_.__value_.__r.__words[2], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[3].__r_.__value_.__r.__words[2] - v5[3].__r_.__value_.__l.__size_) >> 3));
      }
      this = (std::string *)((char *)this + 104);
      unint64_t v5 = (std::string *)((char *)v5 + 104);
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<TacotronPhoneFeature>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 104;
        std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<MarkerRecord>::__vdeallocate(a1);
    if (a4 > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<MarkerRecord>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(v8, v6, a3, a1[1]);
LABEL_14:
    a1[1] = v12;
    return;
  }
  uint64_t v13 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v13 - v9) >> 3) < a4)
  {
    uint64_t v14 = a2 + 8 * ((v13 - v9) >> 3);
    if (v13 != v9)
    {
      do
      {
        *(void *)uint64_t v9 = *(void *)v6;
        std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
        __int16 v15 = *(_WORD *)(v6 + 48);
        *(_OWORD *)(v9 + 32) = *(_OWORD *)(v6 + 32);
        *(_WORD *)(v9 + 48) = v15;
        v6 += 56;
        v9 += 56;
      }
      while (v6 != v14);
      uint64_t v9 = a1[1];
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(v8, v14, a3, v9);
    goto LABEL_14;
  }
  if (a2 != a3)
  {
    do
    {
      *(void *)uint64_t v9 = *(void *)v6;
      std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
      __int16 v16 = *(_WORD *)(v6 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v6 + 32);
      *(_WORD *)(v9 + 48) = v16;
      v9 += 56;
      v6 += 56;
    }
    while (v6 != a3);
    uint64_t v13 = a1[1];
  }
  while (v13 != v9)
  {
    if (*(char *)(v13 - 25) < 0) {
      operator delete(*(void **)(v13 - 48));
    }
    v13 -= 56;
  }
  a1[1] = v9;
}

void sub_20D2C6394(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<MarkerRecord>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<MarkerRecord>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__shared_ptr_emplace<TacotronFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 544);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v17 = (void **)(a1 + 512);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  long long v17 = (void **)(a1 + 488);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v3 = *(void **)(a1 + 464);
  if (v3)
  {
    *(void *)(a1 + 472) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 440);
  if (v4)
  {
    *(void *)(a1 + 448) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  long long v17 = (void **)(a1 + 392);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  unint64_t v5 = *(void **)(a1 + 360);
  if (v5)
  {
    *(void *)(a1 + 368) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 336);
  if (v6)
  {
    *(void *)(a1 + 344) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 312);
  if (v7)
  {
    *(void *)(a1 + 320) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 288);
  if (v8)
  {
    *(void *)(a1 + 296) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 264);
  if (v9)
  {
    *(void *)(a1 + 272) = v9;
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(a1 + 240);
  if (v10)
  {
    *(void *)(a1 + 248) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 216);
  if (v11)
  {
    *(void *)(a1 + 224) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 192);
  if (v12)
  {
    *(void *)(a1 + 200) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 168);
  if (v13)
  {
    *(void *)(a1 + 176) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 144);
  if (v14)
  {
    *(void *)(a1 + 152) = v14;
    operator delete(v14);
  }
  long long v17 = (void **)(a1 + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  __int16 v15 = *(std::__shared_weak_count **)(a1 + 112);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  long long v17 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  __int16 v16 = *(void **)(a1 + 56);
  if (v16)
  {
    *(void *)(a1 + 64) = v16;
    operator delete(v16);
  }
  long long v17 = (void **)(a1 + 32);
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void std::__shared_ptr_emplace<TacotronFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TacotronFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_20D2C66A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ParallelNeuralAcousticModule::prepare(ParallelNeuralAcousticModule *this)
{
  if (!*((unsigned char *)this + 288))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    unint64_t v4 = (char *)operator new(0x228uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = off_26C216280;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 264) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 344) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *((_WORD *)v4 + 12) = 257;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 14) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 20) = 0u;
    *((_OWORD *)v4 + 21) = 0u;
    *((_OWORD *)v4 + 22) = 0u;
    *((_OWORD *)v4 + 23) = 0u;
    *(_OWORD *)(v4 + 520) = 0u;
    *(_OWORD *)(v4 + 536) = 0u;
    *(_OWORD *)(v4 + 488) = 0u;
    *(_OWORD *)(v4 + 504) = 0u;
    *(_OWORD *)(v4 + 456) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    *(_OWORD *)(v4 + 424) = 0u;
    *(_OWORD *)(v4 + 440) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    v13[0] = (unint64_t)(v4 + 24);
    v13[1] = (unint64_t)v4;
    std::vector<int>::resize((std::vector<int> *)(v4 + 56), 0xC8uLL);
    int v9 = 0;
    std::vector<float>::vector(__p, 5uLL, &v9);
    std::vector<std::vector<float>>::vector(buf, 0xC8uLL, (uint64_t)__p);
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v4 + 49);
    *(_OWORD *)(v4 + 392) = *(_OWORD *)buf;
    *((void *)v4 + 51) = v12;
    uint64_t v12 = 0;
    memset(buf, 0, sizeof(buf));
    uint64_t v14 = buf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v4[26] = 1;
    unint64_t v5 = (char *)operator new(0xB0uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)unint64_t v5 = off_26C215FA8;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *((void *)v5 + 21) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(void *)buf = v5 + 24;
    *(void *)&uint8_t buf[8] = v5;
    uint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 8) = 0u;
    *(void *)uint64_t v6 = off_26C215330;
    *((_OWORD *)v6 + 2) = 0u;
    *((void *)v6 + 3) = v6 + 32;
    Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v6 + 24), v13);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v6 + 24), (unint64_t *)buf);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
    uint64_t v7 = v6 + 24;
    uint64_t v8 = (std::__shared_weak_count *)v6;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(ParallelNeuralAcousticModule *, char **))(*(void *)this + 80))(this, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
}

void sub_20D2C69C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<TacotronFeature>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = &v10;
  if (!v3) {
    operator new();
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = (char ***)off_26C2064B8;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v6 = v9;
  }
  else
  {
    long long v6 = v4;
  }
  long long v9 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v3 + 16);
  *(_OWORD *)(v3 + 8) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v8 = (char ***)off_26C2064B8;
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void Agglomerate::ItemHolder<std::shared_ptr<TacotronFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2064B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<TacotronFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2064B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void ParallelNeuralAcousticModule::~ParallelNeuralAcousticModule(ParallelNeuralAcousticModule *this)
{
  ParallelNeuralAcousticModule::~ParallelNeuralAcousticModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = off_26C2049D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 62);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::mutex::~mutex((std::mutex *)this + 6);
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Module::~Module(this);
}

void *PersistentModule::PersistentModule(void *a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v7[0] = a3;
  v7[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module((uint64_t)a1, a2, v7);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = off_26C201B20;
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = 0;
  MEMORY[0x210558E70](a1 + 34, &byte_20D5A22AE);
  return a1;
}

void sub_20D2C6DBC(_Unwind_Exception *a1)
{
  if (v1[295] < 0) {
    operator delete(*v2);
  }
  Module::~Module((Module *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInferenceModel>::__on_zero_shared()
{
  int v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy encoder plan");
  if (v0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v4 = v0;
    unint64_t v5 = exception;
    int v6 = v29;
    uint64_t v7 = (void **)__p[0];
    int v8 = v4;
    status_string = (const char *)espresso_get_status_string();
    long long v10 = __p;
    if (v6 < 0) {
      long long v10 = v7;
    }
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v10, v8, status_string);
    MEMORY[0x210558D40](v5, v30);
    __cxa_throw(v5, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  int v1 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(v26, "Unable to destroy decoder plan");
  if (v1)
  {
    unint64_t v11 = __cxa_allocate_exception(0x10uLL);
    int v12 = v1;
    char v13 = v11;
    int v14 = v27;
    __int16 v15 = (void **)v26[0];
    int v16 = v12;
    long long v17 = (const char *)espresso_get_status_string();
    uint64_t v18 = v26;
    if (v14 < 0) {
      uint64_t v18 = v15;
    }
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v18, v16, v17);
    MEMORY[0x210558D40](v13, v30);
    __cxa_throw(v13, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  int v2 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v24, "Unable to destroy context");
  if (v2)
  {
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    int v20 = v25;
    unint64_t v21 = (void **)v24[0];
    int v22 = (const char *)espresso_get_status_string();
    double v23 = v24;
    if (v20 < 0) {
      double v23 = v21;
    }
    StringFormatter::StringFormatter((StringFormatter *)v30, "%s Error: %d, %s", (const char *)v23, v2, v22);
    MEMORY[0x210558D40](v19, v30);
    __cxa_throw(v19, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_20D2C7030(void *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInferenceModel>::__on_zero_shared()
{
  int v0 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy plan");
  if (v0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v3 = v15;
    int v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v6 = __p;
    if (v3 < 0) {
      int v6 = v4;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v6, v0, status_string);
    MEMORY[0x210558D40](exception, v16);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  int v1 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v12, "Unable to destroy context");
  if (v1)
  {
    uint64_t v7 = __cxa_allocate_exception(0x10uLL);
    int v8 = v13;
    long long v9 = (void **)v12[0];
    long long v10 = (const char *)espresso_get_status_string();
    unint64_t v11 = v12;
    if (v8 < 0) {
      unint64_t v11 = v9;
    }
    StringFormatter::StringFormatter((StringFormatter *)v16, "%s Error: %d, %s", (const char *)v11, v1, v10);
    MEMORY[0x210558D40](v7, v16);
    __cxa_throw(v7, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_20D2C7278(void *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2189A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2189A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ParallelNeuralAMPersistentModule::~ParallelNeuralAMPersistentModule(ParallelNeuralAMPersistentModule *this)
{
  *(void *)this = off_26C2051F0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C2051F0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

uint64_t ParallelNeuralAMInference::Config::Config(uint64_t a1, uint64_t a2)
{
  int v4 = (void **)(a1 + 8);
  *(_DWORD *)a1 = 0;
  unint64_t v5 = (void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "input_feature_scale");
  std::string::basic_string[abi:ne180100]<0>(v5, "input_feature_bias");
  int v6 = (void **)(a1 + 56);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), "input_feature_variance_scale_switch");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 104), &byte_20D5A22AE);
  *(unsigned char *)(a1 + 128) = 0;
  uint64_t v7 = (void **)(a1 + 136);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "input_sentence_prosody");
  *(void *)(a1 + 184) = -4294967056;
  *(void *)(a1 + 168) = 0;
  uint64_t v8 = a1 + 168;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_inference_feature_scale");
  *(unsigned char *)a1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "use_input_duration_variance_scale");
  *(unsigned char *)(a1 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)(a1 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "use_input_pitch_variance_scale");
  *(unsigned char *)(a1 + 2) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)(a1 + 2));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "use_input_energy_variance_scale");
  *(unsigned char *)(a1 + 3) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)(a1 + 3));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_encoder_input_feature_scale_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &__p);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v4);
    }
    *(std::string *)int v4 = __p;
    uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_encoder_input_feature_bias_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v10, &__p);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v5);
    }
    *(std::string *)unint64_t v5 = __p;
    uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_encoder_input_feature_variance_scale_switch_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, &__p);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)int v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 72) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "graph_encoder_input_sentence_prosody_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)v24, &__p);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(a1 + 152) = *((void *)&__p.__r_.__value_.__l + 2);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (*(char *)(a1 + 159) < 0) {
    uint64_t v12 = *(void *)(a1 + 144);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 159);
  }
  *(unsigned char *)(a1 + 128) = v12 != 0;
  if (v12 && *(unsigned char *)a2 == 1)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v16 = *(void *)(v13 + 8);
    uint64_t v14 = v13 + 8;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_33;
    }
    uint64_t v17 = v14;
    do
    {
      int v18 = std::string::compare((const std::string *)(v15 + 32), "sentence_prosody_bias");
      uint64_t v19 = (uint64_t *)(v15 + 8);
      if (v18 >= 0)
      {
        uint64_t v19 = (uint64_t *)v15;
        uint64_t v17 = v15;
      }
      uint64_t v15 = *v19;
    }
    while (*v19);
    if (v17 == v14 || std::string::compare((const std::string *)(v17 + 32), "sentence_prosody_bias") >= 1) {
LABEL_33:
    }
      uint64_t v17 = v14;
    if (*(void *)(a2 + 8) + 8 != v17)
    {
      int v20 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "sentence_prosody_bias");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::vector<float>>,std::map<std::string,std::vector<float>>,0>(&__p, v20);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 168));
      std::string::size_type size = (void *)__p.__r_.__value_.__l.__size_;
      *(void *)(a1 + 160) = __p.__r_.__value_.__r.__words[0];
      *(void *)(a1 + 168) = size;
      std::string::size_type v22 = __p.__r_.__value_.__r.__words[2];
      *(void *)(a1 + 176) = *((void *)&__p.__r_.__value_.__l + 2);
      if (v22)
      {
        size[2] = v8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        std::string::size_type size = 0;
      }
      else
      {
        *(void *)(a1 + 160) = v8;
      }
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(size);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_input_length");
  *(_DWORD *)(a1 + 184) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)(a1 + 184));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_maximum_position_encoding");
  *(_DWORD *)(a1 + 188) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)(a1 + 188));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20D2C7850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v24 + 168));
  if (*(char *)(v24 + 159) < 0) {
    operator delete(*v26);
  }
  if (*(char *)(v24 + 127) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v24 + 103) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v24 + 79) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v24 + 55) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v24 + 31) < 0) {
    operator delete(*a12);
  }
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::vector<float>>,std::map<std::string,std::vector<float>>,0>(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  uint64_t v3 = (void **)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (*a2 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v22 = *a2;
    if (v22 > 9) {
      double v23 = "number";
    }
    else {
      double v23 = off_2641152A0[v22];
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, v23);
    uint64_t v24 = std::string::insert(&v31, 0, "type must be object, but is ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v29, exception);
  }
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = (uint64_t *)&v27;
  unint64_t v5 = (void *)*((void *)a2 + 1);
  uint64_t v8 = (void *)*v5;
  int v6 = v5 + 1;
  uint64_t v7 = v8;
  if (v8 == v6)
  {
    int v18 = 0;
  }
  else
  {
    uint64_t v9 = (uint64_t *)&v27;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v31, (unsigned __int8 *)v7 + 56);
      if (*((char *)v7 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v7[4], v7[5]);
      }
      else {
        std::string v29 = *(std::string *)(v7 + 4);
      }
      std::string __p = v31;
      uint64_t v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v26, v9, &v33, &v32, (const void **)&v29.__r_.__value_.__l.__data_);
      uint64_t v11 = (char *)*v10;
      if (!*v10)
      {
        uint64_t v12 = (uint64_t **)v10;
        uint64_t v11 = (char *)operator new(0x50uLL);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
        v31.__r_.__value_.__s.__data_[16] = 0;
        uint64_t v13 = (std::string *)(v11 + 32);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          *((void *)v11 + 6) = *((void *)&v29.__r_.__value_.__l + 2);
        }
        *(std::string *)(v11 + 56) = __p;
        memset(&__p, 0, sizeof(__p));
        v31.__r_.__value_.__s.__data_[16] = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v26, (uint64_t)v33, v12, (uint64_t *)v11);
        v31.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v31);
      }
      uint64_t v14 = (uint64_t *)*((void *)v11 + 1);
      if (v14)
      {
        do
        {
          uint64_t v9 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)*((void *)v11 + 2);
          BOOL v15 = *v9 == (void)v11;
          uint64_t v11 = (char *)v9;
        }
        while (!v15);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = (void *)v7[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v7[2];
          BOOL v15 = *v17 == (void)v7;
          uint64_t v7 = v17;
        }
        while (!v15);
      }
      uint64_t v7 = v17;
    }
    while (v17 != v6);
    int v18 = *v3;
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v18);
  uint64_t v19 = v27;
  *a1 = v26;
  a1[1] = v19;
  uint64_t v20 = v28;
  a1[2] = v28;
  if (v20)
  {
    v19[2] = v3;
    uint64_t v26 = (uint64_t *)&v27;
    char v27 = 0;
    uint64_t v28 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *a1 = v3;
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v19);
}

void sub_20D2C7C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::pair<std::string const,std::vector<float>>::~pair((uint64_t)&a13);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a11);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v27);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(void *a1, unsigned __int8 *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*a2 != 2)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v12 = *a2;
    if (v12 > 9) {
      uint64_t v13 = "number";
    }
    else {
      uint64_t v13 = off_2641152A0[v12];
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, v13);
    uint64_t v14 = std::string::insert(&v16, 0, "type must be array, but is ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v14->__r_.__value_.__r.__words[2];
    long long v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v19, exception);
  }
  uint64_t v24 = 0;
  long long v23 = 0uLL;
  std::vector<float>::reserve((void **)&v23, (uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 4);
  long long v19 = (unint64_t)a2;
  std::string::size_type v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0x8000000000000000;
  int v4 = *a2;
  if (!*a2)
  {
    unint64_t v22 = 1;
LABEL_9:
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = (unint64_t)a2;
    v16.__r_.__value_.__r.__words[2] = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 1;
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    int v6 = (std::string::size_type *)*((void *)a2 + 1);
    std::string::size_type v20 = *v6;
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = (unint64_t)a2;
    v16.__r_.__value_.__r.__words[2] = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0x8000000000000000;
    v16.__r_.__value_.__r.__words[2] = v6[1];
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    unint64_t v22 = 0;
    goto LABEL_9;
  }
  unint64_t v5 = (void *)*((void *)a2 + 1);
  *((void *)&v19 + 1) = *v5;
  uint64_t v17 = 0;
  unint64_t v18 = 0x8000000000000000;
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = (unint64_t)(v5 + 1);
LABEL_10:
  uint64_t v7 = (char *)*((void *)&v23 + 1);
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v19, (unsigned __int8 **)&v16))
  {
    uint64_t v8 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v19);
    int v25 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v8, (float *)&v25);
    uint64_t v7 = std::vector<float>::insert((uint64_t)&v23, v7, &v25) + 4;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v19);
  }
  double result = *(double *)&v23;
  uint64_t v10 = v24;
  *(_OWORD *)a1 = v23;
  a1[2] = v10;
  return result;
}

void sub_20D2C7F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  int v25 = *(void **)(v23 - 64);
  if (v25)
  {
    *(void *)(v23 - 56) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::vector<float>>::~pair(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(uint64_t *result, float *a2)
{
  int v2 = result;
  switch(*(unsigned char *)result)
  {
    case 4:
      float v3 = 0.0;
      if (*((unsigned char *)result + 8)) {
        float v3 = 1.0;
      }
      break;
    case 5:
      float v3 = (float)result[1];
      break;
    case 6:
      float v3 = (float)(unint64_t)result[1];
      break;
    case 7:
      float v3 = *((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v5 = *(unsigned __int8 *)v2;
      if (v5 > 9) {
        int v6 = "number";
      }
      else {
        int v6 = off_2641152A0[v5];
      }
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      uint64_t v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v10, exception);
  }
  *a2 = v3;
  return result;
}

void sub_20D2C8104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

char *std::vector<float>::insert(uint64_t a1, char *__src, _DWORD *a3)
{
  int v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v14 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 2;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    std::string::size_type v20 = &v19[4 * v16];
    std::string __p = v19;
    char v27 = v20;
    uint64_t v28 = v20;
    std::string v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v22);
        std::string::size_type v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        std::string __p = v23;
        char v27 = v20;
        std::string v29 = &v23[4 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 4 * (v21 >> 1);
        char v27 = v20;
      }
    }
    *(_DWORD *)std::string::size_type v20 = *a3;
    uint64_t v28 = v20 + 4;
    int v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)uint64_t __src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    std::string v9 = __src + 4;
    long long v10 = v6 - 4;
    std::string::size_type v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      int v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    }
    *(_DWORD *)int v4 = *a3;
  }
  return v4;
}

void sub_20D2C8368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoParallelNeuralAMInferenceBase::EspressoParallelNeuralAMInferenceBase(uint64_t a1, char *a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C2040F0;
  ParallelNeuralAMInference::Config::Config(a1 + 8, (uint64_t)a2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  int v6 = (void **)(a1 + 200);
  *(void *)(a1 + 216) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v10);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)int v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *(void *)(a1 + 216) = *((void *)&v10.__r_.__value_.__l + 2);
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *(void *)a1 = &unk_26C205548;
  return a1;
}

void sub_20D2C84B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 223) < 0) {
    operator delete(*v17);
  }
  ParallelNeuralAMInference::Config::~Config(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::get_persistent_module_from_pool<ParallelNeuralAMPersistentModule>(void *a1, long long *a2, uint64_t a3)
{
  int v4 = *(std::__shared_weak_count **)(a3 + 24);
  if (v4 && (unint64_t v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9
      && (uint64_t v10 = v9 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v9 + 8), (unsigned __int8 *)a2)))
    {
      uint64_t v13 = a2;
      std::string::size_type v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a2, &v13);
      uint64_t v12 = *((void *)v11 + 6);
      *a1 = *((void *)v11 + 5);
      a1[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_20D2C85CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMInference::Config::~Config(void **this)
{
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)this);
}

void EspressoParallelNeuralAMInferenceBase::~EspressoParallelNeuralAMInferenceBase(void **this)
{
  *this = &unk_26C2040F0;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(this + 1));
}

uint64_t EspressoParallelNeuralAMDecoupledInference::Config::Config(uint64_t a1, char *a2)
{
  uint64_t v23 = (void **)(ParallelNeuralAMInference::Config::Config(a1, (uint64_t)a2) + 192);
  std::string::basic_string[abi:ne180100]<0>(v23, "input");
  unint64_t v22 = (void **)(a1 + 216);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 216), "input_length");
  std::string::size_type v20 = (void **)(a1 + 240);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 240), &byte_20D5A22AE);
  unint64_t v21 = (void **)(a1 + 264);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 264), &byte_20D5A22AE);
  int v4 = (void **)(a1 + 288);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 288), &byte_20D5A22AE);
  unint64_t v5 = (void **)(a1 + 312);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 312), "Identity_1");
  int v6 = (void **)(a1 + 336);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 336), "Identity_2");
  unint64_t v7 = (void **)(a1 + 360);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 360), "Identity");
  uint64_t v8 = (void **)(a1 + 384);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 384), "input_decoder_input");
  uint64_t v9 = (void **)(a1 + 408);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 408), "input_decoder_length");
  uint64_t v10 = (void **)(a1 + 432);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 432), &byte_20D5A22AE);
  std::string::size_type v11 = (void **)(a1 + 456);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 456), "Identity_3");
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_input_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &v26);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v23);
  }
  *(std::string *)uint64_t v23 = v26;
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_input_length_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &v26);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v22);
  }
  *(_OWORD *)unint64_t v22 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 232) = *((void *)&v26.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_input_speaker_id_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)unint64_t v21 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 280) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_input_language_embedding_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)std::string::size_type v20 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 256) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_input_style_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)int v4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 304) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_output_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &v26);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)unint64_t v5 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 328) = *((void *)&v26.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_output_alignment_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)int v6 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 352) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_encoder_output_decoder_length_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &v26);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 376) = *((void *)&v26.__r_.__value_.__l + 2);
  uint64_t v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_decoder_input_decoder_input_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &v26);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 400) = *((void *)&v26.__r_.__value_.__l + 2);
  uint64_t v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_decoder_input_decoder_length_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v17, &v26);
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 424) = *((void *)&v26.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_decoder_input_speaker_id_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &v26);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 448) = *((void *)&v26.__r_.__value_.__l + 2);
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_decoder_output_mel_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &v26);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)std::string::size_type v11 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(void *)(a1 + 472) = *((void *)&v26.__r_.__value_.__l + 2);
  return a1;
}

void sub_20D2C8B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18[479] < 0) {
    operator delete(*v21);
  }
  if (v18[455] < 0) {
    operator delete(*v20);
  }
  if (v18[431] < 0) {
    operator delete(*v19);
  }
  if (v18[407] < 0) {
    operator delete(*v26);
  }
  if (v18[383] < 0) {
    operator delete(*v25);
  }
  if (v18[359] < 0) {
    operator delete(*v24);
  }
  if (v18[335] < 0) {
    operator delete(*v23);
  }
  if (v18[311] < 0) {
    operator delete(*v22);
  }
  if (v18[287] < 0) {
    operator delete(*a10);
  }
  if (v18[263] < 0) {
    operator delete(*a9);
  }
  if (v18[239] < 0) {
    operator delete(*a11);
  }
  if (v18[215] < 0) {
    operator delete(*a12);
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)v18);
  _Unwind_Resume(a1);
}

uint64_t EspressoParallelNeuralAMDecoupledInference::EspressoParallelNeuralAMDecoupledInference(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = (std::__shared_weak_count *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  EspressoParallelNeuralAMInferenceBase::EspressoParallelNeuralAMInferenceBase(a1, a2, v6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = &off_26C2056B0;
  EspressoParallelNeuralAMDecoupledInference::Config::Config(a1 + 224, a2);
  uint64_t v7 = *a3;
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::get_persistent_module_from_pool<ParallelNeuralAMPersistentModule>(&v12, (long long *)(a1 + 200), v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v10 = *(void *)(v12 + 296);
  uint64_t v9 = *(std::__shared_weak_count **)(v12 + 304);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 736) = v10 + 48;
    *(void *)(a1 + 720) = v10 + 32;
    *(void *)(a1 + 728) = v10 + 40;
    *(void *)(a1 + 704) = v10;
    *(void *)(a1 + 712) = v10 + 16;
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    *(void *)(a1 + 736) = v10 + 48;
    *(void *)(a1 + 720) = v10 + 32;
    *(void *)(a1 + 728) = v10 + 40;
    *(void *)(a1 + 704) = v10;
    *(void *)(a1 + 712) = v10 + 16;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return a1;
}

void sub_20D2C8E68(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  EspressoParallelNeuralAMDecoupledInference::Config::~Config(v2);
  EspressoParallelNeuralAMInferenceBase::~EspressoParallelNeuralAMInferenceBase(v1);
  _Unwind_Resume(a1);
}

void EspressoParallelNeuralAMDecoupledInference::Config::~Config(void **this)
{
  if (*((char *)this + 479) < 0) {
    operator delete(this[57]);
  }
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)this);
}

void EspressoParallelNeuralAMDecoupledInference::~EspressoParallelNeuralAMDecoupledInference(void **this)
{
  *this = &off_26C2056B0;
  EspressoParallelNeuralAMDecoupledInference::Config::~Config(this + 28);
  *this = &unk_26C2040F0;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(this + 1));
}

uint64_t ___ZN51EspressoParallelNeuralAMDecoupledStreamingInferenceC2ERKN8nlohmann10basic_jsonINSt3__13mapENS2_6vectorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbxydS8_NS0_14adl_serializerENS4_IhNS8_IhEEEEEENS2_10shared_ptrI16SharedObjectPoolEE_block_invoke()
{
  uint64_t v0 = pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0);
  return MEMORY[0x270EDAFB8](v0);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v9 = *a1;
    if (v9 > 9) {
      uint64_t v10 = "number";
    }
    else {
      uint64_t v10 = off_2641152A0[v9];
    }
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    std::string::size_type v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    long long v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v16, exception);
  }
  *(void *)&long long v16 = a1;
  std::string::size_type v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0x8000000000000000;
  *((void *)&v16 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a1 + 1), a2);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v13.__r_.__value_.__r.__words[2] = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0x8000000000000000;
  int v5 = *a1;
  if (v5 == 2)
  {
    v13.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a1 + 1) + 8);
  }
  else if (v5 == 1)
  {
    v13.__r_.__value_.__l.__size_ = *((void *)a1 + 1) + 8;
  }
  else
  {
    unint64_t v15 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v16, (unsigned __int8 **)&v13))
  {
    return *(double *)a3;
  }
  uint64_t v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v16);
  v13.__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v7, (double *)&v13);
  return *(double *)&v13.__r_.__value_.__l.__data_;
}

void sub_20D2C91BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), __s);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), __s) >= 1) {
    return v2;
  }
  return v5;
}

uint64_t std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>(uint64_t *a1, char *a2)
{
  int v4 = operator new(0xC0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = off_26C216948;
  uint64_t result = TacotronAlignment::TacotronAlignment((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_20D2C9300(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledStreamingInference>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  *(void *)(a1 + 24) = &off_26C205778;
  if (NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)a1)) {
    dispatch_release(*(dispatch_object_t *)(a1 + 1264));
  }
  EspressoParallelNeuralAMDecoupledInference::Config::~Config((void **)(a1 + 768));
  EspressoParallelNeuralAMDecoupledInference::~EspressoParallelNeuralAMDecoupledInference(v2);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledStreamingInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledStreamingInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInference>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMDecoupledInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_26C2052D0;
  EspressoParallelNeuralAMInference::Config::~Config((void **)(a1 + 248));
  *(void *)(a1 + 24) = &unk_26C2040F0;
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(a1 + 32));
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoParallelNeuralAMInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TacotronAlignment>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 88);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__shared_ptr_emplace<TacotronAlignment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TacotronAlignment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unsigned __int8 *nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(unsigned __int8 *result, double *a2)
{
  uint64_t v2 = result;
  int v3 = *result;
  switch(v3)
  {
    case 5:
      double v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      double v4 = *((double *)result + 1);
      break;
    case 6:
      double v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      unint64_t v6 = *v2;
      if (v6 > 9) {
        uint64_t v7 = "number";
      }
      else {
        uint64_t v7 = off_2641152A0[v6];
      }
      std::string::basic_string[abi:ne180100]<0>(&v10, v7);
      uint64_t v8 = std::string::insert(&v10, 0, "type must be number, but is ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
      long long v11 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v11, exception);
  }
  *a2 = v4;
  return result;
}

void sub_20D2C975C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void PersistentModuleFactory::add(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v12 = (uint64_t)(a1 + 1);
  std::string v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1 + 1, a2);
  if (a5)
  {
    if (!v13) {
      goto LABEL_29;
    }
    *(void *)buf = a2;
    uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a2, (long long **)buf);
    unint64_t v15 = v14;
    std::string::size_type v17 = (char *)a1[12];
    unint64_t v16 = a1[13];
    if ((unint64_t)v17 < v16)
    {
      *(void *)std::string::size_type v17 = *((void *)v14 + 5);
      uint64_t v18 = *((void *)v14 + 6);
      *((void *)v17 + 1) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v19 = v17 + 16;
      a1[12] = v17 + 16;
      goto LABEL_28;
    }
    uint64_t v46 = a3;
    int v22 = (char *)a1[11];
    uint64_t v23 = (v17 - v22) >> 4;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v16 - (void)v22;
    if (v25 >> 3 > v24) {
      unint64_t v24 = v25 >> 3;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v27 = (char *)operator new(16 * v26);
    uint64_t v28 = &v27[16 * v23];
    long long v29 = *(_OWORD *)(v15 + 40);
    *(_OWORD *)uint64_t v28 = v29;
    if (*((void *)&v29 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      int v22 = (char *)a1[11];
      std::string::size_type v17 = (char *)a1[12];
    }
    a3 = v46;
    uint64_t v30 = &v27[16 * v26];
    unint64_t v19 = v28 + 16;
    if (v17 == v22)
    {
      a1[11] = v28;
      a1[12] = v19;
      a1[13] = v30;
      if (!v22) {
        goto LABEL_28;
      }
    }
    else
    {
      do
      {
        long long v31 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v28 - 1) = v31;
        v28 -= 16;
        *(void *)std::string::size_type v17 = 0;
        *((void *)v17 + 1) = 0;
      }
      while (v17 != v22);
      uint64_t v32 = (char *)a1[11];
      int v22 = (char *)a1[12];
      a1[11] = v28;
      a1[12] = v19;
      a1[13] = v30;
      if (v22 != v32)
      {
        do
        {
          uint64_t v33 = (std::__shared_weak_count *)*((void *)v22 - 1);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          v22 -= 16;
        }
        while (v22 != v32);
        int v22 = v32;
      }
      if (!v22) {
        goto LABEL_28;
      }
    }
    operator delete(v22);
LABEL_28:
    a1[12] = v19;
LABEL_29:
    uint64_t v34 = a1 + 6;
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v34, a2))
    {
      *(void *)buf = a2;
      uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v34, a2, (long long **)buf);
      uint64_t v36 = (std::__shared_weak_count *)a4[1];
      uint64_t v47 = *a4;
      uint64_t v48 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *((void *)v35 + 8);
      if (!v37) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v37 + 48))(v37, a3, &v47);
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      *(void *)buf = a2;
      uint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a2, (long long **)buf);
      uint64_t v40 = *a6;
      uint64_t v39 = a6[1];
      if (v39) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = (std::__shared_weak_count *)*((void *)v38 + 6);
      *((void *)v38 + 5) = v40;
      *((void *)v38 + 6) = v39;
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      char v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        if ((a2[23] & 0x80u) == 0) {
          uint64_t v44 = (uint64_t *)a2;
        }
        else {
          uint64_t v44 = *(uint64_t **)a2;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v44;
        _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_DEBUG, "WARN: Unknown persistent module '%s', skip.", buf, 0xCu);
      }
      if ((a2[23] & 0x80u) == 0) {
        char v45 = (uint64_t *)a2;
      }
      else {
        char v45 = *(uint64_t **)a2;
      }
      Diagnostics::log(7, "WARN: Unknown persistent module '%s', skip.", v43, v45);
      *a6 = 0;
      a6[1] = 0;
    }
    return;
  }
  if (!v13) {
    goto LABEL_29;
  }
  *(void *)buf = a2;
  std::string::size_type v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, a2, (long long **)buf);
  *a6 = *((void *)v20 + 5);
  uint64_t v21 = *((void *)v20 + 6);
  a6[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_20D2C9B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    std::string v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = (void *)(a1 + 16);
  std::string::size_type v17 = operator new(0x48uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  char v43 = 0;
  *std::string::size_type v17 = 0;
  v17[1] = v9;
  uint64_t v18 = (std::string *)(v17 + 2);
  unint64_t v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v17[4] = *((void *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  v17[8] = 0;
  char v43 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v27 = operator new(8 * *(void *)&prime);
          uint64_t v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v16;
          if (*v16)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v16;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *uint64_t v30 = *v36;
                  void *v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                uint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    *uint64_t v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    uint64_t v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_20D2C9FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>(uint64_t a1)
{
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void PersistentModuleFactory::create(PersistentModuleFactory *this)
{
  uint64_t v2 = operator new(0x88uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_26C2176A0;
  PersistentModuleFactory::PersistentModuleFactory((PersistentModuleFactory *)(v2 + 3));
  *(void *)this = v3;
  *((void *)this + 1) = v2;
}

void sub_20D2CA16C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::PersistentModuleFactory(PersistentModuleFactory *this)
{
  uint64_t v226 = *MEMORY[0x263EF8340];
  *(void *)this = &off_26C203A00;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v2 = (void *)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v220, "parallel_neural_acoustic");
  std::string::basic_string[abi:ne180100]<0>(__p, "parallel neural acoustic persistent module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v133 = &v220;
    }
    else {
      int v133 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v133);
    MEMORY[0x210558D40](exception, v223);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  double v4 = operator new(0x20uLL);
  *double v4 = off_26C214960;
  uint64_t v5 = (std::string *)(v4 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v4[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v4;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v3 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "nashville_fe");
  std::string::basic_string[abi:ne180100]<0>(&v222, "nashville fe persistent module");
  PersistentModuleFactory::register_module<NashvilleFEPersistentModule>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "nashville_adapter");
  std::string::basic_string[abi:ne180100]<0>(&v222, "nashville fe persistent module");
  PersistentModuleFactory::register_module<NashvilleFEPersistentModule>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "prompt_be");
  std::string::basic_string[abi:ne180100]<0>(__p, "Process prompt information");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v134 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v135 = &v220;
    }
    else {
      uint64_t v135 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v135);
    MEMORY[0x210558D40](v134, v223);
    __cxa_throw(v134, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = off_26C214490;
  unint64_t v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v7[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v7;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v6 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "unit_feature_predict");
  std::string::basic_string[abi:ne180100]<0>(__p, "Predict unit features");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    long long v136 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v137 = &v220;
    }
    else {
      uint64_t v137 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v137);
    MEMORY[0x210558D40](v136, v223);
    __cxa_throw(v136, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v10 = operator new(0x20uLL);
  void *v10 = off_26C214B70;
  uint8x8_t v11 = (std::string *)(v10 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v10[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v10;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v9 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "unit_preselect");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unit selection preselection");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v138 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v139 = &v220;
    }
    else {
      uint64_t v139 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v139);
    MEMORY[0x210558D40](v138, v223);
    __cxa_throw(v138, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  std::string v13 = operator new(0x20uLL);
  *std::string v13 = off_26C214858;
  uint64_t v14 = (std::string *)(v13 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    void v13[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v13;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v12 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "word_embedding");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word embedding persistent module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    std::string v140 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v141 = &v220;
    }
    else {
      long long v141 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v141);
    MEMORY[0x210558D40](v140, v223);
    __cxa_throw(v140, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v16 = operator new(0x20uLL);
  *unint64_t v16 = off_26C2146F8;
  std::string::size_type v17 = (std::string *)(v16 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v17, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v16[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v16;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v15 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "espresso_tacotron");
  std::string::basic_string[abi:ne180100]<0>(__p, "Espresso tacotron module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v142 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v143 = &v220;
    }
    else {
      uint64_t v143 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v143);
    MEMORY[0x210558D40](v142, v223);
    __cxa_throw(v142, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v19 = operator new(0x20uLL);
  *unint64_t v19 = off_26C214908;
  long long v20 = (std::string *)(v19 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v19[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v19;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v18 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "espresso_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&v222, "Espresso wavernn module");
  PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "espresso_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&v222, "Espresso wavernn module for fallback");
  PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "mil_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&v222, "MIL wavernn module");
  PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "mil_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&v222, "MIL wavernn module for fallback");
  PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "fastspeech2_encoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FastSpeech2 encoder module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v144 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v145 = &v220;
    }
    else {
      uint64_t v145 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v145);
    MEMORY[0x210558D40](v144, v223);
    __cxa_throw(v144, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  float v21 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  float v22 = operator new(0x20uLL);
  *float v22 = off_26C214AC0;
  BOOL v23 = (std::string *)(v22 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v23, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v22[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v22;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v21 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "fastspeech2_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FastSpeech2 decoder module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v146 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v147 = &v220;
    }
    else {
      long long v147 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v147);
    MEMORY[0x210558D40](v146, v223);
    __cxa_throw(v146, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v25 = operator new(0x20uLL);
  *unint64_t v25 = off_26C214A68;
  unint64_t v26 = (std::string *)(v25 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v25[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v25;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v24 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "soundstream_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v222, "ANETEC decoder inference");
  PersistentModuleFactory::register_module<AnetecDecoderBaseInference>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "anetec_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v222, "ANETEC decoder module");
  PersistentModuleFactory::register_module<AnetecDecoderBaseInference>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "soundstream_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v222, "ANETEC streaming decoder inference");
  PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v223, "anetec_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&v222, "ANETEC streaming decoder inference");
  PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>((uint64_t)this, (uint64_t)v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "soundstorm");
  std::string::basic_string[abi:ne180100]<0>(__p, "SoundStorm inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v148 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v149 = &v220;
    }
    else {
      int v149 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v149);
    MEMORY[0x210558D40](v148, v223);
    __cxa_throw(v148, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  char v27 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v28 = operator new(0x20uLL);
  *uint64_t v28 = off_26C214070;
  uint64_t v29 = (std::string *)(v28 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v29, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v28[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v28;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v27 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "soundstorm_streaming");
  std::string::basic_string[abi:ne180100]<0>(__p, "SoundStorm streaming inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v150 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<int> v151 = &v220;
    }
    else {
      std::vector<int> v151 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v151);
    MEMORY[0x210558D40](v150, v223);
    __cxa_throw(v150, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v31 = operator new(0x20uLL);
  *unint64_t v31 = off_26C1EE070;
  uint8x8_t v32 = (std::string *)(v31 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v32, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v31[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v31;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v30 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "fastspeech2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FastSpeech2 decoder module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    std::vector<int> v152 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v153 = &v220;
    }
    else {
      uint64_t v153 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v153);
    MEMORY[0x210558D40](v152, v223);
    __cxa_throw(v152, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint8x8_t v34 = operator new(0x20uLL);
  *uint8x8_t v34 = off_26C214540;
  uint64_t v35 = (std::string *)(v34 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v35, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v34[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v34;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v33 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "s1nar_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "S1NAR decoder inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v154 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v155 = &v220;
    }
    else {
      int v155 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v155);
    MEMORY[0x210558D40](v154, v223);
    __cxa_throw(v154, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v37 = operator new(0x20uLL);
  *unint64_t v37 = off_26C213FC0;
  uint64_t v38 = (std::string *)(v37 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v37[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v37;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v36 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "fs2s1_encoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FS2S1 encoder inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v156 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v157 = &v220;
    }
    else {
      int v157 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v157);
    MEMORY[0x210558D40](v156, v223);
    __cxa_throw(v156, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v40 = operator new(0x20uLL);
  *uint64_t v40 = off_26C214330;
  uint64_t v41 = (std::string *)(v40 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v40[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v40;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v39 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "fs2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(__p, "FS2S1 decoder inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    double v158 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v159 = &v220;
    }
    else {
      int v159 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v159);
    MEMORY[0x210558D40](v158, v223);
    __cxa_throw(v158, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  char v42 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  char v43 = operator new(0x20uLL);
  *char v43 = off_26C2142D8;
  uint64_t v44 = (std::string *)(v43 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v44, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v43[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v43;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v42 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "roberta_word_embedding");
  std::string::basic_string[abi:ne180100]<0>(__p, "Roberta word embedding inference");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    long long v160 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v161 = &v220;
    }
    else {
      uint64_t v161 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v161);
    MEMORY[0x210558D40](v160, v223);
    __cxa_throw(v160, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  char v45 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v46 = operator new(0x20uLL);
  *uint64_t v46 = off_26C1EDFC0;
  uint64_t v47 = (std::string *)(v46 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v47, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v46[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v46;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v45 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "count");
  std::string::basic_string[abi:ne180100]<0>(__p, "Count phonemes, syllables, words, and phrases");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v162 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v163 = &v220;
    }
    else {
      long long v163 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v163);
    MEMORY[0x210558D40](v162, v223);
    __cxa_throw(v162, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v48 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v49 = operator new(0x20uLL);
  *uint64_t v49 = off_26C2149B8;
  uint64_t v50 = (std::string *)(v49 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v50, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v49[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v49;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v48 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "extract");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extract features");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v164 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v165 = &v220;
    }
    else {
      long long v165 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v165);
    MEMORY[0x210558D40](v164, v223);
    __cxa_throw(v164, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v51 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v52 = operator new(0x20uLL);
  *unint64_t v52 = off_26C214800;
  uint64_t v53 = (std::string *)(v52 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v53, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v52[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v52;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v51 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "source");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text source module");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    long long v166 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v167 = &v220;
    }
    else {
      uint64_t v167 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v167);
    MEMORY[0x210558D40](v166, v223);
    __cxa_throw(v166, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v54 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v55 = operator new(0x20uLL);
  *uint64_t v55 = off_26C2140C8;
  uint64_t v56 = (std::string *)(v55 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v56, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v55[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v55;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v54 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "audio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decide between audio and alternative context");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    long long v168 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v169 = &v220;
    }
    else {
      int v169 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v169);
    MEMORY[0x210558D40](v168, v223);
    __cxa_throw(v168, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v58 = operator new(0x20uLL);
  *uint64_t v58 = off_26C214120;
  int v59 = (std::string *)(v58 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v59, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v58[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v58;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v57 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "match_prompt");
  std::string::basic_string[abi:ne180100]<0>(__p, "Match text for prompts and provide units");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v170 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v171 = &v220;
    }
    else {
      uint64_t v171 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v171);
    MEMORY[0x210558D40](v170, v223);
    __cxa_throw(v170, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v60 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v61 = operator new(0x20uLL);
  *uint64_t v61 = off_26C214178;
  int v62 = (std::string *)(v61 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v62, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v61[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v61;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v60 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "transliterate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transliterate text, like full/half-width conversion");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v172 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v173 = &v220;
    }
    else {
      uint64_t v173 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v173);
    MEMORY[0x210558D40](v172, v223);
    __cxa_throw(v172, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v63 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v64 = operator new(0x20uLL);
  *unint64_t v64 = off_26C214648;
  uint64_t v65 = (std::string *)(v64 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v65, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v64[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v64;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v63 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "breaks_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break sentence");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v174 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v175 = &v220;
    }
    else {
      char v175 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v175);
    MEMORY[0x210558D40](v174, v223);
    __cxa_throw(v174, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  __int16 v66 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  double v67 = operator new(0x20uLL);
  *double v67 = off_26C213DB0;
  __int16 v68 = (std::string *)(v67 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v68, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v67[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v67;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v66 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "rewrite");
  std::string::basic_string[abi:ne180100]<0>(__p, "rewrite input using fast rewriter");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v176 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v177 = &v220;
    }
    else {
      char v177 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v177);
    MEMORY[0x210558D40](v176, v223);
    __cxa_throw(v176, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  double v69 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  __int16 v70 = operator new(0x20uLL);
  *__int16 v70 = off_26C213D58;
  double v71 = (std::string *)(v70 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v71, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v70[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v70;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v69 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "markup");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle markup");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v178 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v179 = &v220;
    }
    else {
      char v179 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v179);
    MEMORY[0x210558D40](v178, v223);
    __cxa_throw(v178, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  __int16 v72 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  int v73 = operator new(0x20uLL);
  *int v73 = off_26C213D00;
  uint64_t v74 = (std::string *)(v73 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v74, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v73[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v73;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v72 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "hydra_udct");
  std::string::basic_string[abi:ne180100]<0>(__p, "handle hydra user dictionary lookup");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v180 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v181 = &v220;
    }
    else {
      char v181 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v181);
    MEMORY[0x210558D40](v180, v223);
    __cxa_throw(v180, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v75 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v76 = operator new(0x20uLL);
  *unint64_t v76 = off_26C2143E0;
  uint64_t v77 = (std::string *)(v76 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v77, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v77->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v76[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v76;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v75 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "normalize_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based text normalization");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v182 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v183 = &v220;
    }
    else {
      char v183 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v183);
    MEMORY[0x210558D40](v182, v223);
    __cxa_throw(v182, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v78 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v79 = operator new(0x20uLL);
  *uint64_t v79 = off_26C214228;
  unint64_t v80 = (std::string *)(v79 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v80, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v80->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v79[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v79;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v78 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "pronounce_nn");
  std::string::basic_string[abi:ne180100]<0>(__p, "seq2seq based pronunciation");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v184 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v185 = &v220;
    }
    else {
      char v185 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v185);
    MEMORY[0x210558D40](v184, v223);
    __cxa_throw(v184, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v81 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v82 = operator new(0x20uLL);
  *uint64_t v82 = off_26C214280;
  unint64_t v83 = (std::string *)(v82 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v83, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v82[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v82;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v81 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "hydra_adapter");
  std::string::basic_string[abi:ne180100]<0>(__p, "Hydra adapter for BE pipeline");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v186 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v187 = &v220;
    }
    else {
      unsigned int v187 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v187);
    MEMORY[0x210558D40](v186, v223);
    __cxa_throw(v186, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v84 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v85 = operator new(0x20uLL);
  *uint64_t v85 = off_26C214388;
  int v86 = (std::string *)(v85 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v86, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    void v85[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v85;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v84 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "parse");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parse legacy or SSML text");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v188 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v189 = &v220;
    }
    else {
      int v189 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v189);
    MEMORY[0x210558D40](v188, v223);
    __cxa_throw(v188, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v87 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v88 = operator new(0x20uLL);
  *uint64_t v88 = off_26C213CA8;
  unint64_t v89 = (std::string *)(v88 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v89, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v89->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v88[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v88;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v87 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "switch_language");
  std::string::basic_string[abi:ne180100]<0>(__p, "Handle material in secondary languages");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    char v190 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v191 = &v220;
    }
    else {
      uint64_t v191 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v191);
    MEMORY[0x210558D40](v190, v223);
    __cxa_throw(v190, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v90 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v91 = operator new(0x20uLL);
  *uint64_t v91 = off_26C214750;
  int v92 = (std::string *)(v91 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v92, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v92->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v91[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v91;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v90 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "tokenize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Break up text into tokens");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v192 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v193 = &v220;
    }
    else {
      uint64_t v193 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v193);
    MEMORY[0x210558D40](v192, v223);
    __cxa_throw(v192, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v93 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v94 = operator new(0x20uLL);
  *uint64_t v94 = off_26C213E60;
  int v95 = (std::string *)(v94 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v95, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v95->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v94[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v94;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v93 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "override");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply override rules");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    char v194 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v195 = &v220;
    }
    else {
      int v195 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v195);
    MEMORY[0x210558D40](v194, v223);
    __cxa_throw(v194, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  unint64_t v96 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  int v97 = operator new(0x20uLL);
  void *v97 = off_26C214598;
  std::chrono::steady_clock::time_point v98 = (std::string *)(v97 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v98, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v97[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v97;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v96 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "normalize");
  std::string::basic_string[abi:ne180100]<0>(__p, "Translate text into a sequence of regular words");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    char v196 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v197 = &v220;
    }
    else {
      int v197 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v197);
    MEMORY[0x210558D40](v196, v223);
    __cxa_throw(v196, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v99 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v100 = operator new(0x20uLL);
  *unint64_t v100 = off_26C213EB8;
  uint64_t v101 = (std::string *)(v100 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v101, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v101->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v100[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v100;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v99 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "punctuate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine whether punctuation is phrase ending or not");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    std::vector<int> v198 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<int> v199 = &v220;
    }
    else {
      std::vector<int> v199 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v199);
    MEMORY[0x210558D40](v198, v223);
    __cxa_throw(v198, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  std::chrono::steady_clock::time_point v102 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v103 = operator new(0x20uLL);
  *uint64_t v103 = off_26C213F68;
  double v104 = (std::string *)(v103 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v104, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v104->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v103[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v103;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v102 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "part_of_speech");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine part of speech");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    std::vector<int> v200 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<int> v201 = &v220;
    }
    else {
      std::vector<int> v201 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v201);
    MEMORY[0x210558D40](v200, v223);
    __cxa_throw(v200, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v105 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  int v106 = operator new(0x20uLL);
  *int v106 = off_26C214438;
  uint64_t v107 = (std::string *)(v106 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v107, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v107->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v106[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v106;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v105 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "phrasing");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v202 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v203 = &v220;
    }
    else {
      uint64_t v203 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v203);
    MEMORY[0x210558D40](v202, v223);
    __cxa_throw(v202, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v108 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  int v109 = operator new(0x20uLL);
  *int v109 = off_26C213E08;
  float v110 = (std::string *)(v109 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v110, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v110->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v109[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v109;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v108 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "sentence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine sentence type");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v204 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v205 = &v220;
    }
    else {
      uint64_t v205 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v205);
    MEMORY[0x210558D40](v204, v223);
    __cxa_throw(v204, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v111 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v112 = operator new(0x20uLL);
  *uint64_t v112 = off_26C2148B0;
  int v113 = (std::string *)(v112 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v113, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v113->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v112[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v112;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v111 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "pronounce");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generate language-appropriate phonemes");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v206 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v207 = &v220;
    }
    else {
      int v207 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v207);
    MEMORY[0x210558D40](v206, v223);
    __cxa_throw(v206, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  float v114 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v115 = operator new(0x20uLL);
  *uint64_t v115 = off_26C213F10;
  float v116 = (std::string *)(v115 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v116, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v116->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v115[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v115;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v114 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "trim_utterance");
  std::string::basic_string[abi:ne180100]<0>(__p, "Implement trimming attributes");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    uint64_t v208 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v209 = &v220;
    }
    else {
      char v209 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v209);
    MEMORY[0x210558D40](v208, v223);
    __cxa_throw(v208, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v117 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  std::chrono::steady_clock::time_point v118 = operator new(0x20uLL);
  *std::chrono::steady_clock::time_point v118 = off_26C2146A0;
  int v119 = (std::string *)(v118 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v119, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v119->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v118[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v118;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v117 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "amend_phonemes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Apply rule-based fix-ups to pronunciations, using multiple-word context");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v210 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v211 = &v220;
    }
    else {
      char v211 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v211);
    MEMORY[0x210558D40](v210, v223);
    __cxa_throw(v210, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v120 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  uint64_t v121 = operator new(0x20uLL);
  *uint64_t v121 = off_26C2144E8;
  float v122 = (std::string *)(v121 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v122, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v122->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v121[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v121;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v120 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "map_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map pronunciations between languages");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    int v212 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v213 = &v220;
    }
    else {
      uint64_t v213 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v213);
    MEMORY[0x210558D40](v212, v223);
    __cxa_throw(v212, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v123 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  int v124 = operator new(0x20uLL);
  void *v124 = off_26C214A10;
  uint64_t v125 = (std::string *)(v124 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v125, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v125->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    _DWORD v124[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v124;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v123 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "join_pronunciations");
  std::string::basic_string[abi:ne180100]<0>(__p, "Join pronunciations of connected words");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    char v214 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v215 = &v220;
    }
    else {
      uint64_t v215 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v215);
    MEMORY[0x210558D40](v214, v223);
    __cxa_throw(v214, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  uint64_t v126 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  uint64_t v225 = 0;
  unint64_t v127 = operator new(0x20uLL);
  void *v127 = off_26C214B18;
  int v128 = (std::string *)(v127 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v128, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v128->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v127[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v127;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v126 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "phrasing_token");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determine phrase boundaries based on token");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v2, (unsigned __int8 *)&v220))
  {
    char v216 = __cxa_allocate_exception(0x10uLL);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v217 = &v220;
    }
    else {
      int v217 = (std::string *)v220.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v223, "Persistent Module name '%s' is registered already.", (const char *)v217);
    MEMORY[0x210558D40](v216, v223);
    __cxa_throw(v216, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v221, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
  }
  else {
    std::string v221 = v220;
  }
  v223[0] = (long long *)&v220;
  int v129 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v2, (unsigned __int8 *)&v220, v223);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v222, v221.__r_.__value_.__l.__data_, v221.__r_.__value_.__l.__size_);
  }
  else {
    std::string v222 = v221;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v130 = operator new(0x20uLL);
  void *v130 = off_26C2145F0;
  int v131 = (std::string *)(v130 + 1);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v131, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v131->__r_.__value_.__l.__data_ = *(_OWORD *)&v222.__r_.__value_.__l.__data_;
    v130[3] = *((void *)&v222.__r_.__value_.__l + 2);
  }
  uint64_t v225 = v130;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v223, (void *)v129 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v223);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (v219 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
}

void sub_20D2CEDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  operator delete(v37);
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::~__hash_table(v36);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(v35);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(uint64_t a1, uint64_t a2)
{
  void v11[4] = *(long long **)MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v8 = (const char *)a2;
    }
    else {
      unint64_t v8 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v11, "Persistent Module name '%s' is registered already.", v8);
    MEMORY[0x210558D40](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  v11[0] = (long long *)a2;
  double v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_26C2141D0;
  unint64_t v6 = (std::string *)(v5 + 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *((void *)v5 + 3) = *((void *)&v10.__r_.__value_.__l + 2);
  }
  v11[3] = (long long *)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v11, (void *)v4 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20D2CFDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(uint64_t a1, uint64_t a2)
{
  void v11[4] = *(long long **)MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v8 = (const char *)a2;
    }
    else {
      unint64_t v8 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v11, "Persistent Module name '%s' is registered already.", v8);
    MEMORY[0x210558D40](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  v11[0] = (long long *)a2;
  double v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_26C2147A8;
  unint64_t v6 = (std::string *)(v5 + 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *((void *)v5 + 3) = *((void *)&v10.__r_.__value_.__l + 2);
  }
  v11[3] = (long long *)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v11, (void *)v4 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20D2CFFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(uint64_t a1, uint64_t a2)
{
  void v11[4] = *(long long **)MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v8 = (const char *)a2;
    }
    else {
      unint64_t v8 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v11, "Persistent Module name '%s' is registered already.", v8);
    MEMORY[0x210558D40](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  v11[0] = (long long *)a2;
  double v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_26C214018;
  unint64_t v6 = (std::string *)(v5 + 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *((void *)v5 + 3) = *((void *)&v10.__r_.__value_.__l + 2);
  }
  v11[3] = (long long *)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v11, (void *)v4 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20D2D0228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(uint64_t a1, uint64_t a2)
{
  void v11[4] = *(long long **)MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v8 = (const char *)a2;
    }
    else {
      unint64_t v8 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v11, "Persistent Module name '%s' is registered already.", v8);
    MEMORY[0x210558D40](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  v11[0] = (long long *)a2;
  double v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_26C1EDF68;
  unint64_t v6 = (std::string *)(v5 + 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *((void *)v5 + 3) = *((void *)&v10.__r_.__value_.__l + 2);
  }
  v11[3] = (long long *)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v11, (void *)v4 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20D2D0468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(uint64_t a1, uint64_t a2)
{
  void v11[4] = *(long long **)MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v8 = (const char *)a2;
    }
    else {
      unint64_t v8 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v11, "Persistent Module name '%s' is registered already.", v8);
    MEMORY[0x210558D40](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  v11[0] = (long long *)a2;
  double v4 = std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v9;
  }
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_26C1EE018;
  unint64_t v6 = (std::string *)(v5 + 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *((void *)v5 + 3) = *((void *)&v10.__r_.__value_.__l + 2);
  }
  v11[3] = (long long *)v5;
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v11, (void *)v4 + 5);
  std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20D2D06A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    double v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20D2D0A48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  long long v24 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x160uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218238;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  *(void *)(v7 + 296) = 0;
  *(void *)(v7 + 304) = 0;
  *(void *)(v7 + 312) = 0;
  *(void *)(v7 + 24) = off_26C204C88;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init PhrasingTokenPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PhrasingTokenPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v24);
  if (*(void *)buf)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)buf + 96) + 72))(&v26);
    uint8x8_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v26, "sentence_breaks");
    std::allocate_shared[abi:ne180100]<std::vector<std::string>,std::allocator<std::vector<std::string>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>(&v25, (unsigned __int8 *)v11);
    unint64_t v12 = *(std::__shared_weak_count **)(v7 + 328);
    *(_OWORD *)(v7 + 320) = v25;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    std::string v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v26, "phrase_breaks");
    std::allocate_shared[abi:ne180100]<std::vector<std::string>,std::allocator<std::vector<std::string>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>(&v25, (unsigned __int8 *)v13);
    uint64_t v14 = *(std::__shared_weak_count **)(v7 + 344);
    *(_OWORD *)(v7 + 336) = v25;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v15 = (void *)(a1 + 8);
  unint64_t v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v17 = v8;
    uint64_t v18 = a3;
    unint64_t v19 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v19 = (void *)*v15;
    }
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v18;
    unint64_t v8 = v17;
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v15 = (void *)*v15;
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v15, (double)((v21.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_20D2D0E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  shared_owners = (std::__shared_weak_count *)v18[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v18[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PhrasingTokenPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PhrasingTokenPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PhrasingTokenPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2145F0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2145F0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D1070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2145F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingTokenPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2145F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x148uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C2187B0;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C205468;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init JoinPronunciationsPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init JoinPronunciationsPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v19);
  if (*(void *)buf) {
    v7[40] = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(*(uint64_t *)buf);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint8x8_t v11 = (void *)(a1 + 8);
  unint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string v13 = a3;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint8x8_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D1460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  PersistentModule::~PersistentModule(v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v17);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<JoinPronunciationsPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<JoinPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2187B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<JoinPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2187B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214B18;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214B18;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D1678(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214B18;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<JoinPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214B18;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v20 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x158uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218708;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v20 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C205318;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init MapPronunciationsPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init MapPronunciationsPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v20);
  uint64_t v11 = *(void *)buf;
  if (*(void *)buf)
  {
    v7[41] = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(*(uint64_t *)buf);
    v7[40] = FrontendEnvironment::get_shared_component_instance<TranslatePhonemes>(v11);
    v7[42] = FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v11);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v12 = (void *)(a1 + 8);
  std::string v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = a3;
    std::chrono::steady_clock::time_point v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v15 = (void *)*v12;
    }
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v16.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v14;
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v12 = (void *)*v12;
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v18, v12, (double)((v17.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D1A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  PersistentModule::~PersistentModule(v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v17);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MapPronunciationsPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MapPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MapPronunciationsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214A10;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214A10;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D1CA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214A10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MapPronunciationsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214A10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  long long v46 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v5 = operator new(0x160uLL);
  unint64_t v6 = (unint64_t)v5;
  v5[1] = 0;
  _DWORD v5[2] = 0;
  *std::chrono::steady_clock::time_point v5 = off_26C218190;
  unint64_t v7 = (unint64_t)(v5 + 3);
  if (*((void *)&v46 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v5 + 3));
  *(void *)(v6 + 296) = 0;
  *(void *)(v6 + 304) = 0;
  *(void *)(v6 + 312) = 0;
  *(void *)(v6 + 24) = off_26C204B20;
  *(void *)(v6 + 328) = 0;
  *(void *)(v6 + 336) = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__first_) = 0;
    _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_INFO, "FE Init AmendPhonemesPersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "FE Init AmendPhonemesPersistentModule", v9);
  SharedObjectPool::get_if<FrontendEnvironment>(&v48, v46);
  uint64_t v10 = v48;
  if (v48)
  {
    *(void *)(v6 + 320) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v48);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v10 + 96) + 16))(&v53);
    uint64_t v11 = operator new(0x30uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *uint64_t v11 = off_26C2198F8;
    void v11[4] = 0;
    v11[5] = 0;
    v11[3] = 0;
    unint64_t v12 = *(std::__shared_weak_count **)(v6 + 336);
    *(void *)(v6 + 328) = v11 + 3;
    *(void *)(v6 + 336) = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v53)
    {
      MemoryMap::madvise(v55, v56, 1);
      uint64_t v44 = a1;
      std::string v13 = v55;
      unsigned int v14 = *((_DWORD *)v55 + 1);
      if (v14 >= 4)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::chrono::steady_clock::time_point v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          int v17 = *((_DWORD *)v13 + 1);
          LODWORD(buf.__first_) = 67109376;
          HIDWORD(buf.__first_) = v17;
          LOWORD(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 2) = 3;
          _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_INFO, "Amend Phonemes may not be compatible with file version %d, expected %d", (uint8_t *)&buf, 0xEu);
        }
        Diagnostics::log(6, "Amend Phonemes may not be compatible with file version %d, expected %d", v16, *((unsigned int *)v13 + 1), 3);
        unsigned int v14 = *((_DWORD *)v13 + 1);
      }
      *(_DWORD *)(v6 + 344) = v14;
      memset(&v52, 0, sizeof(v52));
      size_t v18 = v56;
      if (v56 >= 9)
      {
        unint64_t v19 = 8;
        uint64_t v47 = a3;
        while (1)
        {
          long long v20 = (int *)((char *)v55 + v19);
          v19 += 8;
          int v21 = *v20;
          if (*v20 <= 1937011315) {
            break;
          }
          if (v21 != 1937011316)
          {
            if (v21 == 1937072737)
            {
              unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_ - (char *)v52.__begin_) >> 3);
              if (v24 > *(unsigned int *)((char *)v55 + v19) && v24 > *(unsigned int *)((char *)v55 + v19 + 4))
              {
                long long v25 = (char *)operator new(0x40uLL);
                *((void *)v25 + 1) = 0;
                *((void *)v25 + 2) = 0;
                *(void *)long long v25 = off_26C2166A8;
                *(_OWORD *)(v25 + 40) = 0u;
                *((void *)v25 + 7) = 0;
                *(_OWORD *)(v25 + 24) = 0u;
                buf.__first_ = (std::__split_buffer<std::string>::pointer)(v25 + 24);
                buf.__begin_ = (std::__split_buffer<std::string>::pointer)v25;
                operator new();
              }
            }
            goto LABEL_44;
          }
LABEL_45:
          if (v19 >= v18) {
            goto LABEL_46;
          }
        }
        if (v21 == 1668511074)
        {
          uint64_t v26 = (char *)v55 + v19;
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_ - (char *)v52.__begin_) >> 3);
          if (v27 > *(unsigned int *)((char *)v55 + v19)
            && v27 > *((unsigned int *)v26 + 1)
            && v27 > *((unsigned int *)v26 + 2))
          {
            uint64_t v28 = (char *)operator new(0x40uLL);
            *((void *)v28 + 1) = 0;
            *((void *)v28 + 2) = 0;
            *(_OWORD *)(v28 + 24) = 0u;
            *(void *)uint64_t v28 = off_26C2166A8;
            *(_OWORD *)(v28 + 40) = 0u;
            *((void *)v28 + 7) = 0;
            buf.__first_ = (std::__split_buffer<std::string>::pointer)(v28 + 24);
            buf.__begin_ = (std::__split_buffer<std::string>::pointer)v28;
            operator new();
          }
        }
        else if (v21 == 1937011256)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)v55 + v19);
          std::vector<std::string>::pointer end = v52.__end_;
          if (v52.__end_ >= v52.__end_cap_.__value_)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_ - (char *)v52.__begin_) >> 3);
            unint64_t v30 = v29 + 1;
            if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3) > v30) {
              unint64_t v30 = 0x5555555555555556 * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v31 = v30;
            }
            buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v52.__end_cap_;
            if (v31) {
              uint8x8_t v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v52.__end_cap_, v31);
            }
            else {
              uint8x8_t v32 = 0;
            }
            unint64_t v33 = v32 + v29;
            buf.__first_ = v32;
            buf.__begin_ = v33;
            buf.__end_cap_.__value_ = &v32[v31];
            long long v34 = *(_OWORD *)__p;
            v33->__r_.__value_.__r.__words[2] = v51;
            *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
            __p[1] = 0;
            std::string::size_type v51 = 0;
            __p[0] = 0;
            buf.__end_ = v33 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v52, &buf);
            uint64_t v35 = v52.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&buf);
            v52.__end_ = v35;
            a3 = v47;
            if (SHIBYTE(v51) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)__p;
            v52.__end_->__r_.__value_.__r.__words[2] = v51;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
            v52.__end_ = end + 1;
          }
        }
LABEL_44:
        v19 += v20[1];
        size_t v18 = v56;
        goto LABEL_45;
      }
LABEL_46:
      buf.__first_ = (std::__split_buffer<std::string>::pointer)&v52;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      a1 = v44;
    }
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (*((void *)&v46 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v36 = (std::string **)(a1 + 8);
  uint64_t v37 = a1;
  uint64_t v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v39 = (std::string *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v39 = *v36;
    }
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__first_) = 136315394;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v39;
    WORD2(buf.__begin_) = 2048;
    *(double *)((char *)&buf.__begin_ + 6) = (double)((v40.__d_.__rep_ - v45.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v38, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    uint64_t v37 = a1;
  }
  if (*(char *)(v37 + 31) < 0) {
    uint64_t v36 = (std::string **)*v36;
  }
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v42, v36, (double)((v41.__d_.__rep_ - v45.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v46 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
  }
  result.n128_u64[0] = v7;
  result.n128_u64[1] = v6;
  *a3 = result;
  return result;
}

void sub_20D2D2618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, std::__shared_weak_count *a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  MEMORY[0x2105595E0](v32, 0x1020C40BCB15178);
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  long long v34 = (std::__shared_weak_count *)v30[14].__vftable;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  PersistentModule::~PersistentModule(a12);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v35);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AmendPhonemesPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AmendPhonemesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AmendPhonemesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2144E8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2144E8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D290C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2144E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AmendPhonemesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2144E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v16 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x140uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C2182A8;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C204D68;
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = (void *)(a1 + 8);
  uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a3;
    unint64_t v12 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v12 = (void *)*v9;
    }
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    size_t v18 = v12;
    __int16 v19 = 2048;
    double v20 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v11;
  }
  if (*(char *)(a1 + 31) < 0) {
    std::string v9 = (void *)*v9;
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v14, v9, (double)((v13.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D2C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<TrimUtterancePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TrimUtterancePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2182A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TrimUtterancePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2182A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2146A0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2146A0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D2E50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2146A0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TrimUtterancePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2146A0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  long long v170 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v168.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v5 = operator new(0x1A8uLL);
  unint64_t v6 = (unint64_t)v5;
  v5[1] = 0;
  _DWORD v5[2] = 0;
  *std::chrono::steady_clock::time_point v5 = off_26C217B70;
  unint64_t v7 = (unint64_t)(v5 + 3);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v170 + 1);
  if (*((void *)&v170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v169 = (std::__shared_weak_count *)*((void *)&v170 + 1);
  Module::Module((Module *)(v5 + 3));
  *(void *)(v6 + 296) = 0;
  *(void *)(v6 + 304) = 0;
  *(void *)(v6 + 312) = 0;
  *(void *)(v6 + 24) = off_26C204108;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  uint64_t v167 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init PronouncePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PronouncePersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(&v180, v170);
  uint64_t v11 = v180;
  if (v180)
  {
    *(void *)(v6 + 416) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v180);
    unint64_t v12 = operator new(0x38uLL);
    v12[1] = 0;
    void v12[2] = 0;
    *unint64_t v12 = off_26C215CD0;
    v12[5] = 0;
    v12[6] = 0;
    v12[3] = off_26C200C68;
    v12[4] = 0;
    std::chrono::steady_clock::time_point v13 = *(std::__shared_weak_count **)(v6 + 360);
    *(void *)(v6 + 352) = v12 + 3;
    *(void *)(v6 + 360) = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    unsigned int v14 = operator new(0x38uLL);
    v14[1] = 0;
    unint64_t v14[2] = 0;
    *unsigned int v14 = off_26C215CD0;
    std::chrono::steady_clock::time_point v15 = v14 + 3;
    v14[5] = 0;
    v14[6] = 0;
    v14[3] = off_26C200C68;
    v14[4] = 0;
    long long v16 = *(std::__shared_weak_count **)(v6 + 344);
    *(void *)(v6 + 336) = v14 + 3;
    *(void *)(v6 + 344) = v14;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      unsigned int v14 = *(void **)(v6 + 344);
      int v17 = (void *)(*(void *)(v6 + 352) + 8);
      std::chrono::steady_clock::time_point v15 = *(void **)(v6 + 336);
      if (!v14)
      {
LABEL_15:
        unint64_t v18 = v17[2];
        __int16 v19 = (void *)v17[1];
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = ((uint64_t)v19 - *v17) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v18 - *v17;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          uint64_t v184 = v17 + 2;
          long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v24);
          uint64_t v26 = &v25[16 * v21];
          *(void *)std::__split_buffer<std::string> buf = v25;
          *(void *)&uint8_t buf[8] = v26;
          char v183 = &v25[16 * v27];
          *(void *)uint64_t v26 = v15;
          *((void *)v26 + 1) = v14;
          *(void *)&uint8_t buf[16] = v26 + 16;
          std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v17, buf);
          double v20 = (void *)v17[1];
          std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
          uint64_t v11 = v180;
        }
        else
        {
          *__int16 v19 = v15;
          v19[1] = v14;
          double v20 = v19 + 2;
          v17[1] = v19 + 2;
        }
        v17[1] = v20;
        shared_component = (uint64_t *)FrontendEnvironment::get_shared_component_instance<PronunciationDictionary>(v11);
        uint64_t v29 = *shared_component;
        uint64_t v30 = shared_component[1];
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v31 = (uint64_t *)(v6 + 320);
        uint64_t v32 = *(std::__shared_weak_count **)(v6 + 328);
        *(void *)(v6 + 320) = v29;
        *(void *)(v6 + 328) = v30;
        if (v32)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          uint64_t v29 = *v31;
        }
        if (v29)
        {
          unint64_t v33 = *(void **)(v6 + 352);
          long long v34 = (void *)v33[2];
          unint64_t v35 = v33[3];
          if ((unint64_t)v34 >= v35)
          {
            uint64_t v38 = v33[1];
            uint64_t v39 = ((uint64_t)v34 - v38) >> 4;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = v35 - v38;
            if (v41 >> 3 > v40) {
              unint64_t v40 = v41 >> 3;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            uint64_t v184 = v33 + 3;
            char v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v42);
            uint64_t v44 = &v43[16 * v39];
            *(void *)std::__split_buffer<std::string> buf = v43;
            *(void *)&uint8_t buf[8] = v44;
            char v183 = &v43[16 * v45];
            long long v46 = *(_OWORD *)v31;
            *(_OWORD *)uint64_t v44 = *(_OWORD *)v31;
            if (*((void *)&v46 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&uint8_t buf[16] = v44 + 16;
            std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v33 + 1, buf);
            uint64_t v37 = (void *)v33[2];
            std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *long long v34 = *(void *)(v6 + 320);
            uint64_t v36 = *(void *)(v6 + 328);
            v34[1] = v36;
            if (v36) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v37 = v34 + 2;
            v33[2] = v34 + 2;
          }
          v33[2] = v37;
        }
        (*(void (**)(void **__return_ptr))(**(void **)(v11 + 96) + 32))(&v177);
        uint64_t v47 = v179;
        if ((v179 & 0x80u) != 0) {
          uint64_t v47 = v178;
        }
        if (v47)
        {
          std::allocate_shared[abi:ne180100]<PronounceAffix,std::allocator<PronounceAffix>,std::string &,std::shared_ptr<PronSourceList> &,void>(__p, (uint64_t)&v177, *(void *)(v6 + 352), *(std::__shared_weak_count **)(v6 + 360));
          uint64_t v48 = *(void **)(v6 + 352);
          long long v49 = *(_OWORD *)__p;
          if (__p[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
          }
          unint64_t v50 = v48[3];
          std::string::size_type v51 = (_OWORD *)v48[2];
          if ((unint64_t)v51 >= v50)
          {
            long long v171 = v49;
            uint64_t v53 = v48[1];
            uint64_t v54 = ((uint64_t)v51 - v53) >> 4;
            if ((unint64_t)(v54 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v55 = v50 - v53;
            uint64_t v56 = v55 >> 3;
            if (v55 >> 3 <= (unint64_t)(v54 + 1)) {
              uint64_t v56 = v54 + 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v56;
            }
            uint64_t v184 = v48 + 3;
            uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v57);
            int v59 = &v58[16 * v54];
            *(void *)std::__split_buffer<std::string> buf = v58;
            *(void *)&uint8_t buf[8] = v59;
            char v183 = &v58[16 * v60];
            *(_OWORD *)int v59 = v171;
            *(void *)&uint8_t buf[16] = v59 + 16;
            std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v48 + 1, buf);
            std::vector<std::string> v52 = (_OWORD *)v48[2];
            std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *std::string::size_type v51 = v49;
            std::vector<std::string> v52 = v51 + 1;
            v48[2] = v52;
          }
          v48[2] = v52;
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
        }
        (*(void (**)(void **__return_ptr))(**(void **)(v11 + 96) + 32))(__p);
        unint64_t v61 = v176;
        if ((v176 & 0x80u) != 0) {
          unint64_t v61 = (unint64_t)__p[1];
        }
        if (v61)
        {
          int v62 = operator new(0x3280uLL);
          v62[1] = 0;
          v62[2] = 0;
          *int v62 = off_26C215950;
          uint64_t v62[3] = off_26C1FF6A8;
          EncoderDecoder::EncoderDecoder((uint64_t)(v62 + 4), 0.1, (uint64_t)__p, 100);
        }
        uint64_t v63 = operator new(0x38uLL);
        v63[1] = 0;
        void v63[2] = 0;
        *uint64_t v63 = off_26C215CD0;
        v63[5] = 0;
        v63[6] = 0;
        v63[3] = off_26C200C68;
        v63[4] = 0;
        unint64_t v64 = *(std::__shared_weak_count **)(v6 + 376);
        *(void *)(v6 + 368) = v63 + 3;
        *(void *)(v6 + 376) = v63;
        if (v64) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v64);
        }
        uint64_t v65 = FrontendEnvironment::get_shared_component_instance<TranslatePhonemes>(v11);
        uint64_t v172 = (long long *)(v6 + 320);
        __int16 v66 = *(void **)(v6 + 368);
        double v67 = operator new(0x28uLL);
        __int16 v68 = v67;
        v67[1] = 0;
        void v67[2] = 0;
        *double v67 = off_26C216168;
        double v69 = v67 + 3;
        v67[3] = &off_26C201368;
        v67[4] = v65;
        unint64_t v70 = v66[3];
        double v71 = (void *)v66[2];
        if ((unint64_t)v71 >= v70)
        {
          uint64_t v72 = v66[1];
          uint64_t v73 = ((uint64_t)v71 - v72) >> 4;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v75 = v70 - v72;
          if (v75 >> 3 > v74) {
            unint64_t v74 = v75 >> 3;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v74;
          }
          uint64_t v184 = v66 + 3;
          uint64_t v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v76);
          *(void *)&long long v78 = v69;
          *((void *)&v78 + 1) = v68;
          uint64_t v79 = &v77[16 * v73];
          *(void *)std::__split_buffer<std::string> buf = v77;
          *(void *)&uint8_t buf[8] = v79;
          char v183 = &v77[16 * v80];
          *(_OWORD *)uint64_t v79 = v78;
          *(void *)&uint8_t buf[16] = v79 + 16;
          std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v66 + 1, buf);
          uint64_t v81 = v66[2];
          std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
          v66[2] = v81;
          __int16 v66 = *(void **)(v6 + 368);
        }
        else
        {
          *double v71 = v69;
          v71[1] = v67;
          v66[2] = v71 + 2;
        }
        uint64_t v82 = a1;
        unint64_t v83 = (char *)operator new(0x40uLL);
        *(_OWORD *)(v83 + 8) = 0u;
        *(void *)unint64_t v83 = off_26C217908;
        *((void *)v83 + 3) = off_26C203D20;
        *((void *)v83 + 4) = 0;
        uint64_t v84 = (void **)(v83 + 32);
        *(_OWORD *)(v83 + 40) = 0u;
        int v85 = *(unsigned __int8 *)(v11 + 47);
        if (*(char *)(v11 + 47) < 0)
        {
          uint64_t v87 = *(void *)(v11 + 32);
          if (!v87) {
            goto LABEL_95;
          }
          if (v87 != 8)
          {
LABEL_82:
            unint64_t v166 = v7;
            if ((v85 & 0x80u) == 0) {
              size_t v88 = *(unsigned __int8 *)(v11 + 47);
            }
            else {
              size_t v88 = *(void *)(v11 + 32);
            }
            unint64_t v89 = buf;
            std::string::basic_string[abi:ne180100]((uint64_t)buf, v88 + 9);
            if (buf[23] < 0) {
              unint64_t v89 = *(unsigned char **)buf;
            }
            if (v88)
            {
              if (*(char *)(v11 + 47) >= 0) {
                uint64_t v90 = (const void *)(v11 + 24);
              }
              else {
                uint64_t v90 = *(const void **)(v11 + 24);
              }
              memmove(v89, v90, v88);
            }
            strcpy(&v89[v88], "-internal");
            if (v83[55] < 0) {
              operator delete(*v84);
            }
            *(_OWORD *)uint64_t v84 = *(_OWORD *)buf;
            *((void *)v83 + 6) = *(void *)&buf[16];
            unint64_t v7 = v166;
            uint64_t v91 = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>(v11);
            goto LABEL_96;
          }
          int v86 = *(void **)(v11 + 24);
        }
        else
        {
          if (!*(unsigned char *)(v11 + 47)) {
            goto LABEL_95;
          }
          int v86 = (void *)(v11 + 24);
          if (v85 != 8) {
            goto LABEL_82;
          }
        }
        if (*v86 != 0x6C616E7265746E69) {
          goto LABEL_82;
        }
LABEL_95:
        uint64_t v91 = 0;
LABEL_96:
        *((void *)v83 + 7) = v91;
        unint64_t v92 = v66[3];
        uint64_t v93 = (void *)v66[2];
        a1 = v82;
        if ((unint64_t)v93 >= v92)
        {
          uint64_t v95 = v66[1];
          uint64_t v96 = ((uint64_t)v93 - v95) >> 4;
          unint64_t v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v98 = v92 - v95;
          if (v98 >> 3 > v97) {
            unint64_t v97 = v98 >> 3;
          }
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v97;
          }
          uint64_t v184 = v66 + 3;
          unint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v99);
          *(void *)&long long v101 = v83 + 24;
          *((void *)&v101 + 1) = v83;
          std::chrono::steady_clock::time_point v102 = &v100[16 * v96];
          *(void *)std::__split_buffer<std::string> buf = v100;
          *(void *)&uint8_t buf[8] = v102;
          char v183 = &v100[16 * v103];
          *(_OWORD *)std::chrono::steady_clock::time_point v102 = v101;
          *(void *)&uint8_t buf[16] = v102 + 16;
          std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v66 + 1, buf);
          uint64_t v94 = (void *)v66[2];
          std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *uint64_t v93 = v83 + 24;
          v93[1] = v83;
          uint64_t v94 = v93 + 2;
        }
        v66[2] = v94;
        double v104 = operator new(0x40uLL);
        v104[1] = 0;
        v104[2] = 0;
        *double v104 = off_26C2161A0;
        uint64_t v105 = *(void *)(v6 + 320);
        int v106 = *(std::__shared_weak_count **)(v6 + 328);
        unint64_t v8 = v169;
        if (v106) {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v108 = *(void *)(v6 + 352);
        uint64_t v107 = *(std::__shared_weak_count **)(v6 + 360);
        if (v107) {
          atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v104[3] = off_26C2013B0;
        v104[4] = v105;
        v104[5] = v106;
        if (v106) {
          atomic_fetch_add_explicit(&v106->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v104[6] = v108;
        v104[7] = v107;
        if (v107)
        {
          atomic_fetch_add_explicit(&v107->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v107);
        }
        if (v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v106);
        }
        *(void *)&long long v109 = v104 + 3;
        *((void *)&v109 + 1) = v104;
        float v110 = *(std::__shared_weak_count **)(v6 + 392);
        *(_OWORD *)(v6 + 384) = v109;
        if (v110) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v110);
        }
        uint64_t v111 = operator new(0x38uLL);
        v111[1] = 0;
        _OWORD v111[2] = 0;
        *uint64_t v111 = off_26C215CD0;
        uint64_t v112 = v111 + 3;
        v111[5] = 0;
        v111[6] = 0;
        v111[3] = off_26C200C68;
        v111[4] = 0;
        int v113 = *(std::__shared_weak_count **)(v6 + 408);
        *(void *)(v6 + 400) = v111 + 3;
        *(void *)(v6 + 408) = v111;
        if (v113)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          uint64_t v112 = *(void **)(v6 + 400);
        }
        if (*(void *)v172)
        {
          unint64_t v114 = v112[3];
          uint64_t v115 = (void *)v112[2];
          if ((unint64_t)v115 >= v114)
          {
            uint64_t v118 = v112[1];
            uint64_t v119 = ((uint64_t)v115 - v118) >> 4;
            unint64_t v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v121 = v114 - v118;
            if (v121 >> 3 > v120) {
              unint64_t v120 = v121 >> 3;
            }
            if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v122 = v120;
            }
            uint64_t v184 = v112 + 3;
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v122);
            int v124 = &v123[16 * v119];
            *(void *)std::__split_buffer<std::string> buf = v123;
            *(void *)&uint8_t buf[8] = v124;
            char v183 = &v123[16 * v125];
            long long v126 = *v172;
            *(_OWORD *)int v124 = *v172;
            if (*((void *)&v126 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v126 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&uint8_t buf[16] = v124 + 16;
            std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v112 + 1, buf);
            int v117 = (void *)v112[2];
            std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *uint64_t v115 = *(void *)v172;
            uint64_t v116 = *(void *)(v6 + 328);
            v115[1] = v116;
            if (v116) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
            }
            int v117 = v115 + 2;
            v112[2] = v115 + 2;
          }
          v112[2] = v117;
          uint64_t v112 = *(void **)(v6 + 400);
        }
        uint64_t v127 = v179;
        if ((v179 & 0x80u) != 0) {
          uint64_t v127 = v178;
        }
        if (v127)
        {
          std::allocate_shared[abi:ne180100]<PronounceAffix,std::allocator<PronounceAffix>,std::string &,std::shared_ptr<PronSourceList> &,void>(&v174, (uint64_t)&v177, (uint64_t)v112, *(std::__shared_weak_count **)(v6 + 408));
          int v128 = *(void **)(v6 + 400);
          long long v129 = v174;
          if (*((void *)&v174 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v174 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v130 = v128[3];
          int v131 = (_OWORD *)v128[2];
          if ((unint64_t)v131 >= v130)
          {
            long long v173 = v129;
            uint64_t v133 = v128[1];
            uint64_t v134 = ((uint64_t)v131 - v133) >> 4;
            if ((unint64_t)(v134 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v135 = v130 - v133;
            uint64_t v136 = v135 >> 3;
            if (v135 >> 3 <= (unint64_t)(v134 + 1)) {
              uint64_t v136 = v134 + 1;
            }
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v137 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v137 = v136;
            }
            uint64_t v184 = v128 + 3;
            uint64_t v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v137);
            uint64_t v139 = &v138[16 * v134];
            *(void *)std::__split_buffer<std::string> buf = v138;
            *(void *)&uint8_t buf[8] = v139;
            char v183 = &v138[16 * v140];
            *(_OWORD *)uint64_t v139 = v173;
            *(void *)&uint8_t buf[16] = v139 + 16;
            std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v128 + 1, buf);
            uint64_t v132 = (_OWORD *)v128[2];
            std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *int v131 = v129;
            uint64_t v132 = v131 + 1;
            v128[2] = v132;
          }
          v128[2] = v132;
          if (*((void *)&v174 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v174 + 1));
          }
          uint64_t v112 = *(void **)(v6 + 400);
        }
        long long v141 = operator new(0x38uLL);
        v141[1] = 0;
        v141[2] = 0;
        *long long v141 = off_26C215D40;
        uint64_t v143 = *(void *)(v6 + 384);
        uint64_t v142 = *(std::__shared_weak_count **)(v6 + 392);
        if (v142) {
          atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v144 = *(void *)(v6 + 416);
        v141[3] = off_26C200CF8;
        v141[4] = v143;
        v141[5] = v142;
        if (v142)
        {
          atomic_fetch_add_explicit(&v142->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v141[6] = v144;
          std::__shared_weak_count::__release_shared[abi:ne180100](v142);
        }
        else
        {
          v141[6] = v144;
        }
        unint64_t v145 = v112[3];
        int v146 = (void *)v112[2];
        if ((unint64_t)v146 >= v145)
        {
          uint64_t v148 = v112[1];
          uint64_t v149 = ((uint64_t)v146 - v148) >> 4;
          unint64_t v150 = v149 + 1;
          if ((unint64_t)(v149 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v151 = v145 - v148;
          if (v151 >> 3 > v150) {
            unint64_t v150 = v151 >> 3;
          }
          if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v152 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v152 = v150;
          }
          uint64_t v184 = v112 + 3;
          uint64_t v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v152);
          *(void *)&long long v154 = v141 + 3;
          *((void *)&v154 + 1) = v141;
          int v155 = &v153[16 * v149];
          *(void *)std::__split_buffer<std::string> buf = v153;
          *(void *)&uint8_t buf[8] = v155;
          char v183 = &v153[16 * v156];
          *(_OWORD *)int v155 = v154;
          *(void *)&uint8_t buf[16] = v155 + 16;
          std::vector<std::shared_ptr<PronSource>>::__swap_out_circular_buffer(v112 + 1, buf);
          long long v147 = (void *)v112[2];
          std::__split_buffer<std::shared_ptr<Module>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *int v146 = v141 + 3;
          v146[1] = v141;
          long long v147 = v146 + 2;
        }
        v112[2] = v147;
        if ((char)v176 < 0) {
          operator delete(__p[0]);
        }
        if ((char)v179 < 0) {
          operator delete(v177);
        }
        goto LABEL_169;
      }
    }
    else
    {
      int v17 = (void *)(*(void *)(v6 + 352) + 8);
    }
    atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_15;
  }
LABEL_169:
  if (v181) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v181);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v157 = (void *)(a1 + 8);
  double v158 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v159 = a1;
    int v160 = *(char *)(a1 + 31);
    uint64_t v161 = (void *)(a1 + 8);
    if (v160 < 0) {
      uint64_t v161 = (void *)*v157;
    }
    v162.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v161;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v162.__d_.__rep_ - v168.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v158, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a1 = v159;
  }
  if (*(char *)(a1 + 31) < 0) {
    int v157 = (void *)*v157;
  }
  v163.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v164, v157, (double)((v163.__d_.__rep_ - v168.__d_.__rep_) / 1000000) / 1000.0);
  if (v169) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v169);
  }
  result.n128_u64[0] = v7;
  result.n128_u64[1] = v6;
  *uint64_t v167 = result;
  return result;
}

void sub_20D2D3FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PersistentModule *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  uint64_t v37 = (std::__shared_weak_count *)v33[17].__vftable;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  shared_owners = (std::__shared_weak_count *)v33[16].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v33[15].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  unint64_t v40 = (std::__shared_weak_count *)v33[15].__vftable;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v41 = (std::__shared_weak_count *)v33[14].__shared_owners_;
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  unint64_t v42 = (std::__shared_weak_count *)v33[13].__shared_weak_owners_;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  PersistentModule::~PersistentModule(v35);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v43);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PronouncePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronouncePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronouncePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213F10;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213F10;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D43B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213F10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronouncePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213F10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v16 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x140uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218548;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C2050D0;
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = (void *)(a1 + 8);
  uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a3;
    unint64_t v12 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v12 = (void *)*v9;
    }
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    unint64_t v18 = v12;
    __int16 v19 = 2048;
    double v20 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v11;
  }
  if (*(char *)(a1 + 31) < 0) {
    std::string v9 = (void *)*v9;
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v14, v9, (double)((v13.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D4700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ClassifySentencePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ClassifySentencePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ClassifySentencePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2148B0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2148B0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D48F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2148B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ClassifySentencePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2148B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  long long v21 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x150uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C217978;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v21 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = off_26C203D80;
  v7[41] = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init PhrasingPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PhrasingPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(&v22, v21);
  if (v22)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(v22 + 96) + 32))(buf);
    uint64_t v11 = operator new(0x3278uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *uint64_t v11 = off_26C215C60;
    EncoderDecoder::EncoderDecoder((uint64_t)(v11 + 3), 0.1, (uint64_t)buf, 100);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v12 = (void *)(a1 + 8);
  std::chrono::steady_clock::time_point v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v14 = v8;
    std::chrono::steady_clock::time_point v15 = a3;
    long long v16 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v16 = (void *)*v12;
    }
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v16;
    __int16 v25 = 2048;
    double v26 = (double)((v17.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v15;
    unint64_t v8 = v14;
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v12 = (void *)*v12;
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v19, v12, (double)((v18.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D4D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  shared_weak_owners = (std::__shared_weak_count *)v19[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v21);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v26);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PhrasingPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PhrasingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PhrasingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213E08;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213E08;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D4FE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213E08;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PhrasingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213E08;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v27 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x158uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218120;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v27 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = off_26C204A40;
  v7[41] = 0;
  double v26 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init PartOfSpeechPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PartOfSpeechPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(&v28, v27);
  if (v28)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(v28 + 96) + 16))(buf);
    uint64_t v11 = (char *)operator new(0xE0uLL);
    unint64_t v12 = v11;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)uint64_t v11 = off_26C218EE8;
    *(_OWORD *)(v11 + 24) = 0u;
    std::chrono::steady_clock::time_point v13 = v11 + 24;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    uint64_t v14 = *(void *)&buf[8];
    *((void *)v11 + 9) = *(void *)buf;
    *((void *)v11 + 10) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    long long v15 = *(_OWORD *)&buf[16];
    *(_OWORD *)(v11 + 200) = 0uLL;
    *(_OWORD *)(v11 + 88) = v15;
    *(_OWORD *)(v11 + 152) = 0uLL;
    *(_OWORD *)(v11 + 168) = 0uLL;
    *(_OWORD *)(v11 + 184) = 0uLL;
    *((void *)v11 + 27) = 0;
    uint64_t v16 = *((void *)v11 + 11);
    *((void *)v11 + 13) = v16;
    *((void *)v11 + 14) = v16 + *(unsigned int *)(v16 + 16);
    *((void *)v11 + 15) = v16 + *(unsigned int *)(v16 + 20);
    *((void *)v11 + 16) = v16 + *(unsigned int *)(v16 + 24);
    *((void *)v11 + 17) = v16 + *(unsigned int *)(v16 + 28);
    *((void *)v11 + 18) = v16 + *(unsigned int *)(v16 + 32);
    std::vector<int>::resize((std::vector<int> *)(v11 + 200), *(unsigned __int8 *)(v16 + 4));
    *(void *)&long long v17 = v13;
    *((void *)&v17 + 1) = v12;
    std::chrono::steady_clock::time_point v18 = (std::__shared_weak_count *)v7[41];
    *((_OWORD *)v7 + 20) = v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    v7[42] = 3;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  __int16 v19 = (void *)(a1 + 8);
  double v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    long long v21 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v21 = (void *)*v19;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v22.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    __int16 v19 = (void *)*v19;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v19, (double)((v23.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *double v26 = result;
  return result;
}

void sub_20D2D54F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  double v26 = *v23;
  if (*v23)
  {
    *(void *)(v21 + 208) = v26;
    operator delete(v26);
  }
  if (*(char *)(v21 + 199) < 0) {
    operator delete(*(void **)(v21 + 176));
  }
  if (*(char *)(v21 + 175) < 0) {
    operator delete(*v24);
  }
  long long v27 = *(std::__shared_weak_count **)(v21 + 80);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::deque<std::string>::~deque[abi:ne180100](v22);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v21);
  operator delete(v28);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  shared_weak_owners = (std::__shared_weak_count *)v18[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v30);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PartOfSpeechPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PartOfSpeechPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PartOfSpeechPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214438;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214438;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D5784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214438;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PartOfSpeechPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214438;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v19 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x140uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C217BA8;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C204178;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init PunctuatePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init PunctuatePersistentModule", v10);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  unint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v13 = a3;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    double v23 = (double)((v15.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D5B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PunctuatePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PunctuatePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PunctuatePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213F68;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213F68;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D5D38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213F68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PunctuatePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213F68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v22 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x150uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C217B38;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v22 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = off_26C204080;
  v7[41] = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init NormalizePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init NormalizePersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v22);
  uint64_t v11 = *(const FrontendEnvironment **)buf;
  if (*(void *)buf)
  {
    unint64_t v12 = operator new(0x98uLL);
    v12[1] = 0;
    void v12[2] = 0;
    *unint64_t v12 = off_26C216520;
    NormalizerEngine::NormalizerEngine((NormalizerEngine *)(v12 + 3), v11);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v13 = (void *)(a1 + 8);
  uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v15 = v8;
    std::chrono::steady_clock::time_point v16 = a3;
    long long v17 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v17 = (void *)*v13;
    }
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v18.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v16;
    unint64_t v8 = v15;
  }
  if (*(char *)(a1 + 31) < 0) {
    std::chrono::steady_clock::time_point v13 = (void *)*v13;
  }
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v20, v13, (double)((v19.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  shared_weak_owners = (std::__shared_weak_count *)v13[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v20);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NormalizePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NormalizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NormalizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213EB8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213EB8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D63B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213EB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213EB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v30 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x198uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218200;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  *(void *)(v7 + 296) = 0;
  *(void *)(v7 + 304) = 0;
  *(void *)(v7 + 312) = 0;
  *(void *)(v7 + 24) = off_26C204C18;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(void *)(v7 + 352) = 0;
  uint64_t v29 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init OverrideRulesPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init OverrideRulesPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(&v31, v30);
  uint64_t v11 = v31;
  if (v31)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(v31 + 96) + 16))(buf);
    uint64_t v13 = *(void *)buf;
    uint64_t v12 = *(void *)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v7 + 328);
    *(void *)(v7 + 320) = v13;
    *(void *)(v7 + 328) = v12;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    *(_OWORD *)(v7 + 336) = *(_OWORD *)&buf[16];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (*(void *)(v7 + 320))
    {
      MemoryMap::madvise(*(MemoryMap **)(v7 + 336), *(void *)(v7 + 344), 1);
      unint64_t v15 = *(unsigned int **)(v7 + 336);
      *(void *)(v7 + 352) = v15;
      if (*(unsigned __int16 *)v15 >= 3u)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)buf, "Override rules version %d.%d is incompatible with code version %d.%d", **(unsigned __int16 **)(v7 + 352), *(unsigned __int16 *)(*(void *)(v7 + 352) + 2), 2, 0);
        MEMORY[0x210558D40](exception, buf);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      *(void *)(v7 + 360) = (char *)v15 + v15[2];
      *(void *)(v7 + 368) = (char *)v15 + v15[3];
      *(void *)(v7 + 376) = (char *)v15 + v15[4];
      *(void *)(v7 + 384) = (char *)v15 + v15[5];
      uint64_t v16 = *(void *)(v11 + 184);
      *(void *)(v7 + 392) = FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v16);
      std::chrono::steady_clock::time_point v18 = *(void **)(v16 + 168);
      long long v17 = (void *)(v16 + 168);
      {
        *(void *)std::__split_buffer<std::string> buf = &v33;
        operator new();
      }
      if (v17 == v19) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v19[5] + 8;
      }
      *(void *)(v7 + 400) = v20;
    }
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v21 = (void *)(a1 + 8);
  long long v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    double v23 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v23 = (void *)*v21;
    }
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v24.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v21 = (void *)*v21;
  }
  v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v26, v21, (double)((v25.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *uint64_t v29 = result;
  return result;
}

void sub_20D2D69C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      if (a19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a19);
      }
      shared_weak_owners = (std::__shared_weak_count *)v26[13].__shared_weak_owners_;
      if (shared_weak_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
      }
      PersistentModule::~PersistentModule(v28);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      std::__shared_weak_count::~__shared_weak_count(v26);
      operator delete(v33);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void sub_20D2D6A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x20D2D6A58);
  }
  JUMPOUT(0x20D2D6A50);
}

uint64_t std::__shared_ptr_emplace<OverrideRulesPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<OverrideRulesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<OverrideRulesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214598;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214598;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D6C28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214598;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<OverrideRulesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214598;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  long long v38 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x150uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C2179E8;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v38 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  v7[3] = off_26C203E38;
  v7[41] = 0;
  uint64_t v37 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init TokenizePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init TokenizePersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(&v39, v38);
  uint64_t v11 = v39;
  if (v39)
  {
    uint64_t v12 = (char *)operator new(0x88uLL);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)uint64_t v12 = off_26C216328;
    std::string::basic_string[abi:ne180100]<0>((void *)v12 + 3, &byte_20D5A22AE);
    *((void *)v12 + 12) = 0;
    *((void *)v12 + 10) = 0;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    v12[88] = 1;
    *((void *)v12 + 13) = 0;
    *((void *)v12 + 14) = 0;
    *(_DWORD *)(v12 + 89) = 0;
    UTFTransliterator::UTFTransliterator((uint64_t *)v12 + 15, (char *)L"AlphaNorm", (char *)aFullwidthHalfw);
    UTFTransliterator::UTFTransliterator((uint64_t *)v12 + 16, "N", (char *)aFullwidthHalfw_0);
    int v13 = *(char *)(v11 + 23);
    if (v13 < 0)
    {
      if (*(void *)(v11 + 8) != 5) {
        goto LABEL_67;
      }
      std::chrono::steady_clock::time_point v18 = *(_DWORD **)v11;
      if (**(_DWORD **)v11 == 1429040741 && *(unsigned char *)(*(void *)v11 + 4) == 83) {
        goto LABEL_50;
      }
      if (*v18 == 1177383526 && *((unsigned char *)v18 + 4) == 82) {
        goto LABEL_50;
      }
      if (*v18 == 1160606565 && *((unsigned char *)v18 + 4) == 83) {
        goto LABEL_50;
      }
      if (*v18 == 1395488371 && *((unsigned char *)v18 + 4) == 69) {
        goto LABEL_50;
      }
    }
    else
    {
      if (v13 != 5) {
        goto LABEL_67;
      }
      BOOL v14 = *(_DWORD *)v11 == 1429040741 && *(unsigned char *)(v11 + 4) == 83;
      if (v14
        || (*(_DWORD *)v11 == 1177383526 ? (BOOL v15 = *(unsigned char *)(v11 + 4) == 82) : (BOOL v15 = 0),
            v15
         || (*(_DWORD *)v11 == 1160606565 ? (BOOL v16 = *(unsigned char *)(v11 + 4) == 83) : (BOOL v16 = 0),
             v16
          || (*(_DWORD *)v11 == 1395488371 ? (BOOL v17 = *(unsigned char *)(v11 + 4) == 69) : (BOOL v17 = 0), v18 = (_DWORD *)v11, v17))))
      {
LABEL_50:
        *(void *)&long long v26 = v12 + 24;
        *((void *)&v26 + 1) = v12;
        long long v27 = (std::__shared_weak_count *)v7[41];
        *((_OWORD *)v7 + 20) = v26;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        goto LABEL_52;
      }
    }
    int v23 = *v18;
    int v24 = *((unsigned __int8 *)v18 + 4);
    if (v23 != 1227714149 || v24 != 78)
    {
LABEL_67:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      if (*(char *)(v11 + 23) >= 0) {
        uint64_t v36 = (const char *)v11;
      }
      else {
        uint64_t v36 = *(const char **)v11;
      }
      MEMORY[0x210558D40](exception, buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    goto LABEL_50;
  }
LABEL_52:
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v28 = (void *)(a1 + 8);
  uint64_t v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v30 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v30 = (void *)*v28;
    }
    v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    unint64_t v42 = v30;
    __int16 v43 = 2048;
    double v44 = (double)((v31.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v28 = (void *)*v28;
  }
  v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v33, v28, (double)((v32.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *uint64_t v37 = result;
  return result;
}

void sub_20D2D7274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, UTFTransliterator *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      UTFTransliterator::~UTFTransliterator(v30);
      UTFTransliterator::~UTFTransliterator(a13);
      if (*(char *)(v25 + 119) < 0) {
        operator delete(*v27);
      }
      if (*(char *)(v25 + 47) < 0) {
        operator delete(*v28);
      }
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v25);
      operator delete(v32);
      if (a16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a16);
      }
      shared_weak_owners = (std::__shared_weak_count *)v22[13].__shared_weak_owners_;
      if (shared_weak_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
      }
      PersistentModule::~PersistentModule(v24);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      std::__shared_weak_count::~__shared_weak_count(v22);
      operator delete(v34);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void sub_20D2D7354()
{
  if (!v0) {
    JUMPOUT(0x20D2D7334);
  }
  JUMPOUT(0x20D2D732CLL);
}

void sub_20D2D7360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x20D2D734CLL);
  }
  JUMPOUT(0x20D2D7344);
}

uint64_t std::__shared_ptr_emplace<TokenizePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TokenizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2179E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TokenizePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2179E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213E60;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213E60;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D7528(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213E60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TokenizePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213E60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v24 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x150uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218388;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C204E98;
  int v23 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init SwitchLanguagePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init SwitchLanguagePersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v24);
  if (*(void *)buf)
  {
    uint64_t v11 = *(void *)(*(void *)buf + 184);
    v7[40] = FrontendEnvironment::get_shared_component_instance<EnvironmentBroker>(v11);
    int v13 = *(void **)(v11 + 168);
    uint64_t v12 = (void *)(v11 + 168);
    {
      long long v26 = &v25;
      operator new();
    }
    if (v12 == v14) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14[5] + 8;
    }
    v7[41] = v15;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  BOOL v16 = (void *)(a1 + 8);
  BOOL v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v18 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v18 = (void *)*v16;
    }
    v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v19.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    BOOL v16 = (void *)*v16;
  }
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v21, v16, (double)((v20.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *int v23 = result;
  return result;
}

void sub_20D2D79F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  PersistentModule::~PersistentModule(v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v21);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SwitchLanguagePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SwitchLanguagePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SwitchLanguagePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214750;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214750;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D7C0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214750;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SwitchLanguagePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214750;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v19 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x150uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C217240;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C2030C0;
  DetectSSML::instance((uint64_t)(v7 + 40));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init ParsePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init ParsePersistentModule", v10);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v13 = a3;
    BOOL v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    double v23 = (double)((v15.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2D7FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  PersistentModule::~PersistentModule(v13);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v15);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ParsePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ParsePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ParsePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213CA8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213CA8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D81D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213CA8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParsePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213CA8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v8 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  std::chrono::steady_clock::now();
  double v4 = operator new(0x178uLL);
  std::chrono::steady_clock::time_point v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *double v4 = off_26C218040;
  if (*((void *)&v8 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v4 + 3, a2, v8, *((std::__shared_weak_count **)&v8 + 1));
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  v5[3] = off_26C2048D8;
  *((_OWORD *)v5 + 20) = 0u;
  *((_OWORD *)v5 + 21) = 0u;
  *((_OWORD *)v5 + 22) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "Hydra Init HydraAdapterPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "Hydra Init HydraAdapterPersistentModule", v7);
  operator new();
}

void sub_20D2D8808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::chrono::steady_clock::time_point v32 = (std::__shared_weak_count *)v28[15].__vftable;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  shared_owners = (std::__shared_weak_count *)v28[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v28[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v30);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v35);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<HydraAdapterPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HydraAdapterPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<HydraAdapterPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214388;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214388;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D8B0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214388;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraAdapterPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214388;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  std::chrono::steady_clock::now();
  long long v3 = operator new(0x208uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = off_26C217F60;
  *(_OWORD *)std::__split_buffer<std::string> buf = v4;
  if (*((void *)&v4 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PronounceNNPersistentModule::PronounceNNPersistentModule((uint64_t)(v3 + 3), buf);
}

void sub_20D2D8E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PronounceNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PronounceNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PronounceNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214280;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214280;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D9034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214280;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PronounceNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214280;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  long long v47 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v6 = operator new(0x178uLL);
  unint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = off_26C217F28;
  long long v8 = v6 + 3;
  if (*((void *)&v47 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C204700;
  *((_OWORD *)v7 + 20) = 0u;
  *((_OWORD *)v7 + 21) = 0u;
  *((_OWORD *)v7 + 22) = 0u;
  v7[46] = 0;
  long long v46 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v9 = v47;
  uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "FE Init NormalizeNNPersistentModule", (uint8_t *)&buf, 2u);
  }
  uint64_t v48 = (void **)(v7 + 44);
  Diagnostics::log(6, "FE Init NormalizeNNPersistentModule", v11);
  SharedObjectPool::get_if<FrontendEnvironment>(&v58, v9);
  uint64_t v12 = v58;
  if (v58)
  {
    int v13 = operator new(0x30uLL);
    v13[1] = 0;
    unint64_t v13[2] = 0;
    *int v13 = off_26C2195B0;
    void v13[5] = 0;
    v13[4] = 0;
    void v13[3] = v13 + 4;
    BOOL v14 = (std::__shared_weak_count *)v7[41];
    v7[40] = v13 + 3;
    v7[41] = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    uint64_t v15 = *(void *)(v12 + 96);
    std::string::basic_string[abi:ne180100]<0>(&buf, &byte_20D5A22AE);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, uint64_t))(*(void *)v15 + 48))(v56, v15, 1852731506, &buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::chrono::steady_clock::time_point v16 = (uint64_t ***)(v7 + 40);
    unint64_t v17 = v57;
    if ((v57 & 0x80u) != 0) {
      unint64_t v17 = (unint64_t)v56[1];
    }
    if (v17)
    {
      FastRewriter::create(&__p, (uint64_t)v56);
      (*(void (**)(void *))(*(void *)__p + 24))(__p);
      std::chrono::steady_clock::time_point v18 = *v16;
      std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&buf, (long long *)v12, (std::string::size_type *)&__p);
      std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v18, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
    }
    long long v19 = *(long long ***)(v12 + 72);
    if (v19)
    {
      std::chrono::steady_clock::time_point v20 = *v19;
      uint64_t v21 = v19[1];
      while (v20 != v21)
      {
        (*(void (**)(void **__return_ptr))(**(void **)(v12 + 96) + 48))(&__p);
        __int16 v22 = (std::__shared_weak_count *)HIBYTE(v51);
        char v23 = HIBYTE(v51);
        if (v51 < 0) {
          __int16 v22 = v50;
        }
        if (v22)
        {
          FastRewriter::create(&v54, (uint64_t)&__p);
          (*(void (**)(std::string::size_type))(*(void *)v54 + 24))(v54);
          uint64_t v24 = *v16;
          std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&buf, v20, &v54);
          std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v24, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v55) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v55);
          }
          char v23 = HIBYTE(v51);
        }
        if (v23 < 0) {
          operator delete(__p);
        }
        std::chrono::steady_clock::time_point v20 = (long long *)((char *)v20 + 24);
      }
    }
    MEMORY[0x210558E70](v48, "breeze");
    int v25 = *(unsigned __int8 *)(v12 + 144);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(v12 + 144);
    buf.__r_.__value_.__r.__words[2] = 0;
    uint64_t v61 = 0;
    unint64_t v62 = 0x8000000000000000;
    if (v25 == 1)
    {
      uint64_t v27 = *(void *)(v12 + 152);
      buf.__r_.__value_.__l.__size_ = v27 + 8;
      buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v27, "normalize_nn");
      int v25 = *(unsigned __int8 *)(v12 + 144);
    }
    else
    {
      if (v25 == 2)
      {
        uint64_t v26 = *(void *)(v12 + 152);
        buf.__r_.__value_.__r.__words[2] = *(void *)(v26 + 8);
        std::string __p = (void *)(v12 + 144);
        unint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        unint64_t v53 = 0x8000000000000000;
        goto LABEL_45;
      }
      unint64_t v62 = 1;
    }
    std::string __p = (void *)(v12 + 144);
    unint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0x8000000000000000;
    if (v25 == 1)
    {
      unint64_t v50 = (std::__shared_weak_count *)(*(void *)(v12 + 152) + 8);
      goto LABEL_48;
    }
    if (v25 != 2)
    {
      unint64_t v53 = 1;
      goto LABEL_48;
    }
    uint64_t v26 = *(void *)(v12 + 152);
LABEL_45:
    uint64_t v51 = *(void *)(v26 + 8);
LABEL_48:
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__p))
    {
      int v28 = 100;
      float v29 = 0.5;
    }
    else
    {
      int v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v12 + 144), "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "max_seq_len");
      int v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v30, (const void **)&buf.__r_.__value_.__l.__data_, &NormalizeNNPersistentModule::MAX_SEQ_LEN);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::chrono::steady_clock::time_point v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v12 + 144), "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "chunk_size");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v31, (const void **)&buf.__r_.__value_.__l.__data_, &NormalizeNNPersistentModule::CHUNK_SIZE);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::chrono::steady_clock::time_point v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v12 + 144), "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "veto");
      float v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)v32, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&NormalizeNNPersistentModule::VETO_FACTOR);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      unint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v12 + 144), "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&buf, "beam");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v33, (const void **)&buf.__r_.__value_.__l.__data_, &NormalizeNNPersistentModule::BEAM);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      long long v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v12 + 144), "normalize_nn");
      std::string::basic_string[abi:ne180100]<0>(&__p, "model_framework");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("breeze", (char *)v34, (const void **)&__p, &buf);
      if (*((char *)v7 + 375) < 0) {
        operator delete(*v48);
      }
      *(_OWORD *)uint64_t v48 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      v7[46] = *((void *)&buf.__r_.__value_.__l + 2);
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
      buf.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(v12 + 96) + 32))(&buf);
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v36 = operator new(0x3278uLL);
      v36[1] = 0;
      v36[2] = 0;
      void *v36 = off_26C215B10;
      EncoderDecoder::EncoderDecoder((uint64_t)(v36 + 3), v29, (uint64_t)&buf, v28);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_20CD80000, v37, OS_LOG_TYPE_DEBUG, "No TN model loaded, assume it's in single model mode", (uint8_t *)&__p, 2u);
    }
    Diagnostics::log(7, "No TN model loaded, assume it's in single model mode", v38);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if ((char)v57 < 0) {
      operator delete(v56[0]);
    }
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v39 = (std::string::size_type *)(a1 + 8);
  unint64_t v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v41 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v41 = *v39;
    }
    v42.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v41;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v42.__d_.__rep_ - v5.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v39 = (std::string::size_type *)*v39;
  }
  v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v44, v39, (double)((v43.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
  *(void *)&long long v45 = v8;
  *((void *)&v45 + 1) = v7;
  *long long v46 = v45;
}

void sub_20D2D9A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (*(char *)(v39 + 375) < 0) {
    operator delete(*(void **)a13);
  }
  std::chrono::steady_clock::time_point v43 = *(std::__shared_weak_count **)(v39 + 344);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  double v44 = *(std::__shared_weak_count **)(v39 + 328);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  PersistentModule::~PersistentModule(v41);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v39);
  operator delete(v45);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NormalizeNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NormalizeNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NormalizeNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214228;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214228;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2D9DDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214228;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NormalizeNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214228;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  long long v50 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v49.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v5 = operator new(0x170uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)std::chrono::steady_clock::time_point v5 = off_26C218078;
  if (*((void *)&v50 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule((void *)v5 + 3, a2, v50, *((std::__shared_weak_count **)&v50 + 1));
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  *((void *)v5 + 3) = off_26C204948;
  *((_OWORD *)v5 + 20) = 0u;
  *((_OWORD *)v5 + 21) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "FE Init HydraUserDctPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init HydraUserDctPersistentModule", v7);
  SharedObjectPool::get_if<FrontendEnvironment>(&v55, v50);
  long long v8 = (std::__shared_weak_count *)*((void *)v5 + 41);
  *((void *)v5 + 40) = 0;
  *((void *)v5 + 41) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *((unsigned char *)v5 + 352) = 0;
  *((void *)v5 + 45) = 1;
  uint64_t v9 = operator new(0x30uLL);
  v9[1] = 0;
  v9[2] = 0;
  *uint64_t v9 = off_26C2195B0;
  v9[5] = 0;
  v9[4] = 0;
  v9[3] = v9 + 4;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 43);
  *((void *)v5 + 42) = v9 + 3;
  *((void *)v5 + 43) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = v55;
  if (v55)
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v55 + 96) + 32))(&v53);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v11 + 96) + 72))(&v51);
    uint64_t v12 = operator new(0x30uLL);
    v12[1] = 0;
    void v12[2] = 0;
    *uint64_t v12 = off_26C2198C0;
    v12[3] = 0;
    v12[4] = 0;
    v12[5] = 0;
    if ((_BYTE)v51) {
      operator new[]();
    }
    *(void *)&long long v13 = v12 + 3;
    *((void *)&v13 + 1) = v12;
    BOOL v14 = (std::__shared_weak_count *)*((void *)v5 + 41);
    *((_OWORD *)v5 + 20) = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    uint64_t v15 = (const void **)v55;
    unint64_t v17 = (unsigned __int8 *)(v55 + 144);
    int v16 = *(unsigned __int8 *)(v55 + 144);
    *(void *)std::string buf = v55 + 144;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v67 = 0;
    *(void *)&uint8_t buf[16] = 0;
    unint64_t v68 = 0x8000000000000000;
    if (v16 == 1)
    {
      uint64_t v19 = *(void *)(v55 + 152);
      *(void *)&uint8_t buf[8] = v19 + 8;
      *(void *)&uint8_t buf[8] = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v19, "pronounce_nn");
      int v16 = *((unsigned __int8 *)v15 + 144);
    }
    else
    {
      if (v16 == 2)
      {
        std::chrono::steady_clock::time_point v18 = *(void **)(v55 + 152);
        *(void *)&uint8_t buf[16] = v18[1];
        int v59 = (void *)(v55 + 144);
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        unint64_t v63 = 0x8000000000000000;
        goto LABEL_26;
      }
      unint64_t v68 = 1;
    }
    int v59 = v17;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    unint64_t v63 = 0x8000000000000000;
    if (v16 == 1)
    {
      uint64_t v60 = (uint64_t)v15[19] + 8;
      goto LABEL_29;
    }
    if (v16 != 2)
    {
      unint64_t v63 = 1;
      goto LABEL_29;
    }
    std::chrono::steady_clock::time_point v18 = v15[19];
LABEL_26:
    uint64_t v61 = v18[1];
LABEL_29:
    if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v59))
    {
      std::chrono::steady_clock::time_point v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "pronounce_nn");
      std::string::basic_string[abi:ne180100]<0>(buf, "embedded_lang");
      LOBYTE(v59) = 0;
      *((unsigned char *)v5 + 352) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)v20, (const void **)buf, (unsigned __int8 *)&v59);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (**((void **)v5 + 40) != *(void *)(*((void *)v5 + 40) + 8))
    {
      (*(void (**)(void **__return_ptr))(*(void *)v15[12] + 32))(&v59);
      uint64_t v21 = HIBYTE(v61);
      char v22 = HIBYTE(v61);
      if (v61 < 0) {
        uint64_t v21 = v60;
      }
      if (v21)
      {
        FastRewriter::create(v64, (uint64_t)&v59);
        uint64_t v23 = *(void *)v64;
        if (*(void *)v64)
        {
          (*(void (**)(void))(**(void **)v64 + 24))(*(void *)v64);
          uint64_t v24 = (uint64_t **)*((void *)v5 + 42);
          if (*((char *)v15 + 23) >= 0) {
            size_t v25 = *((unsigned __int8 *)v15 + 23);
          }
          else {
            size_t v25 = (size_t)v15[1];
          }
          uint64_t v26 = v57;
          std::string::basic_string[abi:ne180100]((uint64_t)v57, v25 + 5);
          if (v58 < 0) {
            uint64_t v26 = (void **)v57[0];
          }
          if (v25)
          {
            if (*((char *)v15 + 23) >= 0) {
              uint64_t v27 = v15;
            }
            else {
              uint64_t v27 = *v15;
            }
            memmove(v26, v27, v25);
          }
          strcpy((char *)v26 + v25, "_udct");
          *(_OWORD *)std::string buf = *(_OWORD *)v57;
          uint64_t v28 = v58;
          v57[1] = 0;
          uint64_t v58 = 0;
          v57[0] = 0;
          *(void *)&uint8_t buf[16] = v28;
          uint64_t v67 = v23;
          float v29 = v65;
          unint64_t v68 = (unint64_t)v65;
          if (v65) {
            atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v24, (const void **)buf, (uint64_t)buf);
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v68);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v58) < 0) {
            operator delete(v57[0]);
          }
        }
        else
        {
          float v29 = v65;
        }
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        char v22 = HIBYTE(v61);
      }
      if (v22 < 0) {
        operator delete(v59);
      }
    }
    *(void *)std::string buf = v17;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v67 = 0;
    *(void *)&uint8_t buf[16] = 0;
    unint64_t v68 = 0x8000000000000000;
    int v30 = *v17;
    if (v30 == 1)
    {
      std::chrono::steady_clock::time_point v32 = v15[19];
      unint64_t v33 = v32 + 1;
      *(void *)&uint8_t buf[8] = v32 + 1;
      uint64_t v34 = v32[1];
      if (!v34) {
        goto LABEL_71;
      }
      uint64_t v35 = v32 + 1;
      do
      {
        int v36 = std::string::compare((const std::string *)(v34 + 32), "hydra_udct");
        uint64_t v37 = (uint64_t *)(v34 + 8);
        if (v36 >= 0)
        {
          uint64_t v37 = (uint64_t *)v34;
          uint64_t v35 = (void *)v34;
        }
        uint64_t v34 = *v37;
      }
      while (*v37);
      if (v35 == v33 || std::string::compare((const std::string *)(v35 + 4), "hydra_udct") >= 1) {
LABEL_71:
      }
        uint64_t v35 = v33;
      *(void *)&uint8_t buf[8] = v35;
      uint64_t v15 = (const void **)v55;
      int v30 = *(unsigned __int8 *)(v55 + 144);
    }
    else
    {
      if (v30 == 2)
      {
        std::chrono::steady_clock::time_point v31 = v15[19];
        *(void *)&uint8_t buf[16] = v31[1];
        int v59 = v17;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        unint64_t v63 = 0x8000000000000000;
LABEL_77:
        uint64_t v61 = v31[1];
        goto LABEL_80;
      }
      unint64_t v68 = 1;
    }
    int v59 = v15 + 18;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    unint64_t v63 = 0x8000000000000000;
    if (v30 == 1)
    {
      uint64_t v60 = (uint64_t)v15[19] + 8;
    }
    else
    {
      if (v30 == 2)
      {
        std::chrono::steady_clock::time_point v31 = v15[19];
        goto LABEL_77;
      }
      unint64_t v63 = 1;
    }
LABEL_80:
    if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v59))
    {
      long long v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v15 + 144, "hydra_udct");
      std::string::basic_string[abi:ne180100]<0>(buf, "multiple_token_matching_window");
      LODWORD(v59) = 1;
      *((void *)v5 + 45) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v38, (const void **)buf, (unsigned int *)&v59);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51);
    if (v54 < 0) {
      operator delete(v53);
    }
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v39 = (void *)(a1 + 8);
  uint64_t v40 = a1;
  std::string::size_type v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v42 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v42 = (void *)*v39;
    }
    v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v42;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v43.__d_.__rep_ - v49.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v41, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    uint64_t v40 = a1;
  }
  if (*(char *)(v40 + 31) < 0) {
    uint64_t v39 = (void *)*v39;
  }
  v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v45, v39, (double)((v44.__d_.__rep_ - v49.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  result.n128_u64[0] = (unint64_t)v5 + 24;
  result.n128_u64[1] = (unint64_t)v5;
  *a4 = result;
  return result;
}

void sub_20D2DB428()
{
}

void sub_20D2DB434(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D2DB438);
  }
  __clang_call_terminate(a1);
}

void sub_20D2DB444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (STACK[0x410]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (STACK[0x3D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3D8]);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  JUMPOUT(0x20D2DB79CLL);
}

void sub_20D2DB4DC()
{
}

void sub_20D2DB4E4()
{
}

void sub_20D2DB4F0()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x20D2DB604);
}

void sub_20D2DB508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,unint64_t a27)
{
  STACK[0x3F0] = a26;
  *(unint64_t *)((char *)&STACK[0x3F0] + *(void *)(a26 - 24)) = a27;
  MEMORY[0x210558FE0](a18);
  std::istream::~istream();
  MEMORY[0x210559500](a15);
  JUMPOUT(0x20D2DB61CLL);
}

void sub_20D2DB5BC()
{
}

void sub_20D2DB5C4()
{
}

void sub_20D2DB5CC()
{
}

void sub_20D2DB5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v22)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
    JUMPOUT(0x20D2DB7F0);
  }
  JUMPOUT(0x20D2DB7F8);
}

void sub_20D2DB5E8()
{
}

void sub_20D2DB600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned __int8 a29,uint64_t *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  uint64_t v77 = *(std::__shared_weak_count **)(v72 + 64);
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v74, *(unsigned __int8 *)(v72 + 40));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v72);
  operator delete(v78);
  a72 = a26;
  *(uint64_t *)((char *)&a72 + *(void *)(a26 - 24)) = a27;
  MEMORY[0x210558FE0](v75);
  std::istream::~istream();
  MEMORY[0x210559500](v73);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a30, a29);
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a38);
  }
  shared_owners = (std::__shared_weak_count *)a14[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)a14[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(a21);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::~__shared_weak_count(a14);
  operator delete(v81);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<HydraUserDctPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HydraUserDctPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<HydraUserDctPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2143E0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2143E0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DB9CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2143E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<HydraUserDctPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2143E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v20 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v6 = (__n128 *)operator new(0x150uLL);
  unint64_t v7 = v6;
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)off_26C217400;
  unint64_t v8 = (unint64_t)&v6[1].n128_u64[1];
  if (*((void *)&v20 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)&v6[1].n128_i8[8]);
  v7[18].n128_u64[1] = 0;
  v7[19].n128_u64[0] = 0;
  v7[19].n128_u64[1] = 0;
  v7[20].n128_u64[0] = 0;
  v7[1].n128_u64[1] = (unint64_t)off_26C203510;
  v7[20].n128_u64[1] = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init MarkupPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init MarkupPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v20);
  ParseLegacy::create(&v21, 0, 0, *(uint64_t *)buf);
  uint64_t v11 = (std::__shared_weak_count *)v7[20].n128_u64[1];
  v7[20] = v21;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v12 = (void *)(a1 + 8);
  long long v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    BOOL v14 = a3;
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v12;
    }
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v16.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v14;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v12 = (void *)*v12;
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v18, v12, (double)((v17.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2DBDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  shared_weak_owners = (std::__shared_weak_count *)v15[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v20);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MarkupPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MarkupPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MarkupPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213D00;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213D00;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DBFFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213D00;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MarkupPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213D00;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v23 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  std::chrono::steady_clock::now();
  long long v4 = operator new(0x160uLL);
  std::chrono::steady_clock::time_point v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = off_26C2176D8;
  if (*((void *)&v23 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v4 + 3, a2, v23, *((std::__shared_weak_count **)&v23 + 1));
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  v5[3] = off_26C203A18;
  *((_OWORD *)v5 + 20) = 0u;
  *((_OWORD *)v5 + 21) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "FE Init RewritePersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "FE Init RewritePersistentModule", v7);
  SharedObjectPool::get_if<FrontendEnvironment>(&v31, v23);
  uint64_t v8 = v31;
  if (v31)
  {
    uint64_t v9 = operator new(0x30uLL);
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = off_26C2195B0;
    v9[5] = 0;
    v9[4] = 0;
    v9[3] = v9 + 4;
    uint64_t v10 = (std::__shared_weak_count *)v5[41];
    v5[40] = v9 + 3;
    v5[41] = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    (*(void (**)(void **__return_ptr))(**(void **)(v8 + 96) + 32))(v29);
    uint64_t v11 = (uint64_t ***)(v5 + 40);
    unint64_t v12 = v30;
    if ((v30 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v29[1];
    }
    if (v12)
    {
      FastRewriter::create(&v28, (uint64_t)v29);
      (*(void (**)(std::string::size_type))(*(void *)v28.__r_.__value_.__l.__data_ + 24))(v28.__r_.__value_.__r.__words[0]);
      long long v13 = *v11;
      std::pair<std::string const,std::shared_ptr<FastRewriter>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<FastRewriter>&,0>(&buf, (long long *)v8, (std::string::size_type *)&v28);
      std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v13, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v28.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
      }
    }
    BOOL v14 = *(long long ***)(v8 + 72);
    if (v14)
    {
      std::chrono::steady_clock::time_point v16 = *v14;
      uint64_t v15 = v14[1];
      if (*v14 != v15)
      {
        while (1)
        {
          if (*((char *)v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v16, *((void *)v16 + 1));
          }
          else
          {
            long long v17 = *v16;
            v28.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
          }
          (*(void (**)(void **__return_ptr))(**(void **)(v8 + 96) + 48))(__p);
          unint64_t v18 = v27;
          unsigned __int8 v19 = v27;
          if ((v27 & 0x80u) != 0) {
            unint64_t v18 = (unint64_t)__p[1];
          }
          if (!v18) {
            goto LABEL_40;
          }
          FastRewriter::create(&v24, (uint64_t)__p);
          uint64_t v20 = v24;
          (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
          __n128 v21 = *v11;
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          }
          else {
            std::string buf = v28;
          }
          uint64_t v22 = v25;
          uint64_t v33 = v20;
          uint64_t v34 = v25;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<FastRewriter>>>(v21, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&buf);
          if (v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            break;
          }
          if (v22) {
            goto LABEL_38;
          }
LABEL_39:
          unsigned __int8 v19 = v27;
LABEL_40:
          if ((v19 & 0x80) != 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
          std::chrono::steady_clock::time_point v16 = (long long *)((char *)v16 + 24);
          if (v16 == v15) {
            goto LABEL_48;
          }
        }
        operator delete(buf.__r_.__value_.__l.__data_);
        if (!v22) {
          goto LABEL_39;
        }
LABEL_38:
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        goto LABEL_39;
      }
    }
LABEL_48:
    if ((char)v30 < 0) {
      operator delete(v29[0]);
    }
  }
  operator new();
}

void sub_20D2DC704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 112);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  shared_owners = (std::__shared_weak_count *)v36[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v36[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(a11);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v43);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<RewritePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<RewritePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2176D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RewritePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2176D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213D58;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213D58;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DCA38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213D58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RewritePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213D58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v38 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  std::chrono::steady_clock::now();
  long long v4 = operator new(0x170uLL);
  std::chrono::steady_clock::time_point v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = off_26C217780;
  if (*((void *)&v38 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v4 + 3, a2, v38, *((std::__shared_weak_count **)&v38 + 1));
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  v5[3] = off_26C203B00;
  *((_OWORD *)v5 + 20) = 0u;
  *((_OWORD *)v5 + 21) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    buf.__r_.__value_.__s.__data_[0] = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "FE Init BreaksNNPersistentModule", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(6, "FE Init BreaksNNPersistentModule", v7);
  SharedObjectPool::get_if<FrontendEnvironment>(&v44, v38);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)v44 + 12) + 16))(&v40);
  if (!v40)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v34 = v44;
    uint64_t v35 = ubrk_open();
    v5[44] = v35;
    if (v35) {
      operator new();
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (v34[23] < 0) {
      uint64_t v34 = *(const char **)v34;
    }
    uint64_t v37 = u_errorName((UErrorCode)__p.__r_.__value_.__l.__data_);
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to open sentence break iterator of %s: %s", v34, v37);
    MEMORY[0x210558D40](exception, &buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v42;
  uint64_t v8 = v43;
  memset(&buf, 0, sizeof(buf));
  UTFRegex::UTFRegex((uint64_t)&regexp, (UChar *)L"\\s*([^#]+?)\\s*(?:#.*)?");
  if (!v9)
  {
LABEL_49:
    std::basic_string<char16_t>::append(&buf, (const std::basic_string<char16_t>::value_type *)")", 1uLL);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::basic_string<char16_t> buf = &buf;
    }
    else {
      p_std::basic_string<char16_t> buf = (std::basic_string<char16_t> *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v29 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v29 = buf.__r_.__value_.__r.__words[1];
    }
    UTFString::to_utf8(&__p, (const UChar *)p_buf, v29);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned __int8 v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(status.__r_.__value_.__l.__data_) = 136315138;
      *(std::basic_string<char16_t>::size_type *)((char *)status.__r_.__value_.__r.__words + 4) = (std::basic_string<char16_t>::size_type)p_p;
      _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_DEBUG, "Sentence break exceptions: %s", (uint8_t *)&status, 0xCu);
    }
    uint64_t v33 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(7, "Sentence break exceptions: %s", v31, v33);
    operator new();
  }
  uint64_t v10 = &v9[v8];
  while (1)
  {
    uint64_t v11 = memchr(v9, 10, v10 - v9);
    unint64_t v12 = v11;
    if (v11) {
      size_t v13 = v11 - v9;
    }
    else {
      size_t v13 = v10 - v9;
    }
    std::string::basic_string[abi:ne180100](&__p, v9, v13);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v14 = &__p;
    }
    else {
      BOOL v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::chrono::steady_clock::time_point v16 = utext_openUTF8(0, (const char *)v14, size, (UErrorCode *)&status);
    if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0) {
      long long v17 = v16;
    }
    else {
      long long v17 = 0;
    }
    UTFRegex::set_text((UTFRegex *)&regexp, v17, 1);
    LODWORD(status.__r_.__value_.__l.__data_) = 0;
    if (!uregex_matches(regexp, -1, (UErrorCode *)&status)) {
      goto LABEL_44;
    }
    std::basic_string<char16_t>::size_type v18 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::basic_string<char16_t>::size_type v18 = buf.__r_.__value_.__l.__size_;
    }
    if (v18)
    {
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v47, &regexp, 1);
      std::basic_string<char16_t>::insert(&v47, (std::basic_string<char16_t>::size_type)"|", (const std::basic_string<char16_t>::value_type *)1, v19);
      std::basic_string<char16_t> status = v47;
      memset(&v47, 0, sizeof(v47));
      int v20 = SHIBYTE(status.__r_.__value_.__r.__words[2]);
      __n128 v21 = (void *)status.__r_.__value_.__r.__words[0];
      if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::basic_string<char16_t> status = &status;
      }
      else {
        p_std::basic_string<char16_t> status = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
      }
      if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::basic_string<char16_t>::size_type v23 = HIBYTE(status.__r_.__value_.__r.__words[2]);
      }
      else {
        std::basic_string<char16_t>::size_type v23 = status.__r_.__value_.__l.__size_;
      }
      std::basic_string<char16_t>::append(&buf, (const std::basic_string<char16_t>::value_type *)p_status, v23);
      if (v20 < 0) {
        operator delete(v21);
      }
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      uint64_t v24 = (void *)v47.__r_.__value_.__r.__words[0];
    }
    else
    {
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&status, &regexp, 1);
      std::basic_string<char16_t>::insert(&status, (std::basic_string<char16_t>::size_type)"(", (const std::basic_string<char16_t>::value_type *)3, v25);
      v47.__r_.__value_.__r.__words[0] = status.__r_.__value_.__l.__size_;
      std::basic_string<char16_t>::size_type v26 = status.__r_.__value_.__r.__words[0];
      *(std::basic_string<char16_t>::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&status.__r_.__value_.__r.__words[1] + 7);
      char v27 = HIBYTE(status.__r_.__value_.__r.__words[2]);
      memset(&status, 0, sizeof(status));
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        buf.__r_.__value_.__r.__words[0] = v26;
        buf.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
        *(std::basic_string<char16_t>::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v27;
        goto LABEL_44;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
      buf.__r_.__value_.__r.__words[0] = v26;
      buf.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
      *(std::basic_string<char16_t>::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v27;
      if ((SHIBYTE(status.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      uint64_t v24 = (void *)status.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
LABEL_44:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = v12 + 1;
    if (!v12) {
      goto LABEL_49;
    }
  }
}

void sub_20D2DD438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, long long a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v38 - 169) < 0)
  {
    operator delete(*(void **)(v38 - 192));
    if ((v36 & 1) == 0)
    {
LABEL_6:
      if (a26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a26);
      }
      if (a30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a30);
      }
      shared_owners = (std::__shared_weak_count *)a16[14].__shared_owners_;
      if (shared_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
      }
      shared_weak_owners = (std::__shared_weak_count *)a16[13].__shared_weak_owners_;
      if (shared_weak_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
      }
      PersistentModule::~PersistentModule(a14);
      if (a15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a15);
      }
      std::__shared_weak_count::~__shared_weak_count(a16);
      operator delete(v42);
      if (a15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t std::__shared_ptr_emplace<BreaksNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BreaksNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<BreaksNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213DB0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213DB0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DD904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213DB0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<BreaksNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213DB0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  long long v58 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v4 = operator new(0x160uLL);
  std::chrono::steady_clock::time_point v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = off_26C218270;
  unint64_t v6 = (unint64_t)(v4 + 3);
  if (*((void *)&v58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v4 + 3));
  v5[37] = 0;
  v5[38] = 0;
  v5[39] = 0;
  v5[3] = off_26C204CF8;
  *((_OWORD *)v5 + 20) = 0u;
  *((_OWORD *)v5 + 21) = 0u;
  unint64_t v53 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::basic_string<char16_t> buf = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_INFO, "FE Init TransliteratePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init TransliteratePersistentModule", v8);
  SharedObjectPool::get_if<FrontendEnvironment>(&v70, v58);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v70 + 96) + 72))(&v68);
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v68, "transliterators_id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v66, (uint64_t)v9);
  uint64_t v10 = operator new(0x30uLL);
  v10[1] = 0;
  unsigned char v10[2] = 0;
  void *v10 = off_26C219B60;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  uint64_t v11 = (std::__shared_weak_count *)v5[41];
  v5[40] = v10 + 3;
  v5[41] = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  void v12[2] = 0;
  *unint64_t v12 = off_26C219620;
  v12[5] = 0;
  v12[4] = 0;
  v12[3] = v12 + 4;
  size_t v13 = (std::__shared_weak_count *)v5[43];
  v5[42] = v12 + 3;
  v5[43] = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(void *)std::basic_string<char16_t> buf = v66;
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  uint64_t v73 = 0;
  unint64_t v74 = 0x8000000000000000;
  if (v66[0])
  {
    if (v66[0] == 2)
    {
      *(void *)&uint8_t buf[16] = *v67;
    }
    else if (v66[0] == 1)
    {
      *(void *)&uint8_t buf[8] = *v67;
    }
    else
    {
      unint64_t v74 = 0;
    }
  }
  else
  {
    unint64_t v74 = 1;
  }
  uint64_t v55 = (uint64_t *)(a1 + 8);
  unsigned __int8 v57 = (void ***)(v5 + 40);
  unint64_t v59 = (unint64_t)v5;
  while (1)
  {
    uint64_t v64 = 0;
    *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0uLL;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    unint64_t v65 = 0x8000000000000000;
    if (v66[0] == 2)
    {
      v63.__r_.__value_.__r.__words[2] = v67[1];
    }
    else if (v66[0] == 1)
    {
      v63.__r_.__value_.__l.__size_ = (std::string::size_type)(v67 + 1);
    }
    else
    {
      unint64_t v65 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v63))
    {
      break;
    }
    BOOL v14 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v14, &v63);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v63;
    }
    else {
      uint64_t v15 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v63.__r_.__value_.__l.__size_;
    }
    UTFString::to_utf16(&__p, (const char *)v15, size);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::basic_string<char16_t> *)__p.__r_.__value_.__r.__words[0];
    }
    UErrorCode code = U_ZERO_ERROR;
    u_strlen((const UChar *)p_p);
    uint64_t v18 = utrans_openU();
    if (code)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      uint64_t v51 = u_errorName(code);
      uint64_t v52 = &v63;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v52 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)&v60, "Error utrans_openU: %s, '%s', %s", v51, (const char *)v52, "TransliteratePersistentModule::TransliteratePersistentModule(const nlohmann::json &, std::shared_ptr<SharedObjectPool>)");
      MEMORY[0x210558D40](exception, &v60);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    unint64_t v19 = v18;
    int64_t v20 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      __n128 v21 = &v63;
    }
    else
    {
      int64_t v20 = v63.__r_.__value_.__l.__size_;
      __n128 v21 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    if (v20 >= 19)
    {
      uint64_t v22 = (char *)v21 + v20;
      std::basic_string<char16_t>::size_type v23 = v21;
      do
      {
        uint64_t v24 = (char *)memchr(v23, 70, v20 - 18);
        if (!v24) {
          break;
        }
        if (*(void *)v24 == 0x746469776C6C7546
          && *((void *)v24 + 1) == 0x6977666C61482D68
          && *(void *)(v24 + 11) == 0x6874646977666C61)
        {
          if (v24 != v22 && v24 - (char *)v21 != -1)
          {
            char v27 = *(uint64_t **)(v59 + 336);
            *(void *)&long long v60 = v19;
            *((void *)&v60 + 1) = align_full_2_half;
            std::__tree<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::__map_value_compare<void **,std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::less<void **>,true>,std::allocator<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>::__emplace_unique_key_args<void **,std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>(v27, v19, &v60);
            goto LABEL_54;
          }
          break;
        }
        std::basic_string<char16_t>::size_type v23 = (std::string *)(v24 + 1);
        int64_t v20 = v22 - (char *)v23;
      }
      while (v22 - (char *)v23 >= 19);
    }
    std::string v28 = *(uint64_t **)(v59 + 336);
    *(void *)&long long v60 = v19;
    *((void *)&v60 + 1) = align_default;
    std::__tree<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::__map_value_compare<void **,std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::less<void **>,true>,std::allocator<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>::__emplace_unique_key_args<void **,std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>(v28, v19, &v60);
LABEL_54:
    int32_t v29 = *v57;
    uint64_t v31 = (unint64_t *)(*v57)[1];
    unint64_t v30 = (unint64_t)(*v57)[2];
    if ((unint64_t)v31 >= v30)
    {
      uint64_t v33 = ((char *)v31 - (unsigned char *)*v29) >> 3;
      if ((unint64_t)(v33 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v30 - (void)*v29;
      uint64_t v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
        uint64_t v35 = v33 + 1;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        if (v36 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v37 = (char *)operator new(8 * v36);
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v38 = (unint64_t *)&v37[8 * v33];
      *uint64_t v38 = v19;
      std::chrono::steady_clock::time_point v32 = v38 + 1;
      uint64_t v40 = (char *)*v29;
      uint64_t v39 = (char *)v29[1];
      if (v39 != *v29)
      {
        do
        {
          unint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *--uint64_t v38 = v41;
        }
        while (v39 != v40);
        uint64_t v39 = (char *)*v29;
      }
      *int32_t v29 = v38;
      v29[1] = v32;
      v29[2] = &v37[8 * v36];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *uint64_t v31 = v19;
      std::chrono::steady_clock::time_point v32 = v31 + 1;
    }
    v29[1] = v32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v67, v66[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, v68);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v43 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v43 = *v55;
    }
    v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::basic_string<char16_t> buf = 136315394;
    *(void *)&uint8_t buf[4] = v43;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v44.__d_.__rep_ - v54.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v46 = *v55;
    long long v45 = v53;
  }
  else
  {
    long long v45 = v53;
    uint64_t v46 = a1 + 8;
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v48, v46, (double)((v47.__d_.__rep_ - v54.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  result.n128_u64[0] = v6;
  result.n128_u64[1] = v59;
  *long long v45 = result;
  return result;
}

void sub_20D2DE1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,unsigned __int8 a41,uint64_t *a42)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a42, a41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v45 - 168), *(unsigned __int8 *)(v45 - 176));
  std::chrono::steady_clock::time_point v47 = *(std::__shared_weak_count **)(v45 - 152);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  shared_owners = (std::__shared_weak_count *)v42[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v42[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v43);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::__shared_weak_count::~__shared_weak_count(v42);
  operator delete(v50);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<TransliteratePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TransliteratePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TransliteratePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214648;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214648;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DE4F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214648;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TransliteratePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214648;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v27 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x170uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C217E80;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v27 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  *(void *)(v7 + 296) = 0;
  *(void *)(v7 + 304) = 0;
  *(void *)(v7 + 312) = 0;
  *(void *)(v7 + 24) = off_26C204620;
  *(void *)(v7 + 352) = 0;
  *(void *)(v7 + 360) = 0;
  std::basic_string<char16_t>::size_type v26 = a3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::basic_string<char16_t> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init MatchPromptPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init MatchPromptPersistentModule", v10);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v27);
  uint64_t v11 = *(void *)buf;
  if (*(void *)buf)
  {
    *(void *)(v7 + 320) = FrontendEnvironment::get_shared_component_instance<PromptDatabase>(*(void *)(*(void *)buf + 184));
    *(void *)(v7 + 328) = FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>(*(void *)(v11 + 184));
    {
      int32_t v29 = &v28;
      operator new();
    }
    if ((void *)(v11 + 168) == v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12[5] + 8;
    }
    *(void *)(v7 + 336) = v13;
    uint64_t v14 = *(void *)(v11 + 96);
    uint64_t v15 = *(std::__shared_weak_count **)(v11 + 104);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(v7 + 344) = Frontend::check_hydra_fe(v14);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  std::chrono::steady_clock::time_point v16 = operator new(0x20uLL);
  v16[1] = 0;
  unint64_t v16[2] = 0;
  *std::chrono::steady_clock::time_point v16 = off_26C216A28;
  *(void *)&long long v17 = UTFTransliterator::UTFTransliterator(v16 + 3, "P", ":");
  *((void *)&v17 + 1) = v16;
  uint64_t v18 = *(std::__shared_weak_count **)(v7 + 360);
  *(_OWORD *)(v7 + 352) = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v19 = (void *)(a1 + 8);
  int64_t v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    __n128 v21 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __n128 v21 = (void *)*v19;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::basic_string<char16_t> buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v22.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v19 = (void *)*v19;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v19, (double)((v23.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *std::basic_string<char16_t>::size_type v26 = result;
  return result;
}

void sub_20D2DEA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::chrono::steady_clock::time_point v23 = (std::__shared_weak_count *)v18[15].__vftable;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  PersistentModule::~PersistentModule(v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MatchPromptPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MatchPromptPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MatchPromptPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214178;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214178;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DECA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214178;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MatchPromptPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214178;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v22 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C217E48;
  uint64_t v10 = v8 + 3;
  if (*((void *)&v22 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v22, *((std::__shared_weak_count **)&v22 + 1));
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  void *v10 = off_26C2045B0;
  __n128 v21 = a4;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::basic_string<char16_t> buf = 0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_INFO, "FE Init FilterAudioPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init FilterAudioPersistentModule", v12);
  SharedObjectPool::get_if<FrontendEnvironment>(buf, v22);
  uint64_t v13 = *(void *)buf;
  if (*(void *)buf)
  {
    *(void *)(v9 + 320) = FrontendEnvironment::get_shared_component_instance<PromptDatabase>(*(void *)(*(void *)buf + 184));
    *(void *)(v9 + 328) = FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>(*(void *)(v13 + 184));
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v14 = (void *)(a1 + 8);
  uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v16 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v16 = (void *)*v14;
    }
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::basic_string<char16_t> buf = 136315394;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v17.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v14 = (void *)*v14;
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v19, v14, (double)((v18.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *__n128 v21 = result;
  return result;
}

void sub_20D2DF0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15)
{
  PersistentModule::~PersistentModule(v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v19);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FilterAudioPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FilterAudioPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FilterAudioPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214120;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214120;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DF2C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214120;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FilterAudioPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214120;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v44 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x160uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C217D68;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v44, *((std::__shared_weak_count **)&v44 + 1));
  if (*((void *)&v44 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
  }
  *(void *)(v9 + 24) = off_26C204470;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v12 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  uint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::basic_string<char16_t> buf = 0;
    _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_INFO, "Init TextSourcePersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "Init TextSourcePersistentModule", v14);
  uint64_t v15 = *(std::__shared_weak_count **)(v9 + 328);
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 328) = 0;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::chrono::steady_clock::time_point v16 = *(std::__shared_weak_count **)(v9 + 344);
  *(void *)(v9 + 336) = 0;
  *(void *)(v9 + 344) = 0;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  SharedObjectPool::get_if<FrontendEnvironment>(&v51, v44);
  uint64_t v17 = v51;
  if (!v51) {
    goto LABEL_54;
  }
  unint64_t v19 = (unsigned __int8 *)(v51 + 144);
  int v18 = *(unsigned __int8 *)(v51 + 144);
  *(void *)std::basic_string<char16_t> buf = v51 + 144;
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  uint64_t v54 = 0;
  unint64_t v55 = 0x8000000000000000;
  if (v18 == 1)
  {
    uint64_t v21 = *(void *)(v51 + 152);
    *(void *)&uint8_t buf[8] = v21 + 8;
    *(void *)&uint8_t buf[8] = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v21, "pronounce_nn");
    int v18 = *(unsigned __int8 *)(v17 + 144);
  }
  else
  {
    if (v18 == 2)
    {
      uint64_t v20 = *(void *)(v51 + 152);
      *(void *)&uint8_t buf[16] = *(void *)(v20 + 8);
      uint64_t v46 = (unsigned __int8 *)(v51 + 144);
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0x8000000000000000;
LABEL_22:
      uint64_t v48 = *(void *)(v20 + 8);
      goto LABEL_25;
    }
    unint64_t v55 = 1;
  }
  uint64_t v46 = (unsigned __int8 *)(v17 + 144);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0x8000000000000000;
  if (v18 == 1)
  {
    uint64_t v47 = *(void *)(v17 + 152) + 8;
  }
  else
  {
    if (v18 == 2)
    {
      uint64_t v20 = *(void *)(v17 + 152);
      goto LABEL_22;
    }
    unint64_t v50 = 1;
  }
LABEL_25:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, &v46))
  {
    goto LABEL_54;
  }
  *(void *)std::basic_string<char16_t> buf = v17 + 144;
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  uint64_t v54 = 0;
  unint64_t v55 = 0x8000000000000000;
  int v22 = *v19;
  if (v22 == 1)
  {
    uint64_t v45 = a4;
    uint64_t v24 = *(void *)(v17 + 152);
    uint64_t v25 = v24 + 8;
    *(void *)&uint8_t buf[8] = v24 + 8;
    uint64_t v26 = *(void *)(v24 + 8);
    if (!v26) {
      goto LABEL_36;
    }
    uint64_t v27 = v24 + 8;
    do
    {
      int v28 = std::string::compare((const std::string *)(v26 + 32), "source");
      int32_t v29 = (uint64_t *)(v26 + 8);
      if (v28 >= 0)
      {
        int32_t v29 = (uint64_t *)v26;
        uint64_t v27 = v26;
      }
      uint64_t v26 = *v29;
    }
    while (*v29);
    if (v27 == v25 || std::string::compare((const std::string *)(v27 + 32), "source") >= 1) {
LABEL_36:
    }
      uint64_t v27 = v25;
    *(void *)&uint8_t buf[8] = v27;
    uint64_t v17 = v51;
    int v22 = *(unsigned __int8 *)(v51 + 144);
    a4 = v45;
    unint64_t v12 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  }
  else
  {
    if (v22 == 2)
    {
      uint64_t v23 = *(void *)(v17 + 152);
      *(void *)&uint8_t buf[16] = *(void *)(v23 + 8);
      uint64_t v46 = (unsigned __int8 *)(v17 + 144);
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0x8000000000000000;
      goto LABEL_42;
    }
    unint64_t v55 = 1;
  }
  uint64_t v46 = (unsigned __int8 *)(v17 + 144);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0x8000000000000000;
  if (v22 == 1)
  {
    uint64_t v47 = *(void *)(v17 + 152) + 8;
    goto LABEL_45;
  }
  if (v22 != 2)
  {
    unint64_t v50 = 1;
    goto LABEL_45;
  }
  uint64_t v23 = *(void *)(v17 + 152);
LABEL_42:
  uint64_t v48 = *(void *)(v23 + 8);
LABEL_45:
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, &v46))
  {
    unint64_t v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(v17 + 144), "source");
    std::string::basic_string[abi:ne180100]<0>(buf, "hydra_parse_ssml");
    LOBYTE(v46) = 1;
    BOOL v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)v30, (const void **)buf, (unsigned __int8 *)&v46);
    BOOL v32 = v31;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v32) {
        goto LABEL_54;
      }
    }
    else if (!v31)
    {
      goto LABEL_54;
    }
  }
  DetectSSML::instance((uint64_t)buf);
  uint64_t v33 = *(std::__shared_weak_count **)(v9 + 328);
  *(_OWORD *)(v9 + 320) = *(_OWORD *)buf;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  ParseSSML::create((__n128 *)buf, 0, 0, v51);
  uint64_t v34 = *(std::__shared_weak_count **)(v9 + 344);
  *(_OWORD *)(v9 + 336) = *(_OWORD *)buf;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
LABEL_54:
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (*((void *)&v44 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v35 = (void *)(a1 + 8);
  unint64_t v36 = v12[33];
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    unint64_t v37 = v10;
    uint64_t v38 = a4;
    uint64_t v39 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v39 = (void *)*v35;
    }
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::basic_string<char16_t> buf = 136315394;
    *(void *)&uint8_t buf[4] = v39;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v40.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v38;
    unint64_t v10 = v37;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v44 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v35 = (void *)*v35;
  }
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v42, v35, (double)((v41.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D2DF998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  shared_owners = (std::__shared_weak_count *)v25[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v25[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v27);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v31);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<TextSourcePersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TextSourcePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TextSourcePersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2140C8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2140C8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2DFC10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2140C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<TextSourcePersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2140C8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v16 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x140uLL);
  std::chrono::steady_clock::time_point v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218430;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C204F78;
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v9 = (void *)(a1 + 8);
  unint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a3;
    unint64_t v12 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v12 = (void *)*v9;
    }
    *(_DWORD *)std::basic_string<char16_t> buf = 136315394;
    int v18 = v12;
    __int16 v19 = 2048;
    double v20 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v11;
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v9 = (void *)*v9;
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v14, v9, (double)((v13.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2DFF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ExtractFeaturesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ExtractFeaturesPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214800;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214800;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E0154(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214800;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ExtractFeaturesPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214800;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v19 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v6 = operator new(0x140uLL);
  std::chrono::steady_clock::time_point v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = off_26C218660;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[3] = off_26C205260;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::basic_string<char16_t> buf = 0;
    _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init CountConstituentsPersistentModule", buf, 2u);
  }
  Diagnostics::log(6, "FE Init CountConstituentsPersistentModule", v10);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  unint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v13 = a3;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::basic_string<char16_t> buf = 136315394;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    double v23 = (double)((v15.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a3 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a3 = result;
  return result;
}

void sub_20D2E0514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<CountConstituentsPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<CountConstituentsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<CountConstituentsPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2149B8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2149B8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E0708(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2149B8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<CountConstituentsPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2149B8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  long long v36 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = (char *)operator new(0x170uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)std::chrono::steady_clock::time_point v7 = off_26C1EE2E0;
  if (*((void *)&v36 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v7 + 24));
  *((void *)v7 + 37) = 0;
  *((void *)v7 + 38) = 0;
  *((void *)v7 + 39) = 0;
  unint64_t v35 = v8;
  *((void *)v7 + 3) = off_26C1EDB10;
  *((_OWORD *)v7 + 20) = 0u;
  *((_OWORD *)v7 + 21) = 0u;
  *((_OWORD *)v7 + 22) = 0u;
  {
    operator new();
  }
  uint64_t v34 = (std::mutex *)RobertaWordEmbPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)RobertaWordEmbPersistentModule::thread_mutex(void)::mutex);
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &buf);
  SharedObjectPool::get<VoiceConfig>(v40, (long long **)v36);
  unint64_t v10 = (void **)(v7 + 320);
  uint64_t v11 = v40[0];
  unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 41);
  *((_OWORD *)v7 + 20) = *(_OWORD *)v40;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    std::chrono::steady_clock::time_point v13 = *v10;
  }
  else
  {
    std::chrono::steady_clock::time_point v13 = v11;
  }
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &__p);
  (*(void (**)(void **__return_ptr, void *, uint64_t, std::string *, void))(*(void *)v13 + 40))(v40, v13, 1920427373, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v40, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v15 = (std::__shared_weak_count *)*((void *)v7 + 43);
  *((_OWORD *)v7 + 21) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  unint64_t v37 = a4;
  std::chrono::steady_clock::time_point v16 = (char *)operator new(0x100uLL);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)std::chrono::steady_clock::time_point v16 = off_26C218C10;
  *(_OWORD *)(v16 + 24) = 0u;
  uint64_t v17 = (uint64_t)(v16 + 24);
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((void *)v16 + 16) = 5000;
  *((_OWORD *)v16 + 7) = 0u;
  std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::unordered_map((uint64_t)(v16 + 136), v18, v19);
  *((void *)v16 + 23) = v16 + 184;
  *((void *)v16 + 24) = v16 + 184;
  *((void *)v16 + 25) = 0;
  v16[208] = 1;
  *((_DWORD *)v16 + 53) = 2139095039;
  std::string::basic_string[abi:ne180100]<0>((void *)v16 + 27, "0.1");
  *((void *)v16 + 30) = 0;
  *((void *)v16 + 31) = "'s|'t|'re|'ve|'m|'ll|'d| ?[\\w\\-\\:\\^]+| ?\\d+| ?[^\\s\\w\\d]+|\\s+(?!\\S)|\\s+";
  BBPE::init_codes((BBPE *)(v16 + 24));
  BBPE::setup_pre_tokenization_regex((BBPE *)(v16 + 24));
  *(void *)&long long v20 = v16 + 24;
  *((void *)&v20 + 1) = v16;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)v7 + 45);
  *((_OWORD *)v7 + 22) = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    uint64_t v17 = *((void *)v7 + 44);
  }
  __int16 v22 = *v10;
  uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "tokenizer_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v23, &v38);
  (*(void (**)(std::string *__return_ptr, void *, uint64_t, std::string *, void))(*(void *)v22 + 40))(&__p, v22, 1920431214, &v38, 0);
  BBPE::load_data(v17, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v34);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v24 = (std::string::size_type *)(a1 + 8);
  uint64_t v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  BOOL v26 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO);
  uint64_t v27 = a1;
  if (v26)
  {
    std::string::size_type v28 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v28 = *v24;
    }
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v29.__d_.__rep_ - v33.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    uint64_t v27 = a1;
  }
  if (*(char *)(v27 + 31) < 0) {
    uint64_t v24 = (std::string::size_type *)*v24;
  }
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v31, v24, (double)((v30.__d_.__rep_ - v33.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  result.n128_u64[0] = v35;
  result.n128_u64[1] = (unint64_t)v7;
  *unint64_t v37 = result;
  return result;
}

void sub_20D2E0D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, void **a13, uint64_t a14, long long a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::string v38 = (std::__shared_weak_count *)v35[15].__vftable;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  shared_owners = (std::__shared_weak_count *)v35[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v35[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(a13);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v41);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<RobertaWordEmbPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<RobertaWordEmbPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RobertaWordEmbPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EDFC0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C1EDFC0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E1054(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDFC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<RobertaWordEmbPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDFC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v25 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x160uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  uint64_t v7[2] = 0;
  void *v7 = off_26C217F98;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v25 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v7 + 3));
  *(void *)(v8 + 296) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 312) = 0;
  *(void *)(v8 + 24) = off_26C2047E0;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  {
    operator new();
  }
  unint64_t v10 = (std::mutex *)FS2S1DecoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FS2S1DecoderPersistentModule::thread_mutex(void)::mutex);
  uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, &buf);
  SharedObjectPool::get<VoiceConfig>(v27, (long long **)v25);
  unint64_t v12 = v27[0];
  std::chrono::steady_clock::time_point v13 = *(std::__shared_weak_count **)(v8 + 328);
  *(_OWORD *)(v8 + 320) = *(_OWORD *)v27;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    uint64_t v14 = *(void **)(v8 + 320);
  }
  else
  {
    uint64_t v14 = v12;
  }
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, void *, uint64_t, std::string *, void))(*(void *)v14 + 40))(v27, v14, 1717662579, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v27, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = *(std::__shared_weak_count **)(v8 + 344);
  *(_OWORD *)(v8 + 336) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v10);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v19 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v19 = *v17;
    }
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v19;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v20.__d_.__rep_ - v24.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v17, (double)((v21.__d_.__rep_ - v24.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D2E1518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  shared_owners = (std::__shared_weak_count *)v33[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v33[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v39);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FS2S1DecoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FS2S1DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2142D8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2142D8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E17A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2142D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2142D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v25 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x160uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  uint64_t v7[2] = 0;
  void *v7 = off_26C217FD0;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v25 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v7 + 3));
  *(void *)(v8 + 296) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 312) = 0;
  *(void *)(v8 + 24) = off_26C204850;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  {
    operator new();
  }
  unint64_t v10 = (std::mutex *)FS2S1EncoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FS2S1EncoderPersistentModule::thread_mutex(void)::mutex);
  uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, &buf);
  SharedObjectPool::get<VoiceConfig>(v27, (long long **)v25);
  unint64_t v12 = v27[0];
  std::chrono::steady_clock::time_point v13 = *(std::__shared_weak_count **)(v8 + 328);
  *(_OWORD *)(v8 + 320) = *(_OWORD *)v27;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    uint64_t v14 = *(void **)(v8 + 320);
  }
  else
  {
    uint64_t v14 = v12;
  }
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, void *, uint64_t, std::string *, void))(*(void *)v14 + 40))(v27, v14, 1717662579, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v27, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = *(std::__shared_weak_count **)(v8 + 344);
  *(_OWORD *)(v8 + 336) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v10);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v19 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v19 = *v17;
    }
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v19;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v20.__d_.__rep_ - v24.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v22, v17, (double)((v21.__d_.__rep_ - v24.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D2E1C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  shared_owners = (std::__shared_weak_count *)v33[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v33[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v39);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FS2S1EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214330;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214330;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E1EEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214330;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FS2S1EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214330;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v28 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x150uLL);
  v7[1] = 0;
  uint64_t v7[2] = 0;
  void *v7 = off_26C217BE0;
  if (*((void *)&v28 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v7 + 3));
  v7[37] = 0;
  v7[38] = 0;
  v7[39] = 0;
  v7[40] = 0;
  unint64_t v26 = v8;
  v7[3] = off_26C2041E8;
  v7[41] = 0;
  {
    operator new();
  }
  unint64_t v9 = (std::mutex *)S1NARDecoderBaseInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)S1NARDecoderBaseInference::thread_mutex(void)::mutex);
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v10, &buf);
  SharedObjectPool::get<VoiceConfig>(&v34, (long long **)v28);
  uint64_t v11 = v34;
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v11 + 40))(v32, v11, 1936613746, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::BaseInferenceController,std::allocator<InferenceEngine::BaseInferenceController>,std::string &,std::string &,void>(&__p, (char *)v32, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v13 = (InferenceEngine::MilInferenceModel ***)(v7 + 40);
  std::string::size_type v14 = __p.__r_.__value_.__r.__words[0];
  uint64_t v15 = (std::__shared_weak_count *)v7[41];
  *((_OWORD *)v7 + 20) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    std::chrono::steady_clock::time_point v16 = *v13;
  }
  else
  {
    std::chrono::steady_clock::time_point v16 = (InferenceEngine::MilInferenceModel **)v14;
  }
  InferenceEngine::MLInferenceModel::get_model_parameters(v16, (uint64_t)v29);
  uint64_t v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_26C2191F8;
  __p.__r_.__value_.__s.__data_[0] = v29[0];
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
  v29[0] = 0;
  uint64_t v30 = 0;
  InferenceEngine::S1NARDecoderIOProcessor::S1NARDecoderIOProcessor(&v17[1], &__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
  char v18 = *v13;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17[1];
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  (*((void (**)(InferenceEngine::MilInferenceModel **, std::string *))*v18 + 5))(v18, &__p);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v9);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v19 = (std::string::size_type *)(a1 + 8);
  std::chrono::steady_clock::time_point v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v21 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v21 = *v19;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v22.__d_.__rep_ - v27.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::string::size_type v19 = (std::string::size_type *)*v19;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v19, (double)((v23.__d_.__rep_ - v27.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  result.n128_u64[0] = v26;
  result.n128_u64[1] = (unint64_t)v7;
  *a4 = result;
  return result;
}

void sub_20D2E2478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, long long a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  shared_weak_owners = (std::__shared_weak_count *)v35[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(a11);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v39);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<S1NARDecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<S1NARDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<S1NARDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C213FC0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C213FC0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E275C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213FC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<S1NARDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C213FC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v26 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C2181C8;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = off_26C204B90;
  v9[41] = 0;
  kdebug_trace();
  {
    operator new();
  }
  uint64_t v12 = (std::mutex *)FastSpeech2S1DecoderInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FastSpeech2S1DecoderInference::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v30, (long long **)v26);
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  uint64_t v14 = v30;
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v14 + 40))(v28, v14, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v28, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  kdebug_trace();
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::mutex::unlock(v12);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = v10;
    std::chrono::steady_clock::time_point v20 = a4;
    std::string::size_type v21 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v21 = *v17;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v20;
    unint64_t v10 = v19;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v17, (double)((v23.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2E2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  shared_weak_owners = (std::__shared_weak_count *)v31[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v36);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2S1DecoderInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2181C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2181C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214540;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214540;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E2EF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214540;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2S1DecoderInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214540;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x160uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C1EE388;
  unint64_t v10 = v8 + 3;
  if (*((void *)&v19 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)std::string buf = v19;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)std::string buf = (unint64_t)v19;
  }
  SoundStormPersistentModule::SoundStormPersistentModule((Module *)(v8 + 3), a2, (long long ***)buf);
  if (*((void *)&v19 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
    void *v10 = off_26C1EDC48;
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  else
  {
    void *v10 = off_26C1EDC48;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D2E3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SoundStormStreamingPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SoundStormStreamingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormStreamingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EE070;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C1EE070;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E3480(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EE070;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormStreamingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EE070;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x160uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C217D30;
  unint64_t v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)std::string buf = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  SoundStormPersistentModule::SoundStormPersistentModule((Module *)(v8 + 3), a2, (long long ***)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D2E37BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SoundStormPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SoundStormPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214070;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214070;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E39B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214070;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<SoundStormPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214070;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v26 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C1EE350;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = off_26C1EDBC0;
  v9[41] = 0;
  {
    operator new();
  }
  uint64_t v12 = (std::mutex *)AnetecStreamingDecoderBaseInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)AnetecStreamingDecoderBaseInference::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v30, (long long **)v26);
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  uint64_t v14 = v30;
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v14 + 40))(v28, v14, 1634628452, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v28, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::mutex::unlock(v12);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = v10;
    std::chrono::steady_clock::time_point v20 = a4;
    std::string::size_type v21 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v21 = *v17;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v20;
    unint64_t v10 = v19;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v17, (double)((v23.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2E3E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  shared_weak_owners = (std::__shared_weak_count *)v31[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v36);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AnetecStreamingDecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EE018;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C1EE018;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E410C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EE018;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecStreamingDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EE018;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v26 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C1EE238;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = off_26C1ED998;
  v9[41] = 0;
  {
    operator new();
  }
  uint64_t v12 = (std::mutex *)AnetecDecoderBaseInference::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)AnetecDecoderBaseInference::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v30, (long long **)v26);
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  uint64_t v14 = v30;
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v14 + 40))(v28, v14, 1634624611, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v28, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::mutex::unlock(v12);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = v10;
    std::chrono::steady_clock::time_point v20 = a4;
    std::string::size_type v21 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v21 = *v17;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v20;
    unint64_t v10 = v19;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v17, (double)((v23.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2E45DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  shared_weak_owners = (std::__shared_weak_count *)v31[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v36);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AnetecDecoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AnetecDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AnetecDecoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EDF68;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C1EDF68;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E4868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDF68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<AnetecDecoderBaseInference>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDF68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v26 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C218740;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = off_26C205388;
  v9[41] = 0;
  kdebug_trace();
  {
    operator new();
  }
  uint64_t v12 = (std::mutex *)FastSpeech2DecoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FastSpeech2DecoderPersistentModule::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v30, (long long **)v26);
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  uint64_t v14 = v30;
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v14 + 40))(v28, v14, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v28, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  kdebug_trace();
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::mutex::unlock(v12);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = v10;
    std::chrono::steady_clock::time_point v20 = a4;
    std::string::size_type v21 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v21 = *v17;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v20;
    unint64_t v10 = v19;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v17, (double)((v23.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2E4D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  shared_weak_owners = (std::__shared_weak_count *)v31[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v36);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2DecoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FastSpeech2DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214A68;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214A68;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E5004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214A68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2DecoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214A68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v26 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C218778;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v8 + 3));
  v9[37] = 0;
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[3] = off_26C2053F8;
  v9[41] = 0;
  kdebug_trace();
  {
    operator new();
  }
  uint64_t v12 = (std::mutex *)FastSpeech2EncoderPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)FastSpeech2EncoderPersistentModule::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v30, (long long **)v26);
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  uint64_t v14 = v30;
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v14 + 40))(v28, v14, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::MLInferenceModel,std::allocator<InferenceEngine::MLInferenceModel>,std::string &,std::string &,void>((uint64_t *)&__p, (uint64_t)v28, (uint64_t)&buf);
  std::chrono::steady_clock::time_point v16 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  kdebug_trace();
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::mutex::unlock(v12);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = (std::string::size_type *)(a1 + 8);
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = v10;
    std::chrono::steady_clock::time_point v20 = a4;
    std::string::size_type v21 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v21 = *v17;
    }
    v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v20;
    unint64_t v10 = v19;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v17 = (std::string::size_type *)*v17;
  }
  v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v24, v17, (double)((v23.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2E550C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  shared_weak_owners = (std::__shared_weak_count *)v31[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v36);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2EncoderPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FastSpeech2EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2EncoderPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214AC0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214AC0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E57A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214AC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<FastSpeech2EncoderPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214AC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  long long v97 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x168uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C217CF8;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v97 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v97, *((std::__shared_weak_count **)&v97 + 1));
  if (*((void *)&v97 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
  }
  *(void *)(v9 + 24) = off_26C204390;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(void *)(v9 + 352) = 0;
  {
    operator new();
  }
  uint64_t v11 = (std::mutex *)MilWaveRNNPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)MilWaveRNNPersistentModule::thread_mutex(void)::mutex);
  kdebug_trace();
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &v99);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&buf.__r_.__value_.__l.__data_, &v98);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v99.__r_.__value_.__l.__size_ != 3)
    {
      if (v99.__r_.__value_.__l.__size_ != 8) {
        goto LABEL_44;
      }
      uint64_t v13 = (std::string *)v99.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    if (*(_WORD *)v99.__r_.__value_.__l.__data_ != 26989 || *(unsigned char *)(v99.__r_.__value_.__r.__words[0] + 2) != 108) {
      goto LABEL_44;
    }
  }
  else
  {
    if (HIBYTE(v99.__r_.__value_.__r.__words[2]) != 3)
    {
      if (HIBYTE(v99.__r_.__value_.__r.__words[2]) != 8) {
        goto LABEL_44;
      }
      uint64_t v13 = &v99;
LABEL_15:
      if (v13->__r_.__value_.__r.__words[0] == 0x736E6E62326C696DLL)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "Using MIL2BNNS inference.", (uint8_t *)&buf, 2u);
        }
        Diagnostics::log(5, "Using MIL2BNNS inference.", v15);
        uint64_t v96 = v11;
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v98.__r_.__value_.__l.__size_ != 8)
          {
            if (v98.__r_.__value_.__l.__size_ != 14
              || (*(void *)v98.__r_.__value_.__l.__data_ == 0x75735F6465737566
                ? (BOOL v49 = *(void *)(v98.__r_.__value_.__r.__words[0] + 6) == 0x656C616373627573)
                : (BOOL v49 = 0),
                  !v49))
            {
LABEL_208:
              exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
              int v85 = &v98;
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v85 = (std::string *)v98.__r_.__value_.__r.__words[0];
              }
              StringFormatter::StringFormatter((StringFormatter *)&buf, "Model type not supported. %s", (const char *)v85);
              MEMORY[0x210558D40](exception, &buf);
              __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
            }
            goto LABEL_112;
          }
          __int16 v66 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(v98.__r_.__value_.__r.__words[2]) != 8)
          {
            if (HIBYTE(v98.__r_.__value_.__r.__words[2]) != 14) {
              goto LABEL_208;
            }
            if (v98.__r_.__value_.__r.__words[0] != 0x75735F6465737566
              || *(std::string::size_type *)((char *)v98.__r_.__value_.__r.__words + 6) != 0x656C616373627573)
            {
              goto LABEL_208;
            }
LABEL_112:
            unint64_t v50 = (char *)operator new(0x38uLL);
            uint64_t v51 = v50;
            *((void *)v50 + 1) = 0;
            *((void *)v50 + 2) = 0;
            *(void *)unint64_t v50 = off_26C218B68;
            uint64_t v52 = v50 + 24;
            if (*((void *)&v97 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *uint64_t v52 = 0u;
            *(_OWORD *)(v50 + 40) = 0u;
            SharedObjectPool::get<VoiceConfig>(&v109, (long long **)v97);
            uint64_t v53 = v109;
            uint64_t v54 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "linear_model_path");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v54, &v108);
            (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v53 + 40))(&buf, v53, 2003988078, &v108, 0);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v108.__r_.__value_.__l.__data_);
            }
            uint64_t v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "gru_model_path");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v55, &v107);
            (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v53 + 40))(&v108, v53, 2003988078, &v107, 0);
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v107.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "linear_model_compute_precision");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&__p.__r_.__value_.__l.__data_, &v107);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v112, "gru_model_compute_precision");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v112.__r_.__value_.__l.__data_, &__p);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v112.__r_.__value_.__l.__data_);
            }
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v56 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              p_std::string buf = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              unint64_t v59 = &v108;
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v59 = (std::string *)v108.__r_.__value_.__r.__words[0];
              }
              LODWORD(v112.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
              WORD2(v112.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v59;
              _os_log_impl(&dword_20CD80000, v56, OS_LOG_TYPE_DEFAULT, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", (uint8_t *)&v112, 0x16u);
            }
            long long v60 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v60 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            uint64_t v61 = &v108;
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v61 = (std::string *)v108.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(5, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", v57, v60, v61);
            std::string::basic_string[abi:ne180100]<0>(&v105, "linear_model_io_names");
            v103[0] = 0;
            v103[1] = 0;
            uint64_t v104 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v112, (unsigned __int8 *)a2, (const void **)&v105.__r_.__value_.__l.__data_, (long long **)v103);
            unint64_t v100 = v103;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v105.__r_.__value_.__l.__data_);
            }
            std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)&v105, (uint64_t)&buf, (unsigned __int8 **)&v112, (uint64_t *)&v107, 1);
            uint64_t v62 = (std::__shared_weak_count *)*((void *)v51 + 4);
            *(_OWORD *)(v51 + 24) = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
            if (v62) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v62);
            }
            std::string::basic_string[abi:ne180100]<0>(v103, "gru_model_io_names");
            unint64_t v100 = 0;
            uint64_t v101 = 0;
            uint64_t v102 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v105, (unsigned __int8 *)a2, (const void **)v103, (long long **)&v100);
            uint64_t v111 = &v100;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
            if (SHIBYTE(v104) < 0) {
              operator delete(v103[0]);
            }
            std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)v103, (uint64_t)&v108, (unsigned __int8 **)&v105, (uint64_t *)&__p, 1);
            std::string v63 = (std::__shared_weak_count *)*((void *)v51 + 6);
            *(_OWORD *)(v51 + 40) = *(_OWORD *)v103;
            if (v63) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v63);
            }
            v103[0] = &v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
            v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v107.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v108.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (v110) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v110);
            }
            if (*((void *)&v97 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
            }
            *(void *)&long long v64 = v52;
            *((void *)&v64 + 1) = v51;
            std::chrono::steady_clock::time_point v40 = *(std::__shared_weak_count **)(v9 + 328);
            *(_OWORD *)(v9 + 320) = v64;
            unint64_t v65 = "42Mil2BnnsWaveRNNFusedSubscaleInferenceModel";
            goto LABEL_201;
          }
          __int16 v66 = &v98;
        }
        if (v66->__r_.__value_.__r.__words[0] != 0x656C616373627573) {
          goto LABEL_208;
        }
        uint64_t v67 = (char *)operator new(0x38uLL);
        uint64_t v68 = v67;
        *((void *)v67 + 1) = 0;
        *((void *)v67 + 2) = 0;
        *(void *)uint64_t v67 = off_26C218938;
        uint64_t v69 = v67 + 24;
        if (*((void *)&v97 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *uint64_t v69 = 0u;
        *(_OWORD *)(v67 + 40) = 0u;
        SharedObjectPool::get<VoiceConfig>(&v109, (long long **)v97);
        uint64_t v70 = v109;
        uint64_t v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "linear_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v71, &v108);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v70 + 40))(&buf, v70, 2003988078, &v108, 0);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        uint64_t v72 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "gru_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v72, &v107);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v70 + 40))(&v108, v70, 2003988078, &v107, 0);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "linear_model_compute_precision");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&__p.__r_.__value_.__l.__data_, &v107);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v112, "gru_model_compute_precision");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v112.__r_.__value_.__l.__data_, &__p);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v73 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v75 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v75 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          unint64_t v76 = &v108;
          if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v76 = (std::string *)v108.__r_.__value_.__r.__words[0];
          }
          LODWORD(v112.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v75;
          WORD2(v112.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v76;
          _os_log_impl(&dword_20CD80000, v73, OS_LOG_TYPE_DEFAULT, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", (uint8_t *)&v112, 0x16u);
        }
        uint64_t v77 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v77 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        long long v78 = &v108;
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v78 = (std::string *)v108.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(5, "Create MIL2BNNS WaveRNN model. linear_model_path = %s, gru_model_path = %s", v74, v77, v78);
        std::string::basic_string[abi:ne180100]<0>(&v105, "linear_model_io_names");
        v103[0] = 0;
        v103[1] = 0;
        uint64_t v104 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v112, (unsigned __int8 *)a2, (const void **)&v105.__r_.__value_.__l.__data_, (long long **)v103);
        unint64_t v100 = v103;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)&v105, (uint64_t)&buf, (unsigned __int8 **)&v112, (uint64_t *)&v107, 1);
        uint64_t v79 = (std::__shared_weak_count *)*((void *)v68 + 4);
        *(_OWORD *)(v68 + 24) = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
        if (v79) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v79);
        }
        std::string::basic_string[abi:ne180100]<0>(v103, "gru_model_io_names");
        unint64_t v100 = 0;
        uint64_t v101 = 0;
        uint64_t v102 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<std::string>,0>(&v105, (unsigned __int8 *)a2, (const void **)v103, (long long **)&v100);
        uint64_t v111 = &v100;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        if (SHIBYTE(v104) < 0) {
          operator delete(v103[0]);
        }
        std::allocate_shared[abi:ne180100]<Mil2BnnsModel,std::allocator<Mil2BnnsModel>,std::string const&,std::vector<std::string> &,std::string const&,Mil2BnnsModel::ModelType,void>((uint64_t **)v103, (uint64_t)&v108, (unsigned __int8 **)&v105, (uint64_t *)&__p, 1);
        uint64_t v80 = (std::__shared_weak_count *)*((void *)v68 + 6);
        *(_OWORD *)(v68 + 40) = *(_OWORD *)v103;
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
        v103[0] = &v105;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v103);
        v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v110) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v110);
        }
        if (*((void *)&v97 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
        }
        *(void *)&long long v81 = v69;
        *((void *)&v81 + 1) = v68;
        std::chrono::steady_clock::time_point v40 = *(std::__shared_weak_count **)(v9 + 328);
        *(_OWORD *)(v9 + 320) = v81;
        unint64_t v65 = "37Mil2BnnsWaveRNNSubscaleInferenceModel";
LABEL_201:
        unint64_t v41 = (unint64_t)(v65 + 0x8000000000000000) & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v11 = v96;
        if (!v40) {
          goto LABEL_88;
        }
LABEL_87:
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        goto LABEL_88;
      }
LABEL_44:
      std::chrono::steady_clock::time_point v22 = __cxa_allocate_exception(0x10uLL);
      std::chrono::steady_clock::time_point v23 = &v99;
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::chrono::steady_clock::time_point v23 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Framework type not supported. %s", (const char *)v23);
      MEMORY[0x210558D40](v22, &buf);
      __cxa_throw(v22, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (LOWORD(v99.__r_.__value_.__l.__data_) != 26989 || v99.__r_.__value_.__s.__data_[2] != 108) {
      goto LABEL_44;
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_DEFAULT, "Using MIL inference.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Using MIL inference.", v19);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v98.__r_.__value_.__l.__size_ != 14) {
      goto LABEL_205;
    }
    std::chrono::steady_clock::time_point v20 = (std::string *)v98.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) != 14) {
      goto LABEL_205;
    }
    std::chrono::steady_clock::time_point v20 = &v98;
  }
  std::string::size_type v24 = v20->__r_.__value_.__r.__words[0];
  uint64_t v25 = *(std::string::size_type *)((char *)v20->__r_.__value_.__r.__words + 6);
  if (v24 != 0x75735F6465737566 || v25 != 0x656C616373627573)
  {
LABEL_205:
    uint64_t v82 = __cxa_allocate_exception(0x10uLL);
    unint64_t v83 = &v98;
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v83 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Model type not supported. %s", (const char *)v83);
    MEMORY[0x210558D40](v82, &buf);
    __cxa_throw(v82, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  std::chrono::steady_clock::time_point v27 = operator new(0x50uLL);
  v27[1] = 0;
  void v27[2] = 0;
  *std::chrono::steady_clock::time_point v27 = off_26C218970;
  if (*((void *)&v97 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  SharedObjectPool::get<VoiceConfig>(&v105, (long long **)v97);
  std::string::size_type v28 = v105.__r_.__value_.__r.__words[0];
  uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "linear_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v29, &buf);
  (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, std::string *, void))(*(void *)v28 + 40))(&v108, v28, 2003988078, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "gru_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v30, &buf);
  (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, std::string *, void))(*(void *)v28 + 40))(&v107, v28, 2003988078, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  BOOL v31 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = &v108;
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v33 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    uint64_t v34 = &v107;
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v34 = (std::string *)v107.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v34;
    _os_log_impl(&dword_20CD80000, v31, OS_LOG_TYPE_DEFAULT, "Create MIL WaveRNN model. linear_model_path = %s, gru_model_path = %s", (uint8_t *)&buf, 0x16u);
  }
  unint64_t v35 = &v108;
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v35 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  long long v36 = &v107;
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v36 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Create MIL WaveRNN model. linear_model_path = %s, gru_model_path = %s", v32, v35, v36);
  v27[9] = espresso_create_context();
  v27[7] = espresso_create_plan();
  v27[8] = espresso_create_plan();
  int v37 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to load network.");
  if (v37)
  {
    int v86 = __cxa_allocate_exception(0x10uLL);
    int v87 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v88 = __p.__r_.__value_.__r.__words[0];
    status_string = (const char *)espresso_get_status_string();
    p_p = &__p;
    if (v87 < 0) {
      p_p = (std::string *)v88;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)p_p, v37, status_string);
    MEMORY[0x210558D40](v86, &buf);
    __cxa_throw(v86, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v38 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(&v112, "Unable to load network.");
  if (v38)
  {
    uint64_t v91 = __cxa_allocate_exception(0x10uLL);
    int v92 = SHIBYTE(v112.__r_.__value_.__r.__words[2]);
    std::string::size_type v93 = v112.__r_.__value_.__r.__words[0];
    uint64_t v94 = (const char *)espresso_get_status_string();
    uint64_t v95 = &v112;
    if (v92 < 0) {
      uint64_t v95 = (std::string *)v93;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v95, v38, v94);
    MEMORY[0x210558D40](v91, &buf);
    __cxa_throw(v91, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (v105.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.__r_.__value_.__l.__size_);
  }
  if (*((void *)&v97 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
  }
  *(void *)&long long v39 = v27 + 3;
  *((void *)&v39 + 1) = v27;
  std::chrono::steady_clock::time_point v40 = *(std::__shared_weak_count **)(v9 + 328);
  *(_OWORD *)(v9 + 320) = v39;
  unint64_t v41 = 0x800000020D6C35A9 & 0x7FFFFFFFFFFFFFFFLL;
  if (v40) {
    goto LABEL_87;
  }
LABEL_88:
  MEMORY[0x210558E70](v9 + 336, v41);
  kdebug_trace();
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v11);
  if (*((void *)&v97 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v42 = (std::string::size_type *)(a1 + 8);
  uint64_t v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v44 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v44 = *v42;
    }
    v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v44;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v45.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::chrono::steady_clock::time_point v42 = (std::string::size_type *)*v42;
  }
  v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v47, v42, (double)((v46.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v97 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D2E6C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, long long a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (*(char *)(v57 + 359) < 0) {
    operator delete(*(void **)a15);
  }
  uint64_t v61 = *(std::__shared_weak_count **)(v57 + 328);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  PersistentModule::~PersistentModule(v59);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v57);
  operator delete(v62);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MilWaveRNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MilWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MilWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214018;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214018;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E722C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214018;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<MilWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214018;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  long long v103 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v100.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x168uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  uint64_t v7[2] = 0;
  void *v7 = off_26C2183F8;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v103 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = (long long **)v103;
  PersistentModule::PersistentModule(v7 + 3, (char *)a2, v103, *((std::__shared_weak_count **)&v103 + 1));
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  *(void *)(v8 + 24) = off_26C204F08;
  uint64_t v11 = (std::string *)(v8 + 336);
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(void *)(v8 + 352) = 0;
  uint64_t v102 = a1;
  __s = (void *)v103;
  {
    operator new();
  }
  uint64_t v101 = (std::mutex *)EspressoWaveRNNPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)EspressoWaveRNNPersistentModule::thread_mutex(void)::mutex);
  kdebug_trace();
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&buf, "neuralModelType");
  InternalSettings::get_string_for_key(&v112, (uint64_t *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  size_t v13 = v114;
  if ((v114 & 0x80u) != 0) {
    size_t v13 = v113;
  }
  if (v13)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      std::chrono::steady_clock::time_point v16 = &v112;
      if ((v114 & 0x80u) != 0) {
        std::chrono::steady_clock::time_point v16 = v112;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_INFO, "Internal setting enforced wavernn to be '%s'", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v17 = &v112;
    if ((v114 & 0x80u) != 0) {
      uint64_t v17 = v112;
    }
    Diagnostics::log(6, "Internal setting enforced wavernn to be '%s'", v15, v17);
    if ((v114 & 0x80u) == 0) {
      size_t v18 = v114;
    }
    else {
      size_t v18 = v113;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&buf, v18 + 11);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if ((v114 & 0x80u) == 0) {
        std::chrono::steady_clock::time_point v20 = &v112;
      }
      else {
        std::chrono::steady_clock::time_point v20 = v112;
      }
      memmove(p_buf, v20, v18);
    }
    strcpy((char *)p_buf + v18, "_model_path");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, &v109);
    unint64_t v10 = (long long **)v103;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v109;
    std::string::size_type size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v109.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_35;
    }
    if ((char)v114 < 0)
    {
      if (v113 == 3)
      {
        uint64_t v25 = (unsigned __int16 *)v112;
LABEL_49:
        int v26 = *v25;
        int v27 = *((unsigned __int8 *)v25 + 2);
        if (v26 == 28257 && v27 == 101)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v109.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_INFO, "ane_model_path is not found. Fallback to preinstalled_model_path", (uint8_t *)&v109, 2u);
          }
          Diagnostics::log(6, "ane_model_path is not found. Fallback to preinstalled_model_path", v30);
          std::string::basic_string[abi:ne180100]<0>(&v119, "preinstalled_model_path");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v119, &v109);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v109;
          *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
          v109.__r_.__value_.__s.__data_[0] = 0;
          if (v120 < 0) {
            operator delete((void *)v119);
          }
        }
      }
    }
    else if (v114 == 3)
    {
      uint64_t v25 = (unsigned __int16 *)&v112;
      goto LABEL_49;
    }
LABEL_35:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
  }
  if (!v22)
  {
    BOOL is_amx_available = NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_amx_available);
    if (is_amx_available)
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a2;
      buf.__r_.__value_.__r.__words[2] = 0;
      uint64_t v117 = 0;
      unint64_t v118 = 0x8000000000000000;
      int v23 = *a2;
      if (v23 == 1)
      {
        uint64_t v31 = *((void *)a2 + 1);
        buf.__r_.__value_.__l.__size_ = v31 + 8;
        buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v31, "amx_model_path");
        int v23 = *a2;
      }
      else
      {
        if (v23 == 2)
        {
          uint64_t v24 = *((void *)a2 + 1);
          buf.__r_.__value_.__r.__words[2] = *(void *)(v24 + 8);
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = (unint64_t)a2;
          v109.__r_.__value_.__r.__words[2] = 0;
          uint64_t v110 = 0;
          unint64_t v111 = 0x8000000000000000;
LABEL_67:
          v109.__r_.__value_.__r.__words[2] = *(void *)(v24 + 8);
          goto LABEL_70;
        }
        unint64_t v118 = 1;
      }
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = (unint64_t)a2;
      v109.__r_.__value_.__r.__words[2] = 0;
      uint64_t v110 = 0;
      unint64_t v111 = 0x8000000000000000;
      if (v23 == 1)
      {
        v109.__r_.__value_.__l.__size_ = *((void *)a2 + 1) + 8;
      }
      else
      {
        if (v23 == 2)
        {
          uint64_t v24 = *((void *)a2 + 1);
          goto LABEL_67;
        }
        unint64_t v111 = 1;
      }
LABEL_70:
      BOOL is_amx_available = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v109);
      if (!is_amx_available)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        BOOL v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v32, OS_LOG_TYPE_DEFAULT, "Prefer AMX model since AMX is available.", (uint8_t *)&buf, 2u);
        }
        Diagnostics::log(5, "Prefer AMX model since AMX is available.", v33);
        std::string::basic_string[abi:ne180100]<0>(&v109, "amx_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v109.__r_.__value_.__l.__data_, &buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
        buf.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v109.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
  }
  std::string v99 = a4;
  if (v34 || !NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)is_amx_available))
  {
    char v40 = 0;
    char v104 = 0;
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]<0>(&v109, "ane_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v109.__r_.__value_.__l.__data_, &buf);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v119, "preinstalled_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v119, &v109);
  if (v120 < 0) {
    operator delete((void *)v119);
  }
  long long v108 = v103;
  if (*((void *)&v103 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int is_ane_model_compiled = EspressoWaveRNNModule::is_ane_model_compiled((uint64_t *)a2, (long long ***)&v108);
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  if (!is_ane_model_compiled)
  {
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v109.__r_.__value_.__l.__size_) {
        goto LABEL_181;
      }
    }
    else if (*((unsigned char *)&v109.__r_.__value_.__s + 23))
    {
LABEL_181:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v72 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v74 = &v109;
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v74 = (std::string *)v109.__r_.__value_.__r.__words[0];
        }
        LODWORD(v119) = 136315138;
        *(void *)((char *)&v119 + 4) = v74;
        _os_log_impl(&dword_20CD80000, v72, OS_LOG_TYPE_DEFAULT, "OTA ANE model is not compiled. Fallback to preinstalled model. model_path=%s", (uint8_t *)&v119, 0xCu);
      }
      uint64_t v75 = &v109;
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v75 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(5, "OTA ANE model is not compiled. Fallback to preinstalled model. model_path=%s", v73, v75);
      std::string::operator=(&__p, &v109);
      char v104 = 0;
      char v40 = 1;
      goto LABEL_213;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v82 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v84 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v84 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v119) = 136315138;
      *(void *)((char *)&v119 + 4) = v84;
      _os_log_impl(&dword_20CD80000, v82, OS_LOG_TYPE_DEFAULT, "Ignore uncompiled OTA ane model. Fallback will always be used until it's compiled. model_path=%s", (uint8_t *)&v119, 0xCu);
    }
    int v85 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v85 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(5, "Ignore uncompiled OTA ane model. Fallback will always be used until it's compiled. model_path=%s", v83, v85);
    std::string::operator=(&__p, &buf);
    char v40 = 0;
    char v104 = 1;
    goto LABEL_213;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v38 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v38 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v119) = 136315138;
    *(void *)((char *)&v119 + 4) = v38;
    _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEFAULT, "Use compiled OTA ane model. model_path=%s", (uint8_t *)&v119, 0xCu);
  }
  long long v39 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v39 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Use compiled OTA ane model. model_path=%s", v37, v39);
  std::string::operator=(&__p, &buf);
  char v40 = 0;
  char v104 = 0;
LABEL_213:
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_102:
  std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  }
  if (!v41)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::chrono::steady_clock::time_point v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_DEFAULT, "Cannot find preferable model. Fallback to AMX model.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Cannot find preferable model. Fallback to AMX model.", v43);
    std::string::basic_string[abi:ne180100]<0>(&v109, "amx_model_path");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v109.__r_.__value_.__l.__data_, &buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = buf;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
  }
  SharedObjectPool::get<VoiceConfig>(&v119, v10);
  LOBYTE(v44) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_134;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_123;
    }
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__s.__data_[0] != 47)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v119 + 40))(&buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = buf;
    std::string::size_type v44 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  if ((v44 & 0x80) != 0)
  {
    int64_t v46 = __p.__r_.__value_.__l.__size_;
    uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_125;
  }
LABEL_123:
  int64_t v46 = v44;
  uint64_t v47 = &__p;
LABEL_125:
  if (v46 >= 6)
  {
    uint64_t v48 = (char *)v47 + v46;
    BOOL v49 = v47;
    while (1)
    {
      unint64_t v50 = (char *)memchr(v49, 117, v46 - 5);
      if (!v50) {
        goto LABEL_133;
      }
      if (*(_DWORD *)v50 == 1869770357 && *((_WORD *)v50 + 2) == 27756) {
        break;
      }
      BOOL v49 = (std::string *)(v50 + 1);
      int64_t v46 = v48 - (char *)v49;
      if (v48 - (char *)v49 < 6) {
        goto LABEL_133;
      }
    }
    uint64_t v58 = v102;
    if (v50 == v48)
    {
LABEL_133:
      uint64_t v11 = (std::string *)(v8 + 336);
      goto LABEL_134;
    }
    uint64_t v11 = (std::string *)(v8 + 336);
    if (v50 - (char *)v47 != -1)
    {
      uint64_t v56 = (char *)operator new(0x20uLL);
      *((void *)v56 + 2) = 0;
      *((void *)v56 + 1) = 0;
      *(void *)uint64_t v56 = off_26C2177B8;
      v56[24] = v40;
      uint64_t v70 = v56 + 24;
      std::string v105 = v56 + 24;
      int v106 = (std::__shared_weak_count *)v56;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v56 + 1, 1uLL, memory_order_relaxed);
      SharedObjectPool::inject<EspressoWaveRNNANEStatus>(&v107, (uint64_t)__s, (unint64_t *)&v105);
      if (*((void *)&v107 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
      }
      if (v106) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      }
      if (v104)
      {
        uint64_t v71 = *(std::__shared_weak_count **)(v8 + 328);
        *(void *)(v8 + 320) = 0;
        *(void *)(v8 + 328) = 0;
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v100.__d_.__rep_;
      }
      else
      {
        int64_t v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int64_t v76 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v77 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        __sa = v77;
        if (v76 >= 5)
        {
          long long v78 = v77;
          uint64_t v79 = (char *)v77 + v76;
          do
          {
            uint64_t v80 = (char *)memchr(v78, 102, v76 - 4);
            if (!v80) {
              break;
            }
            if (*(_DWORD *)v80 == 1702065510 && v80[4] == 100)
            {
              if (v80 == v79 || v80 - (char *)__sa == -1) {
                break;
              }
              std::string::basic_string[abi:ne180100]<0>(&v109, "gumbel_model_path");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("load_random_cpu.espresso.net", (char *)a2, (const void **)&v109.__r_.__value_.__l.__data_, &buf);
              if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v109.__r_.__value_.__l.__data_);
              }
              uint64_t v11 = (std::string *)(v8 + 336);
              (*(void (**)(std::string *__return_ptr))(*(void *)v119 + 40))(&v109);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              std::string buf = v109;
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              int v86 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
              {
                LOWORD(v109.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_20CD80000, v86, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", (uint8_t *)&v109, 2u);
              }
              Diagnostics::log(6, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", v87);
              std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEModel,std::allocator<EspressoWaveRNNFusedSubscalingANEModel>,std::string &,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&v109, (uint64_t)&__p, (uint64_t)&buf, v70, (std::__shared_weak_count *)v56);
              std::string::size_type v88 = *(std::__shared_weak_count **)(v8 + 328);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v100.__d_.__rep_;
              if (v88) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v88);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              goto LABEL_141;
            }
            long long v78 = (std::string *)(v80 + 1);
            int64_t v76 = v79 - (char *)v78;
          }
          while (v79 - (char *)v78 >= 5);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v89 = Diagnostics_GetLogObject(void)::__profile_log_default;
        uint64_t v11 = (std::string *)(v8 + 336);
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v89, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE wavernn model", (uint8_t *)&buf, 2u);
        }
        Diagnostics::log(6, "EspressoWaveRNNModule init with ANE wavernn model", v90);
        std::allocate_shared[abi:ne180100]<EspressoWaveRNNANEModel,std::allocator<EspressoWaveRNNANEModel>,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&buf, (uint64_t)&__p, v70, (std::__shared_weak_count *)v56);
        uint64_t v91 = *(std::__shared_weak_count **)(v8 + 328);
        *(_OWORD *)(v8 + 320) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v100.__d_.__rep_;
        if (v91) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v91);
        }
      }
      goto LABEL_141;
    }
  }
LABEL_134:
  uint64_t v52 = (std::string *)operator new(0x48uLL);
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C217630;
  v52[1].__r_.__value_.__r.__words[0] = 0;
  uint64_t v53 = v52 + 2;
  if ((v44 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v52[2].__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
  }
  v52[1].__r_.__value_.__r.__words[0] = espresso_create_context();
  espresso_create_plan();
  int v54 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(&v109, "Unable to load CPU network.");
  if (v54)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v93 = SHIBYTE(v109.__r_.__value_.__r.__words[2]);
    std::string::size_type v94 = v109.__r_.__value_.__r.__words[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v96 = &v109;
    if (v93 < 0) {
      uint64_t v96 = (std::string *)v94;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v96, v54, status_string);
    MEMORY[0x210558D40](exception, &buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v55 = v52 + 1;
  *((void *)&v55 + 1) = v52;
  uint64_t v56 = *(char **)(v8 + 328);
  *(_OWORD *)(v8 + 320) = v55;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v100.__d_.__rep_;
  uint64_t v58 = v102;
  if (v56) {
LABEL_141:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56);
  std::string::operator=(v11, &__p);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v59 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v61 = (std::string::size_type)v11;
    if (*(char *)(v8 + 359) < 0) {
      std::string::size_type v61 = v11->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v61;
    _os_log_impl(&dword_20CD80000, v59, OS_LOG_TYPE_INFO, "Successfully initialized WaveRNN persistent module from: %s", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v62 = v11;
  if (*(char *)(v8 + 359) < 0) {
    uint64_t v62 = (std::string *)v11->__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Successfully initialized WaveRNN persistent module from: %s", v60, v62);
  kdebug_trace();
  if (*((void *)&v119 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
  }
  if ((char)v114 < 0) {
    operator delete(v112);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v101);
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v63 = (std::string::size_type *)(v58 + 8);
  long long v64 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v65 = v58 + 8;
    if (*(char *)(v58 + 31) < 0) {
      std::string::size_type v65 = *v63;
    }
    v66.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v65;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v66.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v64, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(v58 + 31) < 0) {
    std::string v63 = (std::string::size_type *)*v63;
  }
  v67.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v68, v63, (double)((v67.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *std::string v99 = result;
  return result;
}

void sub_20D2E8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 + 359) < 0) {
    operator delete(*a13);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v45 + 328);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  PersistentModule::~PersistentModule(a12);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v45);
  operator delete(v49);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2183F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2183F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2147A8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2147A8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E8A4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2147A8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoWaveRNNPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2147A8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  long long v42 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x170uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C218580;
  unint64_t v10 = (unint64_t)(v8 + 3);
  long long v11 = v42;
  if (*((void *)&v42 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v42, *((std::__shared_weak_count **)&v42 + 1));
  uint64_t v43 = a4;
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)(v9 + 24) = off_26C205140;
  uint64_t v12 = (void **)(v9 + 344);
  *(void *)(v9 + 352) = 0;
  *(void *)(v9 + 360) = 0;
  *(void *)(v9 + 344) = 0;
  {
    operator new();
  }
  size_t v13 = (std::mutex *)EspressoTacotronPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)EspressoTacotronPersistentModule::thread_mutex(void)::mutex);
  SharedObjectPool::get<VoiceConfig>(&v44, (long long **)v11);
  uint64_t v14 = (NeuralTTSUtils *)kdebug_trace();
  if (NeuralTTSUtils::is_amx_available(v14))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_INFO, "AMX is available, use fp16 model.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(6, "AMX is available, use fp16 model.", v16);
    std::string::basic_string[abi:ne180100]<0>(__p, "fp16_model_path");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &buf);
    if (*(char *)(v9 + 367) < 0) {
      operator delete(*v12);
    }
    *(_OWORD *)uint64_t v12 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(void *)(v9 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
  int v17 = *(unsigned __int8 *)(v9 + 367);
  if (*(char *)(v9 + 367) < 0)
  {
    if (*(void *)(v9 + 352))
    {
LABEL_17:
      if ((v17 & 0x80) == 0) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
  }
  else if (*(unsigned char *)(v9 + 367))
  {
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)__p, &buf);
  if (*(char *)(v9 + 367) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v9 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  int v17 = *(unsigned __int8 *)(v9 + 367);
  if ((v17 & 0x80) == 0)
  {
LABEL_18:
    size_t v18 = (unsigned char *)(v9 + 344);
    if (!v17) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
LABEL_26:
  if (!*(void *)(v9 + 352)) {
    goto LABEL_32;
  }
  size_t v18 = *v12;
LABEL_28:
  if (*v18 != 47)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v44 + 40))(&buf);
    if (*(char *)(v9 + 367) < 0) {
      operator delete(*v12);
    }
    *(_OWORD *)uint64_t v12 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(void *)(v9 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
  }
LABEL_32:
  *(void *)(v9 + 320) = espresso_create_context();
  *(void *)(v9 + 328) = 0;
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v21 = (void *)(v9 + 344);
    if (*(char *)(v9 + 367) < 0) {
      std::string::size_type v21 = *v12;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_INFO, "Load tacotron model: %s", (uint8_t *)&buf, 0xCu);
  }
  std::string::size_type v22 = (void *)(v9 + 344);
  if (*(char *)(v9 + 367) < 0) {
    std::string::size_type v22 = *v12;
  }
  Diagnostics::log(6, "Load tacotron model: %s", v20, v22);
  espresso_create_plan();
  int v23 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to load network.");
  if (v23)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v33 = v49;
    std::string::size_type v34 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    long long v36 = __p;
    if (v33 < 0) {
      long long v36 = v34;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v36, v23, status_string);
    MEMORY[0x210558D40](exception, &buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  int v24 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v46, "Unable to build plan.");
  if (v24)
  {
    int v37 = __cxa_allocate_exception(0x10uLL);
    int v38 = v47;
    long long v39 = (void **)v46[0];
    char v40 = (const char *)espresso_get_status_string();
    std::string::size_type v41 = v46;
    if (v38 < 0) {
      std::string::size_type v41 = v39;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v41, v24, v40);
    MEMORY[0x210558D40](v37, &buf);
    __cxa_throw(v37, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  kdebug_trace();
  kdebug_trace();
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  std::mutex::unlock(v13);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v25 = (std::string::size_type *)(a1 + 8);
  int v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v27 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v27 = *v25;
    }
    v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v28.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v25 = (std::string::size_type *)*v25;
  }
  v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v30, v25, (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *uint64_t v43 = result;
  return result;
}

void sub_20D2E92D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 367) < 0) {
    operator delete(*v36);
  }
  PersistentModule::~PersistentModule(v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v33);
  operator delete(v38);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<EspressoTacotronPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<EspressoTacotronPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoTacotronPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214908;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214908;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2E95D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214908;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<EspressoTacotronPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214908;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  long long v80 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x178uLL);
  unint64_t v8 = v7;
  v7[1] = 0;
  uint64_t v7[2] = 0;
  void *v7 = off_26C2182E0;
  unint64_t v9 = v7 + 3;
  if (*((void *)&v80 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v7 + 3, a2, v80, *((std::__shared_weak_count **)&v80 + 1));
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v6.__d_.__rep_;
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  void v8[3] = off_26C204DD8;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_DWORD *)v8 + 88) = 1065353216;
  v8[45] = 0;
  v8[46] = 0;
  SharedObjectPool::get<VoiceConfig>(&v88, (long long **)v80);
  uint64_t v10 = v88;
  uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "vocab_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, __p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v10 + 40))(v86, v10, 1853318509, __p, 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = v86;
    if (v87 < 0) {
      uint64_t v14 = (void **)v86[0];
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_DEFAULT, "Reading vocab file from: %s", (uint8_t *)__p, 0xCu);
  }
  uint64_t v15 = v86;
  if (v87 < 0) {
    uint64_t v15 = (void **)v86[0];
  }
  Diagnostics::log(5, "Reading vocab file from: %s", v13, v15);
  std::ifstream::basic_ifstream((uint64_t *)__p);
  v95[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v95, 1, (uint64_t)v84);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v95);
  *(_OWORD *)long long v81 = 0u;
  long long v82 = 0u;
  int v83 = 1065353216;
  if (v84[0] != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    if (v84[0] > 9uLL) {
      unint64_t v59 = "number";
    }
    else {
      unint64_t v59 = off_2641152A0[v84[0]];
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, v59);
    long long v60 = std::string::insert(&v90, 0, "type must be object, but is ");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    *(void *)&long long v99 = *((void *)&v60->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)buf, exception);
  }
  uint64_t v78 = a1;
  uint64_t v73 = a4;
  unint64_t v74 = (unint64_t)v8;
  unint64_t v75 = (unint64_t)v9;
  uint64_t v76 = (uint64_t)(v8 + 40);
  *(_OWORD *)std::string buf = 0uLL;
  long long v99 = 0uLL;
  float v100 = 1.0;
  std::chrono::steady_clock::time_point v16 = v85 + 1;
  int v17 = (uint64_t *)*v85;
  if ((uint64_t *)*v85 != v85 + 1)
  {
    do
    {
      LODWORD(v92.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>((unsigned char *)v17 + 56, (int *)&v92);
      unint64_t data_low = LODWORD(v92.__r_.__value_.__l.__data_);
      if (*((char *)v17 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v90, (const std::string::value_type *)v17[4], v17[5]);
      }
      else {
        std::string v90 = *(std::string *)(v17 + 4);
      }
      int v91 = data_low;
      unint64_t v19 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v99 + 8, (uint64_t)&v90);
      unint64_t v20 = v19;
      unint64_t v21 = *(void *)&buf[8];
      if (*(void *)&buf[8])
      {
        uint8x8_t v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
        v22.i16[0] = vaddlv_u8(v22);
        unint64_t v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          unint64_t data_low = v19;
          if (v19 >= *(void *)&buf[8]) {
            unint64_t data_low = v19 % *(void *)&buf[8];
          }
        }
        else
        {
          unint64_t data_low = (*(void *)&buf[8] - 1) & v19;
        }
        int v24 = *(unsigned __int8 ***)(*(void *)buf + 8 * data_low);
        if (v24)
        {
          for (uint64_t i = *v24; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v26 = *((void *)i + 1);
            if (v26 == v20)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v100, i + 16, (unsigned __int8 *)&v90))goto LABEL_60; {
            }
              }
            else
            {
              if (v23 > 1)
              {
                if (v26 >= v21) {
                  v26 %= v21;
                }
              }
              else
              {
                v26 &= v21 - 1;
              }
              if (v26 != data_low) {
                break;
              }
            }
          }
        }
      }
      std::string::size_type v27 = (char *)operator new(0x30uLL);
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)&v99;
      v92.__r_.__value_.__s.__data_[16] = 0;
      *(void *)std::string::size_type v27 = 0;
      *((void *)v27 + 1) = v20;
      std::chrono::steady_clock::time_point v28 = (std::string *)(v27 + 16);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v28, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
        *((void *)v27 + 4) = *((void *)&v90.__r_.__value_.__l + 2);
      }
      *((_DWORD *)v27 + 10) = v91;
      v92.__r_.__value_.__s.__data_[16] = 1;
      float v29 = (float)(unint64_t)(*((void *)&v99 + 1) + 1);
      if (!v21 || (float)(v100 * (float)v21) < v29)
      {
        BOOL v30 = (v21 & (v21 - 1)) != 0;
        if (v21 < 3) {
          BOOL v30 = 1;
        }
        unint64_t v31 = v30 | (2 * v21);
        unint64_t v32 = vcvtps_u32_f32(v29 / v100);
        if (v31 <= v32) {
          size_t v33 = v32;
        }
        else {
          size_t v33 = v31;
        }
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>((uint64_t)buf, v33);
        unint64_t v21 = *(void *)&buf[8];
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= *(void *)&buf[8]) {
            unint64_t data_low = v20 % *(void *)&buf[8];
          }
          else {
            unint64_t data_low = v20;
          }
        }
        else
        {
          unint64_t data_low = (*(void *)&buf[8] - 1) & v20;
        }
      }
      std::string::size_type v34 = *(void **)(*(void *)buf + 8 * data_low);
      if (v34)
      {
        *(void *)v92.__r_.__value_.__l.__data_ = *v34;
        *std::string::size_type v34 = v92.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(void *)v92.__r_.__value_.__l.__data_ = v99;
        *(void *)&long long v99 = v92.__r_.__value_.__r.__words[0];
        *(void *)(*(void *)buf + 8 * data_low) = &v99;
        if (*(void *)v92.__r_.__value_.__l.__data_)
        {
          unint64_t v35 = *(void *)(*(void *)v92.__r_.__value_.__l.__data_ + 8);
          if ((v21 & (v21 - 1)) != 0)
          {
            if (v35 >= v21) {
              v35 %= v21;
            }
          }
          else
          {
            v35 &= v21 - 1;
          }
          *(void *)(*(void *)buf + 8 * v35) = v92.__r_.__value_.__r.__words[0];
        }
      }
      ++*((void *)&v99 + 1);
LABEL_60:
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      long long v36 = (uint64_t *)v17[1];
      if (v36)
      {
        do
        {
          int v37 = v36;
          long long v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          int v37 = (uint64_t *)v17[2];
          BOOL v62 = *v37 == (void)v17;
          int v17 = v37;
        }
        while (!v62);
      }
      int v17 = v37;
    }
    while (v37 != v16);
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__move_assign((uint64_t)v81, (uint64_t *)buf);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)buf);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__move_assign(v76, (uint64_t *)v81);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)v81);
  uint64_t v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v38, &v92);
  if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v92.__r_.__value_.__r.__words[2]) == 8)
    {
      long long v39 = &v92;
      goto LABEL_73;
    }
    if (HIBYTE(v92.__r_.__value_.__r.__words[2]) != 10
      || (v92.__r_.__value_.__r.__words[0] == 0x6C66726F736E6574
        ? (BOOL v62 = LOWORD(v92.__r_.__value_.__r.__words[1]) == 30575)
        : (BOOL v62 = 0),
          !v62))
    {
LABEL_140:
      uint64_t v72 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)buf, "Only Tensorflow and Espresso framework are supported.");
      MEMORY[0x210558D40](v72, buf);
      __cxa_throw(v72, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
LABEL_135:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v69 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v69, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", buf, 2u);
    }
    Diagnostics::log(5, "Using Tensorflow inference.", v70);
    uint64_t v71 = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)buf, "Tensorflow is not enabled.");
    MEMORY[0x210558D40](v71, buf);
    __cxa_throw(v71, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v92.__r_.__value_.__l.__size_ != 8)
  {
    if (v92.__r_.__value_.__l.__size_ != 10) {
      goto LABEL_140;
    }
    if (*(void *)v92.__r_.__value_.__l.__data_ != 0x6C66726F736E6574
      || *(_WORD *)(v92.__r_.__value_.__r.__words[0] + 8) != 30575)
    {
      goto LABEL_140;
    }
    goto LABEL_135;
  }
  long long v39 = (std::string *)v92.__r_.__value_.__r.__words[0];
LABEL_73:
  if (v39->__r_.__value_.__r.__words[0] != 0x6F73736572707365) {
    goto LABEL_140;
  }
  char v40 = operator new(0x38uLL);
  v40[1] = 0;
  v40[2] = 0;
  *char v40 = off_26C217C50;
  if (*((void *)&v80 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v80 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  SharedObjectPool::get<VoiceConfig>(&v93, (long long **)v80);
  uint64_t v41 = v93;
  uint64_t v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v42, (std::string *)buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint8_t *, void))(*(void *)v41 + 40))(v81, v41, 1853318509, buf, 0);
  if (SBYTE7(v99) < 0) {
    operator delete(*(void **)buf);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = v81;
    if (SBYTE7(v82) < 0) {
      uint64_t v45 = (void **)v81[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v45;
    _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_DEFAULT, "Create Espresso WordEmbedding model. model_path = %s", buf, 0xCu);
  }
  int64_t v46 = v81;
  if (SBYTE7(v82) < 0) {
    int64_t v46 = (void **)v81[0];
  }
  Diagnostics::log(5, "Create Espresso WordEmbedding model. model_path = %s", v44, v46);
  v40[6] = espresso_create_context();
  v40[5] = espresso_create_plan();
  int v47 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(&v90, "Unable to load network.");
  if (v47)
  {
    std::string v63 = __cxa_allocate_exception(0x10uLL);
    int v64 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
    std::string::size_type v65 = v90.__r_.__value_.__r.__words[0];
    status_string = (const char *)espresso_get_status_string();
    std::chrono::steady_clock::time_point v67 = &v90;
    if (v64 < 0) {
      std::chrono::steady_clock::time_point v67 = (std::string *)v65;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v67, v47, status_string);
    MEMORY[0x210558D40](v63, buf);
    __cxa_throw(v63, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v82) < 0) {
    operator delete(v81[0]);
  }
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  *(void *)&long long v48 = v40 + 3;
  *((void *)&v48 + 1) = v40;
  char v49 = *(std::__shared_weak_count **)(v74 + 368);
  *(_OWORD *)(v74 + 360) = v48;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v85, v84[0]);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2A8];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8]
                                                                                                 + 24);
  MEMORY[0x210558FE0](&__p[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x210559500](&v97);
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v50 = (std::string::size_type *)(a1 + 8);
  uint64_t v51 = a1;
  uint64_t v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v53 = v78 + 8;
    if (*(char *)(v78 + 31) < 0) {
      std::string::size_type v53 = *v50;
    }
    v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v53;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = (double)((v54.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v52, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)__p, 0x16u);
    uint64_t v51 = v78;
  }
  if (*(char *)(v51 + 31) < 0) {
    unint64_t v50 = (std::string::size_type *)*v50;
  }
  v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v56, v50, (double)((v55.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  result.n128_u64[0] = v75;
  result.n128_u64[1] = v74;
  *uint64_t v73 = result;
  return result;
}

void sub_20D2EA3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void **a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v68 - 121) < 0)
  {
    operator delete(*(void **)(v68 - 144));
    if ((v65 & 1) == 0)
    {
LABEL_6:
      if (a48 < 0) {
        operator delete(__p);
      }
      if (a30 < 0) {
        operator delete(a25);
      }
      if (a58) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a58);
      }
      if (a18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a18);
      }
      std::__shared_weak_count::~__shared_weak_count(v67);
      operator delete(v70);
      if (a56 < 0) {
        operator delete(a51);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a34, a33);
      a63 = *MEMORY[0x263F8C2A8];
      *(uint64_t *)((char *)&a63 + *(void *)(a63 - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
      MEMORY[0x210558FE0](&a65);
      std::istream::~istream();
      MEMORY[0x210559500](&STACK[0x2F8]);
      if (a40 < 0) {
        operator delete(a35);
      }
      if (a42) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a42);
      }
      shared_owners = (std::__shared_weak_count *)a15[15].__shared_owners_;
      if (shared_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
      }
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a17);
      PersistentModule::~PersistentModule(a16);
      if (a18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a18);
      }
      std::__shared_weak_count::~__shared_weak_count(a15);
      operator delete(v72);
      if (a18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a18);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v65)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

uint64_t std::__shared_ptr_emplace<WordEmbeddingPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WordEmbeddingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2182E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WordEmbeddingPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2182E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2146F8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2146F8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2EA8FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2146F8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<WordEmbeddingPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2146F8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v21 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x158uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C218510;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v21 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v21, *((std::__shared_weak_count **)&v21 + 1));
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  *(void *)(v9 + 24) = off_26C205060;
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 328) = 0;
  *(_DWORD *)(v9 + 336) = 0;
  SharedObjectPool::get<Database>(buf, v21);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 328);
  *(_OWORD *)(v9 + 320) = *(_OWORD *)buf;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  SharedObjectPool::get<FeatureBook>(buf, v21);
  uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
  *(_DWORD *)(v9 + 336) = *(_DWORD *)(*(void *)buf + 48);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  size_t v13 = (void *)(a1 + 8);
  uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = a4;
    std::chrono::steady_clock::time_point v16 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v16 = (void *)*v13;
    }
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v17.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v15;
  }
  if (*(char *)(a1 + 31) < 0) {
    size_t v13 = (void *)*v13;
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v19, v13, (double)((v18.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D2EACB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  shared_weak_owners = (std::__shared_weak_count *)v11[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v13);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v16);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PreselectStreamPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PreselectStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PreselectStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214858;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214858;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2EAED0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214858;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PreselectStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214858;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v51 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v53.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x1A8uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  uint64_t v7[2] = 0;
  void *v7 = off_26C218BA0;
  unint64_t v9 = v7 + 3;
  long long v10 = v51;
  if (*((void *)&v51 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v7 + 3, a2, v51, *((std::__shared_weak_count **)&v51 + 1));
  int v47 = a4;
  if (*((void *)&v51 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
  }
  unint64_t v52 = (unint64_t)v9;
  *(void *)(v8 + 24) = off_26C205708;
  uint64_t v11 = (void **)(v8 + 400);
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(void *)(v8 + 416) = 0;
  std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
  uint64_t v12 = v10 + 32;
  {
    SharedObjectPool::get<FeatureBook>(&buf, v10);
    size_t v13 = (char *)operator new(0x40uLL);
    uint64_t v14 = (std::__shared_weak_count *)v13;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)size_t v13 = off_26C215BF0;
    long long v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      *(_OWORD *)(v13 + 24) = v15;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      *((void *)v13 + 5) = 0;
      *((void *)v13 + 6) = 0;
      *((void *)v13 + 7) = 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
    else
    {
      *((void *)v13 + 3) = buf.__r_.__value_.__r.__words[0];
      *((_OWORD *)v13 + 2) = 0u;
      *((_OWORD *)v13 + 3) = 0u;
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    if (!v16) {
      operator new();
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C206418;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v14[1];
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v17 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    std::chrono::steady_clock::time_point v18 = *(std::__shared_weak_count **)(v16 + 16);
    *(_OWORD *)(v16 + 8) = v17;
    if (v18)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C206418;
      if (buf.__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2]);
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  long long v48 = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v10 + 56));
  unint64_t v20 = *(std::__shared_weak_count **)(v8 + 360);
  *(_OWORD *)(v8 + 352) = v48;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  SharedObjectPool::get<VoiceConfig>(&v54, (long long **)v10);
  VoiceConfig::get_param<std::string>(&buf, (uint64_t)v54, 1818324583, 0);
  if (*(char *)(v8 + 423) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v8 + 416) = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  SharedObjectPool::get<MDN>(&buf, v10);
  long long v21 = *(std::__shared_weak_count **)(v8 + 328);
  *(_OWORD *)(v8 + 320) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  SharedObjectPool::get<RNN>(&buf, v10);
  uint8x8_t v22 = *(std::__shared_weak_count **)(v8 + 344);
  *(_OWORD *)(v8 + 336) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
  {
    SharedObjectPool::get<MDN>(&buf, v10);
    uint64_t v23 = *(long long **)(buf.__r_.__value_.__r.__words[0] + 264);
    int v24 = (char *)operator new(0x38uLL);
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)int v24 = off_26C2164B0;
    long long v25 = *v23;
    *(_OWORD *)(v24 + 40) = v23[1];
    *(_OWORD *)(v24 + 24) = v25;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    if (!v26) {
      operator new();
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2064D8;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v24 + 24);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v24;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
    long long v27 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    std::chrono::steady_clock::time_point v28 = *(std::__shared_weak_count **)(v26 + 16);
    *(_OWORD *)(v26 + 8) = v27;
    if (v28)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2064D8;
      if (buf.__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2]);
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
  }
  long long v49 = v29;
  if (*((void *)&v29 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v10 + 56));
  BOOL v30 = *(std::__shared_weak_count **)(v8 + 376);
  *(_OWORD *)(v8 + 368) = v49;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
  {
    SharedObjectPool::get<RNN>(&buf, v10);
    if (buf.__r_.__value_.__r.__words[0])
    {
      unint64_t v31 = *(long long **)(buf.__r_.__value_.__r.__words[0] + 264);
      unint64_t v32 = (char *)operator new(0x38uLL);
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = 0;
      *(void *)unint64_t v32 = off_26C2165C8;
      std::string::size_type v33 = (std::string::size_type)(v32 + 24);
      long long v34 = *v31;
      *(_OWORD *)(v32 + 40) = v31[1];
      *(_OWORD *)(v32 + 24) = v34;
    }
    else
    {
      unint64_t v32 = 0;
      std::string::size_type v33 = 0;
    }
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    if (!v35) {
      operator new();
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2064F8;
    buf.__r_.__value_.__l.__size_ = v33;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
    if (v32)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
      long long v36 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    }
    else
    {
      long long v36 = v33;
    }
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    int v37 = *(std::__shared_weak_count **)(v35 + 16);
    *(_OWORD *)(v35 + 8) = v36;
    if (v37)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2064F8;
      if (buf.__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2]);
      }
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
    }
  }
  long long v50 = v38;
  if (*((void *)&v38 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v10 + 56));
  long long v39 = *(std::__shared_weak_count **)(v8 + 392);
  *(_OWORD *)(v8 + 384) = v50;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v40 = (std::string::size_type *)(a1 + 8);
  uint64_t v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v42 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v42 = *v40;
    }
    v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v42;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v43.__d_.__rep_ - v53.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v41, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    char v40 = (std::string::size_type *)*v40;
  }
  v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v45, v40, (double)((v44.__d_.__rep_ - v53.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  result.n128_u64[0] = v52;
  result.n128_u64[1] = v8;
  *int v47 = result;
  return result;
}

void sub_20D2EB8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::recursive_mutex::unlock(v25);
  if (*(char *)(v22 + 423) < 0) {
    operator delete(*v24);
  }
  long long v27 = *(std::__shared_weak_count **)(v22 + 392);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::chrono::steady_clock::time_point v28 = *(std::__shared_weak_count **)(v22 + 376);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  long long v29 = *(std::__shared_weak_count **)(v22 + 360);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  BOOL v30 = *(std::__shared_weak_count **)(v22 + 344);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  unint64_t v31 = *(std::__shared_weak_count **)(v22 + 328);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  PersistentModule::~PersistentModule(a15);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v22);
  operator delete(v32);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D2EB9BC()
{
  if (v0)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
    JUMPOUT(0x20D2EB994);
  }
  JUMPOUT(0x20D2EB99CLL);
}

void sub_20D2EB9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x20D2EB9B4);
  }
  JUMPOUT(0x20D2EB9ACLL);
}

uint64_t std::__shared_ptr_emplace<UnitSelectionFeatureStreamPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214B70;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214B70;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2EBB98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214B70;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<UnitSelectionFeatureStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214B70;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v25 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x160uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *unint64_t v8 = off_26C218158;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v25 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v25, *((std::__shared_weak_count **)&v25 + 1));
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  v9[3] = off_26C204AB0;
  v9[40] = 0;
  v9[41] = 0;
  SharedObjectPool::get<GeneratedPromptDB>(v9 + 42, v25);
  SharedObjectPool::get<VoiceConfig>(&v28, (long long **)v25);
  SharedObjectPool::get<FeatureBook>(&v26, v25);
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v28 + 16))(buf);
  int v11 = *(_DWORD *)(v26 + 48);
  uint64_t v12 = operator new(0x268uLL);
  v12[1] = 0;
  void v12[2] = 0;
  *uint64_t v12 = off_26C215608;
  TAPExtractor::TAPExtractor((TAPExtractor *)(v12 + 3), (const MemoryMap *)buf, v11);
  *(void *)&long long v14 = v13;
  *((void *)&v14 + 1) = v12;
  long long v15 = (std::__shared_weak_count *)v9[41];
  *((_OWORD *)v9 + 20) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*(void *)&v31[4]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v31[4]);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v16 = (void *)(a1 + 8);
  long long v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v18 = v10;
    long long v19 = a4;
    unint64_t v20 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v20 = (void *)*v16;
    }
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)unint64_t v31 = v20;
    *(_WORD *)&v31[8] = 2048;
    *(double *)&v31[10] = (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v19;
    unint64_t v10 = v18;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v16 = (void *)*v16;
  }
  v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v23, v16, (double)((v22.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2EBFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  shared_owners = (std::__shared_weak_count *)v18[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v18[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v26);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

void sub_20D2EC094()
{
  if (v0)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
    JUMPOUT(0x20D2EC06CLL);
  }
  JUMPOUT(0x20D2EC074);
}

void sub_20D2EC0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x20D2EC08CLL);
  }
  JUMPOUT(0x20D2EC084);
}

uint64_t std::__shared_ptr_emplace<PromptStreamPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PromptStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PromptStreamPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214490;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214490;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2EC270(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214490;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<PromptStreamPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214490;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  std::chrono::steady_clock::now();
  long long v4 = (char *)operator new(0x1D0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = off_26C217EF0;
  if (*((void *)&v5 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule((void *)v4 + 3, a2, v5, *((std::__shared_weak_count **)&v5 + 1));
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  *((void *)v4 + 3) = off_26C204690;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *((void *)v4 + 57) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "split_spell");
  __str.__r_.__value_.__s.__data_[0] = 1;
  v4[384] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v7.__r_.__value_.__l.__data_, (unsigned __int8 *)&__str);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_20D2ED42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,std::__shared_weak_count *a62)
{
  if (*(char *)(v66 - 153) < 0) {
    operator delete(*(void **)(v66 - 176));
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }
  if (*(char *)(v66 - 233) < 0) {
    operator delete(*(void **)(v66 - 256));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v62, *(unsigned __int8 *)(v66 - 200));
  *(void *)(v66 - 256) = v63 + 416;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v66 - 256));
  uint64_t v68 = (std::__shared_weak_count *)v64[18].__vftable;
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  shared_owners = (std::__shared_weak_count *)v64[17].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v64[16].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  uint64_t v71 = (std::__shared_weak_count *)v64[15].__shared_weak_owners_;
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  uint64_t v72 = (std::__shared_weak_count *)v64[15].__vftable;
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  uint64_t v73 = (std::__shared_weak_count *)v64[14].__shared_owners_;
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  unint64_t v74 = (std::__shared_weak_count *)v64[13].__shared_weak_owners_;
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  PersistentModule::~PersistentModule(a29);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  std::__shared_weak_count::~__shared_weak_count(v64);
  operator delete(v75);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NashvilleFEPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NashvilleFEPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NashvilleFEPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2141D0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C2141D0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2EDB80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2141D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<NashvilleFEPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2141D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  long long v81 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *uint64_t v8 = off_26C218628;
  unint64_t v10 = (unint64_t)(v8 + 3);
  int v11 = (std::__shared_weak_count *)*((void *)&v81 + 1);
  uint64_t v12 = (long long **)v81;
  if (*((void *)&v81 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModule::PersistentModule(v8 + 3, a2, v81, *((std::__shared_weak_count **)&v81 + 1));
  if (*((void *)&v81 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
  }
  v9[3] = off_26C2051F0;
  v9[40] = 0;
  v9[41] = 0;
  kdebug_trace();
  {
    operator new();
  }
  uint64_t v13 = (std::mutex *)ParallelNeuralAMPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)ParallelNeuralAMPersistentModule::thread_mutex(void)::mutex);
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &v84);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&buf.__r_.__value_.__l.__data_, &v83);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((*((unsigned char *)&v84.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(v84.__r_.__value_.__r.__words[2]) != 8)
    {
      if (HIBYTE(v84.__r_.__value_.__r.__words[2]) != 10) {
        goto LABEL_102;
      }
      if (v84.__r_.__value_.__r.__words[0] != 0x6C66726F736E6574 || LOWORD(v84.__r_.__value_.__r.__words[1]) != 30575) {
        goto LABEL_102;
      }
LABEL_24:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      long long v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Tensorflow inference.", v18);
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Tensorflow is not enabled.");
      MEMORY[0x210558D40](exception, &buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    unint64_t v20 = &v84;
LABEL_31:
    if (v20->__r_.__value_.__r.__words[0] != 0x6F73736572707365) {
      goto LABEL_102;
    }
    long long v82 = v13;
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::chrono::steady_clock::time_point v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_DEFAULT, "Using Espresso inference.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using Espresso inference.", v22);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v83.__r_.__value_.__l.__size_ != 7)
      {
        if (v83.__r_.__value_.__l.__size_ != 9)
        {
          if (v83.__r_.__value_.__l.__size_ != 19) {
            goto LABEL_145;
          }
          uint64_t v23 = (std::string *)v83.__r_.__value_.__r.__words[0];
LABEL_45:
          std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
          std::string::size_type size = v23->__r_.__value_.__l.__size_;
          uint64_t v26 = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 3);
          if (v24 != 0x656C70756F636564 || size != 0x6D61657274735F64 || v26 != 0x676E696D61657274) {
            goto LABEL_145;
          }
LABEL_68:
          uint64_t v32 = operator new(0x50uLL);
          v32[1] = 0;
          v32[2] = 0;
          *uint64_t v32 = off_26C218BD8;
          if (*((void *)&v81 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          SharedObjectPool::get<VoiceConfig>(&v94, v12);
          uint64_t v33 = v94;
          uint64_t v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename_encoder");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v34, &buf);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v33 + 40))(v92, v33, 1885430125, &buf, 0);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          uint64_t v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename_decoder");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v35, &buf);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v33 + 40))(v90, v33, 1885430125, &buf, 0);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          long long v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            long long v38 = v92;
            if (v93 < 0) {
              long long v38 = (void **)v92[0];
            }
            long long v39 = v90;
            if (v91 < 0) {
              long long v39 = (void **)v90[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v39;
            _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEFAULT, "Create Espresso Parallel AM decoupled model. model_encoder_path = %s, model_decoder_path = %s", (uint8_t *)&buf, 0x16u);
          }
          char v40 = v92;
          if (v93 < 0) {
            char v40 = (void **)v92[0];
          }
          uint64_t v41 = v90;
          if (v91 < 0) {
            uint64_t v41 = (void **)v90[0];
          }
          Diagnostics::log(5, "Create Espresso Parallel AM decoupled model. model_encoder_path = %s, model_decoder_path = %s", v37, v40, v41);
          v32[9] = espresso_create_context();
          v32[7] = espresso_create_plan();
          std::string::size_type v42 = v32 + 3;
          v32[8] = espresso_create_plan();
          int v43 = espresso_plan_add_network();
          std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to load encoder network.");
          if (v43)
          {
            uint64_t v66 = __cxa_allocate_exception(0x10uLL);
            int v67 = v89;
            uint64_t v68 = (void **)__p;
            status_string = (const char *)espresso_get_status_string();
            p_p = &__p;
            if (v67 < 0) {
              p_p = v68;
            }
            StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)p_p, v43, status_string);
            MEMORY[0x210558D40](v66, &buf);
            __cxa_throw(v66, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v89 < 0) {
            operator delete(__p);
          }
          int v44 = espresso_plan_add_network();
          std::string::basic_string[abi:ne180100]<0>(v85, "Unable to load decoder network.");
          if (v44)
          {
            uint64_t v71 = __cxa_allocate_exception(0x10uLL);
            int v72 = v86;
            uint64_t v73 = (void **)v85[0];
            unint64_t v74 = (const char *)espresso_get_status_string();
            unint64_t v75 = v85;
            if (v72 < 0) {
              unint64_t v75 = v73;
            }
            StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v75, v44, v74);
            MEMORY[0x210558D40](v71, &buf);
            __cxa_throw(v71, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
          }
          if (v86 < 0) {
            operator delete(v85[0]);
          }
          if (v91 < 0) {
            operator delete(v90[0]);
          }
          if (v93 < 0) {
            operator delete(v92[0]);
          }
          uint64_t v45 = v95;
          if (!v95) {
            goto LABEL_98;
          }
          goto LABEL_97;
        }
        if (*(void *)v83.__r_.__value_.__l.__data_ == 0x656C70756F636564
          && *(unsigned char *)(v83.__r_.__value_.__r.__words[0] + 8) == 100)
        {
          goto LABEL_68;
        }
LABEL_145:
        int v65 = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to load espresso libarary.");
        MEMORY[0x210558D40](v65, &buf);
        __cxa_throw(v65, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (*(_DWORD *)v83.__r_.__value_.__l.__data_ != 1634100580
        || *(_DWORD *)(v83.__r_.__value_.__r.__words[0] + 3) != 1953264993)
      {
        goto LABEL_145;
      }
    }
    else
    {
      if (HIBYTE(v83.__r_.__value_.__r.__words[2]) != 7)
      {
        if (HIBYTE(v83.__r_.__value_.__r.__words[2]) != 9)
        {
          if (HIBYTE(v83.__r_.__value_.__r.__words[2]) != 19) {
            goto LABEL_145;
          }
          uint64_t v23 = &v83;
          goto LABEL_45;
        }
        if (v83.__r_.__value_.__r.__words[0] == 0x656C70756F636564 && v83.__r_.__value_.__s.__data_[8] == 100) {
          goto LABEL_68;
        }
        goto LABEL_145;
      }
      if (LODWORD(v83.__r_.__value_.__l.__data_) != 1634100580
        || *(_DWORD *)((char *)v83.__r_.__value_.__r.__words + 3) != 1953264993)
      {
        goto LABEL_145;
      }
    }
    uint64_t v32 = operator new(0x38uLL);
    v32[1] = 0;
    v32[2] = 0;
    *uint64_t v32 = off_26C2189A8;
    if (*((void *)&v81 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    SharedObjectPool::get<VoiceConfig>(&__p, v12);
    uint64_t v58 = __p;
    uint64_t v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_filename");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v59, &buf);
    (*(void (**)(void **__return_ptr, void *, uint64_t, std::string *, void))(*(void *)v58 + 40))(v92, v58, 1885430125, &buf, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v62 = v92;
      if (v93 < 0) {
        BOOL v62 = (void **)v92[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
      _os_log_impl(&dword_20CD80000, v60, OS_LOG_TYPE_DEFAULT, "Create Espresso Parallel AM model. model_path = %s", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v63 = v92;
    if (v93 < 0) {
      uint64_t v63 = (void **)v92[0];
    }
    Diagnostics::log(5, "Create Espresso Parallel AM model. model_path = %s", v61, v63);
    v32[6] = espresso_create_context();
    std::string::size_type v42 = v32 + 3;
    v32[5] = espresso_create_plan();
    int v64 = espresso_plan_add_network();
    std::string::basic_string[abi:ne180100]<0>(v90, "Unable to load network.");
    if (v64)
    {
      uint64_t v76 = __cxa_allocate_exception(0x10uLL);
      int v77 = v91;
      uint64_t v78 = (void **)v90[0];
      uint64_t v79 = (const char *)espresso_get_status_string();
      long long v80 = v90;
      if (v77 < 0) {
        long long v80 = v78;
      }
      StringFormatter::StringFormatter((StringFormatter *)&buf, "%s Error: %d, %s", (const char *)v80, v64, v79);
      MEMORY[0x210558D40](v76, &buf);
      __cxa_throw(v76, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    if (v91 < 0) {
      operator delete(v90[0]);
    }
    if (v93 < 0) {
      operator delete(v92[0]);
    }
    uint64_t v45 = v88;
    if (!v88) {
      goto LABEL_98;
    }
LABEL_97:
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
LABEL_98:
    if (*((void *)&v81 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
    }
    *(void *)&long long v46 = v42;
    *((void *)&v46 + 1) = v32;
    int v47 = (std::__shared_weak_count *)v9[41];
    *((_OWORD *)v9 + 20) = v46;
    uint64_t v13 = v82;
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    goto LABEL_102;
  }
  if (v84.__r_.__value_.__l.__size_ == 8)
  {
    unint64_t v20 = (std::string *)v84.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  if (v84.__r_.__value_.__l.__size_ == 10
    && *(void *)v84.__r_.__value_.__l.__data_ == 0x6C66726F736E6574
    && *(_WORD *)(v84.__r_.__value_.__r.__words[0] + 8) == 30575)
  {
    goto LABEL_24;
  }
LABEL_102:
  kdebug_trace();
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v13);
  if (*((void *)&v81 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v48 = (std::string::size_type *)(a1 + 8);
  long long v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v50 = v10;
    long long v51 = a4;
    std::string::size_type v52 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v52 = *v48;
    }
    v53.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v52;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v53.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v49, OS_LOG_TYPE_INFO, "PersistentModuleFactory Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v51;
    unint64_t v10 = v50;
    int v11 = (std::__shared_weak_count *)*((void *)&v81 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    long long v48 = (std::string::size_type *)*v48;
  }
  v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "PersistentModuleFactory Init latency (%s): %.3f s", v55, v48, (double)((v54.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_20D2EEA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, long long a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  shared_weak_owners = (std::__shared_weak_count *)v49[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  PersistentModule::~PersistentModule(v50);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::~__shared_weak_count(v49);
  operator delete(v53);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ParallelNeuralAMPersistentModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ParallelNeuralAMPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ParallelNeuralAMPersistentModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214960;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_26C214960;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D2EEF04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214960;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void PersistentModuleFactory::register_module<ParallelNeuralAMPersistentModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C214960;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<PersistentModuleFactory>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_26C203A00;
  long long v3 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::~__hash_table(a1 + 72);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::~__hash_table(a1 + 32);
}

void std::__shared_ptr_emplace<PersistentModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2176A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PersistentModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2176A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PersistentModuleFactory::load_from_config(void (***a1)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void), uint64_t a2, uint64_t *a3)
{
  *(void *)((char *)&v44[1] + 4) = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2 == 1
    && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*(void *)(a2 + 8), "pipeline"))
  {
    uint64_t v22 = a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pipeline");
    uint64_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at((unsigned __int8 *)a2, (const void **)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v41, v6);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p);
    }
    std::string __p = v41;
    int v37 = 0;
    long long v38 = 0;
    uint64_t v39 = 0;
    unint64_t v40 = 0x8000000000000000;
    if (v41[0])
    {
      if (v41[0] == 2)
      {
        long long v38 = *v42;
      }
      else if (v41[0] == 1)
      {
        int v37 = *v42;
      }
      else
      {
        unint64_t v40 = 0;
      }
    }
    else
    {
      unint64_t v40 = 1;
    }
    while (1)
    {
      uint64_t v34 = 0;
      *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = 0uLL;
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      unint64_t v35 = 0x8000000000000000;
      if (v41[0] == 2)
      {
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)v42[1];
      }
      else if (v41[0] == 1)
      {
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)(v42 + 1);
      }
      else
      {
        unint64_t v35 = 1;
      }
      if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v33))
      {
        break;
      }
      unint64_t v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      unint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v9, "id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v10, &v33);
      std::string::basic_string[abi:ne180100]<0>(&v28, "params");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, 0, 0, 0, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((char *)v9, (const void **)&v28, buf, (uint64_t)v31);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)v44 + 4), buf[0]);
      if (v30 < 0) {
        operator delete(v28);
      }
      long long v27 = 0;
      char v26 = 3;
      long long v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v33);
      int v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "id");
      int v12 = *(unsigned __int8 *)v11;
      *(unsigned char *)int v11 = v26;
      char v26 = v12;
      uint64_t v13 = (uint64_t *)v11[1];
      v11[1] = (uint64_t)v27;
      long long v27 = (std::string *)v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27, v12);
      uint64_t v14 = (std::__shared_weak_count *)a3[1];
      uint64_t v24 = *a3;
      long long v25 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (**a1)(&v28, a1, &v33, v31, &v24, 0);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (!v28)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        long long v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          long long v17 = &v33;
          if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          v44[0] = v17;
          _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEBUG, "WARN: Persistent Module name '%s' can't be initialized. Skip.", buf, 0xCu);
        }
        unint64_t v18 = &v33;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "WARN: Persistent Module name '%s' can't be initialized. Skip.", v16, v18);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
    }
    if (*(unsigned char *)v22 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [11]>(*(void *)(v22 + 8)))
    {
      uint64_t v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v22, "connection");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v28, v19);
      std::string __p = &v28;
      int v37 = 0;
      long long v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0x8000000000000000;
      if ((_BYTE)v28)
      {
        if (v28 == 2)
        {
          long long v38 = v29->__vftable;
        }
        else if (v28 == 1)
        {
          int v37 = v29->__vftable;
        }
        else
        {
          unint64_t v40 = 0;
        }
LABEL_52:
        while (1)
        {
          uint64_t v34 = 0;
          *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = 0uLL;
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
          unint64_t v35 = 0x8000000000000000;
          if (v28 == 2)
          {
            v33.__r_.__value_.__r.__words[2] = v29->__shared_owners_;
          }
          else if (v28 == 1)
          {
            v33.__r_.__value_.__l.__size_ = (std::string::size_type)&v29->__shared_owners_;
          }
          else
          {
            unint64_t v35 = 1;
          }
          if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&v33))
          {
            break;
          }
          unint64_t v20 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
          std::chrono::steady_clock::time_point v21 = (std::__shared_weak_count *)a3[1];
          v23[0] = *a3;
          v23[1] = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          PersistentModuleFactory::load_from_config(a1, v20, v23);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29, v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42, v41[0]);
        return;
      }
    }
    else
    {
      LOBYTE(v28) = 0;
      long long v29 = 0;
      std::string __p = &v28;
      int v37 = 0;
      long long v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0x8000000000000000;
    }
    unint64_t v40 = 1;
    goto LABEL_52;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_DEFAULT, "No shared module found in config, skip.", (uint8_t *)&__p, 2u);
  }
  Diagnostics::log(5, "No shared module found in config, skip.", v8);
}

void sub_20D2EF698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, *(unsigned __int8 *)(v42 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2 = (void *)(a1 + 8);
  long long v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  while (std::string::compare((const std::string *)(v3 + 4), __s) > 0)
  {
    uint64_t v2 = v3;
LABEL_6:
    long long v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (std::string::compare((const std::string *)(v3 + 4), __s) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = *v3;
  std::chrono::steady_clock::time_point v7 = v3;
  if (*v3)
  {
    std::chrono::steady_clock::time_point v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), __s);
      unint64_t v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        unint64_t v9 = (uint64_t *)v6;
        std::chrono::steady_clock::time_point v7 = (void *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), __s);
      int v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        int v12 = (uint64_t *)v10;
        uint64_t v2 = (void *)v10;
      }
      uint64_t v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        std::chrono::steady_clock::time_point v7 = v14;
      }
      while (!v15);
    }
    ++result;
    std::chrono::steady_clock::time_point v7 = v14;
  }
  while (v14 != v2);
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(unsigned __int8 *a1, const void **a2)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v5 = *a1;
    if (v5 > 9) {
      uint64_t v6 = "number";
    }
    else {
      uint64_t v6 = off_2641152A0[v5];
    }
    std::string::basic_string[abi:ne180100]<0>(&v9, v6);
    std::chrono::steady_clock::time_point v7 = std::string::insert(&v9, 0, "cannot use at() with ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
    long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(304, (uint64_t)&v10, exception);
  }
  return std::map<std::string,std::string>::at(*((void *)a1 + 1), a2);
}

void sub_20D2EF99C(uint64_t a1, std::string *a2, long long a3)
{
}

void sub_20D2EFA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_20D2EFA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [11]>(uint64_t a1)
{
  int v1 = (void *)(a1 + 8);
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  while (std::string::compare((const std::string *)(v2 + 4), "connection") > 0)
  {
    int v1 = v2;
LABEL_6:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (std::string::compare((const std::string *)(v2 + 4), "connection") < 0)
  {
    ++v2;
    goto LABEL_6;
  }
  uint64_t v4 = *v2;
  unint64_t v5 = v2;
  if (*v2)
  {
    unint64_t v5 = v2;
    do
    {
      int v6 = std::string::compare((const std::string *)(v4 + 32), "connection");
      std::chrono::steady_clock::time_point v7 = (uint64_t *)(v4 + 8);
      if (v6 >= 0)
      {
        std::chrono::steady_clock::time_point v7 = (uint64_t *)v4;
        unint64_t v5 = (void *)v4;
      }
      uint64_t v4 = *v7;
    }
    while (*v7);
  }
  uint64_t v8 = v2[1];
  if (v8)
  {
    do
    {
      int v9 = std::string::compare((const std::string *)(v8 + 32), "connection");
      long long v10 = (uint64_t *)(v8 + 8);
      if (v9 > 0)
      {
        long long v10 = (uint64_t *)v8;
        int v1 = (void *)v8;
      }
      uint64_t v8 = *v10;
    }
    while (*v10);
  }
  if (v5 == v1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    std::string::size_type v11 = (void *)v5[1];
    if (v11)
    {
      do
      {
        int v12 = v11;
        std::string::size_type v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        int v12 = (void *)v5[2];
        BOOL v13 = *v12 == (void)v5;
        unint64_t v5 = v12;
      }
      while (!v13);
    }
    ++result;
    unint64_t v5 = v12;
  }
  while (v12 != v1);
  return result;
}

unsigned char *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*(uint64_t a1)
{
  uint64_t result = *(unsigned char **)a1;
  int v3 = *result;
  if (v3 == 1) {
    return (unsigned char *)(*(void *)(a1 + 8) + 56);
  }
  if (v3 == 2) {
    return *(unsigned char **)(a1 + 16);
  }
  if (!*result)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v6, exception);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v6, v4);
  }
  return result;
}

void sub_20D2EFD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    uint64_t v8 = a2 + 16;
    uint64_t v9 = 32 * a3;
    while (**(unsigned char **)v8 == 2)
    {
      uint64_t v11 = *(void *)(*(void *)v8 + 8);
      long long v10 = *(unsigned char **)v11;
      if (*(void *)(v11 + 8) - *(void *)v11 != 32 || *v10 != 3) {
        break;
      }
      v8 += 32;
      v9 -= 32;
      if (!v9) {
        goto LABEL_7;
      }
    }
    int v12 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_16:
      if (a5 == 2) {
        int v22 = 0;
      }
      else {
        int v22 = v12;
      }
      if (a5 != 1) {
        LOBYTE(v12) = 1;
      }
      if ((v12 & 1) == 0)
      {
        exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v32, "cannot create object from initializer list");
        nlohmann::detail::type_error::create(301, (uint64_t)&v32, exception);
      }
      if (!v22) {
        goto LABEL_23;
      }
LABEL_9:
      *(unsigned char *)a1 = 1;
      BOOL v13 = operator new(0x18uLL);
      unint64_t v13[2] = 0;
      v13[1] = 0;
      *BOOL v13 = v13 + 1;
      *(void *)(a1 + 8) = v13;
      if (a3)
      {
        uint64_t v14 = (char *)(a2 + 24);
        uint64_t v15 = 32 * a3;
        do
        {
          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v32, *((void *)v14 - 1), *v14);
          char v16 = *(uint64_t ***)(a1 + 8);
          uint64_t v17 = *v33[0];
          unint64_t v18 = *(const void ***)(*v33[0] + 8);
          uint64_t v19 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v16, &v37, v18);
          if (!*v19)
          {
            unint64_t v20 = operator new(0x48uLL);
            long long v21 = *(_OWORD *)v18;
            v20[6] = v18[2];
            *((_OWORD *)v20 + 2) = v21;
            v18[1] = 0;
            v18[2] = 0;
            *unint64_t v18 = 0;
            *((unsigned char *)v20 + 56) = *(unsigned char *)(v17 + 16);
            v20[8] = *(void *)(v17 + 24);
            *(unsigned char *)(v17 + 16) = 0;
            *(void *)(v17 + 24) = 0;
            std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v16, v37, v19, v20);
          }
          v14 += 32;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v33, v32);
          v15 -= 32;
        }
        while (v15);
      }
      return a1;
    }
  }
  else
  {
LABEL_7:
    int v12 = 1;
    if ((a4 & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (v12) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v23 = a2 + 32 * a3;
  *(unsigned char *)a1 = 2;
  uint64_t v24 = operator new(0x18uLL);
  long long v25 = v24;
  v24[1] = 0;
  v24[2] = 0;
  *uint64_t v24 = 0;
  if (a2 != v23)
  {
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](v24, (32 * a3) >> 5);
    uint64_t v26 = v25[1];
    uint64_t v35 = v26;
    uint64_t v36 = v26;
    uint64_t v32 = v25 + 2;
    v33[0] = &v35;
    v33[1] = &v36;
    char v34 = 0;
    if (a3)
    {
      long long v27 = (char *)(a2 + 24);
      uint64_t v28 = 32 * a3;
      uint64_t v29 = v26;
      do
      {
        nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v37, *((void *)v27 - 1), *v27);
        v27 += 32;
        *(unsigned char *)uint64_t v29 = v37;
        *(void *)(v29 + 8) = v38;
        LOBYTE(v37) = 0;
        long long v38 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v38, 0);
        uint64_t v29 = v36 + 16;
        v36 += 16;
        v28 -= 32;
      }
      while (v28);
    }
    else
    {
      uint64_t v29 = v26;
    }
    char v34 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v32);
    v25[1] = v29;
  }
  *(void *)(a1 + 8) = v25;
  return a1;
}

void sub_20D2F0068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a1, a2);
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  return a1;
}

void PersistentModuleFactory::switch_module_mode_from_config(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2 != 1
    || !std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*(void *)(a2 + 8), "pipeline"))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_DEFAULT, "No shared module found in config, skip.", buf, 2u);
    }
    Diagnostics::log(5, "No shared module found in config, skip.", v10);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at((unsigned __int8 *)a2, (const void **)buf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v57, v8);
  if (SHIBYTE(v54) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)std::string buf = v57;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  unint64_t v56 = 0x8000000000000000;
  if (v57[0])
  {
    if (v57[0] == 2)
    {
      uint64_t v54 = *v58;
    }
    else if (v57[0] == 1)
    {
      uint64_t v53 = *v58;
    }
    else
    {
      unint64_t v56 = 0;
    }
  }
  else
  {
    unint64_t v56 = 1;
  }
  uint64_t v36 = &v58;
  while (1)
  {
    uint64_t v50 = 0;
    *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    unint64_t v51 = 0x8000000000000000;
    if (v57[0] == 2)
    {
      v49.__r_.__value_.__r.__words[2] = v58[1];
    }
    else if (v57[0] == 1)
    {
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 1);
    }
    else
    {
      unint64_t v51 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v49))
    {
      break;
    }
    uint64_t v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    int v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v11, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v12, &v49);
    if (*((char *)a4 + 23) >= 0) {
      size_t v13 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v13 = (size_t)a4[1];
    }
    if (v13)
    {
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + 7);
      if (v48 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v15 = a4;
      }
      else {
        uint64_t v15 = *a4;
      }
      memmove(p_p, v15, v13);
      strcpy((char *)p_p + v13, "_params");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "params");
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)&v49)&& *v11 == 1&& *((void *)v11 + 1) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)v11 + 1), (const void **)&__p))
    {
      int v44 = &v49;
      uint64_t v16 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)&v49, (long long **)&v44)+ 5);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 295);
      size_t v18 = *(void *)(v16 + 280);
      if ((v17 & 0x80u) == 0) {
        uint64_t v19 = (const void *)*(unsigned __int8 *)(v16 + 295);
      }
      else {
        uint64_t v19 = *(const void **)(v16 + 280);
      }
      unint64_t v20 = (const void *)*((unsigned __int8 *)a4 + 23);
      int v21 = (char)v20;
      if ((char)v20 < 0) {
        unint64_t v20 = a4[1];
      }
      if (v19 == v20)
      {
        int v22 = (const void **)(v16 + 272);
        if (v21 >= 0) {
          uint64_t v23 = (unsigned __int8 *)a4;
        }
        else {
          uint64_t v23 = (unsigned __int8 *)*a4;
        }
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp(*v22, v23, v18)) {
            goto LABEL_71;
          }
        }
        else
        {
          if (!v17) {
            goto LABEL_71;
          }
          while (*(unsigned __int8 *)v22 == *v23)
          {
            int v22 = (const void **)((char *)v22 + 1);
            ++v23;
            if (!--v17) {
              goto LABEL_71;
            }
          }
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v42, 0, 0, 0, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v11, (const void **)&__p, (unsigned __int8 *)&v42, (uint64_t)&v44);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v43, v42);
      uint64_t v41 = 0;
      char v40 = 3;
      uint64_t v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v49);
      uint64_t v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v44, "id");
      int v25 = *(unsigned __int8 *)v24;
      *(unsigned char *)uint64_t v24 = v40;
      char v40 = v25;
      uint64_t v26 = (uint64_t *)v24[1];
      v24[1] = (uint64_t)v41;
      uint64_t v41 = (std::string *)v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v41, v25);
      long long v27 = (std::__shared_weak_count *)a3[1];
      uint64_t v38 = *a3;
      uint64_t v39 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (**(void (***)(uint64_t *__return_ptr, uint64_t, std::string *, std::string **, uint64_t *, uint64_t))a1)(&v42, a1, &v49, &v44, &v38, 1);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      uint64_t v28 = v42;
      if (!v42)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v31 = &v49;
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v59 = 136315138;
          long long v60 = v31;
          _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_DEBUG, "WARN: Persistent Module name '%s' can't be initialized. Skip.", v59, 0xCu);
        }
        uint64_t v32 = &v49;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "WARN: Persistent Module name '%s' can't be initialized. Skip.", v30, v32, v36);
        uint64_t v28 = v42;
      }
      std::string::operator=((std::string *)(v28 + 272), (const std::string *)a4);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v45, v44);
    }
LABEL_71:
    if (v48 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)a2 == 1
    && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [11]>(*(void *)(a2 + 8)))
  {
    uint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "connection");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, v33);
    *(void *)std::string buf = &__p;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0x8000000000000000;
    if ((_BYTE)__p)
    {
      if (__p == 2)
      {
        uint64_t v54 = *v47;
      }
      else if (__p == 1)
      {
        uint64_t v53 = *v47;
      }
      else
      {
        unint64_t v56 = 0;
      }
      goto LABEL_84;
    }
  }
  else
  {
    LOBYTE(__p) = 0;
    int v47 = 0;
    *(void *)std::string buf = &__p;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0x8000000000000000;
  }
  unint64_t v56 = 1;
LABEL_84:
  while (1)
  {
    uint64_t v50 = 0;
    *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    unint64_t v51 = 0x8000000000000000;
    if (__p == 2)
    {
      v49.__r_.__value_.__r.__words[2] = v47[1];
    }
    else if (__p == 1)
    {
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)(v47 + 1);
    }
    else
    {
      unint64_t v51 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v49))
    {
      break;
    }
    char v34 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    uint64_t v35 = (std::__shared_weak_count *)a3[1];
    v37[0] = *a3;
    v37[1] = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    PersistentModuleFactory::switch_module_mode_from_config(a1, v34, v37, a4);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v47, __p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v36, v57[0]);
}

void sub_20D2F0844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a10, *(unsigned __int8 *)(v38 - 128));
  _Unwind_Resume(a1);
}

void SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D2F09E0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AudioConnection::should_consume_data(uint64_t a1, uint64_t a2)
{
}

uint64_t _SiriTTSVocalizerCriticalSectionImplLeave(pthread_mutex_t *a1)
{
  if (a1 && pthread_mutex_unlock(a1)) {
    return 2147483918;
  }
  else {
    return 0;
  }
}

uint64_t _SiriTTSVocalizerCriticalSectionImplEnter(pthread_mutex_t *a1)
{
  if (a1 && pthread_mutex_lock(a1)) {
    return 2147483918;
  }
  else {
    return 0;
  }
}

uint64_t _SiriTTSVocalizerCriticalSectionImplClose(pthread_mutex_t *a1)
{
  if (a1)
  {
    pthread_mutex_destroy(a1);
    MEMORY[0x2105595E0](a1, 0x1000C40FA0F61DDLL);
  }
  return 0;
}

uint64_t _SiriTTSVocalizerCriticalSectionImplOpen(void *a1, void *a2, void **a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a3)
  {
    pthread_mutexattr_init(&v4);
    pthread_mutexattr_settype(&v4, 2);
    operator new();
  }
  return 2147483655;
}

void LPCFilterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(void *)(*(void *)v4 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)v6)
  {
    uint64_t v7 = *(void *)(a1 + 272);
    uint64_t v8 = *(void *)(v7 + 112);
    v7 += 112;
    *(void *)(v7 - 16) = *(void *)(v7 - 24);
    *(void *)(v7 + 8) = v8;
    unint64_t v9 = *(int *)(v7 - 48) - (uint64_t)*(int *)(v7 - 40);
    LODWORD(v155) = 0;
    std::vector<float>::resize(v7, v9, &v155);
  }
  long long v126 = a2;
  uint64_t v127 = a1;
  int v128 = v5;
  long long v10 = *(int **)(a1 + 272);
  std::vector<float>::vector(&v151, v10[16]);
  unint64_t v11 = *v10 + 1;
  LODWORD(v155) = 0;
  std::vector<float>::vector(&v149, v11, &v155);
  unint64_t v12 = *v10 + 1;
  LODWORD(v155) = 0;
  std::vector<float>::vector(v148, v12, &v155);
  float __dst[1] = 0;
  uint64_t v135 = 0;
  __dst[0] = 0;
  uint64_t v13 = *(void *)(v6 + 56);
  if (*((unsigned char *)v10 + 60))
  {
    uint64_t v14 = *(float **)(v6 + 64);
    if ((float *)v13 != v14)
    {
      uint64_t v15 = *(float **)(v6 + 56);
      do
      {
        *uint64_t v15 = *v15 / 32767.0;
        ++v15;
      }
      while (v15 != v14);
    }
  }
  uint64_t v16 = (uint64_t)(v10 + 22);
  uint64_t v125 = v6 + 56;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v6 + 56, v13, *((char **)v10 + 11), *((char **)v10 + 12), (uint64_t)(*((void *)v10 + 12) - *((void *)v10 + 11)) >> 2);
  uint64_t v17 = *((void *)v10 + 11);
  *((void *)v10 + 12) = v17;
  unint64_t v18 = v10[16];
  uint64_t v20 = *(void *)(v6 + 56);
  uint64_t v19 = *(char **)(v6 + 64);
  if (v18 <= (uint64_t)&v19[-v20] >> 2)
  {
    int v22 = 0;
    uint64_t v129 = v6;
    do
    {
      if (v18)
      {
        memmove((void *)v151, (const void *)(v20 + 4 * v22), 4 * (int)v18);
        uint64_t v23 = v10[16];
        uint64_t v24 = (float *)v151;
        if ((int)v23 >= 1)
        {
          unint64_t v25 = 0;
          uint64_t v26 = *((void *)v10 + 17);
          uint64_t v27 = 4 * v23;
          do
          {
            v24[v25 / 4] = *(float *)(v26 + v25) * v24[v25 / 4];
            v25 += 4;
          }
          while (v27 != v25);
        }
      }
      else
      {
        uint64_t v24 = (float *)v151;
      }
      float v28 = 0.0;
      while (v24 != *((float **)&v151 + 1))
      {
        float v29 = *v24++;
        float v28 = v29 * v29 + v28;
      }
      unint64_t v30 = *v10 + 1;
      LODWORD(v155) = 0;
      std::vector<float>::vector(v154, v30, &v155);
      unint64_t v31 = *v10 + ((uint64_t)(*((void *)&v151 + 1) - v151) >> 2) + 1;
      LODWORD(v146) = 0;
      std::vector<float>::vector(&v155, v31, &v146);
      uint64_t v32 = v151;
      if (*((void *)&v151 + 1) == (void)v151)
      {
        uint64_t v33 = (const float *)v151;
      }
      else
      {
        memmove(v155, (const void *)v151, *((void *)&v151 + 1) - v151);
        uint64_t v32 = *((void *)&v151 + 1);
        uint64_t v33 = (const float *)v151;
      }
      vDSP_conv((const float *)v155, 1, v33, 1, *(float **)v154, 1, (uint64_t)(*(void *)&v154[8] - *(void *)v154) >> 2, (v32 - (uint64_t)v33) >> 2);
      if (v155)
      {
        uint64_t v156 = v155;
        operator delete(v155);
      }
      char v34 = *(float **)v154;
      if (**(float **)v154 == 0.0)
      {
        LODWORD(v155) = 0;
        std::vector<float>::vector(v154, (uint64_t)(*(void *)&v154[8] - *(void *)v154) >> 2, &v155);
        **(_DWORD **)long long v154 = 1065353216;
      }
      else
      {
        int v35 = *v10;
        unint64_t v36 = *v10 + 1;
        std::vector<float>::vector(v154, v36);
        std::vector<float>::vector(&v155, v36);
        uint64_t v37 = *(_DWORD **)v154;
        **(_DWORD **)long long v154 = 1065353216;
        uint64_t v38 = v155;
        *(_DWORD *)int v155 = 1065353216;
        uint64_t v39 = (char *)v148[0];
        *(_DWORD *)v148[0] = 0;
        if (v35 >= 1)
        {
          uint64_t v40 = 0;
          float v41 = *v34;
          unint64_t v42 = 1;
          do
          {
            if (v42 < 2)
            {
              float v51 = v34[v42] / v41;
              char v48 = (float *)&v39[4 * v42];
              *char v48 = v51;
              *(float *)&v37[v42] = v51;
            }
            else
            {
              float v43 = 0.0;
              int v44 = (float *)(v38 + 4);
              uint64_t v45 = v40;
              do
              {
                float v46 = *v44++;
                float v43 = v43 + (float)(v46 * *(float *)((char *)v34 + v45));
                v45 -= 4;
              }
              while (v45);
              float v47 = (float)(v34[v42] - v43) / v41;
              char v48 = (float *)&v39[4 * v42];
              *char v48 = v47;
              *(float *)&v37[v42] = v47;
              uint64_t v49 = 1;
              uint64_t v50 = v40;
              do
              {
                *(float *)&v37[v49] = *(float *)&v38[v49 * 4] - (float)(*v48 * *(float *)&v38[v50]);
                ++v49;
                v50 -= 4;
              }
              while (v50);
            }
            float v52 = 1.0 - (float)(*v48 * *v48);
            uint64_t v53 = v37;
            uint64_t v54 = v38;
            uint64_t v55 = v36;
            do
            {
              int v56 = *v53++;
              *(_DWORD *)uint64_t v54 = v56;
              v54 += 4;
              --v55;
            }
            while (v55);
            float v41 = v41 * v52;
            ++v42;
            v40 += 4;
          }
          while (v42 != v36);
          uint64_t v57 = v36 - 1;
          uint64_t v58 = (float *)(v37 + 1);
          do
          {
            *uint64_t v58 = -*v58;
            ++v58;
            --v57;
          }
          while (v57);
        }
        *uint64_t v37 = 1065353216;
        uint64_t v156 = v38;
        operator delete(v38);
      }
      if (v149)
      {
        *(void *)&long long v150 = v149;
        operator delete(v149);
      }
      uint64_t v59 = *(float **)v154;
      uint64_t v149 = *(void **)v154;
      long long v150 = *(_OWORD *)&v154[8];
      long long v60 = *(float **)&v154[8];
      while (v59 != v60)
      {
        if (fabsf(*v59) == INFINITY) {
          *uint64_t v59 = 0.0;
        }
        ++v59;
      }
      unint64_t v61 = *v10 + 1;
      LODWORD(v155) = 0;
      std::vector<float>::vector(&v146, v61, &v155);
      LODWORD(v155) = 0;
      std::vector<float>::vector(&__A, ((uint64_t)(v150 - (void)v149) >> 2) + 2, &v155);
      uint64_t v62 = *v10;
      if ((v62 & 0x80000000) == 0)
      {
        uint64_t v63 = (float *)v149;
        int v64 = (float *)*((void *)v10 + 4);
        int v65 = (float *)v146;
        uint64_t v66 = (float *)*((void *)v10 + 1);
        uint64_t v67 = v62 + 1;
        uint64_t v68 = __A + 1;
        do
        {
          float v69 = *v64++;
          *v65++ = *v63 * v69;
          float v70 = *v63++;
          float v71 = v70;
          float v72 = *v66++;
          *v68++ = v71 * v72;
          --v67;
        }
        while (v67);
      }
      float v73 = *((float *)v10 + 14);
      float v74 = *((float *)v148[0] + 1);
      unint64_t v75 = operator new(8uLL);
      *(_DWORD *)unint64_t v75 = 1065353216;
      *((float *)v75 + 1) = -(float)(v73 * v74);
      *(_DWORD *)long long v154 = 0;
      std::vector<float>::vector(&v155, v145 - __A - 1, v154);
      vDSP_conv(__A, 1, (const float *)v75 + 1, -1, (float *)v155, 1, (v156 - v155) >> 2, 2uLL);
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      uint64_t v139 = 0;
      int v131 = v155;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v139, v155, (uint64_t)v156, (v156 - v155) >> 2);
      std::string __p = 0;
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v146, (uint64_t)v147, (v147 - (unsigned char *)v146) >> 2);
      int v155 = 0;
      uint64_t v156 = 0;
      uint64_t v157 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v155, __p, (uint64_t)v137, (v137 - (unsigned char *)__p) >> 2);
      memset(v154, 0, sizeof(v154));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v154, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 2);
      if (v155 != v156)
      {
        uint64_t v76 = v156 - 4;
        if (v156 - 4 > v155)
        {
          int v77 = v155 + 4;
          do
          {
            int v78 = *((_DWORD *)v77 - 1);
            *((_DWORD *)v77 - 1) = *(_DWORD *)v76;
            *(_DWORD *)uint64_t v76 = v78;
            v76 -= 4;
            BOOL v79 = v77 >= v76;
            v77 += 4;
          }
          while (!v79);
        }
      }
      int v130 = v22;
      long long v80 = (_DWORD *)(*(void *)&v154[8] - 4);
      if (*(void *)v154 != *(void *)&v154[8] && (unint64_t)v80 > *(void *)v154)
      {
        unint64_t v82 = *(void *)v154 + 4;
        do
        {
          int v83 = *(_DWORD *)(v82 - 4);
          *(_DWORD *)(v82 - 4) = *v80;
          *v80-- = v83;
          BOOL v79 = v82 >= (unint64_t)v80;
          v82 += 4;
        }
        while (!v79);
      }
      std::string v84 = v75;
      char v86 = __p;
      int v85 = v137;
      uint64_t v88 = v139;
      char v87 = v140;
      float __C = 0.0;
      std::vector<float>::vector(&v142, (uint64_t)(*((void *)&v151 + 1) - v151) >> 2, &__C);
      float __C = 0.0;
      uint64_t v89 = v151;
      if (*((void *)&v151 + 1) != (void)v151)
      {
        uint64_t v90 = 0;
        unint64_t v91 = (v85 - v86) >> 2;
        unint64_t v92 = (v87 - v88) >> 2;
        unint64_t v93 = 1;
        uint64_t v94 = 4;
        do
        {
          unint64_t v95 = v90 + 1;
          if (v91 >= v93) {
            unint64_t v96 = v93;
          }
          else {
            unint64_t v96 = v91;
          }
          if (v92 >= v93) {
            unint64_t v97 = v93;
          }
          else {
            unint64_t v97 = v92;
          }
          uint64_t v98 = v94 - 4 * v97;
          if (v92 >= v95) {
            unint64_t v99 = v90 + 1;
          }
          else {
            unint64_t v99 = v92;
          }
          float v100 = *(float *)(*(void *)&v154[8] - 4);
          float v101 = *(float *)(v89 + 4 * v90);
          vDSP_dotpr((const float *)(v89 + v98), 1, (const float *)(*(void *)v154 + 4 * (v92 - v99)), 1, &__C, v99 - 1);
          float v102 = __C;
          if (v91 >= v95) {
            unint64_t v103 = v90 + 1;
          }
          else {
            unint64_t v103 = v91;
          }
          vDSP_dotpr((const float *)(v142 + v94 - 4 * v96), 1, (const float *)&v155[4 * (v91 - v103)], 1, &__C, v103 - 1);
          *(float *)(v142 + 4 * v90) = (float)((float)((float)(v100 * v101) + v102) - __C) / *((float *)v156 - 1);
          uint64_t v89 = v151;
          v94 += 4;
          ++v93;
          ++v90;
        }
        while (v95 < (uint64_t)(*((void *)&v151 + 1) - v151) >> 2);
      }
      if (*(void *)v154)
      {
        *(void *)&v154[8] = *(void *)v154;
        operator delete(*(void **)v154);
      }
      uint64_t v16 = (uint64_t)(v10 + 22);
      uint64_t v6 = v129;
      if (v155)
      {
        uint64_t v156 = v155;
        operator delete(v155);
      }
      if ((void)v151)
      {
        *((void *)&v151 + 1) = v151;
        operator delete((void *)v151);
      }
      long long v151 = v142;
      uint64_t v152 = v143;
      uint64_t v143 = 0;
      long long v142 = 0uLL;
      if (__p)
      {
        unint64_t v137 = __p;
        operator delete(__p);
      }
      if (v139)
      {
        uint64_t v140 = v139;
        operator delete(v139);
      }
      long long v104 = v151;
      if ((void)v151 != *((void *)&v151 + 1))
      {
        float v105 = 0.0;
        int v106 = (float *)v151;
        do
        {
          float v107 = *v106++;
          float v105 = v105 + (float)(v107 * v107);
        }
        while (v106 != *((float **)&v151 + 1));
        float v108 = sqrtf(v28 / v105);
        std::string v109 = (float *)v151;
        do
        {
          *std::string v109 = v108 * *v109;
          ++v109;
        }
        while (v109 != *((float **)&v104 + 1));
      }
      uint64_t v110 = (float *)*((void *)v10 + 14);
      uint64_t v111 = *((void *)v10 + 15) - (void)v110;
      if (v111)
      {
        unint64_t v112 = v111 >> 2;
        if (v112 <= 1) {
          unint64_t v112 = 1;
        }
        size_t v113 = (float *)v104;
        do
        {
          float v114 = *v110++;
          *size_t v113 = v114 + *v113;
          ++v113;
          --v112;
        }
        while (v112);
      }
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)__dst, (uint64_t)__dst[1], (char *)v104, (char *)(v104 + 4 * v10[18]), v10[18]);
      uint64_t v115 = (_DWORD *)*((void *)v10 + 14);
      uint64_t v116 = v10[18];
      uint64_t v117 = *((void *)v10 + 15) - (void)v115;
      if (v117)
      {
        unint64_t v118 = v117 >> 2;
        if (v118 <= 1) {
          unint64_t v118 = 1;
        }
        long long v119 = (int *)(v151 + 4 * v116);
        do
        {
          int v120 = *v119++;
          *v115++ = v120;
          --v118;
        }
        while (v118);
      }
      operator delete(v84);
      if (v131) {
        operator delete(v131);
      }
      if (__A)
      {
        unint64_t v145 = __A;
        operator delete(__A);
      }
      if (v146)
      {
        long long v147 = v146;
        operator delete(v146);
      }
      int v22 = v116 + v130;
      operator delete(v34);
      LODWORD(v18) = v10[16];
      uint64_t v20 = *(void *)(v129 + 56);
      uint64_t v19 = *(char **)(v129 + 64);
    }
    while ((int)v18 + (int)v116 + v130 <= (unint64_t)((uint64_t)&v19[-v20] >> 2));
    uint64_t v17 = *((void *)v10 + 11);
    uint64_t v21 = v22;
  }
  else
  {
    uint64_t v21 = 0;
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v16, v17, (char *)(v20 + 4 * v21), v19, (uint64_t)&v19[-v20 + -4 * v21] >> 2);
  if (*((unsigned char *)v10 + 60))
  {
    uint64_t v121 = (float *)__dst[0];
    for (uint64_t i = (float *)__dst[1]; v121 != i; ++v121)
      *uint64_t v121 = *v121 * 32767.0;
  }
  if (v148[0])
  {
    v148[1] = v148[0];
    operator delete(v148[0]);
  }
  if (v149)
  {
    *(void *)&long long v150 = v149;
    operator delete(v149);
  }
  if ((void)v151)
  {
    *((void *)&v151 + 1) = v151;
    operator delete((void *)v151);
  }
  uint64_t v123 = *(void **)v125;
  if (*(void *)v125)
  {
    *(void *)(v6 + 64) = v123;
    operator delete(v123);
    *(void *)uint64_t v125 = 0;
    *(void *)(v125 + 8) = 0;
    *(void *)(v125 + 16) = 0;
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)__dst;
  *(void *)(v6 + 72) = v135;
  int v124 = (std::__shared_weak_count *)v126[1];
  uint64_t v132 = *v126;
  uint64_t v133 = v124;
  if (v124) {
    atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v127 + 72))(v127, &v132);
  if (v133) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v133);
  }
  if (v128) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v128);
  }
}

void sub_20D2F15B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(exception_object);
}

void LPCFilterModule::~LPCFilterModule(LPCFilterModule *this)
{
  LPCFilterModule::~LPCFilterModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C201088;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

float nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v9 = *a1;
    if (v9 > 9) {
      long long v10 = "number";
    }
    else {
      long long v10 = off_2641152A0[v9];
    }
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    unint64_t v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    long long v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v16, exception);
  }
  *(void *)&long long v16 = a1;
  std::string::size_type v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0x8000000000000000;
  *((void *)&v16 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a1 + 1), a2);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v13.__r_.__value_.__r.__words[2] = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0x8000000000000000;
  int v5 = *a1;
  if (v5 == 2)
  {
    v13.__r_.__value_.__r.__words[2] = *(void *)(*((void *)a1 + 1) + 8);
  }
  else if (v5 == 1)
  {
    v13.__r_.__value_.__l.__size_ = *((void *)a1 + 1) + 8;
  }
  else
  {
    unint64_t v15 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v16, (unsigned __int8 **)&v13))
  {
    return *(float *)a3;
  }
  uint64_t v7 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v16);
  LODWORD(v13.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v7, (float *)&v13);
  return *(float *)&v13.__r_.__value_.__l.__data_;
}

void sub_20D2F19E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<LPCFilter>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
}

void std::__shared_ptr_emplace<LPCFilter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<LPCFilter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__value_func<void ()(FrontendFeature const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::target_type()
{
}

uint64_t std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C214D28;
  return std::__function::__value_func<void ()(FrontendFeature const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_26C214D28;
  std::__function::__value_func<void ()(FrontendFeature const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20D2F1E4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::~__func(void *a1)
{
  *a1 = off_26C214D28;
  std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x2105595E0);
}

void *std::__function::__func<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1},std::allocator<std::function<void ()(void const*)> TTSSynthesizerEventBusInternalHelper::wrap_typed_handler<FrontendFeature>(std::function<void ()(FrontendFeature const&)>)::{lambda(void const*)#1}>,void ()(void const*)>::~__func(void *a1)
{
  *a1 = off_26C214D28;
  std::__function::__value_func<void ()(FrontendFeature const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 - 272));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  std::__tree<std::string>::destroy((uint64_t)this + 248, *((char **)this + 32));
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  int v5 = (void **)this;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v4 - 240));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::TranslationUtil::PathElement::~PathElement(kaldi::quasar::TranslationUtil::PathElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 26);
  if (v2)
  {
    *((void *)this + 27) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 20);
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 18) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    *((void *)this + 15) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  uint64_t v8 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void NeuralFEStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)v3 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(*(void *)v3 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v145, 0, sizeof(v145));
  long long v142 = 0;
  uint64_t v143 = 0;
  unint64_t v144 = 0;
  if (*(char *)(v5 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(v5 + 96), *(void *)(v5 + 104));
  }
  else {
    std::string v141 = *(std::string *)(v5 + 96);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(__p, v5 + 96);
    uint64_t v7 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__first_) = 136315138;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v7;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "Original Text: %s ", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(__p, v5 + 96);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v9 = __p;
  }
  else {
    unint64_t v9 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Original Text: %s ", v8, v9);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *(void *)(a1 + 392);
  memset(__p, 0, 24);
  uint64_t v123 = v4;
  EncoderDecoder::decode(v10, v5 + 96, (uint64_t)__p);
  memset(&buf, 0, 24);
  uint64_t v11 = *(void *)__p[0].__r_.__value_.__l.__data_;
  uint64_t v12 = *(void *)(__p[0].__r_.__value_.__r.__words[0] + 8);
  while (v11 != v12)
  {
    std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(buf.__end_);
    if (SHIBYTE(buf.__end_) < 0) {
      std::__split_buffer<std::string>::pointer end_high = buf.__begin_;
    }
    if (end_high) {
      std::string::push_back((std::string *)&buf, 32);
    }
    int v14 = *(char *)(v11 + 23);
    if (v14 >= 0) {
      unint64_t v15 = (const std::string::value_type *)v11;
    }
    else {
      unint64_t v15 = *(const std::string::value_type **)v11;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(v11 + 8);
    }
    std::string::append((std::string *)&buf, v15, v16);
    v11 += 240;
  }
  uint64_t v124 = a1;
  std::string::basic_string[abi:ne180100]<0>(&v140, "#");
  memset(&v147, 0, sizeof(v147));
  BOOL v17 = SHIBYTE(buf.__end_) < 0;
  begiuint64_t n = (std::__split_buffer<std::string>::pointer)HIBYTE(buf.__end_);
  if (SHIBYTE(buf.__end_) < 0) {
    begiuint64_t n = buf.__begin_;
  }
  if (begin)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    while (1)
    {
      std::__split_buffer<std::string>::pointer v21 = v17 ? buf.__first_ : (std::__split_buffer<std::string>::pointer)&buf;
      int v22 = v21->__r_.__value_.__s.__data_[v19];
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v22;
      if (v22 <= 44) {
        break;
      }
      if (v22 == 45) {
        goto LABEL_46;
      }
      uint64_t v23 = 1;
      if (v22 != 60)
      {
        if (v22 != 62)
        {
LABEL_48:
          std::string::append(&v147, (const std::string::value_type *)&__s, 1uLL);
LABEL_49:
          if (v20)
          {
            uint64_t v23 = 1;
LABEL_60:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            goto LABEL_62;
          }
        }
        std::operator+<char>();
        if (SHIBYTE(v146.__end_cap_.__value_) >= 0) {
          int v24 = (const std::string::value_type *)&v146;
        }
        else {
          int v24 = (const std::string::value_type *)v146.__begin_;
        }
        if (SHIBYTE(v146.__end_cap_.__value_) >= 0) {
          std::string::size_type value_high = HIBYTE(v146.__end_cap_.__value_);
        }
        else {
          std::string::size_type value_high = (std::string::size_type)v146.__end_;
        }
        std::string::append(&v140, v24, value_high);
        if (SHIBYTE(v146.__end_cap_.__value_) < 0) {
          operator delete(v146.__begin_);
        }
        MEMORY[0x210558E70](&v147, &byte_20D5A22AE);
        uint64_t v23 = 0;
        goto LABEL_60;
      }
LABEL_62:
      ++v19;
      BOOL v17 = SHIBYTE(buf.__end_) < 0;
      std::__split_buffer<std::string>::pointer v26 = (std::__split_buffer<std::string>::pointer)HIBYTE(buf.__end_);
      if (SHIBYTE(buf.__end_) < 0) {
        std::__split_buffer<std::string>::pointer v26 = buf.__begin_;
      }
      uint64_t v20 = v23;
      if ((unint64_t)v26 <= v19) {
        goto LABEL_65;
      }
    }
    if (v22 == 32)
    {
      std::string::append(&v147, "#");
      goto LABEL_49;
    }
    if (v22 != 39) {
      goto LABEL_48;
    }
LABEL_46:
    uint64_t v23 = v20;
    goto LABEL_62;
  }
LABEL_65:
  std::string::append(&v140, " #");
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    float v29 = &v140;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v29 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
    _os_log_impl(&dword_20CD80000, v27, OS_LOG_TYPE_INFO, "Phone sequence \"%s\" ", (uint8_t *)&__s, 0xCu);
  }
  unint64_t v30 = &v140;
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v30 = (std::string *)v140.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Phone sequence \"%s\" ", v28, v30);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v31 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(v5 + 119) >= 0) {
      std::string::size_type v33 = v5 + 96;
    }
    else {
      std::string::size_type v33 = *(void *)(v5 + 96);
    }
    p_std::__split_buffer<std::string> buf = (std::__split_buffer<std::string>::pointer)&buf;
    if (SHIBYTE(buf.__end_) < 0) {
      p_std::__split_buffer<std::string> buf = buf.__first_;
    }
    LODWORD(__s.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v33;
    WORD2(__s.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
    _os_log_impl(&dword_20CD80000, v31, OS_LOG_TYPE_INFO, "Pronunciation \"%s\" -> \"%s\" [G2P / NNMT]", (uint8_t *)&__s, 0x16u);
  }
  if (*(char *)(v5 + 119) >= 0) {
    uint64_t v35 = v5 + 96;
  }
  else {
    uint64_t v35 = *(void *)(v5 + 96);
  }
  std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)&buf;
  if (SHIBYTE(buf.__end_) < 0) {
    std::__split_buffer<std::string>::pointer first = buf.__first_;
  }
  Diagnostics::log(6, "Pronunciation \"%s\" -> \"%s\" [G2P / NNMT]", v32, v35, first);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__end_) < 0) {
    operator delete(buf.__first_);
  }
  buf.__first_ = __p;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, &v140, 8);
  std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](&v133, (uint64_t *)__p);
  memset(&v146, 0, sizeof(v146));
  v147.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
  if (SHIBYTE(v135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v147.__r_.__value_.__r.__words[1], (const std::string::value_type *)v134, *((std::string::size_type *)&v134 + 1));
  }
  else
  {
    *(_OWORD *)&v147.__r_.__value_.__r.__words[1] = v134;
    std::string::size_type v148 = v135;
  }
  memset(&__s, 0, sizeof(__s));
  uint64_t v156 = 0;
  uint64_t v127 = &v146;
  char v128 = 0;
  while (v147.__r_.__value_.__r.__words[0] != __s.__r_.__value_.__r.__words[0])
  {
    std::vector<std::string>::pointer end = v146.__end_;
    if (v146.__end_ >= v146.__end_cap_.__value_)
    {
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v146.__end_ - (char *)v146.__begin_) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v146.__end_cap_.__value_ - (char *)v146.__begin_) >> 3) > v40) {
        unint64_t v40 = 0x5555555555555556 * (((char *)v146.__end_cap_.__value_ - (char *)v146.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v146.__end_cap_.__value_ - (char *)v146.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v40;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v146.__end_cap_;
      if (v41) {
        unint64_t v42 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v146.__end_cap_, v41);
      }
      else {
        unint64_t v42 = 0;
      }
      std::__split_buffer<std::string>::pointer v44 = v42 + v39;
      buf.__first_ = v42;
      buf.__begin_ = v44;
      buf.__end_ = v44;
      buf.__end_cap_.__value_ = &v42[v41];
      if (SHIBYTE(v148) < 0)
      {
        std::string::__init_copy_ctor_external(v44, (const std::string::value_type *)v147.__r_.__value_.__l.__size_, v147.__r_.__value_.__r.__words[2]);
        std::__split_buffer<std::string>::pointer v44 = buf.__end_;
      }
      else
      {
        long long v45 = *(_OWORD *)&v147.__r_.__value_.__r.__words[1];
        v44->__r_.__value_.__r.__words[2] = v148;
        *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
      }
      buf.__end_ = v44 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v146, &buf);
      float v43 = v146.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&buf);
    }
    else
    {
      if (SHIBYTE(v148) < 0)
      {
        std::string::__init_copy_ctor_external(v146.__end_, (const std::string::value_type *)v147.__r_.__value_.__l.__size_, v147.__r_.__value_.__r.__words[2]);
      }
      else
      {
        long long v38 = *(_OWORD *)&v147.__r_.__value_.__r.__words[1];
        v146.__end_->__r_.__value_.__r.__words[2] = v148;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v38;
      }
      float v43 = end + 1;
    }
    v146.__end_ = v43;
    std::istream_iterator<std::string,char,std::char_traits<char>,long>::operator++[abi:ne180100]((uint64_t **)&v147);
  }
  if (SHIBYTE(v156) < 0) {
    operator delete((void *)__s.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v148) < 0) {
    operator delete((void *)v147.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v135) < 0) {
    operator delete((void *)v134);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v145, v146.__begin_, (long long *)v146.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v146.__end_ - (char *)v146.__begin_) >> 3));
  std::string::basic_string[abi:ne180100]<0>(&v147, "word");
  std::vector<std::string>::pointer v46 = v145.__begin_;
  if (v145.__end_ != v145.__begin_)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v49 = v124 + 320;
    while (!v48)
    {
      LODWORD(__s.__r_.__value_.__l.__data_) = 0;
      LODWORD(v127) = 0;
      LODWORD(v130) = 1065353216;
      v149[0] = 0;
      __int16 v132 = 1;
      float v52 = v143;
      if ((unint64_t)v143 >= v144)
      {
        uint64_t v57 = 0x4EC4EC4EC4EC4EC5 * (((char *)v143 - (char *)v142) >> 3);
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) > 0x276276276276276) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v144 - (void)v142) >> 3) > v58) {
          unint64_t v58 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v144 - (void)v142) >> 3);
        }
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v144 - (void)v142) >> 3)) >= 0x13B13B13B13B13BLL) {
          unint64_t v59 = 0x276276276276276;
        }
        else {
          unint64_t v59 = v58;
        }
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v144;
        if (v59) {
          unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v59);
        }
        else {
          uint64_t v60 = 0;
        }
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v59;
        buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v59 + 104 * v57);
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = (std::string *)(v59 + 104 * v60);
        std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,std::string &,std::string &,int,int,float,BOOL,BOOL,BOOL>(buf.__begin_, v49, (uint64_t)&v147, (int *)&__s, (int *)&v127, (float *)&v130, (std::string::value_type *)v149, (std::string::value_type *)&v132 + 1, (std::string::value_type *)&v132);
        goto LABEL_166;
      }
      std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,std::string &,std::string &,int,int,float,BOOL,BOOL,BOOL>(v143, v49, (uint64_t)&v147, (int *)&__s, (int *)&v127, (float *)&v130, (std::string::value_type *)v149, (std::string::value_type *)&v132 + 1, (std::string::value_type *)&v132);
LABEL_136:
      uint64_t v53 = (std::string *)((char *)v52 + 104);
LABEL_167:
      uint64_t v143 = v53;
      ++v48;
      std::vector<std::string>::pointer v46 = v145.__begin_;
      ++v47;
      if (v48 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v145.__end_ - (char *)v145.__begin_) >> 3)) {
        goto LABEL_168;
      }
    }
    uint64_t v50 = &v46[v47];
    int v51 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
    if (v51 < 0)
    {
      if (v50->__r_.__value_.__l.__size_ != 1) {
        goto LABEL_134;
      }
      uint64_t v50 = (std::string *)v50->__r_.__value_.__r.__words[0];
    }
    else if (v51 != 1)
    {
      goto LABEL_134;
    }
    if (v50->__r_.__value_.__s.__data_[0] == 35)
    {
      LODWORD(__s.__r_.__value_.__l.__data_) = 0;
      LODWORD(v127) = 0;
      LODWORD(v130) = 1065353216;
      v149[0] = 1;
      __int16 v132 = 0;
      float v52 = v143;
      if ((unint64_t)v143 >= v144)
      {
        uint64_t v54 = 0x4EC4EC4EC4EC4EC5 * (((char *)v143 - (char *)v142) >> 3);
        unint64_t v62 = v54 + 1;
        if ((unint64_t)(v54 + 1) > 0x276276276276276) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(v144 - (void)v142) >> 3) > v62) {
          unint64_t v62 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v144 - (void)v142) >> 3);
        }
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v144 - (void)v142) >> 3)) >= 0x13B13B13B13B13BLL) {
          unint64_t v56 = 0x276276276276276;
        }
        else {
          unint64_t v56 = v62;
        }
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v144;
        if (v56) {
LABEL_161:
        }
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v56);
        else {
          uint64_t v61 = 0;
        }
LABEL_165:
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v56;
        buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v56 + 104 * v54);
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = (std::string *)(v56 + 104 * v61);
        std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,char const(&)[2],std::string &,int,int,float,BOOL,BOOL,BOOL>(buf.__begin_, (uint64_t)&v147, (int *)&__s, (int *)&v127, (float *)&v130, (std::string::value_type *)v149, (std::string::value_type *)&v132 + 1, (std::string::value_type *)&v132);
LABEL_166:
        buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 104);
        std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer((uint64_t *)&v142, &buf);
        uint64_t v53 = v143;
        std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
        goto LABEL_167;
      }
      goto LABEL_135;
    }
LABEL_134:
    LODWORD(__s.__r_.__value_.__l.__data_) = 0;
    LODWORD(v127) = 0;
    LODWORD(v130) = 1065353216;
    v149[0] = 0;
    __int16 v132 = 0;
    float v52 = v143;
    if ((unint64_t)v143 >= v144)
    {
      uint64_t v54 = 0x4EC4EC4EC4EC4EC5 * (((char *)v143 - (char *)v142) >> 3);
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) > 0x276276276276276) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x9D89D89D89D89D8ALL * ((uint64_t)(v144 - (void)v142) >> 3) > v55) {
        unint64_t v55 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v144 - (void)v142) >> 3);
      }
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v144 - (void)v142) >> 3)) >= 0x13B13B13B13B13BLL) {
        unint64_t v56 = 0x276276276276276;
      }
      else {
        unint64_t v56 = v55;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v144;
      if (v56) {
        goto LABEL_161;
      }
      uint64_t v61 = 0;
      goto LABEL_165;
    }
LABEL_135:
    std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,char const(&)[2],std::string &,int,int,float,BOOL,BOOL,BOOL>(v143, (uint64_t)&v147, (int *)&__s, (int *)&v127, (float *)&v130, (std::string::value_type *)v149, (std::string::value_type *)&v132 + 1, (std::string::value_type *)&v132);
    goto LABEL_136;
  }
LABEL_168:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext((std::string *)&buf, (uint64_t)&v140);
    int v64 = SHIBYTE(buf.__end_) >= 0 ? &buf : (std::__split_buffer<std::string> *)buf.__first_;
    LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
    _os_log_impl(&dword_20CD80000, v63, OS_LOG_TYPE_INFO, "Neural Phonemes: %s ", (uint8_t *)&__s, 0xCu);
    if (SHIBYTE(buf.__end_) < 0) {
      operator delete(buf.__first_);
    }
  }
  Censor::global_plaintext((std::string *)&buf, (uint64_t)&v140);
  if (SHIBYTE(buf.__end_) >= 0) {
    std::__split_buffer<std::string>::pointer v66 = (std::__split_buffer<std::string>::pointer)&buf;
  }
  else {
    std::__split_buffer<std::string>::pointer v66 = buf.__first_;
  }
  Diagnostics::log(6, "Neural Phonemes: %s ", v65, v66);
  if (SHIBYTE(buf.__end_) < 0) {
    operator delete(buf.__first_);
  }
  uint64_t v67 = (char *)operator new(0x228uLL);
  *((void *)v67 + 1) = 0;
  *((void *)v67 + 2) = 0;
  *(void *)uint64_t v67 = off_26C216280;
  *(_OWORD *)(v67 + 40) = 0u;
  *(_OWORD *)(v67 + 56) = 0u;
  *(_OWORD *)(v67 + 72) = 0u;
  *(_OWORD *)(v67 + 88) = 0u;
  *(_OWORD *)(v67 + 104) = 0u;
  *(_OWORD *)(v67 + 120) = 0u;
  *(_OWORD *)(v67 + 136) = 0u;
  *(_OWORD *)(v67 + 152) = 0u;
  *(_OWORD *)(v67 + 168) = 0u;
  *(_OWORD *)(v67 + 184) = 0u;
  *(_OWORD *)(v67 + 200) = 0u;
  *(_OWORD *)(v67 + 216) = 0u;
  *(_OWORD *)(v67 + 232) = 0u;
  *(_OWORD *)(v67 + 248) = 0u;
  *(_OWORD *)(v67 + 24) = 0u;
  *(_OWORD *)(v67 + 264) = 0u;
  *(_OWORD *)(v67 + 280) = 0u;
  *(_OWORD *)(v67 + 296) = 0u;
  *(_OWORD *)(v67 + 312) = 0u;
  *(_OWORD *)(v67 + 328) = 0u;
  *(_OWORD *)(v67 + 344) = 0u;
  *(_OWORD *)(v67 + 360) = 0u;
  *(_OWORD *)(v67 + 376) = 0u;
  *((_WORD *)v67 + 12) = 257;
  *((_OWORD *)v67 + 2) = 0u;
  *((_OWORD *)v67 + 3) = 0u;
  *((_OWORD *)v67 + 4) = 0u;
  *((_OWORD *)v67 + 5) = 0u;
  *((_OWORD *)v67 + 6) = 0u;
  *((_OWORD *)v67 + 7) = 0u;
  *((_OWORD *)v67 + 8) = 0u;
  *((_OWORD *)v67 + 9) = 0u;
  *((_OWORD *)v67 + 10) = 0u;
  *((_OWORD *)v67 + 11) = 0u;
  *((_OWORD *)v67 + 12) = 0u;
  *((_OWORD *)v67 + 13) = 0u;
  *((_OWORD *)v67 + 14) = 0u;
  *((_OWORD *)v67 + 15) = 0u;
  *((_OWORD *)v67 + 16) = 0u;
  *((_OWORD *)v67 + 17) = 0u;
  *((_OWORD *)v67 + 18) = 0u;
  *((_OWORD *)v67 + 19) = 0u;
  *((_OWORD *)v67 + 20) = 0u;
  *((_OWORD *)v67 + 21) = 0u;
  *((_OWORD *)v67 + 22) = 0u;
  *((_OWORD *)v67 + 23) = 0u;
  *(_OWORD *)(v67 + 520) = 0u;
  *(_OWORD *)(v67 + 536) = 0u;
  *(_OWORD *)(v67 + 488) = 0u;
  *(_OWORD *)(v67 + 504) = 0u;
  *(_OWORD *)(v67 + 456) = 0u;
  *(_OWORD *)(v67 + 472) = 0u;
  *(_OWORD *)(v67 + 424) = 0u;
  *(_OWORD *)(v67 + 440) = 0u;
  *(_OWORD *)(v67 + 392) = 0u;
  *(_OWORD *)(v67 + 408) = 0u;
  int v130 = v67 + 24;
  int v131 = (std::__shared_weak_count *)v67;
  memset(&buf, 0, 24);
  std::vector<std::string>::pointer v69 = v145.__begin_;
  std::vector<std::string>::pointer v68 = v145.__end_;
  if (v145.__begin_ != v145.__end_)
  {
    float v70 = (uint64_t **)(v124 + 272);
    do
    {
      if (v124 + 280 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v70, (const void **)&v69->__r_.__value_.__l.__data_))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          std::vector<std::string>::pointer v77 = v69;
          if (SHIBYTE(v69->__r_.__value_.__r.__words[2]) < 0) {
            std::vector<std::string>::pointer v77 = (std::vector<std::string>::pointer)v69->__r_.__value_.__r.__words[0];
          }
          LODWORD(__s.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
          _os_log_impl(&dword_20CD80000, v75, OS_LOG_TYPE_ERROR, "Unfound phone mapping for '%s' ", (uint8_t *)&__s, 0xCu);
        }
        std::vector<std::string>::pointer v78 = v69;
        if (SHIBYTE(v69->__r_.__value_.__r.__words[2]) < 0) {
          std::vector<std::string>::pointer v78 = (std::vector<std::string>::pointer)v69->__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(3, "Unfound phone mapping for '%s' ", v76, v78);
      }
      else
      {
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        float v71 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v70, (const void **)&v69->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__s);
        float v72 = v71;
        std::__split_buffer<std::string>::pointer v73 = buf.__begin_;
        if (buf.__begin_ >= buf.__end_)
        {
          std::__split_buffer<std::string>::pointer v79 = buf.__first_;
          int64_t v80 = ((char *)buf.__begin_ - (char *)buf.__first_) >> 2;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v82 = (char *)buf.__end_ - (char *)buf.__first_;
          if (((char *)buf.__end_ - (char *)buf.__first_) >> 1 > v81) {
            unint64_t v81 = v82 >> 1;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v83 = v81;
          }
          if (v83)
          {
            std::string v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&buf.__end_, v83);
            std::__split_buffer<std::string>::pointer v73 = buf.__begin_;
            std::__split_buffer<std::string>::pointer v79 = buf.__first_;
          }
          else
          {
            std::string v84 = 0;
          }
          int v85 = (std::string *)&v84[4 * v80];
          LODWORD(v85->__r_.__value_.__l.__data_) = *((_DWORD *)v72 + 14);
          float v74 = (std::string *)((char *)v85->__r_.__value_.__r.__words + 4);
          while (v73 != v79)
          {
            int v86 = HIDWORD(v73[-1].__r_.__value_.__r.__words[2]);
            std::__split_buffer<std::string>::pointer v73 = (std::__split_buffer<std::string>::pointer)((char *)v73 - 4);
            HIDWORD(v85[-1].__r_.__value_.__r.__words[2]) = v86;
            int v85 = (std::string *)((char *)v85 - 4);
          }
          buf.__first_ = v85;
          buf.__begin_ = v74;
          buf.__end_ = (std::__split_buffer<std::string>::pointer)&v84[4 * v83];
          if (v79) {
            operator delete(v79);
          }
        }
        else
        {
          LODWORD(buf.__begin_->__r_.__value_.__l.__data_) = *((_DWORD *)v71 + 14);
          float v74 = (std::string *)((char *)v73->__r_.__value_.__r.__words + 4);
        }
        buf.__begin_ = v74;
      }
      ++v69;
    }
    while (v69 != v68);
  }
  __s.__r_.__value_.__r.__words[0] = v124 + 296;
  char v87 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v124 + 272), (const void **)(v124 + 296), (uint64_t)&std::piecewise_construct, (long long **)&__s);
  uint64_t v88 = v87;
  std::__split_buffer<std::string>::pointer v89 = buf.__begin_;
  if (buf.__begin_ >= buf.__end_)
  {
    std::__split_buffer<std::string>::pointer v91 = buf.__first_;
    int64_t v92 = ((char *)buf.__begin_ - (char *)buf.__first_) >> 2;
    unint64_t v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v94 = (char *)buf.__end_ - (char *)buf.__first_;
    if (((char *)buf.__end_ - (char *)buf.__first_) >> 1 > v93) {
      unint64_t v93 = v94 >> 1;
    }
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v95 = v93;
    }
    if (v95)
    {
      unint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&buf.__end_, v95);
      std::__split_buffer<std::string>::pointer v89 = buf.__begin_;
      std::__split_buffer<std::string>::pointer v91 = buf.__first_;
    }
    else
    {
      unint64_t v96 = 0;
    }
    unint64_t v97 = (std::string *)&v96[4 * v92];
    uint64_t v98 = (std::string *)&v96[4 * v95];
    LODWORD(v97->__r_.__value_.__l.__data_) = *((_DWORD *)v88 + 14);
    uint64_t v90 = (std::string *)((char *)v97->__r_.__value_.__r.__words + 4);
    while (v89 != v91)
    {
      int v99 = HIDWORD(v89[-1].__r_.__value_.__r.__words[2]);
      std::__split_buffer<std::string>::pointer v89 = (std::__split_buffer<std::string>::pointer)((char *)v89 - 4);
      HIDWORD(v97[-1].__r_.__value_.__r.__words[2]) = v99;
      unint64_t v97 = (std::string *)((char *)v97 - 4);
    }
    buf.__first_ = v97;
    buf.__begin_ = v90;
    buf.__end_ = v98;
    if (v91) {
      operator delete(v91);
    }
  }
  else
  {
    LODWORD(buf.__begin_->__r_.__value_.__l.__data_) = *((_DWORD *)v87 + 14);
    uint64_t v90 = (std::string *)((char *)v89->__r_.__value_.__r.__words + 4);
  }
  buf.__begin_ = v90;
  unint64_t v100 = (unint64_t)v130;
  float v102 = v130 + 32;
  float v101 = (void *)*((void *)v130 + 4);
  if (v101)
  {
    *((void *)v130 + 5) = v101;
    operator delete(v101);
    *float v102 = 0;
    v102[1] = 0;
    v102[2] = 0;
  }
  *(_OWORD *)(v100 + 32) = *(_OWORD *)&buf.__first_;
  *(void *)(v100 + 48) = buf.__end_;
  unint64_t v103 = (void *)(v100 + 8);
  if ((std::string **)(v100 + 8) != &v142)
  {
    float v105 = v142;
    long long v104 = v143;
    int v106 = (void *)(v100 + 24);
    unint64_t v107 = 0x4EC4EC4EC4EC4EC5 * (((char *)v143 - (char *)v142) >> 3);
    float v108 = *(std::string **)(v100 + 8);
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v100 + 24) - (void)v108) >> 3) < v107)
    {
      std::vector<TacotronPhoneFeature>::__vdeallocate((void **)(v100 + 8));
      if (v107 > 0x276276276276276) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v109 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*v106 - *v103) >> 3);
      if (v109 <= v107) {
        unint64_t v109 = v107;
      }
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v106 - *v103) >> 3)) >= 0x13B13B13B13B13BLL) {
        unint64_t v110 = 0x276276276276276;
      }
      else {
        unint64_t v110 = v109;
      }
      std::vector<TacotronPhoneFeature>::__vallocate[abi:ne180100]((void *)(v100 + 8), v110);
      uint64_t v111 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v100 + 24, (uint64_t)v105, (uint64_t)v104, *(void *)(v100 + 16));
      goto LABEL_240;
    }
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v100 + 16) - (void)v108) >> 3) < v107)
    {
      unint64_t v112 = (std::string *)((char *)v142 + 8 * ((uint64_t)(*(void *)(v100 + 16) - (void)v108) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(v142, v112, v108);
      uint64_t v111 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>(v100 + 24, (uint64_t)v112, (uint64_t)v104, *(void *)(v100 + 16));
LABEL_240:
      *(void *)(v100 + 16) = v111;
      goto LABEL_245;
    }
    size_t v113 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TacotronPhoneFeature *,TacotronPhoneFeature *,TacotronPhoneFeature *>(v142, v143, v108);
    for (uint64_t i = *(void *)(v100 + 16);
          (std::string *)i != v113;
          std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](i))
    {
      i -= 104;
    }
    *(void *)(v100 + 16) = v113;
  }
LABEL_245:
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
  unint64_t v115 = (unint64_t)v130;
  if (*((void *)v130 + 5) != *((void *)v130 + 4))
  {
    unint64_t v116 = 0;
    do
    {
      uint64_t v117 = (void *)std::ostream::operator<<();
      __s.__r_.__value_.__s.__data_[0] = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)&__s, 1);
      ++v116;
    }
    while (v116 < (uint64_t)(*(void *)(v115 + 40) - *(void *)(v115 + 32)) >> 2);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v118 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str();
    Censor::global_plaintext(&__s, (uint64_t)&v127);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v149 = 136315138;
    long long v150 = p_s;
    _os_log_impl(&dword_20CD80000, v118, OS_LOG_TYPE_INFO, "Neural phone embeddings: %s ", v149, 0xCu);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v129 < 0) {
      operator delete(v127);
    }
  }
  std::stringbuf::str();
  Censor::global_plaintext(&__s, (uint64_t)&v127);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v121 = &__s;
  }
  else {
    uint64_t v121 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Neural phone embeddings: %s ", v120, v121);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v129 < 0) {
    operator delete(v127);
  }
  unint64_t v122 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v122 + 8) = 0u;
  *(void *)unint64_t v122 = off_26C215330;
  *((_OWORD *)v122 + 2) = 0u;
  *((void *)v122 + 3) = v122 + 32;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v122 + 24), (unint64_t *)&v130);
  uint64_t v125 = v122 + 24;
  long long v126 = (std::__shared_weak_count *)v122;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v122 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, char **))(*(void *)v124 + 72))(v124, &v125);
  if (v126) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v126);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x263F8C2C8];
  *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + buf.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x263F8C2C8] + 24);
  buf.__begin_ = (std::__split_buffer<std::string>::pointer)(MEMORY[0x263F8C318] + 16);
  if (v153 < 0) {
    operator delete(v152);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x210559500](&v154);
  if (v131) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v131);
  }
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v146;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C0];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0]
                                                                                                 + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
  if (v138 < 0) {
    operator delete(v137);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x210559500](&v139);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v142;
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v123) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v123);
  }
}

void sub_20D2F377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  *(void *)(v74 + 16) = v75;
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  STACK[0x220] = (unint64_t)&STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::istringstream::~istringstream((uint64_t)&a28);
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  a28 = (void **)&a73;
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a28);
  a28 = (void **)&a74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a28);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v3 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)(a1 + 1));
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
    *a1 = 0;
  }
  return a1;
}

void sub_20D2F3AA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,std::string &,std::string &,int,int,float,BOOL,BOOL,BOOL>(std::string *this, uint64_t a2, uint64_t a3, int *a4, int *a5, float *a6, std::string::value_type *a7, std::string::value_type *a8, std::string::value_type *a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  TacotronPhoneFeature::TacotronPhoneFeature(this, (long long *)&v17, (long long *)&__p, *a4, *a5, *a7, *a8, *a9, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_20D2F3BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<TacotronPhoneFeature>::construct[abi:ne180100]<TacotronPhoneFeature,char const(&)[2],std::string &,int,int,float,BOOL,BOOL,BOOL>(std::string *a1, uint64_t a2, int *a3, int *a4, float *a5, std::string::value_type *a6, std::string::value_type *a7, std::string::value_type *a8)
{
  std::string::basic_string[abi:ne180100]<0>(v17, "A");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  TacotronPhoneFeature::TacotronPhoneFeature(a1, (long long *)v17, (long long *)&__p, *a3, *a4, *a6, *a7, *a8, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_20D2F3CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 104;
      long long v6 = *(_OWORD *)(v3 - 104);
      *(void *)(v4 - 88) = *(void *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v6;
      *(void *)(v3 - 96) = 0;
      *(void *)(v3 - 88) = 0;
      *(void *)(v3 - 104) = 0;
      long long v7 = *(_OWORD *)(v3 - 80);
      *(void *)(v4 - 64) = *(void *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = v7;
      *(void *)(v3 - 72) = 0;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 80) = 0;
      long long v8 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v8;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 104;
      v3 -= 104;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  *uint64_t result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TacotronPhoneFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TacotronPhoneFeature::TacotronPhoneFeature(std::string *this, long long *a2, long long *a3, int a4, int a5, std::string::value_type a6, std::string::value_type a7, std::string::value_type a8, float a9)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v17 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v17;
  }
  char v18 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v19 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[12] = a8;
  this[2].__r_.__value_.__s.__data_[13] = a6;
  this[2].__r_.__value_.__s.__data_[14] = a7;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a9;
  *(std::string::size_type *)((char *)&this[2].__r_.__value_.__r.__words[2] + 4) = 1065353216;
  HIDWORD(this[3].__r_.__value_.__r.__words[0]) = 0x800000;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_20D2F3F04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::istream_iterator<std::string,char,std::char_traits<char>,long>::operator++[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a1, (uint64_t)(a1 + 1));
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0) {
    *a1 = 0;
  }
  return a1;
}

void NeuralFEStream::~NeuralFEStream(NeuralFEStream *this)
{
  NeuralFEStream::~NeuralFEStream(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t vars8;

  *(void *)this = off_26C200B40;
  std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100]((uint64_t *)this + 49, 0);
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 35));
  Module::~Module(this);
}

uint64_t *std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(v2 + 6440);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v2);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  *(void *)a1 = off_26C211060;
  uint64_t v2 = *(void **)(a1 + 6416);
  if (v2)
  {
    *(void *)(a1 + 6424) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 6392);
  if (v3)
  {
    *(void *)(a1 + 6400) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 6360);
  if (v4)
  {
    *(void *)(a1 + 6368) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 6336);
  if (v5)
  {
    *(void *)(a1 + 6344) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 6288);
  if (v6)
  {
    *(void *)(a1 + 6296) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 6184);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5808));
  uint64_t v11 = (void **)(a1 + 5704);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)(a1 + 5680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  long long v7 = *(std::__shared_weak_count **)(a1 + 5672);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5624);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5576);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5528);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5480);
  uint64_t v11 = (void **)(a1 + 5456);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (*(char *)(a1 + 5447) < 0) {
    operator delete(*(void **)(a1 + 5424));
  }
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  long long v8 = *(std::__shared_weak_count **)(a1 + 400);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 144);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 8);
  return a1;
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  *(void *)a1 = off_26C211080;
  uint64_t v2 = *(void **)(a1 + 6416);
  if (v2)
  {
    *(void *)(a1 + 6424) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 6392);
  if (v3)
  {
    *(void *)(a1 + 6400) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 6360);
  if (v4)
  {
    *(void *)(a1 + 6368) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 6336);
  if (v5)
  {
    *(void *)(a1 + 6344) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 6288);
  if (v6)
  {
    *(void *)(a1 + 6296) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 6184);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5808));
  uint64_t v11 = (void **)(a1 + 5704);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)(a1 + 5680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  long long v7 = *(std::__shared_weak_count **)(a1 + 5672);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5624);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5576);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5528);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5480);
  uint64_t v11 = (void **)(a1 + 5456);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (*(char *)(a1 + 5447) < 0) {
    operator delete(*(void **)(a1 + 5424));
  }
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  long long v8 = *(std::__shared_weak_count **)(a1 + 400);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 144);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 8);
  return a1;
}

void kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this)
{
  if (*((void *)this + 589)) {
    utrans_close();
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::NNMTTransliterator *)((char *)this + 4728));
  if (*((char *)this + 4711) < 0) {
    operator delete(*((void **)this + 586));
  }
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(a1);
  JUMPOUT(0x2105595E0);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a1);
  JUMPOUT(0x2105595E0);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>(char ***a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  uint64_t v3 = (char **)(a1 + 1);
  a1[2] = 0;
  *a1 = (char **)(a1 + 1);
  if (*a2 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v22 = *a2;
    if (v22 > 9) {
      uint64_t v23 = "number";
    }
    else {
      uint64_t v23 = off_2641152A0[v22];
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, v23);
    int v24 = std::string::insert(&v31, 0, "type must be object, but is ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v29, exception);
  }
  uint64_t v27 = 0;
  float v28 = 0;
  std::__split_buffer<std::string>::pointer v26 = (char **)&v27;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  long long v8 = (void *)*v5;
  long long v6 = v5 + 1;
  long long v7 = v8;
  if (v8 == v6)
  {
    char v18 = 0;
  }
  else
  {
    uint64_t v9 = &v27;
    do
    {
      LODWORD(v31.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>((unsigned char *)v7 + 56, (int *)&v31);
      int data = (int)v31.__r_.__value_.__l.__data_;
      if (*((char *)v7 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v7[4], v7[5]);
      }
      else {
        std::string v29 = *(std::string *)(v7 + 4);
      }
      int v30 = data;
      uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v26, v9, &v33, &v32, (const void **)&v29.__r_.__value_.__l.__data_);
      uint64_t v12 = *v11;
      if (!*v11)
      {
        uint64_t v12 = (uint64_t *)operator new(0x40uLL);
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)&v27;
        v31.__r_.__value_.__s.__data_[16] = 0;
        std::string v13 = (std::string *)(v12 + 4);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          v12[6] = v29.__r_.__value_.__r.__words[2];
        }
        *((_DWORD *)v12 + 14) = v30;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)&v26, (uint64_t)v33, v11, v12);
      }
      int v14 = (uint64_t *)v12[1];
      if (v14)
      {
        do
        {
          uint64_t v9 = v14;
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v12[2];
          BOOL v15 = *v9 == (void)v12;
          uint64_t v12 = v9;
        }
        while (!v15);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      std::string::size_type v16 = (void *)v7[1];
      if (v16)
      {
        do
        {
          long long v17 = v16;
          std::string::size_type v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (void *)v7[2];
          BOOL v15 = *v17 == (void)v7;
          long long v7 = v17;
        }
        while (!v15);
      }
      long long v7 = v17;
    }
    while (v17 != v6);
    char v18 = *v3;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v18);
  uint64_t v19 = v27;
  *a1 = v26;
  a1[1] = (char **)v19;
  uint64_t v20 = v28;
  a1[2] = v28;
  if (v20)
  {
    *(void *)(v19 + 16) = v3;
    std::__split_buffer<std::string>::pointer v26 = (char **)&v27;
    uint64_t v27 = 0;
    float v28 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *a1 = v3;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v19);
}

void sub_20D2F4858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v26, v27);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a11);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v28);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (*a2 != 2)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v16 = *a2;
    if (v16 > 9) {
      long long v17 = "number";
    }
    else {
      long long v17 = off_2641152A0[v16];
    }
    std::string::basic_string[abi:ne180100]<0>(&v20, v17);
    char v18 = std::string::insert(&v20, 0, "type must be array, but is ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v18->__r_.__value_.__r.__words[2];
    long long v23 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v23, exception);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = &v28;
  long long v23 = (unint64_t)a2;
  std::string::size_type v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0x8000000000000000;
  uint64_t v5 = (std::string::size_type *)*((void *)a2 + 1);
  std::string::size_type v24 = *v5;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v20.__r_.__value_.__r.__words[2] = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0x8000000000000000;
  v20.__r_.__value_.__r.__words[2] = v5[1];
  long long v6 = &v28;
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v23, (unsigned __int8 **)&v20))
  {
    long long v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v7, &v30);
    long long v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v27, v6, &v32, &v31, (const void **)&v30.__r_.__value_.__l.__data_);
    uint64_t v9 = (char *)*v8;
    if (!*v8)
    {
      uint64_t v10 = (uint64_t **)v8;
      uint64_t v9 = (char *)operator new(0x38uLL);
      *(std::string *)(v9 + 32) = v30;
      memset(&v30, 0, sizeof(v30));
      std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v27, (uint64_t)v32, v10, (uint64_t *)v9);
    }
    uint64_t v11 = (uint64_t *)*((void *)v9 + 1);
    if (v11)
    {
      do
      {
        long long v6 = v11;
        uint64_t v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        long long v6 = (uint64_t *)*((void *)v9 + 2);
        BOOL v12 = *v6 == (void)v9;
        uint64_t v9 = (char *)v6;
      }
      while (!v12);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v23);
  }
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  uint64_t v13 = v28;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v13;
  uint64_t v14 = v29;
  *(void *)(a1 + 16) = v29;
  if (v14)
  {
    *(void *)(v13 + 16) = v4;
    uint64_t v27 = &v28;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
  std::__tree<std::string>::destroy((uint64_t)&v27, (char *)v13);
}

void sub_20D2F4B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  std::__tree<std::string>::destroy((uint64_t)&a27, a28);
  std::__tree<std::string>::destroy(v28, *(char **)(v28 + 8));
  _Unwind_Resume(a1);
}

void NeuralRateChangeModule::process_data(void *a1, uint64_t *a2)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)v4 + 8);
  long long v6 = *(std::__shared_weak_count **)(*(void *)v4 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)v5)
  {
    uint64_t v7 = a1[34];
    *(void *)(v7 + 8) = *(void *)v7;
    *(void *)(v7 + 24) = 0x3F80000000000000;
    *(_DWORD *)(v7 + 56) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(v7 + 44) = _D0;
  }
  BOOL v12 = *(float **)(v5 + 80);
  unint64_t v13 = *(void *)(v5 + 88) - (void)v12;
  if ((int)(v13 >> 2) < 1) {
    goto LABEL_16;
  }
  char v14 = 0;
  uint64_t v15 = (v13 >> 2);
  do
  {
    float v16 = *v12;
    float v17 = fabsf(*v12);
    if (*v12 <= 0.0 || v17 == INFINITY)
    {
      *BOOL v12 = 1.0;
      float v16 = 1.0;
    }
    v14 |= v16 != 1.0;
    ++v12;
    --v15;
  }
  while (v15);
  if (v14)
  {
    uint64_t v19 = a1[34];
  }
  else
  {
LABEL_16:
    uint64_t v19 = a1[34];
    if (*(float *)(v19 + 40) == 1.0) {
      goto LABEL_104;
    }
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_WORD *)std::__split_buffer<std::string>::pointer v89 = 257;
  v89[2] = 0;
  *(_OWORD *)&v89[8] = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  memset(v92, 0, sizeof(v92));
  int v86 = 0;
  char v87 = 0;
  unint64_t v88 = 0;
  unint64_t v83 = 0;
  std::string v84 = 0;
  unint64_t v85 = 0;
  unint64_t v81 = 0;
  unint64_t v82 = 0;
  std::string __p = 0;
  float v20 = *(float *)(v19 + 24);
  int v21 = (int)v20;
  uint64_t v22 = *(void *)(v5 + 8);
  if ((int)v20 >= (int)(-1431655765 * ((unint64_t)(*(void *)(v5 + 16) - v22) >> 3)))
  {
    uint64_t v65 = 0;
    int v64 = 0;
    float v27 = *(float *)(v19 + 28);
  }
  else
  {
    do
    {
      uint64_t v23 = *(void *)(v5 + 80);
      uint64_t v24 = *(void *)(v5 + 88);
      float v25 = 1.0;
      if (v23 != v24 && v21 < (int)((unint64_t)(v24 - v23) >> 2)) {
        float v25 = *(float *)(v23 + 4 * v21);
      }
      if (*(unsigned char *)(v19 + 60))
      {
        float v26 = *(float *)(v19 + 36);
        if (v25 <= v26)
        {
          if (v25 >= *(float *)(v19 + 32)) {
            float v27 = 1.0;
          }
          else {
            float v27 = v25;
          }
          if (v25 < *(float *)(v19 + 32)) {
            float v25 = 1.0;
          }
        }
        else
        {
          if (v26 >= (float)(v25 / v26)) {
            float v27 = v25 / v26;
          }
          else {
            float v27 = *(float *)(v19 + 36);
          }
          float v25 = v25 / v27;
        }
      }
      else
      {
        float v27 = 1.0;
      }
      int v28 = v21;
      uint64_t v29 = (const void **)(v22 + 24 * v21);
      std::string v30 = v87;
      if ((unint64_t)v87 >= v88)
      {
        uint64_t v32 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&v86, (uint64_t)v29);
      }
      else
      {
        *char v87 = 0;
        v30[1] = 0;
        v30[2] = 0;
        uint64_t v31 = *(void *)(v22 + 24 * v21 + 8);
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v30, *v29, v31, (v31 - (uint64_t)*v29) >> 2);
        uint64_t v32 = (uint64_t)(v30 + 3);
      }
      char v87 = (void *)v32;
      std::string::size_type v33 = v81;
      if ((unint64_t)v81 >= v82)
      {
        uint64_t v35 = (float *)__p;
        uint64_t v36 = ((char *)v81 - (unsigned char *)__p) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v82 - (void)__p;
        if ((uint64_t)(v82 - (void)__p) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v82, v39);
          uint64_t v35 = (float *)__p;
          std::string::size_type v33 = v81;
        }
        else
        {
          unint64_t v40 = 0;
        }
        unint64_t v41 = (float *)&v40[4 * v36];
        *unint64_t v41 = v25;
        char v34 = v41 + 1;
        while (v33 != v35)
        {
          int v42 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v41-- - 1) = v42;
        }
        std::string __p = v41;
        unint64_t v81 = v34;
        unint64_t v82 = (unint64_t)&v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *unint64_t v81 = v25;
        char v34 = v33 + 1;
      }
      unint64_t v81 = v34;
      uint64_t v43 = *(void *)(v5 + 32);
      if (v43 != *(void *)(v5 + 40))
      {
        std::__split_buffer<std::string>::pointer v44 = (const void **)(v43 + 24 * v28);
        long long v45 = v84;
        if ((unint64_t)v84 >= v85)
        {
          uint64_t v47 = (void *)std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&v83, (uint64_t)v44);
        }
        else
        {
          *std::string v84 = 0;
          v45[1] = 0;
          v45[2] = 0;
          uint64_t v46 = *(void *)(v43 + 24 * v28 + 8);
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v45, *v44, v46, (v46 - (uint64_t)*v44) >> 2);
          uint64_t v47 = v45 + 3;
        }
        std::string v84 = v47;
      }
      if (v27 != *(float *)(v19 + 44))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v48 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          double v50 = *(float *)(v19 + 40);
          *(_DWORD *)std::__split_buffer<std::string> buf = 134218240;
          double v94 = v27;
          __int16 v95 = 2048;
          double v96 = v50;
          _os_log_impl(&dword_20CD80000, v48, OS_LOG_TYPE_DEBUG, "NeuralRateChangeModule: Modify Mel-Spectrogram: local rate = %.2f, global rate: %.2f", buf, 0x16u);
        }
        Diagnostics::log(7, "NeuralRateChangeModule: Modify Mel-Spectrogram: local rate = %.2f, global rate: %.2f", v49, v27, *(float *)(v19 + 40));
      }
      if (v25 != *(float *)(v19 + 48))
      {
        int v51 = (int)(float)(v20 * (float)*(int *)(v19 + 52));
        uint64_t v53 = *(float **)(v19 + 8);
        unint64_t v52 = *(void *)(v19 + 16);
        if ((unint64_t)v53 >= v52)
        {
          unint64_t v55 = *(float **)v19;
          uint64_t v56 = ((uint64_t)v53 - *(void *)v19) >> 3;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v58 = v52 - (void)v55;
          if (v58 >> 2 > v57) {
            unint64_t v57 = v58 >> 2;
          }
          _CF = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
          if (!_CF) {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v59);
            unint64_t v55 = *(float **)v19;
            uint64_t v53 = *(float **)(v19 + 8);
          }
          else
          {
            uint64_t v60 = 0;
          }
          unint64_t v61 = v59 + 8 * v56;
          *(_DWORD *)unint64_t v61 = v51;
          *(float *)(v61 + 4) = v25;
          unint64_t v62 = v61;
          if (v53 != v55)
          {
            do
            {
              uint64_t v63 = *((void *)v53 - 1);
              v53 -= 2;
              *(void *)(v62 - 8) = v63;
              v62 -= 8;
            }
            while (v53 != v55);
            unint64_t v55 = *(float **)v19;
          }
          uint64_t v54 = (float *)(v61 + 8);
          *(void *)uint64_t v19 = v62;
          *(void *)(v19 + 8) = v61 + 8;
          *(void *)(v19 + 16) = v59 + 8 * v60;
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v53 = v51;
          v53[1] = v25;
          uint64_t v54 = v53 + 2;
        }
        *(void *)(v19 + 8) = v54;
      }
      float v20 = v20 + (float)(v27 * *(float *)(v19 + 40));
      *(float *)(v19 + 44) = v27;
      *(float *)(v19 + 48) = v25;
      int v21 = (int)v20;
      uint64_t v22 = *(void *)(v5 + 8);
    }
    while ((int)v20 < (int)(-1431655765 * ((unint64_t)(*(void *)(v5 + 16) - v22) >> 3)));
    int v64 = v86;
    uint64_t v65 = (uint64_t)v87;
  }
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v89[8], (uint64_t)v64, v65, 0xAAAAAAAAAAAAAAABLL * ((v65 - (uint64_t)v64) >> 3));
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v92[24], (char *)__p, (uint64_t)v81, ((char *)v81 - (unsigned char *)__p) >> 2);
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v90 + 8, (uint64_t)v83, (uint64_t)v84, 0xAAAAAAAAAAAAAAABLL * ((void ***)v84 - v83));
  *(float *)(v19 + 24) = v20
                       - (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3));
  *(float *)(v19 + 28) = v27;
  uint64_t v66 = *(void *)&v89[8];
  uint64_t v67 = *(void *)&v89[16];
  unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v89[16] - *(void *)&v89[8]) >> 3);
  *(_DWORD *)(v19 + 56) -= 1431655765 * ((uint64_t)(*(void *)&v89[16] - *(void *)&v89[8]) >> 3);
  std::vector<std::string>::pointer v69 = *(float **)(v5 + 80);
  if (v69 == *(float **)(v5 + 88))
  {
    float v72 = (float)*(int *)(v5 + 104);
  }
  else
  {
    float v70 = *v69;
    float v71 = *(float *)(v19 + 36);
    if (*v69 <= v71)
    {
      if (v70 >= *(float *)(v19 + 32) && v70 <= v71) {
        float v70 = 1.0;
      }
    }
    else
    {
      float v70 = v70 / v71;
      if (v71 < v70) {
        float v70 = *(float *)(v19 + 36);
      }
    }
    float v72 = v70 * (float)*(int *)(v5 + 104);
  }
  *(_DWORD *)&v92[48] = (int)(float)(*(float *)(v19 + 40) * v72);
  if ((unsigned char *)v5 != v89)
  {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v5 + 8, v66, v67, v68);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v5 + 80), *(char **)&v92[24], *(uint64_t *)&v92[32], (uint64_t)(*(void *)&v92[32] - *(void *)&v92[24]) >> 2);
    *(_DWORD *)(v5 + 104) = *(_DWORD *)&v92[48];
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v5 + 32, *((uint64_t *)&v90 + 1), v91, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - *((void *)&v90 + 1)) >> 3));
  }
  if (__p)
  {
    unint64_t v81 = (float *)__p;
    operator delete(__p);
  }
  std::string __p = &v83;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v83 = &v86;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (*(void *)&v92[24])
  {
    *(void *)&v92[32] = *(void *)&v92[24];
    operator delete(*(void **)&v92[24]);
  }
  int v86 = (void **)v92;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v86);
  int v86 = (void **)&v90 + 1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v86);
  int v86 = (void **)&v89[8];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v86);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
LABEL_104:
  uint64_t v74 = *a2;
  uint64_t v75 = a1[34];
  memset(v89, 0, sizeof(v89));
  std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(v89, *(const void **)v75, *(void *)(v75 + 8), (uint64_t)(*(void *)(v75 + 8) - *(void *)v75) >> 3);
  uint64_t v76 = (std::__shared_weak_count *)operator new(0x30uLL);
  v76->__shared_owners_ = 0;
  v76->__shared_weak_owners_ = 0;
  v76->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
  v76[1].std::__shared_count = *(std::__shared_count *)v89;
  v76[1].__shared_weak_owners_ = *(void *)&v89[16];
  int v86 = (void **)&v76[1].__vftable;
  char v87 = &v76->__vftable;
  Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v74, (unint64_t *)&v86);
  std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  std::vector<std::string>::pointer v77 = (std::__shared_weak_count *)a2[1];
  uint64_t v78 = *a2;
  std::__split_buffer<std::string>::pointer v79 = v77;
  if (v77) {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*a1 + 72))(a1, &v78);
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  *(void *)(a1[34] + 8) = *(void *)a1[34];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20D2F5430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<RateMarker>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20D2F556C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<RateMarker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<RateMarker>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<RateMarker>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char *std::vector<RateMarker>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void WaveNetFeature::~WaveNetFeature(WaveNetFeature *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void NeuralRateChangeModule::~NeuralRateChangeModule(NeuralRateChangeModule *this)
{
  *(void *)this = off_26C2035F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C2035F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

void std::__shared_ptr_emplace<RateChanger>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<RateChanger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RateChanger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL NormAction_en_in::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  while (strcmp((&NormAction_en_in::consume_next_token(std::string const&)::multipliers)[v2], v3))
  {
    if (++v2 == 4)
    {
      uint64_t v4 = &xmmword_264113BF0;
      return v4 != &xmmword_264113BF0;
    }
  }
  uint64_t v4 = (long long *)&(&NormAction_en_in::consume_next_token(std::string const&)::multipliers)[v2];
  return v4 != &xmmword_264113BF0;
}

void NormAction::splt()
{
}

void NormAction::digits()
{
}

void NormAction::nexpand()
{
}

void NormAction_en_in::~NormAction_en_in(NormAction_en_in *this)
{
  *(void *)this = off_26C2002C0;
  uint64_t v2 = (NormAction_en_in *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en_in *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x2105595E0);
}

{
  UTFNumberFormatter *v2;
  uint64_t vars8;

  *(void *)this = off_26C2002C0;
  uint64_t v2 = (NormAction_en_in *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en_in *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

void SoundStormPromptInference::prepare_inputs(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v24[0] = *a2;
  v24[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SoundStormInference::prepare_inputs((uint64_t)a1, v24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (a1[6])
  {
    for (unint64_t i = 0; i < a1[6]; ++i)
    {
      std::to_string(&v22, i);
      uint64_t v5 = std::string::insert(&v22, 0, "prompt_k_");
      long long v6 = (std::string::value_type *)v5->__r_.__value_.__r.__words[0];
      std::string::size_type size = v5->__r_.__value_.__l.__size_;
      v23[0] = v5->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v23 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
      int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      std::to_string(&v22, i);
      uint64_t v9 = std::string::insert(&v22, 0, "prompt_v_");
      uint64_t v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
      std::string::size_type v11 = v9->__r_.__value_.__l.__size_;
      v21[0] = v9->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
      int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = a1[1];
      if (v8 < 0)
      {
        std::string::__init_copy_ctor_external(&v20, v6, size);
      }
      else
      {
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
        v20.__r_.__value_.__l.__size_ = size;
        LODWORD(v20.__r_.__value_.__r.__words[2]) = v23[0];
        *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v23 + 3);
        *((unsigned char *)&v20.__r_.__value_.__s + 23) = v8;
      }
      long long v14 = *(_OWORD *)(a1[7] + 16 * i);
      long long v19 = v14;
      if (*((void *)&v14 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::string *, long long *))(*(void *)v13 + 8))(v13, &v20, &v19);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = a1[1];
      if (v12 < 0)
      {
        std::string::__init_copy_ctor_external(&v18, v10, v11);
      }
      else
      {
        v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
        v18.__r_.__value_.__l.__size_ = v11;
        LODWORD(v18.__r_.__value_.__r.__words[2]) = v21[0];
        *(_DWORD *)((char *)&v18.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v21 + 3);
        *((unsigned char *)&v18.__r_.__value_.__s + 23) = v12;
      }
      long long v16 = *(_OWORD *)(a1[10] + 16 * i);
      long long v17 = v16;
      if (*((void *)&v16 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::string *, long long *))(*(void *)v15 + 8))(v15, &v18, &v17);
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if ((v12 & 0x80000000) == 0)
        {
LABEL_29:
          if (v8 < 0) {
            goto LABEL_34;
          }
          continue;
        }
      }
      else if ((v12 & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(v10);
      if (v8 < 0) {
LABEL_34:
      }
        operator delete(v6);
    }
  }
}

void sub_20D2F5C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D2F5D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    JUMPOUT(0x20D2F5D1CLL);
  }
  JUMPOUT(0x20D2F5D20);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v5 = *a1;
    if (v5 > 9) {
      long long v6 = "number";
    }
    else {
      long long v6 = off_2641152A0[v5];
    }
    std::string::basic_string[abi:ne180100]<0>(&v9, v6);
    uint64_t v7 = std::string::insert(&v9, 0, "cannot use operator[] with a string argument with ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
    long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)&v10, exception);
  }
  return std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((void *)a1 + 1), a2)+ 56;
}

void sub_20D2F5E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MatchPromptImpl::generate_tokens(MatchPromptImpl *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v20);
    if ((void)v20)
    {
      if ((**((void **)this + 16)
         || (*(unsigned int (**)(void))(**((void **)this + 18) + 72))(*((void *)this + 18)))
        && !**((unsigned char **)this + 17))
      {
        uint64_t v2 = v20;
        if ((void *)(v2 + 8) == v3) {
          uint64_t v4 = 0;
        }
        else {
          uint64_t v4 = v3[5] + 8;
        }
        if ((void *)(v2 + 8) == v5) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = v5[5] + 8;
        }
        if (!*((unsigned char *)this + 152) || *((unsigned char *)this + 153)) {
          goto LABEL_57;
        }
        *((unsigned char *)this + 153) = 1;
        uint64_t v7 = *(long long **)(*(void *)(v4 + 48) + 16);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          v28.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
        }
        std::string::basic_string[abi:ne180100]<0>(&v29, &byte_20D5A22AE);
        __int16 v31 = 0;
        LOBYTE(v22) = 0;
        *((void *)&v22 + 1) = 0;
        uint64_t v23 = 0;
        int v24 = 0x7FFFFFFF;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        float v25 = 0;
        if ((MatchPromptImpl::match_generated_prompts((uint64_t)this, (uint64_t)&v28, (uint64_t)&v22) & 1) != 0
          || (MatchPromptImpl::match_prompts((uint64_t)this, (std::basic_string<char16_t>::size_type)&v28, (uint64_t)&v22) & 1) != 0)
        {
          MatchPromptImpl::log_prompt((uint64_t)&v22, (uint64_t)&v28);
          do
          {
            (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&__p);
            std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0]) {
              (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
          }
          while (v9);
          long long v10 = operator new(0x30uLL);
          *(_OWORD *)((char *)v10 + 8) = 0u;
          unsigned char v10[2] = 0u;
          *((void *)v10 + 3) = v10 + 2;
          *(void *)long long v10 = off_26C215330;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10 + 24;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
          std::string::operator=((std::string *)(v4 + 24), *(const std::string **)(*(void *)(v4 + 48) + 16));
          *(_DWORD *)uint64_t v4 = 1886547312;
          if (*(char *)(v4 + 47) < 0) {
            uint64_t v11 = *(void *)(v4 + 32);
          }
          else {
            uint64_t v11 = *(unsigned __int8 *)(v4 + 47);
          }
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = v11;
          uint64_t v12 = __p.__r_.__value_.__r.__words[0];
          Agglomerate::set<TokenBasicItem>((uint64_t)__p.__r_.__value_.__l.__data_, (long long *)v4);
          *(void *)std::__split_buffer<std::string> buf = &v32;
          if (!v13) {
            operator new();
          }
          *(unsigned char *)(v13 + 8) = 1;
          Agglomerate::set<TokenPromptItem>(v12, &v22);
          std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, (long long *)&__p);
          *((unsigned char *)this + 153) = 0;
          *((unsigned char *)this + 8) = 1;
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          char v14 = 1;
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            Censor::global_plaintext(&__p, (uint64_t)&v28);
            long long v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
            *(void *)&uint8_t buf[4] = v16;
            _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEBUG, "No prompts for whole input: %s", buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          Censor::global_plaintext(&__p, (uint64_t)&v28);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(7, "No prompts for whole input: %s", v17, p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v14 = 0;
        }
        if (SHIBYTE(v27) < 0) {
          operator delete(v25);
        }
        if (v30 < 0) {
          operator delete(v29);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if ((v14 & 1) == 0)
        {
LABEL_57:
          if (v6) {
            long long v19 = (const std::string *)(v4 + 24);
          }
          else {
            long long v19 = *(const std::string **)(*(void *)(v4 + 48) + 16);
          }
          if (!*((unsigned char *)this + 104) || (MatchPromptImpl::match_region((uint64_t)this, 1, v19) & 1) == 0) {
            MatchPromptImpl::match_region((uint64_t)this, 0, v19);
          }
        }
      }
      else
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v20);
        (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      }
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
      *((unsigned char *)this + 153) = 0;
    }
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_20D2F63F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::pair<std::string,std::string>::~pair((uint64_t)&a26);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::find<std::type_index>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::type_info::before[abi:ne180100](*(void *)(v3[4] + 8), v4);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      unint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::type_info::before[abi:ne180100](v4, *(void *)(v5[4] + 8))) {
    return v2;
  }
  return v5;
}

uint64_t MatchPromptImpl::match_region(uint64_t a1, int a2, const std::string *a3)
{
  std::string::size_type v4 = 0;
  std::string::size_type v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v90 = *MEMORY[0x263EF8340];
  memset(&v83, 0, sizeof(v83));
  unint64_t v8 = -1;
  do
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 16))(&__p);
    uint64_t v9 = __p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0])
    {
      *(unsigned char *)(a1 + 104) = 1;
      uint64_t v72 = v7;
      goto LABEL_15;
    }
    if ((void *)(v9 + 8) == v10)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v11 = v10[5];
      uint64_t v12 = v11 + 8;
      if (*(_DWORD *)(v11 + 8) != 1835102827)
      {
        unint64_t v13 = *(void *)(v11 + 16);
        if (v13 < v8) {
          unint64_t v8 = *(void *)(v11 + 16);
        }
        unint64_t v14 = *(void *)(v11 + 24) + v13;
        if (v6 <= v14) {
          unint64_t v6 = v14;
        }
        std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v83.__r_.__value_.__l.__size_;
        }
        if (!size)
        {
          long long v16 = *(std::string **)(v11 + 56);
          if (TokenAttributes::is_prompt((TokenAttributes *)v16))
          {
            std::string::operator=(&v83, v16 + 8);
            uint64_t v9 = __p.__r_.__value_.__r.__words[0];
          }
        }
      }
    }
    if ((void *)(v9 + 8) == v18)
    {
      long long v19 = v18;
      if (v19 == v20) {
        goto LABEL_29;
      }
      uint64_t v21 = v20[5];
      if (!a2)
      {
        if (!*(unsigned char *)(v21 + 8))
        {
LABEL_29:
          char v17 = 1;
          goto LABEL_30;
        }
        char v17 = *(unsigned char *)(v21 + 9);
LABEL_28:
        *(unsigned char *)(a1 + 104) = v17;
        uint64_t v72 = v7 + 1;
LABEL_15:
        char v17 = 0;
        std::string::size_type v4 = v6 - v8;
        std::string::size_type v5 = v8;
        goto LABEL_30;
      }
      char v17 = 1;
      if (*(unsigned char *)(v21 + 9)) {
        goto LABEL_28;
      }
    }
    else
    {
      std::string::size_type v5 = 0;
      char v17 = 0;
      if (*(char *)(v12 + 47) < 0) {
        std::string::size_type v4 = *(void *)(v12 + 32);
      }
      else {
        std::string::size_type v4 = *(unsigned __int8 *)(v12 + 47);
      }
      uint64_t v72 = 1;
    }
LABEL_30:
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    ++v7;
  }
  while ((v17 & 1) != 0);
  std::string::basic_string(&v80, a3, v5, v4, (std::allocator<char> *)&__p);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v83;
  }
  __int16 v82 = 0;
  LOBYTE(v74) = 0;
  *((void *)&v74 + 1) = 0;
  uint64_t v75 = 0;
  int v76 = 0x7FFFFFFF;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  std::vector<std::string>::pointer v77 = 0;
  if (v4
    && (a2 && (MatchPromptImpl::match_generated_prompts(a1, (uint64_t)&v80, (uint64_t)&v74) & 1) != 0
     || (MatchPromptImpl::match_prompts(a1, (std::basic_string<char16_t>::size_type)&v80, (uint64_t)&v74) & 1) != 0))
  {
    int v69 = 1;
    goto LABEL_61;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__p, (uint64_t)&v80);
    uint64_t v23 = a2 ? "sentence" : "phrase";
    int v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v24;
    _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_DEBUG, "No prompts for %s: %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, (uint64_t)&v80);
  if (a2) {
    uint64_t v26 = "sentence";
  }
  else {
    uint64_t v26 = "phrase";
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(7, "No prompts for %s: %s", v25, v26, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v69 = 0;
  uint64_t v28 = 0;
  if ((a2 & 1) == 0)
  {
LABEL_61:
    *((void *)&v74 + 1) = v72;
    MEMORY[0x210558E70](&v81, "🔠");
    if (v72)
    {
      uint64_t v29 = 0;
      char v68 = v69;
      do
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v73);
        (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
        uint64_t v30 = v73;
        uint64_t v32 = (void *)(v30 + 8);
        if ((void *)(v30 + 8) == v31) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = v31[5] + 8;
        }
        if (v69)
        {
          int v34 = *(_DWORD *)v33;
          if (*(_DWORD *)v33 == 1718909044) {
            goto LABEL_70;
          }
          if (v34 == 1886809699) {
            goto LABEL_73;
          }
          if (v34 == 1952807028)
          {
LABEL_70:
            if (v68) {
              Agglomerate::set<TokenPromptItem>(v30, &v74);
            }
            char v68 = 0;
LABEL_73:
            *(_DWORD *)uint64_t v33 = 1886547312;
            goto LABEL_142;
          }
          goto LABEL_142;
        }
        if (*(unsigned char *)(a1 + 152))
        {
          uint64_t v35 = *(void *)(v33 + 48);
          int v36 = *(char *)(v35 + 167);
          if (v36 < 0)
          {
            if (*(void *)(v35 + 152) != 5) {
              goto LABEL_85;
            }
            unint64_t v37 = *(int **)(v35 + 144);
          }
          else
          {
            unint64_t v37 = (int *)(v35 + 144);
            if (v36 != 5) {
              goto LABEL_85;
            }
          }
          int v38 = *v37;
          int v39 = *((unsigned __int8 *)v37 + 4);
          if (v38 == 1818587251 && v39 == 108)
          {
            MEMORY[0x210558E70]();
            operator new();
          }
        }
LABEL_85:
        if (v32 != v41)
        {
          uint64_t v42 = v41[5];
          uint64_t v43 = (uint64_t *)(v42 + 8);
          int v44 = *(char *)(v42 + 31);
          if (v44 < 0)
          {
            if (*(void *)(v42 + 16) != 9) {
              goto LABEL_142;
            }
            uint64_t v43 = (uint64_t *)*v43;
          }
          else if (v44 != 9)
          {
            goto LABEL_142;
          }
          long long v45 = (uint64_t *)*v43;
          int v46 = *((unsigned __int8 *)v43 + 8);
          if (v45 == (uint64_t *)0x554F5F4C4C455053 && v46 == 84)
          {
            if (v32 == v48) {
              uint64_t v49 = 0;
            }
            else {
              uint64_t v49 = v48[5] + 8;
            }
            std::string::operator=(&v80, (const std::string *)(v49 + 24));
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v80.__r_.__value_.__l.__size_)
              {
                int v51 = (std::string *)v80.__r_.__value_.__r.__words[0];
                if (*(unsigned char *)(v80.__r_.__value_.__r.__words[0] + v80.__r_.__value_.__l.__size_ - 1) == 95)
                {
                  uint64_t v50 = --v80.__r_.__value_.__l.__size_;
LABEL_107:
                  v51->__r_.__value_.__s.__data_[v50] = 0;
                }
              }
            }
            else if (*((unsigned char *)&v80.__r_.__value_.__s + 23) {
                   && *((unsigned char *)&v79 + HIBYTE(v80.__r_.__value_.__r.__words[2]) + 7) == 95)
            }
            {
              uint64_t v50 = HIBYTE(v80.__r_.__value_.__r.__words[2]) - 1;
              --*((unsigned char *)&v80.__r_.__value_.__s + 23);
              int v51 = &v80;
              goto LABEL_107;
            }
            (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 16) + 16))(buf);
            uint64_t v52 = *(void *)buf;
            if (!*(void *)buf
            {
              uint64_t v54 = 0;
            }
            else
            {
              uint64_t v54 = v53[5] + 8;
            }
            if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 72))(*(void *)(a1 + 144)) & 1) == 0)
            {
              if (v54 && *(_DWORD *)v54 == 1886809699)
              {
                std::string::size_type v55 = *(unsigned __int8 *)(v54 + 47);
                if (*(char *)(v54 + 47) < 0)
                {
                  if (!*(void *)(v54 + 32)) {
                    goto LABEL_156;
                  }
                  uint64_t v56 = *(char **)(v54 + 24);
                }
                else
                {
                  uint64_t v56 = (char *)(v54 + 24);
                  if (!*(unsigned char *)(v54 + 47))
                  {
LABEL_156:
                    unint64_t v57 = ".";
                    goto LABEL_121;
                  }
                }
                if (memchr(".,", *v56, 3uLL))
                {
                  if ((v55 & 0x80u) == 0) {
                    uint64_t v65 = (const std::string::value_type *)(v54 + 24);
                  }
                  else {
                    uint64_t v65 = *(const std::string::value_type **)(v54 + 24);
                  }
                  if ((v55 & 0x80u) == 0) {
                    std::string::size_type v66 = v55;
                  }
                  else {
                    std::string::size_type v66 = *(void *)(v54 + 32);
                  }
                  std::string::append(&v80, v65, v66);
                  int v58 = 1;
                  goto LABEL_123;
                }
                unint64_t v57 = ",";
              }
              else if (*(void *)buf)
              {
                unint64_t v57 = ",";
              }
              else
              {
                unint64_t v57 = ".";
              }
LABEL_121:
              std::string::append(&v80, v57);
            }
            int v58 = 0;
LABEL_123:
            if ((MatchPromptImpl::match_generated_prompts(a1, (uint64_t)&v80, (uint64_t)&v74) & 1) != 0
              || MatchPromptImpl::match_prompts(a1, (std::basic_string<char16_t>::size_type)&v80, (uint64_t)&v74))
            {
              MatchPromptImpl::log_prompt((uint64_t)&v74, (uint64_t)&v80);
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              unint64_t v59 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
              {
                Censor::global_plaintext(&__p, (uint64_t)&v80);
                uint64_t v60 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)unint64_t v85 = 136315138;
                int v86 = v60;
                _os_log_impl(&dword_20CD80000, v59, OS_LOG_TYPE_DEFAULT, "Spelling: [%s]", v85, 0xCu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              Censor::global_plaintext(&__p, (uint64_t)&v80);
              unint64_t v62 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              Diagnostics::log(5, "Spelling: [%s]", v61, v62);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              Agglomerate::set<TokenPromptItem>(v73, &v74);
              *(_DWORD *)uint64_t v49 = 1886547312;
              if (v58) {
                *(_DWORD *)uint64_t v54 = 1886547312;
              }
            }
            if ((*(unsigned int (**)(void))(**(void **)(a1 + 144) + 72))(*(void *)(a1 + 144)))
            {
              uint64_t v63 = (char *)operator new(0x30uLL);
              *(_OWORD *)(v63 + 8) = 0u;
              *(void *)uint64_t v63 = off_26C215330;
              *((_OWORD *)v63 + 2) = 0u;
              *((void *)v63 + 3) = v63 + 32;
              int v64 = (char *)operator new(0x30uLL);
              *(_OWORD *)(v64 + 8) = 0u;
              *(void *)int v64 = off_26C215330;
              *((_OWORD *)v64 + 2) = 0u;
              *((void *)v64 + 3) = v64 + 32;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v63 + 24);
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v63;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v63 + 1, 1uLL, memory_order_relaxed);
              unint64_t v88 = v64 + 24;
              std::__split_buffer<std::string>::pointer v89 = v64;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v64 + 1, 1uLL, memory_order_relaxed);
              LOWORD(__p.__r_.__value_.__l.__data_) = 257;
              Agglomerate::set<TokenPhrasingItem>(v73, (uint64_t)&__p);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63);
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
          }
        }
LABEL_142:
        std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), &v73);
        if (*((void *)&v73 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
        }
        ++v29;
      }
      while (v29 != v72);
    }
    if (v69) {
      MatchPromptImpl::log_prompt((uint64_t)&v74, (uint64_t)&v80);
    }
    uint64_t v28 = 1;
  }
  if (SHIBYTE(v79) < 0) {
    operator delete(v77);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  return v28;
}

void sub_20D2F7724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a66);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  std::pair<std::string,std::string>::~pair((uint64_t)&a48);
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<Agglomerate>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<Agglomerate>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<Agglomerate>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(void *)uint64_t v6 = v8;
      a1[2] += 8;
      return;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v28);
      uint64_t v30 = &v29[8 * (v28 >> 2)];
      uint64_t v32 = &v29[8 * v31];
      uint64_t v33 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v34 = a1[2] - (void)v33;
      if (v34)
      {
        uint64_t v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v35 = 8 * (v34 >> 3);
        int v36 = &v29[8 * (v28 >> 2)];
        do
        {
          uint64_t v37 = *v33++;
          *(void *)int v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    char v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  uint64_t v19 = a1[2];
  unint64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  uint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&long long v49 = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v49);
      return;
    }
    *(void *)&long long v49 = operator new(0x1000uLL);
    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v49);
    int v39 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    uint64_t v7 = (char *)(v39 + 1);
    uint64_t v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_31;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v41);
      uint64_t v30 = &v29[8 * (v41 >> 2)];
      uint64_t v32 = &v29[8 * v42];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        int v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)int v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      int v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  int v51 = a1 + 3;
  *(void *)&long long v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&long long v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  unint64_t v48 = operator new(0x1000uLL);
  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v49, &v48);
  for (unint64_t i = (void *)a1[2];
        i != (void *)a1[1];
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  uint64_t v26 = (char *)*a1;
  long long v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

void sub_20D2F7BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      unint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        unint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)unint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      float v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t MatchPromptImpl::match_generated_prompts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 72))(*(void *)(a1 + 144));
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 144);
    uint64_t v8 = (void *)(a2 + 24);
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a2 + 24);
    if (v9 == -1) {
      return 0;
    }
    int v10 = v9;
    MEMORY[0x210558E70](a3 + 32, "GPROMPT");
    *(_DWORD *)(a3 + 24) = v10;
    int v11 = *(char *)(a2 + 47);
    if (v11 < 0)
    {
      if (*(void *)(a2 + 32) != 4)
      {
LABEL_10:
        BOOL v12 = 0;
        goto LABEL_11;
      }
      uint64_t v8 = (void *)*v8;
    }
    else if (v11 != 4)
    {
      goto LABEL_10;
    }
    BOOL v12 = *(_DWORD *)v8 == -1600872464;
LABEL_11:
    *(unsigned char *)a3 = v12;
    return 1;
  }
  return result;
}

uint64_t MatchPromptImpl::match_prompts(uint64_t a1, std::basic_string<char16_t>::size_type a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  BOOL v3 = *(void **)(a1 + 128);
  if (!*v3) {
    return 0;
  }
  int v5 = *(char *)(a2 + 23);
  unint64_t v6 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  if (v6 > 2 * v3[15]) {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 112);
  if (v5 >= 0) {
    BOOL v12 = (const char *)a2;
  }
  else {
    BOOL v12 = *(const char **)a2;
  }
  LODWORD(pErrorCode.__r_.__value_.__l.__data_) = 0;
  u_strFromUTF8(0, 0, 0, v12, v6, (UErrorCode *)&pErrorCode);
  if (LODWORD(pErrorCode.__r_.__value_.__l.__data_) == 10)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::basic_string<char16_t>::size_type v15 = a2;
      }
      else {
        std::basic_string<char16_t>::size_type v15 = *(void *)a2;
      }
      LODWORD(pErrorCode.__r_.__value_.__l.__data_) = 136315138;
      *(std::basic_string<char16_t>::size_type *)((char *)pErrorCode.__r_.__value_.__r.__words + 4) = v15;
      _os_log_impl(&dword_20CD80000, v13, OS_LOG_TYPE_ERROR, "Found Invalid UTF8 Input: %s", (uint8_t *)&pErrorCode, 0xCu);
    }
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v16 = (const char *)a2;
    }
    else {
      unint64_t v16 = *(const char **)a2;
    }
    Diagnostics::log(3, "Found Invalid UTF8 Input: %s", v14, v16);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v17 = *(_OWORD *)a2;
      std::string v69 = *(std::string *)a2;
    }
  }
  else
  {
    int v18 = *(char *)(a2 + 23);
    if (v18 >= 0) {
      uint64_t v19 = (const char *)a2;
    }
    else {
      uint64_t v19 = *(const char **)a2;
    }
    if (v18 >= 0) {
      unint64_t v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v20 = *(void *)(a2 + 8);
    }
    UTFString::to_utf16(&__p, v19, v20);
    UTFTransliterator::transliterate(&pErrorCode, v11, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((pErrorCode.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::basic_string<char16_t> pErrorCode = &pErrorCode;
    }
    else {
      p_std::basic_string<char16_t> pErrorCode = (std::basic_string<char16_t> *)pErrorCode.__r_.__value_.__r.__words[0];
    }
    if ((pErrorCode.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32_t v22 = HIBYTE(pErrorCode.__r_.__value_.__r.__words[2]);
    }
    else {
      int32_t v22 = pErrorCode.__r_.__value_.__r.__words[1];
    }
    UTFString::to_utf8(&v69, (const UChar *)p_pErrorCode, v22);
    if (SHIBYTE(pErrorCode.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pErrorCode.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::size_type v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v69.__r_.__value_.__l.__size_;
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v69.__r_.__value_.__l.__size_;
  }
  if (!v25)
  {
LABEL_110:
    uint64_t v7 = 0;
    if ((v23 & 0x80) != 0) {
      goto LABEL_111;
    }
    return v7;
  }
  uint64_t v26 = (char *)&v68 + 15;
  *(void *)&long long v17 = 136315906;
  long long v68 = v17;
  while (2)
  {
    long long v27 = *(void **)(a1 + 128);
    if ((v23 & 0x80u) == 0) {
      std::string::size_type size = v23;
    }
    uint64_t v28 = v27[6];
    unint64_t v29 = (v27[7] - v28) >> 3;
    if (v29 >= size) {
      unint64_t v29 = size;
    }
    if (v29)
    {
      unsigned int v30 = 0;
      uint64_t v31 = (int *)v27[12];
      uint64_t v32 = &v69;
      if ((v23 & 0x80u) != 0) {
        uint64_t v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      unint64_t v33 = v29;
      do
      {
        int v35 = v32->__r_.__value_.__s.__data_[0];
        uint64_t v32 = (std::string *)((char *)v32 + 1);
        int v34 = v35;
        int v36 = *v31++;
        v30 += v36 * v34;
        --v33;
      }
      while (v33);
    }
    else
    {
      unsigned int v30 = 0;
    }
    unint64_t v37 = v29 - 1;
    int v38 = (void *)(v27[9] + 40 * (v29 - 1));
    unint64_t v39 = v38[1];
    if (!v39) {
      goto LABEL_74;
    }
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      unint64_t v41 = v30;
      if (v39 <= v30) {
        unint64_t v41 = v30 % v39;
      }
    }
    else
    {
      unint64_t v41 = (v39 - 1) & v30;
    }
    uint64_t v42 = *(uint64_t ***)(*v38 + 8 * v41);
    if (!v42) {
      goto LABEL_74;
    }
    uint64_t v43 = *v42;
    if (!*v42) {
      goto LABEL_74;
    }
    uint64_t v44 = *(void *)(v28 + 8 * v37) + 4;
    while (1)
    {
      unint64_t v45 = v43[1];
      if (v45 == v30) {
        break;
      }
      if (v40.u32[0] > 1uLL)
      {
        if (v45 >= v39) {
          v45 %= v39;
        }
      }
      else
      {
        v45 &= v39 - 1;
      }
      if (v45 != v41) {
        goto LABEL_74;
      }
LABEL_73:
      uint64_t v43 = (uint64_t *)*v43;
      if (!v43) {
        goto LABEL_74;
      }
    }
    if (*((_DWORD *)v43 + 4) != v30) {
      goto LABEL_73;
    }
    long long v49 = v43;
    do
      long long v49 = (uint64_t *)*v49;
    while (v49 && *((_DWORD *)v49 + 4) == v30);
    if (v43 != v49)
    {
      std::string::size_type v66 = v26;
      uint64_t v67 = a3;
      while (1)
      {
        unsigned int v50 = *((_DWORD *)v43 + 5);
        uint64_t v51 = v44 + 48 * v50;
        uint64_t v52 = *(unsigned int *)(v51 + 40);
        std::string::size_type v53 = (*(_DWORD *)(v51 + 44) - v52);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v69.__r_.__value_.__l.__size_;
        }
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v55 = &v69;
        }
        else {
          std::string::size_type v55 = (std::string *)v69.__r_.__value_.__r.__words[0];
        }
        if (v54 >= v53) {
          size_t v56 = (*(_DWORD *)(v51 + 44) - v52);
        }
        else {
          size_t v56 = v54;
        }
        if (!memcmp(v55, (const void *)(v27[2] + *(void *)(v27[4] + 24) + v52), v56) && v54 == v53)
        {
          uint64_t v58 = v44 + 48 * v50;
          unsigned int v60 = *(_DWORD *)(v58 + 36);
          unint64_t v59 = (unsigned int *)(v58 + 36);
          if (v60 <= *(_DWORD *)(v27[5] + 4))
          {
            MEMORY[0x210558E70](v67 + 32, v44 + 48 * v50);
            *(void *)(v67 + 16) = *(void *)(v44 + 48 * v50 + 32);
            uint64_t v7 = 1;
            if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
            {
LABEL_111:
              uint64_t v47 = (std::string *)v69.__r_.__value_.__r.__words[0];
              goto LABEL_115;
            }
            return v7;
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          unint64_t v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            int v63 = *(_DWORD *)(v44 + 48 * v50 + 32);
            unsigned int v64 = *v59;
            int v65 = *(_DWORD *)(v27[5] + 4);
            LODWORD(pErrorCode.__r_.__value_.__l.__data_) = v68;
            *(std::basic_string<char16_t>::size_type *)((char *)pErrorCode.__r_.__value_.__r.__words + 4) = v44 + 48 * v50;
            pErrorCode.__r_.__value_.__s.__data_[6] = 1024;
            *(_DWORD *)((char *)&pErrorCode.__r_.__value_.__r.__words[1] + 6) = v63;
            pErrorCode.__r_.__value_.__s.__data_[9] = 1024;
            HIDWORD(pErrorCode.__r_.__value_.__r.__words[2]) = v64;
            __int16 v72 = 1024;
            int v73 = v65;
            _os_log_impl(&dword_20CD80000, v61, OS_LOG_TYPE_ERROR, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", (uint8_t *)&pErrorCode, 0x1Eu);
          }
          Diagnostics::log(3, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", v62, v44 + 48 * v50, *(unsigned int *)(v44 + 48 * v50 + 32), *v59, *(unsigned int *)(v27[5] + 4));
        }
        uint64_t v43 = (uint64_t *)*v43;
        if (v43 == v49)
        {
          std::string::size_type v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          uint64_t v26 = v66;
          a3 = v67;
          break;
        }
      }
    }
LABEL_74:
    if ((v23 & 0x80) == 0)
    {
      if (v26[v23] == 46)
      {
        std::string::size_type v46 = v23 - 1;
        *((unsigned char *)&v69.__r_.__value_.__s + 23) = v46 & 0x7F;
        uint64_t v47 = &v69;
        goto LABEL_79;
      }
      return 0;
    }
    uint64_t v47 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v69.__r_.__value_.__r.__words[0] + v69.__r_.__value_.__l.__size_ - 1) == 46)
    {
      std::string::size_type v46 = --v69.__r_.__value_.__l.__size_;
LABEL_79:
      v47->__r_.__value_.__s.__data_[v46] = 0;
      std::string::size_type v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v69.__r_.__value_.__l.__size_;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v69.__r_.__value_.__l.__size_;
      }
      if (!v48) {
        goto LABEL_110;
      }
      continue;
    }
    break;
  }
  uint64_t v7 = 0;
LABEL_115:
  operator delete(v47);
  return v7;
}

void sub_20D2F84F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 Agglomerate::set<TokenPromptItem>(uint64_t a1, long long *a2)
{
  uint64_t v7 = &v10;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenPromptItem>::ItemHolder((uint64_t)&v7, a2);
  long long v4 = v8[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v8 + 12);
  *(_OWORD *)(v3 + 8) = v4;
  int v5 = (void **)(v3 + 40);
  if (*(char *)(v3 + 63) < 0) {
    operator delete(*v5);
  }
  __n128 result = (__n128)v8[2];
  *(void *)(v3 + 56) = v9;
  *(__n128 *)int v5 = result;
  return result;
}

void sub_20D2F8638(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1093C40161C777DLL);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t UTFString::codepoint_iterator<std::string>::operator*(uint64_t *a1)
{
  uint64_t v2 = *((int *)a1 + 2);
  uint64_t v3 = *a1;
  int v4 = *(char *)(*a1 + v2);
  uint64_t result = *(unsigned __int8 *)(*a1 + v2);
  if (v4 < 0)
  {
    unint64_t v6 = v2 + 1;
    int v7 = *((_DWORD *)a1 + 3);
    if (v2 + 1 != v7)
    {
      if (result < 0xE0)
      {
        if (result >= 0xC2)
        {
          int v10 = result & 0x1F;
LABEL_11:
          unsigned int v11 = *(unsigned __int8 *)(v3 + (int)v6) ^ 0x80;
          unsigned int v12 = v11 | (v10 << 6);
          if (v11 <= 0x3F) {
            return v12;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        }
      }
      else
      {
        if (result > 0xEF)
        {
          if ((result - 240) > 4) {
            return 0xFFFFFFFFLL;
          }
          unint64_t v6 = *(unsigned __int8 *)(v3 + v6);
          if (((byte_20D6DDA97[v6 >> 4] >> (result + 16)) & 1) == 0) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v13 = v2 + 2;
          if (v2 + 2 == v7) {
            return 0xFFFFFFFFLL;
          }
          unsigned int v9 = *(unsigned __int8 *)(v3 + v13) ^ 0x80;
          if (v9 > 0x3F) {
            return 0xFFFFFFFFLL;
          }
          LODWORD(v8) = v6 & 0x3F | ((result - 240) << 6);
          LODWORD(v6) = v13;
        }
        else
        {
          uint64_t v8 = v4 & 0xF;
          if (((a00000000000000[v8] >> (*(unsigned char *)(v3 + v6) >> 5)) & 1) == 0) {
            return 0xFFFFFFFFLL;
          }
          unsigned int v9 = *(unsigned char *)(v3 + v6) & 0x3F;
        }
        LODWORD(v6) = v6 + 1;
        if (v6 != v7)
        {
          int v10 = v9 | (v8 << 6);
          goto LABEL_11;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(std::string *__b, uint64_t a2, char *a3, char *a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 184) = 0;
  if (!*(void *)(a2 + 48)) {
    goto LABEL_62;
  }
  int v7 = a3;
  std::string::basic_string[abi:ne180100](__b, (a4 - a3) >> 1, 0);
  if (a4 == v7)
  {
    long long v23 = *(_OWORD *)(a2 + 136);
    long long v52 = *(_OWORD *)(a2 + 120);
    long long v53 = v23;
    long long v24 = *(_OWORD *)(a2 + 168);
    long long v54 = *(_OWORD *)(a2 + 152);
    long long v55 = v24;
    long long v25 = *(_OWORD *)(a2 + 72);
    long long v48 = *(_OWORD *)(a2 + 56);
    long long v49 = v25;
    long long v26 = *(_OWORD *)(a2 + 104);
    long long v50 = *(_OWORD *)(a2 + 88);
    long long v51 = v26;
  }
  else
  {
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(__b, v8, 0);
    long long v9 = *(_OWORD *)(a2 + 136);
    long long v52 = *(_OWORD *)(a2 + 120);
    long long v53 = v9;
    long long v10 = *(_OWORD *)(a2 + 168);
    long long v54 = *(_OWORD *)(a2 + 152);
    long long v55 = v10;
    long long v11 = *(_OWORD *)(a2 + 72);
    long long v48 = *(_OWORD *)(a2 + 56);
    long long v49 = v11;
    __n128 v12 = *(__n128 *)(a2 + 88);
    long long v13 = *(_OWORD *)(a2 + 104);
    std::string::size_type size = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      std::basic_string<char16_t>::size_type v15 = __b;
    }
    else {
      std::basic_string<char16_t>::size_type v15 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __b->__r_.__value_.__l.__size_;
    }
    unint64_t v16 = (char *)v15 + size;
    long long v50 = *(_OWORD *)(a2 + 88);
    long long v51 = v13;
    while (1)
    {
      int v17 = (*(uint64_t (**)(void, long long *, char *, char *, char **, std::string *, char *, uint64_t *, __n128))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), &v48, v7, a4, &v47, v15, v16, &v46, v12);
      BOOL v18 = v47 == v7;
      *(void *)(a2 + 184) += (v47 - v7) >> 2;
      if (v18) {
        goto LABEL_60;
      }
      if (v17 != 1) {
        break;
      }
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = __b;
      }
      else {
        uint64_t v19 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = v46 - (void)v19;
      std::string::resize(__b, 2 * (v46 - (void)v19), 0);
      std::string::size_type v21 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        int32_t v22 = __b;
      }
      else {
        int32_t v22 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      std::basic_string<char16_t>::size_type v15 = (std::string *)((char *)v22 + v20);
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = __b->__r_.__value_.__l.__size_;
      }
      unint64_t v16 = (char *)v22 + v21;
      int v7 = v47;
      if (v47 >= a4) {
        goto LABEL_60;
      }
    }
    if (v17)
    {
      if (v17 != 3) {
        goto LABEL_60;
      }
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v27 = __b;
      }
      else {
        long long v27 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      std::string::resize(__b, (char *)v15 - (char *)v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(__b, v7, a4);
    }
    else
    {
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = __b;
      }
      else {
        uint64_t v28 = (std::string *)__b->__r_.__value_.__r.__words[0];
      }
      std::string::resize(__b, v46 - (void)v28, 0);
    }
  }
  std::string::size_type v29 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  std::string::size_type v30 = __b->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v31 = 22;
  }
  else {
    std::string::size_type v31 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(__b, v31, 0);
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v32 = v29;
  }
  else {
    std::string::size_type v32 = v30;
  }
  int v33 = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
  BOOL v34 = v33 < 0;
  if (v33 >= 0) {
    int v35 = __b;
  }
  else {
    int v35 = (std::string *)__b->__r_.__value_.__r.__words[0];
  }
  int v36 = (char *)v35 + v32;
  if (v34) {
    std::string::size_type v37 = __b->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v37 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  }
  for (unint64_t i = &v36[v37]; ; unint64_t i = (char *)v43 + v42)
  {
    int v39 = (*(uint64_t (**)(void, long long *, char *, char *, char **))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), &v48, v36, i, &v47);
    if (v39 != 1) {
      break;
    }
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint8x8_t v40 = __b;
    }
    else {
      uint8x8_t v40 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    int64_t v41 = v47 - (char *)v40;
    std::string::resize(__b, 2 * (v47 - (char *)v40), 0);
    std::string::size_type v42 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0) {
      uint64_t v43 = __b;
    }
    else {
      uint64_t v43 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    int v36 = (char *)v43 + v41;
    if ((v42 & 0x80u) != 0) {
      std::string::size_type v42 = __b->__r_.__value_.__l.__size_;
    }
  }
  if (!v39)
  {
    int v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v45 = __b;
    }
    else {
      unint64_t v45 = (std::string *)__b->__r_.__value_.__r.__words[0];
    }
    std::string::resize(__b, v36 - (char *)v45, 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b->__r_.__value_.__l.__data_);
  }
LABEL_62:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)&__b->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      __b->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  std::string::size_type v44 = *(void *)(a2 + 8);
  if (!v44) {
    goto LABEL_73;
  }
  std::string::__init_copy_ctor_external(__b, *(const std::string::value_type **)a2, v44);
}

void sub_20D2F8B8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::set<TokenBasicItem>(uint64_t a1, long long *a2)
{
  long long v9 = &v15;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenBasicItem>::ItemHolder((uint64_t)&v9, a2);
  long long v4 = v10;
  *(void *)(v3 + 24) = v11;
  *(_OWORD *)(v3 + 8) = v4;
  int v5 = (void **)(v3 + 32);
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = __p;
  *(void *)(v3 + 48) = v13;
  *(_OWORD *)int v5 = v6;
  HIBYTE(v13) = 0;
  LOBYTE(__p) = 0;
  long long v7 = v14;
  long long v14 = 0uLL;
  std::string::size_type v8 = *(std::__shared_weak_count **)(v3 + 64);
  *(_OWORD *)(v3 + 56) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    long long v9 = (char ***)off_26C205F58;
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    long long v9 = (char ***)off_26C205F58;
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
}

void sub_20D2F8D44(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C405E6B009ALL);
  _Unwind_Resume(a1);
}

void TokenBasicItem::~TokenBasicItem(TokenBasicItem *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void std::allocate_shared[abi:ne180100]<TokenAttributes,std::allocator<TokenAttributes>,TokenAttributes&,void>(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x158uLL);
  int v5 = v4;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = off_26C2162F0;
  uint64_t v6 = *(void *)(a2 + 8);
  *((void *)v4 + 3) = *(void *)a2;
  long long v7 = v4 + 24;
  *((void *)v4 + 4) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *((void *)v4 + 5) = *(void *)(a2 + 16);
  *((void *)v4 + 6) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 64), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 40);
    *((void *)v4 + 10) = *(void *)(a2 + 56);
  }
  *((_DWORD *)v5 + 22) = *(_DWORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 4, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    *((_OWORD *)v5 + 6) = *(_OWORD *)(a2 + 72);
    *((void *)v5 + 14) = *(void *)(a2 + 88);
  }
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 5, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 96);
    *((void *)v5 + 17) = *(void *)(a2 + 112);
  }
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 6, *(const std::string::value_type **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    *((_OWORD *)v5 + 9) = *(_OWORD *)(a2 + 120);
    *((void *)v5 + 20) = *(void *)(a2 + 136);
  }
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 7, *(const std::string::value_type **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 144);
    *((void *)v5 + 23) = *(void *)(a2 + 160);
  }
  if (*(char *)(a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 8, *(const std::string::value_type **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    *((_OWORD *)v5 + 12) = *(_OWORD *)(a2 + 168);
    *((void *)v5 + 26) = *(void *)(a2 + 184);
  }
  if (*(char *)(a2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v5 + 9, *(const std::string::value_type **)(a2 + 192), *(void *)(a2 + 200));
  }
  else
  {
    *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 192);
    *((void *)v5 + 29) = *(void *)(a2 + 208);
  }
  long long v9 = *(_OWORD *)(a2 + 232);
  *((_OWORD *)v5 + 15) = *(_OWORD *)(a2 + 216);
  *((_OWORD *)v5 + 16) = v9;
  if (*(char *)(a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 272), *(const std::string::value_type **)(a2 + 248), *(void *)(a2 + 256));
  }
  else
  {
    *((_OWORD *)v5 + 17) = *(_OWORD *)(a2 + 248);
    *((void *)v5 + 36) = *(void *)(a2 + 264);
  }
  uint64_t v10 = *(void *)(a2 + 280);
  *((void *)v5 + 37) = *(void *)(a2 + 272);
  *((void *)v5 + 38) = v10;
  uint64_t v11 = *(void *)(a2 + 288);
  *((void *)v5 + 39) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 v12 = (std::string *)(v5 + 320);
  if (*(char *)(a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 296), *(void *)(a2 + 304));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 296);
    *((void *)v5 + 42) = *(void *)(a2 + 312);
  }
  *a1 = v7;
  a1[1] = v5;
}

void sub_20D2F904C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  BOOL v18 = *(std::__shared_weak_count **)(v10 + 312);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (*(char *)(v10 + 295) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 239) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v10 + 215) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 191) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 167) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*a10);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v10 + 48);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v10 + 32);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v10);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void MatchPromptImpl::log_prompt(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(&v19, 0, sizeof(v19));
  if (*(_DWORD *)(a1 + 24) == 0x7FFFFFFF)
  {
    std::string::operator=(&v19, (const std::string *)(a1 + 32));
  }
  else
  {
    StringFormatter::StringFormatter((StringFormatter *)&__p, "#%04d", *(_DWORD *)(a1 + 24));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    MEMORY[0x210558E80](&v19, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    std::string::size_type v8 = v19.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&v18, a2);
    long long v9 = &v19;
    if (v7 < 0) {
      long long v9 = (std::string *)v8;
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v18;
    }
    else {
      uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    int v11 = *(_DWORD *)(a1 + 16);
    int v12 = *(_DWORD *)(a1 + 20);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "Prompt   : \"%s\" Text: %s Unit range: [%u, %u)", (uint8_t *)&__p, 0x22u);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  int v13 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  std::string::size_type v14 = v19.__r_.__value_.__r.__words[0];
  Censor::global_plaintext(&__p, a2);
  unint64_t v16 = &v19;
  if (v13 < 0) {
    unint64_t v16 = (std::string *)v14;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = &__p;
  }
  else {
    int v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(6, "Prompt   : \"%s\" Text: %s Unit range: [%u, %u)", v15, v16, v17, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_20D2F9374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Agglomerate::set<TokenPhrasingItem>(uint64_t a1, uint64_t a2)
{
  std::string::size_type v8 = &v12;
  if (!v3) {
    operator new();
  }
  Agglomerate::ItemHolder<TokenPhrasingItem>::ItemHolder((uint64_t)&v8, a2);
  *(_WORD *)(v3 + 8) = v9;
  long long v4 = v10;
  long long v10 = 0uLL;
  int v5 = *(std::__shared_weak_count **)(v3 + 24);
  *(_OWORD *)(v3 + 16) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = v11;
  long long v11 = 0uLL;
  int v7 = *(std::__shared_weak_count **)(v3 + 40);
  *(_OWORD *)(v3 + 32) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    std::string::size_type v8 = (char ***)off_26C2061D8;
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  else
  {
    std::string::size_type v8 = (char ***)off_26C2061D8;
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
}

void TokenPhrasingItem::~TokenPhrasingItem(TokenPhrasingItem *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t Agglomerate::ItemHolder<TokenPhrasingItem>::ItemHolder(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_26C2061D8;
  *(_WORD *)(result + 8) = *(_WORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 16) = *(void *)(a2 + 8);
  *(void *)(result + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 32) = *(void *)(a2 + 24);
  *(void *)(result + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Agglomerate::ItemHolder<TokenPhrasingItem>::~ItemHolder(void *a1)
{
  *a1 = off_26C2061D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<TokenPhrasingItem>::~ItemHolder(void *a1)
{
  *a1 = off_26C2061D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void Agglomerate::ItemHolder<ChunkItem>::~ItemHolder()
{
}

void std::__shared_ptr_emplace<TokenAttributes>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__shared_ptr_emplace<TokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2162F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2162F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Agglomerate::ItemHolder<TokenBasicItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C205F58;
  long long v4 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  int v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *((void *)a2 + 7);
  *(void *)(a1 + 56) = *((void *)a2 + 6);
  *(void *)(a1 + 64) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void Agglomerate::ItemHolder<TokenBasicItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205F58;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenBasicItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C205F58;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)&aPreparewithcon[8], MEMORY[0x263F8C050]);
}

void sub_20D2F999C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100]()
{
  MEMORY[0x210559460]();
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenPromptItem>::ItemHolder(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_26C206078;
  long long v3 = *a2;
  *(_OWORD *)(a1 + 20) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 8) = v3;
  long long v4 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = a2[2];
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 6);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void Agglomerate::ItemHolder<TokenPromptItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206078;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t Agglomerate::ItemHolder<TokenPromptItem>::~ItemHolder(uint64_t a1)
{
  *(void *)a1 = off_26C206078;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

BOOL TokenAttributes::is_prompt(TokenAttributes *this)
{
  uint64_t v1 = (char *)this + 144;
  int v2 = *((char *)this + 167);
  if (v2 < 0)
  {
    if (*((void *)this + 19) != 6) {
      return 0;
    }
    uint64_t v1 = *(char **)v1;
  }
  else if (v2 != 6)
  {
    return 0;
  }
  int v3 = *(_DWORD *)v1;
  int v4 = *((unsigned __int16 *)v1 + 2);
  return v3 == 1836020336 && v4 == 29808;
}

uint64_t MatchPromptImpl::clear(MatchPromptImpl *this)
{
  *((unsigned char *)this + 104) = 1;
  return FrontendModule::clear(this);
}

void MatchPromptImpl::~MatchPromptImpl(MatchPromptImpl *this)
{
  *(void *)this = off_26C2010F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C2010F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<MatchPromptImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MatchPromptImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MatchPromptImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void SharedObjectPool::get_if<FrontendEnvironment>(void *a1, uint64_t a2)
{
  int v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D2F9DC4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<PromptDatabase>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 168);
  {
    *(void *)&v4[0].__padding_ = &v5;
    operator new();
  }
  if (v1 == v2) {
    return 0;
  }
  else {
    return v2[5] + 8;
  }
}

void sub_20D2FAA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void **a12, void **a13)
{
  unint64_t v16 = *a10;
  if (*a10)
  {
    v14[14] = v16;
    operator delete(v16);
  }
  a13 = a12;
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&a13);
  int v17 = *v13;
  if (*v13)
  {
    v14[8] = v17;
    operator delete(v17);
  }
  std::string v18 = (std::__shared_weak_count *)v14[2];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  MEMORY[0x2105595E0](v14, 0x10F1C402AB85B93);
  _Unwind_Resume(a1);
}

uint64_t FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 168);
  {
    uint64_t v5 = &v4;
    operator new();
  }
  if (v1 == v2) {
    return 0;
  }
  else {
    return v2[5] + 8;
  }
}

void sub_20D2FABFC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x2105595E0](v1, 0x10A1C4054680CF9);
  _Unwind_Resume(a1);
}

uint64_t *UTFTransliterator::UTFTransliterator(uint64_t *a1, char *a2, char *a3)
{
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, a2);
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, a3);
  UTFTransliterator::UTFTransliterator(a1, (uint64_t)__dst, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_20D2FACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(void *__dst, char *__src)
{
  if (*(_WORD *)__src)
  {
    unint64_t v4 = 0;
    do
      uint64_t v5 = &__src[2 * v4++];
    while (*((_WORD *)v5 + 1));
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v4 >= 0xB)
    {
      uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v4 | 3) != 0xB) {
        uint64_t v7 = v4 | 3;
      }
      uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v7 + 1);
      float __dst[1] = v4;
      __dst[2] = v8 | 0x8000000000000000;
      void *__dst = v6;
    }
    else
    {
      *((unsigned char *)__dst + 23) = v4;
      uint64_t v6 = __dst;
      if (!v4) {
        goto LABEL_9;
      }
    }
    memmove(v6, __src, 2 * v4);
    goto LABEL_14;
  }
  unint64_t v4 = 0;
  *((unsigned char *)__dst + 23) = 0;
LABEL_9:
  uint64_t v6 = __dst;
LABEL_14:
  *((_WORD *)v6 + v4) = 0;
  return __dst;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void std::__shared_ptr_emplace<UTFTransliterator>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<UTFTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UTFTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<PromptConfig>::~ItemHolder()
{
}

void Agglomerate::ItemHolder<GeneratedPromptDB>::~ItemHolder(void *a1)
{
  *a1 = off_26C206118;
  GeneratedPromptDB::~GeneratedPromptDB((GeneratedPromptDB *)(a1 + 1));
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<GeneratedPromptDB>::~ItemHolder(void *a1)
{
  *a1 = off_26C206118;
  GeneratedPromptDB::~GeneratedPromptDB((GeneratedPromptDB *)(a1 + 1));
  return a1;
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20D2FAF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Agglomerate::ItemHolder<PromptDatabase>::~ItemHolder(void *a1)
{
  *a1 = off_26C205F18;
  PromptDatabase::~PromptDatabase((PromptDatabase *)(a1 + 1));
  JUMPOUT(0x2105595E0);
}

void PromptDatabase::~PromptDatabase(PromptDatabase *this)
{
  int v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v5 = (void **)((char *)this + 72);
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  int v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *Agglomerate::ItemHolder<PromptDatabase>::~ItemHolder(void *a1)
{
  *a1 = off_26C205F18;
  PromptDatabase::~PromptDatabase((PromptDatabase *)(a1 + 1));
  return a1;
}

void MatchPromptPersistentModule::~MatchPromptPersistentModule(MatchPromptPersistentModule *this)
{
  *(void *)this = off_26C204620;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C204620;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

_DWORD *PromptDatabase::find_prompt_by_id(uint64_t a1, std::string *this, int a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t size = this->__r_.__value_.__l.__size_;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5 == v4) {
    return 0;
  }
  int v6 = a3;
  char v9 = 0;
  long long v10 = 0;
  long long v11 = 0;
  do
  {
    int v12 = *(int **)(v5 - 8);
    v5 -= 8;
    std::string::size_type v14 = v12 + 1;
    int v13 = *v12;
    if (*v12)
    {
      uint64_t v38 = v5;
      std::basic_string<char16_t>::size_type v15 = &v14[12 * v13];
      while (std::string::compare(this, (const std::string::value_type *)v14))
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (size == -1) {
LABEL_62:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          int v17 = (std::string *)this->__r_.__value_.__r.__words[0];
          if (this->__r_.__value_.__l.__size_ >= size) {
            size_t v16 = size;
          }
          else {
            size_t v16 = this->__r_.__value_.__l.__size_;
          }
        }
        else
        {
          if (size == -1) {
            goto LABEL_62;
          }
          if (HIBYTE(this->__r_.__value_.__r.__words[2]) >= size) {
            size_t v16 = size;
          }
          else {
            size_t v16 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          }
          int v17 = this;
        }
        BOOL v18 = !memcmp(v17, v14, v16) && v16 >= size;
        if (v18)
        {
          if (v14[9] <= *(_DWORD *)(*(void *)(a1 + 40) + 4))
          {
            if (!v6) {
              goto LABEL_59;
            }
            if (v10 >= v11)
            {
              uint64_t v24 = (v10 - v9) >> 3;
              unint64_t v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if ((v11 - v9) >> 2 > v25) {
                unint64_t v25 = (v11 - v9) >> 2;
              }
              if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v26 = v25;
              }
              if (v26)
              {
                if (v26 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                long long v27 = (char *)operator new(8 * v26);
              }
              else
              {
                long long v27 = 0;
              }
              uint64_t v28 = &v27[8 * v24];
              *(void *)uint64_t v28 = v14;
              std::string::size_type v29 = v28 + 8;
              while (v10 != v9)
              {
                uint64_t v30 = *((void *)v10 - 1);
                v10 -= 8;
                *((void *)v28 - 1) = v30;
                v28 -= 8;
              }
              long long v11 = &v27[8 * v26];
              if (v9) {
                operator delete(v9);
              }
              char v9 = v28;
              long long v10 = v29;
              int v6 = a3;
            }
            else
            {
              *(void *)long long v10 = v14;
              v10 += 8;
            }
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            std::string v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              int v21 = v14[8];
              int v22 = v14[9];
              int v23 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
              *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
              int64_t v41 = v14;
              __int16 v42 = 1024;
              int v43 = v21;
              __int16 v44 = 1024;
              int v45 = v22;
              __int16 v46 = 1024;
              int v47 = v23;
              _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_ERROR, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", buf, 0x1Eu);
            }
            Diagnostics::log(3, "Skipping bogus prompt %s units [%u,%u), voice has %u units.", v20, v14, v14[8], v14[9], *(unsigned int *)(*(void *)(a1 + 40) + 4));
          }
        }
        v14 += 12;
        if (v14 == v15)
        {
          uint64_t v4 = *(void *)(a1 + 48);
          uint64_t v5 = v38;
          goto LABEL_51;
        }
      }
      goto LABEL_59;
    }
LABEL_51:
    ;
  }
  while (v5 != v4);
  if (v9 != v10)
  {
    unsigned int v31 = *(_DWORD *)(a1 + 128);
    unsigned int v32 = v31 / 0xADC8;
    unsigned int v33 = 48271 * (v31 % 0xADC8);
    v32 *= 3399;
    BOOL v18 = v33 >= v32;
    unsigned int v34 = v33 - v32;
    if (v18) {
      int v35 = 0;
    }
    else {
      int v35 = 0x7FFFFFFF;
    }
    unint64_t v36 = v35 + v34;
    *(_DWORD *)(a1 + 128) = v36;
    std::string::size_type v14 = *(_DWORD **)&v9[8 * (v36 % ((v10 - v9) >> 3))];
    goto LABEL_60;
  }
  std::string::size_type v14 = 0;
LABEL_59:
  if (!v9) {
    return v14;
  }
LABEL_60:
  operator delete(v9);
  return v14;
}

void sub_20D2FB53C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void Pronounce_FSTImpl::generate_tokens(Pronounce_FSTImpl *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v2 = (void *)((char *)this + 32);
  while (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v38);
    uint64_t v3 = v38;
    if ((void)v38)
    {
      uint64_t v4 = *((void *)this + 2);
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      uint64_t v6 = v38;
      if ((void *)(v6 + 8) == v7)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&v35, "TokenBasicItem is not generated in previous modules.");
        MEMORY[0x210558D40](exception, &v35);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      uint64_t v8 = v7[5];
      if ((void *)(v6 + 8) == v9) {
        goto LABEL_63;
      }
      uint64_t v10 = v9[5];
      if (*(char *)(v10 + 31) < 0)
      {
        if (!*(void *)(v10 + 16))
        {
LABEL_63:
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v38);
          goto LABEL_64;
        }
      }
      else if (!*(unsigned char *)(v10 + 31))
      {
        goto LABEL_63;
      }
      long long v11 = (void *)(v10 + 8);
      *(_OWORD *)unint64_t v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      int v12 = *(char *)(v10 + 31);
      if (v12 < 0)
      {
        if (*(void *)(v10 + 16) != 1) {
          goto LABEL_33;
        }
        int v13 = (unsigned char *)*v11;
      }
      else
      {
        int v13 = (unsigned char *)(v10 + 8);
        if (v12 != 1)
        {
LABEL_33:
          uint64_t v18 = *((void *)this + 13);
          std::string::basic_string[abi:ne180100]<0>(&__p, "g2p_rules");
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void *))(*(void *)v18 + 8))(&buf, v18, &__p, v11);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          std::string v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            Censor::global_plaintext(&__p, (uint64_t)v11);
            int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
            Censor::global_plaintext(&v34, (uint64_t)&buf);
            p_p = &__p;
            if (v20 < 0) {
              p_p = (std::string *)v21;
            }
            int v23 = &v34;
            if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v23 = (std::string *)v34.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int v39 = 136315394;
            *(void *)&v39[4] = p_p;
            __int16 v40 = 2080;
            int64_t v41 = v23;
            _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_DEBUG, "#Pronounce_FST: %s -> %s", v39, 0x16u);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v34.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          Censor::global_plaintext(&__p, (uint64_t)v11);
          int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
          Censor::global_plaintext(&v34, (uint64_t)&buf);
          long long v27 = &__p;
          if (v24 < 0) {
            long long v27 = (std::string *)v25;
          }
          uint64_t v28 = &v34;
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(7, "#Pronounce_FST: %s -> %s", v26, v27, v28);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__s.__data_[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__l.__size_, &byte_20D5A22AE);
          std::string::basic_string[abi:ne180100]<0>(&v32, &byte_20D5A22AE);
          create_pronunciation_with_phone_sequence((uint64_t *)&v34, &buf, (uint64_t)&__p);
          std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v35, (uint64_t *)v34.__r_.__value_.__l.__data_, (uint64_t *)v34.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34.__r_.__value_.__l.__size_ - v34.__r_.__value_.__r.__words[0]) >> 3));
          *(void *)int v39 = &v34;
          std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
          std::string::operator=((std::string *)&v36[1], (const std::string *)(v8 + 32));
          if (v33 < 0) {
            operator delete(v32);
          }
          if (v31 < 0) {
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          goto LABEL_60;
        }
      }
      if (*v13 != 42) {
        goto LABEL_33;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      std::string::size_type v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        Censor::global_plaintext(&__p, v8 + 32);
        std::basic_string<char16_t>::size_type v15 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::basic_string<char16_t>::size_type v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
        _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_ERROR, "Unknown pronunciation for token '%s', replace with silence.", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      Censor::global_plaintext(&__p, v8 + 32);
      int v17 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(3, "Unknown pronunciation for token '%s', replace with silence.", v16, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      create_silence((uint64_t *)&__p);
      std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v35, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_60:
      Agglomerate::set<TokenPronunciationItem>(v38, (uint64_t)&v35);
      if (SHIBYTE(v37) < 0) {
        operator delete(v36[1]);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_63;
    }
    *((unsigned char *)this + 8) = 1;
LABEL_64:
    if (*((void *)&v38 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
    }
    if (!v3) {
      return;
    }
  }
}