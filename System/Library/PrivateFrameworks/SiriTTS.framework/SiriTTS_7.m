uint64_t isEscOrPartialEsc(uint64_t a1, char *a2, unsigned int a3, int a4, _WORD *a5)
{
  int v7;
  uint64_t result;
  int v9;
  int v10;
  void v11[3];
  int v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v7 = exePattern("esc", a1, a2, a3, a4, 40960, &v12, (uint64_t)v11, &v10, 0x3E7u);
  if ((v7 & 0x1FFF) == 0x1E62) {
    return 2;
  }
  v9 = v7;
  result = 0;
  if ((v9 & 0x80000000) == 0 && v12 && LODWORD(v11[0]) == a4)
  {
    *a5 = WORD2(v11[0]) - a4;
    return 1;
  }
  return result;
}

uint64_t escseqm_str2enumMapping(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 8);
  if (!*(_WORD *)(v3 + 64)) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  while (1)
  {
    uint64_t v8 = *(void *)(v3 + 72);
    if (*(_DWORD *)(v7 + 20) == *(_DWORD *)(v8 + 16 * v6)) {
      break;
    }
LABEL_10:
    ++v6;
    uint64_t v3 = *(void *)(v2 + 8);
    if (v6 >= *(unsigned __int16 *)(v3 + 64)) {
      return 0;
    }
  }
  uint64_t v9 = v8 + 16 * v6;
  v10 = *(const char **)(v7 + 40);
  if (!*(_WORD *)(v9 + 4))
  {
LABEL_9:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v10);
    *(void *)(*(void *)(a2 + 8) + 40) = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(v7 + 20) = 0;
    uint64_t v2 = a1[1];
    goto LABEL_10;
  }
  uint64_t v11 = 0;
  v12 = (void *)(v9 + 8);
  uint64_t v13 = 16 * *(unsigned __int16 *)(v9 + 4);
  while (!v10 || strcmp(*(const char **)(*v12 + v11), v10))
  {
    v11 += 16;
    if (v13 == v11) {
      goto LABEL_9;
    }
  }
  heap_Free(*(void **)(*a1 + 8), (uint64_t)v10);
  *(void *)(*(void *)(a2 + 8) + 40) = 0;
  *(_DWORD *)(*(void *)(a2 + 8) + 40) = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[1] + 8) + 72)
                                                                            + 16 * v6
                                                                            + 8)
                                                                + v11
                                                                + 8);
  return 0;
}

uint64_t escseqm_get_token(void *a1, char *a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  int v87 = 0;
  int v88 = 0;
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  *a5 = 0;
  uint64_t v10 = exePattern("esc", (uint64_t)a1, a2, a3, 0, 0, &v88, (uint64_t)&v85, &v87, 0x3E7u);
  if ((v10 & 0x80000000) != 0 || !v88) {
    return v10;
  }
  int v12 = v85;
  int v11 = DWORD1(v85);
  uint64_t v13 = exePattern("enhancedescseq", (uint64_t)a1, a2, a3, SDWORD1(v85), 16, &v88, (uint64_t)&v85, &v87, 0x3E7u);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (v88 != 1)
  {
    uint64_t v10 = exePattern("esctoi", (uint64_t)a1, a2, a3, v11, 16, &v88, (uint64_t)&v85, &v87, 0x3E7u);
    if ((v10 & 0x80000000) != 0 || v88 != 1) {
      return v10;
    }
    uint64_t v31 = *(void *)(a4 + 8);
    int v32 = DWORD1(v85);
    *(_DWORD *)(v31 + 20) = 7;
    *(_DWORD *)(v31 + 24) = v12;
    *(_DWORD *)(v31 + 28) = v32 - v12;
    *(_DWORD *)(v31 + 32) = v12;
    *(_DWORD *)(v31 + 36) = v12;
    if (*(_WORD *)(*(void *)(a1[1] + 8) + 64))
    {
      *(void *)(v31 + 40) = 0;
      if (*((void *)&v85 + 1) != -1)
      {
        v33 = *(void **)(*a1 + 8);
        unsigned int v34 = a2[SDWORD2(v85)];
        if (v34 <= 0x5D)
        {
          if (v34 == 43)
          {
            v35 = (const char *)&unk_20D62E8A0;
            goto LABEL_78;
          }
          if (v34 == 62)
          {
            v35 = (const char *)&unk_20D62E8A4;
            goto LABEL_78;
          }
        }
        else
        {
          switch(v34)
          {
            case '^':
              v35 = "diacritized";
              goto LABEL_78;
            case 'h':
              v35 = "hil";
              goto LABEL_78;
            case 'j':
              v35 = "jeita";
LABEL_78:
              int v55 = strlen(v35);
              *(void *)(*(void *)(a4 + 8) + 40) = heap_Calloc(v33, 1, (v55 + 1));
              v56 = *(char **)(*(void *)(a4 + 8) + 40);
              if (!v56) {
                return 2147491850;
              }
              strcpy(v56, v35);
              goto LABEL_80;
          }
        }
        uint64_t v31 = *(void *)(a4 + 8);
LABEL_83:
        *(_DWORD *)(v31 + 20) = 0;
        return v10;
      }
    }
    else
    {
      unsigned int v45 = a2[SDWORD2(v85)];
      if (v45 <= 0x5D)
      {
        if (v45 != 43)
        {
          if (v45 != 62) {
            goto LABEL_83;
          }
          unsigned int v45 = 16;
        }
      }
      else
      {
        switch(v45)
        {
          case '^':
            unsigned int v45 = 60;
            break;
          case 'h':
            unsigned int v45 = 108;
            break;
          case 'j':
            break;
          default:
            goto LABEL_83;
        }
      }
      *(_DWORD *)(v31 + 40) = v45;
    }
LABEL_80:
    *a5 = 2;
    return v10;
  }
  int v81 = v12;
  v80 = a5;
  int v83 = DWORD1(v85);
  *(void *)v84 = v86;
  int v91 = 0;
  int v89 = 0;
  int v90 = 0;
  uint64_t v14 = DWORD2(v85);
  int v15 = HIDWORD(v85);
  uint64_t v82 = a4;
  *(_DWORD *)(*(void *)(a4 + 8) + 20) = 0;
  uint64_t v16 = a1[1];
  uint64_t v17 = *(void *)(v16 + 8);
  if (*(_WORD *)(v17 + 4))
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = (v15 - v14);
    uint64_t v21 = (uint64_t)&a2[v14];
    while (1)
    {
      uint64_t v22 = *(void *)(v17 + 8);
      if (strlen(*(const char **)(v22 + v18)) == v20 && *(_DWORD *)(v22 + v18 + 8) == 1)
      {
        int v23 = LH_strnicmp(*(void *)(v22 + v18), v21, v20);
        uint64_t v16 = a1[1];
        if (!v23) {
          break;
        }
      }
      ++v19;
      uint64_t v17 = *(void *)(v16 + 8);
      v18 += 24;
      if (v19 >= *(unsigned __int16 *)(v17 + 4)) {
        goto LABEL_11;
      }
    }
    uint64_t v46 = *(void *)(*(void *)(v16 + 8) + 8) + v18;
    uint64_t v47 = *(void *)(v82 + 8);
    *(_DWORD *)(v47 + 20) = *(_DWORD *)(v46 + 12);
    *(_DWORD *)uint64_t v82 = 0;
    int v48 = *(_DWORD *)(v46 + 16);
    if (v48 != 9999)
    {
      *(_DWORD *)(v47 + 40) = v48;
      *(_DWORD *)uint64_t v82 = 1;
    }
  }
LABEL_11:
  uint64_t v24 = v82;
  v25 = *(int **)(v82 + 8);
  v25[6] = v12;
  v25[7] = v83 - v12;
  v25[8] = v12;
  v25[9] = v12;
  int v26 = v25[5];
  if (v26 == 32)
  {
    if (getTrueEnd((uint64_t)a1, a2, a3, v84[0], &v84[1], 32, &v89))
    {
      v27 = *(_DWORD **)(v82 + 8);
      unsigned int v28 = v84[1];
      int v29 = v84[1] - v12 + 1;
      v27[6] = v12;
      v27[7] = v29;
      v27[8] = v12;
      v27[9] = v12;
      _DWORD *v80 = 2;
      uint64_t v10 = 0;
      if (v84[0] == v28)
      {
        BOOL v30 = *((_DWORD *)a1 + 14) == 0;
        *((_DWORD *)a1 + 14) = v30;
        *(_DWORD *)(*(void *)(v82 + 8) + 40) = v30;
      }
      else
      {
        *(_DWORD *)(*(void *)(v82 + 8) + 20) = 0;
      }
      goto LABEL_59;
    }
LABEL_54:
    uint64_t v10 = 0;
    goto LABEL_59;
  }
  v36 = v80;
  if (v84[0] == v84[1])
  {
    if (v26 == 2)
    {
LABEL_26:
      v25[10] = 0;
      setDefaultArgIfAny((uint64_t)a1, v82);
LABEL_27:
      uint64_t v10 = 0;
      goto LABEL_58;
    }
    uint64_t v49 = *(void *)(a1[1] + 8);
    uint64_t v50 = *(unsigned __int16 *)(v49 + 16);
    if (*(_WORD *)(v49 + 16))
    {
      v51 = *(int **)(v49 + 24);
      do
      {
        int v52 = *v51;
        v51 += 3;
        if (v52 == v26) {
          goto LABEL_26;
        }
      }
      while (--v50);
    }
    if (!marker_hasNonConstCharPtrArg(v25[5])) {
      goto LABEL_27;
    }
    uint64_t v13 = checkForDefaultArgs(a1, v82, &v91);
    _DWORD *v80 = 2;
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    return v13;
  }
  int v92 = 0;
  if (!getTrueEnd((uint64_t)a1, a2, a3, v84[0], &v84[1], v26, &v92))
  {
    int v38 = 0;
    int v91 = 0;
    int v90 = 1;
    goto LABEL_56;
  }
  unsigned int v37 = v84[1];
  int v38 = v84[1] + 1;
  if (!v84[1]) {
    goto LABEL_36;
  }
  int v39 = 0;
  v40 = a2 - 1;
  while (1)
  {
    unsigned int v41 = v40[v84[1]];
    BOOL v42 = v41 > 0x20;
    uint64_t v43 = (1 << v41) & 0x100002600;
    if (v42 || v43 == 0) {
      break;
    }
    --v40;
    if (v84[1] == ++v39) {
      goto LABEL_36;
    }
  }
  unsigned int v57 = v84[1] - v39;
  if (v84[1] - v39 <= v84[0])
  {
LABEL_36:
    if (marker_hasNonConstCharPtrArg(*(_DWORD *)(*(void *)(v82 + 8) + 20))
      || !*(_DWORD *)(*(void *)(v82 + 8) + 20))
    {
      uint64_t v10 = checkForDefaultArgs(a1, v82, &v91);
      goto LABEL_38;
    }
    int v91 = setDefaultArgIfAny((uint64_t)a1, v82);
    if (!v91) {
      int v91 = *(_DWORD *)(*(void *)(v82 + 8) + 20) == 13;
    }
    goto LABEL_56;
  }
  int v58 = *(_DWORD *)(*(void *)(v82 + 8) + 20);
  int v59 = v92;
  if (v58 == 26 && v92 != 0)
  {
    uint64_t v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v84[0], v92, &v91, 0);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v10 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v59 + 1, v37 - v39, &v91, 1);
    goto LABEL_100;
  }
  uint64_t v61 = *(void *)(a1[1] + 8);
  uint64_t v62 = *(unsigned __int16 *)(v61 + 32);
  if (!*(_WORD *)(v61 + 32))
  {
LABEL_94:
    int v12 = v81;
    if (marker_hasNonConstCharPtrArg(v58))
    {
LABEL_95:
      uint64_t v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v84[0], v37 - v39, &v91, 0);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
      uint64_t v66 = *(void *)(v82 + 8);
      if (!*(_DWORD *)(v66 + 20))
      {
        heap_Free(*(void **)(*a1 + 8), *(void *)(v66 + 40));
        *(void *)(*(void *)(v82 + 8) + 40) = 0;
      }
      goto LABEL_56;
    }
    int v67 = *(_DWORD *)(*(void *)(v82 + 8) + 20);
    if (v67 == 2) {
      goto LABEL_112;
    }
    if (!v67) {
      goto LABEL_95;
    }
    uint64_t v68 = *(void *)(a1[1] + 8);
    uint64_t v69 = *(unsigned __int16 *)(v68 + 16);
    if (*(_WORD *)(v68 + 16))
    {
      v70 = *(int **)(v68 + 24);
      while (1)
      {
        int v71 = *v70;
        v70 += 3;
        if (v71 == v67) {
          break;
        }
        if (!--v69) {
          goto LABEL_111;
        }
      }
LABEL_112:
      parseNumericArg((size_t)a1, v82, (uint64_t)a2, v84[0], v37 - v39, &v91, &v90);
      goto LABEL_56;
    }
LABEL_111:
    int v91 = v67 == 13;
    int v90 = 0;
    v36 = v80;
    uint64_t v24 = v82;
    int v12 = v81;
LABEL_56:
    uint64_t v10 = 0;
    goto LABEL_57;
  }
  uint64_t v63 = 0;
  uint64_t v64 = *(void *)(v61 + 40);
  uint64_t v65 = 16;
  while (*(_DWORD *)(v64 + v65 - 16) != v58)
  {
    ++v63;
    v65 += 24;
    if (v62 == v63) {
      goto LABEL_94;
    }
  }
  v95[0] = 0;
  memset(v94, 0, sizeof(v94));
  uint64_t v10 = exePattern("dummy", (uint64_t)a1, &a2[v84[0]], (unsigned __int16)(LOWORD(v84[1]) - LOWORD(v84[0]) - v39), 0, 16, v95, (uint64_t)v94, &v93, v63);
  if ((v10 & 0x80000000) == 0)
  {
    v77 = &a2[v84[0]];
    if (v95[0] != 1) {
      goto LABEL_120;
    }
    if (v37 + LODWORD(v94[0]) - v84[0] - HIDWORD(v94[0]) == v39)
    {
      int v91 = 1;
      int v78 = v57;
      unsigned int v79 = v84[0];
      goto LABEL_123;
    }
    if (*(_DWORD *)(*(void *)(v82 + 8) + 20) == 7
      && (int v78 = HIDWORD(v94[0]) - LODWORD(v94[0]) + v84[0], v78 + 1 < v57)
      && (unsigned int v72 = v78 + 1, utf8_BelongsToSet(8u, v77, HIDWORD(v94[0]), HIDWORD(v94[0]) + 1)))
    {
      do
      {
        if (!utf8_BelongsToSet(0, a2, v72, v72 + 1)) {
          break;
        }
        v72 += utf8_determineUTF8CharLength(a2[v72]);
      }
      while (v72 < v57);
      unsigned int v79 = v72;
      if (v37 - v72 != v39)
      {
        v73 = &v91;
LABEL_122:
        int *v73 = 1;
        if (!v91)
        {
          if (*(_DWORD *)v82 == 1)
          {
            int v91 = 1;
            int v90 = 0;
          }
          goto LABEL_139;
        }
LABEL_123:
        int v74 = *(_DWORD *)(*(void *)(*(void *)(a1[1] + 8) + 40) + v65);
        if (v74 == 1)
        {
          uint64_t v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v84[0], v78, &v91, 0);
          uint64_t v10 = 0;
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
        }
        else if (!v74)
        {
          *(_DWORD *)(*(void *)(v82 + 8) + 40) = *v77;
        }
        if (v84[0] != v79 && v37 - v78 != v39)
        {
          uint64_t v13 = parseStringArg((uint64_t)a1, v82, (uint64_t)a2, v79, v37 - v39, &v91, 1);
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
          uint64_t v10 = 0;
        }
        if (!v91 && *(_DWORD *)(*(void *)(*(void *)(a1[1] + 8) + 40) + v65) == 1)
        {
          uint64_t v75 = *(void *)(*(void *)(v82 + 8) + 40);
          if (v75)
          {
            heap_Free(*(void **)(*a1 + 8), v75);
            uint64_t v24 = v82;
            *(void *)(*(void *)(v82 + 8) + 40) = 0;
            v36 = v80;
LABEL_100:
            int v12 = v81;
LABEL_38:
            if ((v10 & 0x80000000) != 0) {
              return v10;
            }
LABEL_57:
            v53 = *(_DWORD **)(v24 + 8);
            v53[6] = v12;
            v53[7] = v38 - v12;
            v53[8] = v12;
            v53[9] = v12;
            if (!v91)
            {
              v53[5] = 0;
              if (v90)
              {
LABEL_59:
                uint64_t v54 = *(void *)(v24 + 8);
                if (*(_DWORD *)(v54 + 20) == 2) {
                  *(_DWORD *)(v54 + 20) = 3;
                }
                return v10;
              }
            }
LABEL_58:
            _DWORD *v36 = 2;
            goto LABEL_59;
          }
        }
LABEL_139:
        v36 = v80;
        uint64_t v24 = v82;
        goto LABEL_100;
      }
      unsigned int v79 = v37 - v39;
    }
    else
    {
LABEL_120:
      int v78 = v57;
      unsigned int v79 = v84[0];
    }
    int v91 = 0;
    v73 = &v90;
    goto LABEL_122;
  }
  return v10;
}

uint64_t escseqm_ClassOpen(_WORD *a1, int a2, uint64_t **a3)
{
  uint64_t v3 = 2147491850;
  uint64_t v53 = 0;
  int v52 = 0;
  if (!a3) {
    return 2147491847;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v53);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v8 = heap_Calloc(*(void **)(v53 + 8), 1, 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)v8;
    int UInt = paramc_ParamGetUInt(*(void *)(v53 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v52);
    unsigned __int16 v11 = v52;
    int v12 = paramc_ParamGetUInt(*(void *)(v53 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v52);
    __int16 v13 = v52;
    uint64_t v14 = nuance_pcre_ObjOpen(a1, a2, (uint64_t)&v50);
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v3 = v14;
    }
    else
    {
      if (v12 < 0) {
        __int16 v15 = 50;
      }
      else {
        __int16 v15 = v13;
      }
      if (UInt < 0) {
        unsigned __int16 v16 = 30;
      }
      else {
        unsigned __int16 v16 = v11;
      }
      uint64_t v17 = nuance_pcre_Init(v50, v51, v16, v15);
      uint64_t v18 = v17;
      if ((v17 & 0x80000000) != 0)
      {
        uint64_t v3 = v17;
      }
      else
      {
        *uint64_t v9 = v53;
        uint64_t v19 = heap_Calloc(*(void **)(v53 + 8), 1, 96);
        v9[1] = v19;
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v47 = v9;
          uint64_t v21 = v53;
          int v23 = v50;
          uint64_t v22 = v51;
          v56 = 0;
          int v55 = 0;
          __s2 = 0;
          paramc_ParamGetStr(*(void *)(v53 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &__s2);
          *(_WORD *)(v20 + 4) = 34;
          uint64_t v24 = (void *)heap_Calloc(*(void **)(v21 + 8), 1, 816);
          *(void *)(v20 + 8) = v24;
          if (v24)
          {
            memcpy(v24, &g_pEscMappings, 0x330uLL);
            *(_WORD *)(v20 + 16) = 9;
            v25 = (_OWORD *)heap_Calloc(*(void **)(v21 + 8), 9, 12);
            *(void *)(v20 + 24) = v25;
            if (v25)
            {
              v25[4] = xmmword_20D62E850;
              v25[5] = unk_20D62E860;
              *(_OWORD *)((char *)v25 + 92) = unk_20D62E86C;
              _OWORD *v25 = g_pEscNumericArgs;
              v25[1] = unk_20D62E820;
              v25[2] = xmmword_20D62E830;
              v25[3] = unk_20D62E840;
              *(_WORD *)(v20 + 48) = 6;
              uint64_t v26 = heap_Calloc(*(void **)(v21 + 8), 6, 24);
              *(void *)(v20 + 56) = v26;
              if (v26)
              {
                uint64_t v27 = 0;
                unsigned int v28 = (const char **)&off_2641091D0;
                uint64_t v48 = v20;
                do
                {
                  int v29 = *(v28 - 1);
                  *(void *)(*(void *)(v20 + 56) + v27 + 16) = v29;
                  BOOL v30 = __s2;
                  if (__s2 && *__s2 && !strcmp(v29, "esc"))
                  {
                    uint64_t v49 = *(void **)(v21 + 8);
                    uint64_t v31 = *v28;
                    uint64_t v32 = v22;
                    v33 = v23;
                    uint64_t v34 = v21;
                    size_t v35 = strlen(*v28);
                    size_t v36 = v35 + strlen(v30);
                    uint64_t v21 = v34;
                    int v23 = v33;
                    uint64_t v22 = v32;
                    uint64_t v20 = v48;
                    unsigned int v37 = (char *)heap_Calloc(v49, 1, v36 + 2);
                    if (!v37) {
                      goto LABEL_36;
                    }
                    int v38 = v37;
                    strcpy(v37, v31);
                    v38[strlen(v31) - 1] = 0;
                    *(_WORD *)&v38[strlen(v38)] = 124;
                    int v39 = strcat(v38, __s2);
                    *(_WORD *)&v38[strlen(v39)] = 41;
                    *(void *)(*(void *)(v48 + 56) + v27) = nuance_pcre_compile((uint64_t)v23, v22, v38, 2048, &v56, &v55, 0);
                    heap_Free(*(void **)(v21 + 8), (uint64_t)v38);
                  }
                  else
                  {
                    *(void *)(*(void *)(v20 + 56) + v27) = nuance_pcre_compile((uint64_t)v23, v22, (char *)*v28, 2048, &v56, &v55, 0);
                  }
                  v27 += 24;
                  v28 += 2;
                }
                while (v27 != 144);
                *(_WORD *)(v20 + 32) = 3;
                uint64_t v40 = heap_Calloc(*(void **)(v21 + 8), 3, 24);
                *(void *)(v20 + 40) = v40;
                if (v40)
                {
                  uint64_t v41 = 0;
                  uint64_t v42 = *(void *)(v20 + 56);
                  uint64_t v43 = v40 + 8;
                  do
                  {
                    *(_DWORD *)(v43 + 8) = 1;
                    *(_DWORD *)(v43 - 8) = *(_DWORD *)&g_pEscValidations[v41];
                    *(void *)uint64_t v43 = *(void *)(v42 + 24 * g_pEscValidations[v41 + 4]);
                    v43 += 24;
                    v41 += 12;
                  }
                  while (v41 != 36);
                  *(_WORD *)(v20 + 64) = 2;
                  v44 = (_OWORD *)heap_Calloc(*(void **)(v21 + 8), 1, 32);
                  *(void *)(v20 + 72) = v44;
                  if (v44)
                  {
                    _OWORD *v44 = g_escStr2EnumMappings;
                    v44[1] = unk_264109238;
                    *(_WORD *)(v20 + 80) = 5;
                    uint64_t v45 = heap_Calloc(*(void **)(v21 + 8), 1, 120);
                    *(void *)(v20 + 88) = v45;
                    if (v45)
                    {
                      *(_OWORD *)(v45 + 64) = xmmword_264109288;
                      *(_OWORD *)(v45 + 80) = unk_264109298;
                      *(_OWORD *)(v45 + 96) = xmmword_2641092A8;
                      *(void *)(v45 + 112) = &g_escStr2StrMappings_mkEnumList_moderate;
                      *(_OWORD *)uint64_t v45 = g_escStr2StrMappings;
                      *(_OWORD *)(v45 + 16) = *(_OWORD *)&off_264109258;
                      *(_OWORD *)(v45 + 32) = xmmword_264109268;
                      *(_OWORD *)(v45 + 48) = *(_OWORD *)&off_264109278;
                      *(_DWORD *)uint64_t v20 = 1;
                      *a3 = v47;
LABEL_38:
                      nuance_pcre_DeInit(v50, v51);
                      nuance_pcre_ObjClose((uint64_t)v50, v51);
                      return v18;
                    }
                  }
                }
              }
            }
          }
LABEL_36:
          uint64_t v3 = 2147491850;
        }
      }
    }
    escseqm_ClassClose(*a3);
    uint64_t v18 = v3;
    goto LABEL_38;
  }
  return 10;
}

uint64_t escseqm_ClassClose(uint64_t *a1)
{
  if (!a1) {
    return 7;
  }
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*(_DWORD *)v2 != 1) {
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    heap_Free(*(void **)(v3 + 8), v4);
    *(void *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 4) = 0;
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5)
  {
    heap_Free(*(void **)(v3 + 8), v5);
    *(void *)(v2 + 24) = 0;
    *(_WORD *)(v2 + 16) = 0;
  }
  uint64_t v6 = *(void *)(v2 + 56);
  if (v6)
  {
    unsigned int v7 = *(unsigned __int16 *)(v2 + 48);
    if (*(_WORD *)(v2 + 48))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        if (*(void *)(v6 + v8))
        {
          heap_Free(*(void **)(v3 + 8), *(void *)(v6 + v8));
          uint64_t v6 = *(void *)(v2 + 56);
          unsigned int v7 = *(unsigned __int16 *)(v2 + 48);
        }
        uint64_t v10 = (void *)(v6 + v8);
        void *v10 = 0;
        v10[2] = 0;
        ++v9;
        v8 += 24;
      }
      while (v9 < v7);
    }
    heap_Free(*(void **)(v3 + 8), v6);
    *(void *)(v2 + 56) = 0;
  }
  uint64_t v11 = *(void *)(v2 + 40);
  if (v11)
  {
    uint64_t v12 = *(unsigned __int16 *)(v2 + 32);
    if (*(_WORD *)(v2 + 32))
    {
      __int16 v13 = (void *)(v11 + 8);
      do
      {
        *__int16 v13 = 0;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    heap_Free(*(void **)(v3 + 8), v11);
    *(void *)(v2 + 40) = 0;
  }
  uint64_t v14 = *(void *)(v2 + 72);
  if (v14)
  {
    heap_Free(*(void **)(v3 + 8), v14);
    *(void *)(v2 + 72) = 0;
  }
  uint64_t v15 = *(void *)(v2 + 88);
  if (v15) {
    heap_Free(*(void **)(v3 + 8), v15);
  }
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  uint64_t v2 = a1[1];
  if (v2) {
LABEL_24:
  }
    heap_Free(*(void **)(v3 + 8), v2);
  heap_Free(*(void **)(v3 + 8), (uint64_t)a1);
  return 0;
}

uint64_t escseqm_ObjOpen(uint64_t a1, _WORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v19 = 0;
  unsigned int v18 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = 2147491847;
  if (a1)
  {
    if (a6)
    {
      uint64_t inited = InitRsrcFunction(a2, a3, &v19);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v12 = inited;
        *a6 = 0;
        uint64_t v13 = heap_Calloc(*(void **)(v19 + 8), 1, 64);
        if (v13)
        {
          uint64_t v14 = v13;
          *(void *)uint64_t v13 = v19;
          *(_DWORD *)(v13 + 52) = 0;
          if (paramc_ParamGetStr(*(void *)(v19 + 40), (uint64_t)"processingtnplus", &v17)) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v17 == 0;
          }
          if (!v15 && !LH_stricmp(v17, "yes")) {
            *(_DWORD *)(v14 + 52) = 1;
          }
          *(_DWORD *)(v14 + 56) = 0;
          *(void *)(v14 + 24) = a4;
          *(void *)(v14 + 32) = a5;
          *(void *)(v14 + 8) = a1;
          *(void *)(v14 + 16) = 0;
          *(void *)(v14 + 40) = *(void *)(a1 + 8);
          *(_WORD *)(v14 + 48) = 1024;
          if ((paramc_ParamGetUInt(*(void *)(v19 + 40), (uint64_t)"ppescseqmaxlength", &v18) & 0x80000000) == 0) {
            *(_WORD *)(v14 + 48) = v18 + 32;
          }
          *a6 = v14;
          return v12;
        }
        else
        {
          return 2147491850;
        }
      }
    }
  }
  return v6;
}

uint64_t escseqm_ObjClose(uint64_t *a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t v1 = *a1;
  a1[5] = 0;
  heap_Free(*(void **)(v1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t escseqm_ProcessStart(uint64_t a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t escseqm_GetDefaults(void *a1, uint64_t *a2)
{
  uint64_t v2 = 2147491847;
  int v12 = 0;
  if (a1)
  {
    uint64_t v5 = heap_Calloc(*(void **)(*a1 + 8), 1, 2561);
    if (!v5) {
      return 2147491850;
    }
    uint64_t v6 = v5;
    v11[0] = 0;
    uint64_t v7 = v5 + 64;
    uint64_t v8 = 1;
    while (1)
    {
      *(_DWORD *)(v7 + 20) = v8;
      v11[1] = v7;
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = 0;
      if ((unsigned __int16)v8 <= 0xDu && ((1 << v8) & 0x2314) != 0) {
        goto LABEL_6;
      }
      int hasNonConstCharPtrArg = marker_hasNonConstCharPtrArg(v8);
      checkForDefaultArgs(a1, (uint64_t)v11, &v12);
      if (hasNonConstCharPtrArg) {
        break;
      }
      if (v12)
      {
        if (*(_WORD *)(*(void *)(a1[1] + 8) + 64)) {
          escseqm_str2enumMapping(a1, (uint64_t)v11);
        }
        goto LABEL_7;
      }
      *(_DWORD *)(v7 + 20) = v8;
      if (!setDefaultArgIfAny((uint64_t)a1, (uint64_t)v11)) {
        goto LABEL_6;
      }
LABEL_7:
      ++v8;
      v7 += 64;
      if (v8 == 40)
      {
        uint64_t v2 = 0;
        *a2 = v6;
        return v2;
      }
    }
    if (v12) {
      goto LABEL_7;
    }
LABEL_6:
    *(_DWORD *)(v7 + 20) = 0;
    goto LABEL_7;
  }
  return v2;
}

uint64_t checkForDefaultArgs(void *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v6 = *(void *)(a1[1] + 8);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 80);
  if (*(_WORD *)(v6 + 80))
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(v6 + 88);
    while (1)
    {
      uint64_t v10 = *(unsigned __int16 *)(v9 + 24 * v8 + 8);
      if (*(_WORD *)(v9 + 24 * v8 + 8)) {
        break;
      }
LABEL_7:
      if (++v8 == v7)
      {
        uint64_t v13 = *(void *)(a2 + 8);
        goto LABEL_18;
      }
    }
    uint64_t v11 = *(unsigned __int16 **)(v9 + 24 * v8 + 16);
    while (1)
    {
      int v12 = *v11++;
      if (*(_DWORD *)(*(void *)(a2 + 8) + 20) == v12) {
        break;
      }
      if (!--v10) {
        goto LABEL_7;
      }
    }
    uint64_t v14 = *(void **)(*a1 + 8);
    int v15 = strlen(*(const char **)(v9 + 24 * v8));
    *(void *)(*(void *)(a2 + 8) + 40) = heap_Calloc(v14, 1, (v15 + 1));
    unsigned __int16 v16 = *(char **)(*(void *)(a2 + 8) + 40);
    if (v16)
    {
      strcpy(v16, *(const char **)(*(void *)(*(void *)(a1[1] + 8) + 88) + 24 * v8));
      uint64_t result = 0;
      *a3 = 1;
      return result;
    }
    return 2147491850;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  unsigned int v18 = *(_DWORD *)(v13 + 20);
  BOOL v19 = v18 > 0x24;
  uint64_t v20 = (1 << v18) & 0x1000201000;
  if (!v19 && v20 != 0)
  {
    uint64_t v22 = *(void **)(*a1 + 8);
    MarkerArgStr = marker_getMarkerArgStr(1u);
    int v24 = strlen(MarkerArgStr);
    *(void *)(*(void *)(a2 + 8) + 40) = heap_Calloc(v22, 1, (v24 + 1));
    v25 = *(char **)(*(void *)(a2 + 8) + 40);
    if (v25)
    {
      uint64_t v26 = marker_getMarkerArgStr(1u);
      strcpy(v25, v26);
      uint64_t result = 0;
      *a3 = 1;
      return result;
    }
    return 2147491850;
  }
LABEL_18:
  uint64_t v27 = *(void *)(v13 + 40);
  if (v27)
  {
    heap_Free(*(void **)(*a1 + 8), v27);
    *(void *)(*(void *)(a2 + 8) + 40) = 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a2 + 8) + 20) = 0;
  return result;
}

uint64_t setDefaultArgIfAny(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = *(unsigned __int16 *)(v2 + 4);
  if (!*(_WORD *)(v2 + 4))
  {
LABEL_6:
    uint64_t result = 0;
LABEL_7:
    *(_DWORD *)a2 = result;
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(_DWORD *)(v4 + 20);
  uint64_t v6 = (int *)(*(void *)(v2 + 8) + 16);
  while (v5 != *(v6 - 1) || *(v6 - 2) != 1)
  {
    v6 += 6;
    if (!--v3) {
      goto LABEL_6;
    }
  }
  if (*v6 != 9999)
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v8 = v5 == 8;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      int v9 = 29999;
    }
    else {
      int v9 = *v6;
    }
    *(_DWORD *)(v4 + 40) = v9;
    uint64_t result = 1;
    goto LABEL_7;
  }
  return 0;
}

uint64_t escseqm_Match(void *a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2 || !a3 || !a4) {
    return 2147491847;
  }
  if (!**(_DWORD **)(a1[1] + 8))
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"PP", 1805, 0, a5, a6, a7, a8, v10);
    return 2147491847;
  }
  int v12 = 0;
  v11[0] = 0;
  v11[1] = a4;
  uint64_t result = escseqm_get_token(a1, a2, a3, (uint64_t)v11, &v12);
  if ((result & 0x1FFF) != 0xA)
  {
    if (v12 == 2)
    {
      if (*(_WORD *)(*(void *)(a1[1] + 8) + 64)) {
        escseqm_str2enumMapping(a1, (uint64_t)v11);
      }
      return 0;
    }
    else
    {
      return 2147491840;
    }
  }
  return result;
}

uint64_t getTrueEnd(uint64_t a1, char *a2, unsigned int a3, int a4, unsigned int *a5, int a6, _DWORD *a7)
{
  uint64_t result = 0;
  *a7 = 0;
  if (a3 > (unsigned __int16)a4)
  {
    int v10 = a4;
    int v13 = 0;
    int v14 = 0;
    unsigned int v15 = (unsigned __int16)a4;
    BOOL v16 = a6 == 29;
    BOOL v17 = a6 != 26;
    if (a6 == 26) {
      BOOL v16 = 1;
    }
    if (a6 == 7) {
      BOOL v17 = 0;
    }
    char v29 = v17;
    int v30 = 0;
    char v18 = a6 == 7 || v16;
    while (1)
    {
      if (!a2[(unsigned __int16)v10]) {
        return 0;
      }
      int v19 = isEsc(a1, a2, (unsigned __int16)(a3 - v10), v15, &v31);
      int v20 = a2[(unsigned __int16)v10];
      if (v19)
      {
        if (v20 != 92) {
          return 0;
        }
      }
      else if (v20 != 92)
      {
        LODWORD(v21) = v15 + 1;
        goto LABEL_32;
      }
      uint64_t v21 = v15 + 1;
      if (v21 < a3 && ((int v22 = a2[v21], v22 == 92) || v22 == 34))
      {
        char v23 = v29;
        if (v14 != 1) {
          char v23 = 1;
        }
        if (a6 != 29 && (v23 & 1) != 0)
        {
LABEL_53:
          *a5 = v15;
          return 1;
        }
      }
      else
      {
        if (v14 == 1) {
          char v24 = v18;
        }
        else {
          char v24 = 0;
        }
        if ((v24 & 1) == 0) {
          goto LABEL_53;
        }
      }
      if (v21 < a3)
      {
        int v25 = a2[v21];
        if (v25 == 92 || v25 == 34)
        {
          ++v10;
          goto LABEL_51;
        }
      }
      int v20 = 92;
LABEL_32:
      if (a6 != 26 && a6 != 7 || v20 != 34) {
        goto LABEL_51;
      }
      if (v14 == 1)
      {
        if (v30 | v13)
        {
          int v14 = 0;
          if (v13) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v30 == 1;
          }
          if (v26) {
            int v13 = 1;
          }
          goto LABEL_51;
        }
        int v14 = 0;
        int v13 = 0;
        if (a2[v21] == 58) {
          *a7 = v21;
        }
      }
      else
      {
        if (v30 != 1)
        {
          int v14 = 1;
          goto LABEL_51;
        }
        uint64_t result = 0;
        if (a6 != 26 || v13 == 1) {
          return result;
        }
        int v14 = 1;
      }
      int v30 = 1;
LABEL_51:
      unsigned int v15 = (unsigned __int16)++v10;
      if ((unsigned __int16)v10 >= a3) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t parseStringArg(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, int a7)
{
  size_t v13 = a5 - a4;
  int v14 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v13 + 1));
  if (!v14) {
    return 2147491850;
  }
  unsigned int v15 = v14;
  unsigned int v16 = (unsigned __int16)v13;
  memcpy(v14, (const void *)(a3 + a4), v13);
  if ((_WORD)v13)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unsigned __int16 v19 = v13;
    do
    {
      if (v18)
      {
        int v20 = &v15[(v18 - 1)];
        if (*v20 == 92)
        {
          int v21 = v15[v18];
          if (v21 == 92 || v21 == 34)
          {
            memmove(v20, &v15[v18], v17 + v16);
            v15[v16 - 1] = 0;
            --v19;
          }
        }
      }
      ++v18;
      unsigned int v16 = v19;
      --v17;
    }
    while (v18 < v19);
  }
  if (a7 == 1 || (uint64_t v22 = *(void *)(a2 + 8), *(_DWORD *)(v22 + 20) == 26))
  {
    if (utf8_BelongsToSet(7u, v15, 0, v13))
    {
      int v23 = strlen(v15);
      if (utf8_BelongsToSet(7u, v15, v23 - 1, v13))
      {
        size_t v24 = strlen(v15);
        if (v24 != 1)
        {
          uint64_t v25 = (unsigned __int16)v24;
          memmove(v15, v15 + 1, (unsigned __int16)v24 - 1);
          v15[v25 - 2] = 0;
        }
      }
    }
    if (a7 == 1)
    {
      BOOL v26 = (char **)(*(void *)(a2 + 8) + 48);
      if (!*v15)
      {
        *BOOL v26 = 0;
        *a6 = 0;
        heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v15);
        return 0;
      }
      goto LABEL_22;
    }
    uint64_t v22 = *(void *)(a2 + 8);
  }
  BOOL v26 = (char **)(v22 + 40);
LABEL_22:
  uint64_t result = 0;
  *BOOL v26 = v15;
  *a6 = 1;
  return result;
}

size_t parseNumericArg(size_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7 = a7;
  uint64_t v26 = *MEMORY[0x263EF8340];
  *a7 = 0;
  *a6 = 0;
  unint64_t v8 = a5 - a4;
  if (v8 <= 0xA && a3)
  {
    size_t v11 = result;
    unint64_t v12 = 0;
    uint64_t v13 = a3 + a4;
    memset(__s, 0, 11);
    do
    {
      int v14 = *(unsigned __int8 *)(v13 + v12);
      __s[v12] = v14;
      uint64_t result = strlen(__s);
      if (v14)
      {
        unsigned int v15 = result;
        uint64_t result = utf8_BelongsToSet(6u, __s, v12, result);
        if (result)
        {
          uint64_t result = utf8_BelongsToSet(0, __s, v12, v15);
          if (!result) {
            goto LABEL_7;
          }
        }
      }
      goto LABEL_21;
LABEL_7:
      if (v12 + 1 >= v8) {
        break;
      }
      if (v12 > 8) {
        break;
      }
    }
    while (__s[v12++]);
    int v17 = *(_DWORD *)(*(void *)(a2 + 8) + 20);
    if (v17 == 2)
    {
      uint64_t v18 = v13;
      int v19 = v8;
      unsigned int v20 = 0;
      unsigned int v21 = 1;
LABEL_20:
      uint64_t result = escseqm_ReadU32InRange(v18, v19, v20, v21);
      *(_DWORD *)(*(void *)(a2 + 8) + 40) = result;
      uint64_t v7 = a6;
      goto LABEL_21;
    }
    uint64_t v22 = *(void *)(*(void *)(v11 + 8) + 8);
    uint64_t v23 = *(unsigned __int16 *)(v22 + 16);
    if (*(_WORD *)(v22 + 16))
    {
      size_t v24 = (unsigned int *)(*(void *)(v22 + 24) + 8);
      while (*(v24 - 2) != v17)
      {
        v24 += 3;
        if (!--v23) {
          goto LABEL_16;
        }
      }
      unsigned int v20 = *(v24 - 1);
      unsigned int v21 = *v24;
      uint64_t v18 = v13;
      int v19 = v8;
      goto LABEL_20;
    }
LABEL_16:
    if (*(_DWORD *)a2 == 1) {
      uint64_t v7 = a6;
    }
  }
LABEL_21:
  *uint64_t v7 = 1;
  return result;
}

uint64_t escseqm_ReadU32InRange(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  int64_t v6 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_DWORD *)&__str[7] = 0;
  uint64_t v13 = 0;
  *(void *)__str = 0;
  do
  {
    unint64_t v7 = v6;
    int v8 = *(unsigned __int8 *)(a1 + v6);
    __str[v6++] = v8;
    if (v7 > 8) {
      break;
    }
  }
  while (v8 && v6 < a2);
  __str[v6] = 0;
  unsigned int v10 = strtoul(__str, &v13, 10);
  if (v10 >= a4) {
    unsigned int v11 = a4;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v10 >= a3) {
    return v11;
  }
  else {
    return a3;
  }
}

uint64_t escseqs_ClassOpen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = 2147491847;
  uint64_t v11 = 0;
  if ((InitRsrcFunction(a1, a2, &v11) & 0x80000000) == 0)
  {
    uint64_t v7 = heap_Calloc(*(void **)(v11 + 8), 1, 32);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = v11;
      *(void *)(v7 + 8) = a2;
      *(void *)(v7 + 16) = v9;
      *(void *)uint64_t v7 = a1;
      uint64_t v6 = escseqm_ClassOpen(a1, a2, (uint64_t **)(v7 + 24));
      if ((v6 & 0x80000000) != 0) {
        heap_Free(*(void **)(v11 + 8), v8);
      }
      else {
        *a3 = v8;
      }
    }
    else
    {
      return 2147491850;
    }
  }
  return v6;
}

uint64_t escseqs_ClassClose(uint64_t a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = escseqm_ClassClose(*(uint64_t **)(a1 + 24));
  if ((v3 & 0x80000000) == 0) {
    heap_Free(*(void **)(v2 + 8), a1);
  }
  return v3;
}

uint64_t escseqs_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v6 = 2147491847;
  if (a6 && (InitRsrcFunction(a2, a3, &v30) & 0x80000000) == 0)
  {
    *a6 = 0;
    uint64_t v13 = heap_Alloc(v30[1], 96);
    if (!v13) {
      return 2147491850;
    }
    uint64_t v14 = v13;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(void *)(v13 + 72) = a1;
    *(void *)uint64_t v13 = a2;
    *(void *)(v13 + 8) = a3;
    uint64_t v15 = escseqm_ObjOpen(*(void *)(a1 + 24), a2, a3, a4, a5, (uint64_t *)(v13 + 64));
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v20 = v15;
      heap_Free((void *)v30[1], v14);
      return v20;
    }
    if ((objc_GetObject(v30[6], (uint64_t)"AUDIOFETCHER", &v29) & 0x80000000) == 0)
    {
      uint64_t v16 = v29;
      if (*(unsigned char *)v29 != 1 || (uint64_t v17 = *(void *)(v29 + 8)) == 0)
      {
        uint64_t v21 = v30[6];
        uint64_t v22 = "AUDIOFETCHER";
LABEL_18:
        objc_ReleaseObject(v21, (uint64_t)v22);
        log_OutPublic(v30[4], (uint64_t)&modESCPP, 2574, 0, v23, v24, v25, v26, v29);
        int v27 = escseqs_ObjClose(v14);
        if (v27 < 0) {
          return v27;
        }
        else {
          return 2147491853;
        }
      }
      *(void *)(v14 + 32) = v17;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(v16 + 16);
    }
    if ((objc_GetObject(v30[6], (uint64_t)"LANGCODECONVERTER", &v29) & 0x80000000) != 0)
    {
LABEL_13:
      uint64_t v6 = 0;
      *a6 = v14;
      return v6;
    }
    uint64_t v18 = v29;
    if (*(unsigned char *)v29 == 1)
    {
      uint64_t v19 = *(void *)(v29 + 8);
      if (v19)
      {
        *(void *)(v14 + 56) = v19;
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v18 + 16);
        goto LABEL_13;
      }
    }
    uint64_t v21 = v30[6];
    uint64_t v22 = "LANGCODECONVERTER";
    goto LABEL_18;
  }
  return v6;
}

uint64_t escseqs_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2147491847;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 64);
    if (v3) {
      escseqm_ObjClose(v3);
    }
    if (*(void *)(a1 + 56)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"LANGCODECONVERTER");
    }
    if (*(void *)(a1 + 32)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"AUDIOFETCHER");
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t escseqs_SetMarkerSyncPos(uint64_t a1, int a2)
{
  if (!a1) {
    return 2147491847;
  }
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = a2;
  *(_DWORD *)(a1 + 92) = 1;
  return escseqm_ProcessStart(*(void *)(a1 + 64));
}

uint64_t escseqs_SetReset(uint64_t a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t result = 0;
  *(void *)(a1 + 88) = 0x100000000;
  return result;
}

uint64_t escseqs_GetPosInOut(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  *a2 = *(_DWORD *)(result + 80);
  *a3 = *(_DWORD *)(result + 84);
  return result;
}

uint64_t escseqs_SetPosInOut(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 80) = a2;
  *(_DWORD *)(result + 84) = a3;
  return result;
}

uint64_t escseqs_ProcessStart(uint64_t a1, _DWORD *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t Defaults = 2147491847;
  __s1 = 0;
  unsigned int v10 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    if ((paramc_ParamGetStr(*(void *)(v12 + 40), (uint64_t)"component_stop_not_reset", &__s1) & 0x80000000) == 0
      && __s1
      && !strcmp(__s1, "yes"))
    {
      paramc_ParamSetStr(*(void *)(v12 + 40), (uint64_t)"component_stop_not_reset", &byte_20D5A22AE);
    }
    else if ((paramc_ParamGetUInt(*(void *)(v12 + 40), (uint64_t)"pipelineswitchexecuting", &v10) & 0x80000000) != 0 {
           || !v10)
    }
    {
      *(void *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 92) = 0;
    }
    paramc_ParamSetUInt(*(void *)(v12 + 40), (uint64_t)"pipelineswitchexecuting", 0);
    uint64_t v5 = escseqm_ProcessStart(*(void *)(a1 + 64));
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t Defaults = v5;
    }
    else
    {
      uint64_t Defaults = escseqm_GetDefaults(*(void **)(a1 + 64), &v13);
      if ((Defaults & 0x80000000) == 0)
      {
        for (uint64_t i = 104; i != 2600; i += 64)
        {
          int v7 = *(_DWORD *)(v13 + i - 20);
          if (v7 == 31) {
            *a2 = *(_DWORD *)(v13 + i);
          }
          if (marker_hasNonConstCharPtrArg(v7))
          {
            uint64_t v8 = *(void *)(v13 + i);
            if (v8)
            {
              heap_Free(*(void **)(v12 + 8), v8);
              *(void *)(v13 + i) = 0;
            }
          }
        }
      }
    }
    if (v13) {
      heap_Free(*(void **)(v12 + 8), v13);
    }
  }
  return Defaults;
}

uint64_t escseqs_Process(uint64_t a1, uint64_t a2)
{
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v2 = 2147491847;
  __s = 0;
  __s1 = 0;
  v158 = 0;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v165 = 0u;
  long long v166 = 0x200000000uLL;
  long long v167 = 0u;
  long long v168 = 0u;
  LODWORD(v165) = 1;
  DWORD2(v168) = 0;
  *(void *)&long long v167 = 0;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0x2400000000uLL;
  DWORD2(v164) = 0;
  long long v163 = 0uLL;
  if (!a1 || !a2 || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v174) & 0x80000000) != 0) {
    return v2;
  }
  uint64_t appended = datac_RequestBlock(a2, 1000, 1u, &v173);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t v6 = *(char **)(v173 + 8);
  if (!v6) {
    return v2;
  }
  if (*(_WORD *)(v173 + 2) != 1) {
    return 2147491865;
  }
  LODWORD(v169) = 0;
  LOWORD(v170) = 0;
  *((void *)&v169 + 1) = 0;
  unsigned int v7 = *(_DWORD *)(a1 + 80);
  int v8 = *(_DWORD *)(a1 + 84);
  DWORD1(v170) = 0x4000;
  *((void *)&v170 + 1) = v7;
  LODWORD(v171) = v8;
  *(void *)((char *)&v171 + 4) = 0;
  DWORD2(v172) = 0;
  *(void *)&long long v172 = 0;
  uint64_t appended = escseqs_AppendOutMarker(a2, &v169);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  if ((paramc_ParamGetStr(*(void *)(v174 + 40), (uint64_t)"textanalysison", &__s1) & 0x80000000) == 0)
  {
    if (__s1)
    {
      if (*__s1)
      {
        int v9 = strcmp(__s1, "yes");
        if (!(DWORD2(v170) | v9))
        {
          size_t v35 = (char *)heap_Calloc(*(void **)(v174 + 8), 1, 12);
          if (!v35) {
            return 2147491850;
          }
          uint64_t v36 = (uint64_t)v35;
          strcpy(v35, "ins_unknown");
          *((void *)&v162 + 1) = 0;
          *(void *)&long long v163 = 0;
          *((void *)&v163 + 1) = v35;
          uint64_t appended = escseqs_AppendOutMarker(a2, &v161);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          heap_Free(*(void **)(v174 + 8), v36);
        }
      }
    }
  }
  *(void *)&long long v154 = 0;
  *(void *)v175 = 0;
  uint64_t appended = datac_RequestBlock(a2, 1011, 1u, &v154);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t appended = datac_RequestBlock(a2, 1012, 1u, v175);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    uint64_t v10 = 0;
    LODWORD(v154) = 0;
    *(_DWORD *)(a1 + 92) = 0;
    do
    {
      uint64_t v11 = aTAG2PARAM_0[v10];
      if ((int)v11 > 30)
      {
        if (v11 != 36)
        {
          if (v11 != 31) {
            goto LABEL_32;
          }
LABEL_22:
          uint64_t UInt = paramc_ParamGetUInt(*(void *)(v174 + 40), *(void *)&aTAG2PARAM_0[v10 + 2], (unsigned int *)&v154);
          if ((UInt & 0x1FFF) != 0x14)
          {
            uint64_t v16 = UInt;
            if ((UInt & 0x80000000) != 0) {
              goto LABEL_281;
            }
            log_OutText(*(void *)(v174 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] GET PARAM marker:%d param=%s val=%d", v13, v14, v15, v11);
            LODWORD(v169) = 1;
            unsigned int v17 = *(_DWORD *)(a1 + 80);
            unsigned int v18 = *(_DWORD *)(a1 + 84);
            DWORD1(v170) = v11;
            *((void *)&v170 + 1) = v17;
            *(void *)&long long v171 = v18;
            DWORD2(v171) = v154;
            DWORD2(v172) = 0;
            *(void *)&long long v172 = 0;
            uint64_t v19 = escseqs_AppendOutMarker(a2, &v169);
            if ((v19 & 0x80000000) != 0) {
              goto LABEL_280;
            }
          }
          goto LABEL_32;
        }
      }
      else
      {
        if (v11 == 7) {
          goto LABEL_22;
        }
        if (v11 != 21) {
          goto LABEL_32;
        }
      }
      uint64_t Str = paramc_ParamGetStr(*(void *)(v174 + 40), *(void *)&aTAG2PARAM_0[v10 + 2], &__s);
      if ((Str & 0x1FFF) != 0x14)
      {
        uint64_t v16 = Str;
        if ((Str & 0x80000000) != 0) {
          goto LABEL_281;
        }
        log_OutText(*(void *)(v174 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] GET PARAM marker:%d param=%s val=%s", v21, v22, v23, v11);
        size_t v24 = (unsigned __int16)strlen(__s);
        uint64_t v25 = (char *)heap_Calloc(*(void **)(v174 + 8), 1, v24 + 1);
        if (!v25) {
          return 2147491850;
        }
        uint64_t v26 = (uint64_t)v25;
        int v27 = strncpy(v25, __s, v24);
        v27[v24] = 0;
        LODWORD(v169) = 1;
        unsigned int v28 = *(_DWORD *)(a1 + 80);
        unsigned int v29 = *(_DWORD *)(a1 + 84);
        DWORD1(v170) = v11;
        *((void *)&v170 + 1) = v28;
        *(void *)&long long v171 = v29;
        *((void *)&v171 + 1) = v27;
        uint64_t v30 = escseqs_AppendOutMarker(a2, &v169);
        if ((v30 & 0x80000000) != 0)
        {
          uint64_t v16 = v30;
          heap_Free(*(void **)(v174 + 8), v26);
          goto LABEL_281;
        }
        heap_Free(*(void **)(v174 + 8), v26);
      }
      paramc_ParamRelease(*(void *)(v174 + 40));
      __s = 0;
LABEL_32:
      v10 += 4;
    }
    while (v10 != 16);
  }
  unint64_t v31 = (unint64_t)&v6[*(unsigned __int16 *)(v173 + 16)];
  uint64_t v32 = v6;
  if (*(_DWORD *)(a1 + 88))
  {
    uint64_t v32 = v6;
    if (*(_WORD *)(v173 + 16))
    {
      BOOL v33 = 0;
      uint64_t v32 = v6;
      while (1)
      {
        unsigned int v34 = *v32;
        if (!v33 && v34 == 92) {
          break;
        }
        if (v34 == 34) {
          BOOL v33 = !v33;
        }
        v32 += utf8_determineUTF8CharLength(v34);
        if ((unint64_t)(v32 + 1) > v31) {
          goto LABEL_49;
        }
      }
      v32 += utf8_determineUTF8CharLength(0x5Cu);
      *(_DWORD *)(a1 + 88) = 0;
    }
  }
LABEL_49:
  DWORD1(v170) = 0;
  int v38 = *(unsigned __int16 *)(v173 + 16);
  BOOL v153 = 1;
  if ((paramc_ParamGetStr(*(void *)(v174 + 40), (uint64_t)"clcpppipelinemode", &v158) & 0x80000000) == 0 && v158) {
    BOOL v153 = *v158 == 0;
  }
  unint64_t v148 = v31;
  if ((unint64_t)&v32[utf8_determineUTF8CharLength(*v32)] > v31)
  {
    LOWORD(v39) = 0;
LABEL_54:
    uint64_t v40 = v32;
    goto LABEL_250;
  }
  int v141 = 0;
  BOOL v142 = 0;
  int v39 = 0;
  while (1)
  {
    if (v38 != *(unsigned __int16 *)(v173 + 16)) {
      goto LABEL_54;
    }
    int v150 = v39;
    int v151 = v38;
    v175[0] = 0;
    unsigned int v41 = utf8_determineUTF8CharLength(*v32);
    if (v41)
    {
      uint64_t v40 = v32;
      while (1)
      {
        uint64_t v42 = &v40[v41];
        if ((unint64_t)v42 > v31
          || isEsc(*(void *)(a1 + 64), v40, (unsigned __int16)(v31 - (_WORD)v40), 0, v175))
        {
          uint64_t v42 = v40;
          goto LABEL_69;
        }
        LOWORD(v154) = 0;
        if (v153
          && isEscOrPartialEsc(*(void *)(a1 + 64), v40, (unsigned __int16)(v31 - (_WORD)v40), 0, &v154) == 2)
        {
          goto LABEL_248;
        }
        if ((unint64_t)v42 >= v31) {
          break;
        }
        unsigned int v41 = utf8_determineUTF8CharLength(*v42);
        uint64_t v40 = v42;
        if (!v41) {
          goto LABEL_69;
        }
      }
      unsigned int v41 = 0;
    }
    else
    {
      uint64_t v42 = v32;
    }
LABEL_69:
    v175[0] = 0;
    uint64_t v149 = v31 - (void)v42;
    int v43 = isEsc(*(void *)(a1 + 64), v42, (unsigned __int16)(v31 - (_WORD)v42), 0, v175);
    BOOL v48 = !v175[0] || v43 == 0;
    uint64_t v49 = v48 ? 0 : v175[0] - 1;
    if (!v41 || (unint64_t)&v42[v41 + v49] > v31) {
      break;
    }
    uint64_t v50 = (unsigned __int8 *)&v42[v49 + 1];
    int v39 = v150;
    if ((unint64_t)v50 < v31)
    {
      int v51 = *v50;
      int v52 = (unsigned __int8 *)&v42[v49 + 2];
      if (v51 == 47)
      {
        int v53 = v50[1];
        if ((v53 - 43) <= 0x3F && ((1 << (v53 - 43)) & 0xA008000000080001) != 0)
        {
          for (unsigned int i = v50[1]; (unint64_t)&v52[utf8_determineUTF8CharLength(i) + 2] <= v31; unsigned int i = *v52)
          {
            unsigned int v56 = *v52;
            if (v56 == 47)
            {
              unsigned int v57 = v52[1] - 43;
              BOOL v58 = v57 > 0x3F;
              unint64_t v59 = (1 << v57) & 0xA008000000080001;
              BOOL v60 = v58 || v59 == 0;
              if (!v60 && v42[2] == v53) {
                break;
              }
            }
            v52 += utf8_determineUTF8CharLength(v56);
          }
          BOOL v142 = v53 != 0;
          if ((unint64_t)(v52 + 1) <= v31)
          {
            int v39 = v150;
          }
          else
          {
            int v39 = v150;
            if (!*(_DWORD *)(v173 + 20)) {
              int v151 = (unsigned __int16)((_WORD)v42 - (_WORD)v6);
            }
          }
          int v61 = v151;
LABEL_179:
          if (!v61) {
            return 2147491849;
          }
          goto LABEL_180;
        }
      }
      else if (v51 == 92)
      {
        while ((unint64_t)(v52 + 1) <= v31
             && utf8_BelongsToSet(0, v52, 0, *(unsigned __int16 *)(v173 + 16)))
          v52 += utf8_determineUTF8CharLength(*v52);
        uint64_t v62 = v52;
        if ((unint64_t)&v52[utf8_determineUTF8CharLength(*v52) + 1] <= v31)
        {
          uint64_t v62 = v52;
          do
          {
            if (utf8_BelongsToSet(0, v62, 0, *(unsigned __int16 *)(v173 + 16))) {
              break;
            }
            unsigned int v67 = *v62;
            if (v67 == 61) {
              break;
            }
            if (v67 == 92) {
              break;
            }
            v62 += utf8_determineUTF8CharLength(v67);
          }
          while ((unint64_t)&v62[utf8_determineUTF8CharLength(*v62) + 1] <= v31);
        }
        WORD2(v154) = 0;
        LODWORD(v154) = 0;
        __int16 v63 = (_WORD)v62 - (_WORD)v52;
        if ((unsigned __int16)((_WORD)v62 - (_WORD)v52) > 6uLL) {
          __int16 v63 = 6;
        }
        v144 = v6;
        if (v63)
        {
          __strncpy_chk();
          if (LH_stricmp((char *)&v154, "audio"))
          {
            if (LH_stricmp((char *)&v154, "mrk"))
            {
              int v64 = LH_stricmp((char *)&v154, "toi");
              int v65 = 0;
              int v147 = 0;
              uint64_t v66 = v64 == 0;
              goto LABEL_119;
            }
            int v65 = 0;
            uint64_t v66 = 0;
            int v143 = 0;
            int v145 = 1;
            int v147 = 1;
LABEL_122:
            uint64_t v68 = (char *)(v62 + 1);
            if ((unint64_t)(v62 + 1) > v31)
            {
LABEL_123:
              uint64_t v6 = v144;
              if (!*(_DWORD *)(v173 + 20)) {
                int v151 = (unsigned __int16)((_WORD)v42 - (_WORD)v144);
              }
LABEL_175:
              int v39 = v150;
              int v61 = v151;
              char v83 = v145 ^ 1;
              if (v151) {
                char v83 = 1;
              }
              if ((v83 & 1) == 0)
              {
                int v61 = 0;
                *(_DWORD *)(a1 + 88) = 1;
                goto LABEL_180;
              }
              goto LABEL_179;
            }
            int v69 = 0;
            uint64_t v70 = 0;
            int v146 = v65;
            while (2)
            {
              unsigned int v71 = *v62;
              if (!v70 && v71 == 92)
              {
                int v72 = v143;
                if (v66) {
                  int v72 = 0;
                }
                if ((v145 & v72 & 1) != 0
                  || (v66 == 1 ? (int v73 = 1) : (int v73 = v65),
                      v69 == 1
                   && v147 | v73
                   && ((unint64_t)v68 >= v31 || (int v74 = *v68, v74 != 92) && v74 != 34)))
                {
                  uint64_t v6 = v144;
                  goto LABEL_175;
                }
              }
              if (v71 == 34) {
                char v75 = v65;
              }
              else {
                char v75 = 0;
              }
              if (v75)
              {
                uint64_t v70 = v70 != 1;
                unsigned int v71 = 34;
                if (!v69) {
                  goto LABEL_169;
                }
LABEL_158:
                if (v70 == 1) {
                  int v80 = v65;
                }
                else {
                  int v80 = 0;
                }
                if (((v147 | v80) & 1) == 0 && v66 != 1)
                {
                  uint64_t v77 = v70;
                  uint64_t v78 = v66;
                  int v69 = 1;
                  goto LABEL_170;
                }
                int v69 = 1;
                if (v71 == 92 && (unint64_t)v68 < v31)
                {
                  int v81 = *v68;
                  if (v81 == 34 || v81 == 92)
                  {
                    uint64_t v82 = 2;
                    goto LABEL_171;
                  }
                  uint64_t v77 = v70;
                  uint64_t v78 = v66;
                  unsigned int v71 = 92;
                }
                else
                {
LABEL_169:
                  uint64_t v77 = v70;
                  uint64_t v78 = v66;
                }
              }
              else
              {
                if (v69) {
                  goto LABEL_158;
                }
                if (v71 == 61)
                {
                  unsigned int v139 = v70;
                  unsigned int v140 = v66;
                  if ((unint64_t)(v68 + 1) <= v31)
                  {
                    v76 = v68;
                    do
                    {
                      if (!utf8_BelongsToSet(0, v76, 0, *(unsigned __int16 *)(v173 + 16))) {
                        break;
                      }
                      v76 += utf8_determineUTF8CharLength(*v76);
                    }
                    while ((unint64_t)(v76 + 1) <= v31);
                    unsigned int v71 = *v62;
                  }
                  else
                  {
                    unsigned int v71 = 61;
                    v76 = v68;
                  }
                  int v79 = strncmp(v76, "orth", 4uLL);
                  uint64_t v70 = v139;
                  if (v79) {
                    uint64_t v66 = v140;
                  }
                  else {
                    uint64_t v66 = 0;
                  }
                  int v65 = v146;
                  goto LABEL_158;
                }
                uint64_t v77 = v70;
                uint64_t v78 = v66;
                int v69 = 0;
              }
LABEL_170:
              uint64_t v82 = utf8_determineUTF8CharLength(v71);
              uint64_t v66 = v78;
              int v65 = v146;
              uint64_t v70 = v77;
              unint64_t v31 = v148;
LABEL_171:
              v62 += v82;
              uint64_t v68 = (char *)(v62 + 1);
              if ((unint64_t)(v62 + 1) > v31) {
                goto LABEL_123;
              }
              continue;
            }
          }
          int v145 = 0;
          uint64_t v66 = 0;
          int v147 = 0;
          int v65 = 1;
        }
        else
        {
          int v65 = 0;
          uint64_t v66 = 0;
          int v147 = 0;
LABEL_119:
          int v145 = 1;
        }
        int v143 = 1;
        goto LABEL_122;
      }
      int v39 = v150;
      if (v149 > 11) {
        goto LABEL_98;
      }
    }
    if (*(_DWORD *)(v173 + 20))
    {
LABEL_98:
      int v61 = v38;
      goto LABEL_180;
    }
    int v61 = (unsigned __int16)((_WORD)v42 - (_WORD)v6);
LABEL_180:
    int v152 = v61;
    if (v61 != *(unsigned __int16 *)(v173 + 16))
    {
      uint64_t v40 = v42;
      goto LABEL_250;
    }
    if ((_WORD)v42 != (_WORD)v32)
    {
      uint64_t v19 = escseqs_AppendOutText(a2, v32, (unsigned __int16)((_WORD)v42 - (_WORD)v32));
      if ((v19 & 0x80000000) != 0) {
        goto LABEL_280;
      }
      v39 += v42 - v32;
    }
    *((void *)&v171 + 1) = 0;
    uint64_t v16 = escseqm_Match(*(void **)(a1 + 64), v42, (unsigned __int16)v149, (uint64_t)&v169, v44, v45, v46, v47);
    if ((v16 & 0x1FFF) == 0xA) {
      goto LABEL_281;
    }
    int v84 = DWORD1(v170);
    if (DWORD1(v170) == 36)
    {
      uint64_t v16 = escseqs_NormalizeLanguageName(a1, (uint64_t)&v169);
      if ((v16 & 0x80000000) != 0) {
        goto LABEL_281;
      }
      int v84 = DWORD1(v170);
    }
    if ((void)v172)
    {
      long long v85 = (const float *)&v171 + 2;
      int32x4_t v86 = (int32x4_t)vld1q_dup_f32(v85);
      if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(v86, (int32x4_t)xmmword_20D62E8D0), (int8x16_t)xmmword_20D60CD60)) & 0xF) == 0&& v84 != 26)
      {
        heap_Free(*(void **)(v174 + 8), v172);
        *(void *)&long long v172 = 0;
        DWORD2(v172) = 0;
LABEL_195:
        uint64_t v19 = escseqs_AppendOutText(a2, v42, 1u);
        if ((v19 & 0x80000000) != 0) {
          goto LABEL_280;
        }
        ++v39;
        uint64_t v32 = v42 + 1;
        goto LABEL_197;
      }
    }
    if (v16) {
      goto LABEL_195;
    }
    if (marker_hasNonConstCharPtrArg(v84) && !*((void *)&v171 + 1))
    {
      LOWORD(v170) = 0;
      *((void *)&v169 + 1) = 0;
      DWORD1(v170) = 0x4000;
      DWORD2(v171) = 0;
      goto LABEL_225;
    }
    int v88 = DWORD1(v170);
    if (!(void)v172 || DWORD1(v170) == 26)
    {
      if ((void)v172 && DWORD1(v170) == 26)
      {
        int v90 = v39;
        unsigned __int16 v91 = strlen((const char *)v172);
        *(void *)&long long v154 = 0;
        uint64_t v92 = *((void *)&v171 + 1);
        int v93 = *(uint64_t (**)(void, void, uint64_t, void, uint64_t, uint64_t, long long *))(*(void *)(a1 + 32) + 64);
        uint64_t NullHandle = safeh_GetNullHandle();
        if ((v93(*(void *)(a1 + 16), *(void *)(a1 + 24), v92, 0, NullHandle, v95, &v154) & 0x80000000) != 0)
        {
          log_OutText(*(void *)(v174 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] Invalid audio file, file=%s, Putting alternate text in text stream: \"%s\" ", v96, v97, v98, *((uint64_t *)&v171 + 1));
          uint64_t v19 = escseqs_AppendOutText(a2, (const void *)v172, v91);
          if ((v19 & 0x80000000) != 0) {
            goto LABEL_280;
          }
          DWORD1(v170) = 0;
          heap_Free(*(void **)(v174 + 8), *((uint64_t *)&v171 + 1));
          *((void *)&v171 + 1) = 0;
        }
        heap_Free(*(void **)(v174 + 8), v172);
        *(void *)&long long v172 = 0;
        int v88 = DWORD1(v170);
        int v39 = v90;
      }
      goto LABEL_223;
    }
    if (SDWORD2(v171) > 70)
    {
      if (DWORD2(v171) == 71)
      {
        DWORD2(v171) = 43;
LABEL_222:
        DWORD2(v172) = 0;
        goto LABEL_223;
      }
      if (DWORD2(v171) == 72)
      {
        int v89 = 4;
        goto LABEL_219;
      }
    }
    else
    {
      if (DWORD2(v171) == 43)
      {
        int v89 = 1;
        goto LABEL_219;
      }
      if (DWORD2(v171) == 70)
      {
        int v89 = 2;
LABEL_219:
        DWORD2(v172) = v89;
        DWORD2(v171) = 43;
        goto LABEL_223;
      }
    }
    DWORD2(v171) = 43;
    if (DWORD2(v172) == 3) {
      goto LABEL_222;
    }
LABEL_223:
    if (v88) {
      goto LABEL_226;
    }
    LOWORD(v170) = 0;
    *((void *)&v169 + 1) = 0;
    DWORD1(v170) = 999;
LABEL_225:
    DWORD2(v172) = 0;
    *(void *)&long long v172 = 0;
LABEL_226:
    int v99 = *(_DWORD *)(a1 + 80);
    int v100 = *(_DWORD *)(a1 + 84);
    LODWORD(v169) = 0;
    DWORD2(v170) = v99 + v42 - v6;
    LODWORD(v171) = v100 + (unsigned __int16)v39;
    if (v142
      || ((DWORD2(v171) - 15) > 0x39 || ((1 << (BYTE8(v171) - 15)) & 0x280200010000003) == 0)
      && (DWORD2(v171) - 106) >= 3)
    {
      uint64_t v16 = escseqs_AppendOutMarker(a2, &v169);
    }
    else
    {
      if (v141 == DWORD2(v171)) {
        DWORD1(v170) = 999;
      }
      uint64_t v16 = escseqs_AppendOutMarker(a2, &v169);
      int v141 = DWORD2(v171);
    }
    if (marker_hasNonConstCharPtrArg(SDWORD1(v170)) && *((void *)&v171 + 1))
    {
      heap_Free(*(void **)(v174 + 8), *((uint64_t *)&v171 + 1));
      *((void *)&v171 + 1) = 0;
    }
    else
    {
      DWORD2(v171) = 0;
    }
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    if (DWORD1(v170) == 13)
    {
      uint64_t inserted = escseqs_InsertDefaultMarkers(a1, a2, (uint64_t)&v169);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
    }
    else if (DWORD1(v170) == 4)
    {
      DWORD1(v166) = 2;
      *((void *)&v166 + 1) = (HIDWORD(v170) + DWORD2(v170));
      LODWORD(v167) = v171;
      *(void *)((char *)&v167 + 4) = 0x100000000;
      uint64_t inserted = escseqs_AppendOutMarker(a2, &v165);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
    }
    uint64_t v32 = &v42[HIDWORD(v170)];
    HIDWORD(v170) = 0;
    DWORD1(v170) = 0;
    *(void *)&long long v172 = 0;
    DWORD2(v172) = 0;
LABEL_197:
    uint64_t v40 = v32;
    int v38 = v152;
    if ((unint64_t)&v32[utf8_determineUTF8CharLength(*v32)] > v31) {
      goto LABEL_250;
    }
  }
  uint64_t v40 = v42;
LABEL_248:
  LOWORD(v39) = v150;
LABEL_250:
  uint64_t v19 = escseqs_AppendOutText(a2, v32, (unsigned __int16)((_WORD)v40 - (_WORD)v32));
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  int v102 = *(_DWORD *)(v173 + 20);
  *(void *)&long long v154 = 0;
  uint64_t v19 = datac_RequestBlock(a2, 1010, 1u, &v154);
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  *(_DWORD *)(v154 + 20) = v102;
  uint64_t v19 = escseqs_PutOutMarkerEos(a2, *(_DWORD *)(v173 + 20));
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  if (*(_DWORD *)(v173 + 20))
  {
    int v103 = 0;
    int v104 = 0;
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    int v103 = *(_DWORD *)(a1 + 80) + v40 - v6;
    int v104 = *(_DWORD *)(a1 + 84) + (unsigned __int16)(v39 + (_WORD)v40 - (_WORD)v32);
  }
  *(_DWORD *)(a1 + 80) = v103;
  *(_DWORD *)(a1 + 84) = v104;
  *(void *)&long long v154 = 0;
  uint64_t v19 = datac_RequestBlock(a2, 1011, 1u, &v154);
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_280;
  }
  uint64_t v105 = v154;
  unsigned int v106 = *(unsigned __int16 *)(v154 + 16);
  if (v106 >= 2)
  {
    uint64_t v107 = *(void *)(v154 + 8);
    int v108 = 1;
    do
    {
      uint64_t v109 = v107 + ((unint64_t)(unsigned __int16)v108 << 6);
      if (*(_DWORD *)(v109 + 20) == 7)
      {
        int v110 = *(_DWORD *)(v109 + 40);
        if (v110 == 60 || v110 == 16)
        {
          if ((unsigned __int16)v106 <= (unsigned __int16)(v108 + 1)) {
            int v112 = (unsigned __int16)(v108 + 1);
          }
          else {
            int v112 = (unsigned __int16)v106;
          }
          do
          {
            if ((unsigned __int16)++v108 >= (unsigned __int16)v106)
            {
              int v108 = v112;
              goto LABEL_273;
            }
            uint64_t v113 = v107 + ((unint64_t)(unsigned __int16)v108 << 6);
          }
          while (*(_DWORD *)(v113 + 20) != 7);
          int v115 = *(_DWORD *)(v113 + 40);
          v114 = (_DWORD *)(v113 + 40);
          if (v110 == v115)
          {
            _DWORD *v114 = 15;
            uint64_t v105 = v154;
          }
        }
      }
LABEL_273:
      ++v108;
      unsigned int v106 = *(unsigned __int16 *)(v105 + 16);
    }
    while (v106 > (unsigned __int16)v108);
  }
  *(void *)&long long v154 = 0;
  uint64_t v19 = datac_RequestBlock(a2, 1011, 1u, &v154);
  if ((v19 & 0x80000000) != 0)
  {
LABEL_280:
    uint64_t v16 = v19;
  }
  else
  {
    unint64_t v116 = *(unsigned __int16 *)(v154 + 16);
    if (v116 >= 2)
    {
      uint64_t v117 = 0;
      uint64_t v118 = *(void *)(v154 + 8);
      unsigned __int16 v119 = 2;
      while (*(_DWORD *)(v118 + v117 + 84) != 0x4000)
      {
        ++v119;
        v117 += 64;
        if ((v116 << 6) - 64 == v117) {
          goto LABEL_296;
        }
      }
      if (v116 > v119)
      {
        v120 = (int *)(v118 + v117 + 148);
        while (1)
        {
          int v121 = *v120;
          v120 += 16;
          if (v121 != 0x4000) {
            break;
          }
          if (v116 == ++v119) {
            goto LABEL_296;
          }
        }
        if (*(_DWORD *)(v118 + ((unint64_t)v119 << 6) + 20) == 0x4000)
        {
          uint64_t v122 = v119 + 1;
          if (v122 == v116)
          {
            *(_WORD *)(v154 + 16) = v116 - 1;
          }
          else
          {
            memmove((void *)(v118 + v117 + 128), (const void *)(v118 + (v122 << 6)), (uint64_t)(int)(v116 - v119) << 6);
            *(_WORD *)(v154 + 16) -= v119;
          }
          LOWORD(v31) = v148;
        }
      }
    }
LABEL_296:
    *(void *)v175 = 0;
    uint64_t v16 = datac_RequestBlock(a2, 1011, 1u, v175);
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v123 = *(void *)v175;
      LOWORD(v124) = *(_WORD *)(*(void *)v175 + 16);
      if ((_WORD)v124)
      {
        int v125 = 0;
        BOOL v126 = 0;
        unsigned __int16 v127 = 0;
        int v128 = 0;
        uint64_t v129 = *(void *)(*(void *)v175 + 8);
        do
        {
          v130 = (_DWORD *)(v129 + ((unint64_t)(unsigned __int16)v128 << 6));
          int v131 = v130[5];
          if (v131 == 7)
          {
            if (v130[10] == 43)
            {
              BOOL v126 = !v126;
              unsigned __int16 v127 = v128;
            }
            else
            {
              BOOL v126 = 0;
            }
          }
          else if (v131 == 0x4000 && v126)
          {
            uint64_t v133 = v129 + ((unint64_t)v127 << 6);
            uint64_t v134 = v129 + ((unint64_t)(unsigned __int16)v128 << 6);
            *(_DWORD *)(v134 + 24) = *(_DWORD *)(v133 + 24);
            *(_DWORD *)(v134 + 32) = *(_DWORD *)(v133 + 32);
            long long v154 = *(_OWORD *)v130;
            long long v155 = *((_OWORD *)v130 + 1);
            long long v156 = *((_OWORD *)v130 + 2);
            long long v157 = *((_OWORD *)v130 + 3);
            uint64_t v135 = (v125 + 1);
            BOOL v136 = (unsigned __int16)v124 >= v135;
            int v137 = (unsigned __int16)v124 - v135;
            if (v137 != 0 && v136)
            {
              memmove(v130, (const void *)(v129 + (v135 << 6)), (uint64_t)v137 << 6);
              uint64_t v123 = *(void *)v175;
            }
            unsigned __int16 v138 = *(_WORD *)(v123 + 16) - 1;
            *(_WORD *)(v123 + 16) = v138;
            memmove((void *)(v129 + ((unint64_t)(v127 + 1) << 6)), (const void *)(v129 + ((unint64_t)v127 << 6)), (uint64_t)(v138 - v127) << 6);
            unsigned __int16 v127 = 0;
            BOOL v126 = 0;
            *(_OWORD *)uint64_t v133 = v154;
            *(_OWORD *)(v133 + 16) = v155;
            *(_OWORD *)(v133 + 32) = v156;
            *(_OWORD *)(v133 + 48) = v157;
            uint64_t v123 = *(void *)v175;
            ++*(_WORD *)(*(void *)v175 + 16);
            ++v128;
          }
          int v125 = (unsigned __int16)++v128;
          unsigned int v124 = *(unsigned __int16 *)(v123 + 16);
        }
        while ((unsigned __int16)v128 < v124);
      }
      memmove(v6, v40, (unsigned __int16)(v31 - (_WORD)v40));
      *(_WORD *)(v173 + 16) = v31 - (_WORD)v40;
    }
  }
LABEL_281:
  if (__s) {
    paramc_ParamRelease(*(void *)(v174 + 40));
  }
  return v16;
}

uint64_t escseqs_AppendOutMarker(uint64_t a1, long long *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (!a2) {
    return 2147491847;
  }
  uint64_t result = datac_RequestBlock(a1, 1012, 1u, &v24);
  if ((result & 0x80000000) == 0)
  {
    long long v25 = *a2;
    int v5 = *((_DWORD *)a2 + 5);
    int v26 = *((_DWORD *)a2 + 4);
    unint64_t v6 = *((void *)a2 + 5);
    long long v21 = a2[3];
    long long v22 = *(long long *)((char *)a2 + 24);
    uint64_t result = datac_RequestBlock(a1, 1011, 1u, &v24);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v7 = *(_WORD *)(v24 + 16) + 1;
      if (*(unsigned __int16 *)(v24 + 18) >= v7
        || (uint64_t result = datac_RequestBlock(a1, 1011, (unsigned __int16)(*(_WORD *)(v24 + 16) + 1), &v24),
            (result & 0x80000000) == 0))
      {
        uint64_t result = datac_RequestBlock(a1, 1012, 1u, &v23);
        if ((result & 0x80000000) == 0)
        {
          if (marker_hasNonConstCharPtrArg(v5) && v6)
          {
            int v8 = *(const char **)(v23 + 8);
            if (v8)
            {
              unsigned int v9 = 0;
              unsigned int v10 = *(unsigned __int16 *)(v23 + 16);
              while (v9 < v10)
              {
                uint64_t v11 = v8;
                if (!strcmp((const char *)v6, v8))
                {
                  unint64_t v14 = *(void *)(v24 + 8) + ((unint64_t)*(unsigned __int16 *)(v24 + 16) << 6);
                  *(_OWORD *)unint64_t v14 = v25;
                  *(_DWORD *)(v14 + 16) = v26;
                  *(_DWORD *)(v14 + 20) = v5;
                  *(_OWORD *)(v14 + 24) = v22;
                  *(void *)(v14 + 40) = v6 & 0xFFFFFFFF00000000 | v9;
                  *(_OWORD *)(v14 + 48) = v21;
                  uint64_t v15 = &v24;
                  goto LABEL_28;
                }
                uint64_t v12 = strlen(v11) + 1;
                v9 += v12;
                int v8 = &v11[v12];
                if (!v11) {
                  break;
                }
              }
            }
            if (marker_hasNonConstCharPtrArg(*((_DWORD *)a2 + 5)))
            {
              if (*((void *)a2 + 5)) {
                uint64_t v13 = *(unsigned __int16 *)(v23 + 16);
              }
              else {
                uint64_t v13 = 0xFFFFFFFFLL;
              }
              unint64_t v6 = v6 & 0xFFFFFFFF00000000 | v13;
            }
          }
          unint64_t v16 = *(void *)(v24 + 8) + ((unint64_t)*(unsigned __int16 *)(v24 + 16) << 6);
          *(_OWORD *)unint64_t v16 = v25;
          *(_DWORD *)(v16 + 16) = v26;
          *(_DWORD *)(v16 + 20) = v5;
          *(_OWORD *)(v16 + 24) = v22;
          *(void *)(v16 + 40) = v6;
          *(_OWORD *)(v16 + 48) = v21;
          *(_WORD *)(v24 + 16) = v7;
          uint64_t result = marker_hasNonConstCharPtrArg(*((_DWORD *)a2 + 5));
          if (result)
          {
            unsigned int v17 = (const void *)*((void *)a2 + 5);
            if (!v17) {
              return 0;
            }
            unsigned __int16 v18 = strlen(*((const char **)a2 + 5)) + 1;
            uint64_t v19 = v23;
            unsigned int v20 = *(unsigned __int16 *)(v23 + 16);
            unsigned __int16 v7 = v20 + v18;
            if (*(unsigned __int16 *)(v23 + 18) < (unsigned __int16)(v20 + v18))
            {
              uint64_t result = datac_RequestBlock(a1, 1012, (unsigned __int16)(v20 + v18), &v23);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v19 = v23;
              unsigned int v20 = *(unsigned __int16 *)(v23 + 16);
              unsigned int v17 = (const void *)*((void *)a2 + 5);
            }
            memcpy((void *)(*(void *)(v19 + 8) + v20), v17, v18);
            uint64_t v15 = &v23;
LABEL_28:
            uint64_t result = 0;
            *(_WORD *)(*v15 + 16) = v7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t escseqs_AppendOutText(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v10 = 0;
  if (!a2) {
    return 2147491847;
  }
  uint64_t result = datac_RequestBlock(a1, 1010, 1u, &v10);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v7 = v10;
  unsigned int v8 = *(unsigned __int16 *)(v10 + 16);
  __int16 v9 = v8 + a3;
  if (*(unsigned __int16 *)(v10 + 18) < (unsigned __int16)(v8 + a3))
  {
    uint64_t result = datac_RequestBlock(a1, 1010, (unsigned __int16)(v8 + a3), &v10);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v7 = v10;
    unsigned int v8 = *(unsigned __int16 *)(v10 + 16);
  }
  memcpy((void *)(*(void *)(v7 + 8) + v8), a2, a3);
  uint64_t result = 0;
  *(_WORD *)(v10 + 16) = v9;
  return result;
}

uint64_t escseqs_NormalizeLanguageName(uint64_t a1, uint64_t a2)
{
  __s2 = 0;
  uint64_t v13 = 0;
  int v11 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13);
  if ((inited & 0x80000000) != 0) {
    return 2147491847;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5) {
    return inited;
  }
  uint64_t v6 = (*(uint64_t (**)(void, void, void, char **, int *))(v5 + 24))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), &__s2, &v11);
  if ((v6 & 0x80000000) == 0)
  {
    if (v11)
    {
      uint64_t v7 = __s2;
      if (__s2)
      {
        if (strcmp(*(const char **)(a2 + 40), __s2) && *v7)
        {
          unsigned int v8 = strhelper_Strdup(*(void *)(v13 + 8), v7);
          if (v8)
          {
            __int16 v9 = v8;
            heap_Free(*(void **)(v13 + 8), *(void *)(a2 + 40));
            *(void *)(a2 + 40) = v9;
          }
          else
          {
            return 2147491850;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t escseqs_InsertDefaultMarkers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v17) & 0x80000000) != 0) {
    return 2147491847;
  }
  uint64_t Defaults = escseqm_GetDefaults(*(void **)(a1 + 64), &v18);
  if ((Defaults & 0x80000000) == 0)
  {
    for (uint64_t i = 0; i != 2496; i += 64)
    {
      int v8 = *(_DWORD *)(v18 + i + 84);
      if (v8)
      {
        if (!marker_hasNonConstCharPtrArg(v8))
        {
          uint64_t v9 = v18 + i;
          *(_DWORD *)(v9 + 88) = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
          *(_DWORD *)(v9 + 100) = 0;
          uint64_t v10 = *(void *)(a3 + 32);
          *(_DWORD *)(v9 + 64) = 0;
          v9 += 64;
          *(void *)(v9 + 32) = v10;
          uint64_t appended = escseqs_AppendOutMarker(a2, (long long *)v9);
          uint64_t Defaults = 0;
          if ((appended & 0x80000000) != 0)
          {
LABEL_17:
            uint64_t Defaults = appended;
            goto LABEL_18;
          }
        }
      }
    }
    for (uint64_t j = 104; j != 2600; j += 64)
    {
      if (marker_hasNonConstCharPtrArg(*(_DWORD *)(v18 + j - 20)))
      {
        uint64_t v13 = v18 + j;
        *(_DWORD *)(v13 - 16) = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v13 - 4) = 0;
        uint64_t v14 = *(void *)(a3 + 32);
        *(_DWORD *)(v13 - 40) = 0;
        v13 -= 40;
        *(void *)(v13 + 32) = v14;
        uint64_t appended = escseqs_AppendOutMarker(a2, (long long *)v13);
        if ((appended & 0x80000000) != 0) {
          goto LABEL_17;
        }
        uint64_t v15 = *(void *)(v18 + j);
        if (v15)
        {
          heap_Free(*(void **)(v17 + 8), v15);
          uint64_t Defaults = 0;
          *(void *)(v18 + j) = 0;
        }
        else
        {
          uint64_t Defaults = 0;
        }
      }
    }
  }
LABEL_18:
  if (v18) {
    heap_Free(*(void **)(v17 + 8), v18);
  }
  return Defaults;
}

uint64_t escseqs_PutOutMarkerEos(uint64_t a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t result = datac_RequestBlock(a1, 1011, 1u, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(v5 + 20) = a2;
    uint64_t result = datac_RequestBlock(a1, 1012, 1u, &v5);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *(_DWORD *)(v5 + 20) = a2;
    }
  }
  return result;
}

uint64_t extdata_LoadData(uint64_t a1, char *a2)
{
  return extdata_LoadSpecificData(a1, a2, 0);
}

uint64_t extdata_LoadSpecificData(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  __s = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)unint64_t v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_DWORD *)__s2 = 0;
  if (!a1) {
    return 2368741383;
  }
  uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v7 = __s;
  if (*__s)
  {
    size_t v8 = 0;
    do
    {
      unint64_t v9 = v8;
      __s2[v8] = __tolower(v7[v8]);
      ++v8;
      uint64_t v7 = __s;
      size_t v10 = strlen(__s);
    }
    while (v9 <= 1 && v8 < v10);
  }
  else
  {
    size_t v8 = 0;
  }
  __s2[v8] = 0;
  if (strcmp(v7, __s2))
  {
    uint64_t result = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", __s2);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    __s = __s2;
  }
  __strcat_chk();
  __strcat_chk();
  __strcat_chk();
  brokeraux_ComposeBrokerString(*(void *)(a1 + 16), v16, 1, 1, __s, 0, 0, (char *)v15, 0x80uLL);
  LODWORD(result) = readDataFile(a1, a2, (const char *)v15, a3);
  int v11 = result;
  int v12 = result & 0x80001FFF;
  if ((result & 0x80001FFF) == 0x8000000A) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 0;
  }
  if (v11 < 0 && v12 != -2147483638)
  {
    v16[strlen(v16) - 4] = 0;
    brokeraux_ComposeBrokerString(*(void *)(a1 + 16), v16, 1, 1, __s, 0, 0, (char *)v15, 0x80uLL);
    return readDataFile(a1, a2, (const char *)v15, a3);
  }
  return result;
}

uint64_t readDataFile(uint64_t a1, char *a2, const char *a3, const char *a4)
{
  uint64_t v32 = 0;
  char v31 = 0;
  unsigned int v29 = 0;
  *(_DWORD *)__s2 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t result = brk_DataOpenEx(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)a3, 1, (uint64_t)&v27);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = brk_DataClose(*(void *)(*(void *)(a1 + 16) + 24), v27);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), 0, a3, a2, 1031, (uint64_t *)&v32);
      if ((result & 0x80000000) == 0)
      {
        do
        {
          int v16 = ssftriff_reader_OpenChunk((uint64_t)v32, __s2, &v29, &v28, v9, v10, v11, v12);
          if (v16 < 0) {
            break;
          }
          uint64_t v17 = *(unsigned __int16 *)(a1 + 32);
          if (*(_WORD *)(a1 + 32))
          {
            uint64_t v18 = *(void *)(a1 + 24);
            while (strcmp(*(const char **)v18, __s2))
            {
              v18 += 32;
              if (!--v17) {
                goto LABEL_14;
              }
            }
            if (!a4 || !strcmp(a4, __s2))
            {
              int v16 = (*(uint64_t (**)(void, void *, void, uint64_t))(v18 + 8))(*(void *)(v18 + 24), v32, v29, v28);
              if (v16 < 0) {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_EXTDATA", 1800, "%s%s", v19, v20, v21, v22, "loading_type");
              }
            }
          }
LABEL_14:
          int v23 = ssftriff_reader_CloseChunk((uint64_t)v32);
          if (v23 < 0 && v16 > -1) {
            int v16 = v23;
          }
        }
        while ((v16 & 0x80000000) == 0);
        if ((v16 & 0x1FFF) == 0x14) {
          int v25 = 0;
        }
        else {
          int v25 = v16;
        }
        LODWORD(result) = ssftriff_reader_ObjClose(v32, v13, v14, v15, v9, v10, v11, v12);
        if (v25 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v25;
        }
      }
    }
  }
  return result;
}

uint64_t extdata_RegisterData(uint64_t a1, long long *a2, unsigned int a3)
{
  if (!a1) {
    return 2368741383;
  }
  if (!*(_WORD *)(a1 + 32))
  {
    uint64_t v8 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (32 * a3) | 1);
    *(void *)(a1 + 24) = v8;
    if (v8) {
      goto LABEL_7;
    }
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200A;
  }
  uint64_t v6 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 24), (32 * (*(unsigned __int16 *)(a1 + 32) + (unint64_t)a3)) | 1);
  if (!v6) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200A;
  }
  *(void *)(a1 + 24) = v6;
LABEL_7:
  if (a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = (_OWORD *)(*(void *)(a1 + 24) + 32 * (v9 + *(unsigned __int16 *)(a1 + 32)));
      long long v11 = *a2;
      long long v12 = a2[1];
      a2 += 2;
      _OWORD *v10 = v11;
      v10[1] = v12;
      ++v9;
    }
    while (a3 != v9);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 32) += a3;
  return result;
}

uint64_t extdata_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v12 = 0;
  if (!a3 || (InitRsrcFunction(a1, a2, &v12) & 0x80000000) != 0)
  {
    int v11 = -2147475449;
  }
  else
  {
    *a3 = 0;
    uint64_t v8 = heap_Alloc(*(void *)(v12 + 8), 40);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t result = 0;
      *(_OWORD *)uint64_t v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(void *)(v9 + 32) = 0;
      *(void *)uint64_t v9 = a1;
      *(void *)(v9 + 8) = a2;
      *(void *)(v9 + 16) = v12;
      *(_WORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 36) = a4;
      *a3 = v9;
      return result;
    }
    int v11 = -2147475446;
  }
  return v11 | (a4 << 20);
}

uint64_t extdata_UnregisterModule(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2368741383;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 32) > a2)
    {
      uint64_t result = 0;
      *(void *)(*(void *)(a1 + 24) + 32 * a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t extdata_GetIndex(uint64_t a1, _WORD *a2)
{
  uint64_t result = 2368741383;
  if (a1)
  {
    if (!a2) {
      return result;
    }
    int v4 = *(unsigned __int16 *)(a1 + 32);
    LOWORD(a1) = v4 - 1;
    if (v4)
    {
      uint64_t result = 0;
    }
    else
    {
      LOWORD(a1) = 0;
      uint64_t result = 2368741383;
    }
  }
  *a2 = a1;
  return result;
}

uint64_t extdata_FreeData(uint64_t a1)
{
  if (!a1) {
    return 2368741383;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 32);
  if (*(_WORD *)(a1 + 32))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a1 + 24) + v3;
      if (*(void *)(v5 + 24))
      {
        uint64_t result = (*(uint64_t (**)(void))(v5 + 16))();
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v2 = *(unsigned __int16 *)(a1 + 32);
      }
      ++v4;
      v3 += 32;
    }
    while (v4 < v2);
  }
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 24));
  uint64_t result = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  return result;
}

uint64_t extdata_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2368741383;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = extdata_FreeData(a1);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      heap_Free(*(void **)(v2 + 8), v4);
      *(_WORD *)(a1 + 32) = 0;
    }
    heap_Free(*(void **)(v2 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t freeEOSDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_WORD *)(a1 + 96)) {
    return 0;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] free EOS definitions", a6, a7, a8, v20);
  uint64_t v15 = *(void *)(a1 + 104);
  if (v15)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
    *(void *)(a1 + 104) = 0;
  }
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 96) = 0;
  if (*(_WORD *)(a1 + 128))
  {
    uint64_t v16 = *(void *)(a1 + 120);
    if (v16)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v16);
      *(void *)(a1 + 120) = 0;
    }
    *(_WORD *)(a1 + 128) = 0;
  }
  if (*(_WORD *)(a1 + 144))
  {
    uint64_t v17 = *(void *)(a1 + 136);
    if (v17)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v17);
      *(void *)(a1 + 136) = 0;
    }
    *(_WORD *)(a1 + 144) = 0;
  }
  uint64_t v18 = *(void *)(a1 + 152);
  if (v18)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v18);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t result = *(void *)(a1 + 88);
  if (result)
  {
    uint64_t result = ssftriff_reader_ReleaseChunkData((void *)result, v18, v9, v10, v11, v12, v13, v14);
    if ((result & 0x80000000) == 0) {
      *(void *)(a1 + 88) = 0;
    }
  }
  return result;
}

uint64_t getEOSDefs(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = a4;
  if (*(_WORD *)(a1 + 96)) {
    return 0;
  }
  uint64_t v8 = 2369789962;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] get EOS definitions", a6, a7, a8, v41);
  unsigned int v12 = a4[1] + 8;
  unsigned int v13 = v12 + *a4;
  uint64_t v14 = *(unsigned __int16 *)((char *)a4 + v13);
  *(_WORD *)(a1 + 96) = v14;
  uint64_t v15 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (8 * v14) | 1);
  *(void *)(a1 + 104) = v15;
  if (!v15) {
    goto LABEL_25;
  }
  unsigned int v23 = v13 + 2;
  uint64_t v24 = *(unsigned __int16 *)(a1 + 96);
  if (*(_WORD *)(a1 + 96))
  {
    int v25 = (unsigned char *)(v15 + 4);
    do
    {
      char v26 = *((unsigned char *)a4 + v23);
      int v27 = *(_DWORD *)((char *)a4 + v23 + 2);
      v23 += 6;
      unsigned char *v25 = v26;
      *((_DWORD *)v25 - 1) = v27;
      v25 += 8;
      --v24;
    }
    while (v24);
  }
  uint64_t v28 = *(unsigned __int16 *)((char *)a4 + v23);
  *(_WORD *)(a1 + 128) = v28;
  uint64_t v29 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (2 * v28) | 1);
  *(void *)(a1 + 120) = v29;
  if (!v29) {
    goto LABEL_25;
  }
  if (*(_WORD *)(a1 + 128))
  {
    unint64_t v30 = 0;
    do
    {
      v23 += 2;
      *(_WORD *)(*(void *)(a1 + 120) + 2 * v30++) = *(_WORD *)((char *)a4 + v23);
    }
    while (v30 < *(unsigned __int16 *)(a1 + 128));
  }
  *(_WORD *)(a1 + 144) = 0;
  uint64_t v31 = *(unsigned __int16 *)((char *)a4 + v23 + 2);
  *(_WORD *)(a1 + 144) = v31;
  unsigned int v32 = v23 + 4;
  if (v31)
  {
    uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (2 * v31) | 1);
    *(void *)(a1 + 136) = v33;
    if (v33)
    {
      if (*(_WORD *)(a1 + 144))
      {
        unint64_t v34 = 0;
        do
        {
          *(_WORD *)(*(void *)(a1 + 136) + 2 * v34) = *(_WORD *)((char *)a4 + v32);
          v32 += 2;
          ++v34;
        }
        while (v34 < *(unsigned __int16 *)(a1 + 144));
      }
      goto LABEL_16;
    }
LABEL_25:
    freeEOSDefs(a1, v16, v17, v18, v19, v20, v21, v22);
    return v8;
  }
LABEL_16:
  uint64_t v35 = *(unsigned __int16 *)((char *)a4 + v32);
  uint64_t v36 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, v35 + 1);
  *(void *)(a1 + 152) = v36;
  if (!v36) {
    goto LABEL_25;
  }
  unsigned int v37 = v32 + 2;
  if (v35)
  {
    for (uint64_t i = 0; i != v35; ++i)
      *(unsigned char *)(*(void *)(a1 + 152) + i) = *((unsigned char *)a4 + v37 + i);
    v37 += i;
  }
  int v39 = *(unsigned __int16 *)((char *)a4 + v37);
  *(_DWORD *)(a1 + 160) = v39;
  if (!v39)
  {
    uint64_t v8 = 2369789959;
    goto LABEL_25;
  }
  uint64_t v8 = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 88), &v42, v18, v19, v20, v21, v22);
  if ((v8 & 0x80000000) == 0) {
    *(void *)(a1 + 112) = (char *)v42 + v12;
  }
  return v8;
}

uint64_t sparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  *(void *)&__c[3] = 0;
  uint64_t v6 = 2369789959;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  unsigned __int16 v33 = 0;
  __s1 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v36) & 0x80000000) == 0)
  {
    *a5 = 0;
    uint64_t v13 = heap_Alloc(*(void *)(v36 + 8), 192);
    if (!v13) {
      return 2369789962;
    }
    uint64_t v14 = v13;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(void *)uint64_t v13 = a1;
    *(void *)(v13 + 8) = a2;
    uint64_t v15 = v36;
    *(void *)(v13 + 16) = v36;
    *(void *)(v13 + 80) = a6;
    *(void *)(v13 + 64) = 0;
    *(_WORD *)(v13 + 72) = 0;
    *(_WORD *)(v13 + 184) = 0;
    *(_DWORD *)(v13 + 176) = 0;
    *(void *)(v13 + 168) = 0;
    *(_DWORD *)(v13 + 188) = 0;
    if ((paramc_ParamGetStr(*(void *)(v15 + 40), (uint64_t)"mnceosposition", &__s1) & 0x80000000) == 0
      && __s1
      && !strcmp(__s1, "yes"))
    {
      *(_DWORD *)(v14 + 188) = 1;
    }
    *(void *)(v14 + 160) = 0;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(void *)(v14 + 24) = a3;
    *(_DWORD *)(v14 + 32) = a4;
    *(void *)(v14 + 88) = 0;
    *(void *)&long long v37 = "EOSD";
    *((void *)&v37 + 1) = getEOSDefs;
    int v38 = freeEOSDefs;
    uint64_t v39 = v14;
    uint64_t v16 = extdata_RegisterData(a6, &v37, 1u);
    if ((v16 & 0x80000000) == 0)
    {
      extdata_GetIndex(a6, &v33);
      if ((objc_GetObject(*(void *)(v36 + 48), (uint64_t)"FE_DCTLKP", &v35) & 0x80000000) != 0)
      {
        uint64_t v18 = *(void *)(v14 + 40);
        if (!v18)
        {
LABEL_30:
          uint64_t v6 = 0;
          *a5 = v14;
          return v6;
        }
      }
      else
      {
        uint64_t v17 = v35;
        uint64_t v18 = *(void *)(v35 + 8);
        *(void *)(v14 + 40) = v18;
        *(_OWORD *)(v14 + 48) = *(_OWORD *)(v17 + 16);
        if (!v18) {
          goto LABEL_30;
        }
      }
      *(_WORD *)&__c[1] = -1;
      uint64_t v16 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(v18 + 96))(*(void *)(v14 + 48), *(void *)(v14 + 56), "fecfg", "ppabbrscanback", &__c[3], &__c[1], __c);
      if ((v16 & 0x80000000) == 0)
      {
        if (*(unsigned __int16 *)&__c[1] != 1 || !*(void *)&__c[3]) {
          goto LABEL_30;
        }
        uint64_t v19 = **(char ***)&__c[3];
        uint64_t v20 = strchr(**(char ***)&__c[3], __c[0]);
        if (v20)
        {
          *uint64_t v20 = 0;
          uint64_t v19 = **(char ***)&__c[3];
        }
        *(_WORD *)(v14 + 72) = 1;
        uint64_t v21 = strchr(v19, 124);
        if (v21)
        {
          unsigned __int16 v22 = 1;
          do
          {
            *(_WORD *)(v14 + 72) = ++v22;
            uint64_t v21 = strchr(v21 + 1, 124);
          }
          while (v21);
          uint64_t v23 = v22 + 1;
        }
        else
        {
          uint64_t v23 = 2;
        }
        uint64_t v24 = heap_Calloc(*(void **)(v36 + 8), 1, v23);
        *(void *)(v14 + 64) = v24;
        if (v24)
        {
          int v25 = **(char ***)&__c[3];
          *(_WORD *)(v14 + 72) = 0;
          if (v25)
          {
            do
            {
              if (*v25 == __c[0]) {
                break;
              }
              char v26 = strchr(v25, 124);
              int v27 = v26;
              if (v26) {
                *char v26 = 0;
              }
              char v28 = atoi(v25);
              uint64_t v29 = *(void *)(v14 + 64);
              uint64_t v30 = *(unsigned __int16 *)(v14 + 72);
              *(_WORD *)(v14 + 72) = v30 + 1;
              *(unsigned char *)(v29 + v30) = v28;
              int v25 = v27 + 1;
            }
            while (v27);
          }
          goto LABEL_30;
        }
        return 2369789962;
      }
    }
    uint64_t v6 = v16;
    sparser_ObjClose(v14);
    extdata_UnregisterModule(a6, v33);
  }
  return v6;
}

uint64_t sparser_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2369789959;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 40)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      heap_Free(*(void **)(v5 + 8), v3);
      *(void *)(a1 + 64) = 0;
      *(_WORD *)(a1 + 72) = 0;
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t sparser_HasTextElementLeft(_WORD **a1, uint64_t a2, BOOL *a3, _WORD *a4)
{
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v4 = 2369789959;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  long long v49 = 0u;
  long long v53 = 0u;
  int v48 = 0;
  LODWORD(v49) = 1;
  long long v50 = 0x200000000uLL;
  uint64_t v51 = 0;
  DWORD2(v53) = 0;
  uint64_t v52 = 1;
  if (!a1) {
    return v4;
  }
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  int v56 = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v60) & 0x80000000) != 0) {
    return v4;
  }
  if (!*((_WORD *)a1 + 48))
  {
    log_OutPublic(*(void *)(v60 + 32), (uint64_t)&modPP_1, 1808, 0, v9, v10, v11, v12, v47);
    return v4;
  }
  if ((datac_RequestBlock(a2, 1010, 1u, &v59) & 0x80000000) != 0)
  {
    uint64_t v4 = 0;
    *a3 = 0;
    return v4;
  }
  uint64_t v13 = datac_RequestBlock(a2, 1011, 1u, &v58);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v14 = *(void *)(v58 + 8);
  uint64_t v15 = *(unsigned __int16 *)(v58 + 16);
  uint64_t v13 = datac_RequestBlock(a2, 1012, 1u, &v57);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v13 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1011, &v55, 212);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if ((chars_ScanBlankHead(v59, (unsigned __int16 *)&v56 + 1, v58, &v56, &v48, 1u) & 0x80000000) == 0)
  {
    if (v15 < 2)
    {
      LOWORD(v16) = 0;
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = (_DWORD *)(v14 + 96);
      uint64_t v18 = v15 - 1;
      uint64_t v19 = (_DWORD *)(v14 + 96);
      do
      {
        int v20 = *v19;
        v19 += 16;
        if (v20 - *(_DWORD *)(v14 + 32) > *(_DWORD *)(v14 + 32)
                                         + *(unsigned __int16 *)(v59 + 2) * HIWORD(v56))
          break;
        int v21 = *(v17 - 3);
        if (v21 == 0x4000) {
          int v22 = v16;
        }
        else {
          int v22 = v16 + 1;
        }
        if (v21 != 3) {
          int v16 = v22;
        }
        uint64_t v17 = v19;
        --v18;
      }
      while (v18);
    }
    if (*((unsigned __int16 *)a1 + 92) <= (unsigned __int16)v16)
    {
      if ((bed_GetpBlock(v55, &v58) & 0x80000000) != 0) {
        goto LABEL_69;
      }
      uint64_t v29 = v59;
      if (v15 >= 2)
      {
        unsigned __int16 v30 = 0;
        uint64_t v31 = (_DWORD *)(v14 + 104);
        uint64_t v32 = 1;
        while (*(v31 - 2) - *(_DWORD *)(v14 + 32) <= *(unsigned __int16 *)(v59 + 2) * HIWORD(v56))
        {
          int v33 = *(v31 - 5);
          if (v33 == 3 && *v31 == 1) {
            goto LABEL_67;
          }
          if (v33 != 0x4000) {
            ++v30;
          }
          if (*((unsigned __int16 *)a1 + 92) == v30)
          {
            if ((bed_Goto(v55, v32) & 0x80000000) == 0)
            {
              DWORD2(v50) = *(v31 - 4);
              LODWORD(v51) = *(v31 - 2);
              if ((sparser_bed_InjectMarker(v55, (unsigned int *)&v49, 0, *((_DWORD *)a1 + 47)) & 0x80000000) == 0)
              {
                log_OutText(*((void *)a1[2] + 4), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] inserting EOS as number of markers in empty text exceeded, end marker now %u", v43, v44, v45, v32);
                goto LABEL_67;
              }
            }
            goto LABEL_69;
          }
          ++v32;
          v31 += 16;
          if (v15 == v32) {
            break;
          }
        }
      }
    }
    else
    {
      if (!(_WORD)v16 && HIWORD(v56) > 0x400u)
      {
        if ((bed_GetpBlock(v55, &v58) & 0x80000000) != 0) {
          goto LABEL_69;
        }
        HIWORD(v56) = 1024;
        int v23 = *(_DWORD *)(v14 + 32);
        DWORD2(v50) = *(_DWORD *)(v14 + 24);
        LODWORD(v51) = v23;
        if (v15)
        {
          uint64_t v24 = 0;
          int v25 = (_DWORD *)(v14 + 20);
          char v26 = (_DWORD *)(v14 + 20);
          while (1)
          {
            int v27 = *v26;
            v26 += 16;
            if (v27 != 0x4000) {
              break;
            }
            int v28 = v25[3];
            if (v28 - *(_DWORD *)(v14 + 32) > (*(unsigned __int16 *)(v59 + 2) << 10)) {
              break;
            }
            DWORD2(v50) = v25[1];
            LODWORD(v51) = v28;
            ++v24;
            int v25 = v26;
            if (v15 == v24) {
              goto LABEL_61;
            }
          }
          uint64_t v15 = (unsigned __int16)v24;
        }
LABEL_61:
        if ((bed_Goto(v55, v15) & 0x80000000) != 0
          || (sparser_bed_InjectMarker(v55, (unsigned int *)&v49, 0, *((_DWORD *)a1 + 47)) & 0x80000000) != 0)
        {
          goto LABEL_69;
        }
        log_OutText(*((void *)a1[2] + 4), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] inserting EOS as empty text length exceeded, end marker now %u", v40, v41, v42, v15);
LABEL_67:
        BOOL v39 = 1;
LABEL_68:
        *a3 = v39;
        goto LABEL_69;
      }
      uint64_t v29 = v59;
    }
    if ((chars_ScanBlankHead(v29, (unsigned __int16 *)&v56 + 1, v58, &v56, &v48, 2u) & 0x80000000) == 0)
    {
      uint64_t v34 = v58;
      uint64_t v35 = HIWORD(v56);
      sparser_GetReadMode(v14, *(unsigned __int16 *)(v58 + 16), HIWORD(v56), a4);
      int v36 = (__int16)*a4;
      switch(v36)
      {
        case 2:
          int NextCharacterBoundary = sparser_FindNextCharacterBoundary(v59, v34, v57, v35, 0, a3);
          goto LABEL_56;
        case 4:
          long long v37 = sparser_FindNextLineBoundary;
          break;
        case 3:
          long long v37 = sparser_FindNextWordBoundary;
          break;
        default:
          paramc_ParamGetStr(*(void *)(v60 + 40), (uint64_t)"extraesctn", &v54);
          int NextCharacterBoundary = sparser_FindNextSentenceBoundary(v59, v58, v57, HIWORD(v56), v54, a3);
LABEL_56:
          if (NextCharacterBoundary < 0 || *a3 || !*(_DWORD *)(v59 + 20)) {
            goto LABEL_69;
          }
          BOOL v39 = sparser_ScanDataMarker(v58);
          goto LABEL_68;
      }
      int NextCharacterBoundary = v37(v59, v34, v57, v35, 0, a3);
      goto LABEL_56;
    }
  }
LABEL_69:
  if (v55) {
    bed_ObjClose(v55);
  }
  return 0;
}

uint64_t sparser_bed_InjectMarker(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result = 2369789959;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = sparser_bed_MapPosCur(a1, a2[8], a2 + 6);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v9 = a2 + 7;
        uint64_t result = sparser_bed_MapPosCur(a1, a2[9] + a2[8], a2 + 7);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v10 = a2[6];
          if (*v9 >= v10) {
            *v9 -= v10;
          }
          if (a3 == 1
            || (a4 != 1
              ? (uint64_t v15 = (uint64_t (*)(uint64_t, unint64_t))sparser_marker_HasStrictlyGreaterPosCur)
              : (uint64_t v15 = (uint64_t (*)(uint64_t, unint64_t))sparser_marker_HasGreaterEqualPosCur),
                (uint64_t result = bed_GoForward(a1, v15, (uint64_t)a2), (result & 0x80000000) == 0) || (result & 0x1FFF) == 0x14))
          {
            __s1 = 0;
            unsigned __int16 v16 = 0;
            uint64_t result = bed_GetcElem(a1, &v16);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = bed_GetpElem(a1, 0, &__s1);
              if ((result & 0x80000000) == 0)
              {
                uint64_t v11 = v16;
                if (v16)
                {
                  uint64_t v12 = __s1;
                  unsigned int v13 = a2[8];
                  do
                  {
                    if (v12[8] > v13) {
                      break;
                    }
                    uint64_t result = memcmp(v12, a2, 0x40uLL);
                    if (!result) {
                      return result;
                    }
                    v12 += 16;
                    --v11;
                  }
                  while (v11);
                }
                int v14 = bed_Insert(a1, a2, 1);
                return v14 & (v14 >> 31);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sparser_GetReadMode(uint64_t result, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(result + 32) + a3;
    uint64_t v5 = (_DWORD *)(result + 104);
    uint64_t v6 = a2 - 1;
    do
    {
      if (*(v5 - 2) > v4) {
        break;
      }
      if (*(v5 - 5) == 20) {
        *a4 = *v5;
      }
      v5 += 16;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sparser_FindNextCharacterBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  *a6 = *(unsigned __int16 *)(a1 + 16) > a4;
  return 0;
}

uint64_t sparser_FindNextWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, BOOL *a6)
{
  if (*(_DWORD *)(a1 + 20))
  {
    BOOL v8 = *(unsigned __int16 *)(a1 + 16) > a4;
  }
  else
  {
    unsigned __int16 v10 = a4;
    chars_ScanNonBlanks(*(void *)(a1 + 8), &v10, *(unsigned __int16 *)(a1 + 16));
    BOOL v8 = v10 < *(unsigned __int16 *)(a1 + 16);
  }
  *a6 = v8;
  return 0;
}

uint64_t sparser_FindNextLineBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, BOOL *a6)
{
  if (*(_DWORD *)(a1 + 20))
  {
    BOOL v8 = *(unsigned __int16 *)(a1 + 16) > a4;
  }
  else
  {
    unsigned __int16 v10 = a4;
    chars_ScanForLineEnd(*(void *)(a1 + 8), &v10, *(unsigned __int16 *)(a1 + 16));
    BOOL v8 = v10 < *(unsigned __int16 *)(a1 + 16);
  }
  *a6 = v8;
  return 0;
}

uint64_t sparser_FindNextSentenceBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, BOOL *a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 20))
  {
    BOOL v9 = *(unsigned __int16 *)(a1 + 16) > a4;
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
  if (a4)
  {
    if (!*(_WORD *)(a2 + 16))
    {
      LODWORD(v16) = 0;
      goto LABEL_28;
    }
    BOOL v15 = 0;
    LODWORD(v16) = 0;
    do
    {
      uint64_t v17 = v13 + ((unint64_t)v16 << 6);
      if (*(_DWORD *)(v17 + 32) > *(_DWORD *)(v13 + 32) + *(unsigned __int16 *)(a1 + 2) * a4) {
        break;
      }
      if (a5 && *(_DWORD *)(v17 + 20) == 21)
      {
        __strcpy_chk();
        BOOL v15 = strstr(a5, v23) != 0;
        LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
      }
      LODWORD(v16) = v16 + 1;
    }
    while (v16 < v14);
  }
  else
  {
    LODWORD(v16) = 0;
    BOOL v15 = 0;
  }
  if (v16 >= v14) {
    goto LABEL_28;
  }
  unint64_t v16 = v16;
  uint64_t v18 = (_DWORD *)(v13 + ((unint64_t)v16 << 6));
  while (1)
  {
    int v19 = v18[8];
    int v20 = *(_DWORD *)(v13 + 32);
    __int16 v21 = v19 - v20;
    if (v19 == v20
      || !sparser_marker_IsSentenceBoundary((BOOL)v18, (char *)(*(void *)(a3 + 8) + v18[10])))
    {
      if (a5 && v18[5] == 21)
      {
        __strcpy_chk();
        BOOL v15 = strstr(a5, v23) != 0;
      }
      goto LABEL_25;
    }
    if (v15 && v18[5] == 2)
    {
LABEL_21:
      v18[10] = 0;
      goto LABEL_25;
    }
    if (!sparser_IsSuppressedSentenceBoundary(a2, a1, v21)) {
      break;
    }
    if (v18[5] == 2) {
      goto LABEL_21;
    }
LABEL_25:
    ++v16;
    unint64_t v14 = *(unsigned __int16 *)(a2 + 16);
    v18 += 16;
    if (v16 >= v14) {
      goto LABEL_26;
    }
  }
  LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
LABEL_26:
  LODWORD(v16) = (unsigned __int16)v16;
LABEL_28:
  BOOL v9 = v16 < v14;
LABEL_29:
  *a6 = v9;
  return 0;
}

BOOL sparser_ScanDataMarker(BOOL result)
{
  if (result)
  {
    unint64_t v1 = *(unsigned __int16 *)(result + 16);
    if (*(_WORD *)(result + 16))
    {
      uint64_t v2 = 0;
      uint64_t v3 = *(void *)(result + 8);
      unsigned int v4 = (_DWORD *)(v3 + 20);
      BOOL v5 = 1;
      do
      {
        if (v3)
        {
          if (*v4 <= 0x28u && ((1 << *v4) & 0x10024000100) != 0) {
            break;
          }
        }
        BOOL v5 = ++v2 < v1;
        v4 += 16;
      }
      while (v1 != v2);
    }
    else
    {
      return 0;
    }
    return v5;
  }
  return result;
}

uint64_t sparser_PreScanTextElement(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = datac_RequestBlock(a2, 1010, 1u, &v12);
  if ((v5 & 0x80000000) == 0)
  {
    unint64_t v6 = *(unsigned __int16 *)(v12 + 16);
    if (v6 >= 4)
    {
      uint64_t v7 = *(unsigned char **)(v12 + 8);
      unsigned __int16 v13 = 0;
      if (utf8_Utf8CharTo16bit(&v7[(v6 - 2)], (uint64_t)&v13))
      {
        if (v13 <= 0x3Fu && ((1 << v13) & 0x8000400200000000) != 0 || v13 == 65294)
        {
          if (utf8_BelongsToSet(2u, v7, *(unsigned __int16 *)(v12 + 16) - 1, *(unsigned __int16 *)(v12 + 16)))
          {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] text ends in period-space; get more text",
              v8,
              v9,
              v10,
              v12);
            *a3 = 1;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sparser_ScanTextElement(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v8 = 2369789959;
  int v87 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  if (!a1 || !a2) {
    return v8;
  }
  if (!*(_WORD *)(a1 + 96))
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 1808, 0, a5, a6, a7, a8, v77);
    return v8;
  }
  datac_RequestBlock(a2, 1012, 1u, &v85);
  unsigned int v13 = datac_RequestBlock(a2, 1010, 1u, &v90);
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v13;
    }
  }
  __int16 v14 = *(_WORD *)(v90 + 16);
  __int16 v15 = *(_WORD *)(v90 + 2);
  uint64_t v16 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, 1011, &v89, 212);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v16 = bed_GetpBlock(v89, &v86);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  unsigned int v17 = *(_DWORD *)(*(void *)(v86 + 8) + 32);
  uint64_t v18 = v89;
  *(void *)unsigned __int16 v91 = 0;
  long long v93 = 0u;
  long long v94 = 0x400000000000uLL;
  long long v96 = 0u;
  long long v95 = 0uLL;
  if (!v89) {
    goto LABEL_121;
  }
  uint64_t v19 = bed_Goto(v89, 0);
  if ((v19 & 0x80000000) != 0
    || (uint64_t v19 = bed_GoForward(v18, (uint64_t (*)(uint64_t, unint64_t))sparser_marker_IsOfSameType, (uint64_t)&v93), (v19 & 0x80000000) != 0)|| (uint64_t v19 = bed_GetpElem(v18, 0xFFFFu, v91), (v19 & 0x80000000) != 0))
  {
    uint64_t v8 = v19;
LABEL_121:
    unsigned int v22 = 0;
    unsigned __int16 v73 = 0;
    HIWORD(v87) = 0;
    goto LABEL_122;
  }
  unsigned int v83 = *(_DWORD *)(*(void *)v91 + 32);
  unsigned int v20 = *(_DWORD *)(a1 + 168);
  if (v20 < v17)
  {
    *(_DWORD *)(a1 + 168) = v17;
    unsigned int v20 = v17;
  }
  *(_DWORD *)(a1 + 176) = v20;
  unsigned int v88 = (v20 - v17) / *(unsigned __int16 *)(v90 + 2);
  v91[0] = v88;
  uint64_t NextOrthRegion = sparser_FindNextOrthRegion(v90, v89, v91, &v88, &v87);
  unsigned int v22 = v88;
  if ((NextOrthRegion & 0x80000000) != 0)
  {
    uint64_t v8 = NextOrthRegion;
  }
  else
  {
    unsigned int v23 = v91[0];
    if (v88)
    {
      unsigned int v24 = *(unsigned __int16 *)(v90 + 16);
      if (v88 <= v24)
      {
        HIWORD(v87) = v88 - (v24 == (unsigned __int16)v88);
        chars_BackScanBlanks(*(void *)(v90 + 8), (_WORD *)&v87 + 1);
        if (!HIWORD(v87))
        {
          uint64_t v8 = 0;
          goto LABEL_129;
        }
      }
    }
    if (v23 >= v22)
    {
      uint64_t v8 = 0;
    }
    else
    {
      int v25 = 0;
      int v81 = a4;
      unsigned int v78 = v17 + (unsigned __int16)(v15 * v14);
      unsigned int v79 = v17;
      LOWORD(v26) = v23;
      do
      {
        unsigned __int16 v80 = v26;
        if ((unsigned __int16)v26 == (unsigned __int16)v22) {
          goto LABEL_20;
        }
        unsigned int v32 = (unsigned __int16)v22;
        unsigned __int16 v33 = v26;
        do
        {
          if (!v86) {
            goto LABEL_136;
          }
          unint64_t v34 = *(unsigned __int16 *)(v86 + 16);
          if (*(_WORD *)(v86 + 16))
          {
            uint64_t v35 = 0;
            uint64_t v36 = *(void *)(v86 + 8);
            int v37 = *(_DWORD *)(v36 + 32);
            int v38 = (unsigned __int16 *)(v36 + 40);
            BOOL v39 = (_DWORD *)(v36 + 96);
            unint64_t v40 = 2;
            int v41 = v81;
            do
            {
              int v42 = *((_DWORD *)v38 - 2) - v37;
              unsigned int v43 = (unsigned __int16)(*(v38 - 4) - v37);
              if (v43 > v32) {
                break;
              }
              if (*((_DWORD *)v38 - 5) == 20)
              {
                int v44 = *v38;
                if (v41 == 1)
                {
                  BOOL v45 = v44 == 1 || v43 >= v32;
                  if (!v45 && v43 > v33)
                  {
                    int v41 = 1;
                    int v67 = *((_DWORD *)v38 - 2) - v37;
                    LOWORD(v42) = v33;
LABEL_101:
                    unsigned __int16 v33 = v67;
                    if (a3) {
                      goto LABEL_59;
                    }
                    goto LABEL_20;
                  }
                }
                int v41 = *v38;
                BOOL v47 = v44 != 1 || v43 >= v32;
                if (!v47 && v43 >= v33)
                {
                  if ((unsigned __int16)v35 + 1 < v34)
                  {
                    LOWORD(v67) = v22;
                    uint64_t v68 = v39;
                    while (1)
                    {
                      int v69 = *v68;
                      v68 += 16;
                      __int16 v70 = v69 - v37;
                      unsigned int v71 = (unsigned __int16)(v69 - v37);
                      if (v71 > v32) {
                        break;
                      }
                      if (*(v39 - 3) == 20)
                      {
                        BOOL v72 = v71 < v32 && v71 >= v33;
                        if (v72) {
                          LOWORD(v67) = v70;
                        }
                      }
                      else
                      {
                        BOOL v72 = 0;
                      }
                      if (v40 < v34)
                      {
                        ++v40;
                        BOOL v39 = v68;
                        if (!v72) {
                          continue;
                        }
                      }
                      if (v72) {
                        goto LABEL_101;
                      }
                      break;
                    }
                  }
LABEL_56:
                  unsigned __int16 v33 = v22;
                  if (a3) {
                    goto LABEL_59;
                  }
                  goto LABEL_20;
                }
              }
              v38 += 32;
              ++v35;
              v39 += 16;
              ++v40;
            }
            while (v34 != v35);
            LOWORD(v42) = v33;
            goto LABEL_56;
          }
          LOWORD(v42) = v33;
          unsigned __int16 v33 = v22;
          int v41 = v81;
          if (!a3) {
            break;
          }
LABEL_59:
          if ((unsigned __int16)v42 == v33 || v41 != 1) {
            break;
          }
          uint64_t v84 = v90;
          if (!v90 || (uint64_t v49 = v89) == 0)
          {
            uint64_t matched = 2369789959;
LABEL_135:
            uint64_t v8 = matched;
LABEL_136:
            unsigned int v17 = v79;
            goto LABEL_137;
          }
          int v50 = *(unsigned __int16 *)(v90 + 2);
          uint64_t v51 = bed_Goto(v89, 0xFFFFFFFF);
          if ((v51 & 0x80000000) != 0) {
            goto LABEL_133;
          }
          unsigned __int16 v92 = 0;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          LODWORD(v95) = v83 + v50 * (unsigned __int16)v42;
          uint64_t matched = bed_GoBackward(v49, (unsigned int (*)(uint64_t, unint64_t))sparser_marker_HasStrictlySmallerPosCur, (uint64_t)&v93);
          if ((matched & 0x80001FFF) == 0x80000014) {
            uint64_t matched = bed_Goto(v49, 0);
          }
          if ((matched & 0x80000000) != 0) {
            goto LABEL_135;
          }
          uint64_t v51 = bed_GetiElem(v49, &v92);
          if ((v51 & 0x80000000) != 0)
          {
LABEL_133:
            uint64_t matched = v51;
            goto LABEL_135;
          }
          uint64_t matched = sparser_MatchSb(a1, 0, 1, v84, v83, v42, v33, v49, v92);
          if ((matched & 0x80000000) != 0) {
            goto LABEL_135;
          }
          LOWORD(v82) = v42;
          while (1)
          {
            uint64_t v53 = v92;
            unsigned int v54 = *(unsigned __int16 *)(v84 + 2);
            *(void *)&long long v93 = 0;
            v97[0] = 0;
            if ((bed_GetcElem(v49, v97) & 0x80000000) != 0 || (bed_GetpElem(v49, 0, &v93) & 0x80000000) != 0) {
              break;
            }
            if (v97[0] > v53)
            {
              uint64_t v55 = (unsigned int *)(v93 + 32 + (v53 << 6));
              while (1)
              {
                unsigned int v56 = *v55;
                v55 += 16;
                if (v56 > *(_DWORD *)(v93 + 32) + v54 * (unsigned __int16)v82) {
                  break;
                }
                if (v97[0] == ++v53) {
                  goto LABEL_97;
                }
              }
              LODWORD(v53) = (unsigned __int16)v53;
            }
            if (v53 >= v97[0]) {
              goto LABEL_97;
            }
            int v57 = *(_DWORD *)(v93 + 32);
            unsigned int v58 = v57 + v54 * v33;
            uint64_t v59 = v53;
            uint64_t v60 = (_DWORD *)(v93 + ((unint64_t)v53 << 6) + 20);
            while (v60[3] <= v58)
            {
              if (*v60 <= 0x28u && ((1 << *v60) & 0x10004000080) != 0) {
                break;
              }
              ++v59;
              v60 += 16;
              if (v97[0] == v59) {
                goto LABEL_97;
              }
            }
            uint64_t v62 = v93 + ((unint64_t)(unsigned __int16)v59 << 6);
            unsigned int v63 = *(_DWORD *)(v62 + 32);
            if (v63 > v58
              || ((v64 = *(_DWORD *)(v62 + 20), BOOL v29 = v64 > 0x28, v65 = (1 << v64) & 0x10004000080, !v29)
                ? (BOOL v66 = v65 == 0)
                : (BOOL v66 = 1),
                  v66))
            {
LABEL_97:
              if ((matched & 0x80000000) != 0) {
                goto LABEL_135;
              }
              break;
            }
            if (v54) {
              unsigned int v82 = (unsigned __int16)(v63 - v57) / v54;
            }
            uint64_t matched = sparser_MatchSb(a1, 1, 0, v84, v83, v42, v82, v49, v92);
            if ((matched & 0x80000000) != 0) {
              goto LABEL_135;
            }
          }
          int v25 = 1;
          unsigned int v32 = (unsigned __int16)v22;
        }
        while (v33 != (unsigned __int16)v22);
LABEL_20:
        uint64_t v27 = sparser_FindNextOrthRegion(v90, v89, v91, &v88, &v87);
        if ((v27 & 0x80000000) != 0)
        {
          unsigned int v22 = v88;
          uint64_t v8 = v27;
          goto LABEL_136;
        }
        unsigned int v17 = v79;
        unsigned int v28 = v88;
        BOOL v29 = v88 > (unsigned __int16)v22 && v91[0] > v80;
        if (v29) {
          unsigned int v26 = v91[0];
        }
        else {
          unsigned int v26 = v88;
        }
        v91[0] = v26;
        int v30 = *(unsigned __int16 *)(v90 + 2);
        BOOL v31 = v79 + v88 * v30 > v78 || v26 >= v88;
        unsigned int v22 = v88;
      }
      while (!v31);
      if (v25 == 1) {
        uint64_t v8 = sparser_CheckForcedSb(a1, v90, v83, (unsigned __int16)(v30 * v88), v89, (unsigned __int16)v87, v85);
      }
      else {
        uint64_t v8 = 0;
      }
      unsigned int v22 = v28;
    }
  }
LABEL_137:
  HIWORD(v87) = v22;
  if ((_WORD)v22 && (unsigned int v76 = *(unsigned __int16 *)(v90 + 16), (unsigned __int16)v22 <= v76))
  {
    if ((unsigned __int16)v22 == v76) {
      HIWORD(v87) = v22 - 1;
    }
    chars_BackScanBlanks(*(void *)(v90 + 8), (_WORD *)&v87 + 1);
    unsigned __int16 v73 = HIWORD(v87);
  }
  else
  {
    unsigned __int16 v73 = v22;
  }
LABEL_122:
  if (v22 != v73) {
    *(_DWORD *)(a1 + 172) = v17 + *(unsigned __int16 *)(v90 + 2) * v73;
  }
  if (v22 >= 5)
  {
    HIWORD(v87) = v22;
    chars_BackScanNChars(*(void *)(v90 + 8), (_WORD *)&v87 + 1, 4);
    unsigned int v74 = v17 + *(unsigned __int16 *)(v90 + 2) * HIWORD(v87);
    goto LABEL_130;
  }
LABEL_129:
  unsigned int v74 = v17 + v22 * *(unsigned __int16 *)(v90 + 2);
LABEL_130:
  *(_DWORD *)(a1 + 168) = v74;
  if (v89) {
    bed_ObjClose(v89);
  }
  return v8;
}

uint64_t sparser_FindNextOrthRegion(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, _WORD *a5)
{
  uint64_t v51 = 0;
  uint64_t result = 2369789959;
  if (a1)
  {
    if (a2)
    {
      unsigned int v10 = *a3;
      unsigned int v11 = *a4;
      int v12 = (unsigned __int16)*a5;
      unsigned int v13 = *(unsigned __int16 *)(a1 + 16);
      *a3 = v13;
      *a4 = v13;
      uint64_t result = bed_GetpBlock(a2, &v51);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = v51;
        unsigned int v15 = (unsigned __int16)*a5;
        LODWORD(v16) = *(unsigned __int16 *)(v51 + 16);
        if (v15 >= v16)
        {
LABEL_45:
          if (v10 == *a3 && v11 == *a4)
          {
LABEL_47:
            uint64_t result = 0;
            unsigned int v50 = *(unsigned __int16 *)(a1 + 16);
            *a3 = v50;
            *a4 = v50;
            return result;
          }
          return 0;
        }
        uint64_t v17 = *(void *)(v51 + 8);
        int v18 = *(_DWORD *)(v17 + 32);
        if (__CFADD__(v18, v11 * *(unsigned __int16 *)(a1 + 2)))
        {
          unint64_t v19 = 0;
          BOOL v21 = 0;
        }
        else
        {
          unsigned int v20 = 0;
          BOOL v21 = 0;
          unsigned int v22 = (unsigned int *)(v17 + 96);
          unint64_t v23 = 1;
          do
          {
            unsigned int v15 = v20;
            unint64_t v19 = v23;
            *a5 = v20;
            if (*(v22 - 19) == 7)
            {
              BOOL v21 = !v21;
              if (*(v22 - 14) != 43) {
                BOOL v21 = 0;
              }
            }
            unint64_t v16 = *(unsigned __int16 *)(v14 + 16);
            if (v23 >= v16) {
              break;
            }
            unsigned int v24 = *v22;
            v22 += 16;
            unsigned int v20 = (unsigned __int16)v23++;
          }
          while (v24 <= v18 + v11 * *(unsigned __int16 *)(a1 + 2));
        }
        if (v21)
        {
          if (v15 < v16)
          {
            int v25 = (int *)(v17 + ((unint64_t)v15 << 6) + 84);
            unint64_t v26 = v15 + 1;
            do
            {
              unsigned int v15 = (unsigned __int16)v26;
              *a5 = v26;
              unint64_t v16 = *(unsigned __int16 *)(v14 + 16);
              if (v26 >= v16) {
                break;
              }
              int v27 = *v25;
              v25 += 16;
              ++v26;
            }
            while (v27 != 7);
          }
          if (v15 >= v16 || *(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 20) != 7) {
            return 0;
          }
        }
        uint64_t v28 = v15;
        LODWORD(v29) = v16;
        if (v15 < v16)
        {
          int v30 = (int *)(v17 + ((unint64_t)v15 << 6) + 84);
          unint64_t v31 = v15 + 1;
          do
          {
            unsigned int v15 = (unsigned __int16)v31;
            *a5 = v31;
            unint64_t v29 = *(unsigned __int16 *)(v14 + 16);
            if (v31 >= v29) {
              break;
            }
            int v32 = *v30;
            v30 += 16;
            ++v31;
          }
          while (v32 != 7);
        }
        int v33 = *(_DWORD *)(v17 + (v28 << 6) + 32);
        int v34 = *(_DWORD *)(v17 + 32);
        unsigned int v35 = v33 - v34;
        unsigned int v36 = *(unsigned __int16 *)(a1 + 2);
        unsigned int v37 = v35 / v36;
        if (v15 >= v29)
        {
          if (v37 == *(unsigned __int16 *)(a1 + 16))
          {
LABEL_44:
            *a3 = v37;
            goto LABEL_45;
          }
        }
        else
        {
          unsigned int v38 = (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 32) - v34) / v36;
          if (v37 == v38)
          {
            BOOL v39 = (_DWORD *)(v17 + (v19 << 6) + 40);
            uint64_t v40 = v17 + 84;
            while (1)
            {
              if (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 20) == 7 && *v39 == 43)
              {
                unint64_t v41 = v15 + 1;
                int v42 = (int *)(v40 + ((unint64_t)v15 << 6));
                do
                {
                  LOWORD(v15) = v41;
                  *a5 = v41;
                  unint64_t v29 = *(unsigned __int16 *)(v14 + 16);
                  if (v41 >= v29) {
                    break;
                  }
                  int v43 = *v42;
                  v42 += 16;
                  ++v41;
                }
                while (v43 != 7);
                if (*(_DWORD *)(v17 + ((unint64_t)(unsigned __int16)v15 << 6) + 20) != 7) {
                  return 0;
                }
                unsigned int v15 = (unsigned __int16)v15;
              }
              uint64_t v44 = v15;
              if (v15 < v29)
              {
                BOOL v45 = (int *)(v40 + ((unint64_t)v15 << 6));
                unint64_t v46 = v15 + 1;
                do
                {
                  unsigned int v15 = (unsigned __int16)v46;
                  *a5 = v46;
                  unint64_t v29 = *(unsigned __int16 *)(v14 + 16);
                  if (v46 >= v29) {
                    break;
                  }
                  int v47 = *v45;
                  v45 += 16;
                  ++v46;
                }
                while (v47 != 7);
              }
              unsigned int v48 = *(unsigned __int16 *)(a1 + 2);
              unsigned int v37 = (*(_DWORD *)(v17 + (v44 << 6) + 32) - v34) / v48;
              if (v15 >= v29) {
                goto LABEL_44;
              }
              unsigned int v49 = (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 32) - v34) / v48;
              if (v37 != v49)
              {
                *a3 = v37;
                *a4 = v49;
                goto LABEL_45;
              }
            }
          }
          *a4 = v38;
        }
        *a3 = v37;
        if (v10 != v37) {
          return 0;
        }
        uint64_t result = 0;
        if (v11 == *a4 && v12 == v15) {
          goto LABEL_47;
        }
      }
    }
  }
  return result;
}

uint64_t sparser_CheckForcedSb(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v98 = 0;
  uint64_t v7 = 2369789959;
  if (a2)
  {
    uint64_t i = a5;
    if (a5)
    {
      uint64_t v12 = a2;
      uint64_t v99 = 0;
      if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v99) & 0x80000000) == 0)
      {
        unsigned __int16 v96 = 0;
        sparser_getMaxCharsPerText(v99, (__int16 *)&v96);
        uint64_t v14 = *(void *)(v12 + 8);
        uint64_t v7 = bed_Goto(i, a6);
        if ((v7 & 0x80000000) == 0)
        {
          unsigned int v97 = 0;
          if (a4)
          {
            unsigned int v15 = 0;
            uint64_t v83 = v14;
            unsigned int v85 = a4 + a3;
            uint64_t v16 = v96;
            uint64_t v86 = i;
            uint64_t v87 = v12;
            uint64_t v84 = a1;
            uint64_t v17 = 0;
            while (1)
            {
              *(void *)&v92[0] = 0;
              uint64_t v18 = bed_GetpBlock(i, v92);
              if ((v18 & 0x80000000) != 0) {
                return v18;
              }
              uint64_t v89 = v17;
              unsigned int v88 = a3;
              uint64_t v19 = *(void *)(*(void *)&v92[0] + 8);
              LOWORD(v95) = v15 / *(unsigned __int16 *)(v12 + 2);
              chars_ScanBlanks(*(void *)(v12 + 8), &v95, *(unsigned __int16 *)(v12 + 16));
              int v20 = *(unsigned __int16 *)(v12 + 2);
              unsigned __int16 v21 = v20 * v95;
              LOWORD(v95) = 0;
              uint64_t v22 = *(unsigned __int16 *)(*(void *)&v92[0] + 16);
              int v23 = v21;
              if (v21)
              {
                if (!*(_WORD *)(*(void *)&v92[0] + 16)) {
                  goto LABEL_28;
                }
                int v24 = *(_DWORD *)(v19 + 32);
                unsigned int v25 = v24 + v23;
                if (!__CFADD__(v24, v23)) {
                  break;
                }
              }
              unsigned int v26 = 0;
LABEL_13:
              if (v26 >= v22) {
                goto LABEL_28;
              }
              int v27 = *(_DWORD *)(v19 + 32);
              uint64_t v28 = v26;
              uint64_t v29 = v19 + ((unint64_t)v26 << 6);
              while (*(_DWORD *)(v29 + 32) == v27
                   || !sparser_marker_IsSentenceBoundary(v29, (char *)(*(void *)(a7 + 8) + *(unsigned int *)(v29 + 40))))
              {
                v29 += 64;
                LOWORD(v95) = ++v28;
                if (v22 == v28) {
                  goto LABEL_28;
                }
              }
              unsigned int v33 = v88;
              if (v27 + v23 <= v88) {
                uint64_t v34 = 0;
              }
              else {
                uint64_t v34 = (unsigned __int16)(v27 + v23 - v88);
              }
              uint64_t v12 = v87;
              uint64_t v38 = (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(v87 + 8) + v34, *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v28 << 6) + 32)- (v34+ v88));
              if (v38 <= v16)
              {
                a3 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v95 << 6) + 32);
LABEL_35:
                uint64_t i = v86;
                uint64_t v17 = v89;
                uint64_t v7 = 0;
                unsigned int v97 = a3;
                goto LABEL_73;
              }
LABEL_29:
              unsigned int v95 = 0;
              v92[0] = 0u;
              v92[1] = 0x200000000uLL;
              long long v93 = 0u;
              long long v94 = 0u;
              LODWORD(v92[0]) = 1;
              *(void *)&long long v93 = 0;
              DWORD2(v94) = 0;
              DWORD2(v93) = 1;
              log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] sentence character count %d is greater than max %d", v35, v36, v37, v38);
              unsigned int v95 = (unsigned __int16)(v16 + v15);
              utf8_GetPreviousValidUtf8Offset(*(void *)(v12 + 8), &v95);
              unsigned int v39 = (unsigned __int16)v95;
              int v40 = Utf8_LengthInUtf8chars(v83 + v15, (unsigned __int16)v95 - v15);
              if (v39 >= a4)
              {
                uint64_t i = v86;
              }
              else
              {
                int v44 = v40;
                for (uint64_t i = v86; v16 > (unsigned __int16)v44; ++v44)
                {
                  v39 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(v83 + (unsigned __int16)v39));
                  if (a4 <= (unsigned __int16)v39) {
                    break;
                  }
                }
              }
              unsigned int v97 = v33 - v15 + (unsigned __int16)v39;
              log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] after resetting to %d characters, position=%d", v41, v42, v43, v16);
              eos_BackScanPhraseBoundary(*(char **)(v84 + 152), v83, v15, v33, &v97);
              uint64_t v48 = v97;
              if (v97 > v85)
              {
                uint64_t v48 = v85;
                unsigned int v97 = v85;
              }
              log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] after scanning back to phrase boundary, position=%d", v45, v46, v47, v48);
              *(void *)&long long v93 = v97;
              uint64_t v7 = bed_GetpBlock(i, &v98);
              uint64_t v17 = v89;
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              uint64_t v52 = *(void *)(v98 + 8);
              uint64_t v53 = *(unsigned __int16 *)(v98 + 16);
              if (*(_WORD *)(v98 + 16))
              {
                uint64_t v54 = 0;
                BOOL v55 = 0;
                unsigned int v56 = (_DWORD *)(v52 + 40);
                do
                {
                  if (*(v56 - 2) > v93) {
                    break;
                  }
                  if (*(v56 - 5) == 7)
                  {
                    BOOL v55 = !v55;
                    uint64_t v17 = *v56 == 43 ? v54 : v17;
                    if (*v56 != 43) {
                      BOOL v55 = 0;
                    }
                  }
                  v56 += 16;
                  ++v54;
                }
                while (v53 != v54);
                if (v55)
                {
                  uint64_t v90 = v17;
                  unsigned __int16 v57 = v17 + 1;
                  log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] position=%d is in a phoneme region", v49, v50, v51, v97);
                  unint64_t v61 = *(unsigned __int16 *)(v98 + 16);
                  if (v61 <= v57) {
                    goto LABEL_68;
                  }
                  unint64_t v62 = v57;
                  unsigned int v63 = (int *)(v52 + ((unint64_t)v57 << 6) + 20);
                  unsigned __int16 v64 = v57;
                  do
                  {
                    int v66 = *v63;
                    v63 += 16;
                    int v65 = v66;
                    if (v66 == 7) {
                      unsigned __int16 v64 = v62;
                    }
                    ++v62;
                  }
                  while (v62 < v61 && v65 != 7);
                  if (v65 != 7)
                  {
LABEL_68:
                    uint64_t v18 = bed_Goto(i, (unsigned __int16)v90);
                    if ((v18 & 0x80000000) != 0) {
                      return v18;
                    }
                    uint64_t v77 = v52 + ((unint64_t)(unsigned __int16)v90 << 6);
                    int v78 = *(_DWORD *)(v77 + 24);
                    LODWORD(v93) = *(_DWORD *)(v77 + 32);
                    log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] didnt find end of phoneme region, hard reset at start of phoneme (marker %d)", v74, v75, v76, (unsigned __int16)v90);
                    uint64_t v18 = sparser_bed_InjectMarker(i, (unsigned int *)v92, 1, *(_DWORD *)(v84 + 188));
                    if ((v18 & 0x80000000) != 0) {
                      return v18;
                    }
                    uint64_t v7 = bed_GetpBlock(i, &v98);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    *(_DWORD *)(*(void *)(v98 + 8) + ((unint64_t)(unsigned __int16)v90 << 6) + 24) = v78;
                    unsigned int v97 = a4;
                    unsigned int v33 = v88;
                    uint64_t v17 = v90;
                    goto LABEL_72;
                  }
                  unsigned int v67 = v64;
                  uint64_t v68 = v64;
                  log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set forced EOS at end of phoneme region (marker %d)", v58, v59, v60, v64);
                  unsigned int v97 = *(_DWORD *)(v52 + (v68 << 6) + 32);
                  LODWORD(v93) = v97;
                  uint64_t v18 = bed_Goto(i, v67);
                  if ((v18 & 0x80000000) != 0) {
                    return v18;
                  }
                  uint64_t v18 = sparser_bed_InjectMarker(i, (unsigned int *)v92, 0, *(_DWORD *)(v84 + 188));
                  uint64_t v7 = 0;
                  unsigned int v33 = v88;
                  uint64_t v17 = v90;
                  goto LABEL_66;
                }
              }
              if (v93 != *(_DWORD *)(v52 + 32))
              {
                do
                  LOWORD(v53) = v53 - 1;
                while ((_WORD)v53
                     && v93 < *(_DWORD *)(v52 + ((unint64_t)(unsigned __int16)v53 << 6) + 36)
                                          + *(_DWORD *)(v52 + ((unint64_t)(unsigned __int16)v53 << 6) + 32));
                unsigned int v73 = (unsigned __int16)v53;
                log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] hard reset at position=%d", v49, v50, v51, v93);
                uint64_t v18 = bed_Goto(i, v73);
                if ((v18 & 0x80000000) != 0) {
                  return v18;
                }
                uint64_t v18 = sparser_bed_InjectMarker(i, (unsigned int *)v92, 0, *(_DWORD *)(v84 + 188));
                uint64_t v7 = 0;
                unsigned int v33 = v88;
LABEL_66:
                if ((v18 & 0x80000000) != 0) {
                  return v18;
                }
                goto LABEL_72;
              }
              log_OutText(*(void *)(*(void *)(v84 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] no hard reset (at start of text)", v49, v50, v51, v81);
LABEL_72:
              log_OutPublic(*(void *)(v99 + 32), (uint64_t)&modPP_1, 1816, 0, v69, v70, v71, v72, v82);
              a3 = v97;
LABEL_73:
              if (a3 - v33 + v15 <= 0xFFFE)
              {
                int v79 = (unsigned __int16)(a3 - v33);
                if (a3 == v33) {
                  int v79 = 1;
                }
                v15 += v79;
                if (v15 < a4) {
                  continue;
                }
              }
              return v7;
            }
            uint64_t v30 = 0;
            unint64_t v31 = (unsigned int *)(v19 + 96);
            while (v22 - 1 != v30)
            {
              ++v30;
              unsigned int v32 = *v31;
              v31 += 16;
              if (v32 > v25)
              {
                unsigned int v26 = (unsigned __int16)v30;
                LOWORD(v95) = v30;
                goto LABEL_13;
              }
            }
            LOWORD(v95) = *(_WORD *)(*(void *)&v92[0] + 16);
LABEL_28:
            uint64_t v12 = v87;
            uint64_t v38 = (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(v87 + 8), *(unsigned __int16 *)(v87 + 16) * v20 - v23);
            unsigned int v33 = v88;
            if (v38 <= v16)
            {
              a3 = v88 + *(unsigned __int16 *)(v87 + 2) * *(unsigned __int16 *)(v87 + 16);
              goto LABEL_35;
            }
            goto LABEL_29;
          }
        }
      }
    }
  }
  return v7;
}

uint64_t sparser_GetTextElement(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, __int16 *a7, _DWORD *a8, _DWORD *a9, uint64_t a10, _WORD *a11, _WORD *a12)
{
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  uint64_t v12 = 2369789959;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  __int16 v167 = 0;
  int v166 = 0;
  if (!a2) {
    return v12;
  }
  int v168 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v174) & 0x80000000) != 0) {
    return v12;
  }
  *a12 = 0;
  *a11 = 0;
  *a8 = 0;
  if (!*(_WORD *)(a1 + 96))
  {
    uint64_t v26 = *(void *)(v174 + 32);
    uint64_t v27 = 1805;
LABEL_8:
    log_OutPublic(v26, (uint64_t)&modPP_1, v27, 0, v21, v22, v23, v24, v152);
    return v12;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1010, 1u, &v173);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v163 = (datac_RequestBlock(a2, 1012, 1u, &v171) & 0x80000000) != 0 ? 0 : *(void *)(v171 + 8);
  uint64_t v25 = datac_RequestBlock(a2, 1011, 1u, &v172);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v161 = *(void *)(v172 + 8);
  __int16 v28 = *(_WORD *)(v172 + 16);
  uint64_t v25 = chars_ScanBlankHead(v173, (unsigned __int16 *)&v168, v172, (_WORD *)&v168 + 1, &v166, 0);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  v160 = a8;
  if (v166 == 1) {
    HIWORD(v168) = v28;
  }
  uint64_t v32 = v172;
  unint64_t v33 = *(unsigned __int16 *)(v172 + 16);
  if (v33 >= 2)
  {
    unsigned int v34 = *(_DWORD *)(v161 + 32) + (unsigned __int16)v168;
    uint64_t v35 = (_DWORD *)(v161 + 104);
    unint64_t v36 = v33 - 1;
    do
    {
      if (*(v35 - 2) > v34) {
        break;
      }
      if (*(v35 - 5) == 20) {
        *a7 = *v35;
      }
      v35 += 16;
      --v36;
    }
    while (v36);
  }
  uint64_t v37 = *a7 - 2;
  if (v37 > 2) {
    uint64_t v38 = (uint64_t (*)())sparser_GetSentenceLength;
  }
  else {
    uint64_t v38 = off_26C21F500[v37];
  }
  uint64_t v39 = v173;
  uint64_t v40 = v171;
  if (v32 && v173 && HIWORD(v168))
  {
    uint64_t v41 = 0;
    uint64_t v42 = *(_DWORD **)(v32 + 8);
    uint64_t v43 = v42;
    while ((v43[5] & 0xFFFFFFFE) != 2 || v43[10] != 1)
    {
      v43 += 16;
      if (-(uint64_t)HIWORD(v168) == --v41) {
        goto LABEL_30;
      }
    }
    unint64_t v52 = -v41;
    unsigned int v44 = (unsigned __int16)-(__int16)v41;
    if ((_WORD)v41)
    {
      unsigned int v53 = v42[16 * (unint64_t)~v41 + 5];
      BOOL v123 = v53 > 0x28;
      uint64_t v54 = (1 << v53) & 0x10024000100;
      if (!v123 && v54 != 0)
      {
        unsigned int v56 = v43[8] - v42[8] / *(unsigned __int16 *)(v173 + 2);
LABEL_54:
        LOWORD(v168) = v56;
        HIWORD(v168) = v44;
        goto LABEL_32;
      }
    }
    if (HIWORD(v168) > v44)
    {
      while (1)
      {
        unsigned int v77 = v43[5];
        BOOL v123 = v77 > 0x28;
        uint64_t v78 = (1 << v77) & 0x10024000100;
        if (!v123 && v78 != 0) {
          break;
        }
        ++v52;
        v43 += 16;
        if (HIWORD(v168) == (unsigned __int16)v52) {
          goto LABEL_30;
        }
      }
      if (HIWORD(v168) > (unsigned __int16)v52)
      {
        long long v156 = v38;
        uint64_t v157 = *(void *)(v171 + 8);
        uint64_t v159 = v173;
        unint64_t v154 = HIWORD(v168);
        uint64_t v155 = v171;
        uint64_t v153 = *(void *)(v32 + 8);
        while (!sparser_marker_IsSentenceBoundary((BOOL)v43, (char *)(v157 + v43[10])))
        {
          v43 += 16;
          ++v52;
          uint64_t v40 = v155;
          uint64_t v38 = v156;
          uint64_t v39 = v159;
          if (v52 >= v154) {
            goto LABEL_30;
          }
        }
        unsigned int v44 = (unsigned __int16)v52;
        LOWORD(v56) = (unsigned __int16)(*(_DWORD *)(v153 + ((unint64_t)(unsigned __int16)v52 << 6) + 32)
                                       - *(_DWORD *)(v153 + 32))
                    / *(_WORD *)(v159 + 2);
        goto LABEL_54;
      }
    }
  }
LABEL_30:
  uint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))v38)(v174, v39, v32, v40, &v168, (char *)&v168 + 2);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  unsigned int v44 = HIWORD(v168);
LABEL_32:
  if (v44 < 2)
  {
    unsigned __int16 v50 = 0;
    LOWORD(v47) = 1;
  }
  else
  {
    int v45 = 0;
    uint64_t v46 = v161 + 64;
    uint64_t v47 = 1;
    while (1)
    {
      int v48 = *(_DWORD *)(v46 + 20);
      int v49 = v48 == 0x4000 ? v45 : v45 + 1;
      if (v48 == 22) {
        break;
      }
      ++v47;
      int v45 = v49 + 1;
      v46 += 64;
      if (v44 == v47)
      {
        unsigned __int16 v50 = 0;
        LOWORD(v47) = v44;
        goto LABEL_60;
      }
    }
    HIWORD(v168) = v47;
    *a5 = 1;
    if ((unsigned __int16)v49 == (unsigned __int16)v47 && *(_DWORD *)(v46 + 32) == *(_DWORD *)(v161 + 32))
    {
      *a6 = 1;
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found immediate voice switch", v29, v30, v31, v152);
      uint64_t v25 = sparser_SetArgAsParamStr(a1, a2, v46, (uint64_t)"pipelineswitchvoice");
      if ((v25 & 0x80000000) != 0) {
        return v25;
      }
      HIWORD(v168) = v49 + 1;
    }
    else
    {
      *a6 = 0;
    }
    if (*(unsigned __int16 *)(v172 + 16) <= (unsigned __int16)v47) {
      unsigned int v51 = *(unsigned __int16 *)(v173 + 16);
    }
    else {
      unsigned int v51 = (unsigned __int16)(*(_DWORD *)(v46 + 32) - *(_DWORD *)(v161 + 32))
    }
          / *(unsigned __int16 *)(v173 + 2);
    if (v51 >= *(unsigned __int16 *)(v173 + 16)) {
      __int16 v57 = *(_WORD *)(v173 + 16);
    }
    else {
      __int16 v57 = v51;
    }
    LOWORD(v168) = v57;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found voice switch (marker %d); adjusted text length to %u, set iMEnd to %d, bImmediateVoiceSwi"
               "tch=%d bEndOnVoiceSwitch=%d",
      v29,
      v30,
      v31,
      v47);
    unsigned __int16 v50 = v47;
  }
LABEL_60:
  if ((unsigned __int16)v168 <= 1u) {
    unsigned int v58 = 1;
  }
  else {
    unsigned int v58 = (unsigned __int16)v168;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1020, v58, &v170);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1021, (unsigned __int16)(HIWORD(v168) + 1), &v169);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  memmove(*(void **)(v170 + 8), *(const void **)(v173 + 8), *(unsigned __int16 *)(v173 + 2) * (unint64_t)(unsigned __int16)v168);
  uint64_t v59 = (unsigned __int16)v168;
  *(_WORD *)(v170 + 16) = v168;
  uint64_t v60 = v173;
  unsigned __int16 v61 = *(_WORD *)(v173 + 16) - v59;
  *(_WORD *)(v173 + 16) = v61;
  memmove(*(void **)(v60 + 8), (const void *)(*(void *)(v60 + 8) + v59), *(unsigned __int16 *)(v60 + 2) * (unint64_t)v61);
  uint64_t v62 = v170;
  *a3 = *(unsigned __int16 *)(v170 + 16);
  uint64_t v63 = v161;
  if (*a5 != 1 || *a6) {
    goto LABEL_67;
  }
  unsigned __int16 v165 = 0;
  __int16 v164 = 0;
  uint64_t v25 = chars_ScanBlankHead(v62, &v165, v169, &v164, &v166, 0);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  if (v165 != *(unsigned __int16 *)(v170 + 16)) {
    goto LABEL_67;
  }
  if (HIWORD(v168) < 2uLL)
  {
LABEL_96:
    *a6 = 1;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found immediate voice switch, due to blank text", v80, v81, v82, v152);
    uint64_t v25 = sparser_SetArgAsParamStr(a1, a2, v161 + ((unint64_t)v50 << 6), (uint64_t)"pipelineswitchvoice");
    if ((v25 & 0x80000000) == 0)
    {
      HIWORD(v168) = v47 + 1;
      goto LABEL_67;
    }
    return v25;
  }
  uint64_t v83 = (unsigned int *)(v161 + 84);
  uint64_t v84 = 1;
  while (1)
  {
    unsigned int v85 = *v83;
    v83 += 16;
    uint64_t v86 = (1 << v85) & 0x1080200084;
    if (v85 > 0x24 || v86 == 0) {
      break;
    }
    if (++v84 >= (unint64_t)HIWORD(v168)) {
      goto LABEL_96;
    }
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] blank text, but non-eos marker found - continue with sentence", v80, v81, v82, v152);
  HIWORD(v168) = v47;
  *a5 = 0;
LABEL_67:
  memmove(*(void **)(v169 + 8), *(const void **)(v172 + 8), (unint64_t)HIWORD(v168) << 6);
  uint64_t v67 = v169;
  unsigned __int16 v68 = HIWORD(v168);
  if (HIWORD(v168))
  {
    unint64_t v69 = 0;
    uint64_t v70 = (const char **)(v161 + 48);
    uint64_t v71 = (char **)(*(void *)(v169 + 8) + 48);
    do
    {
      if (*v70)
      {
        int v72 = (unsigned __int16)strlen(*v70);
        if (v72)
        {
          unsigned int v73 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v72 + 1));
          *uint64_t v71 = v73;
          if (!v73) {
            return 2369789962;
          }
          strcpy(v73, *v70);
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)*v70);
          int *v70 = 0;
          unsigned __int16 v68 = HIWORD(v168);
        }
      }
      ++v69;
      v70 += 8;
      v71 += 8;
    }
    while (v69 < v68);
    uint64_t v67 = v169;
    uint64_t v63 = v161;
  }
  *(_WORD *)(v67 + 16) = v68;
  uint64_t v74 = v173;
  if (*(_DWORD *)(v173 + 20))
  {
    uint64_t v75 = v172;
    if (*(_WORD *)(v173 + 16))
    {
      int v76 = 0;
    }
    else
    {
      int v76 = *(_DWORD *)(v172 + 20);
      if (v76) {
        int v76 = *(unsigned __int16 *)(v172 + 16) == v68;
      }
    }
  }
  else
  {
    int v76 = 0;
    uint64_t v75 = v172;
  }
  int v88 = *(_DWORD *)(v63 + ((unint64_t)v68 << 6) + 24);
  *(_DWORD *)(v170 + 20) = v76;
  *(_DWORD *)(v67 + 20) = v76;
  if (*(unsigned __int16 *)(v75 + 16) <= v68)
  {
    int v89 = *(unsigned __int16 *)(v74 + 2) * (unsigned __int16)v168;
    unsigned int v90 = *(_DWORD *)(v63 + 32) + v89;
    goto LABEL_104;
  }
  int v89 = *(unsigned __int16 *)(v74 + 2) * (unsigned __int16)v168;
  unsigned int v90 = v89 + *(_DWORD *)(v63 + 32);
  unsigned int v91 = *(_DWORD *)(v63 + ((unint64_t)v68 << 6) + 32);
  if (v90 < v91)
  {
LABEL_104:
    *(_DWORD *)(v63 + 24) += v89;
    *(_DWORD *)(v63 + 32) = v90;
    int v158 = 1;
    goto LABEL_105;
  }
  int v158 = 0;
  *(_DWORD *)(v63 + 24) = v88;
  *(_DWORD *)(v63 + 32) = v91;
LABEL_105:
  int v162 = v88;
  if (v68 < 2u)
  {
    unsigned __int16 v94 = 1;
  }
  else
  {
    unsigned __int16 v92 = (int *)(v63 + 84);
    unint64_t v93 = 1;
    unsigned __int16 v94 = 1;
    do
    {
      unsigned int v95 = *v92;
      if (*v92 != 2)
      {
        *a4 += v92[2];
        BOOL v123 = v95 > 0x24;
        uint64_t v96 = (1 << v95) & 0x1080200080;
        if (!v123 && v96 != 0)
        {
          unsigned int ArgOfLastOfType = marker_GetArgOfLastOfType(v63, (unsigned __int16)v93, v68, 1);
          uint64_t v99 = v63;
          int v100 = *v92;
          if (!sparser_marker_IsReadOutControlDefaultArg(*v92, ArgOfLastOfType, v163, *(_DWORD *)(a1 + 180)))
          {
            unint64_t v101 = v99 + ((unint64_t)v94 << 6);
            int v102 = *(_DWORD *)(v99 + 24);
            *(_DWORD *)(v101 + 20) = v100;
            *(_DWORD *)(v101 + 24) = v102;
            unsigned int v103 = *(_DWORD *)(v99 + 32);
            *(_DWORD *)(v101 + 28) = 0;
            *(void *)(v101 + 32) = v103;
            *(_DWORD *)(v101 + 40) = ArgOfLastOfType;
            *(_DWORD *)unint64_t v101 = 1;
            ++v94;
          }
          uint64_t v63 = v99;
        }
      }
      ++v93;
      unsigned __int16 v68 = HIWORD(v168);
      v92 += 16;
    }
    while (v93 < HIWORD(v168));
  }
  if (v94 >= v68)
  {
    unsigned int v106 = v160;
    int v107 = v162;
  }
  else
  {
    uint64_t v104 = v172;
    unsigned __int16 v105 = *(_WORD *)(v172 + 16) + v94 - v68;
    *(_WORD *)(v172 + 16) = v105;
    unsigned int v106 = v160;
    int v107 = v162;
    if (v105 >= 2u)
    {
      memmove((void *)(*(void *)(v104 + 8) + ((unint64_t)v94 << 6)), (const void *)(*(void *)(v104 + 8) + ((unint64_t)v68 << 6)), (v105 - (unint64_t)v94) << 6);
      unsigned __int16 v68 = HIWORD(v168);
    }
  }
  int v108 = *(int **)(v169 + 8);
  unsigned __int16 v109 = v68 - 1;
  if ((unsigned __int16)(v68 - 1) >= 2u)
  {
    unsigned __int16 v109 = v68 - 1;
    int v110 = &v108[16 * (unint64_t)(unsigned __int16)(v68 - 1)];
    v111 = v110;
    while (1)
    {
      int v113 = *v111;
      v111 -= 16;
      int v112 = v113;
      if (v113 != 1 && (v112 || v110[5] != 0x4000)) {
        break;
      }
      --v109;
      int v110 = v111;
      if ((v109 & 0xFFFE) == 0)
      {
        unsigned __int16 v109 = 1;
        break;
      }
    }
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] end marker is pMrk[%d] (iMEnd=%d)", v64, v65, v66, v109);
  uint64_t v114 = HIWORD(v168);
  if (HIWORD(v168))
  {
    int v115 = v108;
    do
    {
      int v116 = *v115;
      v115 += 16;
      if (!v116) {
        ++*a11;
      }
      --v114;
    }
    while (v114);
  }
  int v117 = v108[6];
  int v118 = v107 - v117;
  int v119 = (unsigned __int16)v168;
  uint64_t v120 = v173;
  int v121 = &v108[16 * (unint64_t)v109];
  int v122 = v108[8]
       - v117
       + v121[6]
       + *(unsigned __int16 *)(v173 + 2) * (unsigned __int16)v168
       + v121[7]
       - (v121[8]
        + v121[9]);
  if (v107 - v117 < 0 && v122 < 0)
  {
    uint64_t v26 = *(void *)(v174 + 32);
    uint64_t v27 = 1902;
    goto LABEL_8;
  }
  BOOL v123 = v107 != v117 && v122 < 0;
  if (!v123) {
    int v118 = v108[8]
  }
         - v117
         + v121[6]
         + *(unsigned __int16 *)(v173 + 2) * (unsigned __int16)v168
         + v121[7]
         - (v121[8]
          + v121[9]);
  v108[7] = v118;
  v108[9] = *(unsigned __int16 *)(v120 + 2) * v119;
  LOWORD(v168) = 0;
  uint64_t v124 = v169;
  __int16 v125 = *(_WORD *)(v169 + 16);
  if (!v125)
  {
    int v128 = a12;
    goto LABEL_165;
  }
  unint64_t v126 = 0;
  unsigned __int16 v127 = v108 + 5;
  int v128 = a12;
  do
  {
    uint64_t v129 = v127 - 5;
    if (*v127 == 3)
    {
      if (v127[5] && v127[3] - v108[8] >= v108[9]) {
        goto LABEL_157;
      }
    }
    else if ((*v127 & 0xFFFFFFFE) == 2)
    {
      goto LABEL_157;
    }
    uint64_t v130 = (unsigned __int16)v168;
    int v131 = &v108[16 * (unint64_t)(unsigned __int16)v168];
    long long v132 = *(_OWORD *)(v127 + 3);
    long long v133 = *(_OWORD *)(v127 + 7);
    long long v134 = *(_OWORD *)(v127 - 1);
    *(_OWORD *)int v131 = *v129;
    *((_OWORD *)v131 + 1) = v134;
    *((_OWORD *)v131 + 2) = v132;
    *((_OWORD *)v131 + 3) = v133;
    uint64_t v135 = v131 + 5;
    int v136 = v131[5];
    if (v136 == 3 && !v131[10] || *v127 == 3 && v127[3] - v108[8] < v108[9])
    {
      *uint64_t v135 = 999;
      v108[16 * v130 + 10] = 0;
    }
    else if (v136 == 3)
    {
      *uint64_t v135 = 2;
    }
    LOWORD(v168) = v130 + 1;
LABEL_157:
    if (v127[3] <= v108[8] && *v127 != 0x4000 && !*(_DWORD *)v129)
    {
      *v160 += v127[2];
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] [2] add pMrk[%d].lenRef (tag=%d) to posRefOffset(%d) %d,%d %d,%d", v22, v23, v24, v126);
    }
    ++v126;
    uint64_t v124 = v169;
    v127 += 16;
  }
  while (v126 < *(unsigned __int16 *)(v169 + 16));
  __int16 v125 = v168;
  unsigned int v106 = v160;
LABEL_165:
  *(_WORD *)(v124 + 16) = v125;
  uint64_t v25 = sparser_TrimBlankHead(a1, a2, v106, v128, &v167, a9, a10);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1021, 1u, &v169);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v137 = *(void *)(v169 + 8);
  int v138 = *(_DWORD *)(v137 + 24);
  int v139 = *(_DWORD *)(v137 + 28);
  uint64_t v25 = datac_RequestBlock(a2, 1011, 1u, &v172);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  if (!v158) {
    return 0;
  }
  uint64_t v140 = v172;
  int v141 = *(_DWORD **)(v172 + 8);
  v141[6] = v139 + v138;
  unint64_t v142 = *(unsigned __int16 *)(v140 + 16);
  if (v142 < 2) {
    return 0;
  }
  int v143 = v141 + 24;
  int v144 = v141[8];
  unint64_t v145 = v142 - 1;
  int v146 = v143;
  do
  {
    int v147 = *v146;
    v146 += 16;
    if (v147 == v144)
    {
      unsigned int v148 = *(v143 - 3);
      BOOL v123 = v148 > 0x24;
      uint64_t v149 = (1 << v148) & 0x1080200080;
      if (!v123 && v149 != 0) {
        *(v143 - 2) = v139 + v138;
      }
    }
    uint64_t v12 = 0;
    int v143 = v146;
    --v145;
  }
  while (v145);
  return v12;
}

uint64_t sparser_GetCharacterLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v8 = *a5;
  if (v8 >= *(unsigned __int16 *)(a2 + 16))
  {
    LOWORD(v13) = *(_WORD *)(a3 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(a3 + 8);
    unsigned __int16 v12 = *a5 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + v8));
    *a5 = v12;
    uint64_t v13 = (unsigned __int16)*a6;
    uint64_t v14 = *(unsigned __int16 *)(a3 + 16);
    if (v13 < v14)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 32) + *(unsigned __int16 *)(a2 + 2) * v12;
      uint64_t v16 = (unsigned int *)(v11 + 32 + (v13 << 6));
      while (1)
      {
        unsigned int v17 = *v16;
        v16 += 16;
        if (v17 >= v15) {
          break;
        }
        if (v14 == ++v13)
        {
          LOWORD(v13) = *(_WORD *)(a3 + 16);
          break;
        }
      }
    }
  }
  *a6 = v13;
  return 0;
}

uint64_t sparser_GetWordLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6)
{
  uint64_t v11 = *(void *)(a3 + 8);
  unsigned __int16 v39 = 0;
  int v12 = *a5;
  chars_ScanNonBlanks(*(void *)(a2 + 8), a5, *(unsigned __int16 *)(a2 + 16));
  sparser_getMaxCharsPerText(a1, (__int16 *)&v39);
  unsigned __int16 v13 = Utf8_LengthInUtf8chars(*(void *)(a2 + 8), *a5);
  unsigned int v18 = v39;
  if (v39 >= v13)
  {
    unsigned __int16 v20 = *a5;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)&modPP_1, 1814, 0, v14, v15, v16, v17, v37);
    *a5 = v18;
    unsigned int v38 = v18;
    utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v38);
    if (v38) {
      --v38;
    }
    utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v38);
    uint64_t v19 = (unsigned __int16)v38;
    *a5 = v38;
    unsigned __int16 v20 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + v19));
    *a5 = v20;
    if (*(unsigned __int16 *)(a2 + 16) > v20 && v18 >= 2)
    {
      unsigned int v22 = 1;
      do
      {
        unsigned __int16 v20 = *a5 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + v20));
        *a5 = v20;
        ++v22;
      }
      while (*(unsigned __int16 *)(a2 + 16) > v20 && v22 < v18);
    }
  }
  uint64_t v24 = *(unsigned __int16 *)(a3 + 16);
  if (v12 == v20)
  {
LABEL_18:
    unsigned __int16 v25 = v24;
  }
  else
  {
    if (*(_WORD *)(a3 + 16))
    {
      uint64_t v26 = 0;
      BOOL v27 = 0;
      unsigned __int16 v25 = 0;
      __int16 v28 = (_DWORD *)(v11 + 40);
      do
      {
        if (v27 || *(v28 - 2) - *(_DWORD *)(v11 + 32) >= v20) {
          break;
        }
        if (*(v28 - 5) == 7)
        {
          BOOL v27 = *v28 == 43;
          if (*v28 == 43) {
            unsigned __int16 v25 = v26;
          }
        }
        else
        {
          BOOL v27 = 0;
        }
        v28 += 16;
        ++v26;
      }
      while (v24 != v26);
      if (v27)
      {
        uint64_t v29 = v11 + ((unint64_t)v25 << 6);
        int v30 = *(_DWORD *)(v11 + 32);
        if (*(_WORD *)(v29 + 32) != (_WORD)v30 || *(_DWORD *)(v29 + 20) != 7)
        {
          *a5 = *(_WORD *)(v29 + 32) - v30;
          goto LABEL_42;
        }
        while (1)
        {
          __int16 v31 = v25++;
          if (v24 <= v25) {
            break;
          }
          uint64_t v32 = v11 + ((unint64_t)v25 << 6);
          if (*(_DWORD *)(v32 + 20) == 7)
          {
            *a5 = *(_DWORD *)(v32 + 32) - v30;
            *a6 = v31 + 2;
            LODWORD(v24) = *(unsigned __int16 *)(a3 + 16);
            break;
          }
        }
      }
    }
    uint64_t v33 = *a6;
    unsigned __int16 v25 = *a6;
    if (v33 < v24)
    {
      unsigned int v34 = (unsigned int *)(v11 + 32 + (v33 << 6));
      while (1)
      {
        unsigned int v35 = *v34;
        v34 += 16;
        if (v35 >= *(_DWORD *)(v11 + 32) + *(unsigned __int16 *)(a2 + 2) * *a5) {
          break;
        }
        if (v24 == ++v33) {
          goto LABEL_18;
        }
      }
      unsigned __int16 v25 = v33;
    }
  }
LABEL_42:
  *a6 = v25;
  return 0;
}

uint64_t sparser_GetLineLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v11 = *(void *)(a3 + 8);
  unsigned __int16 v47 = 0;
  int v12 = *a5;
  chars_ScanForLineEnd(*(void *)(a2 + 8), a5, *(unsigned __int16 *)(a2 + 16));
  sparser_getMaxCharsPerText(a1, (__int16 *)&v47);
  unsigned __int16 v13 = Utf8_LengthInUtf8chars(*(void *)(a2 + 8), *a5);
  unsigned int v14 = v47;
  if (v47 < v13)
  {
    uint64_t v15 = a6;
    *a5 = v47;
    unsigned int v16 = v14;
    if (v14 == *(unsigned __int16 *)(a2 + 16))
    {
      *a5 = v14 - 1;
      unsigned int v16 = (unsigned __int16)(v14 - 1);
    }
    unsigned int v46 = v16;
    utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v46);
    int v17 = (unsigned __int16)v46;
    *a5 = v46;
    unsigned __int16 v18 = Utf8_LengthInUtf8chars(*(void *)(a2 + 8), v17);
    unsigned int v19 = *a5;
    if (v19 < *(unsigned __int16 *)(a2 + 16))
    {
      for (unsigned __int16 i = v18; v14 > i; ++i)
      {
        LOWORD(v19) = *a5
                    + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + (unsigned __int16)v19));
        *a5 = v19;
        if (*(unsigned __int16 *)(a2 + 16) <= (unsigned __int16)v19) {
          break;
        }
      }
    }
    chars_BackScanToBlank(*(void *)(a2 + 8), a5);
    unsigned __int16 v25 = *a5;
    if (!*a5)
    {
      *a5 = v19;
      unsigned __int16 v25 = v19;
    }
    a6 = v15;
    if (*(_WORD *)(a3 + 16))
    {
      uint64_t v26 = 0;
      BOOL v27 = 0;
      unsigned __int16 v28 = 0;
      uint64_t v29 = (_DWORD *)(v11 + 40);
      do
      {
        if (*(v29 - 2) - *(_DWORD *)(v11 + 32) > v25) {
          break;
        }
        if (*(v29 - 5) == 7)
        {
          BOOL v27 = !v27;
          if (*v29 == 43) {
            unsigned __int16 v28 = v26;
          }
          else {
            BOOL v27 = 0;
          }
        }
        v29 += 16;
        ++v26;
      }
      while (*(unsigned __int16 *)(a3 + 16) != v26);
      if (v27) {
        *a5 = *(_WORD *)(v11 + ((unint64_t)v28 << 6) + 32) - *(_WORD *)(v11 + 32);
      }
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)&modPP_1, 1815, 0, v21, v22, v23, v24, v42);
  }
  int v30 = *a5;
  if (v12 == v30)
  {
    LOWORD(v31) = *(_WORD *)(a3 + 16);
  }
  else
  {
    uint64_t v31 = (unsigned __int16)*a6;
    uint64_t v32 = *(unsigned __int16 *)(a3 + 16);
    if (v31 < v32)
    {
      unsigned int v44 = a6;
      int v33 = *(_DWORD *)(v11 + 32);
      unsigned int v43 = *(unsigned __int16 *)(a2 + 2);
      unsigned int v34 = v43 * v30;
      unsigned int v35 = v43 * v30 + v33;
      unint64_t v36 = (_DWORD *)(v11 + (v31 << 6));
      while (1)
      {
        unsigned int v37 = v36[8];
        if (v37 >= v35) {
          break;
        }
        if (v34 >= (unsigned __int16)(v37 - v33))
        {
          uint64_t v38 = v36[10];
          if (sparser_marker_IsSentenceBoundary((BOOL)v36, (char *)(*(void *)(a4 + 8) + v38)))
          {
            BOOL v39 = v38 == 1 && (v36[5] & 0xFFFFFFFE) == 2;
            BOOL v40 = v39;
            if (v37 != v33 && !v40)
            {
              *a5 = (unsigned __int16)(v37 - v33) / v43;
              break;
            }
          }
        }
        ++v31;
        v36 += 16;
        if (v32 == v31)
        {
          LOWORD(v31) = v32;
          break;
        }
      }
      a6 = v44;
    }
  }
  *a6 = v31;
  return 0;
}

uint64_t sparser_GetSentenceLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, unsigned __int16 *a6)
{
  unint64_t v6 = a6;
  uint64_t v11 = *(void *)(a3 + 8);
  unint64_t v12 = *a6;
  unsigned int v13 = *(unsigned __int16 *)(a3 + 16);
  if (v12 < v13)
  {
    int v14 = *(_DWORD *)(v11 + 32);
    unsigned int v15 = *(unsigned __int16 *)(a2 + 2) * (unsigned __int16)*a5;
    uint64_t v16 = v11 + (v12 << 6);
    while (v15 >= (unsigned __int16)(*(_WORD *)(v16 + 32) - v14)
         || !sparser_marker_IsSentenceBoundary(v16, (char *)(*(void *)(a4 + 8) + *(unsigned int *)(v16 + 40))))
    {
      v16 += 64;
      LOWORD(v12) = v12 + 1;
      if (v13 == (unsigned __int16)v12)
      {
        LOWORD(v12) = v13;
        unint64_t v6 = a6;
        goto LABEL_17;
      }
    }
    LODWORD(v12) = (unsigned __int16)v12;
    unint64_t v6 = a6;
  }
  if (v12 < v13)
  {
    unint64_t v12 = v12;
    uint64_t v17 = v11 + ((unint64_t)v12 << 6);
    do
    {
      int v18 = *(_DWORD *)(v17 + 32) - *(_DWORD *)(v11 + 32);
      if (*(unsigned __int16 *)(a2 + 2) * (unsigned __int16)*a5 < (unsigned __int16)(*(_WORD *)(v17 + 32)
                                                                                                  - *(_WORD *)(v11 + 32))
        && sparser_marker_IsSentenceBoundary(v17, (char *)(*(void *)(a4 + 8) + *(unsigned int *)(v17 + 40))))
      {
        int IsSuppressedSentenceBoundary = sparser_IsSuppressedSentenceBoundary(a3, a2, v18);
        unsigned int v13 = *(unsigned __int16 *)(a3 + 16);
        if (!IsSuppressedSentenceBoundary) {
          break;
        }
      }
      v17 += 64;
      ++v12;
    }
    while (v12 < v13);
    LODWORD(v12) = (unsigned __int16)v12;
  }
  if (v12 >= v13) {
LABEL_17:
  }
    __int16 v20 = *(_WORD *)(a2 + 16);
  else {
    __int16 v20 = (unsigned __int16)(*(_DWORD *)(v11 + ((unint64_t)v12 << 6) + 32) - *(_DWORD *)(v11 + 32))
  }
        / *(_WORD *)(a2 + 2);
  *a5 = v20;
  *unint64_t v6 = v12;
  return 0;
}

uint64_t sparser_SetArgAsParamStr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 2369789959;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v16) & 0x80000000) == 0
    && (datac_RequestBlock(a2, 1012, 1u, &v15) & 0x80000000) == 0)
  {
    size_t v8 = (unsigned __int16)strlen((const char *)(*(void *)(v15 + 8) + *(unsigned int *)(a3 + 40)));
    uint64_t v9 = (char *)heap_Calloc(*(void **)(v16 + 8), 1, v8 + 1);
    if (v9)
    {
      unsigned int v10 = v9;
      strncpy(v9, (const char *)(*(void *)(v15 + 8) + *(unsigned int *)(a3 + 40)), v8)[v8] = 0;
      uint64_t v7 = paramc_ParamSetStr(*(void *)(v16 + 40), a4, v10);
      if ((v7 & 0x80000000) == 0) {
        log_OutText(*(void *)(v16 + 32), (uint64_t)&modPP_1, 4, 0, (uint64_t)"[SPARSER] SET PARAM marker:%d param=%s val=%s", v11, v12, v13, *(unsigned int *)(a3 + 20));
      }
      heap_Free(*(void **)(v16 + 8), (uint64_t)v10);
    }
    else
    {
      return 2369789962;
    }
  }
  return v7;
}

BOOL sparser_marker_IsReadOutControlDefaultArg(int a1, unsigned int a2, uint64_t a3, int a4)
{
  BOOL result = 0;
  if (a1 > 30)
  {
    if (a1 != 31)
    {
      if (a1 != 36) {
        return result;
      }
      return a3 && strcmp((const char *)(a3 + a2), "normal") == 0;
    }
    return a2 == a4;
  }
  else
  {
    if (a1 != 7)
    {
      if (a1 != 21) {
        return result;
      }
      return a3 && strcmp((const char *)(a3 + a2), "normal") == 0;
    }
    return a2 == 15;
  }
}

uint64_t sparser_TrimBlankHead(uint64_t a1, uint64_t a2, _DWORD *a3, _WORD *a4, _WORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v9 = a5;
  unsigned int v10 = a4;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  int v116 = 0;
  int v117 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *(_DWORD *)(a7 + 20) = 0;
  uint64_t result = datac_RequestBlock(a2, 1020, 1u, &v123);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = datac_RequestBlock(a2, 1021, 1u, &v122);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = chars_ScanBlankHead(v123, (unsigned __int16 *)&v117 + 1, v122, &v117, &v116, 0);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = datac_RequestBlock(a2, 1021, 1u, &v122);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v114 = a3;
  uint64_t v115 = a1;
  int v18 = *(_DWORD **)(v122 + 8);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] got %d (byte) blanks, but do they bisect markers?", v15, v16, v17, *(unsigned __int16 *)(v123 + 2) * HIWORD(v117));
  if (v116)
  {
    int v22 = 1;
  }
  else
  {
    unsigned __int16 v40 = 0;
    int v112 = v18[8];
    v111 = v18 + 8;
    uint64_t v41 = v122;
    int v22 = 1;
    do
    {
      unsigned int v42 = *(unsigned __int16 *)(v41 + 16);
      if (v40 >= v42) {
        break;
      }
      unsigned int v43 = v18[16 * (unint64_t)v40 + 5];
      BOOL v44 = v43 > 0x24 || ((1 << v43) & 0x1080300080) == 0;
      if (v44
        || v18[16 * (unint64_t)v40]
        || (unsigned int v45 = v18[16 * (unint64_t)v40 + 8],
            unsigned int v46 = v18[8],
            unsigned int v47 = *(unsigned __int16 *)(v123 + 2),
            int v48 = v47 * HIWORD(v117),
            v45 >= v48 + v46))
      {
        int v55 = 0;
      }
      else
      {
        if (v42 <= (unsigned __int16)(v40 + 1))
        {
          uint64_t v113 = v40;
          unsigned __int16 v51 = v40;
        }
        else
        {
          unsigned __int16 v49 = v40 + 1;
          unsigned __int16 v50 = &v111[16 * (unint64_t)(unsigned __int16)(v40 + 1)];
          unsigned __int16 v51 = v40;
          do
          {
            unsigned int v52 = *(v50 - 3);
            if (v52 <= 0x24 && ((1 << v52) & 0x1080300080) != 0)
            {
              BOOL v54 = v52 == v43 && *(v50 - 8) == 0;
              if (v54 && *v50 < v48 + v46) {
                unsigned __int16 v51 = v49;
              }
            }
            ++v49;
            v50 += 16;
          }
          while (v42 != v49);
          uint64_t v113 = v51;
          unsigned int v45 = v18[16 * (unint64_t)v51 + 8];
        }
        if (v45 < v46 || (v45 - v46) / v47 >= HIWORD(v117))
        {
          if (v18[16 * (unint64_t)v40 + 6] - v18[6] == v48)
          {
            log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] reset to reference region at marker %d", v19, v20, v21, v40);
            int v22 = 0;
            int v84 = *(unsigned __int16 *)(v123 + 2) * HIWORD(v117);
            int v85 = v18[7] - v84;
            v18[6] += v84;
            v18[7] = v85;
            LOWORD(v117) = v40;
            uint64_t v41 = v122;
          }
        }
        else
        {
          unsigned int v56 = &v18[16 * v113];
          unsigned __int16 v109 = v9;
          int v110 = v56 + 2;
          LOWORD(v117) = v51;
          long long v57 = v56[3];
          long long v59 = *v56;
          long long v58 = v56[1];
          *(_OWORD *)(v7 + 32) = v56[2];
          *(_OWORD *)(v7 + 48) = v57;
          *(_OWORD *)uint64_t v7 = v59;
          *(_OWORD *)(v7 + 16) = v58;
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] hard reference reset at marker %d", v19, v20, v21, v51);
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] reset to reference region at marker %d", v60, v61, v62, v51);
          uint64_t v63 = &v18[16 * v113];
          int v64 = v63[6];
          v63 += 6;
          uint64_t v65 = (v64 - v18[6]);
          *a6 = v65;
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set refReset(%d) due to readout control marker %d", v66, v67, v68, v65);
          int v69 = v18[7] - *v63 + v18[6];
          v18[6] = *v63;
          v18[7] = v69;
          int v108 = v63;
          uint64_t v70 = v63[1]
              + (HIWORD(v117) - (*v110 - v18[8]) / *(unsigned __int16 *)(v123 + 2))
              * *(unsigned __int16 *)(v123 + 2);
          _DWORD *v114 = v70;
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set posRefOffset(%d) due to readout control marker %d", v71, v72, v73, v70);
          uint64_t v41 = v122;
          if (*(unsigned __int16 *)(v122 + 16) > (unsigned __int16)(v51 + 1))
          {
            unint64_t v74 = (unsigned __int16)(v51 + 1);
            uint64_t v75 = &v111[16 * v74];
            int v76 = v112;
            unsigned int v77 = v108;
            do
            {
              if ((*(v75 - 3) == 999 || !*(v75 - 8))
                && *v75 <= v76 + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
                && *(v75 - 2) >= *v77)
              {
                uint64_t v78 = (*v114 + *(v75 - 1));
                _DWORD *v114 = v78;
                uint64_t v79 = v7;
                uint64_t v80 = v10;
                uint64_t v81 = v77;
                log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set posRefOffset(%d) due to marker %d", v19, v20, v21, v78);
                unsigned int v77 = v81;
                unsigned int v10 = v80;
                uint64_t v7 = v79;
                int v76 = v112;
                uint64_t v41 = v122;
              }
              ++v74;
              v75 += 16;
            }
            while (v74 < *(unsigned __int16 *)(v41 + 16));
          }
          if (v51 < 2u)
          {
            int v22 = 0;
            uint64_t v9 = v109;
          }
          else
          {
            uint64_t v82 = v113 - 1;
            uint64_t v83 = v18 + 21;
            uint64_t v9 = v109;
            do
            {
              if (*v83 == 999) {
                *uint64_t v83 = 0x4000;
              }
              v83 += 16;
              --v82;
            }
            while (v82);
            int v22 = 0;
          }
        }
        unsigned __int16 v40 = *(_WORD *)(v41 + 16);
        int v55 = v116;
      }
      ++v40;
    }
    while (!v55);
  }
  uint64_t v23 = HIWORD(v117);
  if (!HIWORD(v117) && !*(_DWORD *)(v7 + 20)) {
    return 0;
  }
  int v24 = v22;
  uint64_t v25 = v123;
  unsigned __int16 v26 = *(_WORD *)(v123 + 16) - HIWORD(v117);
  *(_WORD *)(v123 + 16) = v26;
  memmove(*(void **)(v25 + 8), (const void *)(*(void *)(v25 + 8) + v23), *(unsigned __int16 *)(v25 + 2) * (unint64_t)v26);
  uint64_t result = datac_RequestBlock(a2, 1021, (unsigned __int16)(*(_WORD *)(v122 + 16) + 1), &v122);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v27 = v122;
  unsigned __int16 v28 = *(long long **)(v122 + 8);
  uint64_t v29 = (unsigned __int16)v117;
  if ((unsigned __int16)v117 == 1)
  {
    long long v30 = v28[1];
    long long v118 = *v28;
    long long v119 = v30;
    long long v31 = v28[3];
    long long v120 = v28[2];
    long long v121 = v31;
    *((_DWORD *)v28 + 7) = 0;
    *((_DWORD *)v28 + 9) = 0;
  }
  int v32 = *((_DWORD *)v28 + 8);
  int v33 = *((_DWORD *)v28 + 6);
  unsigned int v34 = v32
      - v33
      + *((_DWORD *)&v28[4 * v29 - 2] - 2)
      + *((_DWORD *)&v28[4 * v29 - 2] - 1)
      + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
      - (LODWORD(v28[4 * v29 - 2])
       + *((_DWORD *)&v28[4 * v29 - 1] - 3));
  if (v29 == 1)
  {
    long long v35 = v119;
    *unsigned __int16 v28 = v118;
    v28[1] = v35;
    long long v36 = v121;
    v28[2] = v120;
    v28[3] = v36;
  }
  unint64_t v37 = *(unsigned __int16 *)(v27 + 16);
  if (v37 < 2)
  {
    LOWORD(i) = 1;
  }
  else
  {
    uint64_t v38 = (_DWORD *)v28 + 25;
    for (unint64_t i = 1; i < v37; ++i)
    {
      if (v32 != *(v38 - 1)) {
        break;
      }
      if (*v38) {
        break;
      }
      if (v33 != *(v38 - 3)) {
        break;
      }
      if (v34 <= *(v38 - 2)) {
        break;
      }
      v38 += 16;
    }
  }
  LOWORD(v117) = i;
  memmove(&v28[4 * (unint64_t)(unsigned __int16)i + 4], &v28[4 * (unint64_t)(unsigned __int16)i], (v37 - (unsigned __int16)i) << 6);
  int v89 = &v28[4 * (unint64_t)(unsigned __int16)v117];
  *(void *)int v89 = 0;
  *((void *)v89 + 1) = 0;
  *((void *)v89 + 2) = 0x400000000000;
  *((_DWORD *)v89 + 6) = v33;
  *((_DWORD *)v89 + 7) = v34;
  *((_DWORD *)v89 + 8) = v32;
  *(void *)((char *)v89 + 36) = 0;
  *(void *)((char *)v89 + 52) = 0;
  *(void *)((char *)v89 + 44) = 0;
  *((_DWORD *)v89 + 15) = 0;
  uint64_t v90 = v122;
  uint64_t v91 = v123;
  ++*(_WORD *)(v122 + 16);
  int v92 = HIWORD(v117);
  _WORD *v10 = *(_WORD *)(v91 + 2) * HIWORD(v117);
  if (v24 == 1)
  {
    log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] add blanks (%d) to posRefOffset(%d)", v86, v87, v88, *(unsigned __int16 *)(v91 + 2) * v92);
    int v92 = HIWORD(v117);
    uint64_t v91 = v123;
    *v114 += *(unsigned __int16 *)(v123 + 2) * HIWORD(v117);
    uint64_t v90 = v122;
  }
  if (*(_DWORD *)(v7 + 20))
  {
    unsigned int v93 = *(unsigned __int16 *)(v90 + 16);
  }
  else
  {
    LOWORD(v117) = 1;
    if (*(unsigned __int16 *)(v90 + 16) < 2u) {
      goto LABEL_90;
    }
    unsigned __int16 v94 = 1;
    do
    {
      unsigned int v95 = &v28[4 * (unint64_t)v94];
      unsigned int v96 = *((_DWORD *)v95 + 8);
      unsigned int v97 = *((_DWORD *)v28 + 8);
      if (v96 > v97
        && v96 <= v97 + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
        && DWORD1(v28[4 * (unint64_t)v94 + 1]) != 0x4000
        && !*(_DWORD *)v95)
      {
        log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] adjust posRefOffset(%d) by %d for leading esc sequences (marker tag=%d %d,%d,%d,%d)", v86, v87, v88, *v114);
        unsigned __int16 v94 = v117;
        uint64_t v98 = &v28[4 * (unint64_t)(unsigned __int16)v117];
        *v114 += *((_DWORD *)v98 + 7);
        *v9 += *((_WORD *)v98 + 14);
        uint64_t v90 = v122;
      }
      LOWORD(v117) = ++v94;
      unsigned int v93 = *(unsigned __int16 *)(v90 + 16);
    }
    while (v93 > v94);
    int v92 = HIWORD(v117);
    uint64_t v91 = v123;
  }
  if (v93 > 1)
  {
    unsigned int v99 = *(unsigned __int16 *)(v91 + 2) * v92;
    uint64_t v100 = v93;
    unsigned int v101 = *((_DWORD *)v28 + 8);
    int v102 = v28 + 6;
    uint64_t v103 = v100 - 1;
    do
    {
      if (*v102 >= v99 + v101) {
        unsigned int v104 = *v102 - v99;
      }
      else {
        unsigned int v104 = v101;
      }
      *int v102 = v104;
      v102 += 16;
      --v103;
    }
    while (v103);
    goto LABEL_91;
  }
LABEL_90:
  unsigned int v99 = *(unsigned __int16 *)(v91 + 2) * v92;
LABEL_91:
  uint64_t result = 0;
  unsigned int v105 = *((_DWORD *)v28 + 9);
  BOOL v106 = v105 >= v99;
  unsigned int v107 = v105 - v99;
  if (!v106) {
    unsigned int v107 = 0;
  }
  *((_DWORD *)v28 + 9) = v107;
  return result;
}

uint64_t sparser_ProcessStart(uint64_t a1, int a2)
{
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) != 0) {
    return 2369789959;
  }
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 180) = a2;
  *(_WORD *)(a1 + 184) = 200;
  uint64_t UInt = paramc_ParamGetUInt(*(void *)(v12 + 40), (uint64_t)"ppmaxmarkersinemptytext", &v11);
  uint64_t result = 0;
  if ((UInt & 0x1FFF) != 0x14)
  {
    if ((UInt & 0x80000000) == 0)
    {
      if (v11 - 1 > 0xFFFD) {
        log_OutPublic(*(void *)(v12 + 32), (uint64_t)&modPP_1, 1820, 0, v4, v5, v6, v7, v10);
      }
      else {
        *(_WORD *)(a1 + 184) = v11;
      }
    }
    return UInt;
  }
  return result;
}

uint64_t sparser_GetScanPosition(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sparser_bed_MapPosCur(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v15 = 0;
  if (!a3) {
    return 2369789959;
  }
  unsigned __int16 v14 = 0;
  *a3 = a2;
  LODWORD(result) = bed_GetpElem(a1, 0, &v15);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 0xF) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    uint64_t result = bed_GetcElem(a1, &v14);
    if ((result & 0x80000000) == 0)
    {
      if (!v14) {
        return 0;
      }
      unsigned int v7 = 0;
      size_t v8 = 0;
      do
      {
        uint64_t v9 = (_DWORD *)(v15 + ((unint64_t)v7 << 6));
        unsigned int v10 = v9[8];
        if (v10 > a2) {
          break;
        }
        BOOL v11 = *v9 == 1 && v7 == 0;
        if (v11 || *v9 == 0)
        {
          unsigned int v13 = *(_DWORD *)(v15 + ((unint64_t)v7 << 6) + 36) + v10;
          if (v13 <= a2 && (!v8 || v8[9] + v8[8] <= v13)) {
            size_t v8 = (_DWORD *)(v15 + ((unint64_t)v7 << 6));
          }
        }
        ++v7;
      }
      while (v7 < v14);
      if (v8)
      {
        uint64_t result = 0;
        *a3 += v8[7] + v8[6] - (v8[8] + v8[9]);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sparser_marker_HasGreaterEqualPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 32) <= *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

BOOL sparser_marker_HasStrictlyGreaterPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 32) < *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

BOOL sparser_marker_IsSentenceBoundary(BOOL result, char *__s1)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result + 20);
    if ((v2 & 0xFFFFFFFE) == 2 && *(_DWORD *)(result + 40) == 1) {
      return 1;
    }
    BOOL v3 = v2 == 12 || v2 == 20;
    return v3 || v2 == 36 && !strcmp(__s1, "vceunkn") || v2 == 200;
  }
  return result;
}

uint64_t sparser_IsSuppressedSentenceBoundary(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    __int16 v7 = *(_WORD *)(a2 + 2);
    __int16 v14 = a3;
    chars_BackScanNChars(*(void *)(a2 + 8), &v14, 1);
    chars_BackScanBlanksX(*(void *)(a2 + 8), &v14, (unsigned __int16)(*(_WORD *)(a2 + 16) * v7));
    chars_ScanNChars(*(void *)(a2 + 8), (unsigned __int16)(*(_WORD *)(a2 + 16) * v7), &v14, 1);
    __int16 v13 = v14;
    chars_ScanBlanks(*(void *)(a2 + 8), &v13, (unsigned __int16)(*(_WORD *)(a2 + 16) * v7));
    uint64_t v8 = *(unsigned __int16 *)(a1 + 16) + 1;
    uint64_t v9 = (_DWORD *)(v6 + 40);
    while (--v8)
    {
      unsigned int v10 = (unsigned __int16)(*(v9 - 2) - *(_DWORD *)(v6 + 32));
      if (v10 > (unsigned __int16)(v13 * v7)) {
        break;
      }
      if (*(v9 - 5) == 3)
      {
        if (*v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v10 >= (unsigned __int16)(v14 * v7);
        }
        int v12 = v11;
      }
      else
      {
        int v12 = 0;
      }
      v9 += 16;
      if (v12) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sparser_marker_IsOfSameType(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
    }
  }
  return result;
}

uint64_t sparser_MatchSb(uint64_t a1, int a2, int a3, uint64_t a4, int a5, __int16 a6, __int16 a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v90 = 0;
  v86[0] = 0u;
  long long v89 = 0u;
  LODWORD(v86[0]) = 1;
  v86[1] = 0x200000000uLL;
  uint64_t v87 = 0;
  DWORD2(v89) = 0;
  uint64_t v88 = 1;
  uint64_t v12 = 136;
  if (!a2) {
    uint64_t v12 = 120;
  }
  uint64_t v13 = 144;
  if (!a2) {
    uint64_t v13 = 128;
  }
  uint64_t v14 = *(unsigned __int16 *)(a1 + v13);
  uint64_t v83 = *(void *)(a1 + v12);
  uint64_t v15 = *(char **)(a4 + 8);
  __int16 v16 = *(_WORD *)(a4 + 2);
  unsigned int v78 = bed_GetpBlock(a8, &v90);
  if ((v78 & 0x80000000) == 0 && v14)
  {
    uint64_t v17 = 0;
    unsigned __int16 v85 = v16 * a7;
    int v82 = (unsigned __int16)(v16 * a7);
    uint64_t v81 = v14;
    int v79 = a5;
    do
    {
      unsigned int v78 = bed_Goto(a8, a9);
      if ((v78 & 0x80000000) != 0) {
        return v78;
      }
      uint64_t v84 = *(void *)(a1 + 112)
          + *(unsigned int *)(*(void *)(a1 + 104) + 8 * *(unsigned __int16 *)(v83 + 2 * v17));
      LOWORD(v18) = *(_WORD *)(a4 + 2) * a6;
      int v19 = a3;
      while ((unsigned __int16)v18 < v85
           && (nuance_pcre_exec(*(void **)(a1 + 24), *(void *)(a1 + 32), v84, 0, v15, v82, (unsigned __int16)v18, 0, &v95, 30) & 0x80000000) == 0)
      {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] regex %d matched at pos %u (iSb=%d) %s %d : (of %d)", v20, v21, v22, *(unsigned __int16 *)(v83 + 2 * v17));
        unsigned int v26 = *(unsigned __int8 *)(*(void *)(a1 + 104) + 8 * *(unsigned __int16 *)(v83 + 2 * v17) + 4);
        if (v26 > 0xFD)
        {
          int v29 = 0;
          LOWORD(v18) = v96;
          if (v26 == 255) {
            int v28 = v96 + a5;
          }
          else {
            int v28 = v95 + a5;
          }
          LODWORD(v87) = v28;
        }
        else
        {
          int v27 = *(&v95 + 2 * v26);
          LOWORD(v28) = v27 + a5;
          LODWORD(v87) = v27 + a5;
          int v18 = *(&v95 + ((2 * v26) | 1u));
          int v29 = v18 - v27;
        }
        HIDWORD(v87) = v29;
        if (!v15) {
          goto LABEL_66;
        }
        __int16 v30 = v28 - a5;
        unsigned int v31 = (unsigned __int16)(v28 - a5);
        if (v31 >= v85) {
          goto LABEL_66;
        }
        uint64_t v32 = v90;
        unsigned __int16 v93 = v28 - a5;
        if (!*(void *)(a1 + 40)) {
          goto LABEL_29;
        }
        chars_BackScanNChars((uint64_t)v15, &v93, 1);
        chars_BackScanBlanksX((uint64_t)v15, &v93, v85);
        if (!v93) {
          goto LABEL_29;
        }
        unsigned __int16 v94 = 0;
        if (!utf8_Utf8CharTo16bit((unsigned __int8 *)&v15[v93], (uint64_t)&v94)
          || v94 != 65294 && v94 != 46)
        {
          goto LABEL_29;
        }
        unsigned int v92 = v93;
        int v33 = *(unsigned __int8 **)(a1 + 64);
        unsigned int v34 = *(unsigned __int16 *)(a1 + 72);
        if (*(_DWORD *)(a1 + 160) == 1) {
          chars_BackScanNonBlanks((uint64_t)v15, &v92, v33, v34);
        }
        else {
          chars_BackScan2NonBlanksNonChinese((uint64_t)v15, &v92, v33, v34);
        }
        uint64_t v35 = v92;
        unsigned int v36 = v93 - v92;
        if (v36 > 0x3E) {
          goto LABEL_29;
        }
        unsigned int v57 = v36 + 1;
        int v73 = v93;
        __memcpy_chk();
        unsigned int v76 = v57;
        v98[v57] = 0;
        unsigned int LogLevel = log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32));
        if (sparser_IsNonFinalAbbr((void *)a1, (uint64_t)v98, v35, (v73 + 1), LogLevel, v59, v60, v61))
        {
          a5 = v79;
          int v19 = a3;
          goto LABEL_66;
        }
        unsigned __int16 v91 = v93 - v92 + 1;
        chars_BackScanNChars((uint64_t)v98, &v91, 1);
        v97[0] = 6105691;
        if (v91)
        {
          do
          {
            chars_BackScanNChars((uint64_t)v98, &v91, 1);
            int v62 = v91;
            unsigned int v63 = v76 - v91;
            __memcpy_chk();
            *((unsigned char *)v97 + v63 + 3) = 0;
            uint64_t v64 = v92 + v62;
            uint64_t v65 = v93 + 1;
            unsigned int v66 = log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32));
            int IsNonFinalAbbr = sparser_IsNonFinalAbbr((void *)a1, (uint64_t)v97, v64, v65, v66, v67, v68, v69);
          }
          while (v91 && !IsNonFinalAbbr);
          a5 = v79;
          int v19 = a3;
          if (IsNonFinalAbbr) {
            goto LABEL_66;
          }
        }
        else
        {
LABEL_29:
          a5 = v79;
          int v19 = a3;
        }
        uint64_t v37 = *(void *)(v32 + 8);
        uint64_t v38 = *(unsigned __int16 *)(v32 + 16);
        if (!*(_WORD *)(v32 + 16))
        {
          unsigned __int16 v48 = 0;
          goto LABEL_48;
        }
        BOOL v39 = 0;
        BOOL v40 = 0;
        uint64_t v41 = (int *)(v37 + 32);
        int v42 = *(_DWORD *)(v37 + 32);
        unsigned int v43 = (_DWORD *)(v37 + 40);
        uint64_t v44 = *(unsigned __int16 *)(v32 + 16);
        do
        {
          if (*(v43 - 2) - v42 > v31) {
            break;
          }
          int v45 = *(v43 - 5);
          if (v45 == 32)
          {
            BOOL v39 = *v43 == 1;
          }
          else if (v45 == 7)
          {
            BOOL v40 = !v40;
            if (*v43 != 43) {
              BOOL v40 = 0;
            }
          }
          v43 += 16;
          --v44;
        }
        while (v44);
        if (!v40 && !v39)
        {
          uint64_t v46 = 0;
          while (1)
          {
            int v47 = *v41;
            v41 += 16;
            if (v47 - v42 >= v31) {
              break;
            }
            if (v38 == ++v46)
            {
              unsigned __int16 v48 = *(_WORD *)(v32 + 16);
              goto LABEL_48;
            }
          }
          unsigned __int16 v48 = v46;
LABEL_48:
          if (v48 <= v38) {
            uint64_t v49 = *(unsigned __int16 *)(v32 + 16);
          }
          else {
            uint64_t v49 = v48;
          }
          unsigned __int16 v50 = (unsigned int *)(v37 + ((unint64_t)v48 << 6) + 20);
          uint64_t v51 = v49 - v48;
          while (v51 && v50[3] - *(_DWORD *)(v37 + 32) < (unsigned __int16)(v30 + v29))
          {
            unsigned int v52 = *v50;
            v50 += 16;
            uint64_t v53 = (1 << v52) & 0x10004000080;
            BOOL v55 = v52 <= 0x28 && v53 != 0;
            --v51;
            if (v55) {
              goto LABEL_66;
            }
          }
          unsigned int v56 = sparser_bed_InjectMarker(a8, (unsigned int *)v86, 0, *(_DWORD *)(a1 + 188));
          unsigned int v78 = 0;
          if ((v56 & 0x80000000) != 0) {
            return v56;
          }
          goto LABEL_67;
        }
LABEL_66:
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] EOS insertion blocked (may be in Phon/Multiword, or non-final abbreviation preceeds the boundary)", v23, v24, v25, v72);
LABEL_67:
        uint64_t v14 = v81;
        if (!v19) {
          break;
        }
      }
      ++v17;
    }
    while (v17 != v14);
  }
  return v78;
}

BOOL sparser_marker_HasStrictlySmallerPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 32) > *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

uint64_t sparser_IsNonFinalAbbr(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  strcpy(v19, "is not");
  uint64_t v18 = 0;
  if (a5 >= 5) {
    log_OutText(*(void *)(a1[2] + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] checking if \"%s\" is a Non Final Abbr at pos %lu,%lu", a6, a7, a8, a2);
  }
  char v16 = 0;
  __int16 v17 = -1;
  if (((*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t *, __int16 *, char *))(a1[5] + 96))(a1[6], a1[7], "neosnbs", a2, &v18, &v17, &v16) & 0x80000000) != 0)return 0; {
  if (v17 == 1)
  }
  {
    strcpy(v19, "is");
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (a5 >= 5) {
    log_OutText(*(void *)(a1[2] + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] \"%s\" %s a Non Final Abbr at pos %lu,%lu", v11, v12, v13, a2);
  }
  return v14;
}

uint64_t sparser_getMaxCharsPerText(uint64_t a1, __int16 *a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (!result
    || (unsigned int v6 = 0, result = paramc_ParamGetInt(result, (uint64_t)"maxinputlength", (int *)&v6), (result & 0x80000000) != 0))
  {
    __int16 v5 = 750;
  }
  else
  {
    if (v6 >= 0x2710) {
      __int16 v4 = 10000;
    }
    else {
      __int16 v4 = v6;
    }
    if ((int)v6 >= 1) {
      __int16 v5 = v4;
    }
    else {
      __int16 v5 = 1;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t chars_ScanBlankHead(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result = 2369789959;
  if (a2 && a1 && a5 && (a3 || !a4))
  {
    *a5 = 0;
    if (a6 <= 1)
    {
      uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
      LODWORD(v14) = *(unsigned __int16 *)(a1 + 16);
      if (*(_WORD *)(a1 + 16))
      {
        for (unint64_t i = *(unsigned char **)(a1 + 8); ; unint64_t i = v13)
        {
          if (!utf8_BelongsToSet(2u, i, 0, v14))
          {
            LOWORD(v16) = (_WORD)v13;
            uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
            goto LABEL_15;
          }
          v13 += (unsigned __int16)utf8_determineUTF8CharLength(*v13);
          uint64_t v14 = *(unsigned __int16 *)(a1 + 16);
          if ((uint64_t)&v13[-*(void *)(a1 + 8)] >= v14) {
            break;
          }
        }
        LOWORD(v16) = (_WORD)v13;
        uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 8);
      }
LABEL_15:
      unsigned __int16 v17 = v16 - (_WORD)v13;
      *a2 = v17;
      if (*(unsigned __int16 *)(a1 + 16) == v17) {
        *a5 = 1;
      }
    }
    uint64_t result = 0;
    if (a4 && (a6 & 0xFFFFFFFD) == 0)
    {
      *a4 = 0;
      if (*a2 && *(_WORD *)(a3 + 16))
      {
        unint64_t v18 = 0;
        uint64_t v19 = *(void *)(a3 + 8);
        int v22 = *(_DWORD *)(v19 + 32);
        uint64_t v20 = (unsigned int *)(v19 + 32);
        int v21 = v22;
        while (1)
        {
          unsigned int v23 = *v20;
          v20 += 16;
          if (v23 >= v21 + *(unsigned __int16 *)(a1 + 2) * *a2) {
            break;
          }
          uint64_t result = 0;
          *a4 = ++v18;
          if (v18 >= *(unsigned __int16 *)(a3 + 16)) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t chars_ScanBlanks(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      unsigned int v5 = (unsigned __int16)*a2;
      if (v5 < a3)
      {
        unsigned int v6 = (unsigned char *)result;
        do
        {
          uint64_t result = utf8_BelongsToSet(2u, v6, (unsigned __int16)v5, a3);
          if (!result) {
            break;
          }
          uint64_t result = utf8_determineUTF8CharLength(v6[(unsigned __int16)*a2]);
          LOWORD(v5) = *a2 + result;
          *a2 = v5;
        }
        while (a3 > (unsigned __int16)v5);
      }
    }
  }
  return result;
}

uint64_t chars_ScanNonBlanks(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      unsigned int v5 = (unsigned __int16)*a2;
      if (v5 < a3)
      {
        unsigned int v6 = (unsigned char *)result;
        do
        {
          uint64_t result = utf8_BelongsToSet(2u, v6, (unsigned __int16)v5, a3);
          if (result) {
            break;
          }
          uint64_t result = utf8_determineUTF8CharLength(v6[(unsigned __int16)*a2]);
          LOWORD(v5) = *a2 + result;
          *a2 = v5;
        }
        while (a3 > (unsigned __int16)v5);
      }
    }
  }
  return result;
}

uint64_t chars_ScanForLineEnd(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = (unsigned __int16)*a2;
      if (v3 < a3)
      {
        do
        {
          if (*(unsigned char *)(result + v3) == 10) {
            break;
          }
          *a2 = ++v3;
        }
        while (a3 != v3);
      }
    }
  }
  return result;
}

uint64_t chars_BackScanBlanks(uint64_t result, _WORD *a2)
{
  if (result && a2)
  {
    unsigned int v3 = (unsigned __int16)*a2;
    unsigned int v6 = v3;
    if (v3)
    {
      __int16 v4 = (unsigned char *)result;
      while (1)
      {
        uint64_t result = utf8_BelongsToSet(2u, v4, v3, (unsigned __int16)*a2);
        __int16 v5 = v6;
        if (!result) {
          break;
        }
        if (v6) {
          --v6;
        }
        uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v4, &v6);
        unsigned int v3 = v6;
        if (!v6) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      __int16 v5 = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_BackScanBlanksX(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result && a2)
  {
    unsigned int v5 = (unsigned __int16)*a2;
    unsigned int v8 = v5;
    if (v5)
    {
      unsigned int v6 = (unsigned char *)result;
      while (1)
      {
        uint64_t result = utf8_BelongsToSet(2u, v6, v5, a3);
        __int16 v7 = v8;
        if (!result) {
          break;
        }
        --v8;
        uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v6, &v8);
        unsigned int v5 = v8;
        if (!v8) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      __int16 v7 = 0;
    }
    *a2 = v7;
  }
  return result;
}

uint64_t chars_BackScanToBlank(uint64_t result, _WORD *a2)
{
  if (result && a2)
  {
    unsigned int v3 = (unsigned __int16)*a2;
    unsigned int v6 = v3;
    if (v3)
    {
      __int16 v4 = (unsigned char *)result;
      while (1)
      {
        uint64_t result = utf8_BelongsToSet(2u, v4, v3, (unsigned __int16)*a2);
        __int16 v5 = v6;
        if (result) {
          break;
        }
        if (v6) {
          --v6;
        }
        uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v4, &v6);
        unsigned int v3 = v6;
        if (!v6) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      __int16 v5 = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_ScanNChars(uint64_t result, uint64_t a2, _WORD *a3, int a4)
{
  if (result && a3)
  {
    int v5 = a4;
    uint64_t v7 = (unsigned __int16)*a3;
    if (a4)
    {
      unsigned int v8 = (unsigned char *)result;
      do
      {
        uint64_t result = utf8_GetNextUtf8OffsetLimit(v8, v7, a2);
        uint64_t v7 = result;
        --v5;
      }
      while ((_WORD)v5);
    }
    *a3 = v7;
  }
  return result;
}

uint64_t chars_BackScanNChars(uint64_t result, _WORD *a2, int a3)
{
  if (result && a2)
  {
    int v4 = a3;
    unsigned int v5 = (unsigned __int16)*a2;
    if (a3 && *a2)
    {
      uint64_t v6 = result;
      do
      {
        unsigned int v7 = v5 - 1;
        uint64_t result = utf8_GetPreviousValidUtf8Offset(v6, &v7);
        --v4;
        unsigned int v5 = v7;
      }
      while ((_WORD)v4 && v7);
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_BackScanNonBlanks(uint64_t result, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (result && a2)
  {
    unsigned int v6 = *a2;
    unsigned int v24 = v6;
    if (!v6) {
      goto LABEL_36;
    }
    unsigned int v8 = (unsigned char *)result;
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t result = utf8_BelongsToSet(2u, v8, v6, *a2);
      unsigned int v6 = v24;
      if (result)
      {
LABEL_20:
        unsigned int v10 = *a2;
        goto LABEL_21;
      }
      if (a4) {
        break;
      }
LABEL_19:
      --v24;
      uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v8, &v24);
      unsigned int v6 = v24;
      if (!v24) {
        goto LABEL_20;
      }
    }
    unsigned int v10 = *a2;
    uint64_t v11 = a3;
    uint64_t v12 = v9;
    while (1)
    {
      int v14 = *v11++;
      int v13 = v14;
      BOOL v15 = v24 == v10 && v13 == 46;
      BOOL v16 = v15;
      if (v13 == v8[v24] && !v16) {
        break;
      }
      if (!--v12) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if (v6 >= v10) {
      goto LABEL_36;
    }
    int v18 = utf8_BelongsToSet(2u, v8, v6, v10);
    unsigned int v6 = v24;
    uint64_t result = v8[v24];
    if (!v18)
    {
      if (!a4) {
        goto LABEL_36;
      }
      while (1)
      {
        int v20 = *a3++;
        int v19 = v20;
        BOOL v21 = v24 == *a2 && v19 == 46;
        BOOL v22 = v21;
        if (v19 == result && !v22) {
          break;
        }
        if (!--v9) {
          goto LABEL_36;
        }
      }
    }
    uint64_t result = utf8_determineUTF8CharLength(result);
    unsigned int v6 = v24 + result;
LABEL_36:
    *a2 = v6;
  }
  return result;
}

uint64_t chars_BackScan2NonBlanksNonChinese(uint64_t result, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (result && a2)
  {
    unsigned int v7 = (unsigned char *)result;
    unsigned int v8 = *a2;
    unsigned int v25 = v8;
    if (v8)
    {
      unsigned int v9 = v8;
      while (!a4)
      {
LABEL_18:
        uint64_t result = utf8_BelongsToSet(2u, v7, v9, *a2);
        unsigned int v9 = v25;
        if (!result)
        {
          uint64_t result = utf8_BelongsToSet(0x20u, v7, v25, *a2);
          unsigned int v9 = v25;
          if (!result)
          {
            --v25;
            uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v7, &v25);
            unsigned int v9 = v25;
            if (v25) {
              continue;
            }
          }
        }
        goto LABEL_23;
      }
      unsigned int v10 = a3;
      uint64_t v11 = a4;
      while (1)
      {
        int v13 = *v10++;
        int v12 = v13;
        BOOL v14 = v9 == v8 && v12 == 46;
        BOOL v15 = v14;
        if (v12 == v7[v9] && !v15) {
          break;
        }
        if (!--v11) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
LABEL_23:
    if (v9 >= *a2) {
      goto LABEL_26;
    }
    int v17 = utf8_BelongsToSet(2u, v7, v9, *a2);
    unsigned int v9 = v25;
    if (!v17)
    {
      unsigned int v18 = *a2;
      if (a4)
      {
        uint64_t v19 = a4;
        while (1)
        {
          int v21 = *a3++;
          int v20 = v21;
          BOOL v22 = v25 == v18 && v20 == 46;
          BOOL v23 = v22;
          if (v20 == v7[v25] && !v23) {
            break;
          }
          if (!--v19) {
            goto LABEL_41;
          }
        }
      }
      else
      {
LABEL_41:
        uint64_t result = utf8_BelongsToSet(0x20u, v7, v25, v18);
        unsigned int v9 = v25;
        if (!result) {
          goto LABEL_26;
        }
      }
    }
    uint64_t result = utf8_determineUTF8CharLength(v7[v9]);
    unsigned int v9 = v25 + result;
LABEL_26:
    *a2 = v9;
  }
  return result;
}

char *chars_BackScanPhraseBoundary(char *result, unsigned char *a2, _WORD *a3)
{
  if (a2 && a3)
  {
    unsigned int v5 = result;
    unsigned int v6 = (unsigned __int16)*a3;
    unsigned int v15 = v6;
    if (!v6) {
      goto LABEL_15;
    }
    while (1)
    {
      int v7 = utf8_BelongsToSet(2u, a2, v6, (unsigned __int16)*a3);
      unsigned int v8 = v15;
      if (!v7) {
        break;
      }
      if (v15) {
        --v15;
      }
      utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
      unsigned int v6 = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    if (v15)
    {
      while (1)
      {
        int v9 = utf8_BelongsToSet(2u, a2, v8, (unsigned __int16)*a3);
        unsigned int v10 = v15;
        if (v9) {
          break;
        }
        uint64_t v11 = utf8_strchr(v5, &a2[v15]);
        unsigned int v10 = v15;
        if (v11) {
          break;
        }
        if (v15) {
          --v15;
        }
        utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
        unsigned int v8 = v15;
        if (!v15) {
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      unsigned int v10 = 0;
    }
    uint64_t result = utf8_strchr(v5, &a2[v10]);
    __int16 v12 = v15;
    if (!result)
    {
      if (v15)
      {
        uint64_t v13 = v15;
        do
        {
          BOOL v14 = utf8_strchr(v5, &a2[v13]);
          LODWORD(v13) = v15;
          if (v14) {
            break;
          }
          if (v15) {
            --v15;
          }
          utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
          uint64_t v13 = v15;
        }
        while (v15);
      }
      else
      {
        LODWORD(v13) = 0;
      }
      uint64_t result = utf8_strchr(v5, &a2[v13]);
      if (result) {
        __int16 v12 = v15;
      }
    }
    *a3 = v12;
  }
  return result;
}

char *eos_BackScanPhraseBoundary(char *result, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  if (a2 && a5 && *(_DWORD *)a5 > a4)
  {
    unsigned __int16 v9 = *a5 - a4;
    int v7 = (unsigned char *)(a2 + a3);
    uint64_t result = chars_BackScanPhraseBoundary(result, v7, &v9);
    if (v9)
    {
      unsigned int v8 = v9 + a4;
      uint64_t result = (char *)utf8_determineUTF8CharLength(v7[v9]);
      *(_DWORD *)a5 = v8 + result;
    }
  }
  return result;
}

uint64_t tolhp_ObjOpen(_WORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2370838535;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v15) & 0x80000000) == 0)
  {
    *a3 = 0;
    uint64_t v7 = heap_Alloc(*(void *)(v15 + 8), 40);
    if (!v7) {
      return 2370838538;
    }
    unsigned int v8 = (uint64_t *)v7;
    *(void *)(v7 + 32) = 0;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(void *)uint64_t v7 = a1;
    *(void *)(v7 + 8) = a2;
    if (!v15) {
      goto LABEL_10;
    }
    int v9 = paramc_ParamGet(*(void *)(v15 + 40), (uint64_t)"langcode", &v14, 0);
    uint64_t v3 = v9 & (v9 >> 31);
    if ((v9 & (v9 >> 31)) < 0) {
      goto LABEL_10;
    }
    strcpy(v18, "nts_");
    __strcat_chk();
    uint64_t v10 = dct_ObjOpen(v18, a1, a2, v8 + 2);
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v3 = v10;
      if ((v10 & 0x1FFF) != 1) {
        goto LABEL_10;
      }
    }
    strcpy(v17, "sxm_");
    __strcat_chk();
    uint64_t v11 = dct_ObjOpen(v17, a1, a2, v8 + 3);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v3 = v11;
      if ((v11 & 0x1FFF) != 1) {
        goto LABEL_10;
      }
    }
    strcpy(v16, "ipa_");
    __strcat_chk();
    uint64_t v13 = dct_ObjOpen(v16, a1, a2, v8 + 4);
    uint64_t v3 = v13;
    if ((v13 & 0x80000000) != 0)
    {
      if ((v13 & 0x1FFF) != 1)
      {
LABEL_10:
        tolhp_ObjClose((uint64_t)v8);
        return v3;
      }
      uint64_t v3 = 0;
    }
    *a3 = v8;
  }
  return v3;
}

uint64_t tolhp_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    dct_ObjClose(*(void *)(a1 + 32));
    dct_ObjClose(*(void *)(a1 + 24));
    dct_ObjClose(*(void *)(a1 + 16));
    heap_Free(*(void **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t tolhp_ResetDcts(uint64_t a1)
{
  uint64_t result = tolhp_ResetDct((_WORD **)a1, (uint64_t)"nts_", (uint64_t *)(a1 + 16));
  if ((result & 0x80000000) == 0)
  {
    return tolhp_ResetDct((_WORD **)a1, (uint64_t)"sxm_", (uint64_t *)(a1 + 24));
  }
  return result;
}

uint64_t tolhp_ResetDct(_WORD **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2370838528;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a1) {
    return 2370838535;
  }
  if ((InitRsrcFunction(*a1, (int)a1[1], &v9) & 0x80000000) != 0) {
    return 2370838535;
  }
  if (v9)
  {
    int v6 = paramc_ParamGet(*(void *)(v9 + 40), (uint64_t)"langcode", &v10, 0);
    if ((v6 & (v6 >> 31)) >= 0)
    {
      __strcpy_chk();
      __strcat_chk();
      if (*a3) {
        unsigned int v7 = dct_ObjReopen((void *)*a3, v11);
      }
      else {
        unsigned int v7 = dct_ObjOpen(v11, *a1, (int)a1[1], a3);
      }
      if ((v7 & 0x80001FFF) == 0x80000001) {
        return 0;
      }
      else {
        return v7;
      }
    }
  }
  return v3;
}

uint64_t tolhp_RewritePhonTextInLhp(_WORD **a1, uint64_t a2)
{
  v75[1] = *MEMORY[0x263EF8340];
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v2 = 2370838535;
  uint64_t v57 = 0;
  if (a1 && a2)
  {
    uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v59, 213);
    if ((v5 & 0x80000000) != 0
      || (uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v58, 213), (v5 & 0x80000000) != 0)
      || (uint64_t v5 = datac_RequestBlock(a2, 1012, 1u, &v57), (v5 & 0x80000000) != 0))
    {
      uint64_t v2 = v5;
    }
    else
    {
      if (v57) {
        uint64_t v6 = *(void *)(v57 + 8);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v8 = v58;
      uint64_t v7 = v59;
      int v70 = 0;
      uint64_t v69 = 0x2400000007;
      uint64_t v61 = 0;
      if (!v59 || !v58)
      {
        uint64_t v11 = 2370838535;
        goto LABEL_112;
      }
      uint64_t v9 = bed_Goto(v58, 0);
      if ((v9 & 0x80000000) != 0)
      {
LABEL_111:
        uint64_t v11 = v9;
        goto LABEL_112;
      }
      uint64_t v10 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v69);
      if ((v10 & 0x1FFF) == 0x14)
      {
LABEL_14:
        uint64_t v11 = 0;
        goto LABEL_112;
      }
      uint64_t v11 = v10;
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v11 = bed_GetpElem(v8, 0xFFFFu, &v61);
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v12 = v61;
          if (v61)
          {
            uint64_t v13 = (uint64_t *)(a1 + 2);
            uint64_t v14 = (uint64_t *)(a1 + 3);
            unsigned int v56 = (uint64_t *)(a1 + 4);
            while (1)
            {
              __int16 v60 = 1;
              if (*(_DWORD *)(v12 + 20) == 7)
              {
                int v72 = 0;
                uint64_t v71 = 0x3E700000007;
                uint64_t v74 = 0;
                v75[0] = 0;
                unsigned __int16 v66 = 0;
                unsigned __int16 v65 = 0;
                __int16 v64 = 1;
                uint64_t v73 = 0;
                *(void *)__dst = 0;
                __int16 v62 = 0;
                uint64_t v9 = bed_GetpElem(v8, 0, v75);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                uint64_t v9 = bed_GetpElem(v8, 0xFFFFu, &v74);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                uint64_t v9 = bed_GetiElem(v8, &v66);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                uint64_t v9 = bed_GetcElem(v8, &v65);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                if (v74 && *(_DWORD *)(v74 + 20) == 7)
                {
                  int v15 = *(_DWORD *)(v74 + 40);
                  if (v15 == 43)
                  {
                    if (*(void *)(v74 + 48))
                    {
                      int v16 = *(_DWORD *)(v74 + 56);
                      if ((v16 - 2) < 3)
                      {
                        int v15 = v16 + 68;
LABEL_45:
                        __int16 v64 = 1;
                        bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v64);
                        uint64_t v22 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v71);
                        if ((v22 & 0x1FFF) == 0x14)
                        {
                          uint64_t v73 = 0;
                        }
                        else
                        {
                          uint64_t v11 = v22;
                          if ((v22 & 0x80000000) != 0) {
                            break;
                          }
                          uint64_t v9 = bed_GetpElem(v8, 0xFFFFu, &v73);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                        }
                        uint64_t v9 = bed_GetpElem(v7, 0, __dst);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        uint64_t v9 = bed_GetcElem(v7, &v62);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        int v23 = *(_DWORD *)(v74 + 32);
                        int v24 = v23 - *(_DWORD *)(v75[0] + 32);
                        if (v73) {
                          int v25 = *(_DWORD *)(v73 + 32) - v23;
                        }
                        else {
                          LOWORD(v25) = v62 - v24;
                        }
                        unsigned __int16 v55 = v25;
                        uint64_t v28 = *(void *)__dst;
                        __src = 0;
                        __int16 v67 = 0;
                        if (!*(void *)__dst
                          || (InitRsrcFunction(*a1, (int)a1[1], &__src) & 0x80000000) != 0
                          || (v15 - 70) > 2)
                        {
                          goto LABEL_119;
                        }
                        unsigned __int16 v51 = v24;
                        uint64_t v52 = (unsigned __int16)v24;
                        int v29 = (unsigned char *)(v28 + (unsigned __int16)v24);
                        uint64_t v53 = off_26C21F518[v15 - 70];
                        unsigned int v30 = 0;
                        if (v55)
                        {
                          while (utf8_BelongsToSet(0, v29, v30, v55))
                          {
                            if (v55 == ++v30)
                            {
                              LOWORD(v30) = v55;
                              break;
                            }
                          }
                        }
                        unsigned int v31 = &v29[(unsigned __int16)v30];
                        __int16 v32 = v55 - v30;
                        unsigned int v33 = (unsigned __int16)(v55 - v30);
                        if (v33)
                        {
                          __int16 v49 = v32;
                          unsigned __int16 v50 = v13;
                          int v34 = 0;
                          while (utf8_BelongsToSet(0, v31, v33 - 1 + v34, v33))
                          {
                            if (-v33 == --v34)
                            {
                              __int16 v32 = v49;
                              LOWORD(v35) = v49;
                              uint64_t v13 = v50;
                              goto LABEL_82;
                            }
                          }
                          int v35 = -v34;
                          uint64_t v13 = v50;
                          __int16 v32 = v49;
                        }
                        else
                        {
                          LOWORD(v35) = 0;
                        }
LABEL_82:
                        size_t v36 = (unsigned __int16)(v32 - v35);
                        uint64_t v37 = (void *)heap_Alloc(*((void *)__src + 1), v36 + 1);
                        if (!v37)
                        {
                          uint64_t v2 = 2370838538;
LABEL_119:
                          uint64_t v11 = v2;
                          break;
                        }
                        uint64_t v38 = (uint64_t)v37;
                        memcpy(v37, v31, v36);
                        *(unsigned char *)(v38 + v36) = 0;
                        uint64_t v11 = ((uint64_t (*)(_WORD **, uint64_t, void, __int16 *))v53)(a1, v38, 0, &v67);
                        if ((v11 & 0x80000000) != 0 || !v67) {
                          goto LABEL_88;
                        }
                        BOOL v39 = (char *)heap_Alloc(*((void *)__src + 1), (unsigned __int16)++v67);
                        if (!v39)
                        {
                          LOWORD(v54) = 0;
                          uint64_t v11 = 2370838538;
                          goto LABEL_89;
                        }
                        uint64_t v11 = ((uint64_t (*)(_WORD **, uint64_t, char *, __int16 *))v53)(a1, v38, v39, &v67);
                        if ((v11 & 0x80000000) != 0)
                        {
LABEL_88:
                          BOOL v39 = 0;
                          LOWORD(v54) = 0;
                        }
                        else
                        {
                          int v54 = Utf8_Utf8NbrOfSymbols(v39) - 1;
                        }
LABEL_89:
                        heap_Free(*((void **)__src + 1), v38);
                        if ((v11 & 0x80000000) != 0) {
                          break;
                        }
                        uint64_t v9 = bed_Remove(v7, v51, v55);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        if ((_WORD)v54)
                        {
                          uint64_t v9 = bed_Goto(v7, v52);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                          uint64_t v9 = bed_Insert(v7, v39, (unsigned __int16)v54);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                        }
                        if (v39)
                        {
                          uint64_t v9 = tolhp_lhp_ObjClose((uint64_t)a1, (uint64_t)v39);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                        }
                        int v40 = (unsigned __int16)v54 - v55;
                        *(_DWORD *)(v75[0] + 36) += v40;
                        *(_DWORD *)(v74 + 40) = 43;
                        uint64_t v9 = bed_Goto(v8, v66);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        unsigned int v41 = v65;
                        int v42 = v66 + 1;
                        if (v65 > (unsigned __int16)(v66 + 1))
                        {
                          uint64_t v43 = v75[0];
                          uint64_t v44 = (_DWORD *)(v74 + 100);
                          do
                          {
                            unint64_t v45 = *(v44 - 1);
                            uint64_t v46 = *(unsigned int *)(v43 + 32);
                            if (v46 + v52 <= v45)
                            {
                              if (v46 + (unint64_t)(v52 + v55) <= v45)
                              {
                                *(v44 - 1) = v45 + v40;
                              }
                              else
                              {
                                *(v44 - 1) = v46 + v52;
                                if (*(v44 - 4) == 1) {
                                  _DWORD *v44 = (unsigned __int16)v54;
                                }
                              }
                            }
                            ++v42;
                            v44 += 16;
                          }
                          while (v41 > (unsigned __int16)v42);
                        }
                      }
                    }
                  }
                  else if ((v15 - 73) >= 0xFFFFFFFD)
                  {
                    goto LABEL_45;
                  }
                }
              }
              else if (v6)
              {
                __dst[0] = 0;
                uint64_t v17 = v6 + *(unsigned int *)(v12 + 40);
                MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
                if (!strcmp((const char *)v17, MarkerArgStr))
                {
                  uint64_t v71 = 0;
                  __src = 0;
                  if ((InitRsrcFunction(*a1, (int)a1[1], &v71) & 0x80000000) == 0)
                  {
                    if (v71)
                    {
                      int v20 = paramc_ParamGet(*(void *)(v71 + 40), (uint64_t)"langcode", &__src, 0);
                      if ((v20 & (v20 >> 31)) >= 0)
                      {
                        strncpy(__dst, __src, 4uLL);
LABEL_42:
                        strcpy((char *)v75, "nts_");
                        __strcat_chk();
                        uint64_t v21 = *v13
                            ? dct_ObjReopen((void *)*v13, (const char *)v75)
                            : dct_ObjOpen((const char *)v75, *a1, (int)a1[1], v13);
                        uint64_t v11 = v21;
                        if ((v21 & 0x80000000) != 0 && (v21 & 0x1FFF) != 1) {
                          break;
                        }
                        strcpy((char *)&v74, "sxm_");
                        __strcat_chk();
                        uint64_t v26 = *v14
                            ? dct_ObjReopen((void *)*v14, (const char *)&v74)
                            : dct_ObjOpen((const char *)&v74, *a1, (int)a1[1], v14);
                        uint64_t v11 = v26;
                        if ((v26 & 0x80000000) != 0 && (v26 & 0x1FFF) != 1) {
                          break;
                        }
                        strcpy((char *)&v73, "ipa_");
                        __strcat_chk();
                        uint64_t v27 = *v56
                            ? dct_ObjReopen((void *)*v56, (const char *)&v73)
                            : dct_ObjOpen((const char *)&v73, *a1, (int)a1[1], v56);
                        uint64_t v11 = v27;
                        if ((v27 & 0x80000000) != 0 && (v27 & 0x1FFF) != 1) {
                          break;
                        }
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v19 = 0;
                  while (*(unsigned char *)(v17 + v19))
                  {
                    __dst[v19] = *(unsigned char *)(v17 + v19);
                    if (++v19 == 3)
                    {
                      if (*(unsigned char *)(v17 + 3)) {
                        break;
                      }
                      __dst[3] = 0;
                      goto LABEL_42;
                    }
                  }
                }
              }
              __int16 v60 = 1;
              bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v60);
              uint64_t v47 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v69);
              if ((v47 & 0x1FFF) == 0x14) {
                goto LABEL_14;
              }
              uint64_t v11 = v47;
              if ((v47 & 0x80000000) == 0)
              {
                uint64_t v11 = bed_GetpElem(v8, 0xFFFFu, &v61);
                if ((v11 & 0x80000000) == 0)
                {
                  uint64_t v12 = v61;
                  if (v61) {
                    continue;
                  }
                }
              }
              break;
            }
          }
        }
      }
LABEL_112:
      uint64_t v2 = v11;
    }
    if (v58) {
      bed_ObjClose(v58);
    }
    if (v59) {
      bed_ObjClose(v59);
    }
  }
  return v2;
}

uint64_t tolhp_lhp_ObjClose(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) != 0) {
    return 2370838535;
  }
  heap_Free(*(void **)(v4 + 8), a2);
  return 0;
}

uint64_t tolhp_RewriteNts(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1) {
    return tolhp_Rewrite(*(void **)(a1 + 16), a2, a3, a4);
  }
  else {
    return 2370838535;
  }
}

uint64_t tolhp_RewriteSxms(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1) {
    return tolhp_Rewrite(*(void **)(a1 + 24), a2, a3, a4);
  }
  else {
    return 2370838535;
  }
}

uint64_t tolhp_RewriteIpa(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1) {
    return tolhp_Rewrite(*(void **)(a1 + 32), a2, a3, a4);
  }
  else {
    return 2370838535;
  }
}

uint64_t tolhp_Rewrite(void *a1, char *__s, char *a3, _WORD *a4)
{
  if (a3) {
    *a3 = 0;
  }
  else {
    *a4 = 0;
  }
  unsigned __int16 v8 = strlen(__s);
  uint64_t result = 0;
  if (a1)
  {
    int v10 = v8;
    if (v8)
    {
      if (__s)
      {
        for (unint64_t i = __s; ; ++i)
        {
          if (*i == 32)
          {
            *unint64_t i = 17;
          }
          else if (!*i)
          {
            break;
          }
        }
      }
      int v12 = 0;
      while (1)
      {
        __sa = 0;
        int LongestMatch = dct_FindLongestMatch(a1, &__s[v12], &__sa);
        if (LongestMatch < 1)
        {
          uint64_t result = 0;
          *a4 = 0;
          return result;
        }
        int v14 = LongestMatch;
        size_t v15 = strlen(__sa);
        if (a3)
        {
          if (v15 + strlen(a3) + 1 > (unsigned __int16)*a4) {
            return 2370838537;
          }
          strcat(a3, __sa);
        }
        else
        {
          *a4 += v15;
        }
        v12 += v14;
        if (v12 >= v10) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t dct_ObjOpen(const char *a1, _WORD *a2, int a3, uint64_t *a4)
{
  uint64_t v17 = 0;
  uint64_t v4 = 2370838535;
  if (!a4) {
    return 2370838535;
  }
  int v16 = 0;
  if ((InitRsrcFunction(a2, a3, &v17) & 0x80000000) != 0) {
    return 2370838535;
  }
  *a4 = 0;
  uint64_t v7 = heap_Alloc(*(void *)(v17 + 8), 40);
  uint64_t v8 = 2370838538;
  if (v7)
  {
    uint64_t v9 = v7;
    *(void *)(v7 + 32) = 0;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(void *)uint64_t v7 = v17;
    int v10 = strlen(a1);
    uint64_t v11 = (char *)heap_Alloc(*(void *)(v17 + 8), (v10 + 1));
    *(void *)(v9 + 8) = v11;
    if (!v11) {
      goto LABEL_13;
    }
    strcpy(v11, a1);
    uint64_t v18 = 0;
    if (*(void *)v9)
    {
      uint64_t Object = objc_GetObject(*(void *)(*(void *)v9 + 48), (uint64_t)"FE_DCTLKP", &v18);
      if ((Object & 0x80000000) == 0)
      {
        uint64_t v13 = v18;
        uint64_t v14 = *(void *)(v18 + 8);
        *(void *)(v9 + 16) = v14;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v13 + 16);
        uint64_t v8 = (*(uint64_t (**)(void, void, const char *, int *))(v14 + 72))(*(void *)(v9 + 24), *(void *)(v9 + 32), a1, &v16);
        if ((v8 & 0x80000000) == 0)
        {
          if (v16)
          {
            *a4 = v9;
            return v8;
          }
          uint64_t v8 = 2370838529;
        }
LABEL_13:
        dct_ObjClose(v9);
        return v8;
      }
      uint64_t v4 = Object;
    }
    uint64_t v8 = v4;
    goto LABEL_13;
  }
  return v8;
}

uint64_t dct_ObjClose(uint64_t a1)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    uint64_t v3 = *(void *)a1;
    if (*(void *)a1)
    {
      if (*(void *)(a1 + 16))
      {
        objc_ReleaseObject(*(void *)(v3 + 48), (uint64_t)"FE_DCTLKP");
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        uint64_t v3 = *(void *)a1;
      }
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        heap_Free(*(void **)(v3 + 8), v4);
        uint64_t v3 = *(void *)a1;
      }
      heap_Free(*(void **)(v3 + 8), a1);
      return 0;
    }
  }
  return result;
}

uint64_t dct_ObjReopen(void *a1, const char *a2)
{
  uint64_t v2 = 2370838535;
  if (a1 && a2)
  {
    uint64_t v5 = (char *)a1[1];
    size_t v6 = strlen(v5);
    size_t v7 = strlen(a2);
    if (v6 < v7)
    {
      uint64_t v8 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v5, (v7 + 1));
      if (!v8) {
        return 2370838538;
      }
      uint64_t v5 = (char *)v8;
      a1[1] = v8;
    }
    strcpy(v5, a2);
    return 0;
  }
  return v2;
}

uint64_t dct_FindLongestMatch(void *a1, char *__s, void *a3)
{
  uint64_t result = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  char v15 = 0;
  uint64_t v14 = 0;
  __int16 v13 = 0;
  uint64_t v12 = 0;
  if (a1 && __s && a3)
  {
    *a3 = 0;
    unsigned __int16 v6 = strlen(__s);
    if (v6)
    {
      if (v6 <= 0xAu) {
        unsigned __int16 v7 = v6;
      }
      else {
        unsigned __int16 v7 = 10;
      }
      int v8 = v7;
      uint64_t v9 = v7;
      __memmove_chk();
      if (v8)
      {
        uint64_t v10 = v9;
        while (1)
        {
          v16[v10] = 0;
          __int16 v13 = 1;
          if (((*(uint64_t (**)(void, void, void, unsigned char *, void **, __int16 *, char *))(a1[2] + 96))(a1[3], a1[4], a1[1], v16, &v14, &v13, &v15) & 0x80000000) != 0)break; {
          int v11 = v10 - 1;
          }
          if (v10 != 1)
          {
            --v10;
            if (!v13) {
              continue;
            }
          }
          if (!v13) {
            break;
          }
LABEL_20:
          *a3 = *v14;
          return (v11 + 1);
        }
      }
      if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &v12) & 0x80000000) == 0)
      {
        __memmove_chk();
        if (v9)
        {
          while (1)
          {
            v16[v9] = 0;
            __int16 v13 = 0;
            if (((*(uint64_t (**)(void, void, void, unsigned char *, void **, __int16 *, char *))(a1[2] + 96))(a1[3], a1[4], a1[1], v16, &v14, &v13, &v15) & 0x80000000) != 0)break; {
            int v11 = v9 - 1;
            }
            if (v9 >= 2)
            {
              --v9;
              if (!v13) {
                continue;
              }
            }
            if (!v13) {
              return 0;
            }
            goto LABEL_20;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t textpar_AllTextProcessed(uint64_t a1)
{
  uint64_t v3 = 0;
  if (!a1) {
    return 1;
  }
  uint64_t v1 = 1;
  if ((datac_RequestBlock(*(void *)(a1 + 16), 1010, 1u, &v3) & 0x80000000) == 0) {
    return *(unsigned int *)(v3 + 20);
  }
  return v1;
}

uint64_t textpar_ClearOutputDataContainers(uint64_t *a1)
{
  uint64_t v7 = 0;
  if (!a1) {
    return 2368741383;
  }
  uint64_t v2 = datac_RequestBlock(a1[2], 1011, 1u, &v7);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v7;
    if (*(unsigned __int16 *)(v7 + 16) >= 2u)
    {
      uint64_t v4 = (uint64_t *)(*(void *)(v7 + 8) + 112);
      unint64_t v5 = 1;
      do
      {
        if (*v4)
        {
          heap_Free(*(void **)(*a1 + 8), *v4);
          *uint64_t v4 = 0;
          uint64_t v3 = v7;
        }
        ++v5;
        v4 += 8;
      }
      while (v5 < *(unsigned __int16 *)(v3 + 16));
    }
    *(_WORD *)(v3 + 16) = 0;
  }
  return v2;
}

uint64_t textpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v5 = 2368741376;
  if (!a1) {
    return 2368741383;
  }
  int v30 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 24) + 136))(a2, a3, &v30);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)"start textpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1010, (uint64_t)"start textpar_WriteTextAndMarkers()");
  uint64_t v11 = datac_RequestBlock(*(void *)(a1 + 16), 1010, 1u, &v29);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  int v12 = *(unsigned __int16 *)(v29 + 16);
  if (*(_WORD *)(v29 + 16))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(a1 + 24) + 104))(a2, a3, *(void *)(v29 + 8), *(unsigned __int16 *)(v29 + 2) * v12);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    *(_WORD *)(v29 + 16) = 0;
  }
  if ((datac_RequestBlock(*(void *)(a1 + 16), 1012, 1u, &v29) & 0x80000000) != 0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v29 + 8);
  }
  uint64_t v11 = datac_RequestBlock(*(void *)(a1 + 16), 1011, 1u, &v28);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  unsigned int v14 = *(unsigned __int16 *)(v28 + 16);
  if (*(_WORD *)(v28 + 16))
  {
    uint64_t v15 = *(void *)(v28 + 8);
    if (*(_DWORD *)(v15 + 20) == 0x4000)
    {
      if (v12)
      {
        int v16 = 0;
        int v30 = *(_DWORD *)(v15 + 32) - v30;
      }
      else
      {
        int v16 = marker_CheckForEmptyMarkers(v13, *(_DWORD *)(a1 + 76), v15, v14, 0, 0, 0);
        unsigned int v14 = *(unsigned __int16 *)(v28 + 16);
        int v30 = *(_DWORD *)(v15 + 32) - v30;
        if (!v14)
        {
          LODWORD(v24) = 0;
          goto LABEL_36;
        }
      }
      int v27 = v16;
      uint64_t v17 = v14;
      uint64_t v18 = (_DWORD *)(v15 + 32);
      do
      {
        *v18 -= v30;
        v18 += 16;
        --v17;
      }
      while (v17);
      unint64_t v19 = 0;
      int v20 = (void *)(v15 + 40);
      do
      {
        if (marker_hasNonConstCharPtrArg(*((_DWORD *)v20 - 5)))
        {
          uint64_t v21 = *(unsigned int *)v20;
          if (v13) {
            BOOL v22 = v21 == 0xFFFFFFFFLL;
          }
          else {
            BOOL v22 = 1;
          }
          uint64_t v23 = v13 + v21;
          if (v22) {
            uint64_t v23 = 0;
          }
          *int v20 = v23;
        }
        v20 += 8;
        ++v19;
        unint64_t v24 = *(unsigned __int16 *)(v28 + 16);
      }
      while (v19 < v24);
      if (v12) {
        goto LABEL_37;
      }
      if (v24 == 1)
      {
        if (v27 == 1 || *(_DWORD *)(v15 + 20) == 0x4000) {
          goto LABEL_38;
        }
        LODWORD(v24) = 1;
LABEL_37:
        marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)"at end()", 1, v15, v24);
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 24) + 104))(a4, a5, v15, (v24 << 6));
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        return v11;
      }
      int v16 = v27;
LABEL_36:
      if (v16 == 1)
      {
LABEL_38:
        int v25 = textpar_ClearOutputDataContainers((uint64_t *)a1);
        return v25 & (v25 >> 31);
      }
      goto LABEL_37;
    }
  }
  return v5;
}

uint64_t textpar_CheckForEOF(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v9 = 0;
  uint64_t result = (*(uint64_t (**)(void, void, char *, uint64_t *))(a1[3] + 144))(a1[4], a1[5], (char *)&v9 + 4, &v9);
  if ((result & 0x80000000) == 0)
  {
    int v6 = v9;
    int v7 = HIDWORD(v9);
    if (a2 && a3)
    {
      *a2 = HIDWORD(v9);
      *a3 = v6;
    }
    if (v7) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v6 == 0;
    }
    if (v8) {
      return result;
    }
    else {
      return 2368741399;
    }
  }
  return result;
}

uint64_t textpar_ClassOpen(_WORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v9 = 0;
  if ((InitRsrcFunction(a1, a2, &v9) & 0x80000000) != 0) {
    return 2368741383;
  }
  int v6 = (uint64_t *)heap_Calloc(*(void **)(v9 + 8), 1, 16);
  if (!v6) {
    return 10;
  }
  *int v6 = v9;
  *a3 = v6;
  uint64_t v7 = escseqs_ClassOpen(a1, a2, v6 + 1);
  if ((v7 & 0x80000000) != 0) {
    textpar_ClassClose(*a3);
  }
  return v7;
}

uint64_t textpar_ClassClose(uint64_t *a1)
{
  if (!a1) {
    return 2368741383;
  }
  uint64_t v2 = *a1;
  uint64_t v3 = escseqs_ClassClose(a1[1]);
  if ((v3 & 0x80000000) == 0) {
    heap_Free(*(void **)(v2 + 8), (uint64_t)a1);
  }
  return v3;
}

uint64_t textpar_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t **a5, int a6)
{
  uint64_t v24 = 0;
  int v22 = 0;
  uint64_t v6 = 2368741383;
  if (a1)
  {
    if (a5)
    {
      long long v23 = 0uLL;
      if ((InitRsrcFunction(a2, a3, &v24) & 0x80000000) == 0)
      {
        *a5 = 0;
        uint64_t v13 = heap_Alloc(*(void *)(v24 + 8), 120);
        if (v13)
        {
          unsigned int v14 = (uint64_t *)v13;
          *(_OWORD *)uint64_t v13 = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_OWORD *)(v13 + 80) = 0u;
          *(void *)(v13 + 112) = 0;
          *(_OWORD *)(v13 + 96) = 0u;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(void *)uint64_t v13 = v24;
          *(void *)(v13 + 8) = a1;
          *(void *)(v13 + 24) = a4;
          *(void *)(v13 + 88) = 0;
          uint64_t v15 = (uint64_t *)(v13 + 88);
          *(_DWORD *)(v13 + 76) = 0;
          *(_DWORD *)(v13 + 116) = a6;
          if ((int)paramc_ParamGetUInt(*(void *)(v24 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v22) < 0) {
            unsigned __int16 v16 = 30;
          }
          else {
            unsigned __int16 v16 = v22;
          }
          if ((int)paramc_ParamGetUInt(*(void *)(v24 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v22) < 0) {
            __int16 v17 = 50;
          }
          else {
            __int16 v17 = v22;
          }
          uint64_t v18 = extdata_ObjOpen(a2, a3, v15, 211);
          if ((v18 & 0x80000000) != 0
            || (v14[12] = 0,
                *((_DWORD *)v14 + 26) = 0,
                uint64_t v18 = nuance_pcre_ObjOpen(a2, a3, (uint64_t)&v23),
                (v18 & 0x80000000) != 0)
            || (uint64_t v18 = nuance_pcre_Init((void *)v23, SDWORD2(v23), v16, v17), (v18 & 0x80000000) != 0)
            || (*((_OWORD *)v14 + 6) = v23,
                uint64_t v18 = escseqs_ObjOpen(*(void *)(v14[1] + 8), a2, a3, v14[12], v14[13], v14 + 10),
                (v18 & 0x80000000) != 0)
            || (uint64_t v18 = datac_ObjOpen(a2, a3, v14 + 2, 211), (v18 & 0x80000000) != 0))
          {
            uint64_t v6 = v18;
          }
          else
          {
            uint64_t v19 = 0;
            while (1)
            {
              datac_RegisterBlock(v14[2], (unsigned __int16)aMETA[v19], (unsigned __int16)aMETA[v19 + 1], (unsigned __int16)aMETA[v19 + 2]);
              uint64_t v6 = v20;
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              v19 += 3;
              if (v19 == 12)
              {
                *a5 = v14;
                return v6;
              }
            }
          }
          textpar_ObjClose(v14);
        }
        else
        {
          return 2368741386;
        }
      }
    }
  }
  return v6;
}

uint64_t textpar_ObjClose(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  if (v3)
  {
    datac_ObjClose(v3);
    a1[2] = 0;
  }
  uint64_t v4 = a1[11];
  if (v4)
  {
    extdata_ObjClose(v4);
    a1[11] = 0;
  }
  uint64_t v5 = a1[10];
  if (v5) {
    escseqs_ObjClose(v5);
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v7))
  {
    nuance_pcre_DeInit((void *)a1[12], a1[13]);
    nuance_pcre_ObjClose(a1[12], a1[13]);
    a1[12] = 0;
    *((_DWORD *)a1 + 26) = 0;
  }
  ppParam_ClearAllPPParameters(v2);
  heap_Free(*(void **)(v2 + 8), (uint64_t)a1);
  return 0;
}

uint64_t textpar_ObjReopen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2368741383;
  uint64_t v12 = 0;
  __s1 = 0;
  if (a3)
  {
    uint64_t v11 = 0;
    if ((InitRsrcFunction(a1, a2, &v12) & 0x80000000) == 0)
    {
      uint64_t v7 = v12;
      *a3 = v12;
      if ((paramc_ParamGetStr(*(void *)(v7 + 40), (uint64_t)"component_stop_not_reset", &__s1) & 0x80000000) == 0
        && __s1
        && !strcmp(__s1, "yes"))
      {
        escseqs_SetPosInOut(a3[10], 0, 0);
        paramc_ParamSetStr(*(void *)(v12 + 40), (uint64_t)"component_stop_not_reset", &byte_20D5A22AE);
      }
      uint64_t v8 = extdata_FreeData(a3[11]);
      if ((v8 & 0x80000000) != 0
        || (escseqs_GetPosInOut(a3[10], (_DWORD *)&v11 + 1, &v11), a3[10])
        && (uint64_t v8 = escseqs_ObjClose(a3[10]), (v8 & 0x80000000) != 0))
      {
        uint64_t v3 = v8;
      }
      else
      {
        uint64_t v3 = escseqs_ObjOpen(*(void *)(a3[1] + 8), a1, a2, a3[12], a3[13], a3 + 10);
        if ((v3 & 0x80000000) == 0)
        {
          escseqs_SetPosInOut(a3[10], SHIDWORD(v11), v11);
          return v3;
        }
      }
      textpar_ObjClose(a3);
    }
  }
  return v3;
}

uint64_t textpar_ProcessStart(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  if (!a1) {
    return 2368741383;
  }
  *(void *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 112) = log_GetLogLevel(*(void *)(*(void *)a1 + 32)) > 4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t result = escseqs_ProcessStart(*(void *)(a1 + 80), (_DWORD *)(a1 + 76));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"ppspellpausevalue", *(_DWORD *)(a1 + 76));
    if ((result & 0x80000000) == 0)
    {
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t result = datac_RequestBlock(*(void *)(a1 + 16), (unsigned __int16)aMETA[v5], 1u, &v7);
        if ((result & 0x80000000) != 0) {
          break;
        }
        v5 += 3;
        uint64_t v6 = v7;
        *(_WORD *)(v7 + 16) = 0;
        *(_DWORD *)(v6 + 20) = 0;
        if (v5 == 12) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t textpar_Process(uint64_t a1)
{
  if (a1)
  {
    if (!*(_DWORD *)(a1 + 116)
      || (*(void *)(a1 + 56) = 0,
          *(void *)(a1 + 64) = 0,
          *(_DWORD *)(a1 + 72) = 0,
          uint64_t v2 = escseqs_ProcessStart(*(void *)(a1 + 80), (_DWORD *)(a1 + 76)),
          (v2 & 0x80000000) == 0))
    {
      uint64_t v60 = 0;
      if (*(_DWORD *)(a1 + 56))
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          int v4 = datac_RequestBlock(*(void *)(a1 + 16), (unsigned __int16)aTAG[i], 1u, &v60);
          if (i != 2 && (v4 & 0x80000000) == 0) {
            *(_WORD *)(v60 + 16) = 0;
          }
        }
        goto LABEL_23;
      }
      uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1011, 1u, &v60);
      if ((v2 & 0x80000000) == 0)
      {
        uint64_t v6 = v60;
        if (*(unsigned __int16 *)(v60 + 16) >= 2u)
        {
          uint64_t v7 = (uint64_t *)(*(void *)(v60 + 8) + 112);
          unint64_t v8 = 1;
          do
          {
            if (*v7)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), *v7);
              *uint64_t v7 = 0;
              uint64_t v6 = v60;
            }
            ++v8;
            v7 += 8;
          }
          while (v8 < *(unsigned __int16 *)(v6 + 16));
        }
        for (uint64_t j = 0; j != 4; ++j)
        {
          int v10 = datac_RequestBlock(*(void *)(a1 + 16), (unsigned __int16)aAllTAG[j], 1u, &v60);
          if (j != 3 && (v10 & 0x80000000) == 0) {
            *(_WORD *)(v60 + 16) = 0;
          }
        }
LABEL_23:
        uint64_t v2 = textpar_CheckForEOF((void *)a1, 0, 0);
        if ((v2 & 0x80000000) == 0)
        {
          unsigned int v14 = (_DWORD *)(a1 + 60);
          uint64_t v15 = "entering textpar_loc_GetTextBlock(bBlockHasBeenRead=%d,bBlockMoreTextRequest=%d,bMoreTextRequest=%d)";
          unsigned __int16 v16 = "AFTER textpar_loc_GetTextBlock";
          __int16 v17 = "BEFORE escseqs_Process TEXTPAR_OUT_MRK_BLOCK";
          uint64_t v18 = "BEFORE escseqs_Process TEXTPAR_OUT_TXT_BLOCK";
          while (1)
          {
            uint64_t v60 = 0;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)v15, v11, v12, v13, *(unsigned int *)(a1 + 56));
            if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 72) && *(_DWORD *)(a1 + 68) == 1)
            {
              size_t __n = 0;
              int v19 = *(_DWORD *)(a1 + 60);
              uint64_t v2 = (*(uint64_t (**)(void, void, uint64_t, _DWORD *))(*(void *)(a1 + 24) + 88))(*(void *)(a1 + 32), *(void *)(a1 + 40), a1 + 48, v14);
              if ((v2 & 0x80000000) != 0) {
                return v2;
              }
              *(_DWORD *)(a1 + 56) = 1;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"pfReadDirectStart returns cTextBytesInStream %u bytes", v20, v21, v22, *(unsigned int *)(a1 + 60));
              uint64_t UInt = paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"ppresetlen", (unsigned int *)&__n);
              if ((UInt & 0x1FFF) == 0x14)
              {
                uint64_t v27 = 0;
                LODWORD(__n) = 0;
              }
              else
              {
                uint64_t v5 = UInt;
                if ((UInt & 0x80000000) != 0) {
                  return v5;
                }
                uint64_t v27 = __n;
              }
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"SSFT_PARAMC_PP_RESETLEN len is %u bytes", v24, v25, v26, v27);
              if (__n)
              {
                uint64_t v2 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 24) + 136))(*(void *)(a1 + 32), *(void *)(a1 + 40), (char *)&__n + 4);
                if ((v2 & 0x80000000) != 0) {
                  return v2;
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"pfGetPosition is %u bytes - sync marker position", v28, v29, v30, HIDWORD(__n));
                if (!*(_DWORD *)(a1 + 68))
                {
                  uint64_t v2 = escseqs_SetMarkerSyncPos(*(void *)(a1 + 80), SHIDWORD(__n));
                  if ((v2 & 0x80000000) != 0) {
                    return v2;
                  }
                }
              }
              else
              {
                uint64_t v2 = escseqs_SetReset(*(void *)(a1 + 80));
                if ((v2 & 0x80000000) != 0) {
                  return v2;
                }
              }
              if (*(_DWORD *)(a1 + 68) == 1 && v19 && v19 == *v14) {
                *(_DWORD *)(a1 + 72) = 1;
              }
              else {
                *(_DWORD *)(a1 + 68) = 0;
              }
            }
            uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1000, 1u, &v60);
            if ((v2 & 0x80000000) != 0) {
              return v2;
            }
            int v31 = *v14;
            if (*(_DWORD *)(v60 + 20)) {
              break;
            }
            int v32 = *(_DWORD *)(a1 + 64);
            unsigned int v33 = v31 - v32;
            if (v31 == v32)
            {
              if (!*(_DWORD *)(a1 + 72) && !*(_DWORD *)(a1 + 68))
              {
                *(_DWORD *)(a1 + 68) = 1;
                if (!v31) {
                  return 2368743424;
                }
                if (!*(_DWORD *)(a1 + 116)) {
                  return 2368743424;
                }
                uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40));
                if ((v2 & 0x80000000) == 0) {
                  return 2368743424;
                }
                return v2;
              }
              *(_DWORD *)(v60 + 20) = 1;
            }
            else
            {
              int v34 = v14;
              int v35 = v18;
              size_t v36 = v15;
              uint64_t v37 = v17;
              uint64_t v38 = v16;
              if (*(_DWORD *)(a1 + 116)) {
                unsigned __int16 v39 = v31 - v32;
              }
              else {
                unsigned __int16 v39 = 128;
              }
              uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1000, v39, &v60);
              if ((v2 & 0x80000000) != 0) {
                return v2;
              }
              uint64_t v40 = v60;
              if (*(_WORD *)(v60 + 16))
              {
                uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1000, (unsigned __int16)(*(_WORD *)(v60 + 16) + v39), &v60);
                if ((v2 & 0x80000000) != 0) {
                  return v2;
                }
                uint64_t v40 = v60;
              }
              uint64_t v41 = *(void *)(v40 + 8);
              if (v33 <= v39)
              {
                HIDWORD(__n) = v33;
              }
              else
              {
                HIDWORD(__n) = v39;
                utf8_GetPreviousValidUtf8Offset(*(void *)(a1 + 48) + *(unsigned int *)(a1 + 64), (unsigned int *)&__n + 1);
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"adjust bytes read to align with character boundary (IN=%d, OUT=%d)", v42, v43, v44, v39);
                uint64_t v40 = v60;
                unsigned int v33 = HIDWORD(__n);
              }
              unsigned __int16 v16 = v38;
              __int16 v17 = v37;
              uint64_t v15 = v36;
              uint64_t v18 = v35;
              unsigned int v14 = v34;
              memcpy((void *)(v41 + *(unsigned __int16 *)(v40 + 16)), (const void *)(*(void *)(a1 + 48) + *(unsigned int *)(a1 + 64)), v33);
              if (!utf8_CheckValid(v41 + *(unsigned __int16 *)(v60 + 16), v33))
              {
                log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 1933, "%s%s", v45, v46, v47, v48, "Invalid UTF-8 character sequence discovered");
                return 2368741637;
              }
              __int16 v49 = WORD2(__n);
              *(_DWORD *)(a1 + 64) += HIDWORD(__n);
              *(_WORD *)(v60 + 16) += v49;
            }
            if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)a1 + 32)) && !*(_DWORD *)(a1 + 68)) {
              log_OutTraceTuningDataBinary(*(void *)(*(void *)a1 + 32), 32, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-8",
            }
                *(void *)(a1 + 48),
                *(unsigned int *)(a1 + 60));
            if (*(_DWORD *)(a1 + 116) == 1)
            {
              *(unsigned char *)(*(void *)(a1 + 48) + *(unsigned int *)(a1 + 64)) = 0;
              uint64_t v2 = paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"rettt_rewritten_text", *(char **)(a1 + 48));
              if ((v2 & 0x80000000) != 0) {
                return v2;
              }
            }
            marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1000, (uint64_t)v16);
            marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)v17, 0, 0, 0);
            marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1010, (uint64_t)v18);
            uint64_t v5 = escseqs_Process(*(void *)(a1 + 80), *(void *)(a1 + 16));
            marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)"AFTER escseqs_Process TEXTPAR_OUT_MRK_BLOCK", 0, 0, 0);
            marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1010, (uint64_t)"AFTER escseqs_Process TEXTPAR_OUT_TXT_BLOCK");
            if ((v5 & 0x1FFF) != 9)
            {
              if ((v5 & 0x80000000) != 0) {
                return v5;
              }
              uint64_t v60 = 0;
              uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1010, 1u, &v60);
              if ((v2 & 0x80000000) == 0)
              {
                if (*(_WORD *)(v60 + 16) && *(_DWORD *)(a1 + 112) == 1)
                {
                  if (*(unsigned __int16 *)(v60 + 16) >= 0x400u) {
                    size_t v50 = 1024;
                  }
                  else {
                    size_t v50 = *(unsigned __int16 *)(v60 + 16);
                  }
                  unsigned __int16 v51 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v50 + 1));
                  if (!v51) {
                    return 2368741386;
                  }
                  uint64_t v52 = (uint64_t)v51;
                  strncpy(v51, *(const char **)(v60 + 8), v50)[v50] = 0;
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"(Txt) (text processed) (tag=%d) len=%d (UTF8 *) \"%s\"", v53, v54, v55, 1010);
                  heap_Free(*(void **)(*(void *)a1 + 8), v52);
                }
                uint64_t v56 = *(void *)(a1 + 16);
                uint64_t v60 = 0;
                uint64_t v2 = datac_RequestBlock(v56, 1011, 1u, &v60);
                if ((v2 & 0x80000000) == 0)
                {
                  uint64_t v2 = marker_loc_FilterSyncMarkers(v60);
                  if ((v2 & 0x80000000) == 0)
                  {
                    if (!*(_DWORD *)(a1 + 116)) {
                      return 0;
                    }
                    uint64_t v2 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 60));
                    if ((v2 & 0x80000000) == 0) {
                      return 0;
                    }
                  }
                }
              }
              return v2;
            }
          }
          if (!v31
            || (uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40)), (v2 & 0x80000000) == 0))
          {
            int v57 = ppParam_ClearAllPPParameters(*(void *)a1);
            if (v57 < 0) {
              return v57;
            }
            else {
              return 2368741399;
            }
          }
        }
      }
    }
    return v2;
  }
  return 2368741383;
}

uint64_t pp_text_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2368741377;
  }
  uint64_t result = 0;
  *a2 = &IPPTextParser;
  return result;
}

uint64_t pp_text_parser_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2368741383;
  uint64_t v11 = 0;
  if (a3)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      uint64_t v8 = heap_Calloc(*(void **)(v11 + 8), 1, 16);
      if (v8)
      {
        uint64_t v9 = v8;
        *(void *)uint64_t v8 = v11;
        uint64_t v3 = textpar_ClassOpen(a1, a2, (uint64_t **)(v8 + 8));
        if ((v3 & 0x80000000) != 0)
        {
          pp_text_parser_ClassClose(*(void *)a3, *(void *)(a3 + 8));
        }
        else
        {
          *(void *)a3 = v9;
          *(_DWORD *)(a3 + 8) = 29953;
        }
      }
      else
      {
        return 2368741386;
      }
    }
  }
  return v3;
}

uint64_t pp_text_parser_ClassClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 29953, 16);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = textpar_ClassClose(*(uint64_t **)(a1 + 8));
  if ((v5 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), a1);
    safeh_GetNullHandle();
  }
  return v5;
}

uint64_t pp_text_parser_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  long long v23 = 0;
  uint64_t v5 = 2368741383;
  uint64_t v21 = 0;
  if (a5 && a1)
  {
    uint64_t v10 = safeh_HandleCheck(a1, a2, 29953, 16);
    if ((v10 & 0x80000000) != 0)
    {
      return v10;
    }
    else if ((InitRsrcFunction(a3, a4, &v23) & 0x80000000) == 0)
    {
      unsigned int v14 = v23;
      uint64_t v15 = v23[4];
      if (v15)
      {
        log_OutText(v15, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjOpen", v11, v12, v13, v20);
        unsigned int v14 = v23;
      }
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      uint64_t v16 = heap_Alloc(v14[1], 96);
      if (v16)
      {
        uint64_t v17 = v16;
        *(_OWORD *)uint64_t v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 64) = 0u;
        *(_OWORD *)(v16 + 80) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(void *)uint64_t v16 = a3;
        *(void *)(v16 + 8) = a4;
        *(_DWORD *)(v16 + 88) = 0;
        *(void *)(v16 + 16) = a1;
        uint64_t Object = objc_GetObject(v23[6], (uint64_t)"SYNTHSTREAM", &v22);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_17;
        }
        *(void *)(v17 + 24) = *(void *)(v22 + 8);
        *(_DWORD *)(v17 + 88) = 0;
        if ((paramc_ParamGetStr(v23[5], (uint64_t)"clcpppipelinemode", &v21) & 0x80000000) == 0 && v21 && *v21) {
          *(_DWORD *)(v17 + 88) = 1;
        }
        uint64_t Object = textpar_ObjOpen(*(void *)(a1 + 8), a3, a4, *(void *)(v17 + 24), (uint64_t **)(v17 + 80), *(_DWORD *)(v17 + 88));
        if ((Object & 0x80000000) != 0)
        {
LABEL_17:
          uint64_t v5 = Object;
          pp_text_parser_ObjClose(v17, 24357);
        }
        else
        {
          uint64_t v5 = 0;
          *(void *)a5 = v17;
          *(void *)(a5 + 8) = 24357;
        }
      }
      else
      {
        return 2368741386;
      }
    }
  }
  return v5;
}

uint64_t pp_text_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = 2368741383;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjClose", v4, v5, v6, v11);
    }
    uint64_t v8 = *(uint64_t **)(a1 + 80);
    if (v8) {
      textpar_ObjClose(v8);
    }
    uint64_t v9 = v12;
    if (*(void *)(a1 + 24))
    {
      objc_ReleaseObject(*(void *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v12;
    }
    heap_Free(*(void **)(v9 + 8), a1);
    return 0;
  }
  return v3;
}

uint64_t pp_text_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = 2368741383;
  uint64_t v13 = 0;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v8 = inited;
      uint64_t v9 = *(void *)(v13 + 32);
      if (v9) {
        log_OutText(v9, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjReopen", v5, v6, v7, v12);
      }
      uint64_t v10 = *(uint64_t **)(a1 + 80);
      if (v10)
      {
        uint64_t v3 = textpar_ObjReopen(*(_WORD **)a1, *(void *)(a1 + 8), v10);
        if ((v3 & 0x80000000) != 0) {
          *(void *)(a1 + 80) = 0;
        }
      }
      else
      {
        return v8;
      }
    }
  }
  return v3;
}

uint64_t pp_text_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = 0;
  uint64_t v7 = 2368741383;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v35) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v35 + 32);
    if (v11) {
      log_OutText(v11, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ProcessStart", v8, v9, v10, v33);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 24) + 64))(a3, a4, 211, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 32);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v27 = v12;
      int v34 = 0;
      if ((paramc_ParamGetStr(*(void *)(v35 + 40), (uint64_t)"inputmimetype", &v34) & 0x80000000) == 0 && v34 && *v34)
      {
        log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1903, "%s%s", v28, v29, v30, v31, "mimeContentType");
        return 2368741643;
      }
      else
      {
        log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1900, 0, v28, v29, v30, v31, v33);
        return v27;
      }
    }
    else
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 24) + 64))(a3, a4, 211, "text/plain;charset=utf-8",
              0,
              2,
              a1 + 48);
      if ((v13 & 0x80000000) != 0)
      {
        uint64_t v7 = v13;
        log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1901, "%s%s", v14, v15, v16, v17, "mimeType");
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 24);
        int v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v18 + 64);
        uint64_t v20 = (*(uint64_t (**)(void))(v18 + 168))();
        uint64_t v21 = v19(a3, a4, 211, "application/x-realspeak-int-markers-pp;version=4.0", v20, 1, a1 + 64);
        if ((v21 & 0x80000000) != 0)
        {
          uint64_t v7 = v21;
          log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1902, 0, v22, v23, v24, v25, v33);
        }
        else
        {
          int v26 = textpar_ProcessStart(*(void *)(a1 + 80), *(void *)(a1 + 32), *(void *)(a1 + 40));
          return v26 & (v26 >> 31);
        }
      }
    }
  }
  return v7;
}

uint64_t pp_text_parser_Process(_WORD **a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2368741383;
  uint64_t v24 = 0;
  int v23 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1)
  {
    if (!a1[4]) {
      return 2368741393;
    }
    int v22 = 0;
    if ((InitRsrcFunction(*a1, (int)a1[1], &v24) & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(v24 + 32);
      if (v11) {
        log_OutText(v11, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_Process", v8, v9, v10, v21);
      }
      *a5 = 2;
      uint64_t v12 = textpar_Process((uint64_t)a1[10]);
      uint64_t v7 = v12;
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v16 = (uint64_t)a1[6];
        if (!v16
          || (uint64_t v7 = textpar_WriteTextAndMarkers((uint64_t)a1[10], v16, (uint64_t)a1[7], (uint64_t)a1[8], (uint64_t)a1[9]),
              (v7 & 0x80000000) == 0))
        {
          if (*((_DWORD *)a1 + 22) || textpar_AllTextProcessed((uint64_t)a1[10]))
          {
            *a5 = 1;
            if (!*((_DWORD *)a1 + 22))
            {
              uint64_t v17 = pp_text_parser_loc_CloseOutStreams(a1);
              if ((v17 & 0x80000000) != 0) {
                return v17;
              }
              uint64_t v7 = 0;
            }
          }
        }
        goto LABEL_30;
      }
      if ((v12 & 0x1FFF) != 0x800)
      {
        if ((v12 & 0x1FFF) != 0x17)
        {
          if (!*((_DWORD *)a1 + 22)) {
            pp_text_parser_loc_CloseOutStreams(a1);
          }
          *a5 = 1;
          goto LABEL_30;
        }
        *a5 = 1;
        uint64_t v18 = pp_text_parser_loc_CloseOutStreams(a1);
        goto LABEL_20;
      }
      *a5 = 0;
      textpar_CheckForEOF(a1[10], &v22, &v23);
      if (v23)
      {
        *a5 = 1;
        uint64_t v18 = pp_text_parser_loc_CloseOutStreams(a1);
        if ((v18 & 0x80000000) != 0)
        {
LABEL_20:
          uint64_t v7 = v18;
          goto LABEL_30;
        }
        LODWORD(v7) = 0;
      }
      if (*((_DWORD *)a1 + 22)) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 0;
      }
LABEL_30:
      uint64_t v19 = *(void *)(v24 + 32);
      if (v19) {
        log_OutText(v19, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Leaving pp_text_parser_Process peResults=%d fRet=%d", v13, v14, v15, *a5);
      }
    }
  }
  return v7;
}

uint64_t pp_text_parser_ProcessStop(_WORD **a1, int a2)
{
  uint64_t v3 = 2368741383;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(kaldi::nnet1::Component **)(v12 + 32);
    if (v7) {
      uint64_t v7 = (kaldi::nnet1::Component *)log_OutText((uint64_t)v7, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ProcessStop", v4, v5, v6, v11);
    }
    uint64_t IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v7);
    if ((IsUpdatable & 0x80000000) != 0) {
      return IsUpdatable;
    }
    uint64_t IsUpdatable = pp_text_parser_loc_CloseOutStreams(a1);
    if ((IsUpdatable & 0x80000000) != 0) {
      return IsUpdatable;
    }
    uint64_t v9 = a1[4];
    if (!v9) {
      return 0;
    }
    uint64_t IsUpdatable = (*((uint64_t (**)(_WORD *, _WORD *))a1[3] + 9))(v9, a1[5]);
    if ((IsUpdatable & 0x80000000) != 0)
    {
      return IsUpdatable;
    }
    else
    {
      uint64_t v3 = 0;
      a1[4] = 0;
      *((_DWORD *)a1 + 10) = 0;
    }
  }
  return v3;
}

uint64_t pp_text_parser_loc_CloseOutStreams(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1[3] + 72))(v2, a1[9]);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    a1[8] = 0;
    *((_DWORD *)a1 + 18) = 0;
  }
  uint64_t result = a1[6];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1[3] + 72))(result, a1[7]);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      a1[6] = 0;
      *((_DWORD *)a1 + 14) = 0;
    }
  }
  return result;
}

uint64_t sentpar_clearReadOutParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = paramc_ParamRemove(*(void *)(a1 + 40), *(void *)((char *)&aSENTPARTAG2PARAM + v2 + 8));
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14) {
      break;
    }
    v2 += 16;
    if (v2 == 64) {
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_clearPersistentParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = paramc_ParamRemove(*(void *)(a1 + 40), (uint64_t)off_264109430[v2]);
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14) {
      break;
    }
    if (++v2 == 5) {
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_clearAllParameters(uint64_t a1)
{
  uint64_t result = sentpar_clearReadOutParameters(a1);
  if ((result & 0x80000000) == 0)
  {
    return sentpar_clearPersistentParameters(a1);
  }
  return result;
}

uint64_t sentpar_loc_SetReadoutMarkersAsParameters(int *a1)
{
  v34[2] = *MEMORY[0x263EF8340];
  uint64_t v33 = 0;
  v34[0] = 0;
  v34[1] = 0;
  if ((datac_RequestBlock(*((void *)a1 + 1), 1012, 1u, &v33) & 0x80000000) != 0) {
    return 2369789959;
  }
  uint64_t v32 = *(void *)(v33 + 8);
  uint64_t v2 = datac_RequestBlock(*((void *)a1 + 1), 1021, 1u, &v33);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v33;
    LODWORD(v4) = *(unsigned __int16 *)(v33 + 16);
    if (v4 >= 2)
    {
      uint64_t v5 = *(void *)(v33 + 8);
      for (unint64_t i = 1; i < v4; ++i)
      {
        unint64_t v7 = v5 + (i << 6);
        unsigned int v10 = *(_DWORD *)(v7 + 20);
        uint64_t v9 = (int *)(v7 + 20);
        uint64_t v8 = v10;
        uint64_t v11 = (1 << v10) & 0x1080200080;
        if (v10 > 0x24 || v11 == 0) {
          goto LABEL_30;
        }
        uint64_t v13 = 0;
        uint64_t v14 = (uint64_t *)&off_264109460;
        while (*((_DWORD *)v14 - 2) != v8)
        {
          v13 += 4;
          v14 += 2;
          if (v13 == 16) {
            goto LABEL_30;
          }
        }
        if (*(_DWORD *)((char *)v34 + v13)) {
          goto LABEL_30;
        }
        unsigned int ArgOfLastOfType = marker_GetArgOfLastOfType(v5, (unsigned __int16)i, (unsigned __int16)v4, 0);
        if (marker_IsReadoutControlDefaultArg(*v9, ArgOfLastOfType, v32, a1[47]))
        {
          uint64_t v16 = paramc_ParamRemove(*(void *)(*(void *)a1 + 40), *v14);
          uint64_t v2 = 0;
          if ((v16 & 0x80000000) != 0 && (v16 & 0x1FFF) != 0x14) {
            return v16;
          }
          goto LABEL_29;
        }
        int v17 = *v9;
        if (*v9 > 30)
        {
          if (v17 == 36)
          {
LABEL_26:
            uint64_t v21 = (const char *)(v32 + ArgOfLastOfType);
            size_t v22 = (unsigned __int16)strlen(v21);
            int v23 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v22 + 1);
            if (!v23) {
              return 2369789962;
            }
            uint64_t v24 = v23;
            strncpy(v23, v21, v22)[v22] = 0;
            uint64_t v2 = paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), *v14, v24);
            uint64_t v28 = *(void *)a1;
            if ((v2 & 0x80000000) != 0)
            {
              heap_Free(*(void **)(v28 + 8), (uint64_t)v24);
              return v2;
            }
            log_OutText(*(void *)(v28 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"SET PARAM marker:%d param=%s val=%s", v25, v26, v27, v8);
            heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v24);
            goto LABEL_29;
          }
          if (v17 == 31)
          {
LABEL_24:
            uint64_t v2 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), *v14, ArgOfLastOfType);
            if ((v2 & 0x80000000) != 0) {
              return v2;
            }
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"SET PARAM marker:%d param=%s val=%u", v18, v19, v20, v8);
          }
        }
        else
        {
          if (v17 == 7) {
            goto LABEL_24;
          }
          if (v17 == 21) {
            goto LABEL_26;
          }
        }
LABEL_29:
        *(_DWORD *)((char *)v34 + v13) = 1;
        uint64_t v3 = v33;
LABEL_30:
        unint64_t v4 = *(unsigned __int16 *)(v3 + 16);
      }
    }
    uint64_t v29 = 0;
    for (uint64_t j = (uint64_t *)&off_264109460; ; j += 2)
    {
      if (!*(_DWORD *)((char *)v34 + v29))
      {
        uint64_t v16 = paramc_ParamRemove(*(void *)(*(void *)a1 + 40), *j);
        uint64_t v2 = 0;
        if ((v16 & 0x80000000) != 0 && (v16 & 0x1FFF) != 0x14) {
          break;
        }
      }
      v29 += 4;
      if (v29 == 16) {
        return v2;
      }
    }
    return v16;
  }
  return v2;
}

uint64_t sentpar_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v20 = 0;
  int v19 = 0;
  uint64_t v5 = 2369789959;
  if (a4 && (InitRsrcFunction(a1, a2, &v20) & 0x80000000) == 0)
  {
    *a4 = 0;
    uint64_t v11 = heap_Alloc(*(void *)(v20 + 8), 248);
    if (v11)
    {
      uint64_t v12 = v11;
      *(void *)(v11 + 240) = 0;
      *(_OWORD *)(v11 + 192) = 0u;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 176) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      uint64_t v13 = (uint64_t *)(v11 + 224);
      *(void *)uint64_t v11 = v20;
      *(void *)(v11 + 16) = a3;
      *(void *)(v11 + 224) = 0;
      *(_DWORD *)(v11 + 192) = 0;
      *(_WORD *)(v11 + 196) = 0;
      *(_DWORD *)(v11 + 240) = a5;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_DWORD *)(v11 + 140) = 0;
      if ((int)paramc_ParamGetUInt(*(void *)(v20 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v19) < 0) {
        unsigned __int16 v14 = 30;
      }
      else {
        unsigned __int16 v14 = v19;
      }
      if ((int)paramc_ParamGetUInt(*(void *)(v20 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v19) < 0) {
        __int16 v15 = 50;
      }
      else {
        __int16 v15 = v19;
      }
      uint64_t v16 = extdata_ObjOpen(a1, a2, v13, 212);
      if ((v16 & 0x80000000) == 0)
      {
        *(void *)(v12 + 208) = 0;
        *(_DWORD *)(v12 + 216) = 0;
        uint64_t v16 = nuance_pcre_ObjOpen(a1, a2, v12 + 208);
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v16 = nuance_pcre_Init(*(void **)(v12 + 208), *(void *)(v12 + 216), v14, v15);
          if ((v16 & 0x80000000) == 0)
          {
            uint64_t v16 = sentpar_loc_OpenParts(a1, a2, (uint64_t *)v12);
            if ((v16 & 0x80000000) == 0)
            {
              uint64_t v16 = datac_ObjOpen(a1, a2, (uint64_t *)(v12 + 8), 212);
              if ((v16 & 0x80000000) == 0)
              {
                uint64_t v17 = 0;
                while (1)
                {
                  datac_RegisterBlock(*(void *)(v12 + 8), (unsigned __int16)aMETA_0[v17], (unsigned __int16)aMETA_0[v17 + 1], (unsigned __int16)aMETA_0[v17 + 2]);
                  if ((v16 & 0x80000000) != 0) {
                    break;
                  }
                  v17 += 3;
                  if (v17 == 18)
                  {
                    *a4 = v12;
                    return sentpar_clearAllParameters(v20);
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v5 = v16;
      sentpar_ObjClose(a1, a2, (void *)v12);
    }
    else
    {
      return 2369789962;
    }
  }
  return v5;
}

uint64_t sentpar_ObjClose(_WORD *a1, int a2, void *a3)
{
  uint64_t v3 = 2369789959;
  uint64_t v11 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v11) & 0x80000000) == 0)
  {
    uint64_t v5 = a3[1];
    if (v5) {
      datac_ObjClose(v5);
    }
    uint64_t v6 = a3[28];
    if (v6)
    {
      extdata_ObjClose(v6);
      a3[28] = 0;
    }
    uint64_t v7 = a3[25];
    if (v7) {
      sparser_ObjClose(v7);
    }
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a3[26], a3[27], NullHandle, v9))
    {
      nuance_pcre_DeInit((void *)a3[26], a3[27]);
      nuance_pcre_ObjClose(a3[26], a3[27]);
    }
    sentpar_clearAllParameters(v11);
    heap_Free(*(void **)(v11 + 8), (uint64_t)a3);
    return 0;
  }
  return v3;
}

uint64_t sentpar_loc_OpenParts(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = extdata_LoadSpecificData(a3[28], "PPSE", "BRKD");
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sparser_ObjOpen(a1, a2, a3[26], a3[27], a3 + 25, a3[28]);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v7 = a3[28];
      return extdata_LoadData(v7, "PPSE");
    }
  }
  return result;
}

uint64_t sentpar_ObjReopen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2369789959;
  __s1 = 0;
  uint64_t v13 = 0;
  if (a3)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v13);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v8 = inited;
      if ((paramc_ParamGetStr(*(void *)(v13 + 40), (uint64_t)"pipelineswitchcomponent", &__s1) & 0x80000000) != 0
        || !__s1
        || (uint64_t v3 = v8, !strcmp(__s1, "pp/sent_parser")))
      {
        uint64_t v9 = extdata_FreeData(a3[28]);
        if ((v9 & 0x80000000) != 0 || (v10 = a3[25]) != 0 && (uint64_t v9 = sparser_ObjClose(v10), (v9 & 0x80000000) != 0))
        {
          uint64_t v3 = v9;
LABEL_12:
          sentpar_ObjClose(a1, a2, a3);
          return v3;
        }
        uint64_t v3 = sentpar_loc_OpenParts(a1, a2, a3);
        if ((v3 & 0x80000000) != 0) {
          goto LABEL_12;
        }
      }
    }
  }
  return v3;
}

uint64_t sentpar_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unsigned __int16 v14 = 0;
  if (!a2) {
    return 2369789959;
  }
  *(void *)(a2 + 24) = a3;
  *(_DWORD *)(a2 + 32) = a4;
  *(void *)(a2 + 40) = a5;
  *(_DWORD *)(a2 + 48) = a6;
  paramc_ParamSetUInt(*(void *)(*(void *)a2 + 40), (uint64_t)"finalsentencefound", 0);
  BOOL v9 = (int)paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"eosdetection", (int *)&v16 + 1) < 0 || HIDWORD(v16) != 0;
  *(_DWORD *)(a2 + 232) = v9;
  if ((paramc_ParamGet(*(void *)(a1 + 40), (uint64_t)"readmode", &v14, 0) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 196) = *v14 - 48;
  }
  *(_DWORD *)(a2 + 236) = log_GetLogLevel(*(void *)(a1 + 32)) > 4;
  *(_DWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 192) = 1024;
  if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"ppreaddirectsize", (unsigned int *)&v16) & 0x80000000) == 0
    && v16 >= 0x100)
  {
    *(_DWORD *)(a2 + 192) = v16;
  }
  if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"ppspellpausevalue", (unsigned int *)(a2 + 188)) & 0x80000000) != 0) {
    *(_DWORD *)(a2 + 188) = 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t result = datac_RequestBlock(*(void *)(a2 + 8), (unsigned __int16)aMETA_0[v10], 1u, &v15);
    if ((result & 0x80000000) != 0) {
      break;
    }
    v10 += 3;
    uint64_t v12 = v15;
    *(_WORD *)(v15 + 16) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    if (v10 == 18)
    {
      int v13 = sparser_ProcessStart(*(void *)(a2 + 200), *(_DWORD *)(a2 + 188));
      return v13 & (v13 >> 31);
    }
  }
  return result;
}

uint64_t sentpar_ProcessEnd(uint64_t a1, _WORD *a2, int a3)
{
  __s1 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  if ((InitRsrcFunction(a2, a3, &v8) & 0x80000000) != 0) {
    return 2369789959;
  }
  if ((paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"pipelineswitchcomponent", &__s1) & 0x80000000) == 0
    && __s1
    && strcmp(__s1, "pp/sent_parser"))
  {
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
  }
  if ((paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"component_stop", &v6) & 0x80000000) == 0 && v6)
  {
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
    paramc_ParamSetStr(*(void *)(v8 + 40), (uint64_t)"component_stop", &byte_20D5A22AE);
  }
  if (!__s1)
  {
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
  }
  int v4 = sentpar_loc_PrepareDataContainers((uint64_t *)a1, 0);
  return v4 & (v4 >> 31);
}

uint64_t sentpar_loc_PrepareDataContainers(uint64_t *a1, int a2)
{
  uint64_t v14 = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      int v4 = datac_RequestBlock(a1[1], (unsigned __int16)aTAG_0[i], 1u, &v14);
      if (i != 2 && (v4 & 0x80000000) == 0) {
        *(_WORD *)(v14 + 16) = 0;
      }
    }
    return 0;
  }
  uint64_t result = datac_RequestBlock(a1[1], 1011, 1u, &v14);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v6 = v14;
    if (*(unsigned __int16 *)(v14 + 16) >= 2u)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v14 + 8) + 112);
      unint64_t v8 = 1;
      do
      {
        if (*v7)
        {
          heap_Free(*(void **)(*a1 + 8), *v7);
          *uint64_t v7 = 0;
          uint64_t v6 = v14;
        }
        ++v8;
        v7 += 8;
      }
      while (v8 < *(unsigned __int16 *)(v6 + 16));
    }
    uint64_t result = datac_RequestBlock(a1[1], 1021, 1u, &v14);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v9 = v14;
      if (*(unsigned __int16 *)(v14 + 16) >= 2u)
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v14 + 8) + 112);
        unint64_t v11 = 1;
        do
        {
          if (*v10)
          {
            heap_Free(*(void **)(*a1 + 8), *v10);
            uint64_t *v10 = 0;
            uint64_t v9 = v14;
          }
          ++v11;
          v10 += 8;
        }
        while (v11 < *(unsigned __int16 *)(v9 + 16));
      }
      for (uint64_t j = 0; j != 5; ++j)
      {
        int v13 = datac_RequestBlock(a1[1], (unsigned __int16)aAllTAG_0[j], 1u, &v14);
        if (j != 2 && (v13 & 0x80000000) == 0) {
          *(_WORD *)(v14 + 16) = 0;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_Process(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v156 = *MEMORY[0x263EF8340];
  int v147 = 1;
  uint64_t v146 = 0;
  int v145 = 0;
  uint64_t v144 = 0;
  int v138 = 0;
  int v139 = 0;
  uint64_t v137 = 0;
  int v136 = 0;
  if (!a1) {
    return 2369789959;
  }
  long long v142 = 0u;
  long long v143 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_Process()", a6, a7, a8, v122);
  DWORD1(v141) = 0;
  if (*(_DWORD *)(a1 + 240))
  {
    int v12 = 0;
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    *(void *)(a1 + 84) = 0;
    *(void *)(a1 + 76) = 0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 64);
  }
  uint64_t InputStreams = sentpar_loc_PrepareDataContainers((uint64_t *)a1, v12);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_GetTextBlockAndMarkers(bHaveReadInputStreams=%d,bBlockMoreInputRequest=%d,bMoreInputRequest=%d)", v15, v16, v17, *(unsigned int *)(a1 + 64));
  if (!*(_DWORD *)(a1 + 64) || !*(_DWORD *)(a1 + 88) && *(_DWORD *)(a1 + 84) == 1)
  {
    uint64_t InputStreams = sentpar_loc_ReadInputStreams(a1);
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    *(_DWORD *)(a1 + 64) = 1;
    goto LABEL_12;
  }
  *(void *)&long long v152 = 0;
  uint64_t InputStreams = datac_RequestBlock(*(void *)(a1 + 8), 1010, 1u, &v152);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  if (*(_DWORD *)(v152 + 20))
  {
    if (*(_DWORD *)(a1 + 68))
    {
      uint64_t InputStreams = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32));
      if ((InputStreams & 0x80000000) != 0) {
        return InputStreams;
      }
    }
    if (*(_DWORD *)(a1 + 104))
    {
      uint64_t InputStreams = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48));
      if ((InputStreams & 0x80000000) != 0) {
        return InputStreams;
      }
    }
    uint64_t InputStreams = sentpar_clearAllParameters(*(void *)a1);
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_CheckIfAllDataProcessed(return TTSEG_PROCESSING_COMP_RESULTS_FULL)", v70, v71, v72, v123);
    return 2369789975;
  }
  uint64_t v73 = *(unsigned int *)(a1 + 68);
  if (v73 == *(_DWORD *)(a1 + 76))
  {
    int v74 = *(_DWORD *)(a1 + 104);
    if (v74 == *(_DWORD *)(a1 + 108))
    {
      if (*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84))
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"FINISHED PROCESSING INPUT STREAM", v33, v34, v35, v123);
        uint64_t v32 = sentpar_loc_FlushStreamsAndReturn(a1, a3, a4);
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 84) = 1;
      if (*(_DWORD *)(a1 + 240))
      {
        if (!v73)
        {
LABEL_102:
          if (v74)
          {
            uint64_t InputStreams = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48));
            if ((InputStreams & 0x80000000) != 0) {
              return InputStreams;
            }
          }
          goto LABEL_104;
        }
        uint64_t InputStreams = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32), v73);
        if ((InputStreams & 0x80000000) != 0) {
          return InputStreams;
        }
        if (*(_DWORD *)(a1 + 240))
        {
          int v74 = *(_DWORD *)(a1 + 104);
          goto LABEL_102;
        }
      }
LABEL_104:
      uint64_t v76 = *(void *)(*(void *)a1 + 32);
      unsigned int v77 = "issue more text request (cTextBytesAvailable==0)- TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
      goto LABEL_126;
    }
  }
  uint64_t InputStreams = sentpar_loc_ReadInputStreams(a1);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
LABEL_12:
  uint64_t InputStreams = sentpar_loc_SetUpTextBlock(a1, v18, v19, v20, v21, v22, v23, v24);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  uint64_t v32 = sentpar_loc_SetUpMarkerBlocks(a1, v25, v26, v27, v28, v29, v30, v31);
LABEL_14:
  uint64_t v13 = v32;
  if ((v32 & 0x80000000) != 0) {
    return v13;
  }
  if (!*(_DWORD *)(a1 + 240) && !*(_DWORD *)(a1 + 88))
  {
    unsigned int v75 = *(_DWORD *)(a1 + 68);
    if (v75 <= 0x1FF && v75 > *(_DWORD *)(a1 + 72))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 84) = 1;
      *(_DWORD *)(a1 + 72) = v75;
      uint64_t v76 = *(void *)(*(void *)a1 + 32);
      unsigned int v77 = "issue more text request as text block received is less than SENTPAR_BLOCK_SIZE  - TTSEG_PROCESSING_COMP_RESU"
            "LTS_NONE_NEED_MORE_INPUT";
LABEL_126:
      log_OutText(v76, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v77, v33, v34, v35, v123);
      return 2369792000;
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 68);
  unsigned int v151 = 0;
  long long v152 = 0uLL;
  int v150 = 0;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  uint64_t InputStreams = datac_RequestBlock(*(void *)(a1 + 8), 1011, 1u, &v149);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  uint64_t v134 = *(void *)(v149 + 8);
  uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 8), 1012, 1u, &v148);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (!*(_DWORD *)(a1 + 240))
  {
    uint64_t v128 = a4;
    uint64_t v129 = a2;
    uint64_t v36 = 0;
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    unsigned int v131 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v130 = *(unsigned __int16 *)(v148 + 16);
    while (1)
    {
      uint64_t v39 = aSENTPARTAG2PARAM_0[v36];
      if ((int)v39 > 30)
      {
        if (v39 == 36) {
          goto LABEL_29;
        }
        if (v39 != 31) {
          goto LABEL_53;
        }
      }
      else if (v39 != 7)
      {
        if (v39 != 21) {
          goto LABEL_53;
        }
LABEL_29:
        uint64_t v135 = v37;
        uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), *(void *)&aSENTPARTAG2PARAM_0[v36 + 2], &v150);
        int v48 = Str & 0x1FFF;
        if (v48 == 20)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = Str;
          if ((Str & 0x80000000) != 0) {
            goto LABEL_54;
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"GET PARAM marker:%d param=%s val=%s", v45, v46, v47, v39);
          size_t v50 = (unsigned __int16)strlen(v150);
          unsigned __int16 v51 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v50 + 1);
          if (!v51) {
            return 2369789962;
          }
          uint64_t v38 = v51;
          strncpy(v51, v150, v50)[v50] = 0;
          if (*(_WORD *)(v149 + 16))
          {
            LODWORD(v133) = *(_DWORD *)(v134 + 32);
            HIDWORD(v133) = *(_DWORD *)(v134 + 24);
          }
          else
          {
            uint64_t v133 = 0;
          }
          uint64_t v132 = v39 | 0x100000000;
        }
        paramc_ParamRelease(*(void *)(*(void *)a1 + 40));
        int v150 = 0;
        if (v48 != 20)
        {
          __int16 v49 = *(_WORD *)(v149 + 16);
          LODWORD(v39) = v132;
          LODWORD(v37) = v135;
          goto LABEL_44;
        }
        goto LABEL_52;
      }
      uint64_t UInt = paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), *(void *)&aSENTPARTAG2PARAM_0[v36 + 2], &v151);
      if ((UInt & 0x1FFF) != 0x14)
      {
        uint64_t v13 = UInt;
        if ((UInt & 0x80000000) != 0) {
          goto LABEL_54;
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"GET PARAM marker:%d param=%s val=%d", v41, v42, v43, v39);
        __int16 v49 = *(_WORD *)(v149 + 16);
        if (v49)
        {
          LODWORD(v133) = *(_DWORD *)(v134 + 32);
          HIDWORD(v133) = *(_DWORD *)(v134 + 24);
        }
        else
        {
          uint64_t v133 = 0;
        }
        HIDWORD(v132) = 1;
        unsigned int v131 = v151;
LABEL_44:
        uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 8), 1011, (unsigned __int16)(v49 + 1), &v149);
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_54;
        }
        uint64_t v52 = (v37 + 1);
        uint64_t v53 = *(void *)(v149 + 8);
        unsigned int v54 = *(unsigned __int16 *)(v149 + 16);
        BOOL v55 = v54 >= (unsigned __int16)v52;
        signed int v56 = v54 - (unsigned __int16)v52;
        uint64_t v134 = v53;
        uint64_t v135 = v52;
        if (v56 != 0 && v55)
        {
          memmove((void *)(v53 + ((unint64_t)((unsigned __int16)v52 + 1) << 6)), (const void *)(v53 + ((unint64_t)(unsigned __int16)v52 << 6)), (uint64_t)v56 << 6);
          uint64_t v53 = v134;
        }
        uint64_t v57 = v53 + ((unint64_t)(unsigned __int16)v52 << 6);
        *(_DWORD *)uint64_t v57 = HIDWORD(v132);
        *(_OWORD *)(v57 + 4) = v152;
        *(_DWORD *)(v57 + 20) = v39;
        *(_DWORD *)(v57 + 24) = HIDWORD(v133);
        *(_DWORD *)(v57 + 28) = 0;
        *(_DWORD *)(v57 + 32) = v133;
        *(_DWORD *)(v57 + 36) = 0;
        *(_DWORD *)(v57 + 40) = v131;
        *(_DWORD *)(v57 + 44) = 0;
        *(void *)(v57 + 48) = 0;
        *(void *)(v57 + 56) = 0;
        ++*(_WORD *)(v149 + 16);
        if (v38)
        {
          __int16 v58 = strlen(v38);
          uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 8), 1012, (unsigned __int16)(v58 + *(_WORD *)(v148 + 16) + 1), &v148);
          if ((v13 & 0x80000000) != 0)
          {
            a4 = v128;
            a2 = v129;
LABEL_55:
            heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v38);
            break;
          }
          uint64_t v59 = *(void *)(v148 + 8);
          *(_DWORD *)(v134 + ((unint64_t)(unsigned __int16)v52 << 6) + 40) = (unsigned __int16)v130;
          unsigned __int16 v60 = strlen(v38);
          memcpy((void *)(v59 + (unsigned __int16)v130), v38, v60);
          *(unsigned char *)(v59 + (unsigned __int16)strlen(v38) + (unint64_t)(unsigned __int16)v130) = 0;
          int v61 = v130 + strlen(v38);
          int v130 = v61 + 1;
          *(_WORD *)(v148 + 16) = v61 + 1;
          heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v38);
          uint64_t v38 = 0;
        }
        LODWORD(v132) = v39;
LABEL_52:
        uint64_t v37 = v135;
        goto LABEL_53;
      }
      uint64_t v13 = 0;
LABEL_53:
      v36 += 4;
      if (v36 == 16)
      {
LABEL_54:
        a4 = v128;
        a2 = v129;
        if (!v38) {
          break;
        }
        goto LABEL_55;
      }
    }
  }
  if (v150) {
    paramc_ParamRelease(*(void *)(*(void *)a1 + 40));
  }
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  *(void *)&long long v152 = 0;
  uint64_t InputStreams = datac_RequestBlock(*(void *)(a1 + 8), 1039, 1u, &v152);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  uint64_t v65 = *(unsigned __int16 *)(v152 + 16);
  if (*(_WORD *)(v152 + 16))
  {
    uint64_t v66 = *(void *)(v152 + 8);
    LODWORD(v67) = *(_DWORD *)(v66 + ((unint64_t)(v65 - 1) << 6) + 32);
    if (*(_DWORD *)(a1 + 184) > v67) {
      LODWORD(v67) = *(_DWORD *)(a1 + 184);
    }
    uint64_t v68 = (_DWORD *)(v66 + 36);
    do
    {
      unsigned int v69 = *(v68 - 1);
      if (*v68 + v69 <= v67) {
        uint64_t v67 = v67;
      }
      else {
        uint64_t v67 = v69;
      }
      v68 += 16;
      --v65;
    }
    while (v65);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_GetStartScanPos -> %d", v62, v63, v64, v67);
  }
  else
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_GetStartScanPos -> %d", v62, v63, v64, *(unsigned int *)(a1 + 184));
  }
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1010, (uint64_t)"BEFORE sparser_ScanTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"BEFORE sparser_ScanTextElement", 0, 0, 0);
  if (*(_DWORD *)(a1 + 64) != 1 || *(_DWORD *)(a1 + 88) != 1 || *(_DWORD *)(a1 + 84) != 1)
  {
    uint64_t InputStreams = sparser_PreScanTextElement(*(void *)(a1 + 200), *(void *)(a1 + 8), &v136);
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    if (v136 == 1 && !*(_DWORD *)(a1 + 240))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 84) = 1;
      uint64_t v76 = *(void *)(*(void *)a1 + 32);
      unsigned int v77 = "issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
      goto LABEL_126;
    }
  }
  uint64_t InputStreams = sparser_ScanTextElement(*(void *)(a1 + 200), *(void *)(a1 + 8), *(_DWORD *)(a1 + 232), *(_WORD *)(a1 + 196), v78, v33, v34, v35);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  *(_DWORD *)(a1 + 184) = sparser_GetScanPosition(*(void *)(a1 + 200));
  if (*(_DWORD *)(a1 + 240))
  {
    uint64_t v82 = 1;
    int v147 = 1;
  }
  else
  {
    uint64_t InputStreams = sparser_HasTextElementLeft(*(_WORD ***)(a1 + 200), *(void *)(a1 + 8), (BOOL *)&v147, (_WORD *)(a1 + 196));
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    uint64_t v82 = v147;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"AFTER sparser_HasTextElementLeft bTextRemaining=%d pSentPar->startScanPos=%d", v79, v80, v81, v82);
  if (!v147)
  {
    uint64_t v13 = sentpar_loc_Check2IssueMoreInputRequest(a1, &v138, v83, v84, v85, v86, v87, v88);
    if (v138 == 1)
    {
      LODWORD(v152) = 0;
      if ((paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"disablefinalsentencesilence", (unsigned int *)&v152) & 0x80000000) == 0&& v152 == 1)
      {
        paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"finalsentencefound", 1u);
      }
    }
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
  }
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1010, (uint64_t)"BEFORE sparser_GetTextElement");
  long long v89 = a2;
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"BEFORE sparser_GetTextElement", 0, 0, 0);
  uint64_t InputStreams = sparser_GetTextElement(*(void *)(a1 + 200), *(void *)(a1 + 8), (_DWORD *)&v146 + 1, &v146, &v145, a2, (__int16 *)(a1 + 196), (_DWORD *)&v144 + 1, &v144, (uint64_t)&v140, (_WORD *)&v139 + 1, &v139);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"AFTER sparser_GetTextElement", v90, v91, v92, v124);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"currentReadMode = %d, *bImmediateVoiceSwitch=%d, bEndOnVoiceSwitch=%d", v93, v94, v95, *(__int16 *)(a1 + 196));
    uint64_t v96 = *(void *)(*(void *)a1 + 32);
    uint64_t v97 = HIDWORD(v144);
    marker_getString(SDWORD1(v141));
    log_OutText(v96, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"posRefOffset=%d, refReset=%d, pRefResetMrk.tag=%s, numBlanksTrimmed=%d u32AdjustedEscLen=%d", v98, v99, v100, v97);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"inputMarkersConsumed=%d", v101, v102, v103, HIWORD(v139));
  }
  if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)a1 + 32))) {
    log_OutTraceTuningData(*(uint64_t ***)(*(void *)a1 + 32), 33, 0, v104, v105, v106, v107, v108, v124);
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"In Blocks", v106, v107, v108, v124);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1010, (uint64_t)"AFTER sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"AFTER sparser_GetTextElement", 0, 0, 0);
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Out Blocks", v109, v110, v111, v125);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1020, (uint64_t)"AFTER sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"AFTER sparser_GetTextElement (out marker)", 0, 0, 0);
  int v112 = v145;
  if (*v89 != 1 && v145 != 1)
  {
    uint64_t InputStreams = sentpar_loc_CheckForEmptyOutput(a1, (_DWORD *)&v137 + 1, &v137);
    if ((InputStreams & 0x80000000) == 0)
    {
      if (v138 == 1 && v137 == 0x100000001)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bThereIsNoMoreInput && bEmptyText && bEmptyMarkers - flush and return", v113, v114, v115, v126);
        return sentpar_loc_FlushStreamsAndReturn(a1, a3, a4);
      }
      int v112 = v145;
      goto LABEL_129;
    }
    return InputStreams;
  }
LABEL_129:
  int v116 = *(_DWORD *)(a1 + 236);
  long long v152 = v140;
  long long v153 = v141;
  long long v154 = v142;
  long long v155 = v143;
  uint64_t InputStreams = sentpar_loc_UpdateTextAndMrkReadPosition((uint64_t *)a1, v146, v116, v112, HIWORD(v139), (unsigned __int16)v139, HIDWORD(v144), v144, &v152);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  long long v152 = v140;
  long long v153 = v141;
  long long v154 = v142;
  long long v155 = v143;
  uint64_t v13 = sentpar_loc_SavePersistentData(a1, HIDWORD(v144), v144, (unsigned int *)&v152);
  if ((v13 & 0x80000000) == 0)
  {
    if (*v89 == 1)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bImmediateVoiceSwitch - immediate return", v117, v118, v119, v127);
    }
    else
    {
      if (v145 == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bEndOnVoiceSwitch - continue processing", v117, v118, v119, v127);
      }
      int v121 = sentpar_loc_FilterSyncMarkers(*(void *)(a1 + 8));
      return v121 & (v121 >> 31);
    }
  }
  return v13;
}

uint64_t sentpar_loc_Check2IssueMoreInputRequest(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a2;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  *a2 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_Check2IssueMoreInputRequest()", a6, a7, a8, v22);
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 8), 1010, 1u, &v29);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 8), 1011, 1u, &v28);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 16) + 136))(*(void *)(a1 + 24), *(void *)(a1 + 32), (char *)&v27 + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 24), *(void *)(a1 + 32), (char *)&v26 + 4, (char *)&v25 + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t *))(*(void *)(a1 + 16) + 136))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v27);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v26, &v25);
  if ((v14 & 0x80000000) == 0)
  {
    if (HIDWORD(v25) == 1 && !HIDWORD(v26) && v25 == 1 && !v26)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"no text and markers : return TTSEG_PROCESSING_COMP_RESULTS_FULL", v11, v12, v13, v23);
      uint64_t v14 = 2369789975;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"have bytes in input stream, issue more text request?", v11, v12, v13, v23);
    if (HIDWORD(v26))
    {
      uint64_t v18 = (_DWORD *)(a1 + 84);
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        uint64_t v19 = "already issued more text request - there is no more input";
LABEL_20:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v19, v15, v16, v17, v24);
        uint64_t v21 = "leaving sentpar_loc_Check2IssueMoreInputRequest() - continue processing";
LABEL_25:
        *unint64_t v8 = 1;
        goto LABEL_26;
      }
      uint64_t v14 = 2369792000;
      *(_DWORD *)(a1 + 64) = 0;
      uint64_t v21 = "[1]issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
    }
    else
    {
      if (!v26)
      {
        uint64_t v21 = "leaving sentpar_loc_Check2IssueMoreInputRequest() - continue processing";
LABEL_26:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v21, v15, v16, v17, v24);
        return v14;
      }
      uint64_t v18 = (_DWORD *)(a1 + 84);
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        uint64_t v19 = "already issued more text request - still have some markers - return there is no more input";
        goto LABEL_20;
      }
      uint64_t v14 = 2369792000;
      *(_DWORD *)(a1 + 64) = 0;
      uint64_t v21 = "[2]issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
    }
    unint64_t v8 = v18;
    goto LABEL_25;
  }
  return v14;
}

uint64_t sentpar_loc_CheckForEmptyOutput(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v7 = 0;
  *a2 = 0;
  *a3 = 0;
  uint64_t result = datac_RequestBlock(*(void *)(a1 + 8), 1020, 1u, &v7);
  if ((result & 0x80000000) == 0)
  {
    if (!*(_WORD *)(v7 + 16)) {
      *a2 = 1;
    }
    uint64_t result = datac_RequestBlock(*(void *)(a1 + 8), 1021, 1u, &v7);
    if ((result & 0x80000000) == 0 && !*(_WORD *)(v7 + 16)) {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t sentpar_loc_FlushStreamsAndReturn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 68);
  int v7 = *(_DWORD *)(a1 + 76);
  if (v6 != v7)
  {
    uint64_t v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32), (v6 - v7));
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  uint64_t v9 = 2369789975;
  if (*(_DWORD *)(a1 + 104) == *(_DWORD *)(a1 + 108)) {
    return v9;
  }
  uint64_t v40 = 0;
  uint64_t v8 = datac_RequestBlock(*(void *)(a1 + 8), 1021, 1u, &v40);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v10 = *(unsigned __int16 *)(v40 + 16);
  if (!*(_WORD *)(v40 + 16))
  {
    uint64_t v13 = 0;
    goto LABEL_44;
  }
  uint64_t v11 = *(void *)(v40 + 8);
  uint64_t v39 = 0;
  uint64_t v12 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v10 << 6) | 1);
  if (!v12) {
    return 2369789962;
  }
  uint64_t v13 = (_DWORD *)v12;
  uint64_t v14 = datac_RequestBlock(*(void *)(a1 + 8), 1012, 1u, &v39);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_38;
  }
  uint64_t v15 = v40;
  if (!*(_WORD *)(v40 + 16)) {
    goto LABEL_42;
  }
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(v39 + 8);
  uint64_t v18 = (void *)(v11 + 40);
  do
  {
    if (marker_hasNonConstCharPtrArg(*((_DWORD *)v18 - 5)))
    {
      uint64_t v19 = *(unsigned int *)v18;
      if (v19 == -1) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v17 + v19;
      }
      *uint64_t v18 = v20;
    }
    v18 += 8;
    ++v16;
    uint64_t v15 = v40;
  }
  while (v16 < *(unsigned __int16 *)(v40 + 16));
  if (!*(_WORD *)(v40 + 16))
  {
LABEL_42:
    uint64_t v25 = (unsigned __int16 *)(v15 + 16);
LABEL_43:
    unsigned __int16 *v25 = 0;
    goto LABEL_44;
  }
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  do
  {
    uint64_t v23 = &v13[v21 / 4];
    *(_OWORD *)(v23 + 5) = *(_OWORD *)(v11 + v21 + 20);
    v23[9] = *(_DWORD *)(v11 + v21 + 36);
    *((void *)v23 + 5) = *(void *)(v11 + v21 + 40);
    ++v22;
    uint64_t v24 = (_OWORD *)*(unsigned __int16 *)(v40 + 16);
    v21 += 64;
  }
  while (v22 < (unint64_t)v24);
  uint64_t v25 = (unsigned __int16 *)(v40 + 16);
  if (!*(_WORD *)(v40 + 16)) {
    goto LABEL_43;
  }
  unint64_t v26 = 0;
  unsigned __int16 v27 = 0;
  uint64_t v28 = v13;
  do
  {
    if (v26)
    {
      int v29 = v28[5];
      if (v29 == 0x4000) {
        goto LABEL_28;
      }
    }
    else
    {
      int v29 = v13[5];
    }
    if (v29 != 3)
    {
      uint64_t v24 = &v13[16 * (unint64_t)v27];
      long long v30 = *(_OWORD *)v28;
      long long v31 = *((_OWORD *)v28 + 1);
      long long v32 = *((_OWORD *)v28 + 3);
      v24[2] = *((_OWORD *)v28 + 2);
      v24[3] = v32;
      *uint64_t v24 = v30;
      v24[1] = v31;
      ++v27;
      LOWORD(v24) = *v25;
    }
LABEL_28:
    ++v26;
    v28 += 16;
  }
  while (v26 < (unsigned __int16)v24);
  unsigned __int16 *v25 = v27;
  if (v27 >= 2u)
  {
    unint64_t v33 = 0;
    int v34 = 0;
    int v35 = v13[9];
    do
    {
      int v36 = v13[v33 / 4 + 21];
      if (v36 != 999 && v36 != 0x4000 && v13[v33 / 4 + 16] != 1) {
        int v34 = 1;
      }
      v13[v33 / 4 + 24] = v35 + v13[8];
      v33 += 64;
    }
    while (((unint64_t)v27 << 6) - 64 != v33);
    if (v34 == 1)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, void))(*(void *)(a1 + 16) + 104))(a2, a3, v13, v27 << 6);
      if ((v14 & 0x80000000) != 0)
      {
LABEL_38:
        uint64_t v9 = v14;
        goto LABEL_46;
      }
    }
  }
LABEL_44:
  uint64_t v37 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108)));
  if ((v37 & 0x80000000) != 0)
  {
    uint64_t v9 = v37;
    if (v13) {
LABEL_46:
    }
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v13);
  }
  else
  {
    *(void *)(a1 + 104) = 0;
    if (v13) {
      goto LABEL_46;
    }
  }
  return v9;
}

uint64_t sentpar_loc_UpdateTextAndMrkReadPosition(uint64_t *a1, int a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  unsigned int v9 = a8;
  unsigned int v10 = a7;
  int v11 = a6;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_UpdateTextAndMrkReadPosition", a6, a7, a8, v65);
  uint64_t v17 = datac_RequestBlock(a1[1], 1020, 1u, &v80);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  int v18 = *(unsigned __int16 *)(v80 + 16);
  uint64_t v17 = datac_RequestBlock(a1[1], 1020, 1u, &v81);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  __src = *(char **)(v81 + 8);
  unsigned int v75 = *(unsigned __int16 *)(v81 + 16);
  uint64_t v17 = datac_RequestBlock(a1[1], 1011, 1u, &v79);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v22 = datac_RequestBlock(a1[1], 1039, 1u, &v78);
  if ((v22 & 0x80000000) == 0)
  {
    int v67 = a4;
    unsigned int v70 = v10;
    unsigned int v71 = v9;
    int v72 = a3;
    unsigned int v73 = a5;
    int v68 = v18;
    int v69 = v11;
    if (*(_WORD *)(v79 + 16))
    {
      unint64_t v23 = 0;
      int v76 = 0;
      uint64_t v24 = *(void *)(v79 + 8);
      uint64_t v25 = v78;
      uint64_t v26 = *(void *)(v78 + 8);
      do
      {
        unsigned __int16 v27 = (long long *)(v24 + (v23 << 6));
        if (*(_DWORD *)v27 == 1 && *((_DWORD *)v27 + 5) == 2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = *(unsigned __int16 *)(v25 + 16);
          while (1)
          {
            uint64_t v30 = v28 + 64;
            if ((v29 << 6) + 64 == v28 + 64) {
              break;
            }
            int v31 = memcmp((const void *)(v24 + (v23 << 6)), (const void *)(v26 + v28), 0x40uLL);
            uint64_t v28 = v30;
            if (!v31) {
              goto LABEL_25;
            }
          }
          uint64_t v22 = datac_RequestBlock(a1[1], 1039, (unsigned __int16)(v29 + 1), &v78);
          if ((v22 & 0x80000000) != 0) {
            return v22;
          }
          uint64_t v26 = *(void *)(v78 + 8);
          uint64_t v32 = *(unsigned __int16 *)(v78 + 16);
          if (*(_WORD *)(v78 + 16))
          {
            uint64_t v33 = 0;
            int v34 = (_DWORD *)(v26 + 64);
            size_t v35 = v32 << 6;
            while (*(v34 - 8) < *(_DWORD *)(v24 + (v23 << 6) + 32))
            {
              ++v33;
              v34 += 16;
              v35 -= 64;
              if (!v35) {
                goto LABEL_22;
              }
            }
            int v76 = (unsigned __int16)v33;
            if (v32 == (unsigned __int16)v33)
            {
              LODWORD(v32) = (unsigned __int16)v33;
LABEL_22:
              int v76 = v32;
              goto LABEL_23;
            }
            memcpy(v34, v34 - 16, v35);
          }
          else
          {
            LODWORD(v32) = v76;
LABEL_23:
            uint64_t v33 = v32;
          }
          int v36 = (_OWORD *)(v26 + (v33 << 6));
          long long v37 = *v27;
          long long v38 = v27[1];
          long long v39 = v27[3];
          v36[2] = v27[2];
          v36[3] = v39;
          _OWORD *v36 = v37;
          v36[1] = v38;
          uint64_t v25 = v78;
          ++*(_WORD *)(v78 + 16);
        }
LABEL_25:
        ++v23;
      }
      while (v23 < *(unsigned __int16 *)(v79 + 16));
    }
    if (v72 == 1 && v75)
    {
      if (v75 >= 0x400) {
        size_t v41 = 1024;
      }
      else {
        size_t v41 = v75;
      }
      uint64_t v42 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, (v41 + 1));
      if (!v42) {
        return 2369789962;
      }
      uint64_t v43 = (uint64_t)v42;
      strncpy(v42, __src, v41)[v41] = 0;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"(Txt) (text processed) (tag=%d) len=%d (UTF8 *) \"%s\"", v44, v45, v46, 1011);
      heap_Free(*(void **)(*a1 + 8), v43);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"(Mrk) (%d markers processed)", v47, v48, v49, v73);
    }
    int v50 = *(unsigned __int16 *)(v81 + 2);
    uint64_t v51 = (v69 + v50 * v68);
    if (v51)
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"consume TXT Stream cTextBytesRead=%d", v19, v20, v21, (v69 + v50 * v68));
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[2] + 96))(a1[3], a1[4], v51);
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      int v52 = v69 + (v68 + a2) * v50 + *((_DWORD *)a1 + 20);
      *((_DWORD *)a1 + 19) += v51;
      *((_DWORD *)a1 + 20) = v52;
    }
    if (!v73) {
      goto LABEL_46;
    }
    uint64_t v53 = v73 << 6;
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"MRK Stream cMarkerBytesProcessed=%d", v19, v20, v21, v53);
    if (*((_DWORD *)a1 + 27) >= 0x40u)
    {
      uint64_t v57 = 0;
      int v58 = 0;
      do
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"CONSUMED pInMrk[%d].tag %d %d,%d %d,%d", v54, v55, v56, v57);
        uint64_t v57 = (unsigned __int16)++v58;
      }
      while ((unsigned __int16)v58 < *((_DWORD *)a1 + 27) >> 6);
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[2] + 96))(a1[5], a1[6], v53);
    if ((v22 & 0x80000000) == 0)
    {
      *(uint64_t *)((char *)a1 + 108) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)a1 + 108), vdup_n_s32(v53));
LABEL_46:
      if (v67 == 1 || *((_DWORD *)a1 + 20) > *((_DWORD *)a1 + 48))
      {
        long long v59 = a9[1];
        v77[0] = *a9;
        v77[1] = v59;
        long long v60 = a9[3];
        v77[2] = a9[2];
        v77[3] = v60;
        uint64_t v22 = sentpar_loc_SavePersistentData((uint64_t)a1, v70, v71, (unsigned int *)v77);
        if ((v22 & 0x80000000) == 0)
        {
          if (v67 == 1)
          {
            uint64_t v64 = "!! bEndOnVoiceSwitch - RESET";
          }
          else
          {
            uint64_t v64 = "!! cSTREAMTextBytesProcessed %d > pSentPar->cReadDirectSize %d - RESET";
            uint64_t v66 = *((unsigned int *)a1 + 20);
          }
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v64, v61, v62, v63, v66);
          *((_DWORD *)a1 + 46) = 0;
          a1[7] = 0;
          a1[8] = 0;
          *(uint64_t *)((char *)a1 + 84) = 0;
          *(uint64_t *)((char *)a1 + 76) = 0;
          a1[12] = 0;
          a1[13] = 0;
          *((_DWORD *)a1 + 28) = 0;
        }
      }
    }
  }
  return v22;
}

uint64_t sentpar_loc_SavePersistentData(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v21 = 0;
  uint64_t v8 = sentpar_loc_SetReadoutMarkersAsParameters((int *)a1);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_posrefoffset", a2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_refreset", a3);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  if (a3)
  {
    uint64_t v8 = paramc_ParamSetUInt(v9, (uint64_t)"pp_sentpar_refreset_mrk_tag", a4[5]);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", a4[6]);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v10 = *(void *)(*(void *)a1 + 40);
    unsigned int v11 = a4[7];
  }
  else
  {
    uint64_t v8 = paramc_ParamSetUInt(v9, (uint64_t)"pp_sentpar_refreset_mrk_tag", 0);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", 0);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v10 = *(void *)(*(void *)a1 + 40);
    unsigned int v11 = 0;
  }
  uint64_t v8 = paramc_ParamSetUInt(v10, (uint64_t)"pp_sentpar_refreset_mrk_lenref", v11);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v15 = datac_RequestBlock(*(void *)(a1 + 8), 1011, 1u, &v21);
  if ((v15 & 0x80000000) == 0 && *(_WORD *)(v21 + 16))
  {
    unint64_t v16 = *(long long **)(v21 + 8);
    long long v17 = *v16;
    long long v18 = v16[1];
    long long v19 = v16[2];
    *(_OWORD *)(a1 + 168) = v16[3];
    *(_OWORD *)(a1 + 152) = v19;
    *(_OWORD *)(a1 + 136) = v18;
    *(_OWORD *)(a1 + 120) = v17;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"STORE lastOutSyncMrk %d,%d %d,%d", v12, v13, v14, *(unsigned int *)(a1 + 144));
  }
  return v15;
}

uint64_t sentpar_loc_FilterSyncMarkers(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = datac_RequestBlock(a1, 1021, 1u, &v2);
  if ((result & 0x80000000) == 0) {
    return marker_loc_FilterSyncMarkers(v2);
  }
  return result;
}

uint64_t sentpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v5 = 2369789952;
  if (!a1) {
    return 2369789959;
  }
  int v33 = 0;
  uint64_t Object = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 16) + 136))(a2, a3, &v33);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"start sentpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1020, (uint64_t)"start sentpar_WriteTextAndMarkers()");
  uint64_t Object = datac_RequestBlock(*(void *)(a1 + 8), 1020, 1u, &v32);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  int v12 = *(unsigned __int16 *)(v32 + 16);
  if (!*(_WORD *)(v32 + 16)) {
    goto LABEL_11;
  }
  uint64_t Object = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(a1 + 16) + 104))(a2, a3, *(void *)(v32 + 8), *(unsigned __int16 *)(v32 + 2) * v12);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  if (!*(_DWORD *)(a1 + 240))
  {
    uint64_t v30 = 0;
    uint64_t Object = objc_GetObject(*(void *)(*(void *)a1 + 48), (uint64_t)"CHARCOUNT", &v30);
    if ((Object & 0x80000000) == 0)
    {
      (*(void (**)(void, void, void, void))(v30[1] + 56))(v30[2], v30[3], *(void *)(v32 + 8), *(unsigned __int16 *)(v32 + 2) * *(unsigned __int16 *)(v32 + 16));
      objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"CHARCOUNT");
      goto LABEL_9;
    }
    return Object;
  }
LABEL_9:
  *(_WORD *)(v32 + 16) = 0;
LABEL_11:
  if ((datac_RequestBlock(*(void *)(a1 + 8), 1012, 1u, &v32) & 0x80000000) != 0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v32 + 8);
  }
  uint64_t Object = datac_RequestBlock(*(void *)(a1 + 8), 1021, 1u, &v31);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  unsigned int v14 = *(unsigned __int16 *)(v31 + 16);
  if (!*(_WORD *)(v31 + 16)) {
    return v5;
  }
  uint64_t v15 = *(void *)(v31 + 8);
  if (*(_DWORD *)(v15 + 20) != 0x4000) {
    return v5;
  }
  if (v12)
  {
    uint64_t v16 = 0;
    int v33 = *(_DWORD *)(v15 + 32) - v33;
LABEL_22:
    uint64_t v18 = v14;
    long long v19 = (_DWORD *)(v15 + 32);
    do
    {
      *v19 -= v33;
      v19 += 16;
      --v18;
    }
    while (v18);
    unint64_t v20 = 0;
    uint64_t v21 = (void *)(v15 + 40);
    do
    {
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v21 - 5)))
      {
        uint64_t v22 = *(unsigned int *)v21;
        if (v13) {
          BOOL v23 = v22 == 0xFFFFFFFFLL;
        }
        else {
          BOOL v23 = 1;
        }
        uint64_t v24 = v13 + v22;
        if (v23) {
          uint64_t v24 = 0;
        }
        *uint64_t v21 = v24;
      }
      v21 += 8;
      ++v20;
    }
    while (v20 < *(unsigned __int16 *)(v31 + 16));
    goto LABEL_34;
  }
  uint64_t v16 = marker_CheckForEmptyMarkers(v13, *(_DWORD *)(a1 + 188), v15, v14, *(void *)(a1 + 96), (unsigned __int16)(*(_DWORD *)(a1 + 104) >> 6), (unsigned __int16)(*(_DWORD *)(a1 + 108) >> 6));
  unsigned int v14 = *(unsigned __int16 *)(v31 + 16);
  int v33 = *(_DWORD *)(v15 + 32) - v33;
  if (v14) {
    goto LABEL_22;
  }
LABEL_34:
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"at end(internal only)", 0, 0, 0);
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"at end()", 1, 0, 0);
  uint64_t v25 = v31;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_writeMarkersToOutputStream(bNoSignificantMarkers=%d bTextOut=%d)", v26, v27, v28, v16);
  int v29 = *(unsigned __int16 *)(v25 + 16);
  if (!v12)
  {
    if (v29 == 1)
    {
      if (v16 == 1 || *(_DWORD *)(v15 + 20) == 0x4000) {
        return 0;
      }
      LOWORD(v29) = 1;
    }
    else if (v16 == 1)
    {
      return 0;
    }
  }
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"markers output()", 1, v15, v29);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 16) + 104))(a4, a5, v15, *(unsigned __int16 *)(v25 + 16) << 6);
  if ((v5 & 0x80000000) == 0) {
    return 0;
  }
  return v5;
}

uint64_t sentpar_IsTextElementAtEos(uint64_t a1)
{
  uint64_t v3 = 0;
  if (!a1) {
    return 1;
  }
  uint64_t v1 = 1;
  if ((datac_RequestBlock(*(void *)(a1 + 8), 1020, 1u, &v3) & 0x80000000) == 0) {
    return *(unsigned int *)(v3 + 20);
  }
  return v1;
}

uint64_t sentpar_ResetMarkerBlocks(uint64_t *a1)
{
  uint64_t v11 = 0;
  if (!a1) {
    return 2369789959;
  }
  uint64_t v2 = datac_RequestBlock(a1[1], 1021, 1u, &v11);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = v11;
  if (*(unsigned __int16 *)(v11 + 16) >= 2u)
  {
    int v4 = (uint64_t *)(*(void *)(v11 + 8) + 112);
    unint64_t v5 = 1;
    do
    {
      if (*v4)
      {
        heap_Free(*(void **)(*a1 + 8), *v4);
        *int v4 = 0;
        uint64_t v3 = v11;
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < *(unsigned __int16 *)(v3 + 16));
  }
  *(_WORD *)(v3 + 16) = 0;
  uint64_t v6 = datac_RequestBlock(a1[1], 1011, 1u, &v11);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = v11;
    if (*(unsigned __int16 *)(v11 + 16) >= 2u)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v11 + 8) + 112);
      unint64_t v9 = 1;
      do
      {
        if (*v8)
        {
          heap_Free(*(void **)(*a1 + 8), *v8);
          *uint64_t v8 = 0;
          uint64_t v7 = v11;
        }
        ++v9;
        v8 += 8;
      }
      while (v9 < *(unsigned __int16 *)(v7 + 16));
    }
    *(_WORD *)(v7 + 16) = 0;
  }
  return v6;
}

uint64_t sentpar_loc_ReadInputStreams(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 104);
  int v3 = *(_DWORD *)(a1 + 104);
  int v4 = (_DWORD *)(a1 + 68);
  int v5 = *(_DWORD *)(a1 + 68);
  int v6 = *(_DWORD *)(a1 + 76);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 24), *(void *)(a1 + 32), (char *)&v32 + 4, (char *)&v31 + 4);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v32, &v31);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_ReadInputStreams()", v8, v9, v10, v30);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT State fTxtEos=%d cTxtBytesRemaining=%d", v11, v12, v13, HIDWORD(v31));
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"MRK State fMrkEos=%d cMrkBytesRemaining=%d", v14, v15, v16, v31);
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, _DWORD *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 24), *(void *)(a1 + 32), a1 + 56, v4);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  *(_DWORD *)(a1 + 76) = 0;
  uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, _DWORD *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 40), *(void *)(a1 + 48), a1 + 96, v2);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 108) = 0;
    if (*(_DWORD *)(a1 + 236) == 1)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"After stream reads", v17, v18, v19, v30);
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT cTextBytesInStream=%d  (%u characters)", v21, v22, v23, *(unsigned int *)(a1 + 68));
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT cMarkerBytesInStream=%d (%u markers)", v24, v25, v26, *(unsigned int *)(a1 + 104));
    }
    if (*(_DWORD *)(a1 + 84) == 1)
    {
      if (v31 == 0x100000001)
      {
        uint64_t v27 = *(void *)(*(void *)a1 + 32);
        uint64_t v28 = "!![1](fTxtEos==1) && (fMrkEos==1) && (bBlockMoreInputRequest) - NO MORE TEXT SO BLOCK REQUESTS";
      }
      else
      {
        if (v5 == v6 || v5 - v6 != *v4 || v3 && v3 != *v2)
        {
          *(_DWORD *)(a1 + 84) = 0;
          return v20;
        }
        uint64_t v27 = *(void *)(*(void *)a1 + 32);
        uint64_t v28 = "!![2](bBlockMoreInputRequest) - NO MORE TEXT & MARKERS SO BLOCK REQUESTS";
      }
      log_OutText(v27, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v28, v17, v18, v19, v30);
      *(_DWORD *)(a1 + 88) = 1;
    }
  }
  return v20;
}

uint64_t sentpar_loc_SetUpTextBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  int v9 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_SetUpTextBlock()", a6, a7, a8, (uint64_t)v30);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Input Stream State :", v10, v11, v12, v31);
    unsigned int v13 = (unsigned __int16)v9;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"cTextBytesAvailable=%d cTextBytesInStream=%d cTextBytesRead=%d", v14, v15, v16, (unsigned __int16)v9);
  }
  else
  {
    unsigned int v13 = (unsigned __int16)(*(_WORD *)(a1 + 68) - *(_WORD *)(a1 + 76));
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v13)
  {
    uint64_t v18 = datac_RequestBlock(v17, 1010, (unsigned __int16)v9, &v32);
    if ((v18 & 0x80000000) == 0)
    {
      memcpy(*(void **)(v32 + 8), (const void *)(*(void *)(a1 + 56) + *(unsigned int *)(a1 + 76)), v13);
      *(_WORD *)(v32 + 16) = v9;
      if (*(_DWORD *)(a1 + 68) < 0x400u)
      {
        __strncpy_chk();
        v33[*(unsigned int *)(a1 + 68)] = 0;
        uint64_t v22 = *(void *)(*(void *)a1 + 32);
        uint64_t v23 = "Input TXT Stream -%s-";
        uint64_t v30 = v33;
      }
      else
      {
        uint64_t v22 = *(void *)(*(void *)a1 + 32);
        uint64_t v23 = "Input TXT Stream > PP_MAX_LOG_MESSAGE, skip trace";
      }
      log_OutText(v22, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v23, v19, v20, v21, (uint64_t)v30);
      if (*(unsigned __int16 *)(v32 + 16) < 0x400uLL)
      {
        __strncpy_chk();
        v33[*(unsigned __int16 *)(v32 + 16)] = 0;
        uint64_t v27 = *(void *)(*(void *)a1 + 32);
        uint64_t v28 = "Input TXT        -%s-";
        uint64_t v30 = v33;
      }
      else
      {
        uint64_t v27 = *(void *)(*(void *)a1 + 32);
        uint64_t v28 = "Input TXT > PP_MAX_LOG_MESSAGE, skip trace";
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v18 = datac_RequestBlock(v17, 1010, 1u, &v32);
    if ((v18 & 0x80000000) == 0)
    {
      *(_WORD *)(v32 + 16) = 0;
      uint64_t v27 = *(void *)(*(void *)a1 + 32);
      uint64_t v28 = "Empty text block";
LABEL_14:
      log_OutText(v27, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v28, v24, v25, v26, (uint64_t)v30);
    }
  }
  return v18;
}

uint64_t sentpar_loc_SetUpMarkerBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  unint64_t v9 = *(unsigned int *)(a1 + 104);
  unint64_t v10 = *(unsigned int *)(a1 + 108);
  uint64_t v112 = 0;
  unsigned __int16 v11 = v9 - v10;
  uint64_t v12 = (unsigned __int16)(v9 - v10) >> 6;
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    unsigned __int16 v110 = v9 - v10;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_SetUpMarkerBlocks()", a6, a7, a8, v107);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Input Stream State :", v13, v14, v15, v108);
    uint64_t v16 = (unsigned __int16)(v9 >> 6);
    int v111 = v12;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"numMarkersAvailable=%d numMarkersInStream=%d numMarkersInStreamRead=%d", v17, v18, v19, v12);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Markers in Input Stream", v20, v21, v22, v109);
    if (v16)
    {
      uint64_t v26 = 0;
      unsigned int v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(a1 + 96);
        if (*(void *)(v28 + v26 + 48))
        {
          unsigned __int16 v29 = strlen(*(const char **)(v28 + v26 + 48));
          if ((v29 & 0xFFE0) != 0) {
            uint64_t v30 = 31;
          }
          else {
            uint64_t v30 = v29;
          }
          __strncpy_chk();
          v115[v30] = 0;
        }
        else
        {
          v115[0] = 0;
        }
        uint64_t v31 = &byte_20D5A22AE;
        if ((unsigned __int16)(v10 >> 6) > v27) {
          uint64_t v31 = "(CONSUMED)";
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"%spInMrk[%d] %d %d,%d %d,%d INT=%d Ext=%d %s", v23, v24, v25, (uint64_t)v31);
        ++v27;
        v26 += 64;
      }
      while (v16 << 6 != v26);
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"lastOutSyncMrk %d,%d %d,%d", v23, v24, v25, *(unsigned int *)(a1 + 144));
    LODWORD(v12) = v111;
    unsigned __int16 v11 = v110;
  }
  if (v11 <= 0x3Fu)
  {
    if (!*(_DWORD *)(a1 + 140))
    {
      uint64_t v67 = 2369792000;
      if (!*(_DWORD *)(a1 + 240)) {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 1931, 0, a5, a6, a7, a8, v107);
      }
      return v67;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"no markers - use lastOutSyncMrk", a6, a7, a8, v107);
    uint64_t v32 = datac_RequestBlock(*(void *)(a1 + 8), 1011, 0x40u, &v114);
    if ((v32 & 0x80000000) == 0)
    {
      uint64_t v33 = v114;
      uint64_t v34 = *(void *)(v114 + 8);
      long long v35 = *(_OWORD *)(a1 + 168);
      long long v37 = *(_OWORD *)(a1 + 120);
      long long v36 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(v34 + 32) = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(v34 + 48) = v35;
      *(_OWORD *)uint64_t v34 = v37;
      *(_OWORD *)(v34 + 16) = v36;
      *(_DWORD *)uint64_t v34 = 1;
      *(_WORD *)(v33 + 16) = 1;
      goto LABEL_53;
    }
    return v32;
  }
  uint64_t v32 = datac_RequestBlock(*(void *)(a1 + 8), 1011, v11 & 0xFFC0, &v114);
  if ((v32 & 0x80000000) != 0) {
    return v32;
  }
  uint64_t v38 = 0;
  unsigned __int16 v39 = 0;
  uint64_t v34 = *(void *)(v114 + 8);
  uint64_t v40 = (unsigned __int16)(v10 >> 6);
  if (v12 <= 1) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = v12;
  }
  uint64_t v42 = v40 << 6;
  do
  {
    uint64_t v43 = (_OWORD *)(v34 + v38);
    uint64_t v44 = (_OWORD *)(*(void *)(a1 + 96) + v42 + v38);
    long long v45 = v44[2];
    long long v46 = v44[3];
    long long v47 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v47;
    v43[2] = v45;
    v43[3] = v46;
    *(_DWORD *)uint64_t v43 = 0;
    int hasNonConstCharPtrArg = marker_hasNonConstCharPtrArg(*(_DWORD *)(v34 + v38 + 20));
    uint64_t v53 = *(void *)(a1 + 96) + v42 + v38;
    if (hasNonConstCharPtrArg)
    {
      uint64_t v54 = *(const char **)(v53 + 40);
      if (v54)
      {
        __int16 v55 = strlen(v54);
        LODWORD(v54) = 0;
        v39 += v55 + 1;
      }
    }
    else
    {
      LODWORD(v54) = *(_DWORD *)(v53 + 40);
    }
    *(_DWORD *)(v34 + v38 + 40) = v54;
    uint64_t v56 = *(const char **)(*(void *)(a1 + 96) + v42 + v38 + 48);
    if (v56)
    {
      int v57 = (unsigned __int16)strlen(v56);
      if (v57)
      {
        int v58 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v57 + 1));
        *(void *)(v34 + v38 + 48) = v58;
        if (!v58) {
          return 2369789962;
        }
        strcpy(v58, *(const char **)(*(void *)(a1 + 96) + v42 + v38 + 48));
      }
    }
    v38 += 64;
  }
  while ((unint64_t)v41 << 6 != v38);
  *(_WORD *)(v114 + 16) = v12;
  if (v39)
  {
    uint64_t v32 = datac_RequestBlock(*(void *)(a1 + 8), 1012, v39, &v113);
    if ((v32 & 0x80000000) != 0) {
      return v32;
    }
    int v59 = 0;
    uint64_t v60 = *(void *)(v113 + 8);
    uint64_t v61 = (_DWORD *)(v34 + 40);
    uint64_t v62 = (v40 << 6) | 0x28;
    do
    {
      if (marker_hasNonConstCharPtrArg(*(v61 - 5)) && *(void *)(*(void *)(a1 + 96) + v62))
      {
        *uint64_t v61 = (unsigned __int16)v59;
        unsigned __int16 v63 = strlen(*(const char **)(*(void *)(a1 + 96) + v62));
        memcpy((void *)(v60 + (unsigned __int16)v59), *(const void **)(*(void *)(a1 + 96) + v62), v63);
        *(unsigned char *)(v60
                 + (unsigned __int16)strlen(*(const char **)(*(void *)(a1 + 96) + v62))
                 + (unint64_t)(unsigned __int16)v59) = 0;
        v59 += strlen(*(const char **)(*(void *)(a1 + 96) + v62)) + 1;
      }
      v61 += 16;
      v62 += 64;
      --v41;
    }
    while (v41);
    *(_WORD *)(v113 + 16) = v59;
  }
  if (*(_DWORD *)(v34 + 20) == 0x4000)
  {
    if (*(_DWORD *)(a1 + 140))
    {
      if (*(unsigned __int16 *)(v114 + 16) >= 2u && *(_DWORD *)(v34 + 96) < *(_DWORD *)(a1 + 152)) {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 1932, "%s%d%s%d", v49, v50, v51, v52, "pMrk[1].posCur");
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"First Input Stream is a SYNC marker, but update using lastOutSyncMrk", v50, v51, v52, v107);
      long long v65 = *(_OWORD *)(a1 + 152);
      long long v64 = *(_OWORD *)(a1 + 168);
      long long v66 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)uint64_t v34 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(v34 + 16) = v66;
      *(_OWORD *)(v34 + 32) = v65;
      *(_OWORD *)(v34 + 48) = v64;
      *(_DWORD *)uint64_t v34 = 0;
      *(_DWORD *)(v34 + 28) = 0;
      *(_DWORD *)(v34 + 36) = 0;
      *(void *)(v34 + 40) = 0;
    }
  }
  else
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"First Input Stream is not a SYNC marker, so clone it an make it a SYNC marker", v50, v51, v52, v107);
    memmove((void *)(v34 + 64), (const void *)v34, (unint64_t)*(unsigned __int16 *)(v114 + 16) << 6);
    int v68 = (_OWORD *)(a1 + 120);
    if (!*(_DWORD *)(a1 + 140)) {
      int v68 = (_OWORD *)(v34 + 64);
    }
    long long v70 = v68[2];
    long long v69 = v68[3];
    long long v71 = v68[1];
    *(_OWORD *)uint64_t v34 = *v68;
    *(_OWORD *)(v34 + 16) = v71;
    *(_OWORD *)(v34 + 32) = v70;
    *(_OWORD *)(v34 + 48) = v69;
    *(_DWORD *)(v34 + 20) = 0x4000;
    *(_DWORD *)uint64_t v34 = 1;
    *(_DWORD *)(v34 + 28) = 0;
    *(_DWORD *)(v34 + 36) = 0;
    *(void *)(v34 + 40) = 0;
    ++*(_WORD *)(v114 + 16);
  }
LABEL_53:
  uint64_t v67 = datac_RequestBlock(*(void *)(a1 + 8), 1039, 1u, &v112);
  if ((v67 & 0x80000000) == 0)
  {
    uint64_t v75 = *(void *)(v112 + 8);
    unint64_t v76 = *(unsigned __int16 *)(v112 + 16);
    if (*(_WORD *)(v112 + 16))
    {
      uint64_t v77 = 0;
      int v78 = 0;
      unsigned __int16 v79 = 0;
      uint64_t v80 = 32;
      do
      {
        if (*(_DWORD *)(v75 + v80) < *(_DWORD *)(v34 + 32))
        {
          unsigned __int16 v79 = v77;
          int v78 = 1;
        }
        ++v77;
        v80 += 64;
      }
      while (v76 != v77);
      if (v78 == 1)
      {
        uint64_t v81 = v79 + 1;
        LODWORD(v76) = v76 - v81;
        if (v76)
        {
          memmove(*(void **)(v112 + 8), (const void *)(v75 + (v81 << 6)), (uint64_t)(int)v76 << 6);
          LOWORD(v76) = *(_WORD *)(v112 + 16) - v81;
          *(_WORD *)(v112 + 16) = v76;
        }
        else
        {
          *(_WORD *)(v112 + 16) = 0;
        }
      }
    }
    if (*(_DWORD *)(a1 + 236) == 1)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Persistent Markers", v72, v73, v74, v107);
      if (!*(_WORD *)(v112 + 16)) {
        return v67;
      }
      unint64_t v85 = 0;
      uint64_t v86 = v75 + 36;
      do
      {
        v86 += 64;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"pPersistMrk[%d] %d %d,%d %d,%d", v82, v83, v84, v85++);
        unint64_t v76 = *(unsigned __int16 *)(v112 + 16);
      }
      while (v85 < v76);
    }
    if ((_WORD)v76)
    {
      uint64_t v67 = datac_RequestBlock(*(void *)(a1 + 8), 1011, (unsigned __int16)((*(_WORD *)(v114 + 16) + v76) & 0x3FF) << 6, &v114);
      if ((v67 & 0x80000000) == 0)
      {
        if (*(_WORD *)(v112 + 16))
        {
          unint64_t v87 = 0;
          uint64_t v88 = v114;
          uint64_t v89 = *(void *)(v114 + 8);
          do
          {
            uint64_t v90 = *(unsigned __int16 *)(v88 + 16);
            if (v90)
            {
              uint64_t v91 = 0;
              unsigned __int16 v92 = 0;
              BOOL v93 = 0;
              uint64_t v94 = v75 + (v87 << 6);
              unsigned int v97 = *(_DWORD *)(v94 + 32);
              uint64_t v95 = (int *)(v94 + 32);
              unsigned int v96 = v97;
              uint64_t v98 = (_DWORD *)(v89 + 40);
              while (v96 >= *(v98 - 2))
              {
                if (*(v98 - 5) == 7)
                {
                  BOOL v93 = !v93;
                  if (*v98 == 43) {
                    unsigned __int16 v92 = v91;
                  }
                  else {
                    BOOL v93 = 0;
                  }
                }
                v98 += 16;
                if (v90 == ++v91)
                {
                  LOWORD(v91) = v90;
                  break;
                }
              }
              if (v93)
              {
                int v99 = *v95;
                int v100 = *(_DWORD *)(v89 + ((unint64_t)v92 << 6) + 32);
                if (v90 - 1 != v92) {
                  unsigned __int16 v92 = v90;
                }
                if (v99 != v100) {
                  unsigned __int16 v92 = v91;
                }
                if (v90 == (unsigned __int16)v91) {
                  LOWORD(v91) = v92;
                }
              }
            }
            else
            {
              LOWORD(v91) = 0;
            }
            if (v90 == (unsigned __int16)v91)
            {
              uint64_t v101 = (_OWORD *)(v89 + (v90 << 6));
            }
            else
            {
              uint64_t v101 = (_OWORD *)(v89 + ((unint64_t)(unsigned __int16)v91 << 6));
              memmove((void *)(v89 + ((unint64_t)((unsigned __int16)v91 + 1) << 6)), v101, (uint64_t)(int)(v90 - (unsigned __int16)v91) << 6);
            }
            uint64_t v102 = (long long *)(v75 + (v87 << 6));
            long long v103 = *v102;
            long long v104 = v102[1];
            long long v105 = v102[3];
            v101[2] = v102[2];
            v101[3] = v105;
            *uint64_t v101 = v103;
            v101[1] = v104;
            uint64_t v88 = v114;
            ++*(_WORD *)(v114 + 16);
            ++v87;
          }
          while (v87 < *(unsigned __int16 *)(v112 + 16));
        }
      }
    }
  }
  return v67;
}

uint64_t pp_sent_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2369789953;
  }
  uint64_t result = 0;
  *a2 = &IPPSentPar;
  return result;
}

uint64_t pp_sent_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v5 = 2369789959;
  uint64_t v19 = 0;
  if (a5 && (InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
  {
    uint64_t v12 = v21;
    uint64_t v13 = v21[4];
    if (v13)
    {
      log_OutText(v13, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjOpen", v9, v10, v11, v18);
      uint64_t v12 = v21;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t v14 = heap_Alloc(v12[1], 104);
    if (v14)
    {
      uint64_t v15 = v14;
      *(void *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(void *)uint64_t v14 = a3;
      *(void *)(v14 + 8) = a4;
      uint64_t Object = objc_GetObject(v21[6], (uint64_t)"SYNTHSTREAM", &v20);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_14;
      }
      *(void *)(v15 + 16) = *(void *)(v20 + 8);
      *(_DWORD *)(v15 + 96) = 0;
      if ((paramc_ParamGetStr(v21[5], (uint64_t)"clcpppipelinemode", &v19) & 0x80000000) == 0 && v19 && *v19) {
        *(_DWORD *)(v15 + 96) = 1;
      }
      uint64_t Object = sentpar_ObjOpen(a3, a4, *(void *)(v15 + 16), (uint64_t *)(v15 + 88), *(_DWORD *)(v15 + 96));
      if ((Object & 0x80000000) != 0)
      {
LABEL_14:
        uint64_t v5 = Object;
        pp_sent_parser_ObjClose((_WORD **)v15, 17557);
      }
      else
      {
        uint64_t v5 = 0;
        *(void *)a5 = v15;
        *(void *)(a5 + 8) = 17557;
      }
    }
    else
    {
      return 2369789962;
    }
  }
  return v5;
}

uint64_t pp_sent_parser_ObjClose(_WORD **a1, int a2)
{
  uint64_t v3 = 2369789959;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjClose", v4, v5, v6, v11);
    }
    uint64_t v8 = a1[11];
    if (v8) {
      sentpar_ObjClose(*a1, (int)a1[1], v8);
    }
    uint64_t v9 = v12;
    if (a1[2])
    {
      objc_ReleaseObject(*(void *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v12;
    }
    heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
    return 0;
  }
  return v3;
}

uint64_t pp_sent_parser_ObjReopen(_WORD **a1, int a2)
{
  uint64_t v3 = 2369789959;
  uint64_t v11 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v11) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v11 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjReopen", v4, v5, v6, v10);
    }
    uint64_t v8 = (uint64_t *)a1[11];
    if (v8) {
      sentpar_ObjReopen(*a1, (uint64_t)a1[1], v8);
    }
    return 0;
  }
  return v3;
}

uint64_t pp_sent_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = 0;
  uint64_t v7 = 2369789959;
  if ((safeh_HandleCheck(a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v33) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v33 + 32);
    if (v11) {
      log_OutText(v11, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ProcessStart", v8, v9, v10, v32);
    }
    uint64_t v12 = 0;
    char v13 = 1;
    do
    {
      char v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, void, uint64_t))(*(void *)(a1 + 16)
                                                                                                  + 64))(a3, a4, 212, szOUTPUT_STREAMS[v12], 0, 0, a1 + 16 * v12 + 24);
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_17;
      }
      char v13 = 0;
      uint64_t v12 = 1;
    }
    while ((v14 & 1) != 0);
    char v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v18 + 64);
      if (v16) {
        break;
      }
      char v16 = 1;
      uint64_t v15 = v19(a3, a4, 212, szOUTPUT_STREAMS[v17], 0, 1, a1 + 16 * v17 + 56);
      uint64_t v17 = 1;
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_17;
      }
    }
    uint64_t v20 = (*(uint64_t (**)(void))(v18 + 168))();
    uint64_t v15 = v19(a3, a4, 212, "application/x-realspeak-int-markers-pp;version=4.0", v20, 1, a1 + 72);
    if ((v15 & 0x80000000) != 0)
    {
LABEL_17:
      uint64_t v7 = v15;
      goto LABEL_18;
    }
    uint64_t v7 = sentpar_ProcessStart(v33, *(void *)(a1 + 88), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
    if ((v7 & 0x80000000) == 0) {
      return v7;
    }
LABEL_18:
    uint64_t v21 = 0;
    char v22 = 1;
    do
    {
      char v23 = v22;
      uint64_t v24 = a1 + 16 * v21;
      uint64_t v25 = *(void *)(v24 + 24);
      if (v25)
      {
        (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v25, *(void *)(v24 + 32));
        *(void *)(v24 + 24) = 0;
        *(_DWORD *)(v24 + 32) = 0;
      }
      char v22 = 0;
      uint64_t v21 = 1;
    }
    while ((v23 & 1) != 0);
    uint64_t v26 = 0;
    char v27 = 1;
    do
    {
      char v28 = v27;
      uint64_t v29 = a1 + 16 * v26;
      uint64_t v30 = *(void *)(v29 + 56);
      if (v30)
      {
        (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v30, *(void *)(v29 + 64));
        *(void *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
      }
      char v27 = 0;
      uint64_t v26 = 1;
    }
    while ((v28 & 1) != 0);
  }
  return v7;
}

uint64_t pp_sent_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2369789959;
  uint64_t v23 = 0;
  int v22 = 0;
  if ((safeh_HandleCheck(a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1)
  {
    if (!*(void *)(a1 + 24)) {
      return 2369789969;
    }
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v23) & 0x80000000) == 0)
    {
      uint64_t v12 = *(void *)(v23 + 32);
      if (v12) {
        log_OutText(v12, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_Process", v9, v10, v11, v21);
      }
      *a5 = 2;
      uint64_t v13 = sentpar_Process(*(void *)(a1 + 88), &v22, *(void *)(a1 + 72), *(void *)(a1 + 80), v8, v9, v10, v11);
      if ((v13 & 0x80000000) == 0)
      {
        if (v22 == 1)
        {
          uint64_t v7 = paramc_ParamSetStr(*(void *)(v23 + 40), (uint64_t)"ppmarkersetlang", "normal");
          *a5 = 3;
          uint64_t v17 = *(void *)(v23 + 32);
          if (v17) {
            log_OutText(v17, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Immediate Voice Switch!", v14, v15, v16, v21);
          }
          goto LABEL_27;
        }
        uint64_t v18 = sentpar_WriteTextAndMarkers(*(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));
        if ((v18 & 0x80000000) != 0) {
          goto LABEL_22;
        }
        uint64_t v7 = sentpar_ResetMarkerBlocks(*(uint64_t **)(a1 + 88));
        if ((v7 & 0x80000000) != 0
          || !*(_DWORD *)(a1 + 96) && !sentpar_IsTextElementAtEos(*(void *)(a1 + 88)))
        {
          goto LABEL_27;
        }
        *a5 = 1;
        if (*(_DWORD *)(a1 + 96)) {
          goto LABEL_27;
        }
LABEL_21:
        uint64_t v18 = pp_sent_parser_loc_CloseOutStreams(a1);
LABEL_22:
        uint64_t v7 = v18;
        goto LABEL_27;
      }
      uint64_t v7 = v13;
      if ((v13 & 0x1FFF) == 0x800)
      {
        if (!*(_DWORD *)(a1 + 96))
        {
          *a5 = 0;
          if (*(_DWORD *)(a1 + 96)) {
            uint64_t v7 = v13;
          }
          else {
            uint64_t v7 = 0;
          }
LABEL_27:
          uint64_t v19 = *(void *)(v23 + 32);
          if (v19) {
            log_OutText(v19, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Leaving pp_sent_parser_Process peResults=%d fRet=%d", v14, v15, v16, *a5);
          }
          return v7;
        }
        uint64_t v7 = 0;
      }
      else
      {
        if ((v13 & 0x1FFF) == 0x17)
        {
          *a5 = 1;
          goto LABEL_21;
        }
        pp_sent_parser_loc_CloseOutStreams(a1);
      }
      *a5 = 1;
      goto LABEL_27;
    }
  }
  return v7;
}

uint64_t pp_sent_parser_ProcessStop(_WORD **a1, int a2)
{
  uint64_t v3 = 2369789959;
  uint64_t v17 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v17) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v17 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ProcessStop", v4, v5, v6, v16);
    }
    uint64_t v8 = sentpar_ProcessEnd((uint64_t)a1[11], *a1, (int)a1[1]);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = pp_sent_parser_loc_CloseOutStreams((uint64_t)a1);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      uint64_t v9 = 0;
      char v10 = 1;
      do
      {
        while (1)
        {
          char v11 = v10;
          uint64_t v12 = &a1[2 * v9];
          uint64_t v13 = v12[3];
          if (v13) {
            break;
          }
          char v10 = 0;
          uint64_t v9 = 1;
          if ((v11 & 1) == 0) {
            return 0;
          }
        }
        int v14 = (*((uint64_t (**)(_WORD *, _WORD *))a1[2] + 9))(v13, v12[4]);
        char v10 = 0;
        v12[3] = 0;
        *((_DWORD *)v12 + 8) = 0;
        uint64_t v9 = 1;
      }
      while ((v11 & (v14 >= 0)) != 0);
      if (v14 < 0) {
        return v14;
      }
      else {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t pp_sent_parser_loc_CloseOutStreams(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    while (1)
    {
      char v4 = v3;
      uint64_t v5 = a1 + 16 * v2;
      uint64_t v6 = *(void *)(v5 + 56);
      if (v6) {
        break;
      }
      char v3 = 0;
      uint64_t v2 = 1;
      if ((v4 & 1) == 0) {
        return 0;
      }
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v6, *(void *)(v5 + 64));
    char v3 = 0;
    *(void *)(v5 + 56) = 0;
    *(_DWORD *)(v5 + 64) = 0;
    uint64_t v2 = 1;
  }
  while ((((int)result >= 0) & v4) != 0);
  if ((int)result < 0) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t pp_word_parser_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (!a1) {
    return v5;
  }
  uint64_t v6 = *(void *)(a1 + 88);
  return wordpar_ResourceTypes(v6, a3);
}

uint64_t pp_word_parser_ResourceUnload(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (!a1) {
    return v7;
  }
  uint64_t v8 = *(void *)(a1 + 88);
  return wordpar_ResourceUnload(v8, a3, a4);
}

uint64_t pp_word_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2370838529;
  }
  uint64_t result = 0;
  *a2 = &IPPWordParser;
  return result;
}

uint64_t pp_word_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v5 = 2370838535;
  uint64_t v20 = 0;
  if (a5 && (InitRsrcFunction(a3, a4, &v22) & 0x80000000) == 0)
  {
    uint64_t v12 = v22;
    uint64_t v13 = v22[4];
    if (v13)
    {
      log_OutText(v13, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjOpen", v9, v10, v11, v19);
      uint64_t v12 = v22;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t v14 = heap_Alloc(v12[1], 104);
    if (v14)
    {
      uint64_t v15 = v14;
      *(void *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 80) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(void *)uint64_t v14 = a3;
      *(void *)(v14 + 8) = a4;
      *(_DWORD *)(v14 + 96) = 0;
      if ((paramc_ParamGetStr(v22[5], (uint64_t)"clcpppipelinemode", &v20) & 0x80000000) == 0 && v20 && *v20) {
        *(_DWORD *)(v15 + 96) = 1;
      }
      uint64_t Object = objc_GetObject(v22[6], (uint64_t)"SYNTHSTREAM", &v21);
      if ((Object & 0x80000000) != 0
        || (uint64_t v17 = *(void *)(v21 + 8),
            *(void *)(v15 + 16) = v17,
            uint64_t Object = wordpar_ObjOpen(a3, a4, v17, (uint64_t *)(v15 + 88), *(_DWORD *)(v15 + 96)),
            (Object & 0x80000000) != 0))
      {
        uint64_t v5 = Object;
        pp_word_parser_ObjClose(v15, 87327);
      }
      else
      {
        uint64_t v5 = 0;
        *(void *)a5 = v15;
        *(void *)(a5 + 8) = 87327;
      }
    }
    else
    {
      return 2370838538;
    }
  }
  return v5;
}

uint64_t pp_word_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = 2370838535;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjClose", v4, v5, v6, v11);
    }
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      wordpar_ObjClose(v8);
    }
    uint64_t v9 = v12;
    if (*(void *)(a1 + 16))
    {
      objc_ReleaseObject(*(void *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v12;
    }
    heap_Free(*(void **)(v9 + 8), a1);
    return 0;
  }
  return v3;
}

uint64_t pp_word_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = 2370838535;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjReopen", v4, v5, v6, v11);
    }
    uint64_t v8 = *(_WORD ***)(a1 + 88);
    if (v8 && (uint64_t v9 = wordpar_ObjReopen(v8), (v9 & 0x80001FFF) == 0x8000000A))
    {
      uint64_t v3 = v9;
      *(void *)(a1 + 88) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t pp_word_parser_ResourceLoad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = 0;
  uint64_t v13 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v20) & 0x80000000) == 0)
  {
    if (a3 && a7)
    {
      if (a4)
      {
        if (a5 || !a6) {
          return wordpar_ResourceLoad(*(void *)(a1 + 88), a3, a4, a5, a6, a7);
        }
      }
      else if (a5 && a6)
      {
        return wordpar_ResourceLoad(*(void *)(a1 + 88), a3, a4, a5, a6, a7);
      }
    }
    log_OutPublic(*(void *)(v20 + 32), (uint64_t)"PP_WORD_PARSER", 1923, 0, v14, v15, v16, v17, v19);
  }
  return v13;
}

uint64_t pp_word_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = 0;
  uint64_t v7 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1)
  {
    HIDWORD(v31) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v32) & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(v32 + 32);
      if (v11) {
        log_OutText(v11, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ProcessStart", v8, v9, v10, v31);
      }
      uint64_t WParserType = wordpar_GetWParserType(*(void *)(a1 + 88), (_DWORD *)&v31 + 1);
      if ((WParserType & 0x80000000) != 0)
      {
        return WParserType;
      }
      else
      {
        uint64_t v13 = 0;
        char v14 = 1;
        while (1)
        {
          char v15 = v14;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, void, uint64_t))(*(void *)(a1 + 16) + 64))(a3, a4, 213, szINPUT_STREAMS[v13], 0, 0, a1 + 16 * v13 + 24) & 0x80000000) != 0)break; {
          char v14 = 0;
          }
          uint64_t v13 = 1;
          if ((v15 & 1) == 0)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 16) + 64))(a3, a4, 213, "text/plain;charset=utf-8",
                    0,
                    1,
                    a1 + 56) & 0x80000000) == 0)
            {
              uint64_t v16 = *(void *)(a1 + 16);
              uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v16 + 64);
              uint64_t v18 = (*(uint64_t (**)(void))(v16 + 152))();
              if ((v17(a3, a4, 213, "application/x-realspeak-markers-pp;version=4.0", v18, 1, a1 + 72) & 0x80000000) == 0)
              {
                int v19 = wordpar_ProcessStart(*(void *)(a1 + 88));
                return v19 & (v19 >> 31);
              }
            }
            break;
          }
        }
        uint64_t v20 = 0;
        char v21 = 1;
        do
        {
          char v22 = v21;
          uint64_t v23 = a1 + 16 * v20;
          uint64_t v24 = *(void *)(v23 + 24);
          if (v24)
          {
            (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v24, *(void *)(v23 + 32));
            *(void *)(v23 + 24) = 0;
            *(_DWORD *)(v23 + 32) = 0;
          }
          char v21 = 0;
          uint64_t v20 = 1;
        }
        while ((v22 & 1) != 0);
        uint64_t v25 = 0;
        char v26 = 1;
        do
        {
          char v27 = v26;
          uint64_t v28 = a1 + 16 * v25;
          uint64_t v29 = *(void *)(v28 + 56);
          if (v29)
          {
            (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v29, *(void *)(v28 + 64));
            *(void *)(v28 + 56) = 0;
            *(_DWORD *)(v28 + 64) = 0;
          }
          char v26 = 0;
          uint64_t v25 = 1;
        }
        while ((v27 & 1) != 0);
        return 0;
      }
    }
  }
  return v7;
}

uint64_t pp_word_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2370838535;
  uint64_t v44 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v44) & 0x80000000) == 0)
  {
    uint64_t v11 = v44;
    uint64_t v12 = *(void *)(v44 + 32);
    if (v12)
    {
      log_OutText(v12, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_Process", v8, v9, v10, v40);
      uint64_t v11 = v44;
    }
    *a5 = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v43 = 0;
    uint64_t v13 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 24), *(void *)(a1 + 32), &v48, (char *)&v47 + 4);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v14 = HIDWORD(v47);
    uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v47, &v46);
    if ((v7 & 0x80000000) != 0) {
      return v7;
    }
    if (v47)
    {
      if (v47)
      {
        uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v43, (char *)&v46 + 4);
        if ((v13 & 0x80000000) != 0) {
          return v13;
        }
        uint64_t v23 = HIDWORD(v46);
        uint64_t v7 = wordpar_LoadFromStreamData(*(void *)(a1 + 88), v48, HIDWORD(v47), v43, HIDWORD(v46));
        LODWORD(v18) = 0;
LABEL_19:
        if ((v7 & 0x80000000) != 0) {
          return v7;
        }
        uint64_t v24 = v43;
        uint64_t v25 = v44;
        uint64_t v48 = 0;
        if ((v23 & 0x3FFFC0) != 0)
        {
          unsigned int v41 = v23;
          unsigned int v42 = v14;
          uint64_t v26 = 0;
          uint64_t v7 = 0;
          uint64_t v27 = (unsigned __int16)(v23 >> 6);
          while (1)
          {
            while (1)
            {
              uint64_t v28 = v24 + (v26 << 6);
              if (*(_DWORD *)(v28 + 20) == 200) {
                break;
              }
LABEL_34:
              if (++v26 == v27)
              {
                uint64_t v23 = v41;
                uint64_t v14 = v42;
                if ((v7 & 0x80000000) != 0) {
                  return v7;
                }
LABEL_50:
                if (v18)
                {
                  LODWORD(v7) = 0;
                  unsigned int v36 = 0;
                  goto LABEL_52;
                }
                unsigned int v38 = wordpar_Process(*(void *)(a1 + 88));
                if ((v38 & 0x1FFF) == 0xA) {
                  uint64_t v7 = v7;
                }
                else {
                  uint64_t v7 = v38;
                }
                if ((v7 & 0x80000000) != 0)
                {
                  if ((v7 & 0x1FFF) == 0x800)
                  {
                    *a5 = 0;
                    if (*(_DWORD *)(a1 + 96)) {
                      return v7;
                    }
                    else {
                      return 0;
                    }
                  }
                  if ((v7 & 0x1FFF) != 0x17)
                  {
                    pp_sent_parser_loc_CloseOutStreams(a1);
                    *a5 = 1;
                    return v7;
                  }
                  *a5 = 1;
                  uint64_t v13 = pp_sent_parser_loc_CloseOutStreams(a1);
                  if ((v13 & 0x80000000) == 0) {
                    return 0;
                  }
                }
                else
                {
                  unsigned int v36 = v38;
                  if ((v38 & 0x1FFF) == 0xA
                    || (uint64_t v13 = wordpar_WriteTextAndMarkers(*(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80)), (v13 & 0x80000000) == 0))
                  {
                    uint64_t v13 = wordpar_ResetData(*(void *)(a1 + 88));
                    if ((v13 & 0x80000000) == 0)
                    {
                      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32), v14);
                      if ((v13 & 0x80000000) == 0)
                      {
                        uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), v23);
                        if ((v7 & 0x80000000) == 0)
                        {
LABEL_52:
                          uint64_t v37 = *(void *)(v44 + 32);
                          if (v37) {
                            log_OutText(v37, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Leaving pp_word_parser_Process", v15, v16, v17, v40);
                          }
                          if ((v36 & 0x1FFF) == 0xA) {
                            return v36;
                          }
                          else {
                            return v7;
                          }
                        }
                        return v7;
                      }
                    }
                  }
                }
                return v13;
              }
            }
            uint64_t v31 = *(char **)(v28 + 40);
            uint64_t v30 = (char **)(v28 + 40);
            uint64_t v29 = v31;
            if (v31 && *v29 && LH_stricmp(v29, "unset"))
            {
              if (LH_stricmp(*v30, "reset"))
              {
                uint64_t v32 = *v30;
              }
              else
              {
                int Str = paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"shortfragmentforceclm_value_pipeline", &v48);
                if (v48) {
                  BOOL v35 = Str < 0;
                }
                else {
                  BOOL v35 = 1;
                }
                if (v35) {
                  uint64_t v32 = &byte_20D5A22AE;
                }
                else {
                  uint64_t v32 = (char *)v48;
                }
              }
            }
            else
            {
              uint64_t v32 = &byte_20D5A22AE;
            }
            uint64_t v33 = paramc_ParamSetStr(*(void *)(v25 + 40), (uint64_t)"shortfragmentforceclm", v32);
            uint64_t v7 = v33;
            if ((v33 & 0x80000000) == 0)
            {
              log_OutText(*(void *)(v25 + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Parameter markup \"\\!\\%s=%s\\\" => set \"%s=%s\"", v15, v16, v17, (uint64_t)"shortfragmentforceclm");
              goto LABEL_34;
            }
            if ((v33 & 0x1FFF) != 0xF) {
              goto LABEL_34;
            }
            log_OutText(*(void *)(v25 + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Parameter markup \"\\!\\%s=%s\\\" => set \"%s=%s\" : failed, invalid parameter value", v15, v16, v17, (uint64_t)"shortfragmentforceclm");
            uint64_t v7 = 0;
            if (++v26 == v27)
            {
              LODWORD(v7) = 0;
              uint64_t v23 = v41;
              uint64_t v14 = v42;
              goto LABEL_50;
            }
          }
        }
LABEL_49:
        LODWORD(v7) = 0;
        goto LABEL_50;
      }
      LODWORD(v18) = 0;
    }
    else
    {
      if (v46)
      {
        uint64_t v18 = 0;
        char v19 = 1;
        do
        {
          char v20 = v19;
          uint64_t v21 = a1 + 16 * v18;
          uint64_t v22 = *(void *)(v21 + 56);
          if (v22)
          {
            uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v22, *(void *)(v21 + 64));
            *(void *)(v21 + 56) = 0;
            *(_DWORD *)(v21 + 64) = 0;
          }
          char v19 = 0;
          uint64_t v18 = 1;
        }
        while ((v20 & 1) != 0);
        uint64_t v23 = 0;
        goto LABEL_19;
      }
      long long v45 = 0;
      if ((paramc_ParamGetStr(*(void *)(v11 + 40), (uint64_t)"clcpppipelinemode", &v45) & 0x80000000) != 0
        || !v45
        || !*v45)
      {
        *a5 = 0;
      }
      LODWORD(v18) = 1;
    }
    uint64_t v23 = 0;
    goto LABEL_49;
  }
  return v7;
}

uint64_t pp_word_parser_ProcessStop(uint64_t a1, int a2)
{
  uint64_t v3 = 2370838535;
  uint64_t v17 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v17) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v17 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ProcessStop", v4, v5, v6, v16);
    }
    uint64_t v8 = wordpar_ProcessEnd(*(void *)(a1 + 88));
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = pp_sent_parser_loc_CloseOutStreams(a1);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      uint64_t v9 = 0;
      char v10 = 1;
      do
      {
        while (1)
        {
          char v11 = v10;
          uint64_t v12 = a1 + 16 * v9;
          uint64_t v13 = *(void *)(v12 + 24);
          if (v13) {
            break;
          }
          char v10 = 0;
          uint64_t v9 = 1;
          if ((v11 & 1) == 0) {
            return 0;
          }
        }
        int v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v13, *(void *)(v12 + 32));
        char v10 = 0;
        *(void *)(v12 + 24) = 0;
        *(_DWORD *)(v12 + 32) = 0;
        uint64_t v9 = 1;
      }
      while ((v11 & (v14 >= 0)) != 0);
      if (v14 < 0) {
        return v14;
      }
      else {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t wordpar_freeBRKDefs(uint64_t a1)
{
  if (!*(void *)(a1 + 152)) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5);
  if ((inited & 0x80000000) != 0) {
    return 2370838535;
  }
  uint64_t v3 = inited;
  heap_Free(*(void **)(v5 + 8), *(void *)(a1 + 152));
  *(void *)(a1 + 152) = 0;
  return v3;
}

uint64_t wordpar_getBRKDefs(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v12 = 0;
  if (*(void *)(a1 + 152)) {
    return 0;
  }
  uint64_t v4 = 2370838535;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 164) = *a4;
    int v13 = *(_DWORD *)(a4 + 1) + 1;
    char v10 = (unsigned char *)heap_Calloc(*(void **)(v12 + 8), 1, v13);
    *(void *)(a1 + 152) = v10;
    if (v10)
    {
      unsigned int StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)a4, a3, *(_DWORD *)(a4 + 3) + 10, v10, (unsigned int *)&v13);
      if ((StringZ & 0x80000000) == 0)
      {
        if (*(void *)(a1 + 152)) {
          return StringZ;
        }
        else {
          return 2370838535;
        }
      }
    }
    else
    {
      wordpar_freeBRKDefs(a1);
      return 2370838538;
    }
  }
  return v4;
}

uint64_t wordpar_loc_nonasian_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v233 = 0;
  uint64_t v234 = 0;
  uint64_t v5 = 2370838528;
  if (!a1) {
    return 2370838535;
  }
  uint64_t v10 = a1;
  int v235 = 0;
  uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 32) + 136))(a2, a3, &v235);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1021, (uint64_t)"start wordpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1020, (uint64_t)"start wordpar_WriteTextAndMarkers()");
  uint64_t v237 = 0;
  v238[0] = 0;
  uint64_t v236 = 0;
  unsigned __int16 v12 = strlen((const char *)(v10 + 180));
  uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1020, 1u, v238);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  v231 = *(char **)(v238[0] + 8);
  uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1021, 1u, &v237);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v13 = *(void *)(v237 + 8);
  uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1012, 1u, &v236);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v211 = a2;
  uint64_t v212 = a3;
  uint64_t v209 = a4;
  uint64_t v215 = a5;
  uint64_t v14 = v237;
  unsigned int v15 = *(unsigned __int16 *)(v237 + 16);
  if (v15 >= 2)
  {
    uint64_t v16 = 0;
    unsigned __int16 v207 = v12;
    size_t v232 = v12;
    uint64_t v17 = 1;
    int v208 = -1;
    int v18 = 1;
    uint64_t v224 = v10;
    unsigned __int16 v210 = v12;
    uint64_t v19 = v13;
    __src = (char *)(v10 + 180);
    while (1)
    {
      unint64_t v20 = v19 + ((unint64_t)(unsigned __int16)v17 << 6);
      int v23 = *(_DWORD *)(v20 + 20);
      uint64_t v22 = (_DWORD *)(v20 + 20);
      int v21 = v23;
      if (v23 == 21)
      {
        uint64_t v16 = v17;
        goto LABEL_264;
      }
      if (v21 == 7)
      {
        unint64_t v24 = v19 + ((unint64_t)(unsigned __int16)v17 << 6);
        uint64_t v25 = (_DWORD *)(v24 + 40);
        if (*(_DWORD *)(v24 + 40) == 43)
        {
          uint64_t v28 = *(char **)(v24 + 48);
          uint64_t v26 = (void *)(v24 + 48);
          uint64_t v27 = v28;
          if (v28) {
            break;
          }
        }
      }
LABEL_264:
      uint64_t v17 = (v17 + 1);
      int v18 = (unsigned __int16)v17;
      unsigned int v15 = *(unsigned __int16 *)(v14 + 16);
      if ((unsigned __int16)v17 >= v15) {
        goto LABEL_268;
      }
    }
    int v29 = *(_DWORD *)(v19 + 32);
    LODWORD(v30) = v18 + 1;
    if ((unsigned __int16)v15 > (unsigned __int16)(v18 + 1))
    {
      uint64_t v30 = (unsigned __int16)(v18 + 1);
      uint64_t v31 = (int *)(v19 + (v30 << 6) + 20);
      while (1)
      {
        int v32 = *v31;
        v31 += 16;
        if (v32 == 7) {
          break;
        }
        if ((unsigned __int16)v15 == ++v30) {
          goto LABEL_19;
        }
      }
    }
    if ((unsigned __int16)v30 == (unsigned __int16)v15)
    {
LABEL_19:
      int v223 = *(_DWORD *)(v19 + 36);
    }
    else
    {
      int v223 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v30 << 6) + 32) - v29;
      unsigned int v15 = v30;
    }
    uint64_t v218 = (v18 + 1);
    int v33 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 32) - v29;
    unsigned int v228 = v15;
    uint64_t v229 = (unsigned __int16)(*(_WORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 32) - v29);
    uint64_t v220 = v16;
    uint64_t v221 = (unsigned __int16)v17;
    uint64_t v225 = v19;
    int v213 = v18;
    unsigned __int16 v219 = v33;
    v216 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 56);
    if (!*v216) {
      goto LABEL_62;
    }
    unsigned int v34 = v223 - v33;
    *uint64_t v26 = 0;
    unsigned int v35 = (unsigned __int16)(v223 - v33);
    if ((_WORD)v223 == (_WORD)v33) {
      goto LABEL_62;
    }
    unsigned int v36 = &v231[v229];
    unsigned int v37 = 0;
    while (utf8_BelongsToSet(0, v36, v37, (unsigned __int16)v34))
    {
      if (v35 == ++v37)
      {
        unsigned int v37 = v34;
        break;
      }
    }
    if ((_WORD)v34 == 1)
    {
LABEL_31:
      LOWORD(v34) = 1;
    }
    else
    {
      unsigned int v38 = (unsigned __int16)(v34 - 1);
      while (utf8_BelongsToSet(0, v36, v38, v35))
      {
        LOWORD(v34) = v34 - 1;
        if (!(_WORD)--v38) {
          goto LABEL_31;
        }
      }
    }
    if ((unsigned __int16)v37 >= (unsigned __int16)v34) {
      goto LABEL_62;
    }
    v206 = v25;
    unsigned __int16 v226 = 0;
    char v39 = 95;
    unsigned int v40 = v37;
    do
    {
      int v41 = v36[(unsigned __int16)v40];
      if (v41 == 35 || v41 == 95)
      {
        if (v39 != 35 && v39 != 95) {
          ++v226;
        }
      }
      else
      {
        BOOL v89 = v41 == 92;
        uint64_t v42 = (unsigned __int16)v40 + 1;
        BOOL v43 = !v89 || v42 >= (unsigned __int16)v34;
        if (!v43 && v36[v42] == 84)
        {
          for (unsigned int i = v40 + 2;
                (unsigned __int16)i < (unsigned __int16)v34;
                i += utf8_determineUTF8CharLength(v45))
          {
            unsigned int v45 = v36[(unsigned __int16)i];
            if (v45 == 92) {
              break;
            }
          }
          if (v36[(unsigned __int16)i] == 92) {
            unsigned int v40 = i;
          }
          uint64_t v10 = v224;
        }
      }
      if (!utf8_BelongsToSet(0, v36, (unsigned __int16)v40, v35)) {
        char v39 = v36[(unsigned __int16)v40];
      }
      ++v40;
    }
    while ((unsigned __int16)v40 < (unsigned __int16)v34);
    if (v39 == 35)
    {
      uint64_t v46 = v231;
    }
    else
    {
      uint64_t v46 = v231;
      if (v39 != 95) {
        ++v226;
      }
    }
    if (v226)
    {
      unsigned __int16 v47 = v37 + v219;
      unsigned __int16 v48 = v34 - v37;
      uint64_t v49 = v236;
      unsigned int v50 = *(unsigned __int16 *)(v236 + 16);
      unsigned __int16 v51 = v48 + v50 + 1;
      if (*(unsigned __int16 *)(v236 + 18) >= v51)
      {
        unsigned __int16 v52 = v226;
      }
      else
      {
        uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1012, (unsigned __int16)(v48 + v50 + 1), &v236);
        unsigned __int16 v52 = v226;
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
        uint64_t v49 = v236;
        unsigned int v50 = *(unsigned __int16 *)(v236 + 16);
      }
      strncpy((char *)(*(void *)(v49 + 8) + *(unsigned __int16 *)(v49 + 2) * (unint64_t)v50), &v46[v47], v48)[v48] = 0;
      *uint64_t v22 = 34;
      _DWORD *v206 = *(unsigned __int16 *)(v236 + 16);
      *(_WORD *)(v236 + 16) = v51;
    }
    else
    {
LABEL_62:
      unsigned __int16 v52 = 0;
    }
    unsigned __int16 v53 = strlen(v27);
    unsigned __int16 v54 = v53;
    unsigned int v55 = v53;
    if (v53)
    {
      uint64_t v56 = 0;
      int v57 = v53;
      while (utf8_BelongsToSet(1u, v27, v56, v55) == 1)
      {
        if (v57 == ++v56)
        {
          LOWORD(v56) = v54;
          if (!v54) {
            goto LABEL_97;
          }
          goto LABEL_72;
        }
      }
      if (!(_WORD)v56) {
        goto LABEL_73;
      }
      if (!utf8_BelongsToSet(1u, v27, v56, v55)) {
        memmove(v27, &v27[v56], v54 - v56);
      }
LABEL_72:
      v54 -= v56;
      v27[v54] = 0;
    }
LABEL_73:
    int v58 = v231;
    unsigned int v59 = v54;
    if (!v54)
    {
      unsigned __int16 v54 = 0;
      unsigned __int16 v62 = 0;
      goto LABEL_99;
    }
    if (v54 != 1)
    {
      unsigned int v60 = (unsigned __int16)(v54 - 1) + 1;
      while (utf8_BelongsToSet(1u, v27, v60 - 1, v54) == 1)
      {
        __int16 v61 = v60-- - 2;
        if (!v61) {
          goto LABEL_83;
        }
      }
      if (v54 != v60 && !utf8_BelongsToSet(1u, v27, v60 - 1, v54))
      {
        v27[v60] = 0;
        unsigned __int16 v54 = strlen(v27);
      }
LABEL_83:
      if (!v54)
      {
LABEL_97:
        unsigned __int16 v54 = 0;
        unsigned int v59 = 0;
        unsigned __int16 v62 = 0;
LABEL_98:
        int v58 = v231;
LABEL_99:
        unsigned __int16 v66 = 0;
        unsigned __int16 v227 = v52;
        if (v52 && *v216)
        {
          unsigned __int16 v67 = v62;
          if (v62 == v52)
          {
            unsigned __int16 v66 = 0;
            unsigned __int16 v68 = 0;
            __int16 v222 = 0;
          }
          else if (v62 >= v52)
          {
            uint64_t v136 = *(void *)(v10 + 24);
            unsigned __int16 v137 = *(_WORD *)(v237 + 16) + 1;
            *(_WORD *)(v237 + 16) = v137;
            uint64_t inserted = datac_RequestBlock(v136, 1021, v137, &v237);
            if ((inserted & 0x80000000) != 0) {
              return inserted;
            }
            uint64_t v138 = *(void *)(v237 + 8);
            uint64_t v225 = v138;
            int v139 = (_DWORD *)(v138 + ((unint64_t)(unsigned __int16)v218 << 6));
            memmove((void *)(v138 + ((unint64_t)((unsigned __int16)v218 + 1) << 6)), v139, (uint64_t)(*(unsigned __int16 *)(v237 + 16) - v213) << 6);
            uint64_t v140 = v236;
            unsigned int v141 = *(unsigned __int16 *)(v236 + 16);
            unsigned __int16 v142 = v141 + strlen(v27) + 1;
            if (*(unsigned __int16 *)(v236 + 18) < v142)
            {
              uint64_t inserted = datac_RequestBlock(*(void *)(v224 + 24), 1012, v142, &v236);
              if ((inserted & 0x80000000) != 0) {
                return inserted;
              }
              uint64_t v140 = v236;
              unsigned int v141 = *(unsigned __int16 *)(v236 + 16);
            }
            __int16 v222 = v62 - v52;
            ++v228;
            strcpy((char *)(*(void *)(v140 + 8) + *(unsigned __int16 *)(v140 + 2) * (unint64_t)v141), v27);
            v139[10] = *(unsigned __int16 *)(v236 + 16);
            *(_WORD *)(v236 + 16) = v142;
            unint64_t v143 = v225 + ((unint64_t)(unsigned __int16)v17 << 6);
            int v144 = *(_DWORD *)(v143 + 24);
            v139[5] = 100;
            v139[6] = v144;
            v139[8] = *(_DWORD *)(v143 + 32) + 1;
            *int v139 = 1;
            int v145 = strlen(v27);
            unsigned __int16 v66 = 0;
            unsigned __int16 v68 = 0;
            v139[7] = v145;
            uint64_t v10 = v224;
            int v58 = v231;
          }
          else
          {
            __int16 v222 = 0;
            unsigned __int16 v68 = v52 - v62;
            unsigned __int16 v66 = (v52 - v67) * v207;
          }
        }
        else
        {
          unsigned __int16 v68 = 0;
          __int16 v222 = 0;
        }
        int v69 = v59 + v66;
        int v70 = (unsigned __int16)v223 - v229;
        LOWORD(v71) = v69 - (v223 - v229);
        int v217 = v69;
        if (v69 <= v70)
        {
          int v74 = v70 - v69;
          int v71 = -v74;
          memmove((void *)&v58[(unsigned __int16)v223 - (unsigned __int16)v74], &v58[(unsigned __int16)v223], *(unsigned __int16 *)(v238[0] + 16) - (unint64_t)(unsigned __int16)v223);
          uint64_t v72 = v238[0];
          __int16 v73 = *(_WORD *)(v238[0] + 16) - v74;
LABEL_108:
          *(_WORD *)(v72 + 16) = v73;
          strncpy((char *)&v58[v229], v27, v54);
          v231 = (char *)v58;
          unsigned int v75 = strlen(v58);
          uint64_t v76 = v68;
          size_t v77 = v232;
          if (v68)
          {
            int v78 = (char *)&v58[v59 + v229];
            do
            {
              unsigned __int16 v79 = strncpy(v78, __src, v77);
              size_t v77 = v232;
              int v78 = &v79[v232];
              --v76;
            }
            while (v76);
          }
          heap_Free(*(void **)(*(void *)(v10 + 16) + 8), (uint64_t)v27);
          if (v222)
          {
            unsigned __int16 v80 = v219;
            unsigned __int16 PreviousUtf8Offset = v59 + v219 + v68 * v210;
            while (--PreviousUtf8Offset)
            {
              if (*(unsigned __int16 *)(v238[0] + 16) <= PreviousUtf8Offset
                || utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75) != 1)
              {
                while (1)
                {
                  unsigned int v82 = *(unsigned __int16 *)(v238[0] + 16);
                  if (PreviousUtf8Offset >= v82) {
                    break;
                  }
                  if (utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75))
                  {
                    unsigned int v82 = *(unsigned __int16 *)(v238[0] + 16);
                    break;
                  }
                  unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v231, PreviousUtf8Offset);
                  if (!PreviousUtf8Offset) {
                    goto LABEL_140;
                  }
                }
                if (v82 > PreviousUtf8Offset)
                {
                  do
                  {
                    while (*(unsigned __int16 *)(v238[0] + 16) > PreviousUtf8Offset
                         && utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75) == 1)
                    {
                      v231[PreviousUtf8Offset--] = 45;
                      if (!PreviousUtf8Offset) {
                        goto LABEL_140;
                      }
                    }
                    --v222;
                    while (1)
                    {
                      unsigned int v88 = *(unsigned __int16 *)(v238[0] + 16);
                      if (PreviousUtf8Offset >= v88) {
                        break;
                      }
                      if (utf8_BelongsToSet(1u, v231, PreviousUtf8Offset, v75))
                      {
                        unsigned int v88 = *(unsigned __int16 *)(v238[0] + 16);
                        break;
                      }
                      unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v231, PreviousUtf8Offset);
                      if (!PreviousUtf8Offset) {
                        goto LABEL_140;
                      }
                    }
                    BOOL v89 = v88 <= PreviousUtf8Offset || v222 == 0;
                  }
                  while (!v89);
                }
                break;
              }
            }
LABEL_140:
            unint64_t v83 = *(unsigned __int16 *)(v237 + 16);
            if (v83 < 2)
            {
              uint64_t v84 = v225;
              unsigned __int16 v85 = v228;
              uint64_t v86 = (unsigned __int16)v17;
              uint64_t v87 = v218;
            }
            else
            {
              uint64_t v84 = v225;
              int v90 = *(_DWORD *)(v225 + 32);
              unsigned __int16 v85 = v228;
              unsigned int v91 = v90 + v229;
              unsigned int v92 = v90 + (unsigned __int16)v223;
              unint64_t v93 = v83 - 1;
              uint64_t v94 = (unsigned int *)(v225 + 96);
              uint64_t v86 = (unsigned __int16)v17;
              uint64_t v87 = v218;
              do
              {
                if (*v94 > v91 && *v94 < v92) {
                  *uint64_t v94 = v91;
                }
                v94 += 16;
                --v93;
              }
              while (v93);
            }
          }
          else
          {
            unint64_t v83 = *(unsigned __int16 *)(v237 + 16);
            uint64_t v84 = v225;
            unsigned __int16 v85 = v228;
            uint64_t v86 = (unsigned __int16)v17;
            uint64_t v87 = v218;
            unsigned __int16 v80 = v219;
          }
          *(_DWORD *)(v84 + 36) = *(unsigned __int16 *)(v238[0] + 16);
          wordpar_loc_adjustMarkerPositions(v83, v225, (unsigned __int16)v87, v80, (unsigned __int16)v223, (__int16)v71);
          uint64_t v19 = v225;
          unsigned int v96 = (_DWORD *)(v225 + (v86 << 6));
          if (!v227 || !v96[14])
          {
            uint64_t v14 = v237;
            unint64_t v102 = *(unsigned __int16 *)(v237 + 16);
            uint64_t v16 = v220;
            if (v102 < 2)
            {
              uint64_t v5 = 2370838528;
            }
            else
            {
              long long v103 = (_DWORD *)(v225 + (v86 << 6) + 32);
              long long v104 = (_DWORD *)(v225 + 100);
              unint64_t v105 = v102 - 1;
              uint64_t v5 = 2370838528;
              while (*(v104 - 4) != 1 || *(v104 - 1) != *v103)
              {
                v104 += 16;
                if (!--v105) {
                  goto LABEL_168;
                }
              }
              if (*(v104 - 4) == 1)
              {
                unsigned int v168 = *(unsigned __int16 *)(v225 + 36);
                unsigned int v169 = (unsigned __int16)(*((_WORD *)v104 - 2) - *(_DWORD *)(v225 + 32));
                if (v169 >= v168)
                {
                  unsigned __int16 v170 = 0;
                }
                else
                {
                  unsigned __int16 v170 = 0;
                  do
                  {
                    if (utf8_BelongsToSet(0, v231, v169, v75)) {
                      break;
                    }
                    __int16 v171 = utf8_determineUTF8CharLength(v231[v169]);
                    v170 += v171;
                    unsigned int v169 = (unsigned __int16)(v171 + v169);
                  }
                  while (v169 < v168);
                  uint64_t v14 = v237;
                  LODWORD(v102) = *(unsigned __int16 *)(v237 + 16);
                  uint64_t v19 = v225;
                }
                *long long v104 = v170;
                uint64_t v5 = 2370838528;
                uint64_t v87 = v218;
              }
            }
LABEL_168:
            if (v87 != v102)
            {
              memmove(v96, (const void *)(v19 + (v87 << 6)), (uint64_t)((int)v102 - v213) << 6);
              uint64_t v19 = v225;
              uint64_t v14 = v237;
              LOWORD(v102) = *(_WORD *)(v237 + 16);
            }
            *(_WORD *)(v14 + 16) = v102 - 1;
            goto LABEL_263;
          }
          unsigned int v97 = v217 + v229 + *(_DWORD *)(v225 + 32);
          uint64_t v14 = v237;
          unsigned int v98 = *(unsigned __int16 *)(v237 + 16);
          for (unsigned __int16 j = 1; v98 > j; ++j)
          {
            unint64_t v100 = v225 + ((unint64_t)j << 6);
            unsigned int v101 = *(_DWORD *)(v100 + 32);
            if (v101 == v97 && *(_DWORD *)(v100 + 20) == 21)
            {
              uint64_t v108 = v85;
LABEL_195:
              uint64_t v146 = (unsigned int *)(v19 + (v108 << 6) + 32);
              v230 = (unsigned int *)(v19 + (v221 << 6) + 32);
              int v147 = (unsigned int *)(v19 + 96);
              char v148 = 1;
              uint64_t v149 = v19;
              while (2)
              {
                char v150 = v148;
                int v151 = *(_DWORD *)(v19 + 32);
                if (v150)
                {
                  unsigned int v152 = *v230;
                  unsigned __int16 v153 = *v230 - v151;
                  if (v153 && v231[v153 - 1] != 32)
                  {
                    unsigned __int16 v154 = *(_WORD *)(v237 + 16) + 1;
                    LOWORD(v155) = *(_WORD *)(v238[0] + 16);
                    goto LABEL_205;
                  }
LABEL_222:
                  char v148 = 0;
                  if ((v150 & 1) == 0) {
                    goto LABEL_223;
                  }
                  continue;
                }
                break;
              }
              unsigned int v152 = *v146;
              unsigned __int16 v153 = *v146 - v151;
              if (v153)
              {
                unsigned int v155 = *(unsigned __int16 *)(v238[0] + 16);
                if (v153 < v155 && v231[v153] != 32 && v231[v153 - 1] != 32)
                {
                  unsigned __int16 v154 = v228;
LABEL_205:
                  uint64_t inserted = datac_RequestBlock(*(void *)(v224 + 24), 1020, (unsigned __int16)(v155 + 1), v238);
                  if ((inserted & 0x80000000) != 0) {
                    return inserted;
                  }
                  uint64_t v156 = *(char **)(v238[0] + 8);
                  v231 = v156;
                  uint64_t v157 = &v156[v153];
                  memmove(&v156[v153 + 1], v157, *(unsigned __int16 *)(v238[0] + 16) - (unint64_t)v153);
                  *uint64_t v157 = 32;
                  ++*(_WORD *)(v238[0] + 16);
                  uint64_t v14 = v237;
                  unint64_t v158 = *(unsigned __int16 *)(v237 + 16);
                  uint64_t v19 = v149;
                  if (v158 < 2)
                  {
LABEL_221:
                    ++*(_DWORD *)(v149 + 36);
                    goto LABEL_222;
                  }
                  unint64_t v159 = v158 - 1;
                  uint64_t v160 = v154 - 1;
                  uint64_t v161 = v147;
                  uint64_t v162 = 1;
                  while (2)
                  {
                    if (v150)
                    {
                      unsigned int v163 = *v161;
                      if (*v161 >= v152)
                      {
                        BOOL v164 = v163 == v152 && *(v161 - 3) == 21;
                        unsigned __int16 v165 = v161;
                        if (!v164) {
LABEL_219:
                        }
                          *unsigned __int16 v165 = v163 + 1;
                      }
                    }
                    else if (v160)
                    {
                      unsigned int v163 = *v161;
                      if (*v161 >= v152)
                      {
                        unsigned __int16 v165 = (unsigned int *)(v149 + (v162 << 6) + 32);
                        goto LABEL_219;
                      }
                    }
                    ++v162;
                    v161 += 16;
                    --v160;
                    if (!--v159) {
                      goto LABEL_221;
                    }
                    continue;
                  }
                }
              }
LABEL_223:
              if (*(_DWORD *)(v19 + (v221 << 6) + 20) == 34)
              {
                uint64_t v14 = v237;
                uint64_t v166 = *(unsigned __int16 *)(v237 + 16);
                LODWORD(v17) = v228;
                uint64_t v10 = v224;
                uint64_t v16 = v220;
                if (v166 <= (unsigned __int16)v228) {
                  goto LABEL_262;
                }
                if (*(_DWORD *)(v19 + (v108 << 6) + 20) != 21) {
                  goto LABEL_261;
                }
                uint64_t v167 = 1;
                if (v166 >= 2)
                {
                  while (*(v147 - 3) != 1 || *v147 != *v230)
                  {
                    ++v167;
                    v147 += 16;
                    if (v166 == v167)
                    {
                      LODWORD(v167) = *(unsigned __int16 *)(v237 + 16);
                      break;
                    }
                  }
                }
                unint64_t v172 = v19 + ((unint64_t)(unsigned __int16)v167 << 6);
                uint64_t v5 = 2370838528;
                if (*(_DWORD *)(v172 + 20) == 1 && (int v173 = *(_DWORD *)(v172 + 32), v173 == *v230))
                {
                  unsigned int v174 = *(unsigned __int16 *)(v19 + 36);
                  unsigned int v175 = (unsigned __int16)(v173 - *(_WORD *)(v19 + 32));
                  if (v175 >= v174)
                  {
                    unsigned __int16 v176 = 0;
                  }
                  else
                  {
                    unsigned __int16 v176 = 0;
                    do
                    {
                      if (utf8_BelongsToSet(0, v231, v175, v75)) {
                        break;
                      }
                      __int16 v177 = utf8_determineUTF8CharLength(v231[v175]);
                      v176 += v177;
                      unsigned int v175 = (unsigned __int16)(v177 + v175);
                    }
                    while (v175 < v174);
                    uint64_t v14 = v237;
                    LODWORD(v166) = *(unsigned __int16 *)(v237 + 16);
                    uint64_t v19 = v149;
                  }
                  *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v167 << 6) + 36) = v176;
                  int v178 = v167 + 1;
                  if (v166 > (unsigned __int16)(v167 + 1))
                  {
                    uint64_t v5 = 2370838528;
                    do
                    {
                      v179 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v178 << 6));
                      if (v179[5] == 1
                        && (unsigned int v180 = v179[8], v180 >= *v230)
                        && v180 < *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v228 << 6) + 32))
                      {
                        uint64_t v181 = (unsigned __int16)v178 + 1;
                        if (v181 != (unsigned __int16)v166)
                        {
                          memmove(v179, (const void *)(v19 + (v181 << 6)), (uint64_t)((unsigned __int16)v166 - (unsigned __int16)v178) << 6);
                          uint64_t v19 = v149;
                          uint64_t v14 = v237;
                        }
                        --*(_WORD *)(v14 + 16);
                        --v228;
                      }
                      else
                      {
                        LODWORD(v167) = v178;
                      }
                      int v178 = v167 + 1;
                      LODWORD(v166) = *(unsigned __int16 *)(v14 + 16);
                    }
                    while (v166 > (unsigned __int16)(v167 + 1));
                    goto LABEL_260;
                  }
LABEL_261:
                  LODWORD(v17) = v228;
LABEL_262:
                  uint64_t v5 = 2370838528;
                }
                else
                {
LABEL_260:
                  LODWORD(v17) = v228;
                }
              }
              else
              {
                LODWORD(v17) = v228;
                uint64_t v10 = v224;
                uint64_t v5 = 2370838528;
                uint64_t v16 = v220;
              }
LABEL_263:
              LODWORD(v17) = v17 - 1;
              goto LABEL_264;
            }
            if (v101 > v97) {
              break;
            }
          }
          uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1021, (unsigned __int16)(v98 + 1), &v237);
          if ((inserted & 0x80000000) == 0)
          {
            uint64_t v19 = *(void *)(v237 + 8);
            int v106 = v85;
            int v107 = *(unsigned __int16 *)(v237 + 16);
            if (v85 == v107)
            {
              uint64_t v108 = v85;
              unint64_t v109 = v19 + ((unint64_t)v85 << 6);
              unsigned __int16 v110 = (_OWORD *)(v19 + ((uint64_t)(v85 - 1) << 6));
              long long v111 = v110[1];
              *(_OWORD *)unint64_t v109 = *v110;
              *(_OWORD *)(v109 + 16) = v111;
              long long v112 = v110[3];
              *(_OWORD *)(v109 + 32) = v110[2];
              *(_OWORD *)(v109 + 48) = v112;
              *(_DWORD *)(v109 + 24) += *(_DWORD *)(v109 + 28);
            }
            else
            {
              uint64_t v113 = (_OWORD *)(v19 + ((unint64_t)(v85 + 1) << 6));
              uint64_t v108 = v85;
              uint64_t v114 = (_OWORD *)(v19 + ((unint64_t)v85 << 6));
              uint64_t v115 = *(void *)(v237 + 8);
              memmove(v113, v114, (uint64_t)(v107 - v106) << 6);
              uint64_t v19 = v115;
              long long v116 = v113[1];
              _OWORD *v114 = *v113;
              v114[1] = v116;
              long long v117 = v113[3];
              v114[2] = v113[2];
              v114[3] = v117;
            }
            uint64_t v118 = v19 + (v108 << 6);
            uint64_t v120 = *(void *)(v118 + 48);
            uint64_t v119 = (void *)(v118 + 48);
            *((_DWORD *)v119 - 7) = 21;
            *((_DWORD *)v119 - 4) = v97;
            *((_DWORD *)v119 - 3) = 0;
            *((_DWORD *)v119 - 5) = 0;
            if (v120) {
              *uint64_t v119 = 0;
            }
            if ((_WORD)v220)
            {
              unsigned int v121 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v220 << 6) + 40);
LABEL_188:
              *(_DWORD *)(v19 + (v108 << 6) + 40) = v121;
              uint64_t v14 = v237;
              ++*(_WORD *)(v237 + 16);
              goto LABEL_195;
            }
            unsigned int v121 = v208;
            if (v208 != -1) {
              goto LABEL_188;
            }
            uint64_t v122 = v19;
            uint64_t v123 = v236;
            uint64_t v124 = *(const char **)(v236 + 8);
            if (v124)
            {
              unsigned int v121 = 0;
              while (1)
              {
                uint64_t v125 = v124;
                uint64_t v123 = v236;
                if (v121 >= *(unsigned __int16 *)(v236 + 16)) {
                  break;
                }
                int v126 = strlen(v124);
                MarkerArgint Str = marker_getMarkerArgStr(1u);
                if (!strcmp(v125, MarkerArgStr)) {
                  goto LABEL_187;
                }
                uint64_t v128 = (v126 + 1);
                v121 += v128;
                uint64_t v124 = &v125[v128];
                if (!v125)
                {
                  uint64_t v123 = v236;
                  break;
                }
              }
            }
            __int16 v129 = *(_WORD *)(v123 + 16);
            int v130 = marker_getMarkerArgStr(1u);
            unsigned __int16 v131 = v129 + strlen(v130) + 1;
            uint64_t v132 = v236;
            if (*(unsigned __int16 *)(v236 + 18) >= v131)
            {
LABEL_186:
              uint64_t v133 = (char *)(*(void *)(v132 + 8)
                            + *(unsigned __int16 *)(v132 + 2) * (unint64_t)*(unsigned __int16 *)(v132 + 16));
              uint64_t v134 = marker_getMarkerArgStr(1u);
              strcpy(v133, v134);
              uint64_t v135 = marker_getMarkerArgStr(1u);
              v133[strlen(v135)] = 0;
              unsigned int v121 = *(unsigned __int16 *)(v236 + 16);
              *(_WORD *)(v236 + 16) = v131;
LABEL_187:
              int v208 = v121;
              uint64_t v19 = v122;
              goto LABEL_188;
            }
            uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1012, v131, &v236);
            if ((inserted & 0x80000000) == 0)
            {
              uint64_t v132 = v236;
              goto LABEL_186;
            }
          }
          return inserted;
        }
        uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1020, (unsigned __int16)(*(_WORD *)(v238[0] + 16) + v71), v238);
        if ((inserted & 0x80000000) == 0)
        {
          int v58 = *(const char **)(v238[0] + 8);
          memmove((void *)&v58[(unsigned __int16)v223 + (unsigned __int16)v71], &v58[(unsigned __int16)v223], *(unsigned __int16 *)(v238[0] + 16) - (unint64_t)(unsigned __int16)v223);
          uint64_t v72 = v238[0];
          __int16 v73 = *(_WORD *)(v238[0] + 16) + v71;
          goto LABEL_108;
        }
        return inserted;
      }
      unsigned int v59 = v54;
    }
    unsigned int v63 = 0;
    LOWORD(v64) = 0;
    unsigned __int16 v62 = *v27 != 0;
    do
    {
      if (!v27[(unsigned __int16)v64]) {
        break;
      }
      int v65 = utf8_BelongsToSet(1u, v27, v63, v59);
      if ((unsigned __int16)v64 < v54 && v65 == 1)
      {
        unsigned int v64 = (unsigned __int16)v64;
        while (utf8_BelongsToSet(1u, v27, v64, v59) == 1)
        {
          if (v59 == ++v64)
          {
            LOWORD(v64) = v54;
            goto LABEL_95;
          }
        }
        if (v27[(unsigned __int16)v64]) {
          ++v62;
        }
      }
LABEL_95:
      LOWORD(v64) = v64 + 1;
      unsigned int v63 = (unsigned __int16)v64;
    }
    while ((unsigned __int16)v64 < v54);
    goto LABEL_98;
  }
  uint64_t v19 = v13;
LABEL_268:
  if (v15)
  {
    unint64_t v182 = 0;
    v183 = (uint64_t *)(v19 + 48);
    do
    {
      if (*v183)
      {
        heap_Free(*(void **)(*(void *)(v10 + 16) + 8), *v183);
        uint64_t *v183 = 0;
        uint64_t v14 = v237;
      }
      ++v182;
      v183 += 8;
    }
    while (v182 < *(unsigned __int16 *)(v14 + 16));
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1021, (uint64_t)"after wordpar_loc_nonasian_HandleExtendedToi()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1020, (uint64_t)"after wordpar_loc_nonasian_HandleExtendedToi()");
  uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1020, 1u, &v234);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  if (*(_WORD *)(v234 + 16))
  {
    uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(v10 + 32) + 104))(v211, v212, *(void *)(v234 + 8), *(unsigned __int16 *)(v234 + 2) * *(unsigned __int16 *)(v234 + 16));
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(v10 + 16) + 32))) {
      log_OutTraceTuningDataBinary(*(void *)(*(void *)(v10 + 16) + 32), 34, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-8",
    }
        *(void *)(v234 + 8),
        *(unsigned __int16 *)(v234 + 2) * *(unsigned __int16 *)(v234 + 16));
    *(_WORD *)(v234 + 16) = 0;
    int v184 = 1;
  }
  else
  {
    if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(v10 + 16) + 32))) {
      log_OutTraceTuningDataBinary(*(void *)(*(void *)(v10 + 16) + 32), 34, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-8",
    }
        0,
        0);
    int v184 = 0;
  }
  if ((datac_RequestBlock(*(void *)(v10 + 24), 1012, 1u, &v234) & 0x80000000) != 0) {
    uint64_t v185 = 0;
  }
  else {
    uint64_t v185 = *(void *)(v234 + 8);
  }
  uint64_t inserted = datac_RequestBlock(*(void *)(v10 + 24), 1021, 1u, &v233);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v189 = v233;
  unint64_t v190 = *(unsigned __int16 *)(v233 + 16);
  if (*(_WORD *)(v233 + 16))
  {
    uint64_t v191 = *(void *)(v233 + 8);
    if (*(_DWORD *)(v191 + 20) == 0x4000)
    {
      v192 = (_DWORD *)(v191 + 32);
      int v235 = *(_DWORD *)(v191 + 32) - v235;
      unint64_t v193 = v190;
      do
      {
        *v192 -= v235;
        v192 += 16;
        --v193;
      }
      while (v193);
      if (v185)
      {
        unint64_t v194 = 0;
        v195 = (void *)(v191 + 40);
        do
        {
          if (marker_hasNonConstCharPtrArg(*((_DWORD *)v195 - 5)))
          {
            uint64_t v196 = *(unsigned int *)v195;
            if (v196 == -1) {
              uint64_t v197 = 0;
            }
            else {
              uint64_t v197 = v185 + v196;
            }
            void *v195 = v197;
          }
          v195 += 8;
          ++v194;
          uint64_t v189 = v233;
          unint64_t v190 = *(unsigned __int16 *)(v233 + 16);
        }
        while (v194 < v190);
      }
      if (v190 >= 3)
      {
        v198 = (_DWORD *)(v191 + 164);
        uint64_t v199 = 1;
        do
        {
          v200 = (_DWORD *)(v191 + (v199 << 6));
          if (v200[5] == 1)
          {
            int v201 = v200[7];
            int v202 = v200[9];
            if (v201 != v202 && (*(_DWORD *)(v191 + (v199 << 6) + 32) + v202) > *(v198 - 1) && !*v198)
            {
              log_OutText(*(void *)(*(void *)(v10 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1, 0, (uint64_t)"SEVERE: found control sequence embedded in a word (word marker pos %d, length %d; escape marker pos %d)",
                v186,
                v187,
                v188,
                *(unsigned int *)(v191 + (v199 << 6) + 24));
              uint64_t v189 = v233;
            }
          }
          ++v199;
          v198 += 16;
        }
        while (*(unsigned __int16 *)(v189 + 16) - 1 > (unsigned __int16)v199);
      }
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1021, (uint64_t)"before wordpar_loc_MarkerPostProcessing()", 1, 0, 0);
      uint64_t inserted = wordpar_loc_MarkerPostProcessing(*(void *)(v10 + 24), v233);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1021, (uint64_t)"before wordpar_loc_InsertNLUMarkers()", 1, 0, 0);
      uint64_t inserted = wordpar_loc_InsertNLUMarkers(v10, v233);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      uint64_t v203 = *(void *)(v233 + 8);
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v10 + 168), *(void *)(v10 + 16), *(void *)(v10 + 24), 1021, (uint64_t)"at end()", 1, 0, 0);
      int v204 = wordpar_loc_writeMarkersToOutputStream(v10, v209, v215, v203, v233, v184);
      return v204 & (v204 >> 31);
    }
  }
  return v5;
}

uint64_t wordpar_loc_MarkerPostProcessing(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  LODWORD(v2) = *(unsigned __int16 *)(a2 + 16);
  if (v2 <= 1)
  {
    uint64_t result = 0;
    *(_WORD *)(a2 + 16) = 1;
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = 1;
  unsigned __int16 v6 = 2;
  uint64_t v7 = 148;
  LOWORD(v8) = 1;
  do
  {
    unint64_t v9 = (unsigned __int16)v2;
    unsigned __int16 v10 = v6;
    if ((unsigned __int16)v2 > v6) {
      unsigned __int16 v10 = (unsigned __int16)v2;
    }
    uint64_t v11 = v7;
    unint64_t v12 = v5;
    while (++v12 < (unsigned __int16)v2)
    {
      int v13 = *(_DWORD *)(v4 + v11);
      v11 += 64;
      if (v13 != 999)
      {
        unsigned __int16 v10 = v12;
        break;
      }
    }
    uint64_t v14 = (long long *)(v4 + (v5 << 6));
    int v15 = *((_DWORD *)v14 + 8);
    int v16 = *((_DWORD *)v14 + 5);
    if (v15 != *(_DWORD *)(v4 + 32)) {
      goto LABEL_21;
    }
    if (v16 == 21)
    {
      if (v12 >= (unsigned __int16)v2) {
        goto LABEL_22;
      }
      uint64_t v17 = v4 + ((unint64_t)v10 << 6);
      if (*(_DWORD *)(v17 + 32) != v15 || *(_DWORD *)(v17 + 20) != 21) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (v12 < (unsigned __int16)v2 && v16 == 7)
    {
      uint64_t v18 = v4 + ((unint64_t)v10 << 6);
      if (*(_DWORD *)(v18 + 32) != v15 || *(_DWORD *)(v18 + 20) != 7) {
        goto LABEL_22;
      }
    }
    else
    {
LABEL_21:
      if (v16 && v16 != 999)
      {
LABEL_22:
        uint64_t v19 = (unsigned __int16)v8;
        LOWORD(v8) = v8 + 1;
        uint64_t v2 = (_OWORD *)(v4 + (v19 << 6));
        long long v20 = *v14;
        long long v21 = v14[1];
        long long v22 = v14[3];
        v2[2] = v14[2];
        v2[3] = v22;
        *uint64_t v2 = v20;
        v2[1] = v21;
        unint64_t v9 = *(unsigned __int16 *)(a2 + 16);
        LOWORD(v2) = *(_WORD *)(a2 + 16);
      }
    }
LABEL_23:
    ++v5;
    ++v6;
    v7 += 64;
  }
  while (v5 < v9);
  *(_WORD *)(a2 + 16) = v8;
  if ((unsigned __int16)v8 >= 2u)
  {
    uint64_t v23 = 0;
    BOOL v24 = 0;
    int v25 = -1;
    unint64_t v26 = 1;
    do
    {
      uint64_t v27 = v4 + v23;
      int v28 = *(_DWORD *)(v4 + v23 + 84);
      if (v28 != 36 && v28 != 7) {
        goto LABEL_45;
      }
      unsigned int v30 = *(_DWORD *)(v27 + 96);
      unsigned int v31 = *(_DWORD *)(v4 + 36) + *(_DWORD *)(v4 + 32);
      if (*(_DWORD *)(v27 + 100) + v30 > v31)
      {
        BOOL v32 = v31 >= v30;
        unsigned int v33 = v31 - v30;
        if (!v32)
        {
          unsigned int v33 = 0;
          *(_DWORD *)(v27 + 96) = v31;
        }
        *(_DWORD *)(v27 + 100) = v33;
      }
      if (v28 == 7)
      {
        int v34 = *(_DWORD *)(v4 + v23 + 104);
        BOOL v35 = !v24 && v34 == 43;
        if (v34 == 43 || !v24)
        {
          BOOL v24 = v35;
        }
        else if (v34 == 15)
        {
          BOOL v24 = 0;
        }
        else
        {
          uint64_t result = datac_RequestBlock(a1, 1021, (unsigned __int16)(v8 + 1), &v41);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v4 = *(void *)(v41 + 8);
          uint64_t v38 = v4 + v23;
          memmove((void *)(v4 + v23 + 128), (const void *)(v4 + v23 + 64), (uint64_t)(v25 + *(unsigned __int16 *)(v41 + 16)) << 6);
          BOOL v24 = 0;
          long long v39 = *(_OWORD *)(v4 + v23 + 144);
          *(_OWORD *)(v38 + 64) = *(_OWORD *)(v38 + 128);
          *(_OWORD *)(v38 + 80) = v39;
          long long v40 = *(_OWORD *)(v4 + v23 + 176);
          *(_OWORD *)(v38 + 96) = *(_OWORD *)(v38 + 160);
          *(_OWORD *)(v38 + 112) = v40;
          *(_DWORD *)(v38 + 104) = 15;
          a2 = v41;
          ++*(_WORD *)(v41 + 16);
        }
      }
      else
      {
LABEL_45:
        BOOL v24 = v24;
      }
      ++v26;
      unint64_t v8 = *(unsigned __int16 *)(a2 + 16);
      --v25;
      v23 += 64;
    }
    while (v26 < v8);
  }
  return 0;
}

uint64_t wordpar_loc_InsertNLUMarkers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v46 = 0;
  uint64_t v47 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t result = datac_RequestBlock(v3, 1013, 1u, &v46);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v6 = *(unsigned __int16 *)(v2 + 16);
    if (v6 >= 2)
    {
      unsigned __int16 v7 = 0;
      int v8 = 1;
      uint64_t v9 = 1;
      do
      {
        int v10 = *(_DWORD *)(v4 + (v9 << 6) + 20);
        if (v10 > 55)
        {
          if (v10 == 56)
          {
            unint64_t v12 = "E_";
            if (v7) {
              goto LABEL_23;
            }
            unsigned __int16 v7 = 0;
            goto LABEL_43;
          }
          if (v10 != 57)
          {
LABEL_7:
            BOOL v11 = v10 != 54 || v7 == 0;
            unint64_t v12 = "BND:";
            if (!v11)
            {
LABEL_23:
              LOWORD(v14) = v8 + 1;
              LOWORD(v15) = v7;
LABEL_36:
              uint64_t result = datac_RequestBlock(v3, 1021, (unsigned __int16)(*(_WORD *)(v2 + 16) + 1), &v47);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v4 = *(void *)(v47 + 8);
              uint64_t v27 = (unsigned __int16)v15;
              int v28 = (_OWORD *)(v4 + ((unint64_t)(unsigned __int16)v15 << 6));
              memmove((void *)(v4 + ((unint64_t)((unsigned __int16)v15 + 1) << 6)), v28, (uint64_t)(*(unsigned __int16 *)(v47 + 16) - (unsigned __int16)v15) << 6);
              if ((unsigned __int16)v15 > (unsigned __int16)v14)
              {
                int v29 = (long long *)(v4 + ((unint64_t)(unsigned __int16)v14 << 6));
                long long v30 = *v29;
                long long v31 = v29[1];
                long long v32 = v29[3];
                v28[2] = v29[2];
                v28[3] = v32;
                *int v28 = v30;
                v28[1] = v31;
              }
              *(_DWORD *)int v28 = 1;
              *((_DWORD *)v28 + 5) = 51;
              uint64_t v33 = v46;
              unsigned int v34 = *(unsigned __int16 *)(v46 + 16);
              uint64_t v35 = v4 + ((unint64_t)(unsigned __int16)v14 << 6);
              unsigned int v37 = *(const char **)(v35 + 40);
              unsigned int v36 = (const char **)(v35 + 40);
              __int16 v38 = strlen(v37);
              unsigned __int16 v39 = v34 + strlen(v12) + v38 + 1;
              if (*(unsigned __int16 *)(v46 + 18) < v39)
              {
                uint64_t result = datac_RequestBlock(*(void *)(a1 + 24), 1013, v39, &v46);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v33 = v46;
                unsigned int v34 = *(unsigned __int16 *)(v46 + 16);
              }
              long long v40 = strcpy((char *)(*(void *)(v33 + 8) + *(unsigned __int16 *)(v33 + 2) * (unint64_t)v34), v12);
              strcat(v40, *v36);
              *(_DWORD *)(v4 + (v27 << 6) + 40) = *(unsigned __int16 *)(v46 + 16);
              *(_WORD *)(v46 + 16) = v39;
              uint64_t v2 = v47;
              ++*(_WORD *)(v47 + 16);
              ++v8;
              goto LABEL_43;
            }
            goto LABEL_43;
          }
        }
        else
        {
          if (v10 == 1)
          {
            unsigned __int16 v7 = v8;
            goto LABEL_43;
          }
          if (v10 != 55) {
            goto LABEL_7;
          }
        }
        if (v10 != 57 || v7 == 0)
        {
          int v14 = v8;
        }
        else
        {
          uint64_t result = datac_RequestBlock(v3, 1021, (unsigned __int16)(v6 + 1), &v47);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v4 = *(void *)(v47 + 8);
          int v16 = (_DWORD *)(v4 + ((unint64_t)v7 << 6));
          memmove((void *)(v4 + ((unint64_t)(v7 + 1) << 6)), v16, (uint64_t)(*(unsigned __int16 *)(v47 + 16) - v7) << 6);
          *int v16 = 1;
          v16[5] = 51;
          uint64_t v17 = v4 + (v9 << 6);
          long long v20 = *(char **)(v17 + 104);
          uint64_t v19 = (const char **)(v17 + 104);
          uint64_t v18 = v20;
          long long v21 = strchr(v20, 58);
          if (v21) {
            unsigned __int16 v22 = (_WORD)v21 - (_WORD)v18;
          }
          else {
            unsigned __int16 v22 = strlen(v18);
          }
          uint64_t v23 = v46;
          unsigned int v24 = *(unsigned __int16 *)(v46 + 16);
          unsigned __int16 v25 = v22 + v24 + 3;
          if (*(unsigned __int16 *)(v46 + 18) < v25)
          {
            uint64_t result = datac_RequestBlock(*(void *)(a1 + 24), 1013, (unsigned __int16)(v22 + v24 + 3), &v46);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v23 = v46;
            unsigned int v24 = *(unsigned __int16 *)(v46 + 16);
          }
          unint64_t v26 = (char *)(*(void *)(v23 + 8) + *(unsigned __int16 *)(v23 + 2) * (unint64_t)v24);
          strcpy(v26, "R_");
          strncat(v26, *v19, v22);
          *(_DWORD *)(v4 + ((unint64_t)v7 << 6) + 40) = *(unsigned __int16 *)(v46 + 16);
          uint64_t v2 = v47;
          *(_WORD *)(v46 + 16) = v25;
          ++*(_WORD *)(v2 + 16);
          int v14 = v8 + 1;
        }
        int v15 = (unsigned __int16)v14 + 1;
        if ((v15 & 0x10000) == 0)
        {
          unint64_t v12 = "S_";
          int v8 = v14;
          goto LABEL_36;
        }
        int v8 = 0xFFFF;
LABEL_43:
        uint64_t v9 = (unsigned __int16)++v8;
        unsigned int v6 = *(unsigned __int16 *)(v2 + 16);
      }
      while (v6 > (unsigned __int16)v8);
    }
    if (v6)
    {
      unint64_t v41 = 0;
      uint64_t v42 = (void *)(v4 + 40);
      do
      {
        if (*((_DWORD *)v42 - 5) == 51 && *((_DWORD *)v42 - 10))
        {
          uint64_t v43 = *(unsigned int *)v42;
          if (v43 == -1) {
            uint64_t v44 = 0;
          }
          else {
            uint64_t v44 = *(void *)(v46 + 8) + v43;
          }
          *uint64_t v42 = v44;
          uint64_t v2 = v47;
        }
        ++v41;
        v42 += 8;
      }
      while (v41 < *(unsigned __int16 *)(v2 + 16));
    }
    return 0;
  }
  return result;
}

uint64_t wordpar_loc_writeMarkersToOutputStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v11 = *(unsigned __int16 *)(a5 + 16);
  if (!a6 && v11 == 1)
  {
    if (*(_DWORD *)(a4 + 20) == 0x4000) {
      return 0;
    }
    unsigned int v11 = 1;
  }
  uint64_t v13 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (32 * v11) | 1);
  if (!v13) {
    return 2370838538;
  }
  uint64_t v14 = v13;
  if (*(_WORD *)(a5 + 16))
  {
    unint64_t v15 = 0;
    int v16 = (void *)(v13 + 24);
    uint64_t v17 = (void *)(a4 + 40);
    do
    {
      *(_OWORD *)(v16 - 3) = *(_OWORD *)((char *)v17 - 20);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v17 - 1);
      uint64_t v18 = *v17;
      v17 += 8;
      *int v16 = v18;
      v16 += 4;
      ++v15;
      unint64_t v19 = *(unsigned __int16 *)(a5 + 16);
    }
    while (v15 < v19);
  }
  else
  {
    LOWORD(v19) = 0;
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"at end()", 1, a4, v19);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 32) + 104))(a2, a3, v14, 32 * *(unsigned __int16 *)(a5 + 16));
  if ((v12 & 0x80000000) == 0 && log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
    log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 34, (uint64_t)&byte_20D5A22AE, (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
  }
      v14,
      32 * *(unsigned __int16 *)(a5 + 16));
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v14);
  return v12;
}

uint64_t wordpar_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v5 = 2370838535;
  if (a4 && (InitRsrcFunction(a1, a2, &v22) & 0x80000000) == 0)
  {
    *a4 = 0;
    uint64_t v11 = heap_Alloc(*(void *)(v22 + 8), 200);
    if (!v11) {
      return 2370838538;
    }
    uint64_t v12 = v11;
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(void *)(v11 + 192) = 0;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(void *)uint64_t v11 = a1;
    *(void *)(v11 + 8) = a2;
    uint64_t v13 = v22;
    *(void *)(v11 + 16) = v22;
    *(void *)(v11 + 32) = a3;
    *(_DWORD *)(v11 + 164) = 0;
    *(void *)(v11 + 72) = 0;
    uint64_t v14 = (uint64_t *)(v11 + 72);
    *(void *)(v11 + 152) = 0;
    *(_WORD *)(v11 + 176) = 30;
    if ((paramc_ParamGetUInt(*(void *)(v13 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v21 + 1) & 0x80000000) == 0) {
      *(_WORD *)(v12 + 176) = WORD2(v21);
    }
    *(_WORD *)(v12 + 178) = 50;
    if ((paramc_ParamGetUInt(*(void *)(v22 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v21 + 1) & 0x80000000) == 0) {
      *(_WORD *)(v12 + 178) = WORD2(v21);
    }
    *(void *)(v12 + 128) = 0;
    *(void *)(v12 + 80) = 0;
    *(void *)(v12 + 88) = 0;
    *(_DWORD *)(v12 + 96) = 0;
    *(void *)(v12 + 104) = 0;
    *(void *)(v12 + 112) = 0;
    *(_DWORD *)(v12 + 120) = 0;
    *(void *)(v12 + 136) = safeh_GetNullHandle();
    *(void *)(v12 + 144) = v15;
    uint64_t v16 = extdata_ObjOpen(a1, a2, v14, 213);
    if ((v16 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    *(void *)(v12 + 56) = 0;
    *(_DWORD *)(v12 + 64) = 0;
    uint64_t v16 = nuance_pcre_ObjOpen(a1, a2, v12 + 56);
    if ((v16 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    uint64_t v16 = nuance_pcre_Init(*(void **)(v12 + 56), *(void *)(v12 + 64), *(unsigned __int16 *)(v12 + 176), *(_WORD *)(v12 + 178));
    if ((v16 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    uint64_t v17 = wordpar_loc_OpenParts((_WORD **)v12, &v21);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t v5 = v17;
      if (v21) {
        return v5;
      }
      goto LABEL_18;
    }
    *(_DWORD *)(v12 + 172) = a5;
    uint64_t v16 = datac_ObjOpen(a1, a2, (uint64_t *)(v12 + 24), 213);
    if ((v16 & 0x80000000) != 0)
    {
LABEL_17:
      uint64_t v5 = v16;
    }
    else
    {
      uint64_t v18 = 0;
      while (1)
      {
        datac_RegisterBlock(*(void *)(v12 + 24), (unsigned __int16)aMETA_1[v18], (unsigned __int16)aMETA_1[v18 + 1], (unsigned __int16)aMETA_1[v18 + 2]);
        uint64_t v5 = v19;
        if ((v19 & 0x80000000) != 0) {
          break;
        }
        v18 += 3;
        if (v18 == 15)
        {
          *a4 = v12;
          return v5;
        }
      }
    }
LABEL_18:
    wordpar_ObjClose(v12);
  }
  return v5;
}

uint64_t wordpar_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v8 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      datac_ObjClose(v3);
    }
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      extdata_ObjClose(v4);
      *(void *)(a1 + 72) = 0;
    }
    wordpar_loc_CloseParts(a1);
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 56), *(void *)(a1 + 64), NullHandle, v6))
    {
      nuance_pcre_DeInit(*(void **)(a1 + 56), *(void *)(a1 + 64));
      nuance_pcre_ObjClose(*(void *)(a1 + 56), *(void *)(a1 + 64));
    }
    heap_Free(*(void **)(v8 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wordpar_loc_OpenParts(_WORD **a1, _DWORD *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)&long long v27 = "BRKD";
  *((void *)&v27 + 1) = wordpar_getBRKDefs;
  int v28 = wordpar_freeBRKDefs;
  int v29 = a1;
  uint64_t SpecificData = extdata_RegisterData((uint64_t)a1[9], &v27, 1u);
  if ((SpecificData & 0x80000000) != 0) {
    return SpecificData;
  }
  uint64_t SpecificData = extdata_LoadSpecificData((uint64_t)a1[9], "PPWO", "BRKD");
  if ((SpecificData & 0x80000000) != 0) {
    return SpecificData;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v26) & 0x80000000) != 0) {
    return 2370838535;
  }
  uint64_t v9 = (const char *)a1[19];
  if (v9)
  {
    long long v27 = 0uLL;
    if ((int)strlen(v9) >= 1)
    {
      int v10 = 0;
      do
      {
        v9[(unsigned __int16)v10] = __tolower(v9[(unsigned __int16)v10]);
        ++v10;
        uint64_t v9 = (const char *)a1[19];
      }
      while ((int)strlen(v9) > (unsigned __int16)v10);
    }
    if ((brk_InterfaceQueryEx(*((void *)a1[2] + 3), (uint64_t)v9, 1, 1, (uint64_t)&v27, (uint64_t)(a1 + 16)) & 0x80000000) == 0)
    {
      uint64_t SpecificData = (*((uint64_t (**)(void, void, void, _WORD *, _WORD **))a1[16] + 4))(v27, *((void *)&v27 + 1), *a1, a1[1], a1 + 17);
      if ((SpecificData & 0x80000000) != 0) {
        return SpecificData;
      }
    }
  }
  else
  {
    log_OutPublic(*((void *)a1[2] + 4), (uint64_t)"PP_WORD_PARSER", 1811, 0, v5, v6, v7, v8, v24);
  }
  if (*((_DWORD *)a1 + 41))
  {
    uint64_t Object = objc_GetObject(*(void *)(v26 + 48), (uint64_t)"FE_UDWL", &v25);
    if ((Object & 0x80000000) != 0)
    {
      uint64_t v11 = Object;
LABEL_33:
      *a2 = 1;
      wordpar_ObjClose((uint64_t)a1);
      return v11;
    }
    uint64_t v13 = v25;
    a1[13] = *(_WORD **)(v25 + 8);
    uint64_t v14 = a1 + 13;
    *((_OWORD *)a1 + 7) = *(_OWORD *)(v13 + 16);
    uint64_t v15 = objc_GetObject(*(void *)(v26 + 48), (uint64_t)"FE_DCTLKP", &v25);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v11 = v15;
      uint64_t v19 = "FE_UDWL";
LABEL_32:
      objc_ReleaseObject(*(void *)(v26 + 48), (uint64_t)v19);
      *uint64_t v14 = 0;
      v14[1] = 0;
      *((_DWORD *)v14 + 4) = 0;
      goto LABEL_33;
    }
    uint64_t v16 = v25;
    uint64_t v17 = *(void *)(v25 + 8);
    a1[10] = (_WORD *)v17;
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(v16 + 16);
    uint64_t v18 = wparser_ObjOpen2(*a1, (uint64_t)a1[1], (uint64_t)a1[7], (int)a1[8], (uint64_t *)a1 + 5, (uint64_t)a1[13], (uint64_t)a1[14], (uint64_t)a1[15], v17, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[9], (uint64_t)a1[16], (uint64_t)a1[17], (uint64_t)a1[18]);
    if ((v18 & 0x80000000) != 0)
    {
      uint64_t v11 = v18;
      if (*v14)
      {
        objc_ReleaseObject(*(void *)(v26 + 48), (uint64_t)"FE_UDWL");
        *uint64_t v14 = 0;
        a1[14] = 0;
        *((_DWORD *)a1 + 30) = 0;
      }
      if (!a1[10]) {
        goto LABEL_33;
      }
      uint64_t v19 = "FE_DCTLKP";
      uint64_t v14 = a1 + 10;
      goto LABEL_32;
    }
  }
  else
  {
    safeh_GetNullHandle();
    uint64_t SpecificData = wparser_ObjOpen1(*a1, (uint64_t)a1[1], a1 + 5);
    if ((SpecificData & 0x80000000) != 0) {
      return SpecificData;
    }
  }
  uint64_t SpecificData = extdata_LoadData((uint64_t)a1[9], "PPWO");
  if ((SpecificData & 0x80000000) != 0) {
    return SpecificData;
  }
  uint64_t v11 = tolhp_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t **)a1 + 6);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v20 = *((void *)a1[2] + 5);
    *(void *)&long long v27 = 0;
    int Str = paramc_ParamGetStr(v20, (uint64_t)"is_teng", &v27);
    BOOL v22 = 0;
    if ((Str & 0x80000000) == 0 && (void)v27)
    {
      if (*(unsigned char *)v27) {
        BOOL v22 = memchr("yYtT1", *(char *)v27, 6uLL) != 0;
      }
      else {
        BOOL v22 = 0;
      }
    }
    *((_DWORD *)a1 + 49) = v22;
  }
  return v11;
}

uint64_t wordpar_ObjReopen(_WORD **a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v6 = 0;
  int v5 = 0;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v6) & 0x80000000) == 0)
  {
    uint64_t v3 = extdata_FreeData((uint64_t)a1[9]);
    if ((v3 & 0x80000000) != 0 || (uint64_t v3 = wordpar_loc_CloseParts((uint64_t)a1), (v3 & 0x80000000) != 0))
    {
      uint64_t v1 = v3;
    }
    else
    {
      uint64_t v1 = wordpar_loc_OpenParts(a1, &v5);
      if ((v1 & 0x80000000) == 0 || v5) {
        return v1;
      }
    }
    wordpar_ObjClose((uint64_t)a1);
  }
  return v1;
}

uint64_t wordpar_loc_CloseParts(uint64_t a1)
{
  uint64_t v2 = tolhp_ObjClose(*(void *)(a1 + 48));
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 164))
  {
    if (v3)
    {
      uint64_t v4 = wparser_ObjClose2(v3);
      goto LABEL_8;
    }
  }
  else if (v3)
  {
    uint64_t v4 = wparser_ObjClose1(v3);
LABEL_8:
    uint64_t v5 = v4;
    if ((v4 & 0x80000000) != 0) {
      return v5;
    }
  }
  uint64_t v6 = wordpar_freeBRKDefs(a1);
  uint64_t v7 = *(void *)(a1 + 128);
  if (v7
    && (uint64_t v6 = (*(uint64_t (**)(void, void))(v7 + 40))(*(void *)(a1 + 136), *(void *)(a1 + 144)),
        (uint64_t v8 = *(void *)(a1 + 128)) != 0))
  {
    uint64_t v5 = brk_InterfaceRelease(*(void *)(*(void *)(a1 + 16) + 24), v8);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = safeh_GetNullHandle();
    *(void *)(a1 + 144) = v9;
  }
  else
  {
    uint64_t v5 = v6;
  }
  if (*(_DWORD *)(a1 + 164))
  {
    if (*(void *)(a1 + 104))
    {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_UDWL");
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
    if (*(void *)(a1 + 80))
    {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
  }
  return v5;
}

uint64_t wordpar_ProcessStart(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v9) & 0x80000000) == 0)
  {
    BOOL v3 = log_GetLogLevel(*(void *)(v9 + 32)) > 4;
    *(_WORD *)(a1 + 180) = 32;
    *(_DWORD *)(a1 + 168) = v3;
    __strcat_chk();
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = datac_RequestBlock(*(void *)(a1 + 24), (unsigned __int16)aMETA_1[v4], 1u, &v8);
      if ((v5 & 0x80000000) != 0) {
        break;
      }
      v4 += 3;
      uint64_t v6 = v8;
      *(_WORD *)(v8 + 16) = 0;
      *(_DWORD *)(v6 + 20) = 0;
      if (v4 == 15)
      {
        uint64_t v5 = tolhp_ResetDcts(*(void *)(a1 + 48));
        if ((v5 & 0x80000000) == 0)
        {
          if (!*(_DWORD *)(a1 + 164)) {
            return 0;
          }
          uint64_t v5 = wparser_ProcessStart(*(void *)(a1 + 40));
          if ((v5 & 0x80000000) == 0) {
            return 0;
          }
        }
        return v5;
      }
    }
    return v5;
  }
  return v1;
}

uint64_t wordpar_ProcessEnd(uint64_t a1)
{
  if (!a1) {
    return 2370838535;
  }
  if (*(_DWORD *)(a1 + 164)) {
    return wparser_ProcessEnd(*(void **)(a1 + 40));
  }
  return 0;
}

uint64_t wordpar_LoadFromStreamData(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  uint64_t v10 = *(void *)(a1 + 24);
  if (a3) {
    unsigned __int16 v11 = a3;
  }
  else {
    unsigned __int16 v11 = 1;
  }
  uint64_t v12 = datac_RequestBlock(v10, 1020, v11, &v38);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  if (a2) {
    memcpy(*(void **)(v38 + 8), a2, a3);
  }
  *(_WORD *)(v38 + 16) = a3;
  uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)a5 & 0xFFC0, &v39);
  if ((v13 & 0x80000000) == 0)
  {
    unsigned int v14 = a5 >> 6;
    uint64_t v15 = v39;
    uint64_t v16 = *(_DWORD **)(v39 + 8);
    uint64_t v17 = (unsigned __int16)(a5 >> 6);
    if (!(unsigned __int16)(a5 >> 6)) {
      goto LABEL_27;
    }
    unsigned __int16 v18 = 0;
    unsigned int v36 = *(_DWORD **)(v39 + 8);
    uint64_t v19 = v16 + 12;
    uint64_t v20 = (const char **)(a4 + 48);
    uint64_t v21 = (unsigned __int16)(a5 >> 6);
    do
    {
      long long v22 = *(_OWORD *)v20;
      long long v23 = *((_OWORD *)v20 - 3);
      long long v24 = *((_OWORD *)v20 - 2);
      *(v19 - 1) = *((_OWORD *)v20 - 1);
      *uint64_t v19 = v22;
      *(v19 - 3) = v23;
      *(v19 - 2) = v24;
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v19 - 7)))
      {
        uint64_t v25 = *(v20 - 1);
        if (v25)
        {
          __int16 v26 = strlen(v25);
          LODWORD(v25) = 0;
          v18 += v26 + 1;
        }
      }
      else
      {
        LODWORD(v25) = *((_DWORD *)v20 - 2);
      }
      *((_DWORD *)v19 - 2) = v25;
      if (*v20)
      {
        int v27 = (unsigned __int16)strlen(*v20);
        if (v27)
        {
          int v28 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v27 + 1));
          *(void *)uint64_t v19 = v28;
          if (!v28) {
            return 2370838538;
          }
          strcpy(v28, *v20);
        }
      }
      v19 += 4;
      v20 += 8;
      --v21;
    }
    while (v21);
    *(_WORD *)(v39 + 16) = v14;
    uint64_t v16 = v36;
    if (!v18) {
      goto LABEL_28;
    }
    uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 24), 1012, v18, &v37);
    if ((v13 & 0x80000000) == 0)
    {
      LOWORD(v14) = 0;
      uint64_t v29 = *(void *)(v37 + 8);
      uint64_t v30 = v36 + 5;
      long long v31 = (const char **)(a4 + 40);
      long long v32 = v36 + 5;
      do
      {
        int v33 = *v32;
        v32 += 16;
        if (marker_hasNonConstCharPtrArg(v33) && *v31)
        {
          unsigned __int16 v34 = strlen(*v31);
          v30[5] = (unsigned __int16)v14;
          memcpy((void *)(v29 + (unsigned __int16)v14), *v31, v34);
          *(unsigned char *)(v29 + v34 + (unint64_t)(unsigned __int16)v14) = 0;
          LOWORD(v14) = v14 + v34 + 1;
        }
        v31 += 8;
        uint64_t v30 = v32;
        --v17;
      }
      while (v17);
      uint64_t v16 = v36;
      uint64_t v15 = v37;
LABEL_27:
      *(_WORD *)(v15 + 16) = v14;
LABEL_28:
      if (v16[5] == 0x4000 && !v16[6] && !v16[7] && !wordpar_loc_existingSentParParams(a1))
      {
        v16[7] = a3;
        v16[9] = a3;
      }
    }
  }
  return v13;
}

BOOL wordpar_loc_existingSentParParams(uint64_t a1)
{
  unsigned int v2 = 0;
  return (paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_posrefoffset", &v2) & 0x1FFF) == 0;
}

uint64_t wordpar_ResetData(uint64_t a1)
{
  uint64_t v4 = 0;
  if (!a1) {
    return 2370838535;
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t result = datac_RequestBlock(*(void *)(a1 + 24), (unsigned __int16)aTAG_1[i], 1u, &v4);
    if (i != 2 && (result & 0x80000000) == 0) {
      *(_WORD *)(v4 + 16) = 0;
    }
  }
  return result;
}

uint64_t wordpar_Process(uint64_t a1)
{
  uint64_t v49 = 0;
  if (!a1) {
    return 2370838535;
  }
  memset(v48, 0, sizeof(v48));
  LODWORD(v50) = 0;
  uint64_t UInt = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_posrefoffset", (unsigned int *)&v49 + 1);
  if ((UInt & 0x1FFF) == 0x14)
  {
    HIDWORD(v49) = 0;
  }
  else
  {
    uint64_t v3 = UInt;
    if ((UInt & 0x80000000) != 0) {
      return v3;
    }
  }
  uint64_t v4 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset", (unsigned int *)&v49);
  if ((v4 & 0x1FFF) == 0x14)
  {
    LODWORD(v49) = 0;
  }
  else
  {
    uint64_t v3 = v4;
    if ((v4 & 0x80000000) != 0) {
      return v3;
    }
  }
  uint64_t v5 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_tag", (unsigned int *)&v50);
  if ((v5 & 0x1FFF) == 0x14)
  {
    int v6 = 0;
  }
  else
  {
    uint64_t v3 = v5;
    if ((v5 & 0x80000000) != 0) {
      return v3;
    }
    int v6 = v50;
  }
  DWORD1(v48[1]) = v6;
  uint64_t v7 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", (unsigned int *)&v48[1] + 2);
  if ((v7 & 0x1FFF) == 0x14)
  {
    DWORD2(v48[1]) = 0;
  }
  else
  {
    uint64_t v3 = v7;
    if ((v7 & 0x80000000) != 0) {
      return v3;
    }
  }
  uint64_t v8 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_lenref", (unsigned int *)&v48[1] + 3);
  if ((v8 & 0x1FFF) == 0x14)
  {
    HIDWORD(v48[1]) = 0;
  }
  else
  {
    uint64_t v3 = v8;
    if ((v8 & 0x80000000) != 0) {
      return v3;
    }
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"(from sentpar) posRefOffset=%d,refReset=%d pRefResetMrk->tag %d posRef %d lenRef %d", v9, v10, v11, HIDWORD(v49));
  if (!*(_DWORD *)(a1 + 164))
  {
    uint64_t inserted = wparser_ScanWords(*(void *)(a1 + 40), *(void *)(a1 + 24), SHIDWORD(v49), v49);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    unsigned int v12 = 0;
LABEL_31:
    marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"BEFORE wordpar_loc_nonasian_PreProcessExtendedTOIWords");
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"BEFORE wordpar_loc_nonasian_PreProcessExtendedTOIWords", 0, 0, 0);
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v50 = 0;
    uint64_t inserted = datac_RequestBlock(v15, 1021, 1u, &v50);
    if ((inserted & 0x80000000) == 0)
    {
      uint64_t v16 = v50;
      unsigned int v17 = *(unsigned __int16 *)(v50 + 16);
      if (v17 > 1)
      {
        uint64_t v18 = *(void *)(v50 + 8);
        uint64_t v19 = v18 + 20;
        int v20 = 1;
        do
        {
          while (1)
          {
            uint64_t v21 = v18 + ((unint64_t)(unsigned __int16)v20 << 6);
            if (*(_DWORD *)(v21 + 20) == 7 && *(_DWORD *)(v21 + 40) >= 0x46u) {
              break;
            }
            ++v20;
LABEL_43:
            if ((unsigned __int16)v17 <= (unsigned __int16)v20) {
              goto LABEL_79;
            }
          }
          unsigned int v22 = *(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v20 << 6) + 32);
          if ((unsigned __int16)v17 <= (unsigned __int16)(v20 + 1)) {
            int v23 = (unsigned __int16)(v20 + 1);
          }
          else {
            int v23 = (unsigned __int16)v17;
          }
          while ((unsigned __int16)v17 > (unsigned __int16)++v20)
          {
            if (*(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v20 << 6) + 20) == 7) {
              goto LABEL_46;
            }
          }
          int v20 = v23;
LABEL_46:
          if ((unsigned __int16)v17 == (unsigned __int16)v20) {
            unsigned int v24 = (unsigned __int16)(*(_DWORD *)(v18 + 36) + *(_WORD *)(v18 + 32));
          }
          else {
            unsigned int v24 = *(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v20 << 6) + 32);
          }
          if ((unsigned __int16)v17 < 2u) {
            goto LABEL_43;
          }
          int v25 = 0;
          unsigned __int16 v26 = 0;
          int v27 = (int *)(v18 + 84);
          uint64_t v28 = 1;
          do
          {
            unsigned int v29 = v27[3];
            if (v29 > v24) {
              break;
            }
            int v30 = *v27;
            v27 += 16;
            BOOL v31 = v30 == 1 && v29 >= v22;
            char v32 = v31;
            int v33 = v32 & (v29 < v24);
            if (v33) {
              int v25 = v28;
            }
            if ((v33 & (v26 == 0)) != 0) {
              unsigned __int16 v26 = v28;
            }
            ++v28;
          }
          while ((unsigned __int16)v17 != v28);
          if (!v26 || !(_WORD)v25 || v26 == (unsigned __int16)v25) {
            goto LABEL_43;
          }
          unsigned int v47 = v12;
          unsigned __int16 v34 = (_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v25 << 6));
          uint64_t v35 = (_DWORD *)(v18 + ((unint64_t)v26 << 6));
          v35[9] = v34[9] + v34[8] - v35[8];
          v35[7] = v34[7] + v34[6] - v35[6];
          uint64_t v46 = v19;
          if ((unsigned __int16)v25 > v26)
          {
            int v36 = (unsigned __int16)v25 - 1;
            uint64_t v37 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v25 << 6));
            unsigned int v38 = ~v25 | 0xFFFF0000;
            uint64_t v39 = v37;
            do
            {
              int v40 = *v39;
              v39 -= 16;
              if (v40 == 1)
              {
                unsigned int v41 = v37[3];
                if (v41 >= v22 && v41 < v24)
                {
                  int v43 = *(unsigned __int16 *)(v16 + 16);
                  if (v36 + 2 != v43)
                  {
                    memmove(v37 - 5, (const void *)(v18 + ((unint64_t)(v36 + 2) << 6)), (uint64_t)(int)(v38 + v43) << 6);
                    uint64_t v16 = v50;
                  }
                  --*(_WORD *)(v16 + 16);
                }
              }
              BOOL v31 = v26 >= (unsigned __int16)v36--;
              ++v38;
              uint64_t v37 = v39;
            }
            while (!v31);
          }
          unsigned int v17 = *(unsigned __int16 *)(v16 + 16);
          unsigned int v12 = v47;
          uint64_t v19 = v46;
        }
        while (v17 > (unsigned __int16)v20);
      }
LABEL_79:
      marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"BEFORE tolhp_RewritePhonTextInLhp");
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"BEFORE tolhp_RewritePhonTextInLhp", 0, 0, 0);
      uint64_t inserted = tolhp_RewritePhonTextInLhp(*(_WORD ***)(a1 + 48), *(void *)(a1 + 24));
      if ((inserted & 0x80000000) == 0)
      {
        marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"AFTER tolhp_RewritePhonTextInLhp");
        marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"AFTER tolhp_RewritePhonTextInLhp", 0, 0, 0);
        if (!*(_DWORD *)(a1 + 164)
          || (uint64_t inserted = wparser_insertRegionTags(*(void *)(a1 + 40), *(void *)(a1 + 24)),
              (inserted & 0x80000000) == 0))
        {
          uint64_t v44 = *(void *)(a1 + 24);
          uint64_t v50 = 0;
          uint64_t inserted = datac_RequestBlock(v44, 1021, 1u, &v50);
          if ((inserted & 0x80000000) == 0)
          {
            uint64_t inserted = marker_loc_FilterSyncMarkers(v50);
            if ((inserted & 0x80000000) == 0)
            {
              if ((v12 & 0x1FFF) == 0xA) {
                return v12;
              }
              else {
                return 0;
              }
            }
          }
        }
      }
    }
    return inserted;
  }
  uint64_t v50 = 0;
  if ((datac_RequestBlock(*(void *)(a1 + 24), 1012, 1u, &v50) & 0x80000000) == 0) {
    *(_WORD *)(a1 + 160) = *(_WORD *)(v50 + 16);
  }
  uint64_t v3 = wordpar_loc_AlignInputMarkers(a1);
  if ((v3 & 0x80000000) == 0)
  {
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"AFTER wordpar_loc_AlignInputMarkers", 0, 0, 0);
    unsigned int v12 = 0;
    if (!*(_DWORD *)(a1 + 196))
    {
      unsigned int v13 = wparser_NormalizeWords(*(unsigned __int16 **)(a1 + 40), *(void *)(a1 + 24), SHIDWORD(v49), v49, v48);
      unsigned int v12 = v13;
      if ((v13 & 0x1FFF) == 0xA) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v13;
      }
    }
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"AFTER wparser_NormalizeWords", 0, 0, 0);
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  return v3;
}

uint64_t wordpar_loc_AlignInputMarkers(uint64_t a1)
{
  uint64_t v16 = 0;
  uint64_t v1 = datac_RequestBlock(*(void *)(a1 + 24), 1021, 1u, &v16);
  if ((v1 & 0x80000000) != 0) {
    return v1;
  }
  uint64_t v2 = 2370838528;
  unsigned int v3 = *(unsigned __int16 *)(v16 + 16);
  if (*(_WORD *)(v16 + 16))
  {
    uint64_t v4 = *(void *)(v16 + 8);
    if (*(_DWORD *)(v4 + 20) == 0x4000)
    {
      if (v3 >= 2)
      {
        unsigned int v5 = 1;
        do
        {
          uint64_t v6 = v5 + 1;
          if (v6 >= v3
            || (uint64_t v7 = (_OWORD *)(v4 + (v6 << 6)),
                uint64_t v8 = (_OWORD *)(v4 + ((unint64_t)v5 << 6)),
                *((_DWORD *)v7 + 8) >= *((_DWORD *)v8 + 8)))
          {
            ++v5;
          }
          else
          {
            unsigned int v5 = 0;
            long long v9 = *v7;
            long long v10 = v7[1];
            long long v11 = v7[2];
            long long v12 = v7[3];
            long long v13 = v8[1];
            *uint64_t v7 = *v8;
            v7[1] = v13;
            long long v14 = v8[3];
            v7[2] = v8[2];
            v7[3] = v14;
            long long v17 = v9;
            long long v18 = v10;
            long long v19 = v11;
            long long v20 = v12;
            *uint64_t v8 = v9;
            v8[1] = v10;
            v8[2] = v11;
            v8[3] = v12;
          }
        }
        while (v5 < v3);
      }
      return v1;
    }
  }
  return v2;
}

uint64_t wordpar_ResourceLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 2370838529;
  if (!a1) {
    return 2370838535;
  }
  if (*(_DWORD *)(a1 + 164)) {
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 104)
  }
                                                                                                  + 64))(*(void *)(a1 + 112), *(void *)(a1 + 120), a2, a3, a4, a5, a6);
  return result;
}

uint64_t wordpar_ResourceTypes(uint64_t a1, void *a2)
{
  uint64_t v2 = 2370838535;
  uint64_t v7 = 0;
  if (a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v7);
    if ((inited & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 164)) {
        return (*(uint64_t (**)(void, void, void *))(*(void *)(a1 + 104) + 56))(*(void *)(a1 + 112), *(void *)(a1 + 120), a2);
      }
      *a2 = 0;
      return inited;
    }
  }
  return v2;
}

uint64_t wordpar_ResourceUnload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2370838536;
  if (!a1) {
    return 2370838535;
  }
  if (*(_DWORD *)(a1 + 164))
  {
    uint64_t v5 = *(void *)(a1 + 104);
    if (v5) {
      return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v5 + 72))(*(void *)(a1 + 112), *(void *)(a1 + 120), a2, a3);
    }
  }
  return result;
}

uint64_t wordpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(_DWORD *)(a1 + 164))
  {
    return wordpar_loc_nonasian_WriteTextAndMarkers(a1, a2, a3, a4, a5);
  }
  uint64_t v638 = 0;
  uint64_t v639 = 0;
  uint64_t v637 = 0;
  v635 = 0;
  __s1 = 0;
  int v640 = 0;
  if ((GetCfgParamVal(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 80), (uint64_t)"felid_act_lid", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 188) = strcmp(__s1, "yes") == 0; {
  if ((GetCfgParamVal(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 80), (uint64_t)"felid_remove_internal_lang", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 192) = strcmp(__s1, "yes") == 0;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 32) + 136))(a2, a3, &v640);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v11 = (datac_RequestBlock(*(void *)(a1 + 24), 1012, 1u, &v638) & 0x80000000) != 0 ? 0 : *(void *)(v638 + 8);
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 24), 1021, 1u, &v637);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v13 = 2370838528;
  uint64_t v14 = *(unsigned __int16 *)(v637 + 16);
  if (!*(_WORD *)(v637 + 16)) {
    return v13;
  }
  uint64_t v15 = *(_DWORD **)(v637 + 8);
  if (v15[5] != 0x4000) {
    return v13;
  }
  if (!*(_DWORD *)(a1 + 196))
  {
    uint64_t v16 = v15 + 8;
    int v17 = v640 - v15[8];
    do
    {
      *v16 += v17;
      v16 += 16;
      --v14;
    }
    while (v14);
  }
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"start wordpar_WriteTextAndMarkers()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"start wordpar_WriteTextAndMarkers()", 0, 0, 0);
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 24), 1020, 1u, &v639);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  long long v18 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, *(unsigned __int16 *)(v639 + 16) + 1);
  if (!v18) {
    return 2370838538;
  }
  long long v19 = v18;
  long long v20 = strncpy(v18, *(const char **)(v639 + 8), *(unsigned __int16 *)(v639 + 16));
  v20[*(unsigned __int16 *)(v639 + 16)] = 0;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"L0:%s", v21, v22, v23, (uint64_t)v19);
  uint64_t v24 = wordpar_loc_AlignInputMarkers(a1);
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v65 = v24;
    goto LABEL_527;
  }
  uint64_t v606 = v11;
  uint64_t v602 = a2;
  uint64_t v603 = a3;
  unsigned int v605 = -1924128768;
  uint64_t v604 = a4;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"out wordpar_loc_AlignInputMarkers()", 0, 0, 0);
  uint64_t v25 = v637;
  __s = (char *)v19;
  unsigned __int16 v625 = strlen(v19);
  unsigned int v26 = *(unsigned __int16 *)(v637 + 16);
  if (v26 < 2) {
    goto LABEL_134;
  }
  uint64_t v27 = *(void *)(a1 + 16);
  for (unint64_t i = 1; i < v26; ++i)
  {
    unsigned int v29 = &v15[16 * i];
    if (v29[5] == 7)
    {
      int v30 = v29[10];
      if ((v30 - 15) <= 1)
      {
        BOOL v31 = &v15[16 * i];
        int v33 = v31 + 4;
        uint64_t v32 = *((unsigned __int16 *)v31 + 8);
        uint64_t v34 = *((void *)v31 + 1);
        if (*((_WORD *)v31 + 8))
        {
          uint64_t v35 = 0;
          int v36 = v31 + 8;
          uint64_t v37 = v31 + 6;
          do
          {
            if (!*(_DWORD *)(v34 + 8 * v35))
            {
              if (v26 >= 2)
              {
                unsigned int v38 = *v36;
                uint64_t v39 = v15 + 21;
                for (uint64_t j = 1; j != v26; ++j)
                {
                  if (v39[3] > v38) {
                    break;
                  }
                  if (*v39 == 998)
                  {
                    int v41 = v39[1];
                    if (v41 == *v37)
                    {
                      BOOL v42 = v39[5] != v30 || j + 1 >= (unint64_t)v26;
                      if (!v42 && v39[16] == 41)
                      {
                        unsigned int v43 = *(_DWORD *)(v34 + 8 * v35 + 4) + v41;
                        if (v15[7] + v15[6] < v43) {
                          unsigned int v43 = v15[7] + v15[6];
                        }
                        int v44 = v39[2];
                        v39[17] = v43;
                        v39[18] = v44;
                        *uint64_t v39 = 0;
                      }
                    }
                  }
                  v39 += 16;
                }
              }
              unsigned int v45 = *(_DWORD *)(v34 + 8 * v35 + 4) + *v37;
              if (v15[7] + v15[6] < v45) {
                unsigned int v45 = v15[7] + v15[6];
              }
              *uint64_t v37 = v45;
            }
            ++v35;
          }
          while (v35 != v32);
LABEL_51:
          heap_Free(*(void **)(v27 + 8), v34);
          *((void *)v33 - 1) = 0;
          _WORD *v33 = 0;
          unsigned int v26 = *(unsigned __int16 *)(v25 + 16);
          continue;
        }
        if (v34) {
          goto LABEL_51;
        }
        if (v26 >= 2)
        {
          uint64_t v46 = 0;
          unsigned int v47 = &v15[16 * i];
          unsigned __int16 v48 = v47 + 6;
          unsigned int v49 = v47[8];
          uint64_t v50 = v15 + 23;
          unint64_t v51 = 1;
          do
          {
            unsigned __int16 v52 = &v15[16 * v51];
            if (v52[8] > v49) {
              break;
            }
            int v54 = v52[5];
            unsigned __int16 v53 = v52 + 5;
            if (v54 == 998)
            {
              unsigned int v55 = &v15[16 * v51];
              unsigned int v56 = v55[6];
              if (v56 == *v48 && v55[10] == v30)
              {
                unint64_t v57 = v51 + 1;
                if (v51 + 1 < v26 && (int v58 = &v15[16 * v57], v58[5] == 41) && (v60 = v58[6], v59 = v58 + 6, v60 == v56))
                {
                  *unsigned int v59 = v56;
                  v15[16 * v57 + 7] = v15[16 * v51 + 7];
                  _DWORD *v53 = 0;
                }
                else if (v51 >= 2)
                {
                  uint64_t v61 = v46;
                  unsigned __int16 v62 = v50;
                  while (1)
                  {
                    if (*(v62 - 2) == 41)
                    {
                      unsigned int v63 = *(v62 - 1);
                      if (v63 < v56) {
                        goto LABEL_70;
                      }
                      if (v63 == v56) {
                        break;
                      }
                    }
                    v62 -= 16;
                    if (!(unint64_t)((unsigned __int16)v61-- & 0xFFFE)) {
                      goto LABEL_70;
                    }
                  }
                  *(v62 - 1) = v56;
                  *unsigned __int16 v62 = v15[16 * v51 + 7];
                  _DWORD *v53 = 0;
                  break;
                }
              }
            }
LABEL_70:
            ++v51;
            v50 += 16;
            ++v46;
          }
          while (v26 != (unsigned __int16)v51);
        }
      }
    }
  }
  if (v26 < 2) {
    goto LABEL_134;
  }
  for (uint64_t k = 1; k != v26; ++k)
  {
    unsigned __int16 v67 = &v15[16 * k];
    if (v67[5] == 998)
    {
      unsigned __int16 v68 = v67 + 6;
      int v69 = v67 + 7;
      unsigned int v70 = v67[8];
      int v71 = v15 + 21;
      uint64_t v72 = 1;
      while (1)
      {
        unsigned int v73 = v71[3];
        if (v73 > v70) {
          goto LABEL_85;
        }
        if (*v71 == 41 && v71[1] == *v68) {
          break;
        }
        ++v72;
        v71 += 16;
        if (v26 == v72) {
          goto LABEL_85;
        }
      }
      int v74 = *v69;
      v71[2] = *v69;
      if ((int)v72 + 1 < v26 && v71[16] == 39 && v71[19] == v73)
      {
        uint64_t v75 = v72 + 1;
LABEL_95:
        v15[16 * v75 + 7] = v74;
        continue;
      }
      if ((v72 & 0xFFFE) != 0 && *(v71 - 16) == 39 && *(v71 - 13) == v73)
      {
        uint64_t v75 = v72 - 1;
        goto LABEL_95;
      }
    }
LABEL_85:
    ;
  }
  uint64_t v76 = 1;
  int v77 = 1;
  uint64_t v615 = v27;
  while (2)
  {
    int v78 = &v15[16 * v76];
    if (v78[5] != 7)
    {
LABEL_97:
      unsigned __int16 v79 = &v15[16 * (unint64_t)(unsigned __int16)v77];
      long long v80 = *(_OWORD *)v78;
      long long v81 = *((_OWORD *)v78 + 1);
      long long v82 = *((_OWORD *)v78 + 3);
      v79[2] = *((_OWORD *)v78 + 2);
      v79[3] = v82;
      *unsigned __int16 v79 = v80;
      v79[1] = v81;
      ++v77;
      goto LABEL_98;
    }
    int v83 = v78[10];
    if (v83 != 43)
    {
      if ((v83 - 15) <= 1) {
        goto LABEL_97;
      }
      goto LABEL_114;
    }
    uint64_t v84 = &v15[16 * v76];
    if (!v84[9])
    {
      uint64_t v98 = *((void *)v84 + 6);
      unsigned int v97 = v84 + 12;
      uint64_t v96 = v98;
      if (v98)
      {
        heap_Free(*(void **)(v27 + 8), v96);
        *unsigned int v97 = 0;
      }
LABEL_114:
      int v99 = &v15[16 * v76];
      uint64_t v102 = *((void *)v99 + 1);
      unsigned int v101 = v99 + 2;
      uint64_t v100 = v102;
      if (v102)
      {
        heap_Free(*(void **)(v27 + 8), v100);
        *unsigned int v101 = 0;
        LOWORD(v15[16 * v76 + 4]) = 0;
      }
      goto LABEL_98;
    }
    int v85 = v84[8] - v15[8];
    if (v625 > (unsigned __int16)(*((_WORD *)v84 + 16) - *((_WORD *)v15 + 16) - 3))
    {
      int v86 = (unsigned __int16)(v85 - 3);
      if (!strncmp(&__s[(unsigned __int16)(v85 - 3)], szPHONMARKER_BEG, 3uLL))
      {
        uint64_t v87 = &v15[16 * v76];
        uint64_t v90 = *((void *)v87 + 1);
        BOOL v89 = v87 + 2;
        uint64_t v88 = v90;
        if (v90)
        {
          heap_Free(*(void **)(v615 + 8), v88);
          *BOOL v89 = 0;
          LOWORD(v15[16 * v76 + 4]) = 0;
        }
        unsigned int v91 = &v15[16 * (unint64_t)(unsigned __int16)v77];
        long long v92 = *(_OWORD *)v78;
        long long v93 = *((_OWORD *)v78 + 1);
        long long v94 = *((_OWORD *)v78 + 3);
        v91[2] = *((_OWORD *)v78 + 2);
        unsigned int v91[3] = v94;
        *unsigned int v91 = v92;
        v91[1] = v93;
        *((_DWORD *)v91 + 8) = v15[8] + (unsigned __int16)v85;
        while (1)
        {
          LOWORD(v85) = v85 + 1;
          int v95 = __s[(unsigned __int16)v85];
          if ((unsigned __int16)v85 >= v625) {
            break;
          }
          if (v95 == 31) {
            goto LABEL_117;
          }
        }
        if (v95 != 31) {
          goto LABEL_118;
        }
LABEL_117:
        v15[16 * (unint64_t)(unsigned __int16)v77 + 9] = (unsigned __int16)v85 - v86 - 3;
LABEL_118:
        ++v77;
      }
      uint64_t v27 = v615;
    }
LABEL_98:
    if (++v76 < (unint64_t)*(unsigned __int16 *)(v25 + 16)) {
      continue;
    }
    break;
  }
  *(_WORD *)(v25 + 16) = v77;
  if ((unsigned __int16)v77 < 2u)
  {
LABEL_134:
    *(_WORD *)(v25 + 16) = 1;
    goto LABEL_135;
  }
  uint64_t v103 = 0;
  uint64_t v104 = 1;
  do
  {
    unint64_t v105 = &v15[16 * v104];
    if (v105[5] != 7 || v105[10] != 43)
    {
      int v106 = v105 + 8;
      int v107 = v15 + 26;
      uint64_t v108 = (unsigned __int16)v77 - 1;
      uint64_t v109 = v103;
      while (1)
      {
        if (v109)
        {
          if (*(v107 - 5) == 7 && *v107 == 43)
          {
            unsigned int v110 = *(v107 - 2);
            if (*v106 >= v110 && *v106 < *(v107 - 1) + v110) {
              break;
            }
          }
        }
        --v109;
        v107 += 16;
        if (!--v108) {
          goto LABEL_131;
        }
      }
      *int v106 = v110;
    }
LABEL_131:
    ++v104;
    ++v103;
  }
  while (v104 != (unsigned __int16)v77);
  *(_WORD *)(v25 + 16) = v77;
  LOWORD(v277) = 1;
  do
  {
    unint64_t v277 = (unsigned __int16)v277;
    v278 = &v15[16 * (unint64_t)(unsigned __int16)v277];
    while (1)
    {
      int v279 = v278[5];
      if (v279 == 998 || v279 == 0) {
        break;
      }
      ++v277;
      v278 += 16;
      if (v277 >= (unsigned __int16)v77) {
        goto LABEL_135;
      }
    }
    uint64_t v281 = (unsigned __int16)v277 + 1;
    if ((unsigned __int16)v77 > v281)
    {
      memmove(v278, &v15[16 * v281], (uint64_t)((unsigned __int16)v77 - (int)v281) << 6);
      LOWORD(v77) = *(_WORD *)(v25 + 16);
    }
    LOWORD(v77) = v77 - 1;
    *(_WORD *)(v25 + 16) = v77;
  }
  while ((unsigned __int16)v77 > (unsigned __int16)v277);
LABEL_135:
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"out wordpar_loc_asian_ProcessWparserMarkers()", 0, 0, 0);
  long long v111 = (char *)v638;
  *(void *)&long long v641 = v637;
  v648[0] = (char *)v638;
  unsigned __int16 v112 = strlen((const char *)(a1 + 180));
  char v647 = 0;
  __int16 v646 = 30;
  v645 = 0;
  int v113 = *(unsigned __int16 *)(v638 + 16);
  MarkerArgint Str = marker_getMarkerArgStr(2u);
  int v115 = v113 + strlen(MarkerArgStr) + 1;
  if (*((unsigned __int16 *)v111 + 9) < (unsigned __int16)v115)
  {
    uint64_t inserted = datac_RequestBlock(*(void *)(a1 + 24), 1012, (unsigned __int16)v115, v648);
    long long v19 = __s;
    if ((inserted & 0x80000000) != 0) {
      goto LABEL_526;
    }
    long long v111 = v648[0];
  }
  long long v117 = (char *)(*((void *)v111 + 1)
                + *((unsigned __int16 *)v111 + 1) * (unint64_t)*((unsigned __int16 *)v111 + 8));
  uint64_t v118 = marker_getMarkerArgStr(2u);
  strcpy(v117, v118);
  uint64_t v119 = marker_getMarkerArgStr(2u);
  v117[strlen(v119)] = 0;
  unsigned int v120 = *((unsigned __int16 *)v648[0] + 8);
  *((_WORD *)v648[0] + 8) = v115;
  unsigned int v121 = marker_getMarkerArgStr(1u);
  unsigned __int16 v122 = v115 + strlen(v121) + 1;
  uint64_t v123 = v648[0];
  if (*((unsigned __int16 *)v648[0] + 9) < v122)
  {
    uint64_t v124 = datac_RequestBlock(*(void *)(a1 + 24), 1012, v122, v648);
    if ((v124 & 0x80000000) != 0)
    {
      uint64_t v65 = v124;
LABEL_284:
      long long v19 = __s;
      goto LABEL_527;
    }
    uint64_t v123 = v648[0];
  }
  uint64_t v601 = a5;
  uint64_t v125 = (char *)(*((void *)v123 + 1)
                + *((unsigned __int16 *)v123 + 1) * (unint64_t)*((unsigned __int16 *)v123 + 8));
  int v126 = marker_getMarkerArgStr(1u);
  strcpy(v125, v126);
  uint64_t v127 = marker_getMarkerArgStr(1u);
  v125[strlen(v127)] = 0;
  unsigned int v128 = *((unsigned __int16 *)v648[0] + 8);
  *((_WORD *)v648[0] + 8) = v122;
  HIBYTE(v646) = 76;
  strlen(__s);
  long long v19 = __s;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v129, v130, v131, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eL\")");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eL\")", 0, 0, 0);
  uint64_t inserted = wordpar_loc_asian_deleteStrAddMarker(*(void *)(a1 + 24), __s, (const char *)&v646, v641, v120);
  if ((inserted & 0x80000000) != 0
    || (HIBYTE(v646) = 68,
        strlen(__s),
        long long v19 = __s,
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v132, v133, v134, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eD\")"), marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eD\")", 0, 0,
          0),
        uint64_t inserted = wordpar_loc_asian_deleteStrAddMarker(*(void *)(a1 + 24), __s, (const char *)&v646, v641, v120),
        (inserted & 0x80000000) != 0))
  {
LABEL_526:
    uint64_t v65 = inserted;
    goto LABEL_527;
  }
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v135, v136, v137, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eP\")");
  long long v19 = __s;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eP\")", 0, 0, 0);
  HIBYTE(v646) = 80;
  uint64_t v138 = wordpar_loc_asian_deleteStrAddMarker(*(void *)(a1 + 24), __s, (const char *)&v646, v641, v128);
  uint64_t v65 = v138;
  if ((v138 & 0x80000000) != 0) {
    goto LABEL_527;
  }
  unsigned int v583 = v138;
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v139, v140, v141, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szPHONMARKER_BEG)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szPHONMARKER_BEG)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(v641, __s, szPHONMARKER_BEG);
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v142, v143, v144, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szWORD_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szWORD_END)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(v641, __s, szWORD_END);
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v145, v146, v147, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \"\"), initial only");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \"\"), initial only", 0, 0, 0);
  wordpar_loc_asian_replaceStrWithStr(v641, __s, &byte_20D5A22AE, 1);
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v148, v149, v150, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \" \")");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \" \")", 0, 0, 0);
  wordpar_loc_asian_replaceStrWithStr(v641, __s, " ", 0);
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v151, v152, v153, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(v641, __s, szMARKER_END);
  strlen(__s);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v154, v155, v156, (uint64_t)"after wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"after wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)", 0, 0, 0);
  int v157 = 0;
  uint64_t v158 = v641;
  unint64_t v159 = *(_DWORD **)(v641 + 8);
  uint64_t v160 = *(unsigned __int16 *)(v641 + 16);
  if (v160 >= 2)
  {
    int v157 = 0;
    unsigned int v161 = v159[8];
    uint64_t v162 = v159 + 26;
    uint64_t v163 = v160 - 2;
    do
    {
      unsigned int v164 = *(v162 - 2);
      if (v164 == v161 && *(v162 - 5) == 7 && *v162 == 43) {
        int v157 = 1;
      }
      v162 += 16;
      BOOL v165 = v164 > v161 || v163-- == 0;
    }
    while (!v165);
  }
  long long v19 = __s;
  unsigned __int16 v166 = strlen(__s);
  if ((v166 & 0xFFFE) != 0 && *__s == 32 && !v157)
  {
    memmove(__s, __s + 1, v166);
    uint64_t v158 = v641;
    unint64_t v159 = *(_DWORD **)(v641 + 8);
    uint64_t v160 = *(unsigned __int16 *)(v641 + 16);
    if (v160 >= 2)
    {
      int v167 = v159[8];
      uint64_t v168 = v160 - 1;
      unsigned int v169 = v159 + 24;
      do
      {
        if (*v169 != v167) {
          --*v169;
        }
        v169 += 16;
        --v168;
      }
      while (v168);
    }
    --v159[9];
  }
  if (v160 < 2)
  {
    v626 = __s;
    goto LABEL_297;
  }
  unsigned int v575 = v128;
  uint64_t v170 = 0;
  uint64_t v171 = -2;
  uint64_t v172 = 3;
  uint64_t v173 = 160;
  unint64_t v174 = 1;
  v626 = __s;
  unsigned int v611 = v112;
  size_t v577 = v112;
  while (2)
  {
    unsigned int v175 = (char *)&v159[16 * v174];
    int v177 = *((_DWORD *)v175 + 5);
    unsigned __int16 v176 = v175 + 20;
    if (v177 != 7 || v159[16 * v174 + 10] != 43) {
      goto LABEL_220;
    }
    v579 = v176;
    __dst = (char *)&v159[16 * v174];
    uint64_t v585 = v173;
    uint64_t v587 = v172;
    unsigned int v178 = strlen(v626);
    unint64_t v621 = v174;
    unsigned int v183 = *((_DWORD *)__dst + 8);
    unsigned int v184 = v159[8];
    BOOL v42 = v183 >= v184;
    uint64_t v185 = v183 - v184;
    if (!v42 || (unsigned __int16 v186 = v178, v187 = *((_DWORD *)__dst + 9), v188 = v187 - 1, v187 - 1 >= v178))
    {
      uint64_t v384 = *((void *)__dst + 6);
      if (v384)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v384);
        *((void *)__dst + 6) = 0;
      }
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1922, 0, v179, v180, v181, v182, v573);
      uint64_t v282 = v606;
      goto LABEL_308;
    }
    uint64_t v589 = v171;
    v591 = (char *)v159;
    uint64_t v616 = v170;
    __sa = (char *)v19;
    uint64_t v189 = &v626[v185];
    unsigned int v190 = (unsigned __int16)*((_DWORD *)__dst + 9);
    unsigned int v191 = 0;
    if ((unsigned __int16)*((_DWORD *)__dst + 9))
    {
      while (utf8_BelongsToSet(0, v189, v191, (unsigned __int16)v187))
      {
        if (v190 == ++v191)
        {
          unsigned int v191 = v187;
          break;
        }
      }
      if ((_WORD)v187 == 1)
      {
        LOWORD(v187) = 1;
        unint64_t v196 = v621;
        goto LABEL_182;
      }
    }
    else
    {
      unsigned __int16 v188 = -1;
    }
    unsigned int v197 = v188;
    unint64_t v196 = v621;
    while (utf8_BelongsToSet(0, v189, v197, v190))
    {
      LOWORD(v187) = v187 - 1;
      if (!(_WORD)--v197)
      {
        LOWORD(v187) = 1;
        break;
      }
    }
LABEL_182:
    uint64_t v198 = (unsigned __int16)v187;
    if ((unsigned __int16)v187 <= (unsigned __int16)v191) {
      goto LABEL_215;
    }
    uint64_t v199 = 0;
    char v200 = 95;
    unsigned int v201 = v191;
    unsigned __int16 v578 = v186;
    while (2)
    {
      unsigned int v202 = v189[(unsigned __int16)v201];
      if (v202 <= 0x5B)
      {
        if (v202 == 35) {
          goto LABEL_196;
        }
        if (v202 == 18) {
          break;
        }
      }
      else
      {
        if (v202 != 95)
        {
          BOOL v165 = v202 == 92;
          uint64_t v203 = (unsigned __int16)v201 + 1;
          BOOL v204 = !v165 || v203 >= v198;
          if (!v204 && v189[v203] == 84)
          {
            uint64_t v205 = v198;
            uint64_t v206 = v199;
            for (unsigned int m = v201 + 2;
                  (unsigned __int16)m < (unsigned __int16)v187;
                  m += utf8_determineUTF8CharLength(v208))
            {
              unsigned int v208 = v189[(unsigned __int16)m];
              if (v208 == 92) {
                break;
              }
            }
            if (v189[(unsigned __int16)m] == 92) {
              unsigned int v201 = m;
            }
            uint64_t v199 = v206;
            uint64_t v198 = v205;
          }
          goto LABEL_204;
        }
LABEL_196:
        if (v200 != 35 && v200 != 95) {
          uint64_t v199 = (v199 + 1);
        }
      }
LABEL_204:
      if (!utf8_BelongsToSet(0, v189, (unsigned __int16)v201, v190)) {
        char v200 = v189[(unsigned __int16)v201];
      }
      if ((unsigned __int16)++v201 < (unsigned __int16)v187) {
        continue;
      }
      break;
    }
    if (v200 == 35)
    {
      unint64_t v196 = v621;
    }
    else
    {
      unint64_t v196 = v621;
      if (v200 != 95) {
        LOWORD(v199) = v199 + 1;
      }
    }
    unsigned int v209 = (unsigned __int16)v199;
    if (!(_WORD)v199)
    {
LABEL_215:
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1818, 0, v192, v193, v194, v195, v573);
      unint64_t v159 = v591;
      v214 = &v591[64 * v196];
      uint64_t v217 = *((void *)v214 + 6);
      v216 = v214 + 48;
      uint64_t v215 = v217;
      if (v217)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v215);
        void *v216 = 0;
      }
      uint64_t v170 = v616;
      unint64_t v174 = v621;
      uint64_t v158 = v641;
      uint64_t v218 = *(unsigned __int16 *)(v641 + 16);
      long long v19 = __sa;
      uint64_t v171 = v589;
      if (v621 + 1 != v218)
      {
        memmove(__dst, &v591[64 * v621 + 64], (uint64_t)((int)v218 - (int)v621) << 6);
        uint64_t v158 = v641;
        LOWORD(v218) = *(_WORD *)(v641 + 16);
      }
      uint64_t v173 = v585;
      uint64_t v172 = v587;
      *(_WORD *)(v158 + 16) = v218 - 1;
      goto LABEL_220;
    }
    _DWORD *v579 = 34;
    unsigned __int16 v210 = v648[0];
    unsigned int v211 = *((unsigned __int16 *)v648[0] + 8);
    unsigned __int16 v212 = v187 - v191 + v211 + 1;
    if (*((unsigned __int16 *)v648[0] + 9) < v212)
    {
      uint64_t inserted = datac_RequestBlock(*(void *)(a1 + 24), 1012, (unsigned __int16)(v187 - v191 + v211 + 1), v648);
      long long v19 = __sa;
      if ((inserted & 0x80000000) == 0)
      {
        int v213 = *(char **)(v641 + 8);
        unsigned __int16 v210 = v648[0];
        unsigned int v211 = *((unsigned __int16 *)v648[0] + 8);
        goto LABEL_223;
      }
      goto LABEL_526;
    }
    long long v19 = __sa;
    int v213 = v591;
LABEL_223:
    unsigned __int16 v219 = &v213[64 * v196];
    v584 = v219 + 32;
    v592 = v213;
    uint64_t v220 = (*((_DWORD *)v219 + 8) - *((_DWORD *)v213 + 8));
    uint64_t v221 = v626;
    strncpy((char *)(*((void *)v210 + 1) + *((unsigned __int16 *)v210 + 1) * (unint64_t)v211), &v626[v220 + (unsigned __int16)v191], (unsigned __int16)(v187 - v191))[(unsigned __int16)v187 - (unsigned __int16)v191] = 0;
    unsigned int v222 = *((unsigned __int16 *)v219 + 18);
    __sb = v219 + 36;
    *((_DWORD *)v219 + 10) = *((unsigned __int16 *)v648[0] + 8);
    *((_WORD *)v648[0] + 8) = v212;
    int __dsta = v611 * v209;
    unsigned int v223 = v611 * v209 - v222;
    if (v611 * v209 <= v222)
    {
      uint64_t v225 = (uint64_t)v19;
      unsigned __int16 v226 = (const void *)(a1 + 180);
      unsigned __int16 v227 = v578;
    }
    else
    {
      int v224 = strlen(v626);
      uint64_t v225 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), (uint64_t)v626, v223 + v224 + 1);
      uint64_t v221 = (const char *)v225;
      unsigned __int16 v226 = (const void *)(a1 + 180);
      unsigned __int16 v227 = v578;
      if (!v225)
      {
        uint64_t v65 = 2370838538;
        goto LABEL_527;
      }
    }
    v580 = (const char *)v225;
    if (v220 >= *((_DWORD *)v592 + 9))
    {
      int v576 = 0;
    }
    else
    {
      int v576 = *(unsigned __int16 *)__sb;
      memmove((void *)&v221[v220], &v221[(v576 + v220)], v227 - (v576 + v220) + 1);
    }
    int v228 = 0;
    uint64_t v229 = (char *)&v221[v220 + v611];
    v230 = (char *)&v221[v220];
    v626 = (char *)v221;
    do
    {
      uint64_t v231 = (unsigned __int16)strlen(v221);
      memmove(v229, v230, (v231 - v220));
      uint64_t v232 = v231 + v611;
      uint64_t v221 = v626;
      v626[v232] = 0;
      memmove(v230, v226, v577);
      ++v228;
    }
    while (v209 > (unsigned __int16)v228);
    unint64_t v233 = *(unsigned __int16 *)(v641 + 16);
    int v234 = v589;
    if (v621 + 1 < v233)
    {
      int v235 = &v592[v585];
      uint64_t v236 = v587;
      do
      {
        if (*(_DWORD *)v235 > *v584) {
          *(_DWORD *)v235 += __dsta - v576;
        }
        BOOL v165 = v233 == (unsigned __int16)v236++;
        v235 += 64;
      }
      while (!v165);
    }
    int v237 = 0;
    uint64_t v238 = 0;
    *(_DWORD *)__sb = 0;
    if (v209 <= 1) {
      unsigned int v239 = 1;
    }
    else {
      unsigned int v239 = v209;
    }
    unint64_t v240 = (unint64_t)v239 << 6;
    do
    {
      uint64_t v241 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)(v233 + 1), &v641);
      unsigned int v242 = v241;
      if ((v241 & 0x80000000) != 0)
      {
        long long v19 = v580;
        uint64_t v65 = v241;
        goto LABEL_527;
      }
      unint64_t v159 = *(_DWORD **)(v641 + 8);
      memmove((char *)v159 + v616 + v238 + 192, (char *)v159 + v616 + v238 + 128, (uint64_t)(v234 + *(unsigned __int16 *)(v641 + 16)) << 6);
      unint64_t v233 = *(void *)(v641 + 8) + v616 + v238;
      *(_DWORD *)(v233 + 128) = 1;
      *(_DWORD *)(v233 + 148) = 1;
      v243 = (char *)&v159[16 * v621];
      *(void *)(v233 + 152) = *((void *)v243 + 3);
      int v245 = *((_DWORD *)v243 + 8);
      v244 = v243 + 32;
      *(_DWORD *)(v233 + 160) = v237 + v245;
      *(void *)(v233 + 164) = v611;
      *(_WORD *)(v233 + 144) = 0;
      *(void *)(v233 + 136) = 0;
      *(void *)(v233 + 176) = 0;
      uint64_t v158 = v641;
      unsigned int v246 = *(unsigned __int16 *)(v641 + 16);
      LOWORD(v233) = v246 + 1;
      *(_WORD *)(v641 + 16) = v246 + 1;
      v238 += 64;
      v237 += v611;
      --v234;
    }
    while (v240 != v238);
    uint64_t v247 = 0;
    unsigned int v248 = *v244 + __dsta;
    unsigned int v249 = (unsigned __int16)(v246 + 1);
    if ((((_WORD)v246 + 1) & 0xFFFE) == 0) {
      unsigned int v249 = 1;
    }
    unint64_t v250 = (unint64_t)v249 << 6;
    unsigned int v583 = v242;
    while (1)
    {
      uint64_t v251 = v247 + 64;
      if (v250 == v247 + 64) {
        break;
      }
      v252 = (char *)v159 + v247;
      BOOL v253 = v248 == *((_DWORD *)v252 + 24) && *((_DWORD *)v252 + 21) == 21;
      uint64_t v247 = v251;
      if (v253) {
        goto LABEL_278;
      }
    }
    if ((unsigned __int16)(v246 + 1) < 2u)
    {
      v255 = v159;
      LOWORD(v257) = 1;
      unsigned int v258 = v575;
    }
    else
    {
      int v254 = v159[8];
      v255 = v159;
      v256 = v159 + 26;
      uint64_t v257 = 1;
      unsigned int v258 = v575;
      while (1)
      {
        int v259 = *(v256 - 5);
        if (v259 == 21) {
          unsigned int v258 = *v256;
        }
        unsigned int v260 = *(v256 - 2) - v254;
        if (v248 <= v260 && (v259 == 7 || v248 != v260)) {
          break;
        }
        ++v257;
        v256 += 16;
        if ((unsigned __int16)(v246 + 1) == v257) {
          goto LABEL_267;
        }
      }
    }
    uint64_t v262 = (unsigned __int16)v257;
    if ((unsigned __int16)v257 != (unsigned __int16)v233)
    {
      unsigned int v268 = v255[8];
      if (v262 < (unsigned __int16)v233)
      {
        unint64_t v269 = v262 + 1;
        v270 = &v255[16 * v262 + 5];
        while (v248 == v270[3] - v268)
        {
          unsigned int v272 = *v270;
          v270 += 16;
          unsigned int v271 = v272;
          if (v269 < (unsigned __int16)(v246 + 1))
          {
            ++v269;
            if (v271 != 21) {
              continue;
            }
          }
          if (v271 != 21) {
            break;
          }
          long long v19 = v580;
          unint64_t v159 = v255;
          goto LABEL_281;
        }
      }
      int LastPosRef = wordpar_loc_asian_getLastPosRef(v255, (unsigned __int16)(v246 + 1), v248 - v268, v262, 0);
      unsigned int v583 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)(v246 + 2), &v641);
      if ((v583 & 0x80000000) != 0)
      {
        long long v19 = v580;
        goto LABEL_652;
      }
      v274 = *(_DWORD **)(v641 + 8);
      memmove(&v274[16 * (unint64_t)(v262 + 1)], &v274[16 * v262], (uint64_t)(*(unsigned __int16 *)(v641 + 16) - (int)v262) << 6);
      uint64_t v275 = *(void *)(v641 + 8) + (v262 << 6);
      *(_DWORD *)uint64_t v275 = 1;
      *(_DWORD *)(v275 + 20) = 21;
      *(_DWORD *)(v275 + 24) = LastPosRef;
      *(_DWORD *)(v275 + 28) = 0;
      *(_DWORD *)(v275 + 32) = v248;
      *(_WORD *)(v275 + 16) = 0;
      *(void *)(v275 + 8) = 0;
      *(_DWORD *)(v275 + 36) = 0;
      *(_DWORD *)(v275 + 40) = v258;
      unint64_t v159 = v274;
      *(void *)(v275 + 48) = 0;
      uint64_t v158 = v641;
      ++*(_WORD *)(v641 + 16);
LABEL_278:
      long long v19 = v580;
      goto LABEL_281;
    }
LABEL_267:
    uint64_t v263 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)(v246 + 2), &v641);
    uint64_t v65 = v263;
    if ((v263 & 0x80000000) != 0)
    {
      long long v19 = v580;
      goto LABEL_527;
    }
    v264 = *(unsigned int **)(v641 + 8);
    uint64_t v265 = *(unsigned __int16 *)(v641 + 16);
    v266 = &v264[16 * v265];
    unsigned int *v266 = 1;
    v266[5] = 21;
    unsigned int v583 = v263;
    if (v246) {
      int v267 = wordpar_loc_asian_getLastPosRef(v264, v265, v248 - v264[8], v246, 0);
    }
    else {
      int v267 = v264[7] + v264[6];
    }
    v276 = &v264[16 * v265];
    v276[6] = v267;
    v276[7] = 0;
    v276[8] = v248;
    v276[9] = 0;
    *((_WORD *)v276 + 8) = 0;
    *((void *)v276 + 1) = 0;
    v276[10] = v258;
    *((void *)v276 + 6) = 0;
    uint64_t v158 = v641;
    ++*(_WORD *)(v641 + 16);
    long long v19 = v580;
    unint64_t v159 = v264;
LABEL_281:
    uint64_t v170 = v616;
    unint64_t v174 = v621;
    uint64_t v172 = v587;
    uint64_t v171 = v589;
    uint64_t v173 = v585;
LABEL_220:
    ++v174;
    ++v172;
    v173 += 64;
    v170 += 64;
    --v171;
    if (v174 < *(unsigned __int16 *)(v158 + 16)) {
      continue;
    }
    break;
  }
LABEL_297:
  v159[9] = strlen(v626);
  uint64_t v282 = v606;
  uint64_t v65 = v583;
  if (*(_DWORD *)(a1 + 188)
    || (paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &v645) & 0x80000000) == 0
    && (!LH_stricmp(v645, "MNC")
     || !LH_stricmp(v645, "MNT")
     || !LH_stricmp(v645, "SIC")))
  {
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"in wordpar_loc_asian_TranslateMarkup() before remove conflict internal LANG marker", 0, 0, 0);
    uint64_t v283 = v641;
    LODWORD(v284) = *(unsigned __int16 *)(v641 + 16);
    if (v284 >= 2)
    {
      v285 = v159 + 16;
      uint64_t v286 = -1;
      unint64_t v287 = 1;
      do
      {
        if (*(v285 - 11) == 36 && v285[5] == 36 && *(v285 - 8) == v285[8] && !*v285)
        {
          memmove(v285 - 16, v285, (v286 + v284) << 6);
          uint64_t v283 = v641;
          --*(_WORD *)(v641 + 16);
        }
        ++v287;
        unint64_t v284 = *(unsigned __int16 *)(v283 + 16);
        --v286;
        v285 += 16;
      }
      while (v287 < v284);
    }
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"in wordpar_loc_asian_TranslateMarkup() after remove conflict internal LANG marker", 0, 0, 0);
  }
  if ((v583 & 0x80000000) != 0) {
    goto LABEL_527;
  }
LABEL_308:
  if ((datac_RequestBlock(*(void *)(a1 + 24), 1012, 1u, &v638) & 0x80000000) == 0) {
    uint64_t v282 = *(void *)(v638 + 8);
  }
  v288 = *(char **)(v637 + 8);
  if (v282 && *(_WORD *)(v637 + 16))
  {
    unint64_t v289 = 0;
    v290 = v288 + 40;
    do
    {
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v290 - 5)))
      {
        uint64_t v291 = *(unsigned int *)v290;
        if (v291 == -1) {
          uint64_t v292 = 0;
        }
        else {
          uint64_t v292 = v282 + v291;
        }
        void *v290 = v292;
      }
      ++v289;
      v290 += 8;
    }
    while (v289 < *(unsigned __int16 *)(v637 + 16));
  }
  __s = (char *)v19;
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_PostProcessMarkers()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_PostProcessMarkers()", 1, 0, 0);
  uint64_t v293 = *(void *)(a1 + 16);
  int v294 = *(_DWORD *)(a1 + 188);
  uint64_t v295 = v637;
  v296 = marker_getMarkerArgStr(1u);
  v648[0] = 0;
  unsigned int v297 = *(unsigned __int16 *)(v295 + 16);
  if (v297 >= 2)
  {
    v298 = v296;
    unsigned int v299 = 1;
    do
    {
      uint64_t v300 = v299 + 1;
      if (v300 < v297)
      {
        v301 = &v288[64 * (unint64_t)v299];
        v302 = &v288[64 * v300];
        if (*((_DWORD *)v301 + 8) == *((_DWORD *)v302 + 8))
        {
          int v303 = *((_DWORD *)v301 + 5);
          if (v303 != 36 && v303 != 0x4000 && *(_DWORD *)&v288[64 * v300 + 20] == 36)
          {
            long long v641 = *(_OWORD *)v302;
            long long v304 = v641;
            long long v642 = *((_OWORD *)v302 + 1);
            long long v305 = v642;
            long long v643 = *((_OWORD *)v302 + 2);
            long long v306 = v643;
            long long v644 = *((_OWORD *)v302 + 3);
            long long v307 = v644;
            long long v308 = *((_OWORD *)v301 + 1);
            *(_OWORD *)v302 = *(_OWORD *)v301;
            *((_OWORD *)v302 + 1) = v308;
            long long v309 = *((_OWORD *)v301 + 3);
            *((_OWORD *)v302 + 2) = *((_OWORD *)v301 + 2);
            *((_OWORD *)v302 + 3) = v309;
            *(_OWORD *)v301 = v304;
            *((_OWORD *)v301 + 1) = v305;
            *((_OWORD *)v301 + 2) = v306;
            *((_OWORD *)v301 + 3) = v307;
            unsigned int v297 = *(unsigned __int16 *)(v295 + 16);
            LODWORD(v300) = 1;
          }
        }
      }
      unsigned int v299 = v300;
    }
    while (v300 < v297);
    if (v297 >= 2)
    {
      v310 = v288 + 84;
      for (unint64_t n = 1; n < v297; ++n)
      {
        int v312 = *(_DWORD *)v310;
        if (*(_DWORD *)v310 == 41)
        {
          v313 = marker_getMarkerArgStr(1u);
          if (!strcmp(v298, v313))
          {
            int v314 = *((_DWORD *)v310 + 3);
            int v315 = *((_DWORD *)v288 + 8);
            if (v314 != v315 && __s[v314 + ~v315] == 32) {
              *((_DWORD *)v310 + 3) = v314 + 1;
            }
          }
          *(_DWORD *)v310 = 1;
          unsigned int v297 = *(unsigned __int16 *)(v295 + 16);
        }
        else if (v312 == 39)
        {
          int v316 = *((_DWORD *)v310 + 3);
          if (v316 != *((_DWORD *)v288 + 8)) {
            *((_DWORD *)v310 + 3) = v316 + 1;
          }
          *(_DWORD *)v310 = 37;
        }
        else if (v312 == 36)
        {
          v298 = *(const char **)(v310 + 20);
        }
        v310 += 64;
      }
      if (v297 >= 2)
      {
        unsigned int v317 = 1;
        do
        {
          uint64_t v318 = v317 + 1;
          if (v318 >= v297
            || (v319 = &v288[64 * v318],
                v320 = &v288[64 * (unint64_t)v317],
                *((_DWORD *)v319 + 8) >= *((_DWORD *)v320 + 8)))
          {
            ++v317;
          }
          else
          {
            unsigned int v317 = 0;
            long long v641 = *(_OWORD *)v319;
            long long v321 = v641;
            long long v642 = *((_OWORD *)v319 + 1);
            long long v322 = v642;
            long long v643 = *((_OWORD *)v319 + 2);
            long long v323 = v643;
            long long v644 = *((_OWORD *)v319 + 3);
            long long v324 = v644;
            long long v325 = *((_OWORD *)v320 + 1);
            *(_OWORD *)v319 = *(_OWORD *)v320;
            *((_OWORD *)v319 + 1) = v325;
            long long v326 = *((_OWORD *)v320 + 3);
            *((_OWORD *)v319 + 2) = *((_OWORD *)v320 + 2);
            *((_OWORD *)v319 + 3) = v326;
            *(_OWORD *)v320 = v321;
            *((_OWORD *)v320 + 1) = v322;
            *((_OWORD *)v320 + 2) = v323;
            *((_OWORD *)v320 + 3) = v324;
            unsigned int v297 = *(unsigned __int16 *)(v295 + 16);
          }
        }
        while (v317 < v297);
        if (v297 >= 2)
        {
          unsigned int v327 = 1;
          do
          {
            uint64_t v328 = v327 + 1;
            if (v328 < v297)
            {
              v329 = &v288[64 * (unint64_t)v327];
              v330 = &v288[64 * v328];
              if (*((_DWORD *)v329 + 8) == *((_DWORD *)v330 + 8))
              {
                int v331 = *((_DWORD *)v329 + 5);
                if (v331 != 36 && v331 != 0x4000 && *(_DWORD *)&v288[64 * v328 + 20] == 36)
                {
                  long long v641 = *(_OWORD *)v330;
                  long long v332 = v641;
                  long long v642 = *((_OWORD *)v330 + 1);
                  long long v333 = v642;
                  long long v643 = *((_OWORD *)v330 + 2);
                  long long v334 = v643;
                  long long v644 = *((_OWORD *)v330 + 3);
                  long long v335 = v644;
                  long long v336 = *((_OWORD *)v329 + 1);
                  *(_OWORD *)v330 = *(_OWORD *)v329;
                  *((_OWORD *)v330 + 1) = v336;
                  long long v337 = *((_OWORD *)v329 + 3);
                  *((_OWORD *)v330 + 2) = *((_OWORD *)v329 + 2);
                  *((_OWORD *)v330 + 3) = v337;
                  *(_OWORD *)v329 = v332;
                  *((_OWORD *)v329 + 1) = v333;
                  *((_OWORD *)v329 + 2) = v334;
                  *((_OWORD *)v329 + 3) = v335;
                  unsigned int v297 = *(unsigned __int16 *)(v295 + 16);
                  LODWORD(v328) = 1;
                }
              }
            }
            unsigned int v327 = v328;
          }
          while (v328 < v297);
        }
      }
    }
  }
  if (!v294
    && ((paramc_ParamGetStr(*(void *)(v293 + 40), (uint64_t)"langcode", v648) & 0x80000000) != 0
     || LH_stricmp(v648[0], "MNC")
     && LH_stricmp(v648[0], "MNT")
     && LH_stricmp(v648[0], "SIC")))
  {
    if (*(unsigned __int16 *)(v295 + 16) < 2u)
    {
      unsigned int v338 = 1;
    }
    else
    {
      v378 = (const char **)(v288 + 104);
      unint64_t v379 = 1;
      do
      {
        if (*((_DWORD *)v378 - 5) == 36)
        {
          v380 = *v378;
          v381 = marker_getMarkerArgStr(9u);
          if (!strcmp(v380, v381) || (v382 = *v378, v383 = marker_getMarkerArgStr(0xAu), !strcmp(v382, v383))) {
            *((_DWORD *)v378 - 5) = 999;
          }
        }
        ++v379;
        v378 += 8;
      }
      while (v379 < *(unsigned __int16 *)(v295 + 16));
      unsigned int v338 = (unsigned __int16)v379;
    }
    *(_WORD *)(v295 + 16) = v338;
  }
  else
  {
    unsigned int v338 = *(unsigned __int16 *)(v295 + 16);
  }
  if (v338 >= 2)
  {
    uint64_t v339 = 1;
    unsigned __int16 v340 = 1;
    while (1)
    {
      v341 = &v288[64 * v339];
      if (*((_DWORD *)v341 + 5) != 36) {
        goto LABEL_376;
      }
      unsigned __int16 v342 = v339 - 1;
      if (v339 == 1) {
        break;
      }
      v343 = &v288[64 * v339];
      v344 = v343 + 32;
      while (1)
      {
        uint64_t v345 = v342;
        v346 = &v288[64 * (unint64_t)v342];
        v347 = v346 + 20;
        if (*((_DWORD *)v346 + 5) == 36) {
          break;
        }
        unsigned __int16 v342 = v345 - 1;
        if ((_WORD)v345 == 1) {
          goto LABEL_377;
        }
      }
      if (!strcmp(*((const char **)v343 + 5), *((const char **)v346 + 5))) {
        break;
      }
      v348 = &v288[64 * v345];
      if (*v344 != *((_DWORD *)v348 + 8)) {
        break;
      }
      if (*(_DWORD *)v348 && (*(_DWORD *)v348 != 1 || *v344 != *((_DWORD *)v288 + 8)))
      {
        long long v354 = *(_OWORD *)v341;
        long long v355 = *((_OWORD *)v341 + 1);
        long long v356 = *((_OWORD *)v341 + 3);
        *((_OWORD *)v348 + 2) = *((_OWORD *)v341 + 2);
        *((_OWORD *)v348 + 3) = v356;
        *(_OWORD *)v348 = v354;
        *((_OWORD *)v348 + 1) = v355;
        goto LABEL_379;
      }
      if (!*(_DWORD *)v341)
      {
        _DWORD *v347 = 999;
LABEL_376:
        uint64_t v349 = v340;
LABEL_378:
        v350 = &v288[64 * v349];
        long long v351 = *(_OWORD *)v341;
        long long v352 = *((_OWORD *)v341 + 1);
        long long v353 = *((_OWORD *)v341 + 3);
        *((_OWORD *)v350 + 2) = *((_OWORD *)v341 + 2);
        *((_OWORD *)v350 + 3) = v353;
        *(_OWORD *)v350 = v351;
        *((_OWORD *)v350 + 1) = v352;
        ++v340;
      }
LABEL_379:
      if (++v339 >= (unint64_t)*(unsigned __int16 *)(v295 + 16)) {
        goto LABEL_383;
      }
    }
LABEL_377:
    uint64_t v349 = v340;
    goto LABEL_378;
  }
  unsigned __int16 v340 = 1;
LABEL_383:
  *(_WORD *)(v295 + 16) = v340;
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_deleteMarkerForUnknown()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteMarkerForUnknown()", 0, 0, 0);
  uint64_t v357 = v637;
  if (*(_WORD *)(v637 + 16))
  {
    int v358 = 0;
    do
    {
      v359 = &v288[64 * (unint64_t)(unsigned __int16)v358];
      long long v641 = *(_OWORD *)v359;
      long long v642 = *((_OWORD *)v359 + 1);
      long long v643 = *((_OWORD *)v359 + 2);
      long long v644 = *((_OWORD *)v359 + 3);
      isMarkerUnknowunint64_t n = wordpar_loc_asian_isMarkerUnknown((uint64_t)&v641);
      unsigned __int16 v361 = *(_WORD *)(v357 + 16);
      if (isMarkerUnknown)
      {
        if (!*(_WORD *)(v357 + 16)) {
          goto LABEL_408;
        }
        unsigned __int16 v362 = 0;
        do
        {
          v363 = &v288[64 * (unint64_t)v362];
          if (*((_DWORD *)v363 + 5) == 36
            && (v364 = (const char *)*((void *)v363 + 5), v365 = marker_getMarkerArgStr(9u), strcmp(v364, v365))
            && *(_DWORD *)v363 == 1
            && (v366 = &v288[64 * (unint64_t)(unsigned __int16)v358],
                *((_DWORD *)v366 + 8) == *(_DWORD *)&v288[64 * (unint64_t)v362 + 32]))
          {
            memmove(v366, &v288[64 * (unint64_t)((unsigned __int16)v358 + 1)], (uint64_t)(*(unsigned __int16 *)(v357 + 16) - (unsigned __int16)v358) << 6);
            unsigned __int16 v361 = *(_WORD *)(v357 + 16) - 1;
            *(_WORD *)(v357 + 16) = v361;
            v358 -= (unsigned __int16)v358 >= v362;
          }
          else
          {
            ++v362;
            unsigned __int16 v361 = *(_WORD *)(v357 + 16);
          }
        }
        while (v362 < v361);
      }
      ++v358;
    }
    while ((unsigned __int16)v358 < v361);
    if (v361)
    {
      int v367 = 0;
      int v368 = 0;
      unint64_t v369 = 0;
      do
      {
        v370 = &v288[64 * v369];
        if (*((_DWORD *)v370 + 5) != 36) {
          goto LABEL_406;
        }
        long long v641 = *(_OWORD *)v370;
        long long v642 = *((_OWORD *)v370 + 1);
        long long v643 = *((_OWORD *)v370 + 2);
        long long v644 = *((_OWORD *)v370 + 3);
        if (wordpar_loc_asian_isMarkerUnknown((uint64_t)&v641))
        {
          ++v369;
        }
        else
        {
          if (!*(_DWORD *)v370)
          {
            int v368 = 0;
LABEL_406:
            ++v369;
            goto LABEL_407;
          }
          if (!v368) {
            goto LABEL_406;
          }
          memmove(&v288[64 * v369], &v288[64 * (unint64_t)(v367 + 1)], (uint64_t)(*(unsigned __int16 *)(v357 + 16) - v367) << 6);
          --*(_WORD *)(v357 + 16);
        }
        int v368 = 1;
LABEL_407:
        int v367 = (unsigned __int16)v369;
      }
      while (v369 < *(unsigned __int16 *)(v357 + 16));
    }
  }
LABEL_408:
  if (*(_DWORD *)(a1 + 192))
  {
    marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_deleteConflictingLangMarker()");
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteConflictingLangMarker()", 0, 0, 0);
    if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &v635) & 0x80000000) == 0)
    {
      uint64_t v371 = v637;
      unsigned int v372 = *(unsigned __int16 *)(v637 + 16);
      if (*(_WORD *)(v637 + 16))
      {
        unint64_t v373 = 0;
        v374 = v635;
        v375 = v288 + 20;
        while (*(_DWORD *)v375 != 36)
        {
LABEL_415:
          ++v373;
          v375 += 64;
          if (v373 >= v372)
          {
            int v627 = 0;
            unint64_t v373 = 0;
            int v617 = 0;
            goto LABEL_441;
          }
        }
        v376 = *(const char **)(v375 + 20);
        v377 = marker_getMarkerArgStr(0xBu);
        if (strcmp(v376, v377))
        {
          unsigned int v372 = *(unsigned __int16 *)(v371 + 16);
          goto LABEL_415;
        }
        int v617 = *((_DWORD *)v375 - 5);
        unsigned int v372 = *(unsigned __int16 *)(v371 + 16);
        int v627 = 1;
LABEL_441:
        if (v372)
        {
          int v385 = 0;
          int v386 = 0;
          unint64_t v387 = 0;
          v622 = &v288[64 * v373];
          while (1)
          {
            v388 = &v288[64 * v387];
            if (*((_DWORD *)v388 + 5) != 36) {
              goto LABEL_456;
            }
            v389 = (const char *)*((void *)v388 + 5);
            v390 = marker_getMarkerArgStr(1u);
            if (!strcmp(v389, v390)) {
              break;
            }
            if (!strcmp(v389, v374)) {
              break;
            }
            v391 = marker_getMarkerArgStr(2u);
            if (!strcmp(v389, v391)) {
              break;
            }
            ++v387;
            int v386 = 1;
LABEL_457:
            int v385 = (unsigned __int16)v387;
            if (v387 >= *(unsigned __int16 *)(v371 + 16)) {
              goto LABEL_466;
            }
          }
          if (*(_DWORD *)v388)
          {
            if (v386)
            {
              v392 = v374;
              if (!v627
                || *((_DWORD *)v622 + 5) == 36
                && *((_DWORD *)v388 + 5) == 36
                && ((v393 = (const char *)*((void *)v622 + 5),
                     v394 = (const char *)*((void *)v388 + 5),
                     v395 = marker_getMarkerArgStr(0xBu),
                     !strcmp(v393, v395))
                  ? (v397 = marker_getMarkerArgStr(2u), BOOL v396 = strcmp(v394, v397) == 0)
                  : (BOOL v396 = 0),
                    (v398 = marker_getMarkerArgStr(0xBu), !strcmp(v393, v398))
                 && (v399 = marker_getMarkerArgStr(1u), !(strcmp(v394, v399) | v617))
                 || v396))
              {
                ++v387;
              }
              else
              {
                memmove(&v288[64 * v387], &v288[64 * (unint64_t)(v385 + 1)], (uint64_t)(*(unsigned __int16 *)(v371 + 16) - v385) << 6);
                --*(_WORD *)(v371 + 16);
              }
              int v386 = 1;
              v374 = v392;
              goto LABEL_457;
            }
          }
          else
          {
            int v386 = 0;
          }
LABEL_456:
          ++v387;
          goto LABEL_457;
        }
      }
    }
  }
LABEL_466:
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wparser_InsertWordMarkers()", 0, 0, 0);
  long long v19 = __s;
  uint64_t inserted = wparser_InsertWordMarkers(*(void *)(a1 + 40), *(void *)(a1 + 24), __s, (_WORD *)(v637 + 16));
  if ((inserted & 0x80000000) != 0) {
    goto LABEL_526;
  }
  unsigned __int16 v400 = 1;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_RemoveBlankLatinRegions()", 1, 0, 0);
  uint64_t v401 = v637;
  if (*(unsigned __int16 *)(v637 + 16) < 2u) {
    goto LABEL_529;
  }
  unsigned __int16 v402 = 1;
  v628 = (char *)v637;
  while (2)
  {
    uint64_t v403 = v402;
    v404 = &v288[64 * (unint64_t)v402];
    if (*((_DWORD *)v404 + 5) != 36) {
      goto LABEL_511;
    }
    v405 = (const char *)*((void *)v404 + 5);
    if (!v405) {
      goto LABEL_511;
    }
    v406 = marker_getMarkerArgStr(2u);
    if (strcmp(v405, v406)) {
      goto LABEL_511;
    }
    if (*(unsigned __int16 *)(v401 + 16) <= (unsigned __int16)(v402 + 1))
    {
LABEL_498:
      v424 = &v288[64 * v403];
      unsigned int v425 = (unsigned __int16)(*((_WORD *)v424 + 16) - *((_DWORD *)v288 + 8));
      if (v425 >= *((_DWORD *)v288 + 9)) {
        goto LABEL_505;
      }
      do
      {
        unsigned int v426 = __s[v425];
        unsigned int v427 = (v426 < 0x21) & (0x100002600uLL >> v426);
        unsigned int v425 = (unsigned __int16)(utf8_determineUTF8CharLength(v426) + v425);
      }
      while (v427 == 1 && v425 < *((_DWORD *)v288 + 9));
      if (v427)
      {
LABEL_505:
        if (*(_DWORD *)v424 == 1)
        {
          uint64_t v429 = v402 + 1;
          uint64_t v401 = (uint64_t)v628;
          unsigned int v430 = *((unsigned __int16 *)v628 + 8);
          if (v429 < v430)
          {
            memmove(&v288[64 * v403], &v288[64 * v429], (uint64_t)(int)(v430 + ~v402) << 6);
            LOWORD(v430) = *((_WORD *)v628 + 8);
          }
          unsigned __int16 v431 = v430 - 1;
          *((_WORD *)v628 + 8) = v430 - 1;
          goto LABEL_512;
        }
        *(_DWORD *)&v288[64 * v403 + 20] = 999;
      }
      uint64_t v401 = (uint64_t)v628;
      goto LABEL_511;
    }
    uint64_t v407 = (unsigned __int16)(v402 + 1);
    BOOL v408 = 1;
    while (2)
    {
      v409 = &v288[64 * v407];
      if (*((_DWORD *)v409 + 5) == 36)
      {
        v410 = (const char *)*((void *)v409 + 5);
        if (v410)
        {
          v411 = marker_getMarkerArgStr(2u);
          BOOL v408 = strcmp(v410, v411) == 0;
          int v412 = 1;
          goto LABEL_478;
        }
        int v412 = 1;
LABEL_481:
        uint64_t v413 = v402;
        v414 = &v288[64 * (unint64_t)v402];
        int v415 = *((_DWORD *)v414 + 8);
        int v416 = *((_DWORD *)v288 + 8);
        v417 = &v288[64 * v407 + 32];
        unsigned int v418 = (unsigned __int16)(v415 - v416);
        if (v418 >= *(_DWORD *)v417 - v416)
        {
LABEL_490:
          v422 = &v288[64 * v407];
          int v423 = *((_DWORD *)v422 + 7) + *((_DWORD *)v414 + 7);
          *((_DWORD *)v422 + 6) = *((_DWORD *)v414 + 6);
          *((_DWORD *)v422 + 7) = v423;
          *(_DWORD *)v417 = v415;
          *((_DWORD *)v422 + 9) += *((_DWORD *)v414 + 9);
          if (*(_DWORD *)v414 == 1)
          {
            uint64_t v401 = (uint64_t)v628;
            memmove(v414, &v288[64 * (unint64_t)(v402 + 1)], (uint64_t)(*((unsigned __int16 *)v628 + 8) + ~v402) << 6);
            BOOL v408 = 0;
            --*((_WORD *)v628 + 8);
            unsigned __int16 v402 = v407;
          }
          else
          {
            BOOL v408 = 0;
            *(_DWORD *)&v288[64 * v413 + 20] = 999;
            unsigned __int16 v402 = v407;
            uint64_t v401 = (uint64_t)v628;
          }
        }
        else
        {
          int v618 = v412;
          do
          {
            unsigned int v419 = __s[v418];
            unsigned int v420 = (v419 < 0x21) & (0x100002600uLL >> v419);
            unsigned int v418 = (unsigned __int16)(utf8_determineUTF8CharLength(v419) + v418);
          }
          while (v420 == 1 && v418 < *(_DWORD *)v417 - *((_DWORD *)v288 + 8));
          if (v420)
          {
            int v415 = *((_DWORD *)v414 + 8);
            int v412 = v618;
            uint64_t v413 = v402;
            goto LABEL_490;
          }
          BOOL v408 = 0;
          uint64_t v401 = (uint64_t)v628;
          int v412 = v618;
        }
      }
      else
      {
        int v412 = 0;
LABEL_478:
        if (!v408) {
          goto LABEL_481;
        }
      }
      if (!v412 && ++v407 < (unint64_t)*(unsigned __int16 *)(v401 + 16)) {
        continue;
      }
      break;
    }
    if (!v412)
    {
      uint64_t v403 = v402;
      goto LABEL_498;
    }
LABEL_511:
    unsigned __int16 v431 = *(_WORD *)(v401 + 16);
LABEL_512:
    if (++v402 < v431) {
      continue;
    }
    break;
  }
  if (v431 >= 2u)
  {
    uint64_t v432 = 1;
    unsigned __int16 v400 = 1;
    while (1)
    {
      v433 = &v288[64 * v432];
      if (*((_DWORD *)v433 + 5) == 36)
      {
        unsigned __int16 v434 = v432 - 1;
        if (v432 != 1)
        {
          while (1)
          {
            v435 = &v288[64 * (unint64_t)v434];
            if (*((_DWORD *)v435 + 5) == 36) {
              break;
            }
            if (!--v434) {
              goto LABEL_521;
            }
          }
          if (!strcmp(*(const char **)&v288[64 * v432 + 40], *((const char **)v435 + 5)))
          {
            if (*(_DWORD *)v433) {
              goto LABEL_522;
            }
            *((_DWORD *)v433 + 5) = 999;
          }
        }
      }
LABEL_521:
      v436 = &v288[64 * (unint64_t)v400];
      long long v437 = *(_OWORD *)v433;
      long long v438 = *((_OWORD *)v433 + 1);
      long long v439 = *((_OWORD *)v433 + 3);
      *((_OWORD *)v436 + 2) = *((_OWORD *)v433 + 2);
      *((_OWORD *)v436 + 3) = v439;
      *(_OWORD *)v436 = v437;
      *((_OWORD *)v436 + 1) = v438;
      ++v400;
      unsigned __int16 v431 = *(_WORD *)(v401 + 16);
LABEL_522:
      if (++v432 >= (unint64_t)v431) {
        goto LABEL_529;
      }
    }
  }
  unsigned __int16 v400 = 1;
LABEL_529:
  *(_WORD *)(v401 + 16) = v400;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceAfterPhoneticMarkers()", 1, 0, 0);
  unint64_t v440 = *(unsigned __int16 *)(v637 + 16);
  uint64_t v623 = *(void *)(a1 + 16);
  if (v440 < 2)
  {
    long long v19 = __s;
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), v623, *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceBeforeTNMarkers()", 1, 0, 0);
  }
  else
  {
    uint64_t v441 = (uint64_t)__s;
    int v442 = strlen(__s);
    v443 = v288 + 160;
    uint64_t v444 = 2;
    uint64_t v445 = 1;
    v598 = v288;
    do
    {
      uint64_t v612 = v444;
      v619 = v443;
      uint64_t v607 = v445 + 1;
      if (v445 + 1 < v440 && *(_DWORD *)&v288[64 * v445 + 20] == 34)
      {
        v446 = v443;
        while (1)
        {
          int v447 = *(_DWORD *)&v288[64 * v444 + 20];
          if (v447 == 21)
          {
            v448 = &v288[64 * v444 + 32];
            uint64_t v449 = (unsigned __int16)(*(_DWORD *)v448 - *((_DWORD *)v288 + 8));
            int v450 = (unsigned __int16)v442 - v449;
            if ((unsigned __int16)v442 <= v449) {
              break;
            }
            unsigned int v451 = *(unsigned __int8 *)(v441 + v449);
            BOOL v452 = v451 > 0x20;
            uint64_t v453 = (1 << v451) & 0x100002600;
            if (!v452 && v453 != 0) {
              break;
            }
            int v455 = v442;
            uint64_t v456 = heap_Realloc(*(uint64_t **)(v623 + 8), v441, (unsigned __int16)v442 + 2);
            if (!v456)
            {
LABEL_622:
              uint64_t v65 = 2370838538;
              goto LABEL_284;
            }
            uint64_t v441 = v456;
            uint64_t v457 = v456;
            v458 = (void *)(v456 + (v449 + 1));
            v459 = (unsigned char *)(v457 + v449);
            memmove(v458, v459, v450);
            unsigned char *v459 = 32;
            int v442 = v455 + 1;
            *(unsigned char *)(v457 + (unsigned __int16)(v455 + 1)) = 0;
            v460 = v446;
            unint64_t v461 = v444;
            v288 = v598;
            do
            {
              if (*(_DWORD *)v448 < *(_DWORD *)v460) {
                ++*(_DWORD *)v460;
              }
              ++v461;
              v460 += 64;
            }
            while (v461 < v440);
            ++*((_DWORD *)v598 + 9);
            int v447 = 21;
          }
          if (++v444 < v440)
          {
            v446 += 64;
            if (v447 != 21) {
              continue;
            }
          }
          break;
        }
      }
      uint64_t v444 = v612 + 1;
      v443 = v619 + 64;
      uint64_t v445 = v607;
    }
    while (v607 != v440);
    long long v19 = (const char *)v441;
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceBeforeTNMarkers()", 1, 0, 0);
  }
  uint64_t v462 = *(void *)(a1 + 16);
  uint64_t v463 = *(void *)(a1 + 24);
  unsigned __int16 v464 = strlen(v19);
  *(void *)&long long v641 = 0;
  uint64_t v465 = datac_RequestBlock(v463, 1021, 1u, &v641);
  uint64_t v65 = v465;
  if ((v465 & 0x80000000) != 0) {
    goto LABEL_527;
  }
  unsigned int v466 = *(unsigned __int16 *)(v641 + 16);
  if (!*(_WORD *)(v641 + 16) || (uint64_t v467 = *(void *)(v641 + 8), *(_DWORD *)(v467 + 20) != 0x4000))
  {
    uint64_t v65 = 2370838528;
    goto LABEL_527;
  }
  if (v466 <= 1)
  {
    v600 = (char *)v19;
  }
  else
  {
    unsigned __int16 v613 = v464;
    uint64_t v624 = v463;
    uint64_t v586 = v462;
    unsigned int v583 = v465;
    uint64_t v468 = 0;
    unint64_t v469 = 1;
    uint64_t v470 = 96;
    __s = (char *)v19;
    uint64_t v471 = (uint64_t)v19;
    do
    {
      uint64_t v472 = v467 + (v469 << 6);
      int v475 = *(_DWORD *)(v472 + 32);
      v473 = (_DWORD *)(v472 + 32);
      __int16 v474 = v475;
      int v476 = *(_DWORD *)(v467 + 32);
      LOWORD(v477) = v475 - v476;
      int v478 = *(v473 - 3);
      if (v478 == 7)
      {
        unsigned int v477 = (unsigned __int16)v477;
        BOOL v479 = *(_DWORD *)(v467 + (v469 << 6) + 40) == 16;
      }
      else
      {
        BOOL v479 = v478 == 21;
        unsigned int v477 = (unsigned __int16)v477;
      }
      BOOL v480 = !v479 || v477 == 0;
      if (!v480 && *(unsigned char *)(v471 + v477 - 1) != 32 && *(unsigned char *)(v471 + v477) != 32)
      {
        uint64_t v588 = v468;
        uint64_t v590 = v470;
        unsigned int v629 = v477;
        uint64_t v481 = v477;
        uint64_t v482 = v468;
        do
        {
          if (!v482) {
            break;
          }
          int v483 = *(_DWORD *)(v467 + v482 + 20);
          if (v483 == 34) {
            goto LABEL_618;
          }
          v482 -= 64;
        }
        while (v483 != 21);
        uint64_t v608 = v467;
        uint64_t v484 = heap_Realloc(*(uint64_t **)(v586 + 8), v471, v613 + 2);
        if (v484) {
          uint64_t v471 = v484;
        }
        v599 = (char *)v471;
        if (!v484) {
          goto LABEL_622;
        }
        uint64_t v485 = v484;
        v486 = (unsigned char *)(v484 + v481);
        memmove((void *)(v484 + v629 + 1), v486, (int)(v613 - v629));
        int v620 = 0;
        unsigned char *v486 = 32;
        *(unsigned char *)(v485 + (unsigned __int16)(v613 + 1)) = 0;
        if ((unsigned __int16)(v613 + 1) > (unsigned __int16)(v629 + 1))
        {
          uint64_t v487 = 0;
          do
          {
            if (*(unsigned char *)(v471 + (unsigned __int16)(v629 + 1) + v487) == 32) {
              break;
            }
            ++v487;
          }
          while ((unsigned __int16)(v613 - v474 + v476) != (unsigned __int16)v487);
          int v620 = v487;
        }
        if (v469 < (unsigned __int16)v466)
        {
          uint64_t v488 = (unsigned __int16)v466;
          v489 = (_DWORD *)(v608 + v590);
          do
          {
            if (*v489 >= *v473) {
              ++*v489;
            }
            --v488;
            v489 += 16;
          }
          while (v469 != v488);
        }
        uint64_t v467 = v608;
        ++*(_DWORD *)(v608 + 36);
        uint64_t v490 = 1;
        unsigned int v491 = v629;
        do
        {
          if ((unsigned __int16)v490 >= (unsigned __int16)v466) {
            break;
          }
          unint64_t v492 = (unsigned __int16)v490;
          int v493 = *(_DWORD *)(v467 + ((unint64_t)(unsigned __int16)v490 << 6) + 20);
          while (1)
          {
            if (v493 != 1) {
              goto LABEL_616;
            }
            unsigned int v494 = *(_DWORD *)(v467 + 32) + v491;
            v495 = (unsigned int *)(v467 + 32 + (v492 << 6));
            unsigned int v496 = *v495;
            if (v494 <= *v495) {
              goto LABEL_616;
            }
            uint64_t v497 = v467 + (v492 << 6);
            int v499 = *(_DWORD *)(v497 + 36);
            v498 = (_DWORD *)(v497 + 36);
            unsigned int v500 = v499 + v496 - v494;
            if (v499 + v496 <= v494) {
              break;
            }
            uint64_t v501 = v490;
            unint64_t v502 = (unsigned __int16)v490;
            if ((unsigned __int16)v490 >= (unsigned __int16)v466) {
              goto LABEL_594;
            }
            v503 = (unsigned int *)(v467 + ((unint64_t)(unsigned __int16)v490 << 6) + 32);
            unsigned __int16 v504 = v490;
            while (*(v503 - 3) != 21 || *v503 <= v496)
            {
              ++v504;
              v503 += 16;
              if ((unsigned __int16)v466 == v504) {
                goto LABEL_594;
              }
            }
            if (!v504) {
              goto LABEL_594;
            }
            uint64_t v518 = v467 + ((unint64_t)v504 << 6);
            v520 = *(const char **)(v518 + 40);
            v519 = (char **)(v518 + 40);
            uint64_t v609 = v467;
            v521 = marker_getMarkerArgStr(3u);
            int v522 = strcmp(v520, v521);
            uint64_t v467 = v609;
            if (!v522) {
              goto LABEL_614;
            }
            v593 = *v519;
            v523 = marker_getMarkerArgStr(4u);
            int v524 = strncmp(v593, v523, 6uLL);
            uint64_t v467 = v609;
            if (!v524) {
              goto LABEL_614;
            }
            v594 = *v519;
            v525 = marker_getMarkerArgStr(6u);
            int v526 = strcmp(v594, v525);
            uint64_t v467 = v609;
            if (!v526) {
              goto LABEL_614;
            }
            v595 = *v519;
            v527 = marker_getMarkerArgStr(7u);
            int v528 = strcmp(v595, v527);
            uint64_t v467 = v609;
            if (!v528) {
              goto LABEL_614;
            }
            v596 = *v519;
            v529 = marker_getMarkerArgStr(8u);
            int v530 = strcmp(v596, v529);
            uint64_t v467 = v609;
            if (!v530) {
              goto LABEL_614;
            }
            v531 = *v519;
            v532 = marker_getMarkerArgStr(5u);
            int v533 = strcmp(v531, v532);
            uint64_t v467 = v609;
            if (v533)
            {
LABEL_594:
              uint64_t v490 = v501;
              if (v469 > v502)
              {
                v505 = (unsigned int *)(v467 + (v502 << 6) + 32);
                while (1)
                {
                  unsigned int v506 = *v505;
                  v505 += 16;
                  if (v506 >= *(_DWORD *)(v467 + (v469 << 6) + 32)) {
                    break;
                  }
                  if (v469 == ++v502)
                  {
                    unint64_t v502 = v469;
                    break;
                  }
                }
                uint64_t v490 = v502;
              }
              unsigned int v583 = datac_RequestBlock(v624, 1021, (unsigned __int16)(*(_WORD *)(v641 + 16) + 1), &v641);
              if ((v583 & 0x80000000) != 0)
              {
                long long v19 = __s;
LABEL_652:
                uint64_t v65 = v583;
                goto LABEL_527;
              }
              uint64_t v507 = *(void *)(v641 + 8);
              unint64_t v502 = (unsigned __int16)v490;
              v508 = (_OWORD *)(v507 + ((unint64_t)(unsigned __int16)v490 << 6));
              memmove((void *)(v507 + ((unint64_t)((unsigned __int16)v490 + 1) << 6)), v508, (uint64_t)((unsigned __int16)v466 - (unsigned __int16)v490) << 6);
              uint64_t v467 = v507;
              v509 = (long long *)(v507 + (v492 << 6));
              long long v510 = *v509;
              long long v511 = v509[1];
              long long v512 = v509[3];
              v508[2] = v509[2];
              v508[3] = v512;
              _OWORD *v508 = v510;
              v508[1] = v511;
              LOWORD(v466) = *(_WORD *)(v641 + 16) + 1;
              *(_WORD *)(v641 + 16) = v466;
              unsigned int v513 = *((_DWORD *)v509 + 9);
              BOOL v42 = v513 >= v500;
              unsigned int v514 = v513 - v500;
              if (!v42) {
                unsigned int v514 = 0;
              }
              *((_DWORD *)v509 + 9) = v514;
              int v516 = *((_DWORD *)v509 + 6);
              unsigned int v515 = *((_DWORD *)v509 + 7);
              BOOL v42 = v515 >= v500;
              unsigned int v517 = v515 - v500;
              if (!v42) {
                unsigned int v517 = 0;
              }
              *((_DWORD *)v509 + 7) = v517;
              *((_DWORD *)v508 + 8) = *(_DWORD *)(v507 + ((v469 + 1) << 6) + 32);
              *((_DWORD *)v508 + 9) = v620;
              *((_DWORD *)v508 + 6) = v516 + v517;
              *((_DWORD *)v508 + 7) = v500;
              unsigned int v491 = v629;
            }
            else
            {
LABEL_614:
              unsigned int v491 = v629;
              _DWORD *v498 = *(_DWORD *)(v467 + 32) + v629 - *v495;
              uint64_t v490 = v501;
            }
            int v493 = *(_DWORD *)(v467 + (v502 << 6) + 20);
            unint64_t v492 = v502;
          }
          unsigned int v491 = v629;
LABEL_616:
          unsigned int v534 = *(_DWORD *)(v467 + ((unint64_t)(unsigned __int16)(v490 + 1) << 6) + 32);
          uint64_t v490 = (v490 + 1);
        }
        while (v534 <= *(_DWORD *)(v467 + 32) + v491);
        ++v613;
        uint64_t v471 = (uint64_t)v599;
LABEL_618:
        uint64_t v468 = v588;
        uint64_t v470 = v590;
      }
      ++v469;
      v468 += 64;
      v470 += 64;
    }
    while (v469 < (unsigned __int16)v466);
    v600 = (char *)v471;
    long long v19 = (const char *)v471;
    uint64_t v65 = v583;
    if ((v583 & 0x80000000) != 0) {
      goto LABEL_527;
    }
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_HandleExtendedToi()", 0, 0, 0);
  uint64_t v535 = v637;
  uint64_t v536 = *(void *)(a1 + 24);
  v630 = *(char **)(a1 + 16);
  *(void *)&long long v641 = 0;
  uint64_t v537 = *(void *)(v637 + 8);
  unsigned int v538 = datac_RequestBlock(v536, 1012, 1u, &v641);
  if ((v538 & 0x80000000) != 0)
  {
    unsigned int v605 = v538;
    goto LABEL_657;
  }
  __sc = (char *)v535;
  unsigned int v539 = *(unsigned __int16 *)(v535 + 16);
  if (v539 < 2)
  {
LABEL_644:
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_MarkerPostProcessing()", 1, 0, 0);
    uint64_t v557 = wordpar_loc_MarkerPostProcessing(*(void *)(a1 + 24), v637);
    if ((v557 & 0x80000000) == 0)
    {
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_InsertNLUMarkers()", 1, 0, 0);
      uint64_t v557 = wordpar_loc_InsertNLUMarkers(a1, v637);
      if ((v557 & 0x80000000) == 0)
      {
        uint64_t v561 = *(void *)(v637 + 8);
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Write2DB) \"%s\"", v558, v559, v560, (uint64_t)v600);
        marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"at end()", 1, 0, 0);
        size_t v562 = strlen(v600);
        if (!v562)
        {
          if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
            log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 34, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=depes",
          }
              0,
              0);
          int v564 = 0;
          goto LABEL_662;
        }
        uint64_t v557 = (*(uint64_t (**)(uint64_t, uint64_t, char *, void))(*(void *)(a1 + 32) + 104))(v602, v603, v600, (v562 + 1));
        if ((v557 & 0x80000000) == 0)
        {
          if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32)))
          {
            int v563 = strlen(v600);
            log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 34, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=depes",
              (uint64_t)v600,
              (v563 + 1));
          }
          int v564 = 1;
LABEL_662:
          *(_WORD *)(v639 + 16) = 0;
          uint64_t v65 = wordpar_loc_writeMarkersToOutputStream(a1, v604, v601, v561, v637, v564);
          if ((v65 & 0x80000000) == 0)
          {
            if (*(_WORD *)(a1 + 160))
            {
              uint64_t v569 = *(void *)(v638 + 8);
              if (v569)
              {
                uint64_t v570 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v569, *(unsigned __int16 *)(v638 + 2) * (unint64_t)*(unsigned __int16 *)(a1 + 160));
                if (v570)
                {
                  uint64_t v571 = v638;
                  *(void *)(v638 + 8) = v570;
                  __int16 v572 = *(_WORD *)(a1 + 160);
                  *(_WORD *)(v571 + 16) = v572;
                  *(_WORD *)(v571 + 18) = v572;
                }
                else
                {
                  uint64_t v65 = 2370838538;
                }
              }
            }
          }
          goto LABEL_655;
        }
      }
    }
    uint64_t v65 = v557;
LABEL_655:
    long long v19 = v600;
    goto LABEL_527;
  }
  int v540 = 1;
  LOWORD(v541) = 1;
  while (1)
  {
    uint64_t v542 = (unsigned __int16)v541;
    unint64_t v543 = v537 + ((unint64_t)(unsigned __int16)v541 << 6);
    if (*(_DWORD *)(v543 + 20) == 34)
    {
      v545 = (uint64_t *)(v543 + 48);
      uint64_t v544 = *(void *)(v543 + 48);
      if (v544) {
        break;
      }
    }
LABEL_643:
    LOWORD(v541) = v541 + 1;
    int v540 = (unsigned __int16)v541;
    if ((unsigned __int16)v541 >= (unsigned __int16)v539) {
      goto LABEL_644;
    }
  }
  int v546 = *(_DWORD *)(v537 + ((unint64_t)(unsigned __int16)v541 << 6) + 32);
  int v547 = *(_DWORD *)(v537 + 32);
  uint64_t v548 = (v540 + 1);
  LOWORD(v541) = v540 + 1;
  if ((unsigned __int16)v539 > (unsigned __int16)(v540 + 1))
  {
    uint64_t v541 = (unsigned __int16)(v540 + 1);
    v549 = (int *)(v537 + 20 + (v541 << 6));
    while (1)
    {
      int v550 = *v549;
      v549 += 16;
      if (v550 == 21) {
        break;
      }
      if ((unsigned __int16)v539 == ++v541) {
        goto LABEL_656;
      }
    }
  }
  if ((unsigned __int16)v541 != (unsigned __int16)v539)
  {
    if (*(_DWORD *)(v537 + (v542 << 6) + 56))
    {
      heap_Free(*((void **)v630 + 1), v544);
      uint64_t *v545 = 0;
      LOWORD(v539) = *((_WORD *)__sc + 8);
    }
    else
    {
      unsigned __int16 v551 = v546 - v547;
      __int16 v614 = v546 - v547;
      v597 = (char *)(v537 + ((unint64_t)(unsigned __int16)v541 << 6));
      int v610 = *((_DWORD *)v597 + 8) - v547;
      unsigned __int16 v552 = strlen(v600);
      memmove(&v600[v551], &v600[(unsigned __int16)v610], v552 - (unsigned __int16)v610 + 1);
      int v553 = strlen(v600);
      *(_DWORD *)(v537 + 36) = v553;
      wordpar_loc_adjustMarkerPositions(*((unsigned __int16 *)__sc + 8), v537, 1u, (unsigned __int16)v610, (unsigned __int16)v553, (__int16)(v614 - v610));
      heap_Free(*((void **)v630 + 1), *v545);
      uint64_t *v545 = 0;
      int v554 = *((unsigned __int16 *)__sc + 8);
      if (v548 != v554)
      {
        memmove((void *)v543, (const void *)(v537 + (v548 << 6)), (uint64_t)(v554 - v540) << 6);
        LOWORD(v554) = *((_WORD *)__sc + 8);
      }
      unsigned __int16 v555 = v554 - 1;
      *((_WORD *)__sc + 8) = v555;
      uint64_t v556 = (unsigned __int16)v541 + 1;
      if (v556 != v555)
      {
        memmove(v597, (const void *)(v537 + (v556 << 6)), (uint64_t)(v555 - (unsigned __int16)v541) << 6);
        unsigned __int16 v555 = *((_WORD *)__sc + 8);
      }
      LOWORD(v539) = v555 - 1;
      *((_WORD *)__sc + 8) = v539;
    }
    goto LABEL_643;
  }
LABEL_656:
  heap_Free(*((void **)v630 + 1), v544);
  uint64_t *v545 = 0;
  log_OutPublic(*((void *)v630 + 4), (uint64_t)"PP_WORD_PARSER", 1929, 0, v565, v566, v567, v568, v574);
LABEL_657:
  long long v19 = v600;
  uint64_t v65 = v605;
LABEL_527:
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v19);
  return v65;
}

uint64_t wordpar_GetWParserType(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 2370838535;
  }
  uint64_t result = 0;
  *a2 = *(_DWORD *)(a1 + 164);
  return result;
}

uint64_t wordpar_loc_adjustMarkerPositions(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  if (a3 < result)
  {
    uint64_t v6 = (_DWORD *)(a2 + ((unint64_t)a3 << 6) + 36);
    unint64_t v7 = result - (unint64_t)a3;
    do
    {
      unsigned int v8 = *(v6 - 1);
      int v9 = *(_DWORD *)(a2 + 32);
      unsigned int v10 = v9 + a5;
      if (v8 <= v9 + a4 || v8 >= v10)
      {
        if (v8 >= v10)
        {
          *(v6 - 1) = v8 + a6;
        }
        else if (*(v6 - 4) == 1)
        {
          unsigned int v12 = *v6 + v8;
          if (v12 > *(_DWORD *)(a2 + 36) + v9 && v12 != -a6) {
            *v6 += a6;
          }
        }
      }
      else
      {
        *(v6 - 1) = v9 + a4;
      }
      v6 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t GetCfgParamVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5)
{
  *a5 = "no";
  __int16 __c_1 = -1;
  unsigned __int8 __c = 0;
  unsigned int v10 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v6 & 0x80000000) == 0 && __c_1)
  {
    unint64_t v7 = *v10;
    unsigned int v8 = strchr(*v10, __c);
    if (v8)
    {
      *unsigned int v8 = 0;
      unint64_t v7 = *v10;
    }
    *a5 = v7;
  }
  return v6;
}

uint64_t wordpar_loc_asian_deleteStrAddMarker(uint64_t a1, char *__s, const char *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = a4;
  uint64_t v57 = a4;
  unsigned __int16 v8 = strlen(__s);
  unsigned __int16 v56 = v8;
  unsigned __int16 v9 = strlen(a3);
  unsigned __int16 v10 = v9;
  uint64_t v11 = *(unsigned int **)(v5 + 8);
  if (v8)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = v9;
    unsigned int v53 = v8;
    unsigned __int16 v16 = v8;
    unsigned __int16 v49 = v8;
    unsigned __int16 v54 = v9;
    do
    {
      if (!__s[(unsigned __int16)v12]) {
        break;
      }
      if (__s[(unsigned __int16)v12] != *a3) {
        goto LABEL_19;
      }
      uint64_t v17 = v12;
      if (!v15) {
        goto LABEL_12;
      }
      uint64_t v18 = 0;
      LODWORD(v17) = v12;
      do
      {
        int v19 = __s[(unsigned __int16)v17];
        int v20 = a3[v18];
        uint64_t v17 = (v17 + 1);
        ++v18;
      }
      while (v19 == v20 && v15 > (unsigned __int16)v18);
      if (v19 == v20)
      {
LABEL_12:
        uint64_t v22 = v11;
        int v23 = v13;
        uint64_t v24 = datac_RequestBlock(a1, 1021, (unsigned __int16)(*(_WORD *)(v5 + 16) + 1), &v57);
        uint64_t v14 = v24;
        if ((v24 & 0x80000000) != 0) {
          goto LABEL_46;
        }
        uint64_t v5 = v57;
        uint64_t v11 = *(unsigned int **)(v57 + 8);
        int v25 = v23;
        unsigned int v26 = (unsigned __int16)(v12 - v23 * v10);
        uint64_t v27 = *(unsigned __int16 *)(v57 + 16);
        uint64_t v28 = &v11[16 * v27];
        unsigned int v29 = v11[8];
        if (v27 != 1 && (unsigned __int16)(*(v28 - 8) - v29) > v26)
        {
          if (v27 < 2)
          {
            LOWORD(v27) = 0;
          }
          else if (v26 >= (unsigned __int16)(*((_WORD *)v11 + 48) - v29))
          {
            unsigned __int16 v33 = 1;
            while (v27 > ++v33)
            {
              uint64_t v34 = v33;
              if (v26 < (unsigned __int16)(LOWORD(v11[16 * (unint64_t)v33 + 8]) - v29))
              {
                unsigned int v47 = v24;
                int v32 = v33;
                goto LABEL_30;
              }
            }
            unsigned __int16 v16 = v49;
          }
          else
          {
            unsigned int v47 = v24;
            int v32 = 1;
            unsigned __int16 v33 = 1;
            uint64_t v34 = 1;
LABEL_30:
            __srca = &v11[16 * v34];
            uint64_t v37 = *(unsigned int **)(v57 + 8);
            int LastPosRef = wordpar_loc_asian_getLastPosRef(v11, v27, v26, v33, 1);
            memmove(&v37[16 * (unint64_t)(v32 + 1)], __srca, (uint64_t)((int)v27 - v32) << 6);
            uint64_t v11 = v37;
            uint64_t v38 = *(void *)(v57 + 8) + (v34 << 6);
            *(_DWORD *)uint64_t v38 = 1;
            *(_DWORD *)(v38 + 20) = 36;
            *(_DWORD *)(v38 + 24) = LastPosRef;
            *(_DWORD *)(v38 + 28) = 0;
            unsigned int v39 = v37[8] + v26;
            *(_WORD *)(v38 + 16) = 0;
            *(void *)(v38 + 8) = 0;
            *(_DWORD *)(v38 + 36) = 0;
            *(_DWORD *)(v38 + 40) = a5;
            *(void *)(v38 + 48) = 0;
            *(_DWORD *)(v38 + 32) = v39;
            int v40 = (_DWORD *)(v38 + 32);
            uint64_t v5 = v57;
            LOWORD(v27) = *(_WORD *)(v57 + 16);
            if ((_WORD)v27)
            {
              uint64_t v41 = (unsigned __int16)(v27 + 1) <= 2u ? 2 : (unsigned __int16)(v27 + 1);
              BOOL v42 = v11 + 24;
              uint64_t v43 = v41 - 1;
              unsigned __int16 v16 = v49;
              int v25 = v23;
              do
              {
                if (*v42 > *v40) {
                  *v42 -= v15;
                }
                v42 += 16;
                --v43;
              }
              while (v43);
              uint64_t v14 = v47;
            }
            else
            {
              unsigned __int16 v16 = v49;
              uint64_t v14 = v47;
              int v25 = v23;
            }
          }
        }
        else
        {
          v28[5] = 36;
          *uint64_t v28 = 1;
          if (v27 == 1)
          {
            int v31 = v11[7] + v11[6];
          }
          else
          {
            uint64_t v35 = v24;
            __src = v11;
            int v31 = wordpar_loc_asian_getLastPosRef(v11, v27, v26, (unsigned __int16)(v27 - 1), 1);
            uint64_t v11 = __src;
            int v25 = v23;
            uint64_t v14 = v35;
          }
          int v36 = &v11[16 * v27];
          v36[6] = v31;
          v36[7] = 0;
          v36[8] = v29 + v26;
          v36[9] = 0;
          *((_WORD *)v36 + 8) = 0;
          *((void *)v36 + 1) = 0;
          v36[10] = a5;
          *((void *)v36 + 6) = 0;
          uint64_t v5 = v57;
          LOWORD(v27) = *(_WORD *)(v57 + 16);
        }
        *(_WORD *)(v5 + 16) = v27 + 1;
        v11[9] = v53;
        int v13 = v25 + 1;
        unsigned __int16 v10 = v54;
      }
      else
      {
LABEL_19:
        uint64_t v17 = (v12 + 1);
      }
      uint64_t v12 = v17;
    }
    while ((unsigned __int16)v17 < v16);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v22 = v11;
  int v44 = (unsigned __int8 *)a3;
  uint64_t v45 = v14;
  wordpar_loc_asian_adjustText(__s, v44, v10, &v56);
  uint64_t v14 = v45;
  unsigned __int16 v16 = v56;
LABEL_46:
  v22[9] = v16;
  return v14;
}

unsigned char *wordpar_loc_asian_deleteStr(uint64_t a1, char *__s, char *a3)
{
  unsigned __int16 v6 = strlen(__s);
  unsigned __int16 v24 = v6;
  unsigned __int16 v7 = strlen(a3);
  unsigned __int16 v8 = *(int **)(a1 + 8);
  if (v6)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    unsigned __int16 v11 = 0;
    do
    {
      if (!__s[(unsigned __int16)v10]) {
        break;
      }
      if (__s[(unsigned __int16)v10] == *a3)
      {
        if (!v7)
        {
          uint64_t v13 = v10;
LABEL_14:
          uint64_t v17 = *(unsigned __int16 *)(a1 + 16);
          if (v17 >= 2)
          {
            int v18 = v9 - v7 * v11;
            uint64_t v19 = v17 - 1;
            unsigned int v20 = 1;
            uint64_t v21 = v8 + 24;
            while (v18 >= (unsigned __int16)(LOWORD(v8[16 * (unint64_t)v20 + 8]) - v8[8]))
            {
              ++v20;
              v21 += 16;
              --v19;
              if (v20 >= v17) {
                goto LABEL_23;
              }
            }
            if (v20 < v17)
            {
              do
              {
                int v22 = *v21 - v7;
                if (v7 > (unsigned __int16)(*(_WORD *)v21 - v8[8])) {
                  int v22 = v8[8];
                }
                *uint64_t v21 = v22;
                v21 += 16;
                --v19;
              }
              while (v19);
            }
          }
LABEL_23:
          ++v11;
          goto LABEL_24;
        }
        uint64_t v12 = 0;
        LODWORD(v13) = v10;
        do
        {
          int v14 = __s[(unsigned __int16)v13];
          int v15 = a3[v12];
          uint64_t v13 = (v13 + 1);
          ++v12;
        }
        while (v14 == v15 && v7 > (unsigned __int16)v12);
        if (v14 == v15) {
          goto LABEL_14;
        }
      }
      uint64_t v13 = (v10 + 1);
LABEL_24:
      int v9 = (unsigned __int16)v13;
      uint64_t v10 = v13;
    }
    while ((unsigned __int16)v13 < v6);
  }
  uint64_t result = wordpar_loc_asian_adjustText(__s, (unsigned __int8 *)a3, v7, &v24);
  v8[9] = v24;
  return result;
}

uint64_t wordpar_loc_asian_replaceStrWithStr(uint64_t a1, char *__s, const char *a3, int a4)
{
  uint64_t result = strlen(__s);
  uint64_t v26 = a1;
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = (unsigned __int16)result;
  if ((_WORD)result)
  {
    uint64_t result = strlen(a3);
    unint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = (__int16)(result - 1);
    size_t v25 = (unsigned __int16)result;
    do
    {
      int v14 = &__s[(unsigned __int16)v11];
      if (!*v14 || a4 == 1 && (_WORD)v11) {
        break;
      }
      if (*v14 == 16)
      {
        unsigned __int16 v15 = v13 + strlen(__s);
        memmove(&__s[v13 + 1 + v11], &__s[v11 + 1], v10 - v11);
        uint64_t result = (uint64_t)memcpy(&__s[(unsigned __int16)v11], a3, v25);
        __s[v15] = 0;
        unint64_t v16 = *(unsigned __int16 *)(v26 + 16);
        if (v16 >= 2)
        {
          int v17 = 1;
          while (1)
          {
            uint64_t v18 = (unsigned __int16)v17;
            uint64_t v19 = (int *)(v9 + 32 + ((unint64_t)(unsigned __int16)v17 << 6));
            int v20 = *v19;
            int v21 = *v19 - *(_DWORD *)(v9 + 32);
            if ((_WORD)v11 && (unsigned __int16)v11 == (unsigned __int16)(*(_WORD *)v19 - *(_WORD *)(v9 + 32)))
            {
              do
              {
                if (*(_DWORD *)(v9 + (v18 << 6) + 20) != 36) {
                  break;
                }
                *uint64_t v19 = v20 + 1;
                uint64_t v18 = (unsigned __int16)++v17;
                uint64_t v19 = (int *)(v9 + 32 + ((unint64_t)(unsigned __int16)v17 << 6));
                int v20 = *v19;
                LOWORD(v21) = *v19 - *(_DWORD *)(v9 + 32);
              }
              while ((unsigned __int16)v11 == (unsigned __int16)v21);
            }
            if (v11 < (unsigned __int16)v21) {
              break;
            }
            if (v16 <= (unsigned __int16)++v17) {
              goto LABEL_19;
            }
          }
          if (v16 > (unsigned __int16)v17)
          {
            unsigned __int16 v22 = v17;
            int v23 = (_DWORD *)(v9 + 32 + ((unint64_t)(unsigned __int16)v17 << 6));
            unint64_t v24 = v16 - v22;
            do
            {
              *v23 += v13;
              v23 += 16;
              --v24;
            }
            while (v24);
          }
        }
LABEL_19:
        unsigned int v10 = v15;
        ++v12;
      }
      ++v11;
    }
    while (v10 > (unsigned __int16)v11);
  }
  *(_DWORD *)(v9 + 36) = v10;
  return result;
}

uint64_t wordpar_loc_asian_getLastPosRef(unsigned int *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5 = a1[6];
  if (a2 >= a4) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = a2;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = a1[8];
    if (a2 <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = a2;
    }
    uint64_t v10 = (v9 - 1);
    unsigned __int16 v11 = v9 - 1;
    int v12 = a1 + 24;
    unsigned int v13 = a1[8];
    while (a3 > (unsigned __int16)(v13 - v8))
    {
      if (v10 == v7) {
        goto LABEL_15;
      }
      unsigned int v13 = *v12;
      if (a3 <= (unsigned __int16)(*v12 - v8)) {
        break;
      }
      ++v7;
      v12 += 16;
      if (v6 == v7)
      {
        unsigned __int16 v11 = v6;
        goto LABEL_15;
      }
    }
    unsigned __int16 v11 = v7;
LABEL_15:
    if (v11)
    {
      uint64_t v14 = v11;
      if (a5 == 1
        && ((unsigned __int16 v15 = &a1[16 * (unint64_t)v11], v16 = v15[5], v16 != 41) ? (v17 = v16 == 1) : (v17 = 1), v17))
      {
        return v15[6];
      }
      else
      {
        return a1[16 * v14 + 7] + a1[16 * v14 + 6];
      }
    }
  }
  return v5;
}

unsigned char *wordpar_loc_asian_adjustText(unsigned char *result, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  unsigned __int16 v4 = *a4;
  if (*a4)
  {
    unsigned int v8 = result;
    int v9 = 0;
    int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t result = &v8[(unsigned __int16)v10];
      if (!*result) {
        return result;
      }
      if (*result == *a2)
      {
        if (!a3)
        {
          int v13 = v10;
LABEL_15:
          uint64_t result = memmove(result, &v8[v9 + a3], (int)(v4 - (v9 + a3) + 1));
          unsigned __int16 v4 = *a4 - a3;
          *a4 = v4;
          int v10 = v13 - a3;
          goto LABEL_16;
        }
        unint64_t v12 = 0;
        int v13 = v10;
        do
        {
          int v14 = v8[(unsigned __int16)v13];
          int v15 = a2[v12];
          ++v13;
          ++v12;
        }
        while (v14 == v15 && v12 < v11);
        if (v14 == v15) {
          goto LABEL_15;
        }
      }
      ++v10;
LABEL_16:
      int v9 = (unsigned __int16)v10;
    }
    while ((unsigned __int16)v10 < v4);
  }
  return result;
}

BOOL wordpar_loc_asian_isMarkerUnknown(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != 36) {
    return 0;
  }
  uint64_t v1 = *(const char **)(a1 + 40);
  MarkerArgint Str = marker_getMarkerArgStr(9u);
  return strcmp(v1, MarkerArgStr) == 0;
}

BOOL bed_marker_IsOfType(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v3 = *a1;
    int v4 = *(_DWORD *)(a2 + 20);
    if (*a1)
    {
      int v5 = 0;
      while (v4 != v3)
      {
        int v3 = a1[(unsigned __int16)++v5];
        if (!v3) {
          return v4 == v3;
        }
      }
      int v3 = *(_DWORD *)(a2 + 20);
    }
    return v4 == v3;
  }
  return v2;
}

BOOL bed_marker_IsToiOfType(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a2 + 20) == 7)
    {
      int v3 = *a1;
      int v4 = *(_DWORD *)(a2 + 40);
      if (*a1)
      {
        int v5 = 0;
        while (v4 != v3)
        {
          int v3 = a1[(unsigned __int16)++v5];
          if (!v3) {
            return v4 == v3;
          }
        }
        int v3 = *(_DWORD *)(a2 + 40);
      }
      return v4 == v3;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL bed_marker_IsToiNotOfType(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a2 + 20) == 7)
    {
      int v3 = *a1;
      int v4 = *(_DWORD *)(a2 + 40);
      if (*a1)
      {
        int v5 = 0;
        while (v4 != v3)
        {
          int v3 = a1[(unsigned __int16)++v5];
          if (!v3) {
            return v4 != v3;
          }
        }
        int v3 = *(_DWORD *)(a2 + 40);
      }
      return v4 != v3;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t bed_marker_IsAt(_WORD *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a1)
    {
      uint64_t result = 0;
      --*a1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t bed_marker_MapPosCur(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  int v13 = 0;
  uint64_t result = 2370838535;
  if (a1 && a3)
  {
    unsigned __int16 v12 = 0;
    *a3 = a2;
    LODWORD(result) = bed_GetpElem(a1, 0, &v13);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xF) {
        return 0;
      }
      else {
        return result;
      }
    }
    else
    {
      uint64_t result = bed_GetcElem(a1, &v12);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v7 = v12;
        if (!v12) {
          return 0;
        }
        unsigned int v8 = 0;
        int v9 = v13;
        do
        {
          unsigned int v10 = v9[8];
          if (v10 > a2) {
            break;
          }
          if (!*v9)
          {
            unsigned int v11 = v9[9] + v10;
            if (v11 <= a2 && (!v8 || v8[9] + v8[8] <= v11 && v8[7] + v8[6] <= (v9[7] + v9[6]))) {
              unsigned int v8 = v9;
            }
          }
          v9 += 16;
          --v7;
        }
        while (v7);
        if (v8)
        {
          uint64_t result = 0;
          *a3 += v8[7] + v8[6] - (v8[8] + v8[9]);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t bed_marker_InjectFixedRefMarker(uint64_t a1, void *a2)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = bed_GoForward(a1, (uint64_t (*)(uint64_t, unint64_t))bed_marker_HasGreaterOrEqualPosCur, (uint64_t)a2);
      if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
      {
        int v5 = bed_Insert(a1, a2, 1);
        return v5 & (v5 >> 31);
      }
    }
  }
  return result;
}

BOOL bed_marker_HasGreaterOrEqualPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    unsigned int v5 = *(_DWORD *)(a2 + 32);
    BOOL v6 = v4 > v5;
    if (v4 == v5) {
      BOOL v6 = *(_DWORD *)(a1 + 36) > *(_DWORD *)(a2 + 36);
    }
    return !v6;
  }
  return result;
}

uint64_t freeMERDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a1 + 88))
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] free MER definitions", a6, a7, a8, v13);
    uint64_t v9 = *(void *)(a1 + 96);
    if (v9)
    {
      if (*(_WORD *)(a1 + 88))
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if (*(void *)(v9 + v10 + 16))
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v9 + v10 + 16));
            uint64_t v9 = *(void *)(a1 + 96);
            *(void *)(v9 + v10 + 16) = 0;
          }
          if (*(void *)(v9 + v10 + 32))
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v9 + v10 + 32));
            uint64_t v9 = *(void *)(a1 + 96);
            *(void *)(v9 + v10 + 32) = 0;
          }
          if (*(void *)(v9 + v10 + 48))
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v9 + v10 + 48));
            uint64_t v9 = *(void *)(a1 + 96);
            *(void *)(v9 + v10 + 48) = 0;
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < *(unsigned __int16 *)(a1 + 88));
      }
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v9);
      *(void *)(a1 + 96) = 0;
    }
    *(_WORD *)(a1 + 88) = 0;
  }
  return 0;
}

uint64_t getMERDefs(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a1 + 88)) {
    freeMERDefs(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] get MER definitions", a6, a7, a8, v33);
  uint64_t v10 = *a4;
  *(_WORD *)(a1 + 88) = v10;
  uint64_t v11 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v10 << 6) | 1);
  *(void *)(a1 + 96) = v11;
  if (v11)
  {
    if (!*(_WORD *)(a1 + 88)) {
      return 0;
    }
    uint64_t v19 = 0;
    unsigned int v20 = 1;
    while (1)
    {
      __int16 v21 = 0;
      unsigned __int16 v22 = (_DWORD *)(*(void *)(a1 + 96) + (v19 << 6));
      *unsigned __int16 v22 = a4[v20];
      v22[1] = a4[v20 + 1];
      int v23 = a4[v20 + 2];
      v20 += 3;
      v22[14] = v23;
      while (1)
      {
        uint64_t v24 = a4[v20++];
        if (v24)
        {
          uint64_t v25 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (4 * v24) | 1);
          if (!v25) {
            goto LABEL_23;
          }
          uint64_t v26 = 0;
          do
          {
            int v27 = a4[v20++];
            *(_DWORD *)(v25 + v26) = v27;
            v26 += 4;
          }
          while (4 * v24 != v26);
        }
        else
        {
          uint64_t v25 = 0;
        }
        if (v21) {
          break;
        }
        uint64_t v30 = *(void *)(a1 + 96) + (v19 << 6);
        *(_WORD *)(v30 + 8) = v24;
        unsigned int v29 = (uint64_t *)(v30 + 16);
LABEL_17:
        *unsigned int v29 = v25;
        ++v21;
      }
      if (v21 == 1) {
        break;
      }
      if (v21 == 2)
      {
        uint64_t v31 = *(void *)(a1 + 96) + (v19 << 6);
        *(_WORD *)(v31 + 40) = v24;
        *(void *)(v31 + 48) = v25;
      }
      uint64_t result = 0;
      if (++v19 >= (unint64_t)*(unsigned __int16 *)(a1 + 88)) {
        return result;
      }
    }
    uint64_t v28 = *(void *)(a1 + 96) + (v19 << 6);
    *(_WORD *)(v28 + 24) = v24;
    unsigned int v29 = (uint64_t *)(v28 + 32);
    goto LABEL_17;
  }
  *(_WORD *)(a1 + 88) = 0;
LABEL_23:
  freeMERDefs(a1, v12, v13, v14, v15, v16, v17, v18);
  return 2370838538;
}

uint64_t freeSYMDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_WORD *)(a1 + 64)) {
    return 0;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] free SYM definitions", a6, a7, a8, v17);
  uint64_t v15 = *(void *)(a1 + 72);
  if (v15) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
  }
  *(_WORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = ssftriff_reader_ReleaseChunkData((void *)result, v15, v9, v10, v11, v12, v13, v14);
    if ((result & 0x80000000) == 0) {
      *(void *)(a1 + 40) = 0;
    }
  }
  return result;
}

uint64_t getSYMDefs(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v29 = a4;
  if (*(_WORD *)(a1 + 64)) {
    return 0;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] get SYM definitions", a6, a7, a8, v28);
  unsigned int v12 = a4[1] + 8;
  unsigned int v13 = v12 + *a4;
  uint64_t v14 = *(unsigned __int16 *)((char *)a4 + v13);
  *(_WORD *)(a1 + 64) = v14;
  uint64_t v15 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (8 * v14) | 1);
  *(void *)(a1 + 72) = v15;
  if (v15)
  {
    uint64_t v23 = *(unsigned __int16 *)(a1 + 64);
    if (*(_WORD *)(a1 + 64))
    {
      unsigned int v24 = v13 + 2;
      uint64_t v25 = (_DWORD *)(v15 + 4);
      do
      {
        int v26 = *(unsigned __int16 *)((char *)a4 + v24);
        int v27 = *(_DWORD *)((char *)a4 + v24 + 2);
        v24 += 6;
        *(v25 - 1) = v27;
        _DWORD *v25 = v26;
        v25 += 2;
        --v23;
      }
      while (v23);
    }
    uint64_t result = ssftriff_reader_DetachChunkData(a2, (uint64_t *)(a1 + 40), &v29, v18, v19, v20, v21, v22);
    if ((result & 0x80000000) == 0) {
      *(void *)(a1 + 80) = (char *)v29 + v12;
    }
  }
  else
  {
    freeSYMDefs(a1, v16, v17, v18, v19, v20, v21, v22);
    return 2370838538;
  }
  return result;
}

uint64_t wparser_ObjOpen2(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v15 = 2370838535;
  uint64_t v33 = 0;
  unsigned int v32 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v33) & 0x80000000) == 0)
  {
    *a5 = 0;
    uint64_t v24 = heap_Alloc(*(void *)(v33 + 8), 144);
    if (v24)
    {
      uint64_t v25 = v24;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_OWORD *)(v24 + 128) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(void *)uint64_t v24 = a1;
      *(void *)(v24 + 8) = a2;
      uint64_t v26 = v33;
      *(void *)(v24 + 16) = v33;
      *(void *)(v24 + 80) = 0;
      *(void *)(v24 + 88) = 0;
      *(void *)(v24 + 64) = 0;
      *(void *)(v24 + 72) = 0;
      *(void *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = a3;
      *(_DWORD *)(v24 + 56) = a4;
      *(void *)(v24 + 32) = a12;
      *(void *)(v24 + 96) = 0;
      *(void *)(v24 + 104) = a6;
      *(void *)(v24 + 112) = a7;
      *(void *)(v24 + 120) = a8;
      *(void *)(v24 + 128) = 0;
      *(_WORD *)(v24 + 138) = 512;
      if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"udctmaxlookuplen", &v32) & 0x80000000) == 0) {
        *(_WORD *)(v25 + 138) = v32;
      }
      *(_WORD *)(v25 + 136) = 512;
      if ((paramc_ParamGetUInt(*(void *)(v33 + 40), (uint64_t)"udctmaxdictretlen", &v32) & 0x80000000) == 0) {
        *(_WORD *)(v25 + 136) = v32;
      }
      *(_WORD *)(v25 + 140) = 1;
      if ((paramc_ParamGetUInt(*(void *)(v33 + 40), (uint64_t)"numberoutputtranscriptions", &v32) & 0x80000000) != 0)
      {
        __int16 v28 = *(_WORD *)(v25 + 140);
      }
      else
      {
        __int16 v28 = v32;
        *(_WORD *)(v25 + 140) = v32;
      }
      HIDWORD(v29) = *(_DWORD *)(v25 + 136);
      LODWORD(v29) = HIDWORD(v29);
      uint64_t v30 = utoin_ObjOpen(a1, a2, (uint64_t *)(v25 + 24), a6, a7, a8, a9, v27, a10, a11, a13, a14, a15, SHIWORD(v29), (v29 >> 16) >> 16, v28);
      if ((v30 & 0x80000000) != 0) {
        goto LABEL_15;
      }
      *(void *)&long long v34 = "SYMD";
      *((void *)&v34 + 1) = getSYMDefs;
      uint64_t v35 = freeSYMDefs;
      uint64_t v36 = v25;
      uint64_t v37 = "MERR";
      uint64_t v38 = getMERDefs;
      unsigned int v39 = freeMERDefs;
      uint64_t v40 = v25;
      uint64_t v30 = extdata_RegisterData(a12, &v34, 2u);
      if ((v30 & 0x80000000) != 0)
      {
LABEL_15:
        uint64_t v15 = v30;
        wparser_ObjClose2(v25);
      }
      else
      {
        uint64_t v15 = 0;
        *a5 = v25;
      }
    }
    else
    {
      return 2370838538;
    }
  }
  return v15;
}

uint64_t wparser_ObjClose2(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      utoin_ObjClose(v3);
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wparser_ProcessStart(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v11 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v11) & 0x80000000) == 0)
  {
    if (*(_WORD *)(a1 + 64))
    {
      uint64_t v7 = paramc_ParamGet(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", (void *)(a1 + 128), 0);
      if ((v7 & 0x80000000) != 0)
      {
        return v7;
      }
      else
      {
        int v8 = utoin_ProcessStart(*(void *)(a1 + 24));
        return v8 & (v8 >> 31);
      }
    }
    else
    {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)&modPP_2, 1810, 0, v3, v4, v5, v6, v10);
    }
  }
  return v1;
}

uint64_t wparser_ProcessEnd(void *a1)
{
  if (!a1) {
    return 2370838535;
  }
  if (a1[16]) {
    paramc_ParamRelease(*(void *)(a1[2] + 40));
  }
  int v2 = utoin_ProcessEnd(a1[3]);
  return v2 & (v2 >> 31);
}

uint64_t wparser_NormalizeWords(unsigned __int16 *a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v5 = 2370838535;
  uint64_t v70 = 0;
  if (!a1 || !a2 || (InitRsrcFunction(*(_WORD **)a1, *((void *)a1 + 1), &v71) & 0x80000000) != 0) {
    return v5;
  }
  uint64_t v14 = datac_RequestBlock(a2, 1020, 1u, &v72);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  if (!*(_WORD *)(v72 + 16))
  {
    log_OutText(*(void *)(*((void *)a1 + 2) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[SEQ] wparser : no text to process", v11, v12, v13, v69);
    return v14;
  }
  uint64_t v15 = bed_ObjOpen(*(_WORD **)a1, *((void *)a1 + 1), a2, 1021, &v70, 213);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v73 = 0;
  unsigned int v16 = datac_RequestBlock(a2, 1021, 1u, &v73);
  if ((v16 & 0x80000000) != 0)
  {
    unsigned int v28 = v16;
    LOWORD(v25) = 0;
    goto LABEL_23;
  }
  uint64_t v17 = *(_DWORD **)(v73 + 8);
  unsigned int v18 = *(unsigned __int16 *)(v73 + 16);
  if (v18 < 2) {
    goto LABEL_39;
  }
  uint64_t v19 = v17 + 26;
  uint64_t v20 = *(unsigned __int16 *)(v73 + 16);
LABEL_10:
  uint64_t v21 = v19;
  uint64_t v22 = 1;
  do
  {
    if (*(v21 - 5) == 999 && *(v21 - 2) == v17[8] && !*v21)
    {
      uint64_t v23 = (unsigned __int16)v22 + 1;
      if (v23 < v20)
      {
        uint64_t v24 = v19;
        memmove(v21 - 10, &v17[16 * v23], (uint64_t)(int)(v20 - (unsigned __int16)v22) << 6);
        uint64_t v19 = v24;
      }
      LOWORD(v25) = 0;
      uint64_t v26 = 0;
      int v27 = 0;
      --v20;
      unsigned int v18 = 1;
      if ((v20 & 0xFFFE) == 0)
      {
LABEL_59:
        *(_WORD *)(v73 + 16) = v18;
        unsigned int v54 = v17[6] + a3;
        int v55 = v17[7] - a3;
        v17[6] = v54;
        v17[7] = v55;
        if (v27)
        {
          unsigned __int16 v56 = v17 + 38;
          uint64_t v57 = 1;
          uint64_t v58 = 3;
          do
          {
            if (v17[16 * v57 + 5] != 0x4000 && !v17[16 * v57] && v17[16 * v57 + 6] > v54)
            {
              if (v57 + 1 < (unint64_t)v18)
              {
                uint64_t v59 = v58;
                int v60 = v56;
                do
                {
                  if (!*(v60 - 6)) {
                    *v60 -= v17[16 * v57 + 7];
                  }
                  v60 += 16;
                  BOOL v35 = v18 == (unsigned __int16)v59++;
                }
                while (!v35);
              }
              v17[16 * v57 + 7] = 0;
            }
            ++v57;
            v56 += 16;
            ++v58;
          }
          while (v57 != v18);
        }
        uint64_t v61 = v26;
        uint64_t v62 = *((void *)a1 + 13);
        BOOL v63 = log_GetLogLevel(*(void *)(*((void *)a1 + 2) + 32)) > 4;
        uint64_t v64 = utois_ScanRegions(v62, *((void *)a1 + 14), *((void *)a1 + 15), v63, *(_WORD **)a1, *((void *)a1 + 1), a2, a1 + 32, *((void **)a1 + 6), *((void *)a1 + 7), *((char **)a1 + 16), *((_DWORD *)a1 + 34), HIWORD(*((_DWORD *)a1 + 34)), a1[70]);
        uint64_t v5 = v64;
        if ((v64 & 0x80000000) != 0 && (v64 & 0x1FFF) != 0xA) {
          return v5;
        }
        uint64_t v15 = utoin_NormalizeRegions(*((_WORD ***)a1 + 3), a2, a1 + 44);
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v67 = wparser_loc_ReSyncOut((uint64_t)a1, a2, a3, a4, v61, (unsigned __int16)v25, v65, v66);
          uint64_t v29 = v61;
          unsigned int v28 = v67;
          goto LABEL_76;
        }
        return v15;
      }
      goto LABEL_10;
    }
    ++v22;
    v21 += 16;
  }
  while (v20 != v22);
  unsigned int v18 = (unsigned __int16)v20;
  if ((unsigned __int16)v20 < 2u)
  {
LABEL_39:
    LOWORD(v25) = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    goto LABEL_59;
  }
  LOWORD(v25) = 0;
  uint64_t v30 = (unsigned __int16)v20 - 1;
  uint64_t v31 = v17 + 16;
  do
  {
    unsigned int v32 = v31[5];
    if (v32 != 0x4000 && !*v31
      || v31[6] == v17[6]
      && ((v33 = v32 > 0x24, uint64_t v34 = (1 << v32) & 0x1080200080, !v33) ? (v35 = v34 == 0) : (v35 = 1), !v35 && *v31 == 1))
    {
      LOWORD(v25) = v25 + 1;
    }
    v31 += 16;
    --v30;
  }
  while (v30);
  if (!(_WORD)v25)
  {
    uint64_t v26 = 0;
    goto LABEL_41;
  }
  uint64_t v26 = heap_Calloc(*(void **)(*((void *)a1 + 2) + 8), 1, ((unint64_t)(unsigned __int16)v25 << 6) | 1);
  if (v26)
  {
LABEL_41:
    int v25 = 0;
    unsigned __int16 v36 = 0;
    uint64_t v37 = v17 + 23;
    uint64_t v38 = (unsigned __int16)v20 - 1;
    while (1)
    {
      unsigned int v39 = v37 - 7;
      unsigned int v40 = *(v37 - 2);
      if (v40 == 0x4000 || *v39)
      {
        int v41 = *(v37 - 1);
        if (v41 != v17[6]) {
          goto LABEL_57;
        }
        BOOL v33 = v40 > 0x24;
        uint64_t v42 = (1 << v40) & 0x1080200080;
        BOOL v43 = v33 || v42 == 0;
        if (v43 || *v39 != 1) {
          goto LABEL_57;
        }
        *(v37 - 1) = v41 + a3;
        int v44 = (_OWORD *)(v26 + ((unint64_t)v36 << 6));
        long long v45 = *(_OWORD *)v39;
        long long v46 = *(_OWORD *)(v37 - 3);
        long long v47 = *(_OWORD *)(v37 + 5);
        v44[2] = *(_OWORD *)(v37 + 1);
        v44[3] = v47;
        _OWORD *v44 = v45;
        v44[1] = v46;
        ++v25;
      }
      else
      {
        unsigned __int16 v48 = (_OWORD *)(v26 + ((unint64_t)v36 << 6));
        long long v49 = *(_OWORD *)v39;
        long long v50 = *(_OWORD *)(v37 - 3);
        long long v51 = *(_OWORD *)(v37 + 5);
        v48[2] = *(_OWORD *)(v37 + 1);
        v48[3] = v51;
        *unsigned __int16 v48 = v49;
        v48[1] = v50;
        ++v25;
        int v52 = a5[5];
        if (v52)
        {
          if (v52 == *(v37 - 2))
          {
            int v53 = a5[6];
            if (v53 == *(v37 - 1) && a5[7] == *v37) {
              *(void *)(v37 - 1) = (v53 + a3);
            }
          }
        }
      }
      unsigned __int16 v36 = v25;
LABEL_57:
      v37 += 16;
      if (!--v38)
      {
        int v27 = 1;
        goto LABEL_59;
      }
    }
  }
  unsigned int v28 = -1924128758;
LABEL_23:
  uint64_t v29 = 0;
  LODWORD(v5) = 0;
LABEL_76:
  if ((_WORD)v25) {
    heap_Free(*(void **)(*((void *)a1 + 2) + 8), v29);
  }
  if (v70) {
    bed_ObjClose(v70);
  }
  if ((v5 & 0x1FFF) == 0xA) {
    return v5;
  }
  else {
    return v28;
  }
}

uint64_t wparser_loc_ReSyncOut(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a6;
  int v10 = a4;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] ReSyncOut(refReset=%d posRefOffset=%d)", a6, a7, a8, a4);
  uint64_t result = datac_RequestBlock(a2, 1021, 1u, &v86);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v15 = *(_DWORD **)(v86 + 8);
  unint64_t v16 = *(unsigned __int16 *)(v86 + 16);
  uint64_t v17 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (2 * v16) | 1);
  if (!v17) {
    return 2370838538;
  }
  uint64_t v18 = v17;
  if (!v16) {
    goto LABEL_53;
  }
  uint64_t v19 = 0;
  unsigned int v20 = 0;
  do
  {
    uint64_t v21 = &v15[16 * v19];
    unsigned int v22 = v21[5];
    BOOL v23 = v22 > 0x24 || ((1 << v22) & 0x1080200080) == 0;
    if (v23 && v22 != 999)
    {
      if (*v21) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v20 >= v8;
      }
      if (v30)
      {
LABEL_36:
        __int16 v34 = 0;
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    int v24 = *v21;
    if (!v24)
    {
      if (v20 >= v8) {
        goto LABEL_36;
      }
LABEL_32:
      uint64_t v31 = v20;
      unsigned int v32 = (int *)(a5 + 20 + ((unint64_t)v20 << 6));
      while (v22 != 999)
      {
        int v33 = *v32;
        v32 += 16;
        if (v33 == v22) {
          break;
        }
        if (v8 == ++v31) {
          goto LABEL_36;
        }
      }
      ++v20;
      __int16 v34 = v31 + 1;
      goto LABEL_37;
    }
    if (v22 == 999 || v24 != 1) {
      goto LABEL_36;
    }
    int v26 = v15[16 * v19 + 6];
    if (v26 != v15[6] || v20 >= v8) {
      goto LABEL_36;
    }
    __int16 v28 = v20;
    uint64_t v29 = (_DWORD *)(a5 + 24 + ((unint64_t)v20 << 6));
    while (*(v29 - 1) != v22 || *v29 != v26)
    {
      v29 += 16;
      if (v8 == (unsigned __int16)++v28) {
        goto LABEL_36;
      }
    }
    ++v20;
    __int16 v34 = v28 + 1;
LABEL_37:
    *(_WORD *)(v18 + 2 * v19++) = v34;
  }
  while (v19 != v16);
  BOOL v35 = v15 + 7;
  unint64_t v36 = v16;
  uint64_t v37 = (_WORD *)v18;
  do
  {
    unsigned int v38 = *(v35 - 2);
    BOOL v39 = v38 > 0x24 || ((1 << v38) & 0x1080200080) == 0;
    if (!v39 || v38 == 999 || !*(v35 - 7))
    {
      uint64_t v40 = (unsigned __int16)*v37;
      if (*v37)
      {
        int v41 = *(_DWORD *)(a5 + ((unint64_t)(v40 - 1) << 6) + 24);
        *(v35 - 1) = v41;
        _DWORD *v35 = *(_DWORD *)(a5 + (v40 << 6) - 36);
        if (v41 == v15[6] && v15[7] + v41 >= (v41 - a3)) {
          *(v35 - 1) = v41 - a3;
        }
      }
    }
    v35 += 16;
    ++v37;
    --v36;
  }
  while (v36);
LABEL_53:
  int v42 = v15[7] + v10 + a3;
  v15[6] -= v10 + a3;
  v15[7] = v42;
  if (v16 >= 2)
  {
    int v43 = v15[8];
    for (uint64_t i = 1; i != v16; ++i)
    {
      long long v45 = &v15[16 * i];
      if (v45[8] != v43 || v45[6] > (v10 + a3 + v15[6]))
      {
        int v46 = v45[5];
        if (v46 == 999 || v46 != 0x4000 && !*v45)
        {
          LOWORD(v47) = 0;
          unsigned __int16 v48 = &v15[16 * i + 6];
          long long v49 = &v15[16 * (unint64_t)(unsigned __int16)(v16 - 1) + 6];
          uint64_t v50 = (unsigned __int16)(v16 - 1);
          do
          {
            if (i != v50 && *(v49 - 1) != 0x4000 && *v49 >= *v48) {
              LOWORD(v47) = v50;
            }
            --v50;
            v49 -= 16;
          }
          while ((_WORD)v50);
          int v51 = v15[16 * i + 7];
          if (v51)
          {
            if (v16 > (unsigned __int16)v47)
            {
              unint64_t v47 = (unsigned __int16)v47;
              int v52 = &v15[16 * (unint64_t)(unsigned __int16)v47 + 6];
              do
              {
                if (i != v47 && *(v52 - 1) != 999 && *(v52 - 6) == 1 && *v52 >= *v48)
                {
                  unsigned int v53 = *v52 + v51;
                  if (v15[6] + v42 < v53) {
                    break;
                  }
                  *int v52 = v53;
                }
                ++v47;
                v52 += 16;
              }
              while (v47 < v16);
            }
          }
        }
      }
    }
    unint64_t v54 = 1;
    while (2)
    {
      unint64_t v55 = v54 + 1;
      if (v15[16 * v54 + 5] == 41)
      {
        unsigned __int16 v56 = v54 + 1;
        if (v55 < v16)
        {
          uint64_t v57 = &v15[16 * v55];
          if (v57[5] == 39 && v57[8] == v15[16 * v54 + 8])
          {
            unsigned __int16 v58 = v54 + 1;
            goto LABEL_92;
          }
        }
        if (v54 >= 2 && (uint64_t v59 = &v15[16 * v54 - 16], v59[5] == 39))
        {
          if (v59[8] == v15[16 * v54 + 8]) {
            unsigned __int16 v58 = v54 - 1;
          }
          else {
            unsigned __int16 v58 = 0;
          }
        }
        else
        {
          unsigned __int16 v58 = 0;
        }
        if (v55 >= v16 || (int v60 = &v15[16 * v55], v60[5] != 14) || v60[8] != v15[16 * v54 + 8])
        {
LABEL_92:
          if (v54 >= 2 && (uint64_t v61 = &v15[16 * v54 - 16], v61[5] == 14))
          {
            if (v61[8] == v15[16 * v54 + 8]) {
              unsigned __int16 v56 = v54 - 1;
            }
            else {
              unsigned __int16 v56 = 0;
            }
          }
          else
          {
            unsigned __int16 v56 = 0;
          }
        }
        uint64_t v62 = &v15[16 * v54];
        unsigned int v63 = v62[6];
        uint64_t v64 = v62 + 7;
        uint64_t v65 = v15 + 23;
        for (unint64_t j = 1; j != v16; ++j)
        {
          unsigned int v67 = *(v65 - 1);
          int v68 = *v64;
          unsigned int v69 = *v64 + v63;
          if (v67 > v69) {
            break;
          }
          if (j > v54)
          {
            if (v67)
            {
              if (!*(v65 - 7))
              {
                int v70 = *(v65 - 2);
                if (v70 != 7 && v70 != 0x4000 && v67 >= v63 && v67 < v69)
                {
                  int v71 = *v65 + v68;
                  if (v71 + v63 <= v15[7] + v15[6])
                  {
                    *uint64_t v64 = v71;
                    int v68 = v71;
                  }
                  if (v58) {
                    v15[16 * (unint64_t)v58 + 7] = v68;
                  }
                  if (v56) {
                    v15[16 * (unint64_t)v56 + 7] = *v64;
                  }
                }
              }
            }
          }
          v65 += 16;
        }
      }
      ++v54;
      if (v55 == v16) {
        break;
      }
      continue;
    }
  }
  uint64_t result = datac_RequestBlock(a2, 1020, 1u, &v87);
  if ((result & 0x80000000) == 0)
  {
    if (v16 >= 2)
    {
      unsigned int v72 = 1;
      int v73 = 1;
      do
      {
        uint64_t v74 = (unsigned __int16)v73;
        uint64_t v75 = &v15[16 * (unint64_t)(unsigned __int16)v73];
        if (v75[5] == 7 && v75[10] == 43)
        {
          if (v16 > (unsigned __int16)(v72 + 1))
          {
            uint64_t v76 = &v15[16 * (unint64_t)(unsigned __int16)v73];
            int v77 = v76 + 8;
            int v78 = v76 + 9;
            uint64_t v79 = (unsigned __int16)(v72 + 1);
            uint64_t v80 = (uint64_t)&v15[16 * v79 + 5];
            long long v81 = (int *)v80;
            while (1)
            {
              int v82 = *v81;
              v81 += 16;
              if (v82 == 999 && *(_DWORD *)(v80 + 12) == *v78 + *v77) {
                break;
              }
              LODWORD(v79) = v79 + 1;
              uint64_t v80 = (uint64_t)v81;
              if (v16 == (unsigned __int16)v79) {
                goto LABEL_126;
              }
            }
            if ((_WORD)v79)
            {
              v15[16 * (unint64_t)(unsigned __int16)v73 + 7] = v15[16 * (unint64_t)(unsigned __int16)v79
                                                                        + 7]
                                                                    + v15[16 * (unint64_t)(unsigned __int16)v79
                                                                        + 6]
                                                                    - v15[16 * (unint64_t)(unsigned __int16)v73
                                                                        + 6];
              goto LABEL_130;
            }
          }
LABEL_126:
          int v83 = &v15[16 * (unint64_t)(unsigned __int16)v73];
          if (*(unsigned __int16 *)(v87 + 16) + (unint64_t)v15[8] == v83[9] + v83[8])
          {
            v83[7] = v15[7] + v15[6] - v83[6];
            if ((datac_RequestBlock(a2, 1021, (unsigned __int16)(*(_WORD *)(v86 + 16) + 1), &v86) & 0x80000000) != 0) {
              break;
            }
            uint64_t v15 = *(_DWORD **)(v86 + 8);
            uint64_t v84 = &v15[16 * v74];
            memmove(&v15[16 * (unint64_t)(v72 + 1)], v84, (uint64_t)(int)(*(unsigned __int16 *)(v86 + 16) - v72) << 6);
            uint64_t v85 = *(void *)(v86 + 8) + (v74 << 6);
            *(_DWORD *)(v85 + 84) = 7;
            *(_DWORD *)(v85 + 104) = 15;
            *(_DWORD *)(v85 + 64) = 1;
            *(_DWORD *)(v85 + 88) = v84[6];
            *(_DWORD *)(v85 + 92) = 0;
            *(_DWORD *)(v85 + 96) = v84[9] + v84[8];
            *(_DWORD *)(v85 + 100) = 0;
            *(_WORD *)(v85 + 80) = 0;
            *(void *)(v85 + 72) = 0;
            *(void *)(v85 + 112) = 0;
            ++*(_WORD *)(v86 + 16);
            LODWORD(v79) = v16;
            goto LABEL_130;
          }
        }
        LODWORD(v79) = v73;
LABEL_130:
        int v73 = v79 + 1;
        unsigned int v72 = (unsigned __int16)(v79 + 1);
      }
      while (v72 < v16);
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v18);
    return 0;
  }
  return result;
}

uint64_t wparser_insertRegionTags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return utoin_InsertRegions(*(_WORD ***)(a1 + 24), a2);
  }
  else {
    return 2370838535;
  }
}

uint64_t wparser_InsertWordMarkers(uint64_t a1, uint64_t a2, char *__s, _WORD *a4)
{
  long long v92 = 0;
  v93[0] = 0;
  uint64_t v87 = 0;
  unsigned __int16 v86 = 0;
  unsigned __int16 v8 = strlen(__s);
  uint64_t v9 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, 1021, v93, 213);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  uint64_t v10 = bed_GetpElem(v93[0], 0, &v92);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_52;
  }
  uint64_t v12 = v92;
  uint64_t v11 = v93[0];
  long long v13 = v92[1];
  long long v88 = *v92;
  long long v89 = v13;
  long long v14 = v92[3];
  long long v90 = v92[2];
  long long v91 = v14;
  *((_DWORD *)v92 + 7) = 0;
  *((_DWORD *)v12 + 9) = 0;
  uint64_t v10 = bed_GetpElem(v11, 0, &v92);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_52;
  }
  long long v15 = v89;
  uint64_t v17 = v92;
  uint64_t v16 = v93[0];
  *long long v92 = v88;
  v17[1] = v15;
  long long v18 = v91;
  v17[2] = v90;
  v17[3] = v18;
  uint64_t v10 = bed_GetcElem(v16, &v86);
  if ((v10 & 0x80000000) != 0)
  {
LABEL_52:
    uint64_t v19 = v10;
    goto LABEL_53;
  }
  uint64_t v19 = bed_GetpElem(v93[0], 0, &v87);
  if ((v19 & 0x80000000) == 0)
  {
    LOWORD(v20) = v86;
    if (v86 < 2u) {
      goto LABEL_83;
    }
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    uint64_t v21 = 84;
    uint64_t v22 = v87;
    unint64_t v23 = 1;
    while (1)
    {
      unsigned int v81 = 0;
      unsigned int v81 = *(_DWORD *)(v22 + (v23 << 6) + 32) - *(_DWORD *)(v22 + 32);
      utf8_GetPreviousValidUtf8Offset((uint64_t)__s, &v81);
      uint64_t v22 = v87;
      unsigned int v24 = v81;
      uint64_t v25 = v87 + (v23 << 6);
      *(_DWORD *)(v25 + 32) = v81 + *(_DWORD *)(v87 + 32);
      unsigned int v26 = *(_DWORD *)(v25 + 20);
      BOOL v27 = v26 > 0x39;
      uint64_t v28 = (1 << v26) & 0x3C8002000004002;
      if (v27 || v28 == 0) {
        goto LABEL_49;
      }
      unsigned int v81 = v24;
      int v30 = utf8_BelongsToSet(5u, __s, v24, v8);
      unsigned int v31 = v81;
      if (v30)
      {
        while (v31 < v8 && utf8_BelongsToSet(5u, __s, v31, v8))
        {
          int v32 = utf8_determineUTF8CharLength(__s[v81]);
          *(_DWORD *)(v87 + (v23 << 6) + 32) += v32;
          unsigned int v31 = v81 + v32;
          v81 += v32;
        }
      }
      else if (v81 < *(_DWORD *)(v87 + 36))
      {
        unint64_t v33 = v23;
        while (1)
        {
          unint64_t v34 = v33;
          if (!v33) {
            break;
          }
          --v33;
          unsigned int v35 = *(_DWORD *)(v87 + ((unint64_t)(unsigned __int16)(v34 - 1) << 6) + 20);
          BOOL v27 = v35 > 0x39;
          uint64_t v36 = (1 << v35) & 0x3C8010124021140;
          if (!v27 && v36 != 0) {
            goto LABEL_23;
          }
        }
        LOWORD(v33) = -1;
LABEL_23:
        unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v81);
        if (PreviousUtf8Offset != -1)
        {
          for (unsigned int i = PreviousUtf8Offset; i != -1; unsigned int i = utf8_GetPreviousUtf8Offset((uint64_t)__s, i))
          {
            int v40 = utf8_BelongsToSet(5u, __s, i, v8);
            if (!v34) {
              break;
            }
            if (v40) {
              break;
            }
            if (i <= *(_DWORD *)(v87 + ((unint64_t)(unsigned __int16)v33 << 6) + 32)) {
              break;
            }
            *(_DWORD *)(v87 + (v23 << 6) + 32) += i - v81;
            unsigned int v81 = i;
          }
        }
      }
      uint64_t v22 = v87;
      uint64_t v41 = v87 + (v23 << 6);
      int v42 = *(_DWORD *)(v41 + 32);
      int v43 = *(_DWORD *)(v87 + 32);
      unsigned int v44 = v42 - v43;
      unsigned int v81 = v42 - v43;
      if (*(_DWORD *)(v41 + 20) != 1) {
        goto LABEL_49;
      }
      if (v44 < v8)
      {
        unsigned int v45 = v42 - v43;
        do
        {
          if (utf8_BelongsToSet(5u, __s, v45, v8)) {
            break;
          }
          unsigned int v45 = v81 + utf8_determineUTF8CharLength(__s[v81]);
          unsigned int v81 = v45;
        }
        while (v45 < v8);
        uint64_t v22 = v87;
      }
      if (v23 >= v86) {
        goto LABEL_47;
      }
      int v46 = (unsigned int *)(v22 + v21);
      unsigned __int16 v47 = v23;
      unsigned __int16 v48 = (unsigned int *)(v22 + v21);
      while (1)
      {
        unsigned int v49 = *v48;
        v48 += 16;
        uint64_t v50 = (1 << v49) & 0x3C8010124221140;
        if (v49 <= 0x39 && v50 != 0)
        {
          unsigned int v52 = v46[3];
          unsigned int v53 = *(_DWORD *)(v22 + (v23 << 6) + 32);
          if (v52 > v53) {
            break;
          }
        }
        ++v47;
        int v46 = v48;
        if (v86 == v47) {
          goto LABEL_47;
        }
      }
      if (v47)
      {
        int v54 = v81 - v44;
        if (v81 - v44 + v53 > *(_DWORD *)(v22 + ((unint64_t)v47 << 6) + 32)) {
          goto LABEL_49;
        }
      }
      else
      {
LABEL_47:
        int v54 = v81 - v44;
      }
      *(_DWORD *)(v22 + (v23 << 6) + 36) = v54;
LABEL_49:
      ++v23;
      unsigned __int16 v55 = v86;
      v21 += 64;
      if (v23 >= v86)
      {
        if (v86 < 2u)
        {
          LOWORD(v20) = v86;
        }
        else
        {
          uint64_t v57 = v87;
          int v58 = 1;
          unsigned int v20 = v86;
          unsigned __int16 v59 = 1;
          do
          {
            if (*(_DWORD *)(v57 + ((unint64_t)v59 << 6) + 20) != 0x4000
              && (uint64_t v60 = (v58 + 1), v60 < v55)
              && ((uint64_t v61 = (_OWORD *)(v57 + (v60 << 6)),
                   unsigned int v62 = *((_DWORD *)v61 + 8),
                   unsigned int v63 = (long long *)(v57 + ((unint64_t)v59 << 6)),
                   unsigned int v64 = *((_DWORD *)v63 + 8),
                   v62 < v64)
               || v62 == v64
               && (unsigned int v63 = (long long *)(v57 + ((unint64_t)v59 << 6)),
                   *(_DWORD *)(v57 + (v60 << 6) + 36) < *((_DWORD *)v63 + 9))))
            {
              unsigned __int16 v59 = 0;
              long long v65 = v61[2];
              long long v66 = v61[3];
              long long v67 = v63[3];
              long long v69 = *v63;
              long long v68 = v63[1];
              v61[2] = v63[2];
              v61[3] = v67;
              long long v70 = *v61;
              long long v71 = v61[1];
              *uint64_t v61 = v69;
              v61[1] = v68;
              long long v82 = v70;
              long long v83 = v71;
              long long v84 = v65;
              long long v85 = v66;
              *unsigned int v63 = v70;
              v63[1] = v71;
              long long v72 = v85;
              v63[2] = v84;
              v63[3] = v72;
            }
            else
            {
              ++v59;
            }
            int v58 = v59;
            unsigned __int16 v55 = v20;
          }
          while (v59 < v20);
          if (v20 >= 2)
          {
            unsigned __int16 v73 = 1;
LABEL_69:
            uint64_t v74 = v87;
            do
            {
              uint64_t v75 = v87 + ((unint64_t)v73 << 6);
              if (*(_DWORD *)(v75 + 20) == 1)
              {
                uint64_t v76 = (_DWORD *)(v75 + 32);
                unsigned __int16 v77 = v73;
                while (++v77 < (unsigned __int16)v20)
                {
                  uint64_t v78 = v87 + ((unint64_t)v77 << 6);
                  if (*(_DWORD *)(v78 + 32) != *v76) {
                    break;
                  }
                  if (*(_DWORD *)(v78 + 20) == 1)
                  {
                    uint64_t v79 = (_DWORD *)(v87 + ((unint64_t)v77 << 6));
                    *(_DWORD *)(v87 + ((unint64_t)v73 << 6) + 28) = v79[7]
                                                                         + v79[6]
                                                                         - *(_DWORD *)(v87
                                                                                     + ((unint64_t)v73 << 6)
                                                                                     + 24);
                    uint64_t v80 = v77 + 1;
                    if ((unsigned __int16)v20 > v80)
                    {
                      memmove(v79, (const void *)(v74 + (v80 << 6)), (uint64_t)((unsigned __int16)v20 - (int)v80) << 6);
                      LOWORD(v20) = v86;
                    }
                    LOWORD(v20) = v20 - 1;
                    unsigned __int16 v86 = v20;
                    if (v73 < (unsigned __int16)v20) {
                      goto LABEL_69;
                    }
                    goto LABEL_83;
                  }
                }
              }
              ++v73;
            }
            while (v73 < (unsigned __int16)v20);
          }
        }
LABEL_83:
        *a4 = v20;
        break;
      }
    }
  }
LABEL_53:
  if (v93[0]) {
    bed_ObjClose(v93[0]);
  }
  return v19;
}

uint64_t utoin_LookUpUdctWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, __int16 a7, uint64_t a8)
{
  uint64_t v22 = 0;
  int v21 = 1;
  if (!a4) {
    return 2370838535;
  }
  uint64_t v9 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10 <= a6)
  {
    *(unsigned char *)(*(void *)a4 + v10) = 0;
    *(_WORD *)(a4 + 24) = a7;
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, const char *, int *, void, uint64_t, uint64_t, void, uint64_t *, void, void))(a1 + 128))(a2, a3, a5, *(void *)a4, 0, "normal", &v21, *(void *)(a4 + 16), a4 + 24, a8, 0, &v22, 0, 0);
    uint64_t v9 = 0;
    if (!v11)
    {
      uint64_t v12 = *(char **)(a4 + 16);
      unsigned __int16 v13 = strlen(v12);
      *(_WORD *)(a4 + 24) = v13;
      if (!v12[v13 - 1]) {
        *(_WORD *)(a4 + 24) = --v13;
      }
      if (v21 == 4)
      {
        if (v13 >= 7u
          && (*(_WORD *)v12 == 12049 ? (BOOL v14 = v12[2] == 62) : (BOOL v14 = 0),
              v14
           && ((long long v15 = &v12[v13], v16 = *(unsigned __int16 *)(v15 - 3), v17 = *(v15 - 1), v16 == 12049)
             ? (BOOL v18 = v17 == 62)
             : (BOOL v18 = 0),
               v18)))
        {
          memmove(v12, v12 + 2, v13 - 4);
          *(unsigned char *)(*(unsigned __int16 *)(a4 + 24) + *(void *)(a4 + 16) - 4) = 0;
          int v19 = 16;
          **(unsigned char **)(a4 + 16) = 16;
          *(unsigned char *)(*(unsigned __int16 *)(a4 + 24) + *(void *)(a4 + 16) - 5) = 17;
          *(_WORD *)(a4 + 24) -= 4;
        }
        else
        {
          int v19 = 2;
        }
      }
      else
      {
        int v19 = 43;
      }
      uint64_t v9 = 0;
      *(_DWORD *)(a4 + 12) = v19;
    }
  }
  return v9;
}

uint64_t utoin_ReplaceWord(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, char *a7)
{
  unsigned int v81 = 0;
  v82[0] = 0;
  *(void *)long long v66 = 0;
  uint64_t v7 = 2370838535;
  long long v77 = MarkerUDCTREF;
  *(_OWORD *)uint64_t v78 = unk_20D62EC58;
  *(_OWORD *)&v78[16] = xmmword_20D62EC68;
  long long v79 = unk_20D62EC78;
  long long v73 = MarkerSetTypeOfInput;
  long long v74 = unk_20D62EC98;
  long long v75 = xmmword_20D62ECA8;
  long long v76 = unk_20D62ECB8;
  memset(v72, 0, sizeof(v72));
  long long v70 = MarkerSetLang;
  long long v71 = unk_20D62ECD8;
  memset(v69, 0, sizeof(v69));
  long long v67 = MarkerSetNLU;
  long long v68 = unk_20D62ED18;
  if (!a1 || !a2 || !a4) {
    return v7;
  }
  int v80 = 0;
  TNArgint Str = bed_GetpElem(a2, 0, v82);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  uint64_t v16 = *(unsigned int *)(v82[0] + 32);
  TNArgint Str = bed_GetpElem(a2, 0xFFFFu, &v81);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  if (a5 == 1 && v81[5] != 7) {
    return v7;
  }
  TNArgint Str = datac_RequestBlock(a6, 1012, 1u, v66);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  uint64_t v64 = v16;
  int v17 = v81[8];
  unsigned int v18 = a3;
  int v19 = *(_DWORD *)(v82[0] + 32);
  int v61 = v81[6];
  int v62 = a5;
  int v58 = v81[7];
  int v59 = v81[9];
  unsigned int v20 = v18;
  int v60 = *(unsigned __int16 *)(a4 + 8);
  TNArgint Str = bed_Remove(a1, v18, v60);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  int v21 = v17 - v19;
  if (*(_WORD *)(a4 + 24))
  {
    unsigned int v22 = v20;
    TNArgint Str = bed_Goto(a1, v20);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    TNArgint Str = bed_Insert(a1, *(void **)(a4 + 16), *(unsigned __int16 *)(a4 + 24));
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    int v23 = v21;
    if (*(unsigned __int16 *)(a4 + 8) + v20 >= v81[9] + v21)
    {
      int v56 = v81[8];
      int v57 = 1;
    }
    else
    {
      int v56 = 0;
      int v57 = 0;
    }
  }
  else
  {
    int v23 = v21;
    int v56 = 0;
    int v57 = 0;
    unsigned int v22 = v20;
  }
  int v24 = v62;
  uint64_t v25 = (_DWORD **)v82;
  if (v62 == 1) {
    uint64_t v25 = &v81;
  }
  (*v25)[9] = (*v25)[9] + *(unsigned __int16 *)(a4 + 24) - *(unsigned __int16 *)(a4 + 8);
  TNArgint Str = bed_GetiElem(a2, &v80);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  int v63 = v22 - v23;
  if (a7)
  {
    DWORD1(v71) = 36;
    TNArgint Str = addOrGetTNArgStr(*(uint64_t *)v66, a7, (unsigned int *)v72 + 2, a6);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    unsigned int v26 = v81[8];
    if (v26 - v64 < v22)
    {
      *((void *)&v71 + 1) = (v63 + v61);
      *(void *)&v72[0] = v64 + v22;
      TNArgint Str = bed_Goto(a2, 1u);
      if ((TNArgStr & 0x80000000) != 0) {
        return TNArgStr;
      }
      BOOL v27 = &v70;
      goto LABEL_29;
    }
    *((void *)&v71 + 1) = v81[6];
    *(void *)&v72[0] = v26;
    TNArgint Str = bed_Goto(a2, 1u);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    uint64_t v29 = &v70;
LABEL_36:
    TNArgint Str = bed_marker_InjectFixedRefMarker(a2, v29);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    TNArgint Str = bed_Goto(a2, (unsigned __int16)v80 + 1);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    LOWORD(v80) = v80 + 1;
    v81 += 16;
    goto LABEL_39;
  }
  strcpy(__s, "BND");
  DWORD1(v68) = 51;
  TNArgint Str = addOrGetTNArgStr(*(uint64_t *)v66, __s, (unsigned int *)v69 + 2, a6);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  unsigned int v28 = v81[8];
  if (v28 - v64 >= v22)
  {
    *((void *)&v68 + 1) = v81[6];
    *(void *)&v69[0] = v28;
    TNArgint Str = bed_Goto(a2, 1u);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    uint64_t v29 = &v67;
    goto LABEL_36;
  }
  *((void *)&v68 + 1) = (v63 + v61);
  *(void *)&v69[0] = v64 + v22;
  TNArgint Str = bed_Goto(a2, 1u);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  BOOL v27 = &v67;
LABEL_29:
  TNArgint Str = bed_marker_InjectFixedRefMarker(a2, v27);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  TNArgint Str = bed_Goto(a2, (unsigned __int16)v80);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
LABEL_39:
  TNArgint Str = bed_GetcElem(a2, (_WORD *)&v80 + 1);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  unsigned int v30 = HIWORD(v80);
  unsigned int v31 = v81 + 16;
  int v32 = (unsigned __int16)v80 + 1;
  if (HIWORD(v80) > (unsigned __int16)(v80 + 1))
  {
    unint64_t v33 = v64 + v22;
    do
    {
      unint64_t v34 = v31[8];
      if (v33 <= v34)
      {
        uint64_t v35 = *(unsigned __int16 *)(a4 + 8);
        int v36 = v64 + v22;
        if (v33 + v35 <= v34) {
          int v36 = v34 - v35 + *(unsigned __int16 *)(a4 + 24);
        }
        v31[8] = v36;
      }
      v31 += 16;
      ++v32;
    }
    while (v30 > (unsigned __int16)v32);
    LOWORD(v32) = v30;
  }
  unsigned int v81 = v31;
  LOWORD(v80) = v32;
  if (!v24) {
    return 0;
  }
  TNArgint Str = bed_GetpElem(a2, 0xFFFFu, &v81);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  int v37 = *(unsigned __int16 *)(a4 + 24);
  unsigned int v38 = v81;
  if (*(_WORD *)(a4 + 24))
  {
    unsigned int v39 = v81[10];
    int v40 = *(_DWORD *)(a4 + 12);
    if (v39 != v40)
    {
      int v41 = v81[8];
      if (v41 - (int)v64 >= v22)
      {
        int v47 = *(unsigned __int16 *)(a4 + 8);
        v81[7] = v47;
        v38[9] = v37;
        v38[10] = v40;
        if (*(_DWORD *)(a4 + 12) == 16)
        {
          *(_DWORD *)&v78[8] = v38[6];
          *(_DWORD *)&v78[12] = v47;
          *(_DWORD *)&v78[16] = v41;
          *(_DWORD *)&v78[20] = v37;
LABEL_63:
          *(_DWORD *)&v78[24] = 16;
          TNArgint Str = bed_marker_InjectFixedRefMarker(a2, &v77);
          if ((TNArgStr & 0x80000000) != 0) {
            return TNArgStr;
          }
        }
      }
      else
      {
        v81[9] = v64 + v22 - v41;
        TNArgint Str = bed_marker_MapPosCur(a2, v64 + v22, v38 + 7);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        v81[7] -= v81[6];
        unsigned int v42 = *(_DWORD *)(a4 + 12);
        int v43 = v60;
        if (v42 == 16) {
          int v43 = 0;
        }
        DWORD2(v74) = v63 + v61;
        HIDWORD(v74) = v43;
        unsigned int v44 = *(unsigned __int16 *)(a4 + 24);
        LODWORD(v75) = v64 + v22;
        *(void *)((char *)&v75 + 4) = __PAIR64__(v42, v44);
        TNArgint Str = bed_marker_InjectFixedRefMarker(a2, &v73);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        if (*(_DWORD *)(a4 + 12) == 16)
        {
          *(_DWORD *)&v78[8] = v63 + v61;
          *(_DWORD *)&v78[12] = v60;
          int v45 = *(unsigned __int16 *)(a4 + 24);
          *(_DWORD *)&v78[16] = v64 + v22;
          *(_DWORD *)&v78[20] = v45;
          goto LABEL_63;
        }
      }
      unsigned int v48 = *(unsigned __int16 *)(a4 + 8) + v22;
      BOOL v49 = v23 + v59 >= v48;
      unsigned int v50 = v23 + v59 - v48;
      if (v50 == 0 || !v49)
      {
        int v51 = v64 + v22;
LABEL_67:
        if (v57) {
          int v52 = v56;
        }
        else {
          int v52 = v51 + *(unsigned __int16 *)(a4 + 24);
        }
        LOWORD(v80) = 0;
        TNArgint Str = bed_GetpElem(a2, 0, &v81);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        TNArgint Str = bed_GetcElem(a2, (_WORD *)&v80 + 1);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        unsigned int v53 = (unsigned __int16)v80;
        if ((unsigned __int16)v80 < HIWORD(v80))
        {
          for (unsigned int i = v81 + 16; *(i - 11) != 7 || *(i - 6) != v39 || *(i - 8) != v52; i += 16)
          {
            uint64_t v7 = 0;
            unsigned int v81 = i;
            LOWORD(v80) = ++v53;
            if (v53 >= HIWORD(v80)) {
              return v7;
            }
          }
          TNArgint Str = bed_Goto(a2, v53);
          if ((TNArgStr & 0x80000000) != 0) {
            return TNArgStr;
          }
        }
        return 0;
      }
      DWORD2(v74) = v63 + v60 + v61;
      HIDWORD(v74) = v58 - (v63 + v60);
      int v51 = v64 + v22;
      LODWORD(v75) = v51 + *(unsigned __int16 *)(a4 + 24);
      *(void *)((char *)&v75 + 4) = __PAIR64__(v39, v50);
      TNArgint Str = bed_marker_InjectFixedRefMarker(a2, &v73);
      if ((TNArgStr & 0x80000000) == 0) {
        goto LABEL_67;
      }
      return TNArgStr;
    }
  }
  else
  {
    unsigned int v39 = *(_DWORD *)(a4 + 12);
  }
  *(_OWORD *)&v78[8] = *(_OWORD *)(v81 + 6);
  *(_DWORD *)&v78[24] = v39;
  int v46 = bed_marker_InjectFixedRefMarker(a2, &v77);
  return v46 & (v46 >> 31);
}

uint64_t addOrGetTNArgStr(uint64_t a1, char *__s, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = 2370838535;
  uint64_t v17 = a1;
  if (a1)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      unsigned int v10 = *(unsigned __int16 *)(a1 + 16);
      if (!*(_WORD *)(a1 + 16))
      {
LABEL_7:
        *a3 = v10;
        unsigned __int16 v14 = strlen(__s) + 1;
        __int16 v15 = v14 + v10;
        if (*(unsigned __int16 *)(a1 + 18) >= (unsigned __int16)(v14 + v10))
        {
          uint64_t v4 = 0;
        }
        else
        {
          uint64_t v4 = datac_RequestBlock(a4, 1012, (unsigned __int16)(v14 + v10), &v17);
          if ((v4 & 0x80000000) != 0) {
            return v4;
          }
          uint64_t v6 = *(void *)(v17 + 8);
          unsigned int v10 = *(unsigned __int16 *)(v17 + 16);
        }
        memcpy((void *)(v6 + v10), __s, v14);
        *(_WORD *)(v17 + 16) = v15;
        return v4;
      }
      unsigned int v11 = 0;
      uint64_t v12 = *(const char **)(a1 + 8);
      while (strcmp(__s, v12))
      {
        uint64_t v13 = strlen(v12) + 1;
        v11 += v13;
        v12 += v13;
        if (v11 >= v10) {
          goto LABEL_7;
        }
      }
      uint64_t v4 = 0;
      *a3 = v11;
    }
  }
  return v4;
}

uint64_t utoin_IncrReplaceCurrentRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t result = 2370838535;
  __src = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        int v34 = 0;
        unsigned __int16 v32 = 0;
        uint64_t result = bed_GetpElem(a2, 0, &v36);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v35);
          if ((result & 0x80000000) == 0)
          {
            int v10 = *(_DWORD *)(v35 + 32);
            int v11 = *(_DWORD *)(v36 + 32);
            int v12 = *(unsigned __int16 *)(v35 + 36);
            uint64_t result = bed_GetcElem(a3, (_WORD *)&v34 + 1);
            if ((result & 0x80000000) == 0)
            {
              unsigned __int16 v13 = v10 - v11;
              if (HIWORD(v34))
              {
                uint64_t result = bed_GetpElem(a3, 0, &__src);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = bed_Remove(a1, v13, v12);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = bed_Goto(a1, v13);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = bed_Insert(a1, __src, HIWORD(v34));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                int v14 = HIWORD(v34);
                uint64_t v15 = a3;
                unsigned int v16 = 0;
              }
              else
              {
                unsigned int v16 = v13;
                uint64_t v15 = a1;
                int v14 = v12;
              }
              uint64_t result = bed_Remove(v15, v16, v14);
              if ((result & 0x80000000) == 0)
              {
                uint64_t v17 = v35;
                *(_DWORD *)(v35 + 36) = HIWORD(v34);
                int v18 = *(_DWORD *)(v17 + 32);
                uint64_t result = bed_GetiElem(a2, &v32);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = bed_GetcElem(a2, &v34);
                  if ((result & 0x80000000) == 0)
                  {
                    unsigned int v19 = (unsigned __int16)v34;
                    uint64_t v20 = v35;
                    int v21 = v32 + 1;
                    unsigned __int16 v32 = v21;
                    if ((unsigned __int16)v34 > (unsigned __int16)v21)
                    {
                      uint64_t v22 = v36;
                      int v23 = HIWORD(v34);
                      while (1)
                      {
                        unsigned int v24 = *(_DWORD *)(v20 + 96);
                        int v25 = *(_DWORD *)(v22 + 32) + v13;
                        if (v24 >= v25 + v12) {
                          break;
                        }
                        if (a5 && *((_DWORD *)a5 + 4) == 1 && *((_WORD *)a5 + 4) && *((_DWORD *)a5 + 3) != 1)
                        {
                          uint64_t v27 = *a5;
                          uint64_t v28 = 12 * *((unsigned __int16 *)a5 + 4);
                          while (1)
                          {
                            int v29 = *(unsigned __int16 *)(v27 + v28 - 12);
                            if (v24 >= v18 + v29) {
                              break;
                            }
                            v28 -= 12;
                            if (!v28) {
                              goto LABEL_28;
                            }
                          }
                          int v30 = v24 - v29;
                          if (*(_DWORD *)(v20 + 84) != 99) {
                            int v30 = v18;
                          }
                          int v31 = v30 + *(unsigned __int16 *)(v27 + v28 - 4);
                          *(_DWORD *)(v20 + 96) = v31;
                          if (v31 == *(_DWORD *)(v22 + 32)) {
                            goto LABEL_28;
                          }
                          int v26 = v31 + 1;
                          goto LABEL_27;
                        }
                        *(_DWORD *)(v20 + 96) = v25;
                        if (v25 != *(_DWORD *)(v22 + 32))
                        {
                          int v26 = v25 + 1;
LABEL_27:
                          *(_DWORD *)(v20 + 96) = v26;
                        }
LABEL_28:
                        v20 += 64;
                        unsigned __int16 v32 = ++v21;
                        if (v19 <= (unsigned __int16)v21) {
                          return result;
                        }
                      }
                      int v26 = v24 - v12 + v23;
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, __int16 a15, __int16 a16)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v16 = 2370838528;
  __c_3 = 0;
  __int16 __c_1 = 0;
  unsigned __int8 __c = 0;
  strcpy(v59, "xlit23");
  uint64_t v64 = 0;
  strcpy(v65, "cpextensions");
  strcpy(v58, "win936");
  *(_WORD *)&v56[1] = -1;
  if (!a3) {
    return 2370838535;
  }
  int v63 = 0;
  v56[0] = 0;
  if ((InitRsrcFunction(a1, a2, &v64) & 0x80000000) != 0) {
    return 2370838535;
  }
  *a3 = 0;
  uint64_t v24 = heap_Alloc(*(void *)(v64 + 8), 184);
  if (v24)
  {
    uint64_t v29 = v24;
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(void *)(v24 + 176) = 0;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(void *)uint64_t v24 = a1;
    *(void *)(v24 + 8) = a2;
    uint64_t v30 = v64;
    *(void *)(v24 + 16) = v64;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 32) = a7;
    *(void *)(v24 + 40) = a9;
    *(void *)(v24 + 48) = a10;
    *(_WORD *)(v24 + 56) = 0;
    *(_DWORD *)(v24 + 60) = 0;
    *(_DWORD *)(v24 + 72) = 0;
    *(_DWORD *)(v24 + 172) = 0;
    *(_DWORD *)(v24 + 144) = 0;
    *(_DWORD *)(v24 + 164) = 0;
    *(void *)(v24 + 136) = 0;
    *(void *)(v24 + 148) = 0x100000001;
    *(void *)(v24 + 80) = a4;
    *(void *)(v24 + 88) = a5;
    *(void *)(v24 + 96) = a6;
    *(void *)(v24 + 104) = a11;
    *(void *)(v24 + 112) = a12;
    *(void *)(v24 + 120) = a13;
    *(_WORD *)(v24 + 128) = a14;
    *(_WORD *)(v24 + 130) = a15;
    *(_WORD *)(v24 + 132) = a16;
    *(_DWORD *)(v24 + 176) = 0;
    *(_DWORD *)(v24 + 168) = 0;
    if (!a11)
    {
      uint64_t v37 = *(void *)(v30 + 32);
      uint64_t v38 = 1806;
      goto LABEL_36;
    }
    __int16 __c_1 = 0;
    if (((*(uint64_t (**)(void))(a7 + 96))() & 0x80000000) != 0 || !__c_1)
    {
      uint64_t v37 = *(void *)(v64 + 32);
      uint64_t v38 = 1801;
      goto LABEL_36;
    }
    if (__c_1 == 1 && __c_3)
    {
      int v31 = strchr(*__c_3, __c);
      if (v31) {
        *int v31 = 0;
      }
      __strcpy_chk();
    }
    __int16 __c_1 = 0;
    if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v29 + 40), *(void *)(v29 + 48), "fecfg", "translitdef", &__c_3, &__c_1, &__c) & 0x80000000) != 0|| !__c_1)
    {
      uint64_t v37 = *(void *)(v64 + 32);
      uint64_t v38 = 1803;
      goto LABEL_36;
    }
    if (__c_1 == 1 && __c_3)
    {
      unsigned __int16 v32 = strchr(*__c_3, __c);
      if (v32) {
        *unsigned __int16 v32 = 0;
      }
      __strcpy_chk();
    }
    __int16 __c_1 = -1;
    fecfg_fewordseg_paraunsigned int m = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v29 + 40), *(void *)(v29 + 48), "fecfg", "backtrans", &__c_3, &__c_1, &__c);
    if ((fecfg_fewordseg_param & 0x80000000) == 0)
    {
      *(_DWORD *)(v29 + 64) = __c_1 != 0;
      fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 164), (uint64_t)"fewordseg_wpcrf");
      if ((fecfg_fewordseg_param & 0x80000000) == 0)
      {
        fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 164), (uint64_t)"fewordseg_bypasshexcode");
        if ((fecfg_fewordseg_param & 0x80000000) == 0)
        {
          fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 172), (uint64_t)"fewordseg_skipCollapseIdenticalRegion");
          if ((fecfg_fewordseg_param & 0x80000000) == 0)
          {
            fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v29, (_DWORD *)(v29 + 176), (uint64_t)"fewordseg_extra_split_marker");
            if ((fecfg_fewordseg_param & 0x80000000) == 0)
            {
              if (!*(_DWORD *)(v29 + 64))
              {
                __int16 v57 = 0;
                strcpy(&v56[3], "word");
                uint64_t v40 = (*(uint64_t (**)(void, void, unsigned char *, int *))(a7 + 72))(*(void *)(v29 + 40), *(void *)(v29 + 48), &v56[3], &v63);
                if ((v40 & 0x80000000) == 0)
                {
                  if (v63)
                  {
                    unsigned __int16 v36 = 1;
LABEL_44:
                    *(_WORD *)(v29 + 56) = v36;
                    *(_DWORD *)(v29 + 60) = 0;
                    *(_WORD *)&v56[1] = -1;
                    (*(void (**)(void, void, const char *, const char *, char ***, unsigned char *, unsigned char *))(a7 + 96))(*(void *)(v29 + 40), *(void *)(v29 + 48), "fecfg", "versioninfo", &__c_3, &v56[1], v56);
                    if (*(_WORD *)&v56[1])
                    {
                      int v41 = *__c_3;
                      unsigned int v42 = strchr(*__c_3, v56[0]);
                      if (v42)
                      {
                        *unsigned int v42 = 0;
                        int v41 = *__c_3;
                      }
                      *(_DWORD *)(v29 + 60) = hasCharDic(v41);
                    }
                    *(_WORD *)&v56[1] = -1;
                    (*(void (**)(void, void, const char *, const char *, char ***, unsigned char *, unsigned char *))(a7 + 96))(*(void *)(v29 + 40), *(void *)(v29 + 48), "fecfg", "useppdomains", &__c_3, &v56[1], v56);
                    if (*(_WORD *)&v56[1])
                    {
                      int v43 = *__c_3;
                      unsigned int v44 = strchr(*__c_3, v56[0]);
                      if (v44)
                      {
                        char *v44 = 0;
                        int v43 = *__c_3;
                      }
                      BOOL v45 = strcmp(v43, "1") == 0;
                    }
                    else
                    {
                      BOOL v45 = 0;
                    }
                    uint64_t v46 = (*(uint64_t (**)(void, void, char *, int *))(a7 + 72))(*(void *)(v29 + 40), *(void *)(v29 + 48), v65, &v63);
                    if ((v46 & 0x80000000) != 0)
                    {
                      uint64_t v16 = v46;
                      goto LABEL_37;
                    }
                    if (!v63) {
                      v65[0] = 0;
                    }
                    uint64_t v47 = (*(uint64_t (**)(void, void, uint64_t, char *, char *, BOOL, char *))(*(void *)(v29 + 104) + 56))(*(void *)(v29 + 112), *(void *)(v29 + 120), v29 + 32, v59, v58, v45, v65);
                    if ((v47 & 0x80000000) == 0)
                    {
                      uint64_t v16 = 0;
                      *a3 = v29;
                      return v16;
                    }
                    uint64_t v16 = v47;
                    uint64_t v37 = *(void *)(v64 + 32);
                    uint64_t v38 = 1807;
LABEL_36:
                    log_OutPublic(v37, (uint64_t)&modPP_3, v38, 0, v25, v26, v27, v28, v54);
LABEL_37:
                    heap_Free(*(void **)(v64 + 8), v29);
                    return v16;
                  }
                  unsigned __int16 v36 = 0;
                  __int16 v57 = 0;
                  for (char i = 1; ; char i = 0)
                  {
                    strcpy(&v56[3], "word");
                    LH_itoa(v36, v55, 0xAu);
                    __strcat_chk();
                    uint64_t v40 = (*(uint64_t (**)(void, void, unsigned char *, int *))(a7 + 72))(*(void *)(v29 + 40), *(void *)(v29 + 48), &v56[3], &v63);
                    if ((v40 & 0x80000000) != 0) {
                      break;
                    }
                    if (!v63)
                    {
                      if ((i & 1) == 0) {
                        goto LABEL_44;
                      }
                      heap_Free(*(void **)(v64 + 8), v29);
                      log_OutPublic(*(void *)(v64 + 32), (uint64_t)&modPP_3, 1809, 0, v50, v51, v52, v53, v54);
                      return 2370838794;
                    }
                    ++v36;
                  }
                }
                uint64_t v49 = v40;
                heap_Free(*(void **)(v64 + 8), v29);
                return v49;
              }
              *(_WORD *)&v56[1] = -1;
              fecfg_fewordseg_paraunsigned int m = (*(uint64_t (**)(void, void, const char *, const char *, char ***, unsigned char *, unsigned char *))(a7 + 96))(*(void *)(v29 + 40), *(void *)(v29 + 48), "fecfg", "nrpart_g2p", &__c_3, &v56[1], v56);
              if ((fecfg_fewordseg_param & 0x80000000) == 0)
              {
                if (*(_WORD *)&v56[1])
                {
                  int v34 = *__c_3;
                  uint64_t v35 = strchr(*__c_3, v56[0]);
                  if (v35)
                  {
                    char *v35 = 0;
                    int v34 = *__c_3;
                  }
                  unsigned __int16 v36 = atoi(v34);
                }
                else
                {
                  unsigned __int16 v36 = 0;
                }
                goto LABEL_44;
              }
            }
          }
        }
      }
    }
    return fecfg_fewordseg_param;
  }
  return 2370838538;
}

uint64_t read_fecfg_fewordseg_param(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  memset(__c, 0, sizeof(__c));
  __int16 v10 = -1;
  uint64_t v5 = (*(uint64_t (**)(void, void, const char *, uint64_t, unsigned char *, __int16 *, unsigned char *))(a1 + 96))(*(void *)(a2 + 40), *(void *)(a2 + 48), "fecfg", a4, &__c[1], &v10, __c);
  if ((v5 & 0x80000000) == 0 && v10 == 1 && *(void *)&__c[1] != 0)
  {
    uint64_t v7 = **(const char ***)&__c[1];
    unsigned __int16 v8 = strchr(**(char ***)&__c[1], __c[0]);
    if (v8)
    {
      *unsigned __int16 v8 = 0;
      uint64_t v7 = **(const char ***)&__c[1];
    }
    if (!strcmp(v7, "yes")) {
      *a3 = 1;
    }
  }
  return v5;
}

BOOL hasCharDic(char *a1)
{
  unsigned __int16 v8 = 0;
  __endptr = a1;
  int v1 = strtol(a1, &v8, 10);
  BOOL v2 = v1 < 1 || v8 == 0;
  if (v2 || *v8 != 46) {
    return 0;
  }
  unsigned int v3 = strtol(v8 + 1, &__endptr, 10);
  BOOL result = 0;
  if ((v3 & 0x80000000) != 0 || !__endptr) {
    return result;
  }
  if (*__endptr != 46) {
    return 0;
  }
  int v5 = strtol(__endptr + 1, &v8, 10);
  BOOL result = 0;
  if (v5 < 0 || !v8) {
    return result;
  }
  if (*v8 != 46 && *v8) {
    return 0;
  }
  return v1 > 4 && v3 > 1 && v5 != 0;
}

uint64_t utoin_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v6 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v6) & 0x80000000) == 0)
  {
    uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 88))(*(void *)(a1 + 112), *(void *)(a1 + 120));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 136);
      if (v4)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v4);
        *(void *)(a1 + 136) = 0;
        *(_WORD *)(a1 + 146) = 0;
      }
      heap_Free(*(void **)(v6 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t utoin_ProcessStart(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  int v6 = 0;
  if (a1)
  {
    *(_DWORD *)(a1 + 72) = log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32)) > 4;
    uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 96))(*(void *)(a1 + 112), *(void *)(a1 + 120));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"asianasciispaceudctlookup", &v6) & 0x80000000) == 0
      && v6 == 1)
    {
      *(_DWORD *)(a1 + 168) = 1;
    }
    uint64_t v3 = paramc_ParamGet(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", (void *)(a1 + 24), 0);
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      *(_WORD *)(a1 + 160) = 2;
      if (*(_WORD *)(a1 + 146))
      {
        return 0;
      }
      else
      {
        uint64_t v5 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 120);
        *(void *)(a1 + 136) = v5;
        if (v5)
        {
          uint64_t v1 = 0;
          *(_WORD *)(a1 + 146) = 10;
        }
        else
        {
          return 2370838538;
        }
      }
    }
  }
  return v1;
}

uint64_t utoin_ProcessEnd(uint64_t a1)
{
  if (!a1) {
    return 2370838535;
  }
  uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 104))(*(void *)(a1 + 112), *(void *)(a1 + 120));
  if ((v2 & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 24)) {
      paramc_ParamRelease(*(void *)(*(void *)(a1 + 16) + 40));
    }
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v3);
      *(void *)(a1 + 136) = 0;
      *(_WORD *)(a1 + 146) = 0;
    }
  }
  return v2;
}

uint64_t utoin_NormalizeRegions(_WORD **a1, uint64_t a2, unsigned __int16 *a3)
{
  v103[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = 2370838535;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  if (!a1 || !a2) {
    return 2370838535;
  }
  uint64_t v7 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v95, 213);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  uint64_t v7 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v94, 213);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_RemoveNativeBlanks");
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = v94;
  uint64_t v9 = v95;
  v103[0] = 2;
  long long v101 = xmmword_20D62ED8C;
  uint64_t v102 = 8;
  if (!v95 || !v94) {
    goto LABEL_127;
  }
  uint64_t v7 = bed_Goto(v95, 0);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  uint64_t v7 = bed_Goto(v10, 0);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  LOWORD(v100) = 0;
  LOWORD(v96) = 0;
  uint64_t v11 = bed_GoForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
  uint64_t v12 = v11;
  if ((v11 & 0x80000000) != 0 && (v11 & 0x1FFF) != 0x14) {
    goto LABEL_177;
  }
  while ((v12 & 0x80000000) == 0)
  {
    uint64_t Backward = bed_FindBackward(v10, (unsigned int (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v100);
    if ((Backward & 0x1FFF) == 0x14)
    {
      LOWORD(v100) = -1;
    }
    else
    {
      uint64_t v12 = Backward;
      if ((Backward & 0x80000000) != 0) {
        goto LABEL_177;
      }
    }
    uint64_t Forward = bed_FindForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v96);
    if ((Forward & 0x1FFF) == 0x14)
    {
      uint64_t v7 = bed_GetcElem(v10, &v96);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_176;
      }
    }
    else
    {
      uint64_t v12 = Forward;
      if ((Forward & 0x80000000) != 0) {
        goto LABEL_177;
      }
    }
    if ((unsigned __int16)v100 != 0xFFFF)
    {
      uint64_t v7 = bed_Goto(v10, (unsigned __int16)v100);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_176;
      }
    }
    uint64_t v7 = utoin_RemoveBlankRegions(v8, v10, (unsigned __int16)v96, v9);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_176;
    }
    uint64_t v15 = bed_GoForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
    uint64_t v12 = v15;
    if ((v15 & 0x80000000) != 0 && (v15 & 0x1FFF) != 0x14) {
      goto LABEL_177;
    }
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_MergeRegions");
  uint64_t v87 = a1[2];
  uint64_t v16 = v94;
  *(void *)&long long v101 = 0;
  if (v95) {
    BOOL v17 = v94 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    goto LABEL_171;
  }
  LOWORD(v103[0]) = 0;
  uint64_t v18 = bed_GetpElem(v94, 0, &v101);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_170;
  }
  uint64_t v18 = bed_GetcElem(v16, v103);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_170;
  }
  unsigned int v21 = *a3;
  if (*a3)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    while (1)
    {
      unint64_t v24 = *((void *)a3 + 1) + (v22 << 6);
      int v25 = *(_DWORD *)v24;
      int v26 = *(_DWORD *)(v24 + 4);
      uint64_t v27 = *(unsigned __int16 *)(v24 + 8);
      uint64_t v28 = *(int **)(v24 + 16);
      uint64_t v29 = *(unsigned __int16 *)(v24 + 24);
      uint64_t v30 = *(_DWORD **)(v24 + 32);
      uint64_t v31 = *(unsigned __int16 *)(v24 + 40);
      unsigned __int16 v32 = *(int **)(v24 + 48);
      uint64_t v33 = *(unsigned int *)(v24 + 56);
      if (v33 == 1) {
        break;
      }
      if (LOWORD(v103[0]) < 2u) {
        goto LABEL_46;
      }
      uint64_t v37 = (_DWORD *)(v101 + 104);
      uint64_t v35 = 1;
      do
      {
        if (*(v37 - 5) == 7 && *v37 == v25) {
          goto LABEL_47;
        }
        ++v35;
        v37 += 16;
      }
      while (LOWORD(v103[0]) != v35);
LABEL_98:
      uint64_t v23 = ++v22;
      if (v22 >= v21) {
        goto LABEL_99;
      }
    }
    if (LOWORD(v103[0]) < 2u)
    {
LABEL_46:
      LODWORD(v38) = 1;
    }
    else
    {
      int v34 = (int *)(v101 + 84);
      uint64_t v35 = 1;
      while (1)
      {
        int v36 = *v34;
        v34 += 16;
        if (v36 == 7) {
          break;
        }
        if (LOWORD(v103[0]) == ++v35) {
          goto LABEL_98;
        }
      }
LABEL_47:
      LODWORD(v38) = v35;
    }
    if (LOWORD(v103[0]) <= (unsigned __int16)v38) {
      goto LABEL_98;
    }
    long long v85 = v32;
    unint64_t v86 = v22;
    int v39 = 0;
    unsigned __int16 v40 = 0;
    unsigned __int16 v41 = v103[0];
    int v93 = v25;
    uint64_t v92 = v23;
    int v91 = v26;
    long long v89 = v30;
    uint64_t v90 = v29;
    unsigned int v88 = v33;
    while (1)
    {
      if (v27)
      {
        unsigned int v42 = 0;
        do
        {
          unsigned __int16 v40 = v38;
          if ((unsigned __int16)(v38 - 1) > (unsigned __int16)v39)
          {
            uint64_t v43 = (unsigned __int16)(v38 - 1);
            unsigned __int16 v40 = v38;
            do
            {
              uint64_t v44 = v101 + (v43 << 6);
              if (*(_DWORD *)(v44 + 20) == 7)
              {
                int v45 = *(_DWORD *)(v44 + 40);
                uint64_t v46 = v28;
                uint64_t v47 = v27;
                while (1)
                {
                  int v48 = *v46++;
                  if (v48 == v45) {
                    break;
                  }
                  if (!--v47) {
                    goto LABEL_61;
                  }
                }
                unsigned __int16 v40 = v43;
              }
              --v43;
            }
            while ((unsigned __int16)v39 < (unsigned __int16)v43);
          }
LABEL_61:
          ++v42;
        }
        while (v42 < v27);
      }
      if (v29)
      {
        if ((unsigned __int16)(v38 + 1) < v41)
        {
          uint64_t v49 = (unsigned __int16)(v38 + 1);
          int v39 = v38;
          do
          {
            uint64_t v50 = v101 + (v49 << 6);
            if (*(_DWORD *)(v50 + 20) == 7)
            {
              int v51 = *(_DWORD *)(v50 + 40);
              uint64_t v52 = v30;
              uint64_t v53 = v29;
              while (1)
              {
                int v54 = *v52++;
                if (v54 == v51) {
                  break;
                }
                if (!--v53) {
                  goto LABEL_80;
                }
              }
              int v39 = v49;
            }
            ++v49;
          }
          while (v41 != (unsigned __int16)v49);
          goto LABEL_80;
        }
      }
      else
      {
        if (!v31) {
          goto LABEL_80;
        }
        int v39 = v38 + 1;
        if ((unsigned __int16)(v38 + 1) < v41)
        {
          uint64_t v55 = v101 + ((unint64_t)(unsigned __int16)(v38 + 1) << 6);
          if (*(_DWORD *)(v55 + 20) != 7)
          {
            while (1)
              ;
          }
          int v56 = *(_DWORD *)(v55 + 40);
          __int16 v57 = v85;
          uint64_t v58 = v31;
          do
          {
            int v59 = *v57++;
            if (v59 == v56) {
              goto LABEL_80;
            }
          }
          while (--v58);
        }
      }
      int v39 = v38;
LABEL_80:
      if (v40 != (unsigned __int16)v39)
      {
        log_OutText(*((void *)v87 + 4), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (applying mergeRule %d between markers %u and %u)", v19, v33, v20, v23);
        uint64_t v33 = v88;
        uint64_t v30 = v89;
        uint64_t v29 = v90;
        int v26 = v91;
        int v25 = v93;
        uint64_t v23 = v92;
      }
      if (v40 < (unsigned __int16)v39)
      {
        unsigned __int16 v60 = v40;
        do
        {
          if (*(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 20) == 7
            && (v26 == 3 || *(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 40) != 1))
          {
            *(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 40) = v26;
          }
          ++v60;
        }
        while (v60 <= (unsigned __int16)v39);
      }
      if (v33 != 1)
      {
        unsigned __int16 v41 = v103[0];
        LODWORD(v38) = v39 + 1;
        if (LOWORD(v103[0]) > (unsigned __int16)(v39 + 1))
        {
          uint64_t v38 = (unsigned __int16)(v39 + 1);
          int v61 = (_DWORD *)(v101 + (v38 << 6) + 40);
          while (*(v61 - 5) != 7 || *v61 != v25)
          {
            ++v38;
            v61 += 16;
            if (LOWORD(v103[0]) == v38) {
              goto LABEL_97;
            }
          }
        }
        if (LOWORD(v103[0]) > (unsigned __int16)v38) {
          continue;
        }
      }
LABEL_97:
      unsigned int v21 = *a3;
      unint64_t v22 = v86;
      goto LABEL_98;
    }
  }
LABEL_99:
  if (*((_DWORD *)a1 + 43) != 1)
  {
    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_CollapseIdenticalRegions");
    uint64_t v7 = utoin_CollapseIdenticalRegions((uint64_t)a1, v95, v94);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_176;
    }
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_LookUpWords");
  uint64_t v63 = v94;
  uint64_t v62 = v95;
  *(void *)&long long v101 = 7;
  v103[0] = 0;
  uint64_t v100 = 0;
  int v98 = 0;
  if (!v95 || !v94)
  {
LABEL_127:
    uint64_t v12 = 2370838535;
    goto LABEL_177;
  }
  uint64_t v64 = a1[10];
  if (!v64) {
    goto LABEL_137;
  }
  long long v65 = a1[2];
  __int16 v99 = 0;
  uint64_t v7 = (*((uint64_t (**)(_WORD *, _WORD *, int *))v64 + 15))(a1[11], a1[12], &v98);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  if (!v98) {
    goto LABEL_137;
  }
  if (log_HasTraceTuningDataSubscriber(*((void *)v65 + 4)))
  {
    unsigned __int16 v97 = 0;
    uint64_t v96 = 0;
    bed_GetpElem(v62, 0, &v96);
    uint64_t v7 = bed_GetcElem(v62, &v97);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_176;
    }
    log_OutTraceTuningDataBinary(*((void *)v65 + 4), 105, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-16",
      v96,
      v97);
  }
  uint64_t v66 = bed_GetcElem(v62, &v99);
  if ((v66 & 0x80000000) == 0)
  {
    uint64_t v67 = datac_RequestBlock(a2, 1029, (unsigned __int16)(v99 + 1), &v100);
    if ((v67 & 0x80000000) != 0)
    {
      uint64_t v12 = v67;
      if ((v67 & 0x1FFF) == 0x14)
      {
LABEL_137:
        uint64_t v72 = (uint64_t)a1[2];
        uint64_t v74 = v94;
        uint64_t v73 = v95;
        if (*((_DWORD *)a1 + 43) == 1) {
          goto LABEL_140;
        }
        UTOITrace(*((_DWORD *)a1 + 18), v72, v95, v94, (uint64_t)"BEFORE utoin_CollapseIdenticalRegions (second)");
        uint64_t v7 = utoin_CollapseIdenticalRegions((uint64_t)a1, v95, v94);
        if ((v7 & 0x80000000) == 0)
        {
          uint64_t v72 = (uint64_t)a1[2];
          uint64_t v74 = v94;
          uint64_t v73 = v95;
LABEL_140:
          UTOITrace(*((_DWORD *)a1 + 18), v72, v73, v74, (uint64_t)"BEFORE utoin_RemoveBlanksAtRegionBoundary");
          uint64_t v75 = (uint64_t)a1[2];
          uint64_t v77 = v94;
          uint64_t v76 = v95;
          v103[0] = 1;
          long long v101 = xmmword_20D62EE28;
          LODWORD(v102) = 0;
          uint64_t v100 = 0;
          if (!v95 || !v94) {
            goto LABEL_171;
          }
          uint64_t v18 = bed_Goto(v95, 0);
          if ((v18 & 0x80000000) == 0)
          {
            uint64_t v18 = bed_Goto(v77, 0);
            if ((v18 & 0x80000000) == 0)
            {
              LOWORD(v96) = 0;
              LOWORD(v98) = 0;
              uint64_t v78 = bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
              uint64_t v3 = v78;
              if ((v78 & 0x80000000) == 0 || (v78 & 0x1FFF) == 0x14)
              {
                while ((v3 & 0x80000000) == 0)
                {
                  uint64_t v79 = bed_FindBackward(v77, (unsigned int (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v96);
                  if ((v79 & 0x1FFF) == 0x14)
                  {
                    LOWORD(v96) = -1;
                  }
                  else
                  {
                    uint64_t v3 = v79;
                    if ((v79 & 0x80000000) != 0) {
                      goto LABEL_171;
                    }
                  }
                  uint64_t v80 = bed_FindForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v98);
                  if ((v80 & 0x1FFF) == 0x14)
                  {
                    LOWORD(v98) = -1;
                  }
                  else
                  {
                    uint64_t v3 = v80;
                    if ((v80 & 0x80000000) != 0) {
                      goto LABEL_171;
                    }
                  }
                  if ((unsigned __int16)v96 == 0xFFFF)
                  {
                    int v81 = 0;
                  }
                  else
                  {
                    uint64_t v18 = bed_GetpElem(v77, (unsigned __int16)v96, &v100);
                    if ((v18 & 0x80000000) != 0) {
                      goto LABEL_170;
                    }
                    int v81 = *(_DWORD *)(v100 + 40);
                  }
                  if ((unsigned __int16)v98 == 0xFFFF) {
                    goto LABEL_164;
                  }
                  uint64_t v18 = bed_GetpElem(v77, (unsigned __int16)v98, &v100);
                  if ((v18 & 0x80000000) != 0) {
                    goto LABEL_170;
                  }
                  if (!v81 || (int v82 = *(_DWORD *)(v100 + 40)) == 0 || v81 == v82 || v82 == 14 || v82 == 44)
                  {
LABEL_164:
                    LOWORD(v96) = 1;
                    bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v96);
                  }
                  else
                  {
                    uint64_t v18 = bed_Goto(v77, (unsigned __int16)v96);
                    if ((v18 & 0x80000000) != 0) {
                      goto LABEL_170;
                    }
                    uint64_t v18 = utoin_RemoveBlankRegions(v75, v77, (unsigned __int16)v98, v76);
                    if ((v18 & 0x80000000) != 0) {
                      goto LABEL_170;
                    }
                  }
                  uint64_t v83 = bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
                  uint64_t v3 = v83;
                  if ((v83 & 0x80000000) != 0 && (v83 & 0x1FFF) != 0x14) {
                    goto LABEL_171;
                  }
                }
                UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_MarkSingleLatinForSpell");
                uint64_t v7 = utoin_MarkSingleLatinForSpell(v94, v95, a2);
                if ((v7 & 0x80000000) == 0)
                {
                  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_SplitRegionOnWordSeparatingMarkers");
                  uint64_t v7 = utoin_SplitRegionOnWordSeparatingMarkers(v94, *((_DWORD *)a1 + 44));
                  if ((v7 & 0x80000000) == 0)
                  {
                    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_Normalize");
                    uint64_t v12 = utoin_Normalize((uint64_t)a1, v95, v94, a2);
                    if ((v12 & 0x80000000) == 0) {
                      UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"END utoin_NormalizeRegions()");
                    }
                    goto LABEL_177;
                  }
                }
                goto LABEL_176;
              }
              goto LABEL_171;
            }
          }
LABEL_170:
          uint64_t v3 = v18;
LABEL_171:
          uint64_t v12 = v3;
          goto LABEL_177;
        }
LABEL_176:
        uint64_t v12 = v7;
        goto LABEL_177;
      }
      goto LABEL_177;
    }
    uint64_t v66 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1029, v103, 213);
    if ((v66 & 0x80000000) == 0)
    {
      uint64_t v66 = bed_Goto(v62, 0);
      if ((v66 & 0x80000000) == 0)
      {
        uint64_t v66 = bed_Goto(v63, 0);
        if ((v66 & 0x80000000) == 0)
        {
          uint64_t v68 = bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v101);
          uint64_t v12 = v68;
          int v69 = v68 & 0x1FFF;
          if ((v68 & 0x80000000) != 0 && v69 != 20) {
            goto LABEL_129;
          }
          if ((v68 & 0x80000000) != 0)
          {
LABEL_123:
            if (v69 == 20) {
              uint64_t v12 = 0;
            }
            else {
              uint64_t v12 = v12;
            }
            goto LABEL_129;
          }
          while (1)
          {
            uint64_t v96 = 0;
            unsigned __int16 v97 = 0;
            uint64_t v66 = bed_GetpElem(v63, 0xFFFFu, &v96);
            if ((v66 & 0x80000000) != 0) {
              break;
            }
            unsigned int v70 = *(_DWORD *)(v96 + 40) - 2;
            if (v70 <= 4)
            {
              uint64_t v66 = ((uint64_t (*)(_WORD **, uint64_t, uint64_t, uint64_t, uint64_t))off_26C21F530[v70])(a1, v62, v63, v103[0], a2);
              if ((v66 & 0x80000000) != 0) {
                break;
              }
            }
            unsigned __int16 v97 = 1;
            bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v97);
            uint64_t v71 = bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v101);
            uint64_t v12 = v71;
            int v69 = v71 & 0x1FFF;
            if ((v71 & 0x80000000) != 0 && v69 != 20) {
              goto LABEL_129;
            }
            if ((v71 & 0x80000000) != 0) {
              goto LABEL_123;
            }
          }
        }
      }
    }
  }
  uint64_t v12 = v66;
LABEL_129:
  if (!log_HasTraceTuningDataSubscriber(*((void *)v65 + 4))) {
    goto LABEL_132;
  }
  unsigned __int16 v97 = 0;
  uint64_t v96 = 0;
  bed_GetpElem(v62, 0, &v96);
  uint64_t v12 = bed_GetcElem(v62, &v97);
  if ((v12 & 0x80000000) == 0)
  {
    log_OutTraceTuningDataBinary(*((void *)v65 + 4), 106, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-16",
      v96,
      v97);
LABEL_132:
    if (v103[0]) {
      bed_ObjClose(v103[0]);
    }
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_177;
    }
    goto LABEL_137;
  }
LABEL_177:
  if (v94) {
    bed_ObjClose(v94);
  }
  if (v95) {
    bed_ObjClose(v95);
  }
  return v12;
}

uint64_t utoin_CollapseIdenticalRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = 0;
  long long v83 = MarkerIntWord;
  long long v84 = unk_20D62EDB8;
  long long v85 = xmmword_20D62EDC8;
  long long v86 = unk_20D62EDD8;
  uint64_t result = 2370838535;
  if (a2)
  {
    if (a3)
    {
      unsigned __int16 v87 = 0;
      uint64_t result = bed_GetpElem(a3, 0, &v88);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = bed_GetcElem(a3, &v87);
        if ((result & 0x80000000) == 0)
        {
          int v6 = v87;
          if (v87)
          {
            int v7 = 0;
            uint64_t v8 = 0;
            uint64_t v9 = 0;
            uint64_t v77 = a3;
            while (1)
            {
              uint64_t v10 = v88;
              if ((unsigned __int16)v6 <= (unsigned __int16)(v8 + 1)) {
                uint64_t v11 = (unsigned __int16)(v8 + 1);
              }
              else {
                uint64_t v11 = (unsigned __int16)v6;
              }
              while (1)
              {
                uint64_t v12 = v88 + ((unint64_t)(unsigned __int16)v8 << 6);
                if (*(_DWORD *)(v12 + 20) == 7) {
                  break;
                }
                uint64_t v8 = (v8 + 1);
                if ((unsigned __int16)v8 >= (unsigned __int16)v6)
                {
                  uint64_t v8 = v11;
                  goto LABEL_14;
                }
              }
              int v7 = *(_DWORD *)(v12 + 40);
              uint64_t v9 = v8;
LABEL_14:
              uint64_t v82 = (unsigned __int16)v9;
              uint64_t v13 = v88 + ((unint64_t)(unsigned __int16)v9 << 6);
              if (*(_DWORD *)(v13 + 20) == 7
                && *(_DWORD *)(v13 + 40) == 43
                && *(_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v9 << 6) + 56))
              {
                uint64_t v8 = (v8 + 1);
                goto LABEL_108;
              }
              uint64_t v14 = v8;
              if ((unsigned __int16)v8 < (unsigned __int16)v6)
              {
                uint64_t v15 = (unsigned __int16)v8;
                unint64_t v16 = v88 + ((unint64_t)(unsigned __int16)v8 << 6) + 20;
                BOOL v17 = (int *)v16;
                while (1)
                {
                  int v18 = *v17;
                  v17 += 16;
                  if (v18 != 7 || v7 != *(_DWORD *)(v16 + 20)) {
                    break;
                  }
                  ++v15;
                  unint64_t v16 = (unint64_t)v17;
                  if ((unsigned __int16)v6 == v15)
                  {
                    LODWORD(v15) = v6;
                    break;
                  }
                }
                uint64_t v14 = v8;
                if ((unsigned __int16)v15 != (unsigned __int16)v8)
                {
                  uint64_t v19 = (v15 - 1);
                  uint64_t v14 = v19;
                  if ((unsigned __int16)v19 > (unsigned __int16)v8)
                  {
                    uint64_t v20 = v9;
                    uint64_t v21 = (unsigned __int16)v19;
                    unint64_t v22 = v88 + ((unint64_t)(unsigned __int16)v19 << 6) + 20;
                    uint64_t v23 = (int *)v22;
                    while (1)
                    {
                      int v24 = *v23;
                      v23 -= 16;
                      if (v24 == 7 && v7 == *(_DWORD *)(v22 + 20)) {
                        break;
                      }
                      --v21;
                      unint64_t v22 = (unint64_t)v23;
                      if ((unsigned __int16)v8 >= (unsigned __int16)v21)
                      {
                        uint64_t v14 = v8;
                        goto LABEL_32;
                      }
                    }
                    uint64_t v14 = v21;
LABEL_32:
                    uint64_t v9 = v20;
                  }
                }
              }
              if (v7 == 43)
              {
                uint64_t v25 = v88 + ((unint64_t)(unsigned __int16)v14 << 6);
                if (*(_DWORD *)(v25 + 20) == 7 && *(_DWORD *)(v25 + 40) == 43 && *(_DWORD *)(a1 + 168) == 1)
                {
                  uint64_t v8 = (v8 + 1);
                  int v7 = 43;
                  goto LABEL_108;
                }
              }
              if ((unsigned __int16)v14 == (unsigned __int16)v8
                || (unsigned __int16)v14 >= (unsigned __int16)v6)
              {
                goto LABEL_110;
              }
              uint64_t v26 = v88 + (v82 << 6);
              if (*(_DWORD *)(v26 + 40) == 16)
              {
                if ((unsigned __int16)v9 >= 2u
                  && (uint64_t v27 = v88 + ((unint64_t)((unsigned __int16)v9 - 1) << 6),
                      *(_DWORD *)(v27 + 20) == 998))
                {
                  if (*(_DWORD *)(v27 + 32) == *(_DWORD *)(v88 + (v82 << 6) + 32)) {
                    unsigned __int16 v28 = v9 - 1;
                  }
                  else {
                    unsigned __int16 v28 = 0;
                  }
                }
                else
                {
                  unsigned __int16 v28 = 0;
                }
                uint64_t v30 = (unsigned __int16)v9 + 1;
                if (v30 < (unsigned __int16)v6)
                {
                  uint64_t v31 = v88 + (v30 << 6);
                  if (*(_DWORD *)(v31 + 20) == 998 && *(_DWORD *)(v31 + 32) == *(_DWORD *)(v88 + (v82 << 6) + 32)) {
                    unsigned __int16 v28 = v9 + 1;
                  }
                }
                if ((unsigned __int16)v14 >= 2u
                  && (uint64_t v32 = (unsigned __int16)v14 - 1, v33 = v88 + (v32 << 6),
                                                                     *(_DWORD *)(v33 + 20) == 998))
                {
                  if (*(_DWORD *)(v33 + 32) != *(_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v14 << 6) + 32)) {
                    LOWORD(v32) = 0;
                  }
                }
                else
                {
                  LOWORD(v32) = 0;
                }
                unsigned int v34 = (unsigned __int16)v6;
                uint64_t v35 = (unsigned __int16)v14 + 1;
                if (v35 < v34)
                {
                  uint64_t v36 = v88 + (v35 << 6);
                  if (*(_DWORD *)(v36 + 20) == 998
                    && *(_DWORD *)(v36 + 32) == *(_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v14 << 6) + 32))
                  {
                    LOWORD(v32) = v14 + 1;
                  }
                }
                if ((_WORD)v32) {
                  BOOL v29 = v28 != 0;
                }
                else {
                  BOOL v29 = 0;
                }
              }
              else
              {
                BOOL v29 = 0;
                unsigned __int16 v28 = 0;
              }
              uint64_t v37 = (_DWORD *)(v88 + ((unint64_t)(unsigned __int16)v14 << 6));
              int v38 = v37[8];
              int v39 = *(_DWORD *)(v26 + 32);
              int v79 = v7;
              unsigned __int16 v78 = v28;
              BOOL v81 = v29;
              if (!*v37 && v38 == v39)
              {
                *(void *)(v88 + (v82 << 6) + 24) = *(void *)(v88
                                                               + ((unint64_t)(unsigned __int16)v14 << 6)
                                                               + 24);
                int v39 = v38;
              }
              unint64_t v80 = (unsigned __int16)v14;
              unsigned __int16 v40 = (_DWORD *)(v10 + (v82 << 6));
              v40[9] = v38 - v39 + v37[9];
              v40[7] = v37[6] - v40[6] + v37[7];
              int v41 = (unsigned __int16)v9;
              unsigned __int16 v42 = v9;
              if ((unsigned __int16)v9 <= (unsigned __int16)v14)
              {
                do
                {
                  uint64_t v43 = v42;
                  if (v41 == v42) {
                    goto LABEL_77;
                  }
                  uint64_t v44 = v88;
                  uint64_t v45 = v88 + ((unint64_t)v42 << 6);
                  unsigned int v48 = *(unsigned __int16 *)(v45 + 16);
                  uint64_t v47 = (_WORD *)(v45 + 16);
                  unsigned int v46 = v48;
                  if (!v48) {
                    goto LABEL_77;
                  }
                  uint64_t v49 = v14;
                  uint64_t v50 = v9;
                  uint64_t v51 = a1;
                  uint64_t v52 = *(void *)(a1 + 16);
                  uint64_t v53 = *(unsigned __int16 *)(v88 + (v82 << 6) + 16);
                  uint64_t result = growOffsets(v52, v88 + (v82 << 6), v46);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t v54 = (unsigned __int16)*v47;
                  uint64_t v55 = v44 + (v43 << 6);
                  uint64_t v58 = *(void *)(v55 + 8);
                  __int16 v57 = (void *)(v55 + 8);
                  uint64_t v56 = v58;
                  if (*v47)
                  {
                    int v59 = (void *)(*(void *)(v44 + (v82 << 6) + 8) + 8 * v53);
                    unsigned __int16 v60 = (uint64_t *)v56;
                    a1 = v51;
                    uint64_t v9 = v50;
                    uint64_t v14 = v49;
                    do
                    {
                      uint64_t v61 = *v60++;
                      *v59++ = v61;
                      --v54;
                    }
                    while (v54);
                  }
                  else
                  {
                    a1 = v51;
                    uint64_t v9 = v50;
                    uint64_t v14 = v49;
                    if (!v56) {
                      goto LABEL_77;
                    }
                  }
                  uint64_t v62 = *(void **)(v52 + 8);
                  uint64_t v63 = v57;
                  heap_Free(v62, v56);
                  *uint64_t v63 = 0;
                  *uint64_t v47 = 0;
LABEL_77:
                  if (v43 != (unsigned __int16)v9)
                  {
                    uint64_t v64 = *(void *)(v88 + (v43 << 6) + 48);
                    if (v64)
                    {
                      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v64);
                      *(void *)(v88 + (v43 << 6) + 48) = 0;
                    }
                  }
                  unsigned __int16 v42 = v43 + 1;
                }
                while ((unsigned __int16)(v43 + 1) <= (unsigned __int16)v14);
              }
              unint64_t v65 = v80;
              if ((unsigned __int16)v14 > (unsigned __int16)v8) {
                break;
              }
LABEL_102:
              if (!v81)
              {
                int v6 = v87;
                int v7 = v79;
LABEL_110:
                uint64_t result = 0;
                uint64_t v8 = (v8 + 1);
                goto LABEL_111;
              }
              uint64_t v73 = (long long *)(v88 + ((unint64_t)v78 << 6));
              long long v74 = v73[2];
              long long v75 = v73[3];
              long long v76 = v73[1];
              long long v83 = *v73;
              long long v84 = v76;
              long long v85 = v74;
              long long v86 = v75;
              DWORD1(v84) = 41;
              uint64_t result = bed_Goto(v77, v78 + 1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = bed_marker_InjectFixedRefMarker(v77, &v83);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = bed_GetpElem(v77, 0, &v88);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = bed_GetcElem(v77, &v87);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v6 = v87;
              int v7 = v79;
LABEL_108:
              uint64_t result = 0;
LABEL_111:
              if ((unsigned __int16)v8 >= (unsigned __int16)v6) {
                return result;
              }
            }
            unint64_t v66 = v80 << 6;
            while (1)
            {
              uint64_t v67 = v88 + v66;
              int v68 = *(_DWORD *)(v88 + v66 + 20);
              if (v68 == 7 && v81) {
                break;
              }
              if (v68 == 0x4000) {
                goto LABEL_98;
              }
              if (v68 == 7) {
                goto LABEL_96;
              }
LABEL_101:
              --v65;
              v66 -= 64;
              if ((unsigned __int16)v8 >= (unsigned __int16)v65) {
                goto LABEL_102;
              }
            }
            if (v65 >= 2
              && (uint64_t v70 = v88 + ((unint64_t)(v65 - 1) << 6), *(_DWORD *)(v70 + 20) == 998)
              && *(_DWORD *)(v70 + 32) == *(_DWORD *)(v88 + v66 + 32)
              || (int)v65 + 1 < v87
              && (uint64_t v71 = v88 + ((unint64_t)(v65 + 1) << 6), *(_DWORD *)(v71 + 20) == 998)
              && *(_DWORD *)(v71 + 32) == *(_DWORD *)(v88 + v66 + 32))
            {
              *(_DWORD *)(v67 + 20) = 41;
              goto LABEL_101;
            }
LABEL_96:
            int v72 = *(_DWORD *)(v88 + v66);
            if (v72)
            {
              if (v72 == 1)
              {
LABEL_98:
                uint64_t result = bed_Remove(v77, (unsigned __int16)v65, 1);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                --v87;
                goto LABEL_101;
              }
            }
            else
            {
              *(_DWORD *)(v67 + 20) = 999;
            }
            goto LABEL_101;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t utoin_MarkSingleLatinForSpell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v50[1] = *MEMORY[0x263EF8340];
  unsigned __int16 v49 = 0;
  unsigned int v48 = 0;
  uint64_t v47 = 0;
  uint64_t v43 = 0;
  __int16 v42 = 0;
  long long v44 = MarkerUndef;
  long long v45 = *(_OWORD *)algn_20D62EE50;
  memset(v46, 0, sizeof(v46));
  uint64_t result = bed_GetcElem(a2, &v42);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!v42) {
    return result;
  }
  uint64_t result = datac_RequestBlock(a3, 1012, 1u, &v47);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetcElem(a1, &v49);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a1, 0, &v48);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v43);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (v49 < 2u) {
    return 0;
  }
  unint64_t v7 = 1;
  uint64_t v8 = v48;
  uint64_t v9 = 21;
  int v10 = 1;
  while (1)
  {
    int v11 = v8[v9];
    if (v11 != 21) {
      break;
    }
    int v10 = v47;
    if (v47)
    {
      MarkerArgint Str = marker_getMarkerArgStr(1u);
      uint64_t v8 = v48;
      if (!strcmp(MarkerArgStr, (const char *)(*(void *)(v47 + 8) + v48[v9 + 5])))
      {
        int v11 = v8[v9];
        goto LABEL_16;
      }
      int v10 = 0;
    }
LABEL_23:
    ++v7;
    v9 += 16;
    if (v7 >= v49) {
      return 0;
    }
  }
  if (v10 != 1) {
    goto LABEL_23;
  }
LABEL_16:
  if (v11 != 7 || (v8[v9 + 5] - 3) > 5 || (v8[v9 + 4] - 1) > 3) {
    goto LABEL_22;
  }
  v50[0] = 0;
  __strncpy_chk();
  *((unsigned char *)v50 + v48[v9 + 4]) = 0;
  __int16 v13 = Utf8_Utf8NbrOfSymbols((const char *)v50);
  uint64_t v8 = v48;
  int v10 = 1;
  if (v48[v9] != 7 || (unsigned __int16)(v13 - 1) != 1) {
    goto LABEL_23;
  }
  uint64_t v14 = &v48[v9];
  if ((v48[v9 + 5] - 3) > 5)
  {
LABEL_22:
    int v10 = 1;
    goto LABEL_23;
  }
  if ((unsigned __int16)v7 < 2u)
  {
    int v17 = 0xFFFF;
  }
  else
  {
    unint64_t v15 = v7 - 1;
    unint64_t v16 = v48 + 26;
    int v17 = 0xFFFF;
    do
    {
      if (*(v16 - 5) == 7 && *v16 == 1) {
        int v17 = *(v16 - 2);
      }
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  unsigned int v18 = v14[1];
  unsigned int v19 = v14[3];
  int v20 = v14[4];
  if (v49 >= 2uLL)
  {
    int v21 = 0;
    unint64_t v22 = v48 + 25;
    uint64_t v23 = v49 - 1;
    do
    {
      if (v21) {
        break;
      }
      unsigned int v24 = *(v22 - 1);
      if (v24 > v19) {
        break;
      }
      if (*(v22 - 4) == 40)
      {
        if (v17 == 0xFFFF && v19 == *v22 + v24 || (int v21 = 0, v25 = v48[8], v17 == v25) && v24 >= v25) {
          int v21 = 1;
        }
      }
      else
      {
        int v21 = 0;
      }
      v22 += 16;
      --v23;
    }
    while (v23);
    if (v21 == 1) {
      return 0;
    }
  }
  unsigned __int16 v26 = v7 + 1;
  int v27 = 0xFFFF;
  int v28 = 0xFFFF;
  if (v49 > (unsigned __int16)(v7 + 1))
  {
    int v27 = v20 + v19;
    while (1)
    {
      uint64_t v29 = v26;
      uint64_t v30 = &v48[16 * (unint64_t)v26];
      if (v30[8] != v27)
      {
LABEL_53:
        int v27 = 0xFFFF;
        int v28 = 0xFFFF;
        goto LABEL_54;
      }
      if (v30[5] == 7)
      {
        uint64_t v31 = &v48[16 * v29];
        if (v31[10] == 1) {
          break;
        }
      }
      unsigned __int16 v26 = v29 + 1;
      if (v49 <= (unsigned __int16)(v29 + 1)) {
        goto LABEL_53;
      }
    }
    int v28 = v31[9];
  }
LABEL_54:
  int v32 = v48[8];
  if (v17 != 0xFFFF || (int v33 = v14[3], v19 != v32))
  {
    int v33 = v17;
    if (v17 != v32) {
      return 0;
    }
  }
  int v34 = v27 == 0xFFFF ? v20 + v19 : v28 + v27;
  if (v34 != v48[9] + v33) {
    return 0;
  }
  int v39 = v14[2];
  int v40 = v14[3];
  int v41 = v14[4];
  v14[5] = 14;
  DWORD1(v45) = 21;
  uint64_t v35 = v47;
  uint64_t v36 = (char *)marker_getMarkerArgStr(3u);
  uint64_t result = addOrGetTNArgStr(v35, v36, (unsigned int *)v46 + 2, a3);
  if ((result & 0x80000000) == 0)
  {
    *((void *)&v45 + 1) = v18;
    *(void *)&v46[0] = v48[v9 + 3];
    uint64_t result = bed_Goto(a1, v7);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = bed_marker_InjectFixedRefMarker(a1, &v44);
      if ((result & 0x80000000) == 0)
      {
        DWORD1(v45) = 21;
        uint64_t v37 = v47;
        int v38 = (char *)marker_getMarkerArgStr(1u);
        uint64_t result = addOrGetTNArgStr(v37, v38, (unsigned int *)v46 + 2, a3);
        if ((result & 0x80000000) == 0)
        {
          *((void *)&v45 + 1) = v39 + v18;
          *(void *)&v46[0] = (v41 + v40);
          uint64_t result = bed_marker_InjectFixedRefMarker(a1, &v44);
          if ((result & 0x80000000) == 0) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_SplitRegionOnWordSeparatingMarkers(uint64_t a1, int a2)
{
  unsigned __int16 v25 = 0;
  uint64_t v24 = 0;
  long long v20 = MarkerSetTypeOfInput;
  long long v21 = unk_20D62EC98;
  long long v22 = xmmword_20D62ECA8;
  long long v23 = unk_20D62ECB8;
  uint64_t result = bed_GetcElem(a1, &v25);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = bed_GetpElem(a1, 0, &v24);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v5 = v25;
      if (v25 >= 2u)
      {
        int v6 = 0;
        unsigned int v7 = 0;
        unsigned __int16 v8 = 0;
        uint64_t v9 = v24;
        for (int i = 1; (unsigned __int16)i < v5; ++i)
        {
          uint64_t v11 = v9 + ((unint64_t)(unsigned __int16)i << 6);
          unsigned int v12 = *(_DWORD *)(v11 + 20);
          if (v12 == 7)
          {
            unsigned int v7 = *(_DWORD *)(v11 + 24);
            uint64_t v13 = *(void *)(v11 + 8);
            if (v13) {
              int v6 = *(_DWORD *)(v13 + 4);
            }
            else {
              int v6 = 0;
            }
            unsigned __int16 v8 = i;
          }
          else if (v8)
          {
            BOOL v14 = v12 > 0x39 || ((1 << v12) & 0x3C8010124021140) == 0;
            if (!v14 || a2 == 1 && (v12 <= 0x18 ? (BOOL v19 = ((1 << v12) & 0x1050000) == 0) : (BOOL v19 = 1), !v19 || v12 == 99))
            {
              uint64_t v15 = v9 + ((unint64_t)(unsigned __int16)i << 6);
              if (v7 < *(_DWORD *)(v15 + 24) + v6)
              {
                unint64_t v16 = (_DWORD *)(v9 + ((unint64_t)v8 << 6));
                DWORD2(v22) = v16[10];
                *((void *)&v21 + 1) = (*(_DWORD *)(v15 + 24) + v6);
                LODWORD(v22) = *(_DWORD *)(v15 + 32);
                DWORD1(v22) = v16[9];
                int v17 = *(_DWORD *)(v15 + 32) - v16[8];
                v16[9] = v17;
                DWORD1(v22) -= v17;
                if (DWORD1(v22))
                {
                  int v18 = i + 1;
                  uint64_t result = bed_Goto(a1, (unsigned __int16)(i + 1));
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t result = bed_marker_InjectFixedRefMarker(a1, &v20);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t v9 = v24;
                  unsigned int v7 = *(_DWORD *)(v24 + ((unint64_t)(unsigned __int16)v18 << 6) + 24) + v6;
                  unsigned __int16 v5 = ++v25;
                  int i = v18;
                  unsigned __int16 v8 = v18;
                }
              }
            }
          }
          else
          {
            unsigned __int16 v8 = 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t utoin_Normalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v59[1] = *MEMORY[0x263EF8340];
  uint64_t v58 = 0;
  v59[0] = 7;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v4 = 2370838535;
  if (!a2 || !a3) {
    return v4;
  }
  __int16 v57 = 0;
  unsigned __int16 v54 = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = bed_GetcElem(a2, &v57);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_69;
  }
  unsigned int v11 = datac_RequestBlock(a4, 1029, (unsigned __int16)(v57 + 1), &v56);
  if ((v11 & 0x80000000) != 0)
  {
    if ((v11 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v11;
    }
  }
  uint64_t v10 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a4, 1029, &v58, 213);
  if ((v10 & 0x80000000) != 0
    || (uint64_t v10 = bed_Goto(a2, 0), (v10 & 0x80000000) != 0)
    || (uint64_t v10 = bed_Goto(a3, 0), (v10 & 0x80000000) != 0))
  {
LABEL_69:
    uint64_t v4 = v10;
    goto LABEL_70;
  }
  uint64_t v12 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v59);
  uint64_t v4 = v12;
  if ((v12 & 0x80000000) != 0 && (v12 & 0x1FFF) != 0x14)
  {
LABEL_70:
    if (v58) {
      bed_ObjClose(v58);
    }
    return v4;
  }
  if ((v12 & 0x80000000) == 0)
  {
    int v13 = 0;
    while (1)
    {
      uint64_t v53 = 0;
      __int16 v48 = 0;
      uint64_t v10 = bed_GetpElem(a3, 0xFFFFu, &v53);
      if ((v10 & 0x80000000) != 0) {
        goto LABEL_69;
      }
      int v47 = v13;
      long long v14 = v53[1];
      long long v49 = *v53;
      long long v50 = v14;
      long long v15 = v53[3];
      long long v51 = v53[2];
      long long v52 = v15;
      int v16 = *((_DWORD *)v53 + 10);
      int v17 = utoin_NormalizeOrthNativeWord;
      switch(v16)
      {
        case 1:
          int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_MarkWordBoundary;
          goto LABEL_19;
        case 2:
        case 7:
          goto LABEL_20;
        case 3:
        case 4:
        case 15:
        case 16:
          goto LABEL_18;
        case 5:
          int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
          if (*((_DWORD *)v53 + 9) > 0x60u) {
            goto LABEL_19;
          }
          BOOL v19 = (v47 & 0xFFFFFFEF) == 0;
          long long v20 = utoin_NormalizeOrthNativeText;
          long long v21 = utoin_NormalizeOrthNativeWord;
          goto LABEL_38;
        case 6:
        case 8:
          int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
          if (*((_DWORD *)v53 + 9) > 0x20u) {
            goto LABEL_19;
          }
          BOOL v19 = (v47 & 0xFFFFFFEF) == 0;
          long long v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeText;
          long long v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeWord;
LABEL_38:
          if (v19) {
            int v17 = v21;
          }
          else {
            int v17 = v20;
          }
          goto LABEL_20;
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          goto LABEL_33;
        case 14:
          goto LABEL_34;
        default:
          uint64_t v22 = (v16 - 43);
          if (v22 > 0x38) {
            goto LABEL_33;
          }
          if (((1 << (v16 - 43)) & 0x38020001) != 0)
          {
LABEL_18:
            int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeText;
LABEL_19:
            int v17 = v18;
            goto LABEL_20;
          }
          if (v22 == 1)
          {
LABEL_34:
            int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_SpellRegion;
            goto LABEL_19;
          }
          if (v22 != 56)
          {
LABEL_33:
            int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
            goto LABEL_19;
          }
LABEL_20:
          uint64_t v23 = *(void *)(v9 + 32);
          UTOIMarkerString = getUTOIMarkerString(v16);
          log_OutText(v23, (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (normalize region %s %u,%u)", v25, v26, v27, (uint64_t)UTOIMarkerString);
          uint64_t v10 = v17(a1, a2, a3, v58, a4);
          if ((v10 & 0x80000000) != 0) {
            goto LABEL_69;
          }
          uint64_t v10 = bed_Goto(a3, 0);
          if ((v10 & 0x80000000) != 0) {
            goto LABEL_69;
          }
          int v28 = DWORD2(v50);
          int v29 = HIDWORD(v50);
          int v30 = v51;
          while (1)
          {
            uint64_t v31 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v59);
            if ((v31 & 0x80000000) != 0)
            {
              uint64_t v4 = v31;
              if ((v31 & 0x1FFF) != 0x14) {
                goto LABEL_70;
              }
            }
            uint64_t v10 = bed_GetpElem(a3, 0xFFFFu, &v53);
            if ((v10 & 0x80000000) != 0) {
              goto LABEL_69;
            }
            if (v28 == *((_DWORD *)v53 + 6)
              && v29 == *((_DWORD *)v53 + 7)
              && v30 == *((_DWORD *)v53 + 8)
              && *((void *)&v51 + 1) == *((void *)v53 + 5))
            {
              break;
            }
            __int16 v48 = 1;
            bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v48);
          }
          int v32 = *((_DWORD *)v53 + 10);
          int v13 = v47;
          if ((v32 - 5) < 4) {
            goto LABEL_42;
          }
          if (v32 == 2)
          {
            int v32 = 16;
LABEL_49:
            int v13 = v32;
            goto LABEL_50;
          }
          if (v32 != 1) {
            goto LABEL_49;
          }
LABEL_42:
          int v32 = 16;
          if (!v47 || v47 == 43) {
            goto LABEL_49;
          }
LABEL_50:
          __int16 v48 = 1;
          bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v48);
          uint64_t v33 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v59);
          uint64_t v4 = v33;
          if ((v33 & 0x80000000) != 0 && (v33 & 0x1FFF) != 0x14) {
            goto LABEL_70;
          }
          if ((v33 & 0x80000000) != 0) {
            goto LABEL_53;
          }
          break;
      }
    }
  }
LABEL_53:
  uint64_t v34 = bed_GetpElem(a3, 0, &v55);
  if ((v34 & 0x80000000) != 0) {
    return v34;
  }
  uint64_t v4 = bed_GetcElem(a3, &v54);
  if ((v4 & 0x80000000) == 0)
  {
    unsigned __int16 v35 = v54;
    if (v54 >= 2u)
    {
      uint64_t v36 = 0;
      unint64_t v37 = 1;
      while (1)
      {
        if (*(_DWORD *)(v55 + v36 + 84) == 7 && !*(_DWORD *)(v55 + v36 + 100))
        {
          unsigned int v38 = *(_DWORD *)(v55 + v36 + 104);
          BOOL v39 = v38 > 7;
          int v40 = (1 << v38) & 0xA4;
          if (!v39 && v40 != 0)
          {
            uint64_t v42 = *(void *)(v55 + v36 + 72);
            if (v42)
            {
              heap_Free(*(void **)(v9 + 8), v42);
              *(void *)(v55 + v36 + 72) = 0;
              *(_WORD *)(v55 + v36 + 80) = 0;
            }
            uint64_t v4 = bed_Remove(a3, (unsigned __int16)v37, 1);
            if ((v4 & 0x80000000) != 0) {
              return v4;
            }
            log_OutText(*(void *)(v9 + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (deleted zero length entry, marker %d)", v43, v44, v45, v37);
            unsigned __int16 v35 = --v54;
          }
        }
        ++v37;
        v36 += 64;
        if (v37 >= v35) {
          goto LABEL_70;
        }
      }
    }
    goto LABEL_70;
  }
  return v4;
}

uint64_t utoin_InsertRegions(_WORD **a1, uint64_t a2)
{
  v60[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = 2370838535;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v52, 213);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v51, 213);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"BEFORE utoin_RemoveEmptyPhonemes");
  int v6 = a1[2];
  uint64_t v7 = v51;
  *(void *)__s = 0;
  if (!v51) {
    goto LABEL_87;
  }
  __src[0] = 0;
  uint64_t v5 = bed_GetpElem(v51, 0, __s);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_GetcElem(v7, __src);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  unsigned int v11 = __src[0];
  if (__src[0] >= 2u)
  {
    uint64_t v12 = 1;
    __int16 v13 = 2;
    uint64_t v14 = 160;
    uint64_t v15 = 1;
    do
    {
      uint64_t v16 = *(void *)__s + (v12 << 6);
      if (*(_DWORD *)(v16 + 20) == 7)
      {
        unint64_t v17 = v12 + 1;
        if (*(_DWORD *)(v16 + 40) == 43 && v17 < v11)
        {
          uint64_t v19 = *(void *)__s + (v12 << 6);
          long long v20 = (int *)(v19 + 32);
          long long v21 = (_DWORD *)(v19 + 36);
          uint64_t v22 = (_DWORD *)(*(void *)__s + v14);
          unsigned __int16 v23 = v13;
          while (1)
          {
            int v24 = *(v22 - 3);
            if (v24 == 999 || v24 == 7)
            {
              int v26 = *v20;
              if (*v22 >= *v20 && *v22 < (*v21 + v26)) {
                break;
              }
            }
            ++v23;
            v22 += 16;
            if (v11 == v23) {
              goto LABEL_26;
            }
          }
          if (v23 && *(_DWORD *)(*(void *)__s + ((unint64_t)v23 << 6) + 32) == v26)
          {
            *long long v21 = 0;
            log_OutText(*((void *)v6 + 4), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] zero length phoneme found at marker %d", v8, v9, v10, v15);
            unsigned int v11 = __src[0];
          }
        }
      }
      else
      {
        unint64_t v17 = v12 + 1;
      }
LABEL_26:
      ++v13;
      v14 += 64;
      uint64_t v12 = v17;
      uint64_t v15 = v17;
    }
    while (v17 < v11);
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"BEFORE utoin_InsertRegionTags");
  uint64_t v28 = v51;
  uint64_t v27 = v52;
  v60[0] = 7;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  if (!v52 || !v51) {
    goto LABEL_87;
  }
  uint64_t v5 = bed_Goto(v52, 0);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_Goto(v28, 0);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  int v56 = 0;
  uint64_t v5 = bed_GetpElem(v28, 0, &v57);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_GetcElem(v28, (_WORD *)&v56 + 1);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v29 = bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v60);
  uint64_t v2 = v29;
  if ((v29 & 0x80000000) != 0 && (v29 & 0x1FFF) != 0x14) {
    goto LABEL_87;
  }
  int v30 = 0;
  unsigned int v31 = 0;
  while ((v2 & 0x80000000) == 0)
  {
    uint64_t v54 = 0;
    unsigned __int16 v53 = 0;
    uint64_t v5 = bed_GetpElem(v28, 0xFFFFu, &v54);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    uint64_t v5 = bed_GetiElem(v28, &v53);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    uint64_t v5 = bed_GetpElem(v28, 0, &v55);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    int v32 = *(_DWORD *)(v54 + 40);
    BOOL v33 = v32 != 43 || v31 == 0;
    if (!v33 && *(_DWORD *)(v55 + ((unint64_t)v31 << 6) + 40) == 43) {
      int v30 = 15;
    }
    uint64_t v5 = utoin_PutClosingAndOpeningTag(v30, v32, __s);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    int v34 = *(_DWORD *)(v54 + 40);
    if ((v34 - 5) >= 4)
    {
      if (v34 == 2)
      {
        int v34 = 16;
LABEL_58:
        int v30 = v34;
        goto LABEL_59;
      }
      if (v34 != 1) {
        goto LABEL_58;
      }
    }
    int v34 = 16;
    if (!v30 || v30 == 43) {
      goto LABEL_58;
    }
LABEL_59:
    unsigned __int16 v35 = strlen(__s);
    if (v35)
    {
      int v36 = *(_DWORD *)(v57 + 32);
      int v37 = *(_DWORD *)(v54 + 32) - v36;
      LOWORD(v56) = *(_WORD *)(v54 + 32) - v36;
      uint64_t v5 = bed_Goto(v27, (unsigned __int16)v37);
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_86;
      }
      __strcpy_chk();
      uint64_t v5 = bed_Insert(v27, __src, v35);
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_86;
      }
      uint64_t v5 = bed_GetiElem(v28, &v56);
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_86;
      }
      uint64_t v38 = v54;
      unsigned int v39 = *(unsigned __int16 *)(v54 + 32);
      unsigned int v40 = (unsigned __int16)v56;
      unsigned int v41 = HIWORD(v56);
      if ((unsigned __int16)v56 < HIWORD(v56))
      {
        uint64_t v42 = v54;
        do
        {
          *(_DWORD *)(v42 + 32) += v35;
          v42 += 64;
          ++v40;
        }
        while (v40 < v41);
        uint64_t v54 = v42;
      }
      if (v39 > *(_DWORD *)(v57 + 32) && *(_DWORD *)(v38 - 32) == v39)
      {
        uint64_t v43 = (_DWORD *)(v38 - 44);
        do
        {
          if (*v43 == 36) {
            v43[3] = *(_DWORD *)(v38 + 32);
          }
          int v44 = *(v43 - 13);
          v43 -= 16;
        }
        while (v44 == v39);
      }
    }
    unsigned int v31 = v53;
    LOWORD(v56) = 1;
    bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v56);
    uint64_t v45 = bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v60);
    uint64_t v2 = v45;
    if ((v45 & 0x80000000) != 0 && (v45 & 0x1FFF) != 0x14) {
      goto LABEL_87;
    }
  }
  __s[0] = 0;
  if (v30)
  {
    if ((v30 - 3) > 1)
    {
      uint64_t v47 = 1;
      unsigned int v46 = __s;
    }
    else
    {
      __s[0] = 17;
      unsigned int v46 = &__s[1];
      uint64_t v47 = 2;
    }
    *unsigned int v46 = 31;
    __s[v47] = 0;
  }
  unsigned __int16 v48 = strlen(__s);
  if (!v48
    || (unsigned __int16 v49 = v48, v5 = bed_GetcElem(v27, &v56), (v5 & 0x80000000) == 0)
    && (uint64_t v5 = bed_Goto(v27, (unsigned __int16)v56), (v5 & 0x80000000) == 0)
    && (__strcpy_chk(), uint64_t v5 = bed_Insert(v27, __src, v49), (v5 & 0x80000000) == 0))
  {
    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"AFTER utoin_InsertRegionTags");
    uint64_t v2 = 0;
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v2 = v5;
LABEL_87:
  if (v51) {
    bed_ObjClose(v51);
  }
  if (v52) {
    bed_ObjClose(v52);
  }
  return v2;
}

uint64_t utoin_RemoveBlankRegions(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v32[1] = *MEMORY[0x263EF8340];
  int v31 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  v32[0] = 1;
  uint64_t result = bed_GetpElem(a2, 0, &v30);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetcElem(a2, (_WORD *)&v31 + 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
  unsigned int v9 = (unsigned __int16)v31;
  if ((unsigned __int16)v31 < a3)
  {
    uint64_t result = bed_GetpElem(a2, (unsigned __int16)v31, &v29);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    BOOL v10 = 0;
    unsigned int v9 = (unsigned __int16)v31;
    unsigned int v11 = (_DWORD *)(v29 + 64);
    do
    {
      if (v10
        || (unint64_t)v11 >= v29
                                  + ((unint64_t)HIWORD(v31) << 6)
                                  - ((unint64_t)(unsigned __int16)v31 << 6))
      {
        break;
      }
      unsigned int v12 = v11[8];
      unsigned int v13 = *(_DWORD *)(v29 + 36) + *(_DWORD *)(v29 + 32);
      if (v12 == v13 && v11[5] == 7)
      {
        unsigned int v14 = v11[10];
        BOOL v10 = v14 <= 0x2C && ((1 << v14) & 0x10000001C000) != 0;
      }
      else
      {
        BOOL v10 = 0;
      }
      v11 += 16;
    }
    while (v12 <= v13);
    if (v10)
    {
      uint64_t result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
      goto LABEL_37;
    }
  }
  if ((result & 0x80000000) != 0 || v9 >= a3)
  {
LABEL_37:
    if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
    {
      int v28 = bed_Goto(a2, (unsigned __int16)a3);
      return v28 & (v28 >> 31);
    }
    return result;
  }
  while (1)
  {
    uint64_t result = bed_GetpElem(a2, (unsigned __int16)v9, &v29);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = bed_Remove(a4, (unsigned __int16)(*(_WORD *)(v29 + 32) - *(_DWORD *)(v30 + 32)), *(unsigned __int16 *)(v29 + 36));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v15 = v29;
    uint64_t v16 = HIWORD(v31);
    unsigned __int16 v17 = v31;
    if ((uint64_t)(HIWORD(v31) - (unint64_t)(unsigned __int16)v31) >= 2)
    {
      unint64_t v18 = v29 + 64;
      int v19 = *(_DWORD *)(v29 + 36);
      do
      {
        unsigned int v20 = *(_DWORD *)(v18 + 32);
        int v21 = *(_DWORD *)(v15 + 32);
        unsigned int v22 = v19 + v21;
        if (v20 == v19 + v21 && *(_DWORD *)(v18 + 20) == 7 && *(_DWORD *)(v18 + 40) != 43)
        {
          *(_DWORD *)(v18 + 24) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v18 + 28) += *(_DWORD *)(v15 + 28);
          uint64_t v23 = v30;
          uint64_t v24 = *(unsigned __int16 *)(v18 + 16);
          uint64_t result = growOffsets(a1, v18, 1u);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v25 = (_DWORD *)(*(void *)(v18 + 8) + 8 * v24);
          _DWORD *v25 = *(_DWORD *)(v15 + 24) - *(_DWORD *)(v23 + 24);
          v25[1] = *(_DWORD *)(v15 + 28);
          unsigned int v20 = *(_DWORD *)(v18 + 32);
          uint64_t v15 = v29;
          int v21 = *(_DWORD *)(v29 + 32);
          int v19 = *(_DWORD *)(v29 + 36);
          uint64_t v16 = HIWORD(v31);
          unsigned __int16 v17 = v31;
          unsigned int v22 = v19 + v21;
        }
        if (v20 >= v22) {
          int v26 = v20 - v19;
        }
        else {
          int v26 = v21;
        }
        *(_DWORD *)(v18 + 32) = v26;
        v18 += 64;
      }
      while (v18 < v15 + (v16 << 6) - ((unint64_t)v17 << 6));
    }
    uint64_t v27 = *(void *)(v15 + 8);
    if (v27)
    {
      heap_Free(*(void **)(a1 + 8), v27);
      *(void *)(v29 + 8) = 0;
      unsigned __int16 v17 = v31;
    }
    uint64_t result = bed_Remove(a2, v17, 1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    --HIWORD(v31);
    LOWORD(a3) = a3 - 1;
    uint64_t result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
    if ((result & 0x80000000) == 0)
    {
      LOWORD(v9) = v31;
      if ((unsigned __int16)v31 < (unsigned __int16)a3) {
        continue;
      }
    }
    goto LABEL_37;
  }
}

uint64_t growOffsets(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = heap_Realloc(v6, v5, (8 * (*(unsigned __int16 *)(a2 + 16) + (unint64_t)a3)) | 1);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t result = 0;
      *(void *)(a2 + 8) = v8;
      *(_WORD *)(a2 + 16) += v3;
      return result;
    }
  }
  else
  {
    uint64_t v10 = heap_Calloc(v6, a3, 9);
    *(void *)(a2 + 8) = v10;
    if (v10)
    {
      uint64_t result = 0;
      *(_WORD *)(a2 + 16) = v3;
      return result;
    }
  }
  return 2370838538;
}

uint64_t utoin_LookUpWordsInNativeRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  int v55 = 0;
  int v54 = 0;
  __int16 v53 = 0;
  long long v49 = MarkerSetTypeOfInput2;
  long long v50 = unk_20D62EDF8;
  uint64_t result = 2370838535;
  long long v51 = xmmword_20D62EE08;
  long long v52 = unk_20D62EE18;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  if (!a3) {
    return result;
  }
  unsigned __int16 v56 = 0;
  uint64_t result = bed_GetpElem(a3, 0, &v57);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetcElem(a3, &v56);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a3, 0, &v60);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v59);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a3, 0xFFFFu, &v58);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetiElem(a3, (_WORD *)&v55 + 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v10 = 0;
  int v48 = *(_DWORD *)(v58 + 40);
  int v11 = *(_DWORD *)(v58 + 24);
  unint64_t v12 = *(unsigned __int16 *)(v58 + 16);
  char v13 = 1;
  if (*(_DWORD *)(a1 + 168) == 1 && *(_WORD *)(v58 + 16))
  {
    uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v12 + 1, 3);
    if (!v14) {
      return 2370838538;
    }
    uint64_t v10 = (_WORD *)v14;
    uint64_t v15 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v12 + 1, 9);
    uint64_t result = 2370838538;
    if (!v15) {
      return result;
    }
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(v58 + 8);
    if (v12 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v12;
    }
    do
    {
      *(void *)(v15 + v16) = *(void *)(v17 + v16);
      v16 += 8;
    }
    while (8 * v18 != v16);
    uint64_t v19 = 0;
    LOWORD(v20) = 0;
    int v21 = 0;
    uint64_t v22 = v58;
    uint64_t v23 = 4;
    do
    {
      if (!v19)
      {
        unsigned int v24 = **(_DWORD **)(v22 + 8);
        if (v24 > *(_DWORD *)(v22 + 24))
        {
          v21 += v24;
          int v20 = **(_DWORD **)(v22 + 8);
        }
      }
      uint64_t v25 = v19 + 1;
      if (v19 + 1 >= v12)
      {
        LOWORD(v26) = *(_WORD *)(v22 + 36) - v21;
      }
      else
      {
        int v26 = *(_DWORD *)(*(void *)(v22 + 8) + v23 + 4)
            - (*(_DWORD *)(*(void *)(v22 + 8) + v23 - 4)
             + *(_DWORD *)(*(void *)(v22 + 8) + v23));
        v21 += v26;
      }
      v10[v19] = v26;
      v23 += 8;
      ++v19;
    }
    while (v18 != v25);
    uint64_t v47 = v15;
    if ((_WORD)v20)
    {
      memmove(v10 + 1, v10, 2 * v12);
      char v13 = 0;
      _WORD *v10 = v20;
      unsigned __int16 v27 = v12 + 1;
      LODWORD(v12) = (unsigned __int16)(v12 + 1);
      goto LABEL_30;
    }
    char v13 = 1;
  }
  else
  {
    uint64_t v47 = 0;
  }
  unsigned __int16 v27 = v12;
LABEL_30:
  uint64_t v28 = v60;
  int v29 = *(_DWORD *)(v58 + 32) - *(_DWORD *)(v60 + 32);
  int v30 = v29 + *(_DWORD *)(v58 + 36);
  if (*(_DWORD *)(a1 + 168) && v27)
  {
    int v43 = v11;
    char v44 = v13;
    unint64_t v31 = 0;
    unint64_t v45 = v12;
    uint64_t v46 = v27;
    while (1)
    {
      uint64_t v32 = (unsigned __int16)v31;
      int v33 = (__int16)v10[(unsigned __int16)v31];
      uint64_t v28 = v60;
      if (v33 < 1) {
        break;
      }
      unsigned int v34 = (unsigned __int16)(v33 + v29);
      if (v34 >= (unsigned __int16)v30) {
        unsigned __int16 v35 = v30;
      }
      else {
        unsigned __int16 v35 = v34;
      }
      if ((utoin_LookUpSubWordsInNativeRegion(a1, a2, a3, a5, v60, (uint64_t)v57, v56, v59, v48, v58, v29, v35, &v55, &v54, &v53) & 0x80000000) != 0)goto LABEL_61; {
      LOWORD(v29) = v55 + v35;
      }
      v30 += (unsigned __int16)v55;
      ++v31;
      if (v54 == 1 && v31 < v45)
      {
        unsigned int v36 = (unsigned __int16)(v29 - v53);
        if ((bed_Goto(a2, v36) & 0x80000000) != 0
          || (bed_Insert(a2, " ", 1) & 0x80000000) != 0
          || (bed_GetpElem(a3, 0, &v57) & 0x80000000) != 0
          || (bed_GetcElem(a3, &v56) & 0x80000000) != 0)
        {
          goto LABEL_61;
        }
        uint64_t v37 = (uint64_t)v57;
        if (v56 >= 2uLL)
        {
          unint64_t v38 = v57[8] + (unint64_t)v36;
          unsigned int v39 = v57 + 24;
          uint64_t v40 = v56 - 1;
          do
          {
            unint64_t v41 = *v39;
            if (v38 <= v41) {
              *unsigned int v39 = v41 + 1;
            }
            v39 += 16;
            --v40;
          }
          while (v40);
        }
        ++*(_DWORD *)(v37 + 36);
        if ((bed_Goto(a3, 1u) & 0x80000000) != 0) {
          goto LABEL_60;
        }
        DWORD2(v51) = 1;
        if (v44)
        {
          uint64_t v42 = (uint64_t)v57;
          *((void *)&v50 + 1) = (*(_DWORD *)(v47 + 8 * v31) + v57[6]);
        }
        else
        {
          *((void *)&v50 + 1) = (*(_DWORD *)(v47 + 8 * v32) + v43);
          uint64_t v42 = (uint64_t)v57;
        }
        LODWORD(v51) = *(_DWORD *)(v42 + 32) + v36;
        DWORD1(v51) = 1;
        if ((bed_marker_InjectFixedRefMarker(a3, &v49) & 0x80000000) != 0
          || (bed_GetpElem(a3, 0, &v57) & 0x80000000) != 0
          || (bed_GetcElem(a3, &v56) & 0x80000000) != 0)
        {
          goto LABEL_60;
        }
        LOWORD(v29) = v29 + 1;
        ++v30;
      }
      if (v31 == v46)
      {
        uint64_t v28 = v60;
        break;
      }
    }
  }
  utoin_LookUpSubWordsInNativeRegion(a1, a2, a3, a5, v28, (uint64_t)v57, v56, v59, v48, v58, v29, v30, &v55, &v54, &v53);
LABEL_60:
  if (v10) {
LABEL_61:
  }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v10);
  if (v47) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v47);
  }
  return 0;
}

uint64_t utoin_LookUpWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v6 = 2370838538;
  uint64_t v29 = 0;
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v26 = 0;
        __src = 0;
        uint64_t v28 = 0;
        uint64_t result = bed_GetpElem(a3, 0, &v31);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = bed_GetpElem(a2, 0, &v30);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = bed_GetpElem(a3, 0xFFFFu, &v29);
            if ((result & 0x80000000) == 0)
            {
              int v12 = *(_DWORD *)(v29 + 32);
              int v13 = *(_DWORD *)(v31 + 32);
              size_t v14 = *(unsigned __int16 *)(v29 + 36);
              __src = 0;
              uint64_t v15 = *(unsigned __int16 *)(a1 + 130);
              if (v14 <= v15)
              {
                LOWORD(v26) = v14;
                uint64_t v16 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v15 + 1, 1);
                uint64_t v25 = (uint64_t)v16;
                if (v16
                  && (memmove(v16, (const void *)(v30 + (unsigned __int16)(v12 - v13)), v14),
                      (__src = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, *(unsigned __int16 *)(a1 + 132)+ *(unsigned __int16 *)(a1 + 132)* (unint64_t)*(unsigned __int16 *)(a1 + 128)+ 1)) != 0))
                {
                  uint64_t v6 = utoin_LookUpUdctWord(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t)&v25, 1, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v24);
                  if ((v6 & 0x80000000) == 0 && HIDWORD(v26))
                  {
                    if (HIDWORD(v26) == 43 || HIDWORD(v26) == 16) {
                      *(_DWORD *)(v29 + 40) = HIDWORD(v26);
                    }
                    uint64_t v21 = bed_Insert(a4, __src, (unsigned __int16)v28);
                    if ((v21 & 0x80000000) == 0)
                    {
                      if (LH_stricmp(*(char **)(a1 + 24), v24)) {
                        uint64_t v22 = v24;
                      }
                      else {
                        uint64_t v22 = 0;
                      }
                      uint64_t v21 = utoin_ReplaceCurrentRegion(a2, a3, a4, a5, v22);
                    }
                    uint64_t v6 = v21;
                  }
                }
                else
                {
                  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 1923, 0, v17, v18, v19, v20, v23);
                }
                if (v25) {
                  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v25);
                }
                if (__src) {
                  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)__src);
                }
                return v6;
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_LookUpSubWordsInNativeRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, char *a8, int a9, uint64_t a10, unsigned __int16 a11, unsigned __int16 a12, _WORD *a13, _DWORD *a14, _WORD *a15)
{
  uint64_t v91 = a6;
  __int16 v90 = a7;
  long long v89 = a8;
  int v88 = 0;
  if (!a6) {
    return 2370838535;
  }
  uint64_t v20 = a15;
  size_t __n = 0;
  __src = 0;
  size_t v87 = 0;
  *a14 = 0;
  *a13 = 0;
  *a15 = 0;
  if (a9 != 3) {
    goto LABEL_10;
  }
  uint64_t v22 = *(unsigned int *)(a10 + 32);
  if (!utoin_multiwordInLatinRegion(a6, a7, (_WORD *)&v88 + 1, (unsigned __int16 *)&v88, *(_DWORD *)(a10 + 32), *(_DWORD *)(a10 + 36) + (int)v22))
  {
    if (*(_DWORD *)(a1 + 72) == 1) {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no multiword found for latin region %d and %d)", v23, v24, v25, v22);
    }
LABEL_10:
    uint64_t v27 = 0;
    unsigned int v28 = 0;
    int v82 = 0;
    goto LABEL_11;
  }
  int v26 = *(_DWORD *)(a5 + 32);
  uint64_t v27 = (*(_DWORD *)(a6 + ((unint64_t)HIWORD(v88) << 6) + 32) - v26);
  unsigned int v28 = *(_DWORD *)(a6 + ((unint64_t)(unsigned __int16)v88 << 6) + 32) - v26;
  if (*(_DWORD *)(a1 + 72) == 1) {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (multiword found for latin region %d and %d)", v23, v24, v25, *(unsigned int *)(a6 + ((unint64_t)HIWORD(v88) << 6) + 32));
  }
  int v82 = 1;
LABEL_11:
  __dst = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 130) + 1, 1);
  uint64_t v34 = *(void *)(a1 + 16);
  if (__dst)
  {
    __src = (char *)heap_Calloc(*(void **)(v34 + 8), 1, *(unsigned __int16 *)(a1 + 132)+ *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 128)+ 1);
    if (!__src)
    {
LABEL_15:
      uint64_t v34 = *(void *)(a1 + 16);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 72) == 1)
    {
      unsigned __int16 v35 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 130) + 1, 1);
      if (!v35) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned __int16 v35 = 0;
    }
    uint64_t v80 = a2;
    unsigned int v36 = a12;
    if (a11 >= a12) {
      goto LABEL_17;
    }
    unsigned int v77 = v28;
    uint64_t v75 = a5;
    unsigned int v37 = a11;
    uint64_t v78 = a3;
    uint64_t v79 = a4;
    while (1)
    {
      if (a9 == 3)
      {
        unsigned int v38 = strlen(v89);
        unsigned int v39 = (unsigned __int16)v37;
        uint64_t v40 = v27;
        if ((unsigned __int16)v37 >= (unsigned __int16)v36)
        {
          BOOL v42 = 1;
        }
        else
        {
          do
          {
            int v41 = utf8_BelongsToSet(2u, v89, v39, v38);
            BOOL v42 = v41 == 1;
            if (v41 != 1) {
              break;
            }
            v37 += utf8_determineUTF8CharLength(v89[(unsigned __int16)v37]);
            unsigned int v39 = (unsigned __int16)v37;
          }
          while ((unsigned __int16)v37 < (unsigned __int16)v36);
        }
        if ((a11 == (unsigned __int16)v37
           || (a11 >= (unsigned __int16)v37 ? (char v45 = 1) : (char v45 = v42),
               (v45 & 1) == 0 && utf8_BelongsToSet(2u, v89, v39 - 1, v38) == 1))
          && (unsigned __int16 v44 = v37 + utf8_determineUTF8CharLength(v89[(unsigned __int16)v37]),
              v44 < (unsigned __int16)v36))
        {
          uint64_t v27 = v40;
          a4 = v79;
          while (1)
          {
            unsigned int v43 = v44;
            if (utf8_BelongsToSet(2u, v89, v44, v38)) {
              break;
            }
            unsigned __int16 v44 = v43 + utf8_determineUTF8CharLength(v89[v43]);
            if (v44 >= (unsigned __int16)v36) {
              goto LABEL_49;
            }
          }
          if (!v43)
          {
LABEL_49:
            unsigned int v43 = v36;
            goto LABEL_50;
          }
          if (utf8_BelongsToSet(2u, v89, v43, v38) != 1) {
            unsigned int v43 = v36;
          }
LABEL_50:
          uint64_t v20 = a15;
        }
        else
        {
          unsigned int v43 = v36;
          uint64_t v20 = a15;
          uint64_t v27 = v40;
          a4 = v79;
        }
      }
      else
      {
        unsigned int v43 = v36;
      }
      if (v82 == 1
        && ((unsigned __int16)v43 > (unsigned __int16)v27
         || (unsigned __int16)v37 >= (unsigned __int16)v27))
      {
        if ((unsigned __int16)v37 < (unsigned __int16)v27
          && (unsigned __int16)v43 > (unsigned __int16)v27)
        {
          unsigned int v48 = v27;
        }
        else
        {
          unsigned int v48 = v43;
        }
        if ((unsigned __int16)v37 >= (unsigned __int16)v27) {
          unsigned int v43 = v77;
        }
        else {
          unsigned int v43 = v48;
        }
        if ((unsigned __int16)v37 < (unsigned __int16)v27)
        {
          int v46 = 0;
        }
        else
        {
          unsigned int v37 = v27;
          int v46 = 1;
        }
      }
      else
      {
        int v46 = 0;
      }
      int v49 = (unsigned __int16)v43 - (unsigned __int16)v37;
      if (v49 < 1) {
        goto LABEL_17;
      }
      if (v49 > (unsigned __int16)*v20) {
        *uint64_t v20 = v43 - v37;
      }
      if (!v89) {
        goto LABEL_17;
      }
      int v81 = v46;
      if (*(unsigned __int16 *)(a1 + 130) >= (unsigned __int16)(v43 - v37)) {
        size_t v50 = (unsigned __int16)(v43 - v37);
      }
      else {
        size_t v50 = *(unsigned __int16 *)(a1 + 130);
      }
      LOWORD(__n) = v50;
      memmove(__dst, &v89[(unsigned __int16)v37], v50);
      unsigned int v51 = (unsigned __int16)__n;
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        strncpy(v35, (const char *)__dst, (unsigned __int16)__n);
        v35[(unsigned __int16)__n] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (lookup User Dict for \"%s\")", v52, v53, v54, (uint64_t)v35);
      }
      if ((utoin_LookUpUdctWord(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t)&__dst, a9 == 3, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v83) & 0x80000000) != 0)goto LABEL_17; {
      if (a9 == 3)
      }
      {
        int v58 = HIDWORD(__n);
      }
      else
      {
        while (1)
        {
          int v58 = HIDWORD(__n);
          BOOL v59 = (unsigned __int16)__n < 2u || (unsigned __int16)__n > v51;
          if (v59 || HIDWORD(__n) != 0) {
            break;
          }
          LOWORD(__n) = utf8_GetPreviousUtf8Offset((uint64_t)__dst, (unsigned __int16)__n);
          if ((utoin_LookUpUdctWord(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t)&__dst, a9 == 3, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v83) & 0x80000000) != 0)goto LABEL_17; {
        }
          }
      }
      if (v58 > 15)
      {
        if (v58 == 16)
        {
          if (!LH_stricmp(*(char **)(a1 + 24), "jpj") && HIDWORD(__n) != 2)
          {
LABEL_100:
            if (a9 == 3 && *(_DWORD *)(a1 + 72) == 1) {
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no (valid) User Dict entry found)", v55, v56, v57, v74);
            }
            if (a9 == 3) {
              unsigned int v37 = v43;
            }
            v37 += utf8_determineUTF8CharLength(v89[(unsigned __int16)v37]);
            uint64_t v20 = a15;
            goto LABEL_116;
          }
        }
        else if (v58 != 43)
        {
          goto LABEL_100;
        }
      }
      else if (v58 == 2)
      {
        if (*__src <= 0x7Eu) {
          HIDWORD(__n) = 3;
        }
      }
      else if (v58 != 3)
      {
        goto LABEL_100;
      }
      unsigned int v76 = v27;
      *a15 = 0;
      *a14 = 1;
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        strncpy(v35, __src, (unsigned __int16)v87);
        v35[(unsigned __int16)v87] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (found User Dict entry \"%s\")", v61, v62, v63, (uint64_t)v35);
      }
      if (LH_stricmp(*(char **)(a1 + 24), v83)) {
        uint64_t v64 = v83;
      }
      else {
        uint64_t v64 = 0;
      }
      if ((utoin_ReplaceWord(v80, v78, (unsigned __int16)v37, (uint64_t)&__dst, 1, a4, v64) & 0x80000000) != 0) {
        goto LABEL_17;
      }
      if ((bed_GetpElem(v80, 0, &v89) & 0x80000000) != 0) {
        goto LABEL_17;
      }
      uint64_t v65 = a4;
      int v66 = (unsigned __int16)v87;
      int v67 = (unsigned __int16)__n;
      *a13 = v87 + *a13 - __n;
      if ((bed_GetpElem(v78, 0, &v91) & 0x80000000) != 0 || (bed_GetcElem(v78, &v90) & 0x80000000) != 0) {
        goto LABEL_17;
      }
      v37 += v66;
      unsigned int v36 = v66 + v36 - v67;
      a4 = v65;
      uint64_t v20 = a15;
      uint64_t v27 = v76;
LABEL_116:
      if (v81)
      {
        uint64_t v68 = v91;
        int v69 = *(_DWORD *)(v75 + 32);
        if (utoin_multiwordInLatinRegion(v91, v90, (_WORD *)&v88 + 1, (unsigned __int16 *)&v88, v69 + (unsigned __int16)v37, *(_DWORD *)(a10 + 32) + (unsigned __int16)v36))
        {
          uint64_t v73 = *(unsigned int *)(v68 + ((unint64_t)HIWORD(v88) << 6) + 32);
          uint64_t v27 = (v73 - v69);
          unsigned int v77 = *(_DWORD *)(v68 + ((unint64_t)(unsigned __int16)v88 << 6) + 32) - v69;
          if (*(_DWORD *)(a1 + 72) == 1) {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (multiword found for latin region %d and %d)", v70, v71, v72, v73);
          }
          int v82 = 1;
        }
        else
        {
          if (*(_DWORD *)(a1 + 72) == 1) {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no further multiwords found in latin region %d and %d)", v70, v71, v72, v69 + (unsigned __int16)v37);
          }
          uint64_t v27 = 0;
          unsigned int v77 = 0;
          int v82 = 0;
        }
        a4 = v79;
        uint64_t v20 = a15;
      }
      if ((unsigned __int16)v37 >= (unsigned __int16)v36) {
        goto LABEL_17;
      }
    }
  }
LABEL_16:
  log_OutPublic(*(void *)(v34 + 32), (uint64_t)&modPP_3, 1923, 0, v30, v31, v32, v33, v74);
  unsigned __int16 v35 = 0;
LABEL_17:
  if (__dst)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)__dst);
    __dst = 0;
  }
  if (__src)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)__src);
    __src = 0;
  }
  if (v35) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v35);
  }
  return 0;
}

uint64_t utoin_multiwordInLatinRegion(uint64_t a1, unsigned int a2, _WORD *a3, unsigned __int16 *a4, unsigned int a5, unsigned int a6)
{
  if (!a2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (_DWORD *)(a1 + 104);
  for (__int16 i = 1; ; ++i)
  {
    uint64_t v9 = a1 + (v6 << 6);
    if (*(_DWORD *)(v9 + 20) == 32 && *(_DWORD *)(v9 + 40) == 1)
    {
      unsigned int v10 = *(_DWORD *)(a1 + (v6 << 6) + 32);
      BOOL v11 = v10 < a5 || v10 > a6;
      if (!v11 && v6 + 1 < (unint64_t)a2) {
        break;
      }
    }
LABEL_21:
    ++v6;
    v7 += 16;
    if (v6 == a2) {
      return 0;
    }
  }
  int v13 = v7;
  unsigned __int16 v14 = i;
  while (1)
  {
    if (*(v13 - 5) == 32 && !*v13)
    {
      unsigned int v15 = *(v13 - 2);
      if (v15 >= v10 && v15 <= a6) {
        break;
      }
    }
    ++v14;
    v13 += 16;
    if (a2 == v14) {
      goto LABEL_21;
    }
  }
  *a3 = v6;
  *a4 = v14;
  return 1;
}

uint64_t utoin_ReplaceCurrentRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v30 = 0;
  __src = 0;
  *(void *)uint64_t v25 = 0;
  long long v26 = MarkerSetLang;
  long long v27 = unk_20D62ECD8;
  memset(v28, 0, sizeof(v28));
  if (!a3) {
    return 2370838535;
  }
  int v32 = 0;
  unsigned __int16 v29 = 0;
  uint64_t result = bed_GetpElem(a2, 0, &v34);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v33);
    if ((result & 0x80000000) == 0)
    {
      int v11 = *(_DWORD *)(v33 + 32);
      int v12 = *(_DWORD *)(v34 + 32);
      unsigned int v13 = *(unsigned __int16 *)(v33 + 36);
      if (a4 && a5)
      {
        uint64_t result = datac_RequestBlock(a4, 1012, 1u, v25);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        DWORD1(v27) = 36;
        uint64_t result = addOrGetTNArgStr(*(uint64_t *)v25, a5, (unsigned int *)v28 + 2, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        *((void *)&v27 + 1) = *(unsigned int *)(v33 + 24);
        *(void *)&v28[0] = *(unsigned int *)(v33 + 32);
        uint64_t result = bed_Goto(a2, 1u);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_marker_InjectFixedRefMarker(a2, &v26);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        v33 += 64;
      }
      uint64_t result = bed_GetcElem(a3, (_WORD *)&v32 + 1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned __int16 v14 = v11 - v12;
      if (HIWORD(v32))
      {
        if (v13 >= HIWORD(v32)) {
          unsigned int v15 = HIWORD(v32);
        }
        else {
          unsigned int v15 = v13;
        }
        uint64_t result = bed_GetpElem(a3, 0, &__src);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_GetpElem(a1, 0, &v30);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned __int16 v16 = 0;
        if (v15)
        {
          uint64_t v17 = (unsigned __int8 *)__src + 1;
          uint64_t v18 = (unsigned __int8 *)(v30 + v14 + 1);
          while (*(v18 - 1) == *((unsigned __int8 *)__src + v16) && *v18 == *v17)
          {
            ++v18;
            ++v16;
            ++v17;
            if (v15 <= v16)
            {
              unsigned __int16 v16 = v15;
              break;
            }
          }
        }
        uint64_t result = bed_Remove(a1, v14, v13);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_Goto(a1, v14);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_Insert(a1, __src, HIWORD(v32));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_Remove(a3, 0, HIWORD(v32));
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        uint64_t result = bed_Remove(a1, (unsigned __int16)(v11 - v12), v13);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned __int16 v16 = 0;
      }
      int v19 = HIWORD(v32);
      *(_DWORD *)(v33 + 36) = HIWORD(v32);
      uint64_t result = bed_GetiElem(a2, &v29);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = bed_GetcElem(a2, &v32);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v20 = (unsigned __int16)v32;
          int v21 = v29 + 1;
          if ((unsigned __int16)v32 <= (unsigned __int16)(v29 + 1))
          {
            return 0;
          }
          else
          {
            uint64_t v22 = v34;
            int v23 = HIWORD(v32);
            uint64_t v24 = (_DWORD *)(v33 + 96);
            do
            {
              if (v19 != v13 && *v24 > v14 + v16 + *(_DWORD *)(v22 + 32)) {
                *uint64_t v24 = *v24 - v13 + v23;
              }
              uint64_t result = 0;
              ++v21;
              v24 += 16;
            }
            while (v20 > (unsigned __int16)v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_NormalizeOrthNativeWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return utoin_NormalizeOrthNative(a1, a2, a3, a4, 1, a5);
}

uint64_t utoin_RemoveRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t result = 2370838535;
  uint64_t v21 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          int v20 = 0;
          uint64_t result = bed_GetpElem(a3, 0, &v23);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = bed_GetpElem(a2, 0, &v22);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = bed_GetpElem(a3, 0xFFFFu, &v21);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v8 = *(_DWORD *)(v21 + 32) - *(_DWORD *)(v23 + 32);
                int v9 = *(unsigned __int16 *)(v21 + 36);
                uint64_t result = bed_Remove(a2, v8, v9);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(v21 + 36) = 0;
                  uint64_t result = bed_GetiElem(a3, (_WORD *)&v20 + 1);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = bed_GetcElem(a3, &v20);
                    if ((result & 0x80000000) == 0)
                    {
                      unsigned int v10 = (unsigned __int16)v20;
                      int v11 = HIWORD(v20) + 1;
                      if ((unsigned __int16)v20 <= (unsigned __int16)(HIWORD(v20) + 1))
                      {
                        return 0;
                      }
                      else
                      {
                        uint64_t v12 = v23;
                        unsigned int v13 = (unsigned int *)(v21 + 100);
                        do
                        {
                          unsigned int v14 = *(v13 - 1);
                          int v15 = *(_DWORD *)(v12 + 32) + v8;
                          if (v14 >= v15 + v9)
                          {
                            *(v13 - 1) = v14 - v9;
                          }
                          else
                          {
                            *(v13 - 1) = v15;
                            unsigned int v16 = *v13 + v15;
                            unsigned int v17 = v9 + v8 + *(_DWORD *)(v12 + 32);
                            BOOL v18 = v16 >= v17;
                            unsigned int v19 = v16 - v17;
                            if (v18) {
                              *unsigned int v13 = v19;
                            }
                            else {
                              *unsigned int v13 = 0;
                            }
                          }
                          uint64_t result = 0;
                          ++v11;
                          v13 += 16;
                        }
                        while (v10 > (unsigned __int16)v11);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_NormalizeOrthNativeText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return utoin_NormalizeOrthNative(a1, a2, a3, a4, 0, a5);
}

uint64_t utoin_TranscodeText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return utoin_Transcode(a1, a2, a3, a4, 0);
}

uint64_t utoin_TranscodeWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return utoin_Transcode(a1, a2, a3, a4, 1);
}

uint64_t utoin_MarkWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          uint64_t result = bed_Insert(a4, &szWORD_END_0, 1);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = bed_Insert(a4, &szWORD_BEG, 1);
            if ((result & 0x80000000) == 0)
            {
              return utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_SpellRegion(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v5 = 2370838535;
  uint64_t v23 = 0;
  __int16 v21 = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v22 = 0;
    uint64_t v11 = a1[2];
    uint64_t v12 = datac_RequestBlock(a5, 1012, 1u, &v22);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    uint64_t v12 = bed_GetpElem(a3, 0, &v25);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    int v13 = *(_DWORD *)(v25 + 32);
    uint64_t v12 = bed_GetpElem(a2, 0, &v24);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    uint64_t v12 = bed_GetpElem(a3, 0xFFFFu, &v23);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      size_t v14 = *(unsigned __int16 *)(v23 + 36);
      if (*(_WORD *)(v23 + 36))
      {
        int v20 = *(_DWORD *)(v23 + 32);
        int v15 = (void *)heap_Alloc(*(void *)(v11 + 8), (unsigned __int16)(v14 + 1));
        if (v15)
        {
          unsigned __int16 v16 = v20 - v13;
          unsigned int v17 = v15;
          bzero(v15, (unsigned __int16)(v14 + 1));
          memmove(v17, (const void *)(v24 + v16), v14);
          uint64_t v18 = (*(uint64_t (**)(void, void, void *, size_t, size_t, uint64_t, uint64_t, uint64_t, __int16, __int16 *, BOOL))(a1[13] + 72))(a1[14], a1[15], v17, v14, v14, a4, a5, v22, 1012, &v21, *(_DWORD *)(v23 + 40) == 44);
          if ((v18 & 0x80000000) == 0) {
            uint64_t v18 = utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
          }
          uint64_t v5 = v18;
          heap_Free(*(void **)(v11 + 8), (uint64_t)v17);
        }
        else
        {
          return 2370838538;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t utoin_NormalizeOrthNative(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v107 = 0;
  v108[0] = 0;
  uint64_t v106 = 0;
  __int16 v105 = 0;
  uint64_t v104 = 0;
  uint64_t v99 = 0;
  unsigned __int16 v98 = 0;
  uint64_t v96 = 0;
  unsigned __int16 v97 = 0;
  long long v100 = MarkerUndef;
  long long v101 = *(_OWORD *)algn_20D62EE50;
  uint64_t v6 = 2370838535;
  long long v102 = xmmword_20D62EE60;
  long long v103 = unk_20D62EE70;
  if (a1 && a2 && a3 && a4)
  {
    __int16 v95 = 0;
    uint64_t v13 = *(void *)(a1 + 16);
    if (!*(_DWORD *)(a1 + 164))
    {
      uint64_t v14 = datac_RequestBlock(a6, 1012, 1u, &v99);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
    }
    uint64_t v14 = bed_GetpElem(a3, 0, v108);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    unsigned int v15 = *(_DWORD *)(v108[0] + 32);
    int v93 = *(_DWORD *)(v108[0] + 24);
    uint64_t v14 = bed_GetpElem(a2, 0, &v107);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    uint64_t v14 = bed_GetpElem(a3, 0xFFFFu, &v104);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    unsigned int v92 = v15;
    uint64_t v90 = v13;
    uint64_t v91 = a3;
    int v17 = *(_DWORD *)(v104 + 32);
    int v16 = *(_DWORD *)(v104 + 36);
    uint64_t v18 = (void *)heap_Alloc(*(void *)(v13 + 8), (unsigned __int16)(v16 + 1));
    if (!v18) {
      return 2370838538;
    }
    unsigned int v19 = v18;
    __leunint64_t n = (unsigned __int16)v16;
    bzero(v18, (unsigned __int16)(v16 + 1));
    uint64_t v20 = (unsigned __int16)v16;
    memmove(v19, (const void *)(v107 + (unsigned __int16)(v17 - v92)), (unsigned __int16)v16);
    uint64_t v21 = v99;
    if (*(_DWORD *)(a1 + 164)) {
      int v88 = 0;
    }
    else {
      int v88 = *(unsigned __int16 *)(v99 + 16);
    }
    uint64_t v23 = v90;
    uint64_t v22 = v91;
    *(void *)(a1 + 148) = 0x100000001;
    uint64_t v24 = (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, unsigned __int16 *, int, unsigned __int16 **, uint64_t))(*(void *)(a1 + 104) + 64))(*(void *)(a1 + 112), *(void *)(a1 + 120), v19, v20, v20, a2, v91, a4, a6, v21, 1012, &v98, a5, &v97, a1 + 136);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_102;
    }
    uint64_t v6 = bed_GetcElem(a2, &v105);
    if ((v6 & 0x80000000) != 0 || !v105) {
      goto LABEL_103;
    }
    uint64_t v24 = bed_GetpElem(a2, 0, &v106);
    if ((v24 & 0x80000000) != 0)
    {
LABEL_102:
      uint64_t v6 = v24;
      goto LABEL_103;
    }
    int v25 = *(_DWORD *)(v104 + 32);
    int v85 = *(_DWORD *)(v104 + 24);
    uint64_t v14 = bed_GetpElem(v91, 0, &v96);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    uint64_t v26 = bed_GetcElem(v91, &v95);
    uint64_t v27 = v26;
    if ((v26 & 0x80000000) != 0)
    {
      return v26;
    }
    else
    {
      uint64_t v78 = v19;
      uint64_t v28 = *(void *)(v104 + 8);
      uint64_t v29 = *(unsigned __int16 *)(v104 + 16);
      if (*(_WORD *)(v104 + 16))
      {
        uint64_t v30 = *(unsigned __int16 *)(v104 + 16);
        uint64_t v31 = *(_DWORD **)(v104 + 8);
        do
        {
          *v31 += v93 - v85;
          v31 += 2;
          --v30;
        }
        while (v30);
      }
      uint64_t v80 = v29;
      uint64_t v32 = v98;
      uint64_t v33 = (uint64_t *)(a1 + 136);
      if (v98)
      {
        __int16 v34 = 0;
        unsigned __int16 v35 = v25 - v92;
        int v36 = (unsigned __int16)(v25 - v92);
        unsigned int v37 = v98 + v36;
        unsigned __int16 v38 = v25 - v92;
        do
        {
          if (*(unsigned char *)(v106 + v38) == 16) {
            ++v34;
          }
          ++v38;
        }
        while (v37 > v38);
        unsigned __int16 v87 = 0;
        int v39 = 0;
        uint64_t v40 = 0;
        unsigned __int16 v94 = 0;
        uint64_t v79 = (int *)(v28 + 4);
        uint64_t v86 = 1;
        int v41 = (unsigned __int16)(v25 - v92);
        size_t v42 = __len;
        int v82 = v41;
        do
        {
          if (*(unsigned char *)(v106 + v35) != 16)
          {
LABEL_38:
            uint64_t v45 = v40;
            goto LABEL_96;
          }
          if (v37 <= v35)
          {
LABEL_37:
            if (*(_DWORD *)(a1 + 164)) {
              goto LABEL_38;
            }
            uint64_t v46 = v27;
            uint64_t v47 = v32;
            uint64_t v48 = v23;
            size_t v49 = v42;
            unsigned __int16 v44 = strlen((const char *)(*(void *)(v99 + 8) + (v88 + v94)
                                                             * *(unsigned __int16 *)(v99 + 2)));
            size_t v42 = v49;
            uint64_t v23 = v48;
            uint64_t v33 = (uint64_t *)(a1 + 136);
            uint64_t v22 = v91;
            uint64_t v32 = v47;
            uint64_t v27 = v46;
          }
          else
          {
            unsigned __int16 v43 = v35;
            while (*(unsigned char *)(v106 + v43) != 17)
            {
              if (v37 <= ++v43)
              {
                if (*(unsigned char *)(v106 + v43) != 17) {
                  goto LABEL_37;
                }
                break;
              }
            }
            unsigned __int16 v44 = v43 + ~v35;
          }
          if (!v44)
          {
            uint64_t v45 = v40;
            int v36 = v82;
            goto LABEL_96;
          }
          unsigned int v50 = *(unsigned __int16 *)(a1 + 144);
          BOOL v51 = (unsigned __int16)v40 < v50;
          if ((_WORD)v40 && v50 > (unsigned __int16)v40)
          {
            uint64_t v52 = *v33;
            while (*(_DWORD *)(v52 + 12 * ((unsigned __int16)v40 - 1) + 4) == 1
                 && *(_DWORD *)(v52 + 12 * (unsigned __int16)v40 + 4) == 1)
            {
              uint64_t v40 = (v40 + 1);
              if (v50 <= (unsigned __int16)v40)
              {
                BOOL v51 = 0;
                goto LABEL_50;
              }
            }
            BOOL v51 = 1;
          }
LABEL_50:
          uint64_t v45 = (v40 + 1);
          if (v50 <= (unsigned __int16)(v40 + 1)) {
            unsigned __int16 v53 = v40 + 1;
          }
          else {
            unsigned __int16 v53 = *(_WORD *)(a1 + 144);
          }
          unsigned __int16 v54 = v40;
          while (v50 > ++v54)
          {
            if (*(_DWORD *)(*v33 + 12 * v54 - 8) != 1 || *(_DWORD *)(*v33 + 12 * v54 + 4) != 1) {
              goto LABEL_59;
            }
          }
          unsigned __int16 v54 = v53;
LABEL_59:
          if (v51)
          {
            uint64_t v55 = *v33;
            __int16 v56 = v42;
            if (v50 != v54) {
              __int16 v56 = *(_WORD *)(v55 + 12 * v54);
            }
            int v57 = *(unsigned __int16 *)(v55 + 12 * (unsigned __int16)v40);
            LOWORD(v55) = v56 - v57;
            uint64_t v58 = v80;
            goto LABEL_69;
          }
          uint64_t v58 = v80;
          if (*(_DWORD *)(a1 + 148) == 1)
          {
            if (v34 != 1)
            {
              int v57 = 0;
              uint64_t v45 = v40;
              LOWORD(v55) = v44 / *(_WORD *)(a1 + 160);
              goto LABEL_69;
            }
            int v57 = 0;
            LODWORD(v55) = *(_DWORD *)(v104 + 28);
          }
          else
          {
            int v57 = 0;
            LOWORD(v55) = 0;
          }
          uint64_t v45 = v40;
LABEL_69:
          int v59 = (unsigned __int16)v55;
          int v60 = 0;
          if (v58)
          {
            uint64_t v61 = v58;
            uint64_t v62 = v79;
            do
            {
              unsigned int v63 = *(v62 - 1);
              if (v63 > (unsigned __int16)v55 + v57 + v39) {
                break;
              }
              unsigned int v64 = v39 + v57;
              if (v63 == v39 + v57)
              {
                v39 += *v62;
                unsigned int v64 = v39 + v57;
              }
              if (v63 > v64 && v63 <= v64 + (unsigned __int16)v55) {
                int v60 = *v62;
              }
              v62 += 2;
              --v61;
            }
            while (v61);
          }
          int v84 = v60;
          int v66 = v85 + v87 + v57 + v39;
          DWORD2(v101) = v66;
          HIDWORD(v101) = (unsigned __int16)v55;
          unsigned int v81 = v41 + v92;
          LODWORD(v102) = v41 + v92;
          DWORD1(v102) = v44;
          if (*(_DWORD *)(a1 + 164))
          {
            __int16 v83 = 0;
          }
          else
          {
            DWORD1(v101) = 39;
            DWORD2(v102) = v88 + v94;
            __int16 v83 = strlen((const char *)(*(void *)(v99 + 8)
                                      + DWORD2(v102) * *(unsigned __int16 *)(v99 + 2)));
            uint64_t v67 = bed_marker_InjectFixedRefMarker(v22, &v100);
            if ((v67 & 0x80000000) != 0)
            {
              uint64_t v6 = v67;
LABEL_107:
              unsigned int v19 = v78;
              goto LABEL_103;
            }
          }
          DWORD1(v101) = 41;
          *((void *)&v102 + 1) = 0;
          uint64_t v27 = bed_marker_InjectFixedRefMarker(v22, &v100);
          uint64_t v71 = v86;
          if ((v27 & 0x80000000) != 0) {
            goto LABEL_106;
          }
          if (v97)
          {
            if (*v97 >= (unsigned __int16)v86)
            {
              int v72 = v97[(unsigned __int16)v86];
            }
            else
            {
              log_OutText(*(void *)(v23 + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (missing POS for normalized word %d", v68, v69, v70, (unsigned __int16)v86);
              int v72 = 0;
            }
            DWORD1(v101) = 14;
            DWORD2(v101) = v66;
            if (*(_DWORD *)(a1 + 148) == 1) {
              __int16 v73 = v59;
            }
            else {
              __int16 v73 = 0;
            }
            unsigned int v74 = v81;
            if (v102 == v92) {
              unsigned int v74 = v92;
            }
            HIDWORD(v101) = v59;
            *(void *)&long long v102 = v74;
            DWORD2(v102) = v72;
            uint64_t v27 = bed_marker_InjectFixedRefMarker(v22, &v100);
            if ((v27 & 0x80000000) != 0) {
              goto LABEL_106;
            }
            v87 += v73;
            uint64_t v71 = (v86 + 1);
          }
          size_t v42 = __len;
          uint64_t v33 = (uint64_t *)(a1 + 136);
          int v36 = v82;
          uint64_t v86 = v71;
          v39 += v84;
          v94 += v83 + 1;
          uint64_t v32 = v98;
LABEL_96:
          int v41 = ++v35;
          unsigned int v37 = v36 + v32;
          uint64_t v40 = v45;
        }
        while (v36 + (int)v32 > v35);
      }
      if (*(unsigned __int16 *)(a1 + 146) < 0x15u)
      {
LABEL_106:
        uint64_t v6 = v27;
        goto LABEL_107;
      }
      uint64_t v75 = v27;
      uint64_t v76 = heap_Realloc(*(uint64_t **)(v23 + 8), *v33, 120);
      uint64_t v6 = 2370838538;
      unsigned int v19 = v78;
      if (v76)
      {
        *(void *)(a1 + 136) = v76;
        *(_WORD *)(a1 + 146) = 10;
        uint64_t v6 = v75;
      }
LABEL_103:
      heap_Free(*(void **)(v23 + 8), (uint64_t)v19);
      if (v97) {
        heap_Free(*(void **)(v23 + 8), (uint64_t)v97);
      }
    }
  }
  return v6;
}

uint64_t utoin_Transcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = 2370838538;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v89 = 0;
  uint64_t v83 = 0;
  long long v84 = MarkerUndef;
  long long v85 = *(_OWORD *)algn_20D62EE50;
  long long v86 = xmmword_20D62EE60;
  long long v87 = unk_20D62EE70;
  uint64_t v6 = 2370838535;
  if (a1 && a2 && a3 && a4)
  {
    unsigned __int16 v82 = 0;
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = bed_GetpElem(a3, 0, &v91);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetpElem(a2, 0, &v90);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetpElem(a3, 0, &v83);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetcElem(a3, &v82);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetpElem(a3, 0xFFFFu, &v89);
    if ((v13 & 0x80000000) != 0)
    {
      return v13;
    }
    else
    {
      int v14 = *(_DWORD *)(v91 + 32);
      unsigned int v16 = *(_DWORD *)(v89 + 32);
      int v15 = *(_DWORD *)(v89 + 36);
      int v17 = *(_DWORD *)(v89 + 24);
      unsigned int v80 = *(_DWORD *)(v89 + 40);
      uint64_t v18 = *(void *)(v89 + 8);
      uint64_t v19 = *(unsigned __int16 *)(v89 + 16);
      if (*(_WORD *)(v89 + 16))
      {
        int v20 = *(_DWORD *)(v91 + 24) - v17;
        uint64_t v21 = *(unsigned __int16 *)(v89 + 16);
        uint64_t v22 = *(_DWORD **)(v89 + 8);
        do
        {
          *v22 += v20;
          v22 += 2;
          --v21;
        }
        while (v21);
      }
      if ((_WORD)v15)
      {
        uint64_t v76 = v18;
        uint64_t v78 = v19;
        int v79 = v17;
        unsigned __int16 v88 = v15 + 1;
        uint64_t v23 = (char *)heap_Alloc(*(void *)(v12 + 8), (unsigned __int16)(v15 + 1));
        if (v23)
        {
          unsigned int v74 = v16;
          unsigned __int16 v24 = v16 - v14;
          int v25 = v23;
          bzero(v23, v88--);
          *(_WORD *)(a1 + 144) = 0;
          *(void *)(a1 + 148) = 0x100000001;
          uint64_t v26 = utoin_TranscodeLatinText((void *)a1, v12, v90 + v24, (unsigned __int16)v15, v25, &v88, a1 + 136, v80);
          if ((v26 & 0x80000000) != 0)
          {
            uint64_t v41 = (uint64_t)v25;
          }
          else
          {
            __s = v25;
            if (!a5 || (uint64_t v26 = bed_Insert(a4, &szWORD_BEG, 1), (v26 & 0x80000000) == 0))
            {
              int v27 = strlen(v25);
              uint64_t v28 = heap_Alloc(*(void *)(v12 + 8), (v27 + 1));
              if (v28)
              {
                uint64_t v29 = (void *)v28;
                size_t v30 = strlen(v25);
                bzero(v29, v30 + 1);
                uint64_t v31 = strcpy((char *)v29, v25);
                unsigned __int16 v32 = strlen(v31);
                uint64_t v33 = bed_Insert(a4, v29, v32);
                uint64_t v73 = (uint64_t)v29;
                if ((v33 & 0x80000000) != 0
                  || a5 && (uint64_t v33 = bed_Insert(a4, &szWORD_END_0, 1), (v33 & 0x80000000) != 0)
                  || (uint64_t v33 = utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0), (v33 & 0x80000000) != 0))
                {
LABEL_93:
                  uint64_t v5 = v33;
                }
                else
                {
                  if (v80 == 16)
                  {
                    __int16 v34 = (uint64_t *)(a1 + 136);
                    unsigned __int16 v35 = 0;
                    if (v82 >= 2uLL)
                    {
                      unsigned int v36 = v15 + v74;
                      unsigned int v37 = (_DWORD *)(v83 + 100);
                      uint64_t v38 = v82 - 1;
                      do
                      {
                        unsigned int v39 = *(v37 - 1);
                        if (v39 > v36) {
                          break;
                        }
                        BOOL v40 = *(v37 - 4) == 998 && v39 >= v74;
                        if (v40 && *v37 + v39 <= v36) {
                          ++v35;
                        }
                        v37 += 16;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else
                  {
                    unsigned __int16 v35 = 0;
                    __int16 v34 = (uint64_t *)(a1 + 136);
                  }
                  if (*(_DWORD *)(v89 + 40) != 43)
                  {
                    unint64_t v42 = *(unsigned __int16 *)(a1 + 144);
                    if (*(_WORD *)(a1 + 144))
                    {
                      int v43 = 0;
                      unint64_t v44 = 0;
                      int v45 = 0;
                      unsigned int v77 = (int *)(v76 + 4);
                      unsigned int v81 = v35;
                      while ((unsigned __int16)v44 < (unsigned __int16)v42)
                      {
                        unint64_t v46 = (unsigned __int16)v44;
                        if (*(_DWORD *)(*v34 + 12 * (unsigned __int16)v44 + 4) != 1)
                        {
                          int v50 = 1;
                          goto LABEL_54;
                        }
                        uint64_t v47 = (int *)(*v34 + 12 * (unsigned __int16)v44 + 16);
                        unsigned int v48 = v74;
                        while ((unsigned __int16)v42 - 1 != v46)
                        {
                          int v49 = *v47;
                          v47 += 3;
                          ++v46;
                          if (v49 != 1)
                          {
                            int v50 = v46 < (unsigned __int16)v42;
                            goto LABEL_55;
                          }
                        }
                        int v50 = 0;
                        unint64_t v46 = v42;
LABEL_55:
                        unint64_t v44 = (v46 + 1);
                        unsigned __int16 v51 = v46 + 1;
                        if ((unsigned __int16)v42 > (unsigned __int16)(v46 + 1)) {
                          unsigned __int16 v51 = v42;
                        }
                        unsigned __int16 v52 = v46;
                        while (1)
                        {
                          unsigned int v53 = ++v52;
                          if (v52 >= (unsigned __int16)v42) {
                            break;
                          }
                          if (*(_DWORD *)(*v34 + 12 * v52 + 4) != 1) {
                            goto LABEL_62;
                          }
                        }
                        unsigned __int16 v52 = v51;
LABEL_62:
                        if (v50)
                        {
                          uint64_t v54 = *v34;
                          uint64_t v55 = (unsigned __int16 *)(*v34 + 12 * (unsigned __int16)v46);
                          int v50 = v55[4];
                          if (v52 == (unsigned __int16)v42)
                          {
                            unsigned __int16 v56 = *(_WORD *)(v54 + 12 * (v53 - 1) + 8);
                            int v57 = &v88;
                          }
                          else
                          {
                            int v57 = (unsigned __int16 *)(v54 + 12 * v53 + 8);
                            unsigned __int16 v56 = v55[4];
                          }
                          int v58 = *v55;
                          unsigned __int16 v60 = *v57 - v56;
                          int v59 = *(unsigned __int16 *)(v54 + 12 * (unsigned __int16)v46 + 2);
                        }
                        else
                        {
                          int v58 = 0;
                          int v59 = 0;
                          unsigned __int16 v60 = 0;
                          unint64_t v44 = v46;
                        }
                        int v61 = v60;
                        uint64_t v62 = v78;
                        if (v78)
                        {
                          int v63 = 0;
                          unsigned int v64 = v77;
                          int v65 = v58 + v60;
                          do
                          {
                            unsigned int v66 = *(v64 - 1);
                            if (v66) {
                              BOOL v67 = v66 > v65 + v43;
                            }
                            else {
                              BOOL v67 = 0;
                            }
                            if (v67) {
                              break;
                            }
                            unsigned int v68 = v43 + v58;
                            if (v66 == v43 + v58)
                            {
                              int v43 = *v64;
                              unsigned int v68 = *v64 + v58;
                            }
                            if (v66 > v68 && v66 <= v68 + v61) {
                              int v63 = *v64;
                            }
                            v64 += 2;
                            --v62;
                          }
                          while (v62);
                        }
                        else
                        {
                          int v63 = 0;
                        }
                        DWORD1(v85) = 41;
                        DWORD2(v85) = v79 + v58 + v43;
                        HIDWORD(v85) = v63 + v59;
                        LODWORD(v86) = v48 + v50;
                        DWORD1(v86) = v61;
                        if (v81 <= 1)
                        {
                          uint64_t v33 = bed_marker_InjectFixedRefMarker(a3, &v84);
                          if ((v33 & 0x80000000) != 0) {
                            goto LABEL_93;
                          }
                        }
                        uint64_t v13 = bed_GetpElem(a3, 0, &v83);
                        if ((v13 & 0x80000000) != 0) {
                          return v13;
                        }
                        uint64_t v6 = bed_GetcElem(a3, &v82);
                        if ((v6 & 0x80000000) != 0) {
                          return v6;
                        }
                        v43 += v63;
                        ++v45;
                        unint64_t v42 = *(unsigned __int16 *)(a1 + 144);
                        __int16 v34 = (uint64_t *)(a1 + 136);
                        if (v42 <= (unsigned __int16)v45) {
                          goto LABEL_98;
                        }
                      }
                      int v50 = 0;
                      unint64_t v46 = v44;
LABEL_54:
                      unsigned int v48 = v74;
                      goto LABEL_55;
                    }
                  }
                  uint64_t v6 = 0;
LABEL_98:
                  if (*(unsigned __int16 *)(a1 + 146) >= 0x15u)
                  {
                    uint64_t v72 = heap_Realloc(*(uint64_t **)(v12 + 8), *v34, 120);
                    uint64_t v71 = (uint64_t)__s;
                    if (v72)
                    {
                      *(void *)(a1 + 136) = v72;
                      *(_WORD *)(a1 + 146) = 10;
                      uint64_t v5 = v6;
                    }
                    goto LABEL_95;
                  }
                  uint64_t v5 = v6;
                }
                uint64_t v71 = (uint64_t)__s;
LABEL_95:
                heap_Free(*(void **)(v12 + 8), v71);
                uint64_t v41 = v73;
                goto LABEL_96;
              }
              uint64_t v41 = (uint64_t)v25;
LABEL_96:
              heap_Free(*(void **)(v12 + 8), v41);
              return v5;
            }
            uint64_t v41 = (uint64_t)v25;
          }
          uint64_t v5 = v26;
          goto LABEL_96;
        }
        return 2370838538;
      }
      else
      {
        return 0;
      }
    }
  }
  return v6;
}

uint64_t utoin_TranscodeLatinText(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, unsigned __int16 *a6, uint64_t a7, unsigned int a8)
{
  int v59 = 0;
  uint64_t result = 2370838535;
  if (a3 && a6 && *a6)
  {
    if (a4)
    {
      unsigned int v14 = 0;
      unsigned int v15 = 0;
      int v16 = 0;
      int v17 = 0;
      uint64_t v54 = a1;
      uint64_t v55 = a3 + 1;
      int v58 = a6;
      while (1)
      {
        uint64_t v18 = (unsigned char *)(a3 + (unsigned __int16)v17);
        unsigned int v19 = *v18;
        if (v19 - 9 <= 4)
        {
          uint64_t v20 = v14 + 1;
          if (v20 >= a4 || v19 != 13 || *(unsigned char *)(a3 + v20) != 10)
          {
            int v22 = 0;
            a5[(unsigned __int16)v16] = 32;
            goto LABEL_33;
          }
          int v21 = 0;
          int v22 = 0;
          goto LABEL_34;
        }
        if (((v19 & 0xDF) - 65) < 0x1Au
          || (v19 != 32 ? (BOOL v23 = (v19 - 48) >= 0xAu) : (BOOL v23 = 0), !v23))
        {
          int v22 = 0;
          a5[(unsigned __int16)v16] = v19;
          goto LABEL_33;
        }
        unsigned int v24 = a8;
        if (a8 <= 0x3C)
        {
          if (((1 << a8) & 0x1000080000000140) != 0) {
            goto LABEL_26;
          }
          unsigned int v24 = a8;
          if (a8 == 16)
          {
            if (v19 == 195 && (*(unsigned __int8 *)(a3 + v14 + 1) | 0x20) == 0xBC)
            {
              int v22 = 0;
              a5[(unsigned __int16)v16] = 118;
              ++v17;
              goto LABEL_33;
            }
            goto LABEL_26;
          }
        }
        if (v24 - 70 >= 3)
        {
          int v59 = 0;
          unsigned __int16 v45 = utf8_determineUTF8CharLength(v19);
          if (*v18 == 227
            && (uint64_t v46 = a3 + v14, *(unsigned __int8 *)(v46 + 1) == 128)
            && *(unsigned __int8 *)(v46 + 2) == 128)
          {
            int v59 = (unsigned __int8 *)heap_Alloc(*(void *)(a2 + 8), 2);
            *(_WORD *)int v59 = 32;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void, unsigned __int8 **))(v54[13] + 80))(v54[14], v54[15], a3 + (unsigned __int16)v17, v45, &v59);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          if (v59)
          {
            a5[(unsigned __int16)v16] = *v59;
            int v21 = 1;
          }
          else
          {
            int v21 = 0;
          }
          int v26 = 1;
          goto LABEL_94;
        }
LABEL_26:
        if ((unsigned __int16)utf8_determineUTF8CharLength(v19) == 1)
        {
          int v25 = *v18;
          if (v25 != 255)
          {
            int v22 = 0;
LABEL_32:
            a5[(unsigned __int16)v16] = v25;
LABEL_33:
            int v21 = 1;
LABEL_34:
            int v26 = 1;
            goto LABEL_35;
          }
        }
        if (!strcmp((const char *)(a3 + (unsigned __int16)v17), "§"))
        {
          int v22 = 0;
          LOBYTE(v25) = *v18;
          goto LABEL_32;
        }
        int v26 = 0;
        int v59 = 0;
        int v21 = 1;
LABEL_94:
        int v22 = 1;
LABEL_35:
        unsigned __int16 v27 = utf8_determineUTF8CharLength(*a5);
        if ((_WORD)v16)
        {
          BOOL v28 = a5[(unsigned __int16)v16] != 32 && !utf8_BelongsToSet(5u, a5, v15, v27);
          int v29 = a5[v15 - 1];
          if (v29 == 32)
          {
LABEL_40:
            int v30 = 1;
            goto LABEL_48;
          }
          if ((unsigned __int16)v16 >= 3u && a5[v15 - 3] == 227)
          {
            int v30 = 0;
            if (a5[v15 - 2] == 128 && v29 == 128) {
              goto LABEL_40;
            }
          }
          else
          {
            int v30 = 0;
          }
        }
        else
        {
          int v30 = 0;
          BOOL v28 = 1;
        }
LABEL_48:
        int v31 = v21 & v26;
        if (!(_WORD)v16) {
          int v30 = 1;
        }
        if (v31 == 1 && v28 && v30 && a5[(unsigned __int16)v16] != 17 && *(_DWORD *)(a7 + 16) == 1)
        {
          unsigned int v32 = *(unsigned __int16 *)(a7 + 8);
          uint64_t v33 = *(void *)a7;
          if (v32 >= *(unsigned __int16 *)(a7 + 10))
          {
            uint64_t v34 = heap_Realloc(*(uint64_t **)(a2 + 8), v33, 12 * *(unsigned __int16 *)(a7 + 10) + 121);
            if (!v34) {
              return 2370838538;
            }
            uint64_t v33 = v34;
            *(void *)a7 = v34;
            *(_WORD *)(a7 + 10) += 10;
            unsigned int v32 = *(unsigned __int16 *)(a7 + 8);
          }
          uint64_t v35 = v33 + 12 * v32;
          *(_WORD *)uint64_t v35 = v17;
          *(_WORD *)(v35 + 2) = 0;
          *(_DWORD *)(v35 + 4) = 0;
          *(_WORD *)(v35 + 8) = v16;
          *(_WORD *)(a7 + 8) = v32 + 1;
        }
        unsigned int v36 = v59;
        if (v59) {
          char v37 = 0;
        }
        else {
          char v37 = v22;
        }
        if (v37)
        {
          int v38 = 0;
        }
        else
        {
          if ((v22 & (v59 != 0)) == 0) {
            unsigned int v36 = (unsigned __int8 *)(a3 + (unsigned __int16)v17);
          }
          int v38 = utf8_determineUTF8CharLength(*v36);
          if ((unsigned __int16)v38 >= 2u)
          {
            ++v16;
            if (v59) {
              int v39 = v22;
            }
            else {
              int v39 = 0;
            }
            BOOL v40 = v59 + 1;
            uint64_t v41 = (unsigned char *)(v55 + (unsigned __int16)v17);
            uint64_t v42 = (unsigned __int16)v38 - 1;
            do
            {
              if (v39) {
                int v43 = v40;
              }
              else {
                int v43 = v41;
              }
              a5[(unsigned __int16)v16] = *v43;
              if (--v42) {
                ++v16;
              }
              ++v40;
              ++v41;
            }
            while (v42);
          }
        }
        if (v22) {
          int v38 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a3 + (unsigned __int16)v17));
        }
        if (v59)
        {
          heap_Free(*(void **)(a2 + 8), (uint64_t)v59);
          int v59 = 0;
        }
        v17 += v38;
        v16 += v31;
        unsigned int v15 = (unsigned __int16)v16;
        a6 = v58;
        unsigned int v14 = (unsigned __int16)v17;
        BOOL v44 = (unsigned __int16)v17 < a4;
        if ((unsigned __int16)v16 >= *v58 || a4 <= (unsigned __int16)v17) {
          goto LABEL_96;
        }
      }
    }
    LOWORD(v16) = 0;
    BOOL v44 = 0;
LABEL_96:
    a5[(unsigned __int16)v16] = 0;
    uint64_t v47 = *(unsigned __int16 *)(a7 + 8);
    if (*(_WORD *)(a7 + 8))
    {
      uint64_t v48 = 0;
      uint64_t v49 = *(void *)a7;
      do
      {
        unsigned int v50 = a4;
        if ((int)v48 + 1 < v47) {
          unsigned int v50 = *(unsigned __int16 *)(v49 + 12 * (v48 + 1));
        }
        if (v50)
        {
          do
          {
            unsigned int v51 = *(unsigned __int8 *)(a3 + (unsigned __int16)v50 - 1);
            if (v51 > 0x20 || ((1 << v51) & 0x100002600) == 0)
            {
              if ((unsigned __int16)v50 < 3u
                || *(unsigned __int8 *)(a3 + (unsigned __int16)v50 - 3) != 227
                || *(unsigned __int8 *)(a3 + (unsigned __int16)v50 - 2) != 128
                || v51 != 128)
              {
                goto LABEL_113;
              }
              __int16 v53 = -3;
            }
            else
            {
              __int16 v53 = -1;
            }
            LOWORD(v50) = v50 + v53;
          }
          while ((_WORD)v50);
          LOWORD(v50) = 0;
        }
LABEL_113:
        *(_WORD *)(v49 + 12 * v48 + 2) = v50 - *(_WORD *)(v49 + 12 * v48);
        ++v48;
      }
      while (v48 != v47);
    }
    if (v44)
    {
      return 2370838537;
    }
    else
    {
      uint64_t result = 0;
      *a6 = v16;
    }
  }
  return result;
}

uint64_t utoin_PutClosingAndOpeningTag(int a1, int a2, unsigned char *a3)
{
  if (!a3) {
    return 2370838535;
  }
  *a3 = 0;
  if ((a2 - 5) < 4) {
    goto LABEL_5;
  }
  if (a2 == 2)
  {
    int v3 = 16;
    goto LABEL_11;
  }
  if (a2 == 1)
  {
LABEL_5:
    int v3 = 16;
    if (a1 && a1 != 43) {
      return 0;
    }
  }
  else
  {
    int v3 = a2;
  }
LABEL_11:
  if (v3 == a1) {
    return 0;
  }
  if ((a1 - 3) >= 2)
  {
    if (!a1)
    {
      unsigned int v6 = 0;
      goto LABEL_19;
    }
    unsigned int v6 = 1;
    uint64_t v5 = a3;
  }
  else
  {
    *a3 = 17;
    uint64_t v5 = a3 + 1;
    unsigned int v6 = 2;
  }
  *uint64_t v5 = 31;
LABEL_19:
  int v7 = 2;
  char v8 = 80;
  int v9 = 1;
  char v10 = 30;
  if (a2 <= 4)
  {
    if ((a2 - 3) >= 2)
    {
      if (a2 != 1)
      {
        unsigned int v11 = v6;
        if (a2 != 2) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
LABEL_21:
      if (a1 != 16)
      {
        unsigned int v11 = v6;
LABEL_32:
        a3[v11] = v10;
        a3[v6 + v9] = v8;
        v6 += v7;
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    char v8 = 16;
    char v10 = 76;
LABEL_31:
    a3[v6] = 30;
    unsigned int v11 = v6 + 1;
    int v7 = 3;
    int v9 = 2;
    goto LABEL_32;
  }
  if ((a2 - 5) < 4) {
    goto LABEL_21;
  }
  unsigned int v11 = v6;
  if (a2 == 16) {
    goto LABEL_32;
  }
  if (a2 == 43)
  {
    char v8 = 43;
    char v10 = 47;
    goto LABEL_31;
  }
LABEL_33:
  uint64_t result = 0;
  a3[v6] = 0;
  return result;
}

const char *getUTOIMarkerString(int a1)
{
  if (a1 == 43) {
    return "UTOI_PHONEMEMARKER";
  }
  uint64_t v3 = 0;
  uint64_t result = "UTOI_UNDEF";
  while (UTOIMARKER2STRING_0[v3] != a1)
  {
    v3 += 4;
    if (v3 == 76) {
      return result;
    }
  }
  return *(const char **)&UTOIMARKER2STRING_0[v3 + 2];
}

uint64_t UTOITrace(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unsigned __int16 v38 = 0;
  __n[0] = 0;
  if (!a1) {
    return 0;
  }
  __src = 0;
  *(void *)&__n[1] = 0;
  uint64_t v9 = bed_GetcElem(a3, __n);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  if (__n[0])
  {
    uint64_t v9 = bed_GetpElem(a3, 0, &__src);
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v13 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, __n[0] + 1);
      if (!v13) {
        return 2370838538;
      }
      uint64_t v14 = (uint64_t)v13;
      unsigned int v15 = strncpy(v13, __src, __n[0]);
      v15[__n[0]] = 0;
      int v17 = (uint64_t *)(a2 + 32);
      uint64_t v16 = *(void *)(a2 + 32);
      goto LABEL_10;
    }
    return v9;
  }
  uint64_t v14 = 0;
  int v17 = (uint64_t *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 32);
LABEL_10:
  log_OutText(v16, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] (%s) len=%d (LH_U8 *) \"%s\"", v10, v11, v12, a5);
  uint64_t v19 = bed_GetpElem(a4, 0, &__n[1]);
  if ((v19 & 0x80000000) != 0)
  {
    uint64_t v18 = v19;
  }
  else
  {
    uint64_t v18 = bed_GetcElem(a4, &v38);
    if ((v18 & 0x80000000) == 0 && v38)
    {
      uint64_t v36 = v14;
      unint64_t v23 = 0;
      uint64_t v24 = *(void *)&__n[1];
      do
      {
        uint64_t v25 = v24 + (v23 << 6);
        int v26 = *(_DWORD *)(v25 + 20);
        if (v26 == 7)
        {
          int v27 = *(_DWORD *)(v25 + 40);
          if (v27 != 43)
          {
            for (uint64_t i = 0; i != 76; i += 4)
            {
              if (UTOIMARKER2STRING_0[i] == v27) {
                break;
              }
            }
          }
        }
        else
        {
          marker_getString(v26);
          uint64_t v24 = *(void *)&__n[1];
        }
        uint64_t v29 = v24 + (v23 << 6);
        if (*(void *)(v29 + 48))
        {
          unsigned __int16 v30 = strlen(*(const char **)(v29 + 48));
          if (v30 <= 0x20uLL) {
            uint64_t v31 = v30;
          }
          else {
            uint64_t v31 = 31;
          }
          __strncpy_chk();
          v40[v31] = 0;
          uint64_t v24 = *(void *)&__n[1];
        }
        else
        {
          v40[0] = 0;
        }
        if (*(_DWORD *)(v24 + (v23 << 6) + 20) == 32)
        {
          v40[0] = 48;
          if (*(_DWORD *)(v24 + (v23 << 6) + 40) == 1) {
            char v32 = 49;
          }
          else {
            char v32 = 48;
          }
          v40[0] = v32;
          v40[1] = 0;
        }
        log_OutText(*v17, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] Marker[%d] %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s", v20, v21, v22, v23);
        uint64_t v24 = *(void *)&__n[1];
        if (*(_WORD *)(*(void *)&__n[1] + (v23 << 6) + 16))
        {
          uint64_t v33 = 0;
          unint64_t v34 = 0;
          do
          {
            log_OutText(*v17, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] Offsets[%d] %u,%u", v20, v21, v22, v34++);
            uint64_t v24 = *(void *)&__n[1];
            v33 += 8;
          }
          while (v34 < *(unsigned __int16 *)(*(void *)&__n[1] + (v23 << 6) + 16));
        }
        ++v23;
      }
      while (v23 < v38);
      uint64_t v14 = v36;
    }
  }
  if (v14) {
    heap_Free(*(void **)(a2 + 8), v14);
  }
  return v18;
}

uint64_t UTOISubTrace(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = 0;
  if (!a1) {
    return 0;
  }
  __int16 v13 = 0;
  uint64_t v10 = bed_GetcElem(a3, &v13);
  if ((v10 & 0x80000000) == 0)
  {
    if (!v13)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      goto LABEL_8;
    }
    uint64_t v10 = bed_GetpElem(a3, 0, &v14);
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(a2 + 32);
LABEL_8:
      log_OutText(v11, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] SUB (%s) len=%d (LH_U8 *) \"%s\"", v7, v8, v9, a4);
    }
  }
  return v10;
}

uint64_t wparser_ObjOpen1(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2370838535;
  uint64_t v9 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v9) & 0x80000000) == 0)
  {
    *a3 = 0;
    uint64_t v7 = (void *)heap_Alloc(*(void *)(v9 + 8), 16);
    if (v7)
    {
      uint64_t v3 = 0;
      *uint64_t v7 = a1;
      v7[1] = a2;
      *a3 = v7;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t wparser_ObjClose1(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wparser_ScanWords(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unsigned int v66 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  LODWORD(v60) = 1;
  DWORD1(v61) = 1;
  uint64_t v59 = 0;
  uint64_t v4 = 2370838535;
  unsigned __int16 v58 = 0;
  if (!a1 || !a2) {
    return v4;
  }
  unsigned int v9 = datac_RequestBlock(a2, 1020, 1u, &v68);
  if ((v9 & 0x80000000) != 0)
  {
    if ((v9 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v9;
    }
  }
  if (!*(_WORD *)(v68 + 16)) {
    return 0;
  }
  uint64_t v10 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, 1021, &v67, 213);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(unsigned char **)(v68 + 8);
    unsigned int v12 = *(unsigned __int16 *)(v68 + 16);
    uint64_t v10 = bed_GetpElem(v67, 0, &v66);
    if ((v10 & 0x80000000) == 0)
    {
      long long v64 = *v66;
      uint64_t v65 = *((void *)v66 + 2);
      int v13 = *((_DWORD *)v66 + 6);
      int v14 = *((_DWORD *)v66 + 7);
      int v15 = *((_DWORD *)v66 + 8);
      v69[0] = *(long long *)((char *)v66 + 36);
      *(_OWORD *)((char *)v69 + 12) = v66[3];
      uint64_t v10 = bed_GetcElem(v67, &v58);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v10 = bed_GetpElem(v67, 0, &v59);
        if ((v10 & 0x80000000) == 0)
        {
          unsigned int v16 = v58;
          if (v58 < 2u)
          {
            unsigned int v16 = 1;
          }
          else
          {
            int v17 = (int *)(v59 + 96);
            uint64_t v18 = 1;
            while (1)
            {
              int v19 = *v17;
              v17 += 16;
              if (v19 != *(_DWORD *)(v59 + 32)) {
                break;
              }
              if (v58 == ++v18) {
                goto LABEL_20;
              }
            }
            unsigned int v16 = (unsigned __int16)v18;
          }
LABEL_20:
          uint64_t v21 = v66;
          uint64_t v20 = v67;
          *((_DWORD *)v66 + 7) = 0;
          *((_DWORD *)v21 + 9) = 0;
          uint64_t v10 = bed_Goto(v20, 1u);
          if ((v10 & 0x80000000) == 0)
          {
            int v55 = v14;
            int v56 = v13;
            if (!v12)
            {
LABEL_81:
              uint64_t v4 = bed_GetpElem(v67, 0, &v66);
              if ((v4 & 0x80000000) == 0)
              {
                uint64_t v53 = v65;
                unsigned __int16 v52 = v66;
                *unsigned int v66 = v64;
                *((void *)v52 + 2) = v53;
                *(long long *)((char *)v52 + 36) = v69[0];
                v52[3] = *(_OWORD *)((char *)v69 + 12);
                *((_DWORD *)v52 + 7) = v55 + a4;
                *((_DWORD *)v52 + 8) = v15;
                *((_DWORD *)v52 + 6) = v56 - a4;
              }
              goto LABEL_84;
            }
            int v22 = 0;
            uint64_t v23 = 0;
            int v57 = v56 + a3;
            unsigned int v24 = v14 + v56;
            while (1)
            {
              unsigned int v25 = (unsigned __int16)v23;
              uint64_t v26 = v23;
              do
              {
                if (!utf8_BelongsToSet(4u, v11, v25, v12)) {
                  break;
                }
                uint64_t v26 = v26
                    + utf8_determineUTF8CharLength(v11[(unsigned __int16)v26]);
                unsigned int v25 = (unsigned __int16)v26;
              }
              while ((unsigned __int16)v26 < v12);
              uint64_t v23 = v26;
              if (v12 > (unsigned __int16)v26)
              {
                uint64_t v23 = v26;
                do
                {
                  if (utf8_BelongsToSet(4u, v11, (unsigned __int16)v23, v12)) {
                    break;
                  }
                  uint64_t v23 = v23
                      + utf8_determineUTF8CharLength(v11[(unsigned __int16)v23]);
                }
                while (v12 > (unsigned __int16)v23);
              }
              if ((unsigned __int16)v26 < (unsigned __int16)v23)
              {
                if (v58 >= 2u)
                {
                  int v27 = 0;
                  unsigned int v28 = 0;
                  unsigned int v29 = 1;
                  do
                  {
                    uint64_t v30 = v59 + ((unint64_t)v29 << 6);
                    unsigned int v31 = *(_DWORD *)(v30 + 32) - *(_DWORD *)(v59 + 32);
                    BOOL v32 = v31 < v25 || v31 > (unsigned __int16)v23;
                    if (!v32 && *(_DWORD *)(v30 + 20) == 7)
                    {
                      int v33 = *(_DWORD *)(v59 + ((unint64_t)v29 << 6) + 40);
                      if (v33 == 43)
                      {
                        int v27 = 1;
                      }
                      else if (v33 == 15)
                      {
                        unsigned int v28 = v29;
                      }
                    }
                    ++v29;
                  }
                  while (v29 < v58 && v31 <= (unsigned __int16)v23);
                  if (v27 == 1 && v28)
                  {
                    unsigned int v34 = *(_DWORD *)(v59 + ((unint64_t)v28 << 6) + 32) - *(_DWORD *)(v59 + 32);
                    if ((unsigned __int16)v34 <= v25 || v34 > (unsigned __int16)v23) {
                      uint64_t v23 = v23;
                    }
                    else {
                      uint64_t v23 = v34;
                    }
                  }
                }
                if ((_WORD)v26 && v16 < v58)
                {
                  unint64_t v36 = v16;
                  unint64_t v37 = v59 + 32 + ((unint64_t)v16 << 6);
                  unsigned __int16 v38 = (int *)v37;
                  do
                  {
                    int v39 = *v38;
                    v38 += 16;
                    if (v39 - *(_DWORD *)(v59 + 32) > v25) {
                      break;
                    }
                    if (*(_DWORD *)(v37 - 12) != 1) {
                      v22 += *(_DWORD *)(v37 - 4);
                    }
                    ++v36;
                    unint64_t v37 = (unint64_t)v38;
                  }
                  while (v36 < v58);
                  unsigned int v16 = (unsigned __int16)v36;
                }
                if (v16 >= v58)
                {
                  int v40 = 0;
                  int v42 = (unsigned __int16)v23;
                }
                else
                {
                  int v40 = 0;
                  int v41 = *(_DWORD *)(v59 + 32);
                  int v42 = (unsigned __int16)v23;
                  unint64_t v43 = v59 + 32 + ((unint64_t)v16 << 6);
                  unint64_t v44 = v58 - (unint64_t)v16;
                  unsigned __int16 v45 = (int *)v43;
                  do
                  {
                    int v46 = *v45;
                    v45 += 16;
                    unsigned int v47 = v46 - v41;
                    if (v46 - v41 <= v25 || v47 >= (unsigned __int16)v23) {
                      break;
                    }
                    if (*(_DWORD *)(v43 - 12) != 1) {
                      v40 += *(_DWORD *)(v43 - 4);
                    }
                    unint64_t v43 = (unint64_t)v45;
                    --v44;
                  }
                  while (v44);
                }
                LODWORD(v62) = v25 + v15;
                DWORD1(v62) = v42 - v25;
                unsigned int v49 = v57 + v25 + v22;
                int v50 = v40 + v42 - v25;
                if (v50 + v49 > v24 && v24 >= v49) {
                  int v50 = v24 - v49;
                }
                DWORD2(v61) = v57 + v25 + v22;
                HIDWORD(v61) = v50;
                uint64_t v10 = bed_marker_InjectFixedRefMarker(v67, &v60);
                if ((v10 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v10 = bed_GetcElem(v67, &v58);
                if ((v10 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v10 = bed_GetpElem(v67, 0, &v59);
                if ((v10 & 0x80000000) != 0) {
                  break;
                }
              }
              if (v12 <= (unsigned __int16)v23) {
                goto LABEL_81;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v4 = v10;
LABEL_84:
  if (v67) {
    bed_ObjClose(v67);
  }
  return v4;
}

uint64_t utois_ScanRegions(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _WORD *a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, void *a9, int a10, char *a11, unsigned __int16 a12, unsigned __int16 a13, unsigned __int16 a14)
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  uint64_t v219 = 0;
  uint64_t v220 = 0;
  uint64_t v14 = 2370838535;
  uint64_t v218 = 0;
  if (!a7) {
    return v14;
  }
  uint64_t v16 = a7;
  if ((InitRsrcFunction(a5, a6, &v218) & 0x80000000) != 0) {
    return v14;
  }
  if ((bed_ObjOpen(a5, a6, v16, 1020, &v220, 213) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  if ((bed_ObjOpen(a5, a6, v16, 1021, &v219, 213) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanTaggedText");
  uint64_t v23 = v218;
  *(void *)&long long v238 = 0;
  if (!v220 || !v219 || (datac_RequestBlock(v16, 1021, 1u, &v238) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  uint64_t v208 = a2;
  uint64_t v210 = a1;
  uint64_t v212 = a3;
  uint64_t v205 = a5;
  uint64_t v206 = a6;
  unsigned __int16 v207 = a8;
  uint64_t v24 = v238;
  unsigned int v25 = *(unsigned __int16 *)(v238 + 16);
  if (v25 >= 2)
  {
    uint64_t v217 = v23;
    int v215 = a4;
    uint64_t v26 = *(_DWORD **)(v238 + 8);
    int v27 = v26 + 10;
    int v28 = 1;
    int v29 = 1;
    do
    {
      uint64_t v30 = &v26[16 * (unint64_t)(unsigned __int16)v29];
      if (v30[5] == 7 && v30[10] == 43 && (unsigned __int16)v25 > (unsigned __int16)(v28 + 1))
      {
        uint64_t v31 = (unsigned __int16)(v28 + 1);
        BOOL v32 = &v27[16 * v31];
        while (*(v32 - 5) != 7)
        {
          LOWORD(v31) = v31 + 1;
          v32 += 16;
          if ((unsigned __int16)v25 == (unsigned __int16)v31) {
            goto LABEL_26;
          }
        }
        int v33 = v32 - 10;
        if (*v32 == 43 && v26[16 * (unint64_t)(unsigned __int16)v29 + 8] == *(v32 - 2))
        {
          int v213 = v27;
          if ((unsigned __int16)v31 >= (unsigned __int16)(v28 + 1))
          {
            uint64_t v202 = v16;
            unsigned __int16 v34 = v28 + 1;
            do
            {
              uint64_t v35 = &v26[16 * (unint64_t)v34];
              uint64_t v38 = *((void *)v35 + 6);
              unint64_t v37 = v35 + 12;
              uint64_t v36 = v38;
              if (v38)
              {
                heap_Free(*(void **)(v217 + 8), v36);
                *unint64_t v37 = 0;
              }
              ++v34;
            }
            while (v34 <= (unsigned __int16)v31);
            uint64_t v24 = v238;
            uint64_t v16 = v202;
          }
          memmove(v33, &v26[16 * (unint64_t)((unsigned __int16)v31 + 1)], (uint64_t)(*(unsigned __int16 *)(v24 + 16) - (unsigned __int16)v31) << 6);
          unsigned __int16 v39 = *(_WORD *)(v238 + 16) - 1;
          *(_WORD *)(v238 + 16) = v39;
          memmove(&v26[16 * (unint64_t)(unsigned __int16)v29], &v26[16 * (unint64_t)(v28 + 1)], (uint64_t)(v39 - v28) << 6);
          uint64_t v24 = v238;
          LOWORD(v25) = *(_WORD *)(v238 + 16) - 1;
          *(_WORD *)(v238 + 16) = v25;
          --v29;
          int v27 = v213;
        }
      }
LABEL_26:
      int v28 = (unsigned __int16)++v29;
    }
    while ((unsigned __int16)v29 < (unsigned __int16)v25);
    a4 = v215;
    if ((unsigned __int16)v25 >= 2u)
    {
      int v40 = v26 + 6;
      int v41 = 1;
      unsigned __int16 v42 = 1;
      while (1)
      {
        while (1)
        {
          unint64_t v43 = &v26[16 * (unint64_t)v42];
          unint64_t v44 = v43 + 5;
          if (v43[5] != 7) {
            goto LABEL_79;
          }
          uint64_t v45 = (v41 + 1);
          if ((unsigned __int16)v25 > (unsigned __int16)(v41 + 1)) {
            break;
          }
LABEL_34:
          uint64_t v48 = &v26[16 * (unint64_t)v42];
          int v49 = v48[10];
          if (v49 != 15)
          {
            v48[9] = v26[9] + v26[8] - v48[8];
            if (v49 == 43)
            {
              int v50 = &v26[16 * (unint64_t)v42];
              unsigned int v51 = v50[6];
              unsigned int v52 = v26[7] + v26[6];
              BOOL v53 = v52 >= v51;
              unsigned int v54 = v52 - v51;
              if (v53) {
                v50[7] = v54;
              }
            }
            goto LABEL_79;
          }
          v48[9] = 0;
          if (!*v43) {
LABEL_36:
          }
            _DWORD *v44 = 999;
LABEL_79:
          int v41 = ++v42;
          if (v42 >= (unsigned __int16)v25)
          {
            a4 = v215;
            goto LABEL_88;
          }
        }
        unint64_t v46 = (unsigned __int16)(v41 + 1);
        unsigned int v47 = &v40[16 * v46];
        while (*(v47 - 1) != 7)
        {
          ++v46;
          v47 += 16;
          if ((unsigned __int16)v25 == v46) {
            goto LABEL_34;
          }
        }
        int v55 = &v26[16 * (unint64_t)v42];
        int v58 = v55[10];
        int v56 = v55 + 10;
        int v57 = v58;
        unsigned int v59 = v47[4];
        if (v58 == 43)
        {
          if (v59 == 43)
          {
            uint64_t v60 = *((void *)v47 + 3);
            if (v60)
            {
              v214 = v40;
              heap_Free(*(void **)(v217 + 8), v60);
              int v40 = v214;
              *((void *)v47 + 3) = 0;
            }
            int v61 = 0;
            *(v47 - 1) = 999;
          }
          else
          {
            if ((unsigned __int16)v25 > (unsigned __int16)v46)
            {
              long long v63 = v47;
              unint64_t v64 = v46;
              do
              {
                unsigned int v65 = *(v63 - 1);
                BOOL v66 = v65 > 0x24 || ((1 << v65) & 0x1080200080) == 0;
                if (!v66 || v65 == 999)
                {
                  unsigned int v67 = *v63 - v26[16 * (unint64_t)v42 + 7];
                  *long long v63 = v67;
                  if (v64 > (unsigned __int16)v46 && v67 > *v47) {
                    *long long v63 = v67 - v47[1];
                  }
                }
                ++v64;
                v63 += 16;
              }
              while (v64 < (unsigned __int16)v25);
            }
            int v61 = 0;
          }
          unsigned int v68 = *v47;
          uint64_t v69 = &v26[16 * (unint64_t)v42];
          int v70 = v69[6];
          goto LABEL_68;
        }
        if (v57 == v59) {
          break;
        }
        if (v26[16 * (unint64_t)v42 + 8] != v47[2])
        {
          if (v57 == 15 && !*v43) {
            goto LABEL_36;
          }
          int v61 = 0;
          unsigned int v68 = *v47;
          uint64_t v69 = &v26[16 * (unint64_t)v42];
          int v70 = v69[6] + v69[7];
LABEL_68:
          v69[7] = v68 - v70;
LABEL_75:
          if (*v44 == 999)
          {
            if (v61) {
              goto LABEL_84;
            }
          }
          else
          {
            v26[16 * (unint64_t)v42 + 9] = v47[2] - v26[16 * (unint64_t)v42 + 8];
            if (v61)
            {
LABEL_84:
              int v41 = (unsigned __int16)v46;
              uint64_t v45 = (unsigned __int16)v46 + 1;
              a4 = v215;
              if (v45 < (unsigned __int16)v25)
              {
                int v71 = (unsigned __int16)v25;
                unint64_t v43 = v47 - 6;
                goto LABEL_86;
              }
              goto LABEL_87;
            }
          }
          goto LABEL_79;
        }
        unsigned int *v56 = v59;
        if (*(v47 - 6)) {
          goto LABEL_71;
        }
        v47[4] = v59;
        if (!*v43) {
          goto LABEL_36;
        }
        a4 = v215;
        if (v45 < (unsigned __int16)v25)
        {
          int v71 = (unsigned __int16)v25;
LABEL_86:
          uint64_t v72 = v40;
          memmove(v43, &v26[16 * v45], (uint64_t)(v71 - v41) << 6);
          int v40 = v72;
        }
LABEL_87:
        LOWORD(v25) = v25 - 1;
        int v41 = v42;
        if (v42 >= (unsigned __int16)v25) {
          goto LABEL_88;
        }
      }
      if (v57 == 60 || v57 == 16)
      {
        int v61 = *(v47 - 6);
        if (v61) {
LABEL_71:
        }
          int v61 = 1;
        else {
          *(v47 - 1) = 999;
        }
      }
      else
      {
        int v61 = 0;
      }
      goto LABEL_75;
    }
  }
LABEL_88:
  *(_WORD *)(v238 + 16) = v25;
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanTextForSpell");
  uint64_t v73 = v219;
  *(void *)&long long v234 = 21;
  __src = 0;
  uint64_t v232 = 0;
  uint64_t v230 = 0;
  long long v238 = MarkerSetTypeOfInput_0;
  long long v239 = unk_20D62EEF0;
  long long v240 = xmmword_20D62EF00;
  long long v241 = unk_20D62EF10;
  if (!v220) {
    goto LABEL_217;
  }
  if (!v219) {
    goto LABEL_217;
  }
  LOWORD(v228) = 0;
  uint64_t v229 = 0;
  if ((bed_GetcElem(v220, &v228) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  if ((datac_RequestBlock(v16, 1012, 1u, &v229) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  uint64_t v74 = *(void *)(v229 + 8);
  if ((bed_Goto(v73, 0) & 0x80000000) != 0 || (bed_GetpElem(v73, 0, &__src) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  int v75 = *((_DWORD *)__src + 8);
  int v76 = bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v234);
  if ((v76 & 0x1FFF) != 0x14)
  {
    if (v76 < 0 || (bed_GetpElem(v73, 0xFFFFu, &v232) & 0x80000000) != 0) {
      goto LABEL_217;
    }
    for (uint64_t i = v232; v232; uint64_t i = v232)
    {
      LOWORD(v233) = 1;
      int v126 = (const char *)(v74 + *((unsigned int *)i + 10));
      MarkerArgint Str = marker_getMarkerArgStr(3u);
      if (!strcmp(v126, MarkerArgStr)) {
        goto LABEL_314;
      }
      unsigned int v128 = (const char *)(v74 + *((unsigned int *)v232 + 10));
      uint64_t v129 = marker_getMarkerArgStr(4u);
      if (!strncmp(v128, v129, 6uLL)
        || (uint64_t v130 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
            uint64_t v131 = marker_getMarkerArgStr(6u),
            !strcmp(v130, v131))
        || (uint64_t v132 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
            uint64_t v133 = marker_getMarkerArgStr(7u),
            !strcmp(v132, v133))
        || (uint64_t v134 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
            uint64_t v135 = marker_getMarkerArgStr(8u),
            !strcmp(v134, v135)))
      {
LABEL_314:
        uint64_t v138 = (const char *)(v74 + *((unsigned int *)v232 + 10));
        uint64_t v139 = marker_getMarkerArgStr(5u);
        if (!strcmp(v138, v139)
          || (uint64_t v140 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
              uint64_t v141 = marker_getMarkerArgStr(6u),
              !strcmp(v140, v141))
          || (uint64_t v142 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
              uint64_t v143 = marker_getMarkerArgStr(7u),
              !strcmp(v142, v143))
          || (uint64_t v144 = (const char *)(v74 + *((unsigned int *)v232 + 10)),
              uint64_t v145 = marker_getMarkerArgStr(8u),
              !strcmp(v144, v145)))
        {
          int v137 = 44;
        }
        else
        {
          int v137 = 14;
        }
        int v136 = 1;
      }
      else
      {
        int v136 = 0;
        int v137 = 14;
      }
      LOWORD(v233) = 1;
      bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v233);
      int v146 = bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v234);
      if ((v146 & 0x1FFF) == 0x14)
      {
        uint64_t v230 = 0;
      }
      else if (v146 < 0 || (bed_GetpElem(v73, 0xFFFFu, &v230) & 0x80000000) != 0)
      {
        goto LABEL_217;
      }
      if (v136)
      {
        int v147 = *((_DWORD *)v232 + 8);
        DWORD2(v239) = *((_DWORD *)v232 + 6);
        LODWORD(v240) = v147;
        int v148 = v230 ? *(_DWORD *)(v230 + 32) : v75 + (unsigned __int16)v228;
        DWORD1(v240) = v148 - *((_DWORD *)v232 + 8);
        DWORD2(v240) = v137;
        HIDWORD(v239) = DWORD1(v240);
        if (DWORD1(v240))
        {
          if ((bed_marker_InjectFixedRefMarker(v73, &v238) & 0x80000000) != 0) {
            goto LABEL_217;
          }
        }
      }
      int v149 = bed_GoForward(v73, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v234);
      if ((v149 & 0x1FFF) == 0x14) {
        break;
      }
      if (v149 < 0 || (bed_GetpElem(v73, 0xFFFFu, &v232) & 0x80000000) != 0) {
        goto LABEL_217;
      }
    }
  }
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanTextForMWRegions");
  long long v234 = MarkerUDCTREF_0;
  long long v235 = unk_20D62EF30;
  long long v236 = xmmword_20D62EF40;
  uint64_t v78 = v218;
  uint64_t v77 = v219;
  uint64_t v79 = v220;
  uint64_t v232 = 0;
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  uint64_t v228 = 0;
  LODWORD(v233) = 0;
  long long v239 = unk_20D62EEF0;
  long long v240 = xmmword_20D62EF00;
  long long v241 = unk_20D62EF10;
  long long v237 = unk_20D62EF50;
  long long v238 = MarkerSetTypeOfInput_0;
  if (!v210) {
    goto LABEL_208;
  }
  __leunint64_t n = 0;
  unsigned int v223 = 0;
  size_t __n = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v210 + 120))(v208, v212, &v233) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  if (!v233) {
    goto LABEL_208;
  }
  uint64_t v80 = a12 <= a13 ? a13 : a12;
  __src = 0;
  unsigned int v223 = 0;
  if ((datac_RequestBlock(v16, 1021, 1u, &v230) & 0x80000000) != 0) {
    goto LABEL_217;
  }
  int v81 = bed_GetpElem(v79, 0, &v228);
  if (v81 < 0) {
    goto LABEL_217;
  }
  unsigned int v82 = *(unsigned __int16 *)(v230 + 16);
  if (!*(_WORD *)(v230 + 16) || *(_DWORD *)(*(void *)(v230 + 8) + 20) != 0x4000) {
    goto LABEL_217;
  }
  int v201 = v81;
  uint64_t v199 = v77;
  uint64_t v197 = v79;
  int v216 = a4;
  uint64_t v203 = v16;
  uint64_t v232 = *(char **)(v230 + 8);
  HIWORD(v231) = v82;
  if (v82 < 2)
  {
    long long v85 = 0;
    goto LABEL_199;
  }
  int v83 = 0;
  int v84 = 0;
  long long v85 = 0;
  uint64_t v196 = v80 + 1;
  unint64_t v86 = 1;
  uint64_t v87 = 2;
  uint64_t v88 = 168;
  while (1)
  {
    uint64_t v89 = &v232[64 * v86];
    if (*((_DWORD *)v89 + 5) != 32 || *((_DWORD *)v89 + 10) != 1) {
      goto LABEL_165;
    }
    int v90 = *(_DWORD *)&v232[64 * v86 + 32];
    if (!v83 || v84 != v90) {
      break;
    }
    int v83 = 1;
LABEL_165:
    ++v86;
    unsigned int v82 = HIWORD(v231);
    ++v87;
    v88 += 64;
    if (v86 >= HIWORD(v231)) {
      goto LABEL_199;
    }
  }
  unint64_t v91 = v82;
  unsigned int v92 = &v232[v88];
  unint64_t v93 = v87;
  do
  {
    if (v93 >= v91) {
      goto LABEL_122;
    }
    unsigned __int16 v94 = v93;
    if (*((_DWORD *)v92 - 5) == 32) {
      break;
    }
    int v95 = *(_DWORD *)v92;
    v92 += 64;
    ++v93;
  }
  while (!v95);
  uint64_t v96 = v94;
  unsigned __int16 v97 = &v232[64 * (unint64_t)v94];
  if (*((_DWORD *)v97 + 5) != 32)
  {
LABEL_122:
    int v83 = 1;
    int v84 = *(_DWORD *)&v232[64 * v86 + 32];
    goto LABEL_165;
  }
  uint64_t v198 = v88;
  if (*((_DWORD *)v97 + 10) || v90 == *(_DWORD *)&v232[64 * (unint64_t)v94 + 32]) {
    goto LABEL_164;
  }
  int v201 = bed_Goto(v199, v86);
  if (v201 < 0) {
    goto LABEL_199;
  }
  int v101 = *((_DWORD *)v232 + 8);
  int v195 = *(_DWORD *)&v232[64 * v86 + 32] - v101;
  unsigned int v102 = (unsigned __int16)(*(_WORD *)&v232[64 * v86 + 32] - v101);
  int v103 = (unsigned __int16)(*(_WORD *)&v232[64 * v96 + 32] - v101);
  if (v216 == 1) {
    log_OutText(*(void *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (scan for multiword in dict between text positions %u and %u)", v98, v99, v100, (unsigned __int16)(*(_WORD *)&v232[64 * v86 + 32] - v101));
  }
  LOWORD(__len) = a13;
  if ((int)(v103 - v102) > a13) {
    goto LABEL_199;
  }
  LOWORD(__len) = v103 - v102;
  uint64_t v104 = __src;
  if (__src)
  {
    size_t v105 = (unsigned __int16)(v103 - v102);
  }
  else
  {
    uint64_t v104 = (char *)heap_Calloc(*(void **)(v78 + 8), a13 + 1, 1);
    __src = v104;
    if (!v104) {
      goto LABEL_311;
    }
    size_t v105 = (unsigned __int16)__len;
  }
  memmove(v104, (const void *)(v228 + v102), v105);
  if (v223 || (unsigned int v223 = (char *)heap_Calloc(*(void **)(v78 + 8), 1, a14 + a12 * (unint64_t)a14 + 1)) != 0)
  {
    if (!v229)
    {
      int v201 = bed_ObjOpen(v205, v206, v203, 1029, &v229, 213);
      if (v201 < 0) {
        goto LABEL_199;
      }
    }
    if (v216 == 1)
    {
      if (!v85)
      {
        long long v85 = (char *)heap_Calloc(*(void **)(v78 + 8), v196, 1);
        if (!v85) {
          goto LABEL_311;
        }
      }
      strncpy(v85, __src, (unsigned __int16)__len);
      v85[(unsigned __int16)__len] = 0;
      log_OutText(*(void *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (lookup User Dict for \"%s\")", v110, v111, v112, (uint64_t)v85);
    }
    int v201 = utoin_LookUpUdctWord(v210, v208, v212, (uint64_t)&__src, 1, a13, a12, (uint64_t)&v226);
    if (v201 < 0) {
      goto LABEL_199;
    }
    if ((HIDWORD(__len) - 2) >= 2
      && HIDWORD(__len) != 43
      && (HIDWORD(__len) != 16 || !LH_stricmp(a11, "jpj") && HIDWORD(__len) != 2))
    {
      if (v216 == 1) {
        log_OutText(*(void *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (no (valid) User Dict entry found)", v113, v114, v115, v193);
      }
      goto LABEL_164;
    }
    if (v216 == 1)
    {
      strncpy(v85, v223, (unsigned __int16)__n);
      v85[(unsigned __int16)__n] = 0;
      log_OutText(*(void *)(v78 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (found User Dict entry \"%s\")", v116, v117, v118, (uint64_t)v85);
    }
    if (LH_stricmp(a11, (char *)&v226)) {
      uint64_t v119 = (char *)&v226;
    }
    else {
      uint64_t v119 = 0;
    }
    int v201 = utoin_ReplaceWord(v197, v199, (unsigned __int16)v195, (uint64_t)&__src, 0, v203, v119);
    if (v201 < 0) {
      goto LABEL_199;
    }
    int v201 = bed_GetpElem(v197, 0, &v228);
    if (v201 < 0) {
      goto LABEL_199;
    }
    if (HIDWORD(__len) == 16)
    {
      int v201 = bed_Goto(v199, v86);
      if (v201 < 0) {
        goto LABEL_199;
      }
      uint64_t v123 = &v232[64 * v86];
      DWORD2(v239) = *((_DWORD *)v123 + 6);
      HIDWORD(v239) = (unsigned __int16)__len;
      LODWORD(v240) = *((_DWORD *)v123 + 8);
      DWORD1(v240) = *(_DWORD *)&v232[64 * v96 + 32] - *((_DWORD *)v123 + 8);
      DWORD2(v240) = 16;
      int v201 = bed_marker_InjectFixedRefMarker(v199, &v238);
      if (v201 < 0) {
        goto LABEL_199;
      }
      int v201 = bed_GetpElem(v199, 0, &v232);
      if (v201 < 0) {
        goto LABEL_199;
      }
      int v201 = bed_GetcElem(v199, (_WORD *)&v231 + 1);
      if (v201 < 0) {
        goto LABEL_199;
      }
      uint64_t v124 = &v232[64 * v86];
      DWORD2(v235) = *((_DWORD *)v124 + 6);
      HIDWORD(v235) = (unsigned __int16)__len;
      LODWORD(v236) = *((_DWORD *)v124 + 8);
      DWORD1(v236) = *(_DWORD *)&v232[64 * v96 + 32] - *((_DWORD *)v124 + 8);
      int v122 = 16;
LABEL_161:
      DWORD2(v236) = v122;
      if ((bed_marker_InjectFixedRefMarker(v199, &v234) & 0x80000000) != 0) {
        goto LABEL_217;
      }
      int v201 = bed_GetpElem(v199, 0, &v232);
      if (v201 < 0) {
        goto LABEL_199;
      }
      int v201 = bed_GetcElem(v199, (_WORD *)&v231 + 1);
      if (v201 < 0) {
        goto LABEL_199;
      }
      goto LABEL_164;
    }
    if (HIDWORD(__len) == 43)
    {
      int v201 = bed_Goto(v199, v86);
      if (v201 < 0) {
        goto LABEL_199;
      }
      unsigned int v120 = &v232[64 * v86];
      DWORD2(v239) = *((_DWORD *)v120 + 6);
      HIDWORD(v239) = (unsigned __int16)__len;
      LODWORD(v240) = *((_DWORD *)v120 + 8);
      DWORD1(v240) = (unsigned __int16)__n;
      DWORD2(v240) = 43;
      int v201 = bed_marker_InjectFixedRefMarker(v199, &v238);
      if (v201 < 0) {
        goto LABEL_199;
      }
      unsigned int v121 = &v232[64 * v86];
      DWORD2(v235) = *((_DWORD *)v121 + 6);
      HIDWORD(v235) = (unsigned __int16)__len;
      LODWORD(v236) = *((_DWORD *)v121 + 8);
      DWORD1(v236) = (unsigned __int16)__n;
      int v122 = 43;
      goto LABEL_161;
    }
LABEL_164:
    int v83 = 1;
    int v84 = v90;
    uint64_t v88 = v198;
    goto LABEL_165;
  }
LABEL_311:
  log_OutPublic(*(void *)(v78 + 32), (uint64_t)&modPP_5, 1923, 0, v106, v107, v108, v109, v193);
  int v201 = -1924128758;
LABEL_199:
  if (__src) {
    heap_Free(*(void **)(v78 + 8), (uint64_t)__src);
  }
  if (v223) {
    heap_Free(*(void **)(v78 + 8), (uint64_t)v223);
  }
  if (v85) {
    heap_Free(*(void **)(v78 + 8), (uint64_t)v85);
  }
  if (v229) {
    bed_ObjClose(v229);
  }
  uint64_t v16 = v203;
  a4 = v216;
  if (v201 < 0)
  {
LABEL_217:
    LODWORD(v14) = 0;
    goto LABEL_218;
  }
LABEL_208:
  int v150 = a4;
  UTOITrace(a4, v218, v220, v219, (uint64_t)"BEFORE utois_ScanUntaggedText");
  uint64_t v152 = v219;
  uint64_t v151 = v220;
  uint64_t v233 = 7;
  if (!v220 || !v219) {
    goto LABEL_307;
  }
  int IsCursorAtEnd = bed_Goto(v220, 0);
  if (IsCursorAtEnd < 0
    || (int IsCursorAtEnd = bed_Goto(v152, 0), IsCursorAtEnd < 0)
    || (int v226 = 0, IsCursorAtEnd = bed_IsCursorAtEnd(v151, &v226), IsCursorAtEnd < 0))
  {
LABEL_306:
    LODWORD(v14) = IsCursorAtEnd;
    goto LABEL_307;
  }
  if (!v226)
  {
    uint64_t v204 = v16;
    while (1)
    {
      __int16 v225 = 0;
      int v155 = bed_GoForward(v152, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v233);
      if (v155 < 0)
      {
        LODWORD(v14) = v155;
        if ((v155 & 0x1FFF) != 0x14) {
          goto LABEL_307;
        }
      }
      uint64_t v232 = 0;
      int v231 = 0;
      uint64_t v229 = 0;
      uint64_t v230 = 0;
      uint64_t v228 = 0;
      __int16 v227 = 0;
      long long v234 = MarkerSetTypeOfInput_0;
      long long v235 = unk_20D62EEF0;
      long long v236 = xmmword_20D62EF00;
      long long v237 = unk_20D62EF10;
      int v156 = bed_GetpElem(v152, 0, &v230);
      if (v156 < 0
        || (int v157 = *(_DWORD *)(v230 + 24),
            int v158 = *(_DWORD *)(v230 + 32),
            int v156 = datac_RequestBlock(v16, 1021, 1u, &v228),
            v156 < 0))
      {
        LODWORD(v14) = v156;
        goto LABEL_301;
      }
      uint64_t v159 = *(void *)(v228 + 8);
      uint64_t v160 = *(unsigned __int16 *)(v228 + 16);
      int v161 = bed_GetpElem(v152, 0xFFFFu, &v229);
      if ((v161 & 0x1FFF) != 0xF) {
        break;
      }
      int v162 = bed_GetcElem(v151, &v231);
      if (v162 < 0) {
        goto LABEL_299;
      }
      if (!v160) {
        goto LABEL_256;
      }
      uint64_t v163 = 0;
      unsigned __int16 v164 = 0;
      BOOL v165 = (int *)(v159 + 20);
      do
      {
        int v166 = *v165;
        v165 += 16;
        if (v166 == 7) {
          unsigned __int16 v164 = v163;
        }
        ++v163;
      }
      while (v160 != v163);
      if (!v164)
      {
LABEL_256:
        int v170 = *(_DWORD *)(v159 + 24);
        goto LABEL_257;
      }
      int v167 = (_DWORD *)(v159 + ((unint64_t)v164 << 6));
      int v168 = v167[10];
      if (v168 != 44 && v168 != 14)
      {
        int v177 = v167[6];
        if (v177 == v157)
        {
          uint64_t v191 = v159 + ((unint64_t)v164 << 6);
          if (*(_DWORD *)(v191 + 32) == v158)
          {
            int v170 = *(_DWORD *)(v191 + 28) + v157;
            goto LABEL_257;
          }
        }
        uint64_t v176 = v159 + ((unint64_t)v164 << 6);
LABEL_255:
        int v170 = *(_DWORD *)(v176 + 28) + v177;
        goto LABEL_257;
      }
      int v170 = v167[7] + v167[6];
LABEL_257:
      int v211 = v170;
      int v162 = bed_GetiElem(v151, (_WORD *)&v231 + 1);
      if (v162 < 0) {
        goto LABEL_299;
      }
      LOWORD(v231) = v231 - HIWORD(v231);
      int v162 = bed_Goto(v151, HIWORD(v231) + (unsigned __int16)v231);
      if (v162 < 0) {
        goto LABEL_299;
      }
      int v162 = bed_Insert(v151, &v227, 1);
      if (v162 < 0) {
        goto LABEL_299;
      }
      int v162 = bed_GetpElem(v151, HIWORD(v231), &v232);
      if (v162 < 0) {
        goto LABEL_299;
      }
      __int16 v178 = v231;
      if ((_WORD)v231)
      {
        int v179 = 0;
        uint64_t v200 = 0;
        int v209 = 0;
        while (!*v207)
        {
LABEL_280:
          v179 += utf8_determineUTF8CharLength(v232[(unsigned __int16)v179]);
LABEL_281:
          __int16 v178 = v231;
          if ((unsigned __int16)v231 <= (unsigned __int16)v179) {
            goto LABEL_282;
          }
        }
        uint64_t v180 = 0;
        unint64_t v181 = 0;
        while (1)
        {
          uint64_t v182 = v232;
          int v183 = (unsigned __int16)v231;
          __src = 0;
          if (!v232
            || (unsigned __int16)v231 <= (unsigned __int16)v179
            || (InitRsrcFunction(v205, v206, &__src) & 0x80000000) != 0)
          {
            LODWORD(v14) = -1924128761;
            goto LABEL_300;
          }
          unsigned int v184 = nuance_pcre_exec(a9, a10, *((void *)v207 + 2) + *(unsigned int *)(*((void *)v207 + 1) + v180), 0, v182, v183, (unsigned __int16)v179, 0x10u, &v238, 30);
          if ((v184 & 0x80000000) == 0)
          {
            if (v184)
            {
              int v209 = v238;
              LODWORD(v200) = *(_DWORD *)(*((void *)v207 + 1) + v180 + 4);
              HIDWORD(v200) = DWORD1(v238) - v238;
            }
LABEL_275:
            LODWORD(v190) = *v207;
LABEL_276:
            if (v190 <= (unsigned __int16)v181) {
              goto LABEL_280;
            }
            DWORD2(v235) = v211 + (unsigned __int16)v179;
            HIDWORD(v235) = WORD2(v200);
            LODWORD(v236) = v158 + (unsigned __int16)v209 + HIWORD(v231);
            DWORD1(v236) = WORD2(v200);
            DWORD2(v236) = v200;
            int v162 = bed_marker_InjectFixedRefMarker(v152, &v234);
            if ((v162 & 0x80000000) == 0)
            {
              int v162 = datac_RequestBlock(v204, 1021, 1u, &v228);
              if ((v162 & 0x80000000) == 0)
              {
                int v179 = HIDWORD(v200) + v209;
                goto LABEL_281;
              }
            }
            goto LABEL_299;
          }
          unsigned int v185 = nuance_pcre_ErrorToLhError(v184);
          if (v185 >> 20 != 2213) {
            goto LABEL_275;
          }
          LODWORD(v14) = v185;
          if ((v185 & 0x1FFF) != 0x14) {
            break;
          }
          ++v181;
          unint64_t v190 = *v207;
          v180 += 8;
          if (v181 >= v190) {
            goto LABEL_276;
          }
        }
        if ((v185 & 0x1FFF) == 0xA)
        {
          log_OutPublic(*((void *)__src + 4), (uint64_t)&modPP_5, 11002, 0, v186, v187, v188, v189, v194);
          __int16 v178 = v231;
          goto LABEL_290;
        }
        log_OutPublic(*((void *)__src + 4), (uint64_t)&modPP_5, 11027, "%s%x", v186, v187, v188, v189, "lhError");
        goto LABEL_300;
      }
LABEL_282:
      LODWORD(v14) = 0;
LABEL_290:
      int v162 = bed_Remove(v151, (unsigned __int16)(HIWORD(v231) + v178), 1);
      if (v162 < 0) {
        goto LABEL_299;
      }
      if (v229)
      {
        int v162 = bed_GetpElem(v152, 0xFFFFu, &v229);
        if (v162 < 0) {
          goto LABEL_299;
        }
        unsigned int v192 = (unsigned __int16)(v231 + HIWORD(v231) + *(_WORD *)(v229 + 36));
      }
      else
      {
        unsigned int v192 = (unsigned __int16)v231 + HIWORD(v231);
      }
      int v162 = bed_Goto(v151, v192);
      if ((v162 & 0x80000000) == 0)
      {
        if ((v14 & 0x1FFF) != 0xA) {
          LODWORD(v14) = 0;
        }
        goto LABEL_300;
      }
LABEL_299:
      LODWORD(v14) = v162;
LABEL_300:
      uint64_t v16 = v204;
LABEL_301:
      if ((v14 & 0x80000000) != 0 && (v14 & 0x1FFF) != 0xA) {
        goto LABEL_307;
      }
      __int16 v225 = 1;
      bed_GoForward(v152, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v225);
      int IsCursorAtEnd = bed_IsCursorAtEnd(v151, &v226);
      if (IsCursorAtEnd < 0) {
        goto LABEL_306;
      }
      if (v226) {
        goto LABEL_215;
      }
    }
    LODWORD(v14) = v161;
    if (v161 < 0) {
      goto LABEL_301;
    }
    unsigned int v171 = *(_DWORD *)(v229 + 32);
    LOWORD(v231) = v171 - v158;
    if (!v160) {
      goto LABEL_256;
    }
    uint64_t v172 = 0;
    unsigned __int16 v173 = 0;
    unint64_t v174 = (int *)(v159 + 20);
    do
    {
      if (v174[3] >= v171) {
        break;
      }
      int v175 = *v174;
      v174 += 16;
      if (v175 == 7) {
        unsigned __int16 v173 = v172;
      }
      ++v172;
    }
    while (v160 != v172);
    if (!v173) {
      goto LABEL_256;
    }
    uint64_t v176 = v159 + ((unint64_t)v173 << 6);
    int v177 = *(_DWORD *)(v176 + 24);
    goto LABEL_255;
  }
  LODWORD(v14) = 0;
LABEL_215:
  if ((v14 & 0x1FFF) != 0xA) {
    LODWORD(v14) = 0;
  }
LABEL_307:
  if ((v14 & 0x80000000) == 0 || (v14 & 0x1FFF) == 0xA)
  {
    UTOITrace(v150, v218, v220, v219, (uint64_t)"BEFORE utois_MarkUnknownRegions");
    if ((utois_MarkUnknownRegions(v220, v219) & 0x80000000) == 0)
    {
      UTOITrace(v150, v218, v220, v219, (uint64_t)"BEFORE utois_AlignMarkers");
      utois_AlignMarkers(v16);
    }
  }
LABEL_218:
  if (v219) {
    bed_ObjClose(v219);
  }
  if (v220) {
    bed_ObjClose(v220);
  }
  if ((v14 & 0x1FFF) == 0xA) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t utois_MarkUnknownRegions(uint64_t a1, uint64_t a2)
{
  v25[1] = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  v25[0] = 7;
  int v22 = 0;
  uint64_t v23 = 0;
  long long v19 = MarkerSetTypeOfInput_0;
  *(_OWORD *)uint64_t v20 = unk_20D62EEF0;
  *(_OWORD *)&v20[16] = xmmword_20D62EF00;
  long long v21 = unk_20D62EF10;
  uint64_t result = 2370838535;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = bed_Goto(a2, 0);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v24);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v25);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v23);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!v23) {
      goto LABEL_7;
    }
    unsigned int v7 = v23[8];
    unsigned int v8 = v24[8];
    int v9 = v24[6];
    BOOL v10 = v7 >= v8;
    unsigned int v11 = v7 - v8;
    if (v11 != 0 && v10)
    {
      *(_DWORD *)&v20[8] = v24[6];
      *(_DWORD *)&v20[12] = v23[6] - v9;
      *(_DWORD *)&v20[16] = v8;
      *(void *)&v20[20] = v11;
    }
    int v5 = v24[9] + v8;
    int v6 = v24[7] + v9;
    if (v23[8] > v8) {
      goto LABEL_8;
    }
    while (1)
    {
LABEL_20:
      __int16 v18 = 1;
      bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v18);
      uint64_t result = bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v25);
      if ((result & 0x1FFF) == 0x14)
      {
        unsigned int v12 = 0;
        int v22 = 0;
      }
      else
      {
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v22);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v12 = v22;
        if (v22)
        {
          unsigned int v13 = v22[8];
          int v14 = v22[6];
          goto LABEL_27;
        }
      }
      unsigned int v13 = v5;
      int v14 = v6;
LABEL_27:
      int v15 = v23[9];
      unsigned int v16 = v15 + v23[8];
      if (v13 > v16)
      {
        int v17 = v23[7];
        *(_DWORD *)&v20[8] = v17 + v23[6];
        *(_DWORD *)&v20[12] = v14 - (v17 + v23[6]);
        *(_DWORD *)&v20[16] = v16;
        *(void *)&v20[20] = v13 - (v15 + v23[8]);
        uint64_t result = bed_marker_InjectFixedRefMarker(a2, &v19);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (!v22) {
          return 0;
        }
        uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v22);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v12 = v22;
      }
      uint64_t result = 0;
      uint64_t v23 = v12;
      if (!v12) {
        return result;
      }
    }
  }
  uint64_t v23 = 0;
LABEL_7:
  *(_OWORD *)&v20[8] = *(_OWORD *)(v24 + 6);
  *(_DWORD *)&v20[24] = 0;
  int v5 = v24[9] + *(_DWORD *)&v20[16];
  int v6 = v24[7] + *(_DWORD *)&v20[8];
LABEL_8:
  uint64_t result = bed_marker_InjectFixedRefMarker(a2, &v19);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (v23)
  {
    uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v23);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v23) {
      goto LABEL_20;
    }
  }
  return 0;
}

uint64_t utois_AlignMarkers(uint64_t a1)
{
  uint64_t v25 = 0;
  uint64_t result = datac_RequestBlock(a1, 1021, 1u, &v25);
  if ((result & 0x80000000) == 0)
  {
    unint64_t v2 = *(unsigned __int16 *)(v25 + 16);
    if (*(_WORD *)(v25 + 16))
    {
      uint64_t v3 = *(void *)(v25 + 8);
      if (*(_DWORD *)(v3 + 20) == 0x4000 && v2 != 1)
      {
        uint64_t v5 = 1;
        do
        {
          int v6 = (_DWORD *)(v3 + (v5 << 6));
          if (v6[5] == 7 && v6[10] == 43 && v5 + 1 < v2)
          {
            unsigned int v8 = v6 + 9;
            unsigned int v9 = (unsigned __int16)(v5 + 1);
            do
            {
              uint64_t v10 = v3 + ((unint64_t)v9 << 6);
              unsigned int v13 = *(_DWORD *)(v10 + 32);
              unsigned int v11 = (unsigned int *)(v10 + 32);
              unsigned int v12 = v13;
              unsigned int v14 = *(_DWORD *)(v3 + (v5 << 6) + 32);
              if (v13 <= v14) {
                break;
              }
              if (v12 >= *v8 + v14) {
                break;
              }
              *unsigned int v11 = v14;
              ++v9;
            }
            while (v9 < v2);
          }
          ++v5;
        }
        while (v5 != v2);
        unsigned int v15 = 1;
        do
        {
          uint64_t v16 = v15 + 1;
          if (v16 >= v2
            || (int v17 = (_OWORD *)(v3 + (v16 << 6)),
                __int16 v18 = (_OWORD *)(v3 + ((unint64_t)v15 << 6)),
                *((_DWORD *)v17 + 8) >= *((_DWORD *)v18 + 8)))
          {
            ++v15;
          }
          else
          {
            unsigned int v15 = 0;
            long long v19 = *v17;
            long long v20 = v17[1];
            long long v21 = v17[2];
            long long v22 = v17[3];
            long long v23 = v18[1];
            *int v17 = *v18;
            v17[1] = v23;
            long long v24 = v18[3];
            v17[2] = v18[2];
            v17[3] = v24;
            long long v26 = v19;
            long long v27 = v20;
            long long v28 = v21;
            long long v29 = v22;
            *__int16 v18 = v19;
            v18[1] = v20;
            v18[2] = v21;
            v18[3] = v22;
          }
        }
        while (v15 < v2);
      }
    }
  }
  return result;
}

uint64_t sysdct_char_LookUp(void *a1, uint64_t a2, void *a3, _WORD *a4, int a5, uint64_t a6, const char *a7)
{
  LOBYTE(__c) = 0;
  uint64_t v41 = 0;
  unsigned __int16 v40 = 0;
  unsigned int v37 = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t *, unsigned __int16 *, int *))(*a1 + 96))(a1[1], a1[2], "char", a2, &v41, &v40, &__c);
  if ((v37 & 0x80000000) != 0 || !v40) {
    return v37;
  }
  uint64_t v9 = 0;
  uint64_t v10 = "normal";
  while (1)
  {
    unsigned int v11 = *(char **)(v41 + 8 * v9);
    unsigned int v12 = strchr(v11, __c);
    unsigned __int16 v13 = strlen(v11);
    if (v12) {
      char *v12 = 0;
    }
    __int16 v14 = strlen(v11);
    __int16 v15 = v14;
    if (v13 <= (unsigned __int16)(v14 + 1))
    {
      uint64_t v16 = 0;
      unsigned __int16 v19 = v14 + 1;
    }
    else
    {
      uint64_t v16 = (char *)(*(void *)(v41 + 8 * v9) + (unsigned __int16)(v14 + 1));
      int v17 = strchr(v16, __c);
      if (v17) {
        *int v17 = 0;
      }
      size_t v18 = strlen(v16);
      unsigned __int16 v19 = v18 ? v15 + v18 + 2 : v15 + 2;
    }
    if (v13 <= v19)
    {
      long long v20 = 0;
    }
    else
    {
      long long v20 = (char *)(*(void *)(v41 + 8 * v9) + v19);
      long long v21 = strchr(v20, __c);
      if (v21) {
        *long long v21 = 0;
      }
      size_t v22 = strlen(v20);
      if (v22) {
        v19 += v22 + 1;
      }
      else {
        ++v19;
      }
    }
    if (v13 <= v19) {
      goto LABEL_35;
    }
    uint64_t v23 = *(void *)(v41 + 8 * v9);
    long long v24 = (char *)(v23 + v19);
    uint64_t v25 = strchr(v24, __c);
    if (v25) {
      char *v25 = 0;
    }
    if (v23)
    {
      unsigned __int16 v39 = v16;
      uint64_t v26 = a6;
      long long v27 = v10;
      long long v28 = (char *)(v23 + v19);
      do
      {
        long long v29 = strchr(v28, 44);
        uint64_t v30 = v29;
        if (v29) {
          *long long v29 = 0;
        }
        int v31 = strcmp(v28, a7);
        if (v30) {
          long long v28 = v30 + 1;
        }
        else {
          long long v28 = 0;
        }
      }
      while (v30 && v31);
      BOOL v32 = v31 == 0;
      if (!v31)
      {
        BOOL v32 = 1;
        uint64_t v10 = v27;
        a6 = v26;
        uint64_t v16 = v39;
        goto LABEL_39;
      }
      uint64_t v10 = v27;
      a6 = v26;
      uint64_t v16 = v39;
      if (*v24) {
        goto LABEL_46;
      }
    }
    else
    {
LABEL_35:
      BOOL v32 = 0;
    }
    if (strcmp(v10, a7)) {
      goto LABEL_46;
    }
LABEL_39:
    if (!a5) {
      goto LABEL_51;
    }
    if (a6 == 1) {
      break;
    }
    if (!a6) {
      goto LABEL_49;
    }
LABEL_46:
    if (!v32 && ++v9 < (unint64_t)v40) {
      continue;
    }
    return v37;
  }
  if (v20 && *v20 != 49 && *v20) {
    goto LABEL_46;
  }
LABEL_49:
  if (!v16 || (size_t v33 = strlen(v16)) == 0)
  {
LABEL_51:
    LOWORD(v33) = strlen(v11);
    uint64_t v16 = v11;
  }
  *a4 = v33;
  memmove(a3, v16, (unsigned __int16)v33 + 1);
  return v37;
}

uint64_t sysdct_wpcrf_LookUp_Chinese(void *a1, uint64_t a2, int a3, char *a4, char *a5, BOOL *a6)
{
  unsigned __int8 __c = 0;
  unsigned __int16 v42 = 0;
  __memcpy_chk();
  __c_1[a3] = 0;
  unsigned __int16 v43 = 0;
  uint64_t v11 = (*(uint64_t (**)(void, void, const char *, unsigned char *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "wpcrf", __c_1, &v42, &v43, &__c);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = v43;
    if (v43)
    {
      unsigned __int16 v13 = v42;
      int v14 = __c;
      while (1)
      {
        __int16 v15 = *v13;
        uint64_t v16 = strchr(*v13, v14);
        if (v16) {
          break;
        }
        ++v13;
        if (!--v12) {
          return v11;
        }
      }
      long long v24 = v16;
      uint64_t v25 = v16 - v15;
      if (v16 == v15)
      {
        a5 = __c_1;
      }
      else
      {
        if (v25 < 0) {
          LODWORD(v25) = v15 - v16;
        }
        strncat(a5, v15, v25);
      }
      strcat(a4, a5);
      uint64_t v26 = v24 + 1;
      long long v27 = strchr(v24 + 1, __c);
      if (v27)
      {
        long long v28 = v27;
        int v29 = 0;
        int v30 = __c;
        do
        {
          *(_WORD *)&a4[strlen(a4)] = 32;
          unsigned int v31 = v28 - v26;
          if (v28 - v26 < 0) {
            unsigned int v31 = v26 - v28;
          }
          uint64_t v32 = v31;
          strncat(a4, v26, v31);
          if (!v29)
          {
            BOOL v33 = v32 == 1 && *v26 == 49;
            *a6 = v33;
          }
          uint64_t v26 = v28 + 1;
          long long v28 = strchr(v28 + 1, v30);
          --v29;
        }
        while (v28);
      }
    }
    else
    {
      uint64_t v17 = (*(uint64_t (**)(void, void, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "wpcrf", "NULL", &v42, &v43, &__c);
      uint64_t v11 = 2370838548;
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v18 = v43;
        if (v43)
        {
          uint64_t v19 = v17;
          long long v20 = v42;
          int v21 = __c;
          while (1)
          {
            size_t v22 = *v20;
            uint64_t v23 = strchr(*v20, v21);
            if (v23) {
              break;
            }
            ++v20;
            if (!--v18) {
              return v19;
            }
          }
          unsigned __int16 v34 = v23;
          uint64_t v35 = v23 - v22;
          if (v23 == v22)
          {
            a5 = __c_1;
          }
          else
          {
            if (v35 < 0) {
              LODWORD(v35) = v22 - v23;
            }
            strncat(a5, v22, v35);
          }
          strcat(a4, a5);
          uint64_t v36 = v34 + 1;
          unsigned int v37 = strchr(v34 + 1, __c);
          if (v37)
          {
            uint64_t v38 = v37;
            int v39 = __c;
            do
            {
              *(_WORD *)&a4[strlen(a4)] = 32;
              unsigned int v40 = v38 - v36;
              if (v38 - v36 < 0) {
                unsigned int v40 = v36 - v38;
              }
              strncat(a4, v36, v40);
              uint64_t v36 = v38 + 1;
              uint64_t v38 = strchr(v38 + 1, v39);
            }
            while (v38);
          }
          return v19;
        }
      }
    }
  }
  return v11;
}

uint64_t sysdct_wpdummy_LookUp_Chinese(void *a1, uint64_t a2, int a3, char *a4, char *a5, BOOL *a6)
{
  unsigned __int8 __c = 0;
  unsigned __int16 v42 = 0;
  __memcpy_chk();
  __c_1[a3] = 0;
  unsigned __int16 v43 = 0;
  uint64_t v11 = (*(uint64_t (**)(void, void, const char *, unsigned char *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "dummymap", __c_1, &v42, &v43, &__c);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = v43;
    if (v43)
    {
      unsigned __int16 v13 = v42;
      int v14 = __c;
      while (1)
      {
        __int16 v15 = *v13;
        uint64_t v16 = strchr(*v13, v14);
        if (v16) {
          break;
        }
        ++v13;
        if (!--v12) {
          return v11;
        }
      }
      long long v24 = v16;
      uint64_t v25 = v16 - v15;
      if (v16 == v15)
      {
        a5 = __c_1;
      }
      else
      {
        if (v25 < 0) {
          LODWORD(v25) = v15 - v16;
        }
        strncat(a5, v15, v25);
      }
      strcat(a4, a5);
      uint64_t v26 = v24 + 1;
      long long v27 = strchr(v24 + 1, __c);
      if (v27)
      {
        long long v28 = v27;
        int v29 = 0;
        int v30 = __c;
        do
        {
          *(_WORD *)&a4[strlen(a4)] = 32;
          unsigned int v31 = v28 - v26;
          if (v28 - v26 < 0) {
            unsigned int v31 = v26 - v28;
          }
          uint64_t v32 = v31;
          strncat(a4, v26, v31);
          if (!v29)
          {
            BOOL v33 = v32 == 1 && *v26 == 49;
            *a6 = v33;
          }
          uint64_t v26 = v28 + 1;
          long long v28 = strchr(v28 + 1, v30);
          --v29;
        }
        while (v28);
      }
    }
    else
    {
      uint64_t v17 = (*(uint64_t (**)(void, void, const char *, const char *, char ***, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "dummymap", "NULL", &v42, &v43, &__c);
      uint64_t v11 = 2370838548;
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v18 = v43;
        if (v43)
        {
          uint64_t v19 = v17;
          long long v20 = v42;
          int v21 = __c;
          while (1)
          {
            size_t v22 = *v20;
            uint64_t v23 = strchr(*v20, v21);
            if (v23) {
              break;
            }
            ++v20;
            if (!--v18) {
              return v19;
            }
          }
          unsigned __int16 v34 = v23;
          uint64_t v35 = v23 - v22;
          if (v23 == v22)
          {
            a5 = __c_1;
          }
          else
          {
            if (v35 < 0) {
              LODWORD(v35) = v22 - v23;
            }
            strncat(a5, v22, v35);
          }
          strcat(a4, a5);
          uint64_t v36 = v34 + 1;
          unsigned int v37 = strchr(v34 + 1, __c);
          if (v37)
          {
            uint64_t v38 = v37;
            int v39 = __c;
            do
            {
              *(_WORD *)&a4[strlen(a4)] = 32;
              unsigned int v40 = v38 - v36;
              if (v38 - v36 < 0) {
                unsigned int v40 = v36 - v38;
              }
              strncat(a4, v36, v40);
              uint64_t v36 = v38 + 1;
              uint64_t v38 = strchr(v38 + 1, v39);
            }
            while (v38);
          }
          return v19;
        }
      }
    }
  }
  return v11;
}

uint64_t sysdct_char_LookUp_Chinese(void *a1, unsigned __int8 *a2, void *a3, _WORD *a4, int a5, uint64_t a6, const char *a7)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v13 = (unsigned __int16)utf8_determineUTF8CharLength(*a2);
  __memcpy_chk();
  v15[v13] = 0;
  *a4 = 0;
  return sysdct_char_LookUp(a1, (uint64_t)v15, a3, a4, a5, a6, a7);
}

uint64_t sysdct_char_LookUp_Thai(void *a1, uint64_t a2, int a3, void *a4, _WORD *a5, int a6, uint64_t a7, const char *a8)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  __strcpy_chk();
  v16[a3] = 0;
  *a5 = 0;
  if (!a7 && a6 == 1 && v16[0] == 32) {
    v16[0] = -80;
  }
  return sysdct_char_LookUp(a1, (uint64_t)v16, a4, a5, a6, a7, a8);
}

uint64_t getDictSolution(unsigned int a1, uint64_t a2, int __c, void *a4, unsigned __int16 *a5, const char *a6)
{
  int v6 = a5;
  if (!a1)
  {
LABEL_24:
    *int v6 = 0;
    return 0;
  }
  int v11 = 0;
  unsigned __int8 v12 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int8 v14 = 0;
  do
  {
    __int16 v15 = strchr(*(char **)(a2 + 8 * v14), __c);
    if (!v15)
    {
      unsigned __int8 v13 = 0;
LABEL_26:
      int v6 = a5;
      int v21 = a4;
LABEL_27:
      uint64_t v22 = v13;
      goto LABEL_28;
    }
    *__int16 v15 = 0;
    uint64_t v16 = v15 + 1;
    if (!v15[1])
    {
      int v17 = strcmp("normal", a6);
      if (!v17) {
        unsigned __int8 v13 = v14;
      }
      if (!v11) {
        unsigned __int8 v12 = v14;
      }
      int v11 = 1;
      if (!v17) {
        goto LABEL_26;
      }
    }
    do
    {
      uint64_t v18 = strchr(v16, 44);
      uint64_t v19 = v18;
      if (v18) {
        *uint64_t v18 = 0;
      }
      int v20 = strcmp(v16, a6);
      if (!v20) {
        unsigned __int8 v13 = v14;
      }
      if (v19) {
        uint64_t v16 = v19 + 1;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    while (v19 && v20);
    ++v14;
  }
  while (a1 > v14 && v20);
  int v6 = a5;
  int v21 = a4;
  if (!v20) {
    goto LABEL_27;
  }
  if (v11 != 1) {
    goto LABEL_24;
  }
  uint64_t v22 = v12;
LABEL_28:
  uint64_t v23 = *(const char **)(a2 + 8 * v22);
  unsigned __int16 v24 = strlen(v23);
  *int v6 = v24;
  memmove(v21, v23, v24 + 1);
  return 0;
}

uint64_t getDictBackTransSolution(void *a1, const char *a2, unsigned int a3, uint64_t a4, int __c, char *a6, unsigned __int16 *a7, const char *a8)
{
  unsigned int v8 = a7;
  uint64_t v59 = *MEMORY[0x263EF8340];
  __int16 __c_1 = 0;
  unsigned __int8 __ca = 0;
  BOOL v53 = 0;
  v58[0] = 0;
  v57[0] = 0;
  if (a3)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    int v15 = 0;
    uint64_t v48 = 0;
    __s = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v50 = a3;
    while (1)
    {
      uint64_t v18 = *(char **)(a4 + 8 * v13);
      if (v18)
      {
        unsigned int v19 = 0;
        do
        {
          int v20 = strchr(v18, __c);
          if (!v20) {
            break;
          }
          *int v20 = 0;
          uint64_t v18 = v20 + 1;
          switch(v19)
          {
            case 1u:
              uint64_t v16 = v18;
              break;
            case 3u:
              __s = v18;
              break;
            case 7u:
              uint64_t v48 = v18;
              if (v16) {
                goto LABEL_15;
              }
              goto LABEL_46;
          }
        }
        while (v19++ < 7);
      }
      if (v16)
      {
LABEL_15:
        if (!*v16 || strstr(v16, a8))
        {
          if (__s)
          {
            uint64_t v22 = strchr(__s, 33);
            if (v22)
            {
              uint64_t v23 = v22;
              *uint64_t v22 = 0;
              while (1)
              {
                unsigned __int16 v24 = v23 + 1;
                uint64_t v25 = strchr(v23 + 1, 92);
                uint64_t v23 = v25;
                if (v25) {
                  char *v25 = 0;
                }
                uint64_t v26 = strchr(v24, 40);
                if (v26) {
                  *uint64_t v26 = 0;
                }
                *a6 = 0;
                strcat(a6, "backtrans_");
                strcat(a6, v24);
                __int16 __c_1 = -1;
                unsigned __int8 __ca = 0;
                BOOL v53 = 0;
                uint64_t v17 = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "fecfg", a6, &v53, &__c_1, &__ca);
                if ((v17 & 0x80000000) != 0) {
                  break;
                }
                if (__c_1)
                {
                  long long v27 = strchr(*v53, __ca);
                  if (v27) {
                    char *v27 = 0;
                  }
                  __strcat_chk();
                }
                if (!v23) {
                  goto LABEL_30;
                }
              }
              *a7 = 0;
              return v17;
            }
LABEL_30:
            __strcat_chk();
          }
          if (*v16)
          {
            int v15 = 1;
            if (!strstr(v16, a8)) {
              goto LABEL_50;
            }
            long long v28 = v48;
            if (!v48) {
              goto LABEL_50;
            }
LABEL_37:
            unsigned int v47 = atoi(v28);
            unsigned int v29 = (unsigned __int16)strlen(a2);
            if (v29)
            {
              int v46 = v14;
              int v30 = a2;
              unsigned int v31 = 0;
              int v32 = 0;
              do
              {
                int v33 = v32;
                __int16 v34 = utf8_determineUTF8CharLength(v30[v31]);
                int v32 = v33 + 1;
                unsigned int v31 = (unsigned __int16)(v34 + v31);
              }
              while (v31 < v29);
              unsigned int v35 = v47;
              int v36 = (unsigned __int16)v47 >> 1;
              if (((v47 >> 1) & 0x7FFE) == 0) {
                int v36 = 1;
              }
              if (!(_WORD)v33) {
                unsigned int v35 = v36;
              }
              a2 = v30;
              int v14 = v46;
            }
            else
            {
              unsigned int v35 = v47;
            }
            v14 += v35;
          }
          else
          {
            long long v28 = v48;
            if (v48) {
              goto LABEL_37;
            }
          }
          int v15 = 1;
          goto LABEL_50;
        }
        __s = 0;
        uint64_t v16 = 0;
      }
      else
      {
LABEL_46:
        __s = 0;
      }
LABEL_50:
      if (++v13 == v50)
      {
        if (v15 && (_WORD)v14)
        {
          unsigned __int16 v37 = v14;
          size_t v38 = strlen(a2);
          unsigned int v8 = a7;
          size_t v39 = *a7;
          if (v38 + strlen(v58) + 5 < v39)
          {
            __c_3[0] = 0;
            __sprintf_chk(__c_3, 0, 0x80uLL, "%d", v37);
            unsigned __int16 v40 = strlen(a2);
            *a7 = v40;
            memmove(a6, a2, v40 + 1);
            *(_WORD *)&a6[strlen(a6)] = 92;
            ++*a7;
            strcat(a6, v58);
            *a7 += strlen(v58);
            *(_WORD *)&a6[strlen(a6)] = 92;
            ++*a7;
            strcat(a6, __c_3);
            uint64_t v41 = __c_3;
LABEL_63:
            *v8 += strlen(v41);
            return v17;
          }
        }
        else
        {
          unsigned int v8 = a7;
          if (!v15) {
            goto LABEL_57;
          }
          size_t v39 = *a7;
        }
        size_t v43 = strlen(a2);
        size_t v44 = strlen(v58);
        if (v43 + v44 + strlen(v57) + 3 >= v39) {
          goto LABEL_57;
        }
        *unsigned int v8 = v43;
        memmove(a6, a2, (unsigned __int16)v43 + 1);
        *(_WORD *)&a6[strlen(a6)] = 92;
        ++*v8;
        strcat(a6, v58);
        *v8 += strlen(v58);
        *(_WORD *)&a6[strlen(a6)] = 92;
        ++*v8;
        strcat(a6, v57);
        uint64_t v41 = v57;
        goto LABEL_63;
      }
    }
  }
  uint64_t v17 = 0;
LABEL_57:
  *unsigned int v8 = 0;
  return v17;
}

uint64_t sysdct_word_LookUp(void *a1, const char *a2, unsigned char *a3, unsigned __int16 *a4, const char *a5)
{
  __c[0] = 0;
  uint64_t v15 = 0;
  unsigned __int16 v14 = 0;
  *a3 = 0;
  if (!*((_DWORD *)a1 + 8))
  {
    uint64_t result = *((unsigned __int16 *)a1 + 12);
    if (!*((_WORD *)a1 + 12)) {
      return result;
    }
    if (result == 1)
    {
      strcpy(&__c[1], "word");
      unsigned __int16 v14 = 0;
      uint64_t result = (*(uint64_t (**)(void, void, unsigned char *, const char *, uint64_t *, unsigned __int16 *, unsigned char *))(*a1 + 96))(a1[1], a1[2], &__c[1], a2, &v15, &v14, __c);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v11 = v14;
      if (!v14) {
        return result;
      }
    }
    else
    {
      unsigned int v12 = 0;
      while (1)
      {
        strcpy(&__c[1], "word");
        LH_itoa(v12, v13, 0xAu);
        __strcat_chk();
        unsigned __int16 v14 = 0;
        uint64_t result = (*(uint64_t (**)(void, void, unsigned char *, const char *, uint64_t *, unsigned __int16 *, unsigned char *))(*a1 + 96))(a1[1], a1[2], &__c[1], a2, &v15, &v14, __c);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v11 = v14;
          if (v14) {
            break;
          }
        }
        if (++v12 >= *((unsigned __int16 *)a1 + 12)) {
          return result;
        }
      }
    }
    getDictSolution(v11, v15, __c[0], a3, a4, a5);
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, unsigned __int16 *, unsigned char *, void, void))(*a1 + 240))(a1[1], a1[2], "g2p", a2, &v15, &v14, __c, *((unsigned __int8 *)a1 + 24), 0);
  if ((result & 0x80000000) == 0)
  {
    if (v14) {
      return getDictBackTransSolution(a1, a2, v14, v15, __c[0], a3, a4, a5);
    }
  }
  return result;
}

uint64_t sysdct_word_LookUp_Chinese(void *a1, uint64_t a2, int a3, unsigned char *a4, unsigned __int16 *a5, const char *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  __memcpy_chk();
  v12[a3] = 0;
  return sysdct_word_LookUp(a1, v12, a4, a5, a6);
}

uint64_t sysdct_word_LookUp_Thai(void *a1, uint64_t a2, int a3, unsigned char *a4, unsigned __int16 *a5, const char *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  __strcpy_chk();
  v12[a3] = 0;
  return sysdct_word_LookUp(a1, v12, a4, a5, a6);
}

uint64_t wordm_sysdct_CharLookup_Chinese(void *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, const char *a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t result = 2370838535;
  if (a1 && a2 && a4)
  {
    *(_OWORD *)(a4 + 4) = 0u;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 52) = 0u;
    *(unsigned char *)(a4 + 68) = 0;
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 76) = 0u;
    *(_OWORD *)(a4 + 92) = 0u;
    *(_OWORD *)(a4 + 108) = 0u;
    *(_OWORD *)(a4 + 124) = 0u;
    *(_OWORD *)(a4 + 140) = 0u;
    *(_OWORD *)(a4 + 156) = 0u;
    *(_OWORD *)(a4 + 172) = 0u;
    *(_OWORD *)(a4 + 188) = 0u;
    *(_OWORD *)(a4 + 204) = 0u;
    *(_OWORD *)(a4 + 220) = 0u;
    *(_OWORD *)(a4 + 236) = 0u;
    *(_OWORD *)(a4 + 252) = 0u;
    *(unsigned char *)(a4 + 332) = 0;
    *(_OWORD *)(a4 + 268) = 0u;
    *(_OWORD *)(a4 + 284) = 0u;
    *(_OWORD *)(a4 + 300) = 0u;
    *(_OWORD *)(a4 + 316) = 0u;
    if (a3 >= 0x40) {
      unsigned int v14 = 64;
    }
    else {
      unsigned int v14 = a3;
    }
    *(_WORD *)(a4 + 334) = 0;
    __memmove_chk();
    __s[v14] = 0;
    if (v14)
    {
      if (v14 > a5) {
        __s[a5] = 0;
      }
      unsigned int v15 = strlen(__s);
      if (utf8_ToLower(__s, 0, (uint64_t)&v25)
        || utf8_BelongsToSet(0, __s, 0, v15) == 1
        || utf8_BelongsToSet(6u, __s, 0, v15) == 1
        || utf8_BelongsToSet(7u, __s, 0, v15) == 1
        || utf8_BelongsToSet(0xAu, __s, 0, v15) == 1)
      {
        int v16 = 3;
      }
      else if (utf8_BelongsToSet(0xCu, __s, 0, v15) == 1)
      {
        int v16 = 3;
      }
      else
      {
        int v16 = 2;
      }
      *(_DWORD *)a4 = v16;
      unsigned __int16 v17 = utf8_determineUTF8CharLength(__s[0]);
      memmove((void *)(a4 + 4), __s, v17);
      __s[v17] = 0;
      *(unsigned char *)(a4 + v17 + 4) = 0;
      *(_WORD *)(a4 + 70) = v17;
      unsigned __int16 v25 = 256;
      if (sysdct_char_LookUp_Chinese(a1, (unsigned __int8 *)__s, (void *)(a4 + 76), &v25, 1, a6, a7)
        || (unsigned __int16 v18 = v25) == 0)
      {
        uint64_t result = 0;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        uint64_t result = 0;
        int v19 = *(unsigned __int8 *)(a4 + 76);
        *(unsigned char *)(a4 + 76 + v25) = 0;
        *(_WORD *)(a4 + 334) = v18;
        if (v19 == 35)
        {
          char v20 = atoi((const char *)(a4 + 77));
          uint64_t result = 0;
          *(unsigned char *)(a4 + 76) = v20;
          *(unsigned char *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
        }
      }
    }
    else
    {
      int v21 = 0;
      do
      {
        size_t v22 = (unsigned __int16)v21;
        int v23 = a2[(unsigned __int16)v21++];
      }
      while (v23 == 32);
      memmove((void *)(a4 + 4), a2, v22);
      return 0;
    }
  }
  return result;
}

uint64_t wordm_sysdct_CharLookup_Thai(void *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, const char *a7)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t result = 2370838535;
  if (a1 && a2 && a4)
  {
    *(_OWORD *)(a4 + 4) = 0u;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 52) = 0u;
    *(unsigned char *)(a4 + 68) = 0;
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 76) = 0u;
    *(_OWORD *)(a4 + 92) = 0u;
    *(_OWORD *)(a4 + 108) = 0u;
    *(_OWORD *)(a4 + 124) = 0u;
    *(_OWORD *)(a4 + 140) = 0u;
    *(_OWORD *)(a4 + 156) = 0u;
    *(_OWORD *)(a4 + 172) = 0u;
    *(_OWORD *)(a4 + 188) = 0u;
    *(_OWORD *)(a4 + 204) = 0u;
    *(_OWORD *)(a4 + 220) = 0u;
    *(_OWORD *)(a4 + 236) = 0u;
    *(_OWORD *)(a4 + 252) = 0u;
    *(unsigned char *)(a4 + 332) = 0;
    *(_OWORD *)(a4 + 268) = 0u;
    *(_OWORD *)(a4 + 284) = 0u;
    *(_OWORD *)(a4 + 300) = 0u;
    *(_OWORD *)(a4 + 316) = 0u;
    if (a3 >= 0x40) {
      unsigned int v14 = 64;
    }
    else {
      unsigned int v14 = a3;
    }
    *(_WORD *)(a4 + 334) = 0;
    __memmove_chk();
    v22[v14] = 0;
    if (v14)
    {
      if (v14 > a5) {
        v22[a5] = 0;
      }
      char v15 = v22[0];
      if (v22[0] < 0) {
        int v16 = 2;
      }
      else {
        int v16 = 3;
      }
      *(_DWORD *)a4 = v16;
      *(unsigned char *)(a4 + 4) = v15;
      *(unsigned char *)(a4 + 5) = 0;
      *(_WORD *)(a4 + 70) = 1;
      unsigned __int16 v21 = 256;
      if (sysdct_char_LookUp_Thai(a1, (uint64_t)v22, 1, (void *)(a4 + 76), &v21, 1, a6, a7)
        || (unsigned __int16 v17 = v21) == 0)
      {
        uint64_t result = 0;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        uint64_t result = 0;
        *(unsigned char *)(a4 + v21 + 76) = 0;
        *(_WORD *)(a4 + 334) = v17;
      }
    }
    else
    {
      int v18 = 0;
      do
      {
        size_t v19 = (unsigned __int16)v18;
        int v20 = a2[(unsigned __int16)v18++];
      }
      while (v20 == 32);
      memmove((void *)(a4 + 4), a2, v19);
      return 0;
    }
  }
  return result;
}

uint64_t wordm_mapt2s(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unsigned int v6 = 0;
  do
  {
    unsigned int v7 = (unsigned __int8 *)(a2 + v6);
    int v15 = 7549556;
    char v14 = 0;
    uint64_t v13 = 0;
    __int16 v12 = 0;
    unsigned __int16 v8 = utf8_determineUTF8CharLength(*v7);
    __memmove_chk();
    v16[v8] = 0;
    uint64_t v9 = (*(uint64_t (**)(void, void, int *, unsigned char *, const void ***, __int16 *, char *))(*a1 + 96))(a1[1], a1[2], &v15, v16, &v13, &v12, &v14);
    if ((v9 & 0x80000000) == 0)
    {
      if (v12)
      {
        unsigned __int16 v10 = utf8_determineUTF8CharLength(*(unsigned __int8 *)*v13);
        if (v10 == v8) {
          memmove((void *)(a2 + v6), *v13, v10);
        }
      }
    }
    v6 += (unsigned __int16)utf8_determineUTF8CharLength(*v7);
  }
  while (v6 < a3 && (v9 & 0x80000000) == 0);
  return v9;
}

uint64_t GetInDomainSegmentation(uint64_t a1, void *a2, uint64_t a3, __int16 a4, __int16 a5, __int16 a6, char *__s, uint64_t *a8, __int16 *a9, __int16 a10, int a11, unsigned __int8 a12)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v18 = 2350915594;
  uint64_t v19 = *a8;
  int v20 = *(void **)(a1 + 8);
  int v21 = strlen(__s);
  size_t v22 = (char *)heap_Calloc(v20, 1, (v21 + 1));
  if (!v22) {
    return v18;
  }
  uint64_t v23 = v22;
  unsigned int v31 = a8;
  strcpy(v22, __s);
  unsigned __int16 v24 = a5 - a4;
  unsigned __int16 v25 = a6 - a4;
  if ((unsigned __int16)(a5 - a4) >= (unsigned __int16)(a6 - a4))
  {
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  uint64_t v26 = 0;
  while (1)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    memset(v34, 0, sizeof(v34));
    if (a11 == 1)
    {
      uint64_t v26 = wordm_sysdct_Lookup_Thai(a2, (char *)(a3 + v24), (uint64_t)v34, 22, v23);
      if ((v26 & 0x80000000) != 0) {
        goto LABEL_24;
      }
      if (LODWORD(v34[0]) != 5 && LODWORD(v34[0]) != 2) {
        goto LABEL_18;
      }
    }
    else
    {
      if (a11) {
        goto LABEL_18;
      }
      uint64_t v26 = wordm_sysdct_Lookup_Chinese(a2, (unsigned __int8 *)(a3 + v24), (unsigned __int16)(a10 - v24), (uint64_t)v34, a12, v23);
      if ((v26 & 0x80000000) != 0) {
        goto LABEL_24;
      }
      if (LODWORD(v34[0]) > 5 || ((1 << SLOBYTE(v34[0])) & 0x34) == 0) {
        goto LABEL_18;
      }
    }
    if (*a9)
    {
      uint64_t v27 = heap_Realloc(*(uint64_t **)(a1 + 8), v19, 340 * (unsigned __int16)*a9 + 341);
      if (!v27) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 1, 341);
    if (!v27) {
      break;
    }
LABEL_17:
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9) = v24;
    __strcpy_chk();
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9 + 74) = WORD3(v35);
    __strcpy_chk();
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9 + 338) = HIWORD(v51);
    __int16 v28 = *a9;
    uint64_t v29 = v27 + 340 * (unsigned __int16)*a9;
    *(_DWORD *)(v29 + 4) = v34[0];
    *(_DWORD *)(v29 + 76) = DWORD2(v35);
    *a9 = v28 + 1;
    uint64_t v19 = v27;
LABEL_18:
    if (WORD3(v35)) {
      v24 += WORD3(v35);
    }
    else {
      unsigned __int16 v24 = v25;
    }
    if (v24 >= v25) {
      goto LABEL_24;
    }
  }
  uint64_t v19 = 0;
LABEL_27:
  uint64_t v26 = 2350915594;
LABEL_24:
  heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
  *unsigned int v31 = v19;
  return v26;
}

uint64_t getDomainSegmentations(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, __int16 *a8, int a9, unsigned __int8 a10)
{
  uint64_t v47 = 0;
  unsigned __int16 v46 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  MarkerArgint Str = (char *)marker_getMarkerArgStr(1u);
  uint64_t v19 = bed_GetpElem(a5, 0, &v44);
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v19 = bed_GetpElem(a5, 0xFFFFu, &v45);
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v42 = a1;
  long long v43 = a2;
  int v20 = *(_DWORD *)(v45 + 32);
  int v21 = *(_DWORD *)(v44 + 32);
  uint64_t v19 = bed_GetpElem(a5, 0, &v47);
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v22 = bed_GetcElem(a5, &v46);
  if ((v22 & 0x80000000) == 0)
  {
    unsigned __int16 v40 = v20 - v21;
    unsigned int v23 = v46;
    if (v46)
    {
      uint64_t v24 = 0;
      unsigned __int16 v25 = (unsigned int *)(v47 + 40);
      while (*(v25 - 2) <= *(_DWORD *)(v45 + 32))
      {
        if (*(v25 - 5) == 21) {
          MarkerArgint Str = (char *)(*(void *)(a6 + 8) + *v25);
        }
        v25 += 16;
        if (v46 == ++v24) {
          goto LABEL_24;
        }
      }
      LODWORD(v24) = (unsigned __int16)v24;
    }
    else
    {
      LODWORD(v24) = 0;
    }
    if (v24 >= v46)
    {
LABEL_24:
      unsigned int v26 = a4 + v40;
      unsigned __int16 v33 = v40;
    }
    else
    {
      uint64_t v37 = a3;
      long long v38 = a8;
      long long v39 = a7;
      __int16 v36 = a4;
      unsigned int v26 = a4 + v40;
      uint64_t v27 = v47;
      uint64_t v28 = v44;
      unint64_t v29 = (unint64_t)v24 << 6;
      LOWORD(v41) = v40;
      unint64_t v30 = v24;
      do
      {
        if (v26 < (unsigned __int16)(*(_WORD *)(v27 + v29 + 32) - *(_DWORD *)(v28 + 32))) {
          break;
        }
        if (*(_DWORD *)(v27 + v29 + 20) == 21)
        {
          uint64_t v31 = *(unsigned int *)(v27 + v29 + 40);
          if (strcmp(MarkerArgStr, (const char *)(*(void *)(a6 + 8) + v31)))
          {
            int v32 = marker_getMarkerArgStr(1u);
            if (strcmp(MarkerArgStr, v32))
            {
              uint64_t v22 = GetInDomainSegmentation(v42, v43, v37, v40, v41, (unsigned __int16)*(_DWORD *)(v47 + v29 + 32) - (unsigned __int16)*(_DWORD *)(v44 + 32), MarkerArgStr, v39, v38, v36, a9, a10);
              if ((v22 & 0x80000000) != 0) {
                return v22;
              }
            }
            MarkerArgint Str = (char *)(*(void *)(a6 + 8) + v31);
            uint64_t v27 = v47;
            uint64_t v28 = v44;
            int v41 = *(_DWORD *)(v47 + v29 + 32) - *(_DWORD *)(v44 + 32);
            unsigned int v23 = v46;
          }
        }
        ++v30;
        v29 += 64;
      }
      while (v30 < v23);
      a8 = v38;
      a7 = v39;
      a3 = v37;
      LOWORD(a4) = v36;
      unsigned __int16 v33 = v41;
    }
    if (v26 >= v33)
    {
      __int16 v34 = marker_getMarkerArgStr(1u);
      if (strcmp(MarkerArgStr, v34)) {
        return GetInDomainSegmentation(v42, v43, a3, v40, v33, v26, MarkerArgStr, a7, a8, a4, a9, a10);
      }
    }
  }
  return v22;
}

uint64_t DoTHTLatin(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4, char **a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  memset(v11, 0, sizeof(v11));
  uint64_t v7 = wordm_sysdct_CharLookup_Thai(a2, a3, a4, (uint64_t)v11, 0x16u, 0, "normal");
  if (!v7)
  {
    int v8 = strlen((const char *)&v11[4] + 12);
    uint64_t v9 = (char *)heap_Alloc(*(void *)(a1 + 8), (v8 + 3));
    *a5 = v9;
    if (v9) {
      strcpy(v9, (const char *)&v11[4] + 12);
    }
  }
  return v7;
}

uint64_t DoMaxWords(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  uint64_t v20 = a1;
  uint64_t v21 = a14;
  uint64_t v112 = *MEMORY[0x263EF8340];
  unsigned __int16 v110 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v107 = 0;
  unsigned __int16 v106 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(void *)(v21 + 12) = 0x100000001;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  BOOL v23 = LogLevel > 4;
  uint64_t DomainSegmentations = bed_GetpElem(a7, 0xFFFFu, &v109);
  if ((DomainSegmentations & 0x80000000) != 0) {
    return DomainSegmentations;
  }
  int v99 = a15;
  if (a5 && a5 != (unsigned __int16)*(_DWORD *)(v109 + 36)) {
    *(_DWORD *)(v21 + 16) = 0;
  }
  unsigned int v28 = a16;
  log_OutText(*(void *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a5);
  UTOITrace(v23, v20, a6, a7, (uint64_t)"START of normalization");
  if (v99 == 1)
  {
    uint64_t DomainSegmentations = getDomainSegmentations(v20, (void *)a3, (uint64_t)a4, a5, a7, a10, &v107, (__int16 *)&v106, 0, v28);
    if ((DomainSegmentations & 0x80000000) != 0) {
      return DomainSegmentations;
    }
  }
  unsigned int v97 = v28;
  if (a5)
  {
    unsigned int v88 = LogLevel;
    uint64_t v92 = a2;
    BOOL v91 = LogLevel > 4;
    uint64_t v96 = v21;
    uint64_t v89 = a6;
    uint64_t v90 = a7;
    uint64_t v29 = 0;
    LOWORD(v30) = 0;
    __int16 v98 = 0;
    unsigned __int16 v31 = 0;
    uint64_t v100 = a12;
    int v93 = a11;
    int v32 = a13;
    uint64_t v95 = v20;
    int v94 = a13;
    do
    {
      memset(__dst, 0, sizeof(__dst));
      if (v99 == 1 && v106 > (unsigned __int16)v30)
      {
        unsigned __int16 v33 = 0;
        unint64_t v30 = (unsigned __int16)v30;
        __int16 v34 = (unsigned __int16 *)(v107 + 340 * (unsigned __int16)v30);
        while (1)
        {
          unsigned int v35 = *v34;
          if (v35 > v31) {
            break;
          }
          v34 += 170;
          if (v35 == v31) {
            unsigned __int16 v33 = v30;
          }
          ++v30;
          if (v35 == v31 || v30 >= v106)
          {
            if (v35 != v31) {
              break;
            }
            memcpy(__dst, (const void *)(v107 + 340 * v33 + 4), sizeof(__dst));
            goto LABEL_23;
          }
        }
      }
      uint64_t v40 = wordm_sysdct_Lookup_Chinese((void *)a3, (unsigned __int8 *)&a4[v31], (unsigned __int16)(a5 - v31), (uint64_t)__dst, v28, "normal");
      if ((v40 & 0x80000000) != 0)
      {
LABEL_79:
        long long v43 = 0;
LABEL_80:
        uint64_t v83 = v40;
        goto LABEL_95;
      }
LABEL_23:
      if (LODWORD(__dst[0]) <= 5 && ((1 << SLOBYTE(__dst[0])) & 0x34) != 0)
      {
        if (v32)
        {
          uint64_t v40 = bed_Insert(a8, &szWORD_BEG_0, 1);
          if ((v40 & 0x80000000) != 0) {
            goto LABEL_79;
          }
          ++*v100;
        }
        size_t v41 = (unsigned __int16)(strlen((const char *)&__dst[4] + 12) + 1);
        uint64_t v42 = (char *)heap_Alloc(*(void *)(v20 + 8), v41);
        if (!v42) {
          return 2350915594;
        }
        long long v43 = v42;
        bzero(v42, v41);
        strcpy(v43, (const char *)&__dst[4] + 12);
        unsigned __int16 v44 = strlen((const char *)&__dst[4] + 12);
        uint64_t v40 = bed_Insert(a8, v43, v44);
        if ((v40 & 0x80000000) != 0) {
          goto LABEL_80;
        }
        *v100 += strlen((const char *)&__dst[4] + 12);
        heap_Free(*(void **)(v20 + 8), (uint64_t)v43);
        if (v32)
        {
          uint64_t v40 = bed_Insert(a8, &szWORD_END_1, 1);
          if ((v40 & 0x80000000) != 0) {
            goto LABEL_79;
          }
          ++*v100;
        }
        uint64_t v40 = bed_GetcElem(a8, &v110);
        if ((v40 & 0x80000000) != 0) {
          goto LABEL_79;
        }
        int v45 = *(_DWORD *)(a3 + 32);
        uint64_t v46 = a10;
        uint64_t v47 = (char *)&__dst[4] + 6;
        if (v45) {
          uint64_t v47 = (char *)&__dst[20] + 14;
        }
        if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                              + 4 * *(_WORD *)v47
                                                                              + 5))
        {
          uint64_t v40 = datac_RequestBlock(a9, v93, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *(_WORD *)v47 + 5), &a10);
          if ((v40 & 0x80000000) != 0) {
            goto LABEL_79;
          }
          uint64_t v46 = a10;
          int v45 = *(_DWORD *)(a3 + 32);
        }
        uint64_t v48 = *(void *)(v46 + 8);
        unsigned int v49 = *(unsigned __int16 *)(v46 + 16);
        unsigned int v50 = *(unsigned __int16 *)(v46 + 2);
        __int16 v51 = v48 + v50 * v49;
        char v105 = 0;
        int v104 = 0;
        if (v45)
        {
          unsigned int v52 = HIWORD(__dst[20]);
          BOOL v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
          if (HIWORD(__dst[20]))
          {
            unsigned int NextUtf8Offset = 0;
            BOOL v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
            do
            {
              if (*((unsigned char *)&__dst[4] + NextUtf8Offset + 12) == 92) {
                break;
              }
              unsigned int WCharFromUtf8 = utf8_GetWCharFromUtf8((unsigned char *)&__dst[4] + 12, NextUtf8Offset, v52);
              LH_itoa(WCharFromUtf8, (char *)&v104, 0x10u);
              _WORD *v53 = HIWORD(v104);
              v53[1] = v104;
              v53 += 2;
              unsigned int NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset((char *)&__dst[4] + 12, NextUtf8Offset);
              unsigned int v52 = HIWORD(__dst[20]);
            }
            while (HIWORD(__dst[20]) > NextUtf8Offset);
          }
        }
        else
        {
          BOOL v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
          if (WORD3(__dst[4]))
          {
            unsigned int v57 = 0;
            BOOL v53 = (_WORD *)(v48 + v50 * (unint64_t)v49);
            do
            {
              int v58 = v57 + v29;
              if (v57 + v29 >= a5) {
                break;
              }
              unsigned int v59 = utf8_GetWCharFromUtf8(a4, v57 + v29, a5);
              LH_itoa(v59, (char *)&v104, 0x10u);
              _WORD *v53 = HIWORD(v104);
              v53[1] = v104;
              v53 += 2;
              unsigned int v57 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v58) - v29);
            }
            while (v57 < WORD3(__dst[4]));
          }
        }
        int v56 = 0;
        *(unsigned char *)BOOL v53 = 0;
        *(_WORD *)(a10 + 16) += (_WORD)v53 - v51 + 1;
        uint64_t v20 = v95;
        unsigned int v28 = v97;
        int v32 = v94;
      }
      else
      {
        log_OutText(*(void *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v37, v38, v39, v29);
        int v56 = 1;
      }
      if (*(_DWORD *)(v96 + 16) == 1)
      {
        unsigned int v60 = *(unsigned __int16 *)(v96 + 8);
        uint64_t v61 = *(void *)v96;
        if (v60 >= *(unsigned __int16 *)(v96 + 10))
        {
          uint64_t v62 = heap_Realloc(*(uint64_t **)(v20 + 8), v61, 12 * *(unsigned __int16 *)(v96 + 10) + 121);
          if (!v62)
          {
            long long v43 = 0;
            uint64_t v83 = 2350915594;
            goto LABEL_95;
          }
          uint64_t v61 = v62;
          *(void *)uint64_t v96 = v62;
          *(_WORD *)(v96 + 10) += 10;
          unsigned int v60 = *(unsigned __int16 *)(v96 + 8);
        }
        unsigned int v63 = v60;
        uint64_t v64 = v61 + 12 * v60;
        *(_WORD *)uint64_t v64 = v98;
        *(void *)(v64 + 2) = 0;
        int v65 = WORD3(__dst[4]);
        if (v56) {
          *(_DWORD *)(v61 + 12 * v63 + 4) = 1;
        }
        v98 += v65;
        *(_WORD *)(v96 + 8) = v63 + 1;
      }
      else
      {
        int v65 = WORD3(__dst[4]);
      }
      if (v65) {
        v31 += v65;
      }
      else {
        unsigned __int16 v31 = a5;
      }
      uint64_t v29 = v31;
    }
    while (v31 < a5);
    uint64_t v66 = bed_GetcElem(a8, &v110);
    if ((v66 & 0x80000000) != 0) {
      goto LABEL_82;
    }
    if (v110)
    {
      BOOL v23 = v91;
      UTOISubTrace(v91, v20, a8, (uint64_t)"replacement string");
      uint64_t v21 = v96;
      a6 = v89;
      a7 = v90;
      if (*(_DWORD *)(v96 + 16) != 1) {
        goto LABEL_92;
      }
      uint64_t v66 = bed_GetpElem(a8, 0, &v108);
      if ((v66 & 0x80000000) == 0)
      {
        if (v110)
        {
          unint64_t v73 = 0;
          unsigned int v74 = 0;
          unsigned __int16 v75 = 1;
          uint64_t v76 = v108;
          do
          {
            if (*(unsigned char *)(v76 + v73) == 16)
            {
              uint64_t v77 = *(unsigned __int16 *)(v96 + 8);
              if (v74 >= v77)
              {
LABEL_85:
                uint64_t v81 = v89;
                log_OutText(*(void *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v70, v71, v72, v75);
                int v82 = 0;
                goto LABEL_86;
              }
              uint64_t v78 = v74;
              uint64_t v79 = (int *)(*(void *)v96 + 12 * v74 + 4);
              while (1)
              {
                int v80 = *v79;
                v79 += 3;
                if (v80 != 1) {
                  break;
                }
                if (v77 == ++v78) {
                  goto LABEL_85;
                }
              }
              *(_WORD *)(*(void *)v96 + 12 * (unsigned __int16)v78 + 8) = v73;
              ++v75;
              unsigned int v74 = (unsigned __int16)v78 + 1;
            }
            ++v73;
          }
          while (v73 < v110);
        }
        uint64_t v81 = v89;
        int v82 = 1;
LABEL_86:
        if (v88 >= 5 && *(_WORD *)(v96 + 8))
        {
          uint64_t v84 = 0;
          unint64_t v85 = 0;
          do
          {
            log_OutText(*(void *)(v20 + 32), v92, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v70, v71, v72, v85++);
            v84 += 12;
          }
          while (v85 < *(unsigned __int16 *)(v96 + 8));
        }
        uint64_t v21 = v96;
        BOOL v23 = v91;
        a6 = v81;
        if (v82) {
          *(_DWORD *)(v96 + 12) = 0;
        }
        goto LABEL_92;
      }
LABEL_82:
      uint64_t v83 = v66;
      goto LABEL_94;
    }
    log_OutText(*(void *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v67, v68, v69, v87);
    a6 = v89;
    a7 = v90;
    uint64_t v21 = v96;
    BOOL v23 = v91;
  }
LABEL_92:
  uint64_t v83 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, a5, (uint64_t *)v21);
  if ((v83 & 0x80000000) == 0) {
    UTOITrace(v23, v20, a6, a7, (uint64_t)"END of normalization");
  }
LABEL_94:
  long long v43 = 0;
LABEL_95:
  if (v106)
  {
    heap_Free(*(void **)(v20 + 8), v107);
    uint64_t v107 = 0;
  }
  if (v43) {
    heap_Free(*(void **)(v20 + 8), (uint64_t)v43);
  }
  return v83;
}

uint64_t DoSpell(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, unsigned __int8 a12)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 0;
  }
  uint64_t v16 = 0;
  for (i = 0; i < a5; uint64_t v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v21 = wordm_sysdct_CharLookup_Chinese(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, a12, a11, "normal");
    if ((v21 & 0x80000000) != 0) {
      break;
    }
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      size_t v22 = (unsigned __int16)(strlen((const char *)&v29[4] + 12) + 3);
      BOOL v23 = (char *)heap_Alloc(*(void *)(a1 + 8), v22);
      if (!v23) {
        return 2350915594;
      }
      uint64_t v24 = v23;
      bzero(v23, v22);
      if (i)
      {
        strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        *(_WORD *)uint64_t v24 = 32;
        strcat(v24, (const char *)&v29[4] + 12);
      }
      *(_WORD *)&v24[strlen(v24)] = 32;
      unsigned __int16 v25 = strlen(v24);
      uint64_t v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
    }
    if (WORD3(v29[4])) {
      i += WORD3(v29[4]);
    }
    else {
      unsigned __int16 i = a5;
    }
  }
  return v21;
}

uint64_t DoLatin(uint64_t a1, void *a2, uint64_t a3, int a4, char **a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  __int16 v13 = 256;
  *(_OWORD *)__s = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  char v30 = 0;
  __strncpy_chk();
  v31[a4] = 0;
  uint64_t v9 = sysdct_char_LookUp_Chinese(a2, v31, __s, &v13, 0, 0, "normal");
  if ((v9 & 0x80000000) == 0)
  {
    if (v13)
    {
      int v10 = strlen(__s);
      unsigned int v11 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (v10 + 1));
      *a5 = v11;
      if (v11) {
        strcpy(v11, __s);
      }
      else {
        return 2350915594;
      }
    }
    else
    {
      *a5 = 0;
    }
  }
  return v9;
}

uint64_t wordm_sysdct_Lookup_Chinese(void *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, const char *a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t result = 2370838535;
  if (a1 && a2 && a4)
  {
    unsigned int v25 = 0;
    memset(v26, 0, sizeof(v26));
    char v27 = 0;
    *(_OWORD *)(a4 + 4) = 0u;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 52) = 0u;
    *(unsigned char *)(a4 + 68) = 0;
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 76) = 0u;
    *(_OWORD *)(a4 + 92) = 0u;
    *(_OWORD *)(a4 + 108) = 0u;
    *(_OWORD *)(a4 + 124) = 0u;
    *(_OWORD *)(a4 + 140) = 0u;
    *(_OWORD *)(a4 + 156) = 0u;
    *(_OWORD *)(a4 + 172) = 0u;
    *(_OWORD *)(a4 + 188) = 0u;
    *(_OWORD *)(a4 + 204) = 0u;
    *(_OWORD *)(a4 + 220) = 0u;
    *(_OWORD *)(a4 + 236) = 0u;
    *(_OWORD *)(a4 + 252) = 0u;
    *(unsigned char *)(a4 + 332) = 0;
    *(_OWORD *)(a4 + 268) = 0u;
    *(_OWORD *)(a4 + 284) = 0u;
    *(_OWORD *)(a4 + 300) = 0u;
    *(_OWORD *)(a4 + 316) = 0u;
    if (a3 >= 0x40) {
      unsigned int v10 = 64;
    }
    else {
      unsigned int v10 = a3;
    }
    *(_WORD *)(a4 + 334) = 0;
    if (v10 && a5)
    {
      unsigned int v13 = 0;
      int v14 = 0;
      do
      {
        v14 += utf8_determineUTF8CharLength(a2[(unsigned __int16)v14]);
        ++v13;
      }
      while (v10 > (unsigned __int16)v14 && v13 < a5);
      __memmove_chk();
      __src[(unsigned __int16)v14] = 0;
      if ((_WORD)v14)
      {
        *(_DWORD *)a4 = 2;
        unsigned __int16 v24 = 256;
        unsigned __int16 v16 = v14;
        while (1)
        {
          uint64_t result = sysdct_word_LookUp_Chinese(a1, (uint64_t)__src, v16, v26, &v24, a6);
          unsigned int v17 = v24;
          if (result || v24 != 256) {
            break;
          }
          unsigned int v25 = (unsigned __int16)(v16 - 1);
          utf8_GetPreviousValidUtf8Offset((uint64_t)__src, &v25);
          unsigned __int16 v16 = v25;
          unsigned int v17 = 256;
          unsigned __int16 v24 = 256;
          if ((unsigned __int16)(v25 - 1) >= (unsigned __int16)v14) {
            goto LABEL_28;
          }
        }
        if ((result & 0x80000000) != 0) {
          return result;
        }
LABEL_28:
        if ((unsigned __int16)(v16 - 1) < (unsigned __int16)v14)
        {
          *((unsigned char *)v26 + v17) = 0;
          __strcpy_chk();
          *(_DWORD *)(a4 + 72) = 16;
          *(_WORD *)(a4 + 334) = v24;
          __src[v16] = 0;
          __strcpy_chk();
          uint64_t result = 0;
          *(_WORD *)(a4 + 70) = v16;
          return result;
        }
        unsigned __int16 v21 = utf8_determineUTF8CharLength(*a2);
        memmove((void *)(a4 + 4), __src, v21);
        *(unsigned char *)(a4 + v21 + 4) = 0;
        *(_WORD *)(a4 + 70) = v21;
        unsigned __int16 v24 = 256;
        if (sysdct_char_LookUp_Chinese(a1, __src, (void *)(a4 + 76), &v24, 0, 0, a6)
          || (uint64_t v22 = v24, *(unsigned char *)(a4 + v24 + 76) = 0, *(_WORD *)(a4 + 334) = v22, !v22))
        {
          uint64_t result = 0;
          *(_DWORD *)a4 = 0;
          return result;
        }
        if (*(unsigned char *)(a4 + 76) == 35 && *(unsigned char *)(a4 + 77))
        {
          char v23 = atoi((const char *)(a4 + 77));
          uint64_t result = 0;
          *(unsigned char *)(a4 + 76) = v23;
          *(unsigned char *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
          return result;
        }
        return 0;
      }
    }
    else
    {
      __src[0] = 0;
    }
    int v18 = 0;
    do
    {
      size_t v19 = (unsigned __int16)v18;
      int v20 = a2[(unsigned __int16)v18++];
    }
    while (v20 == 32);
    memmove((void *)(a4 + 4), a2, v19);
    return 0;
  }
  return result;
}

uint64_t wparserDctMaxWords_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplMaxWords;
  return result;
}

uint64_t wparser_impl_maxwords_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  MaxWordLeunint64_t n = 2350915591;
  uint64_t v19 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v19);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v10, v11, v12, v18);
      unsigned int v13 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 56);
      if (v13)
      {
        *unsigned int v13 = a3;
        v13[1] = a4;
        v13[2] = v19;
        char v13[3] = "WPARSER_IMPL";
        *(void *)a5 = v13;
        *(_DWORD *)(a5 + 8) = 87652;
        MaxWordLeunint64_t n = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v14, v15, v16, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_maxwords_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLeunint64_t n = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_Init(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10 = 7549556;
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_maxwords_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1
      || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 32), (uint64_t)a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v23 = *(void *)(a1 + 32);
      unsigned __int8 v28 = *(unsigned char *)(a1 + 48);
      int v27 = *(_DWORD *)(a1 + 40);
      return DoMaxWords(v21, v22, v23, a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, v27, v28);
    }
  }
  return result;
}

uint64_t wparser_impl_maxwords_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_maxwords_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 32);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_maxwords_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    uint64_t v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  uint64_t v3 = Str;
  int v4 = atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(unsigned char *)(a1 + 48) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoDag(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  uint64_t v21 = a1;
  uint64_t v22 = a14;
  uint64_t v227 = *MEMORY[0x263EF8340];
  unsigned __int16 v207 = 0;
  uint64_t v205 = 0;
  uint64_t v206 = 0;
  uint64_t v204 = 0;
  __int16 v203 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(void *)(v22 + 12) = 0x100000001;
  unsigned int LogLevel = log_GetLogLevel(a1[4]);
  uint64_t result = bed_GetpElem(a7, 0xFFFFu, &v206);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v196 = a16;
  int v28 = a15;
  if (a5 && a5 != (unsigned __int16)*(_DWORD *)(v206 + 36)) {
    *(_DWORD *)(v22 + 16) = 0;
  }
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a5);
  UTOITrace(LogLevel > 4, (uint64_t)v21, a6, a7, (uint64_t)"START of normalization");
  if (v28 == 1)
  {
    uint64_t result = getDomainSegmentations((uint64_t)v21, (void *)a3, (uint64_t)a4, a5, a7, a10, &v204, &v203, 0, v196);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  unsigned int v186 = LogLevel;
  BOOL v187 = LogLevel > 4;
  unsigned int v188 = -1711267830;
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: Entering", v29, v30, v31, v167);
  uint64_t v32 = heap_Calloc((void *)v21[1], 1, 16);
  if (!v32) {
    return 2583699466;
  }
  uint64_t v33 = v32;
  uint64_t v202 = a2;
  if (a5)
  {
    unsigned int v34 = 0;
    unsigned __int16 v35 = 0;
    do
    {
      ++v35;
      unsigned int v34 = (unsigned __int16)(utf8_determineUTF8CharLength(a4[v34]) + v34);
    }
    while (v34 < a5);
  }
  else
  {
    unsigned __int16 v35 = 0;
  }
  *(_DWORD *)(v33 + 8) = v35;
  *(_DWORD *)(v33 + 12) = 13285840;
  __int16 v36 = (void *)heap_Calloc((void *)v21[1], v35 + 1, 24);
  *(void *)uint64_t v33 = v36;
  if (!v36) {
    return 2583699466;
  }
  if (((v35 + 1) & 0xFFFE) != 0) {
    unsigned int v37 = (unsigned __int16)(v35 + 1);
  }
  else {
    unsigned int v37 = 1;
  }
  bzero(v36, 24 * v37);
  if (!a5)
  {
LABEL_49:
    log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: searching the heaviest edge from all possible paths", v38, v39, v40, v168);
    uint64_t v63 = *(void *)v33;
    if (!*(void *)v33)
    {
      dag_free(v21, v33);
      log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: Failed search the path, some error", v106, v107, v108, v169);
      return 2583699462;
    }
    uint64_t v181 = v22;
    uint64_t v183 = a8;
    uint64_t v192 = a5;
    uint64_t v176 = a6;
    uint64_t v178 = a7;
    uint64_t v64 = *(unsigned int *)(v33 + 8);
    if ((v64 & 0x80000000) == 0)
    {
      uint64_t v65 = v64 + 1;
      uint64_t v66 = (void *)(v63 + 16);
      do
      {
        *uint64_t v66 = -2147483647;
        v66 += 3;
        --v65;
      }
      while (v65);
    }
    *(void *)(v63 + 16) = 0xFFFFFFFF00000000;
    log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: All possible path, <vertex_from: vertex_to>: weight, accumulated weight", v60, v61, v62, v169);
    if ((int)v64 >= 1)
    {
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)v33;
      do
      {
        for (unsigned __int16 i = *(uint64_t **)(v71 + 24 * v70); i; unsigned __int16 i = (uint64_t *)*i)
        {
          unsigned int v73 = *((_DWORD *)i + 3);
          int v74 = *((_DWORD *)i + 4) + *(_DWORD *)(v71 + 24 * v70 + 16);
          log_OutText(v21[4], v202, 5, 0, (uint64_t)"<%d: %d>: %d, %d", v67, v68, v69, v70);
          uint64_t v71 = *(void *)v33;
          uint64_t v75 = *(void *)v33 + 24 * v73;
          int v77 = *(_DWORD *)(v75 + 16);
          uint64_t v76 = (int *)(v75 + 16);
          if (v74 > v77)
          {
            int *v76 = v74;
            uint64_t v78 = v71 + 24 * v73;
            *(_DWORD *)(v78 + 20) = v70;
            *(void *)(v78 + 8) = i[3];
          }
        }
        ++v70;
      }
      while (v70 != v64);
    }
    uint64_t v79 = heap_Calloc((void *)v21[1], 1, 24);
    if (v79)
    {
      uint64_t v80 = v79;
      uint64_t v81 = heap_Calloc((void *)v21[1], (v64 + 2), 4);
      *(void *)uint64_t v80 = v81;
      if (v81)
      {
        uint64_t v82 = heap_Calloc((void *)v21[1], (v64 + 2), 8);
        *(void *)(v80 + 8) = v82;
        unint64_t v86 = *(_DWORD **)v80;
        if (v82)
        {
          *(_WORD *)(v80 + 16) = 0;
          *unint64_t v86 = v64;
          uint64_t v87 = v202;
          if ((v64 & 0x80000000) == 0)
          {
            unsigned __int16 v88 = 0;
            do
            {
              ++v88;
              uint64_t v89 = *(void *)v33 + 24 * v64;
              uint64_t v90 = *(void *)(v89 + 8);
              LODWORD(v64) = *(_DWORD *)(v89 + 20);
              v86[v88] = v64;
              *(void *)(*(void *)(v80 + 8) + 8 * v88) = v90;
            }
            while ((v64 & 0x80000000) == 0);
            *(_WORD *)(v80 + 16) = v88;
          }
          log_OutText(v21[4], v202, 5, 0, (uint64_t)"[DAG]: Leaving", v83, v84, v85, v170);
          uint64_t v91 = (unsigned __int16)(*(_WORD *)(v80 + 16) - 1);
          uint64_t v197 = heap_Calloc((void *)v21[1], v91, 336);
          uint64_t v179 = v91;
          if (v197)
          {
            if (v91)
            {
              uint64_t v92 = 0;
              int v93 = 0;
              uint64_t v199 = v21;
              uint64_t v173 = v80;
              do
              {
                uint64_t v94 = v197 + 336 * v92;
                *(_DWORD *)uint64_t v94 = 2;
                *(_OWORD *)(v94 + 20) = 0u;
                *(_OWORD *)(v94 + 36) = 0u;
                *(_OWORD *)(v94 + 52) = 0u;
                *(unsigned char *)(v94 + 68) = 0;
                *(_DWORD *)(v94 + 72) = 16;
                *(_OWORD *)(v94 + 92) = 0u;
                *(_OWORD *)(v94 + 108) = 0u;
                *(_OWORD *)(v94 + 124) = 0u;
                *(_OWORD *)(v94 + 140) = 0u;
                *(_OWORD *)(v94 + 156) = 0u;
                *(_OWORD *)(v94 + 172) = 0u;
                *(_OWORD *)(v94 + 188) = 0u;
                *(_OWORD *)(v94 + 204) = 0u;
                *(_OWORD *)(v94 + 220) = 0u;
                *(_OWORD *)(v94 + 236) = 0u;
                *(_OWORD *)(v94 + 252) = 0u;
                *(unsigned char *)(v94 + 332) = 0;
                unsigned int v184 = (_WORD *)(v94 + 334);
                *(_OWORD *)(v94 + 4) = 0u;
                uint64_t v95 = (void *)(v94 + 4);
                *(_WORD *)(v94 + 334) = 0;
                *(_WORD *)(v94 + 70) = 0;
                uint64_t v189 = (_WORD *)(v94 + 70);
                *(_OWORD *)(v94 + 76) = 0u;
                uint64_t v96 = (const char *)(v94 + 76);
                *(_OWORD *)(v94 + 268) = 0u;
                *(_OWORD *)(v94 + 284) = 0u;
                *(_OWORD *)(v94 + 300) = 0u;
                *(_OWORD *)(v94 + 316) = 0u;
                int v97 = *(_DWORD *)(*(void *)v80 + 4 * (v91 - v92 - 1))
                    - *(_DWORD *)(*(void *)v80 + 4 * (v91 - v92));
                int v194 = v93;
                __int16 v98 = &a4[(unsigned __int16)v93];
                int v99 = strlen(v98);
                unsigned __int16 v100 = 0;
                int v101 = 0;
                while (1)
                {
                  int v102 = v100;
                  if (v100 >= (unsigned __int16)v99) {
                    break;
                  }
                  unsigned __int16 v103 = utf8_determineUTF8CharLength(v98[v100]);
                  unsigned __int16 v100 = v102 + v103;
                  if (v97 == (unsigned __int16)++v101)
                  {
                    int v104 = v102 + v103;
                    if ((_WORD)v102 + v103) {
                      goto LABEL_75;
                    }
                    break;
                  }
                }
                int v104 = v99;
LABEL_75:
                *uint64_t v189 = v104;
                memcpy(v95, v98, (unsigned __int16)v104);
                *(unsigned char *)((unsigned __int16)*v189 + v197 + 336 * v92 + 5) = 0;
                uint64_t v80 = v173;
                uint64_t v91 = v179;
                uint64_t v105 = (v179 - v92);
                if (*(void *)(*(void *)(v173 + 8) + 8 * v105))
                {
                  __strcat_chk();
                  *unsigned int v184 = strlen(v96) + 1;
                  uint64_t v21 = v199;
                  heap_Free((void *)v199[1], *(void *)(*(void *)(v173 + 8) + 8 * v105));
                }
                else
                {
                  __strcpy_chk();
                  *unsigned int v184 = *v189 + 1;
                  uint64_t v21 = v199;
                }
                int v93 = v104 + v194;
                ++v92;
              }
              while (v92 != v179);
              unsigned int v188 = 0;
              uint64_t v87 = v202;
            }
            else
            {
              unsigned int v188 = 0;
            }
          }
          heap_Free((void *)v21[1], *(void *)v80);
          heap_Free((void *)v21[1], *(void *)(v80 + 8));
          heap_Free((void *)v21[1], v80);
          dag_free(v21, v33);
          uint64_t result = v188;
          if (!v197) {
            return result;
          }
          if (v91)
          {
            uint64_t v113 = 0;
            uint64_t v114 = 0;
            int v174 = 0;
            __int16 v115 = 0;
            int v195 = a12;
            int v172 = a11;
            int v185 = a13;
            do
            {
              unsigned int v190 = -1944051702;
              unsigned int v116 = *(_DWORD *)(v197 + 336 * v113);
              BOOL v117 = v116 > 5;
              int v118 = (1 << v116) & 0x34;
              if (v117 || v118 == 0)
              {
                log_OutText(v21[4], v87, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v110, v111, v112, v114);
                int v174 = 1;
              }
              else
              {
                if (v185)
                {
                  unsigned int v120 = bed_Insert(v183, &szWORD_BEG_1, 1);
                  if ((v120 & 0x80000000) != 0) {
                    goto LABEL_150;
                  }
                  ++*v195;
                }
                unsigned int v121 = (char *)(v197 + 336 * v113 + 76);
                size_t v122 = (unsigned __int16)(strlen(v121) + 1);
                uint64_t v123 = (char *)heap_Alloc(v21[1], v122);
                if (!v123) {
                  return 2350915594;
                }
                uint64_t v124 = v123;
                bzero(v123, v122);
                strcpy(v124, v121);
                unsigned __int16 v125 = strlen(v121);
                unsigned int v120 = bed_Insert(v183, v124, v125);
                if ((v120 & 0x80000000) != 0) {
                  goto LABEL_151;
                }
                *v195 += strlen(v121);
                heap_Free((void *)v21[1], (uint64_t)v124);
                if (v185)
                {
                  unsigned int v120 = bed_Insert(v183, &szWORD_END_2, 1);
                  if ((v120 & 0x80000000) != 0) {
                    goto LABEL_150;
                  }
                  ++*v195;
                }
                unsigned int v120 = bed_GetcElem(v183, &v207);
                if ((v120 & 0x80000000) != 0)
                {
LABEL_150:
                  uint64_t v124 = 0;
LABEL_151:
                  unsigned int v190 = v120;
                  goto LABEL_165;
                }
                int v126 = *(_DWORD *)(a3 + 32);
                uint64_t v127 = a10;
                uint64_t v128 = v197 + 336 * v113;
                uint64_t v129 = (_WORD *)(v128 + 70);
                uint64_t v130 = (_WORD *)(v128 + 334);
                if (v126) {
                  uint64_t v131 = (_WORD *)(v128 + 334);
                }
                else {
                  uint64_t v131 = (_WORD *)(v128 + 70);
                }
                if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                                      + 4 * *v131
                                                                                      + 5))
                {
                  unsigned int v120 = datac_RequestBlock(a9, v172, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *v131 + 5), &a10);
                  if ((v120 & 0x80000000) != 0) {
                    goto LABEL_150;
                  }
                  uint64_t v127 = a10;
                  int v126 = *(_DWORD *)(a3 + 32);
                }
                uint64_t v132 = *(void *)(v127 + 8);
                unsigned int v133 = *(unsigned __int16 *)(v127 + 16);
                unsigned int v134 = *(unsigned __int16 *)(v127 + 2);
                __int16 v135 = v132 + v134 * v133;
                char __s[4] = 0;
                *(_DWORD *)__s = 0;
                if (v126)
                {
                  unsigned int v136 = (unsigned __int16)*v130;
                  int v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                  if (*v130)
                  {
                    unsigned int NextUtf8Offset = 0;
                    int v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                    do
                    {
                      if (!*(unsigned char *)(v197 + 336 * v113 + NextUtf8Offset + 76)) {
                        break;
                      }
                      unsigned int WCharFromUtf8 = utf8_GetWCharFromUtf8(v121, NextUtf8Offset, v136);
                      LH_itoa(WCharFromUtf8, __s, 0x10u);
                      *int v137 = *(_WORD *)&__s[2];
                      v137[1] = *(_WORD *)__s;
                      v137 += 2;
                      unsigned int NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v121, NextUtf8Offset);
                      unsigned int v136 = (unsigned __int16)*v130;
                    }
                    while (v136 > NextUtf8Offset);
                  }
                }
                else
                {
                  int v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                  if (*v129)
                  {
                    unsigned int v140 = 0;
                    int v137 = (_WORD *)(v132 + v134 * (unint64_t)v133);
                    do
                    {
                      int v141 = v140 + v114;
                      if (v140 + v114 >= v192) {
                        break;
                      }
                      unsigned int v142 = utf8_GetWCharFromUtf8(a4, v140 + v114, v192);
                      LH_itoa(v142, __s, 0x10u);
                      *int v137 = *(_WORD *)&__s[2];
                      v137[1] = *(_WORD *)__s;
                      v137 += 2;
                      unsigned int v140 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v141) - v114);
                    }
                    while (v140 < (unsigned __int16)*v129);
                  }
                }
                *(unsigned char *)int v137 = 0;
                *(_WORD *)(a10 + 16) += (_WORD)v137 - v135 + 1;
                uint64_t v87 = v202;
                uint64_t v91 = v179;
              }
              if (*(_DWORD *)(v181 + 16) == 1)
              {
                unsigned int v143 = *(unsigned __int16 *)(v181 + 8);
                uint64_t v144 = *(void *)v181;
                if (v143 >= *(unsigned __int16 *)(v181 + 10))
                {
                  uint64_t v145 = heap_Realloc((uint64_t *)v21[1], v144, 12 * *(unsigned __int16 *)(v181 + 10) + 121);
                  if (!v145) {
                    goto LABEL_164;
                  }
                  uint64_t v144 = v145;
                  *(void *)uint64_t v181 = v145;
                  *(_WORD *)(v181 + 10) += 10;
                  unsigned int v143 = *(unsigned __int16 *)(v181 + 8);
                }
                unsigned int v146 = v143;
                uint64_t v147 = v144 + 12 * v143;
                *(_WORD *)uint64_t v147 = v115;
                *(void *)(v147 + 2) = 0;
                __int16 v148 = *(_WORD *)(v197 + 336 * v113 + 70);
                if (v174 == 1) {
                  *(_DWORD *)(v144 + 12 * v146 + 4) = 1;
                }
                v115 += v148;
                *(_WORD *)(v181 + 8) = v146 + 1;
              }
              uint64_t v114 = ++v113;
            }
            while (v113 != v91);
          }
          if (!v192) {
            goto LABEL_162;
          }
          unsigned int v149 = bed_GetcElem(v183, &v207);
          if ((v149 & 0x80000000) != 0) {
            goto LABEL_152;
          }
          if (v207)
          {
            UTOISubTrace(v187, (uint64_t)v21, v183, (uint64_t)"replacement string");
            if (*(_DWORD *)(v181 + 16) == 1)
            {
              unsigned int v149 = bed_GetpElem(v183, 0, &v205);
              if ((v149 & 0x80000000) == 0)
              {
                if (v207)
                {
                  unint64_t v156 = 0;
                  unsigned int v157 = 0;
                  unsigned __int16 v158 = 1;
                  uint64_t v159 = v205;
                  do
                  {
                    if (*(unsigned char *)(v159 + v156) == 16)
                    {
                      uint64_t v160 = *(unsigned __int16 *)(v181 + 8);
                      if (v157 >= v160)
                      {
LABEL_155:
                        log_OutText(v21[4], v87, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v153, v154, v155, v158);
                        int v164 = 0;
                        goto LABEL_156;
                      }
                      uint64_t v161 = v157;
                      int v162 = (int *)(*(void *)v181 + 12 * v157 + 4);
                      while (1)
                      {
                        int v163 = *v162;
                        v162 += 3;
                        if (v163 != 1) {
                          break;
                        }
                        if (v160 == ++v161) {
                          goto LABEL_155;
                        }
                      }
                      *(_WORD *)(*(void *)v181 + 12 * (unsigned __int16)v161 + 8) = v156;
                      ++v158;
                      unsigned int v157 = (unsigned __int16)v161 + 1;
                    }
                    ++v156;
                  }
                  while (v156 < v207);
                }
                int v164 = 1;
LABEL_156:
                if (v186 >= 5 && *(_WORD *)(v181 + 8))
                {
                  uint64_t v165 = 0;
                  unint64_t v166 = 0;
                  do
                  {
                    log_OutText(v21[4], v202, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v153, v154, v155, v166++);
                    v165 += 12;
                  }
                  while (v166 < *(unsigned __int16 *)(v181 + 8));
                }
                if (v164) {
                  *(_DWORD *)(v181 + 12) = 0;
                }
                goto LABEL_162;
              }
LABEL_152:
              unsigned int v190 = v149;
              goto LABEL_164;
            }
          }
          else
          {
            log_OutText(v21[4], v87, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v150, v151, v152, v171);
          }
LABEL_162:
          unsigned int v190 = utoin_IncrReplaceCurrentRegion(v176, v178, v183, v192, (uint64_t *)v181);
          if ((v190 & 0x80000000) == 0) {
            UTOITrace(v187, (uint64_t)v21, v176, v178, (uint64_t)"END of normalization");
          }
LABEL_164:
          uint64_t v124 = 0;
LABEL_165:
          if (v203)
          {
            heap_Free((void *)v21[1], v204);
            uint64_t v204 = 0;
          }
          if (v124) {
            heap_Free((void *)v21[1], (uint64_t)v124);
          }
          heap_Free((void *)v21[1], v197);
          return v190;
        }
        if (v86)
        {
          heap_Free((void *)v21[1], (uint64_t)v86);
          *(void *)uint64_t v80 = 0;
        }
      }
      uint64_t v109 = *(void *)(v80 + 8);
      if (v109)
      {
        heap_Free((void *)v21[1], v109);
        *(void *)(v80 + 8) = 0;
      }
      heap_Free((void *)v21[1], v80);
    }
    return 2583699466;
  }
  uint64_t v180 = v22;
  *(void *)uint64_t v182 = a8;
  uint64_t v175 = a6;
  uint64_t v177 = a7;
  unsigned __int16 v41 = 0;
  int v42 = 0;
  int v43 = v196;
  uint64_t v198 = (uint64_t)v21;
  uint64_t v191 = a5;
  do
  {
    int v44 = a5;
    unsigned __int16 v45 = 0;
    unsigned __int16 v46 = 0;
    uint64_t v47 = (unsigned __int8 *)&a4[(unsigned __int16)v42];
    int v193 = v42;
    int v48 = v44 - (unsigned __int16)v42;
    unsigned int v49 = (unsigned __int16)(v44 - v42);
    while (v45 < v49)
    {
      v45 += utf8_determineUTF8CharLength(v47[v45]);
      if (v43 == ++v46)
      {
        unsigned __int16 v46 = v43;
        if (v45) {
          goto LABEL_24;
        }
        break;
      }
    }
    unsigned __int16 v45 = v48;
LABEL_24:
    unsigned int v209 = 0;
    char v226 = 0;
    long long v224 = 0u;
    long long v225 = 0u;
    long long v222 = 0u;
    long long v223 = 0u;
    long long v220 = 0u;
    long long v221 = 0u;
    long long v218 = 0u;
    long long v219 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    long long v214 = 0u;
    long long v215 = 0u;
    long long v212 = 0u;
    long long v213 = 0u;
    *(_OWORD *)__s = 0u;
    long long v211 = 0u;
    unsigned __int16 v208 = 256;
    if (!v45 || v48 < v45) {
      goto LABEL_172;
    }
    __int16 v50 = 0;
    uint64_t v51 = 1;
    unsigned __int16 v52 = v45;
    do
    {
      uint64_t v53 = sysdct_word_LookUp_Chinese((void *)a3, (uint64_t)v47, v52, __s, &v208, &byte_20D5A22AE);
      if ((v53 & 0x80000000) != 0) {
        return v53;
      }
      if (v208 != 256)
      {
        unsigned int v54 = strrchr(__s, 92);
        if (v54) {
          uint64_t v51 = (atoi(v54 + 1) + 1);
        }
        if (v46)
        {
          dag_insert_edge_0(v198, v202, (uint64_t *)v33, v41, v41 + v46, v51, 0);
          ++v50;
        }
      }
      unsigned int v209 = (unsigned __int16)(v52 - 1);
      utf8_GetPreviousValidUtf8Offset((uint64_t)v47, &v209);
      unsigned __int16 v208 = 256;
      if (v46) {
        --v46;
      }
      else {
        unsigned __int16 v46 = 0;
      }
      if (v48 < (unsigned __int16)v209) {
        break;
      }
      unsigned __int16 v52 = v209;
    }
    while ((unsigned __int16)(v209 - 1) < v45);
    uint64_t v21 = (void *)v198;
    int v43 = v196;
    if (!v50)
    {
LABEL_172:
      uint64_t v53 = sysdct_char_LookUp_Chinese((void *)a3, v47, __s, &v208, 0, 0, "normal");
      if (!v53)
      {
        int v55 = (void *)heap_Calloc((void *)v21[1], 1, v208 + 1);
        if (!v55)
        {
          uint64_t v53 = 2583699466;
          goto LABEL_88;
        }
        uint64_t v56 = (uint64_t)v55;
        unsigned __int16 v57 = v208;
        if (v208)
        {
          unsigned __int16 v58 = v208 - 1;
          if (v208 == 1)
          {
LABEL_45:
            unsigned __int16 v57 = 1;
          }
          else
          {
            while (__s[v58] == 92)
            {
              unsigned __int16 v208 = --v57;
              if (!--v58) {
                goto LABEL_45;
              }
            }
          }
        }
        memcpy(v55, __s, v57);
        *(unsigned char *)(v56 + v208) = 0;
        dag_insert_edge_0((uint64_t)v21, v202, (uint64_t *)v33, v41, v41 + 1, 1, v56);
        uint64_t v53 = 0;
      }
    }
    int v59 = utf8_determineUTF8CharLength(*v47);
    a5 = v191;
    int v42 = v193 + v59;
    ++v41;
  }
  while (v191 > (unsigned __int16)(v193 + v59));
  a6 = v175;
  a7 = v177;
  uint64_t v22 = v180;
  a8 = *(void *)v182;
  if ((v53 & 0x80000000) == 0) {
    goto LABEL_49;
  }
LABEL_88:
  heap_Free((void *)v21[1], v33);
  return v53;
}

void *dag_free(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      int v5 = *(_DWORD *)(a2 + 8);
      uint64_t v6 = (v5 + 1);
      if (v5 != -1)
      {
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = *(void **)(v4 + 24 * v7);
          if (v8)
          {
            do
            {
              uint64_t v9 = (void *)*v8;
              heap_Free((void *)v3[1], (uint64_t)v8);
              uint64_t v8 = v9;
            }
            while (v9);
            uint64_t v4 = *(void *)a2;
          }
          *(void *)(v4 + 24 * v7++) = 0;
        }
        while (v7 != v6);
      }
    }
    heap_Free((void *)v3[1], v4);
    uint64_t v10 = (void *)v3[1];
    return heap_Free(v10, a2);
  }
  return result;
}

uint64_t dag_insert_edge_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = heap_Calloc(*(void **)(a1 + 8), 1, 32);
  if (result)
  {
    uint64_t v15 = result;
    *(_DWORD *)(result + 8) = a4;
    *(_DWORD *)(result + 12) = a5;
    *(void *)(result + 24) = a7;
    int v16 = uint32_log2(a6);
    *(_DWORD *)(v15 + 16) = v16 - uint32_log2(*((unsigned int *)a3 + 3));
    uint64_t v17 = *a3;
    uint64_t v18 = 24 * a4;
    *(void *)uint64_t v15 = *(void *)(*a3 + v18);
    *(void *)(v17 + v18) = v15;
    return log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[DAG]: insert edge (vertex, Chinese Character Positions and weight): %d %d %d %d", v19, v20, v21, a4);
  }
  return result;
}

uint64_t wparserDag_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplDag;
  return result;
}

uint64_t wparser_impl_dag_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  MaxWordLeunint64_t n = 2350915591;
  uint64_t v20 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v20);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: Begin", v10, v11, v12, v19);
      unsigned int v13 = (void *)heap_Calloc(*(void **)(v20 + 8), 1, 56);
      if (v13)
      {
        uint64_t v14 = v13;
        *unsigned int v13 = a3;
        v13[1] = a4;
        v13[2] = v20;
        char v13[3] = "WPARSER_IMPL";
        MaxWordLeunint64_t n = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        *(void *)a5 = v14;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(void *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: End (%x)", v15, v16, v17, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dag_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dag_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLeunint64_t n = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dag_Init(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10 = 7549556;
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_dag_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1
      || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 32), (uint64_t)a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v21 = *(void **)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v23 = *(void *)(a1 + 32);
      unsigned __int8 v28 = *(unsigned char *)(a1 + 48);
      int v27 = *(_DWORD *)(a1 + 40);
      return DoDag(v21, v22, v23, a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, v27, v28);
    }
  }
  return result;
}

uint64_t wparser_impl_dag_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_dag_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 32);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_dag_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparserDctPlusRules_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplDctPlusRules;
  return result;
}

uint64_t wparser_impl_plusrules_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = 0;
  if (!a5) {
    return 2350915591;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    uint64_t v12 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 88);
    if (v12)
    {
      void *v12 = a3;
      v12[1] = a4;
      uint64_t v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[4] = "WPARSER_IMPL";
      *(void *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(void *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_plusrules_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v11);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_Init(uint64_t a1, int a2, void *a3, uint64_t a4, const char *a5, int a6, unsigned char *a7)
{
  uint64_t v12 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  *(void *)(a1 + 40) = a3;
  if (!strcmp(a5, "win874"))
  {
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = xcode_Utf16leToWin874;
    *(void *)(a1 + 56) = 0;
    if (*a7
      && (uint64_t v18 = (*(uint64_t (**)(void, void, unsigned char *, uint64_t))(*a3 + 64))(a3[1], a3[2], a7, a1 + 64),
          (v18 & 0x80000000) != 0))
    {
      uint64_t v17 = v18;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 32), 1819, 0, v19, v20, v21, v22, v28);
    }
    else
    {
      *(void *)(a1 + 48) = 0;
      uint64_t v17 = o2t_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), (void *)(a1 + 48));
      if ((v17 & 0x80000000) != 0) {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 32), 52002, "%s%s", v23, v24, v25, v26, a5);
      }
      else {
        *(_DWORD *)(a1 + 80) = a6;
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 32), 1802, "%s%s", v13, v14, v15, v16, a5);
    return 2350915591;
  }
  return v17;
}

uint64_t wparser_impl_plusrules_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  v40[0] = a5;
  int v39 = 0;
  uint64_t v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v25 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  int v26 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v27 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v39, 0);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v34 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v39 + 1));
      if (!v33) {
        return v25;
      }
      uint64_t v34 = v33;
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, _WORD *, void))(a1 + 72))(*(void *)(a1 + 56), v28, (unsigned __int16)v39, v33, v40, *(void *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        *(unsigned char *)(v34 + v40[0]) = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v35, v36, v37, v34);
        uint64_t v29 = DoDctPlusRules(*(void *)(a1 + 16), *(void *)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 48), v34, v40[0], a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 80), (uint64_t)a3, v28);
      }
    }
    uint64_t v25 = v29;
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v28);
    if (v34) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v34);
    }
  }
  return v25;
}

uint64_t wparser_impl_plusrules_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  unsigned __int16 v37 = a5;
  int v36 = 0;
  uint64_t v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v21 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  int v22 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      uint64_t v30 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      uint64_t v29 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29) {
        return v21;
      }
      uint64_t v30 = v29;
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(void *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(unsigned char *)(v30 + v37) = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        uint64_t v25 = DoDctPlusRulesSpell(*(void *)(a1 + 16), *(void *)(a1 + 32), *(void **)(a1 + 40), v30, v37, a6, a7, a8, v35, a10, a11);
      }
    }
    uint64_t v21 = v25;
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v24);
    if (v30) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v30);
    }
  }
  return v21;
}

uint64_t wparser_impl_plusrules_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  unsigned __int16 v28 = a4;
  int v27 = 0;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  uint64_t v13 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v27, 0);
    if ((v16 & 0x80000000) != 0)
    {
      uint64_t v21 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      uint64_t v20 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v27 + 1));
      if (!v20) {
        return v13;
      }
      uint64_t v21 = (unsigned __int8 *)v20;
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v15, (unsigned __int16)v27, v20, &v28, *(void *)(a1 + 64));
      if ((v16 & 0x80000000) == 0)
      {
        v21[v28] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v22, v23, v24, (uint64_t)v21);
        uint64_t v13 = DoTHTLatin(*(void *)(a1 + 16), *(void **)(a1 + 40), v21, v28, a5);
        if (a5)
        {
          int v25 = *a3;
          if ((v25 & 0x80000000) == 0) {
            *(_WORD *)*a5 = v25;
          }
        }
        goto LABEL_12;
      }
    }
    uint64_t v13 = v16;
LABEL_12:
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
    if (v21) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v21);
    }
  }
  return v13;
}

uint64_t wparser_impl_plusrules_End(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (!v5 || (uint64_t result = wparser_ObjClose1(v5), (result & 0x80000000) == 0))
    {
      return safeh_HandleCheck(a1, a2, 87652, 88);
    }
  }
  return result;
}

uint64_t wparser_impl_plusrules_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_plusrules_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wordm_sysdct_Lookup_Thai(void *a1, char *__s, uint64_t a3, int a4, const char *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned __int16 v23 = 0;
  uint64_t result = 2370838535;
  if (a1 && __s && a3)
  {
    LODWORD(v10) = a4;
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 4) = 0u;
    *(_OWORD *)(a3 + 20) = 0u;
    *(_OWORD *)(a3 + 36) = 0u;
    *(_OWORD *)(a3 + 52) = 0u;
    *(unsigned char *)(a3 + 68) = 0;
    *(_WORD *)(a3 + 70) = 0;
    *(_OWORD *)(a3 + 76) = 0u;
    *(_DWORD *)(a3 + 72) = 0;
    *(_OWORD *)(a3 + 92) = 0u;
    *(_OWORD *)(a3 + 108) = 0u;
    *(_OWORD *)(a3 + 124) = 0u;
    *(_OWORD *)(a3 + 140) = 0u;
    *(_OWORD *)(a3 + 156) = 0u;
    *(_OWORD *)(a3 + 172) = 0u;
    *(_OWORD *)(a3 + 188) = 0u;
    *(_OWORD *)(a3 + 204) = 0u;
    *(_OWORD *)(a3 + 220) = 0u;
    *(_OWORD *)(a3 + 236) = 0u;
    *(_OWORD *)(a3 + 252) = 0u;
    *(unsigned char *)(a3 + 332) = 0;
    *(_OWORD *)(a3 + 268) = 0u;
    *(_OWORD *)(a3 + 284) = 0u;
    *(_OWORD *)(a3 + 300) = 0u;
    *(_OWORD *)(a3 + 316) = 0u;
    *(_WORD *)(a3 + 334) = 0;
    unsigned __int16 v11 = strlen(__s);
    if ((v11 & 0xFFC0) != 0) {
      unsigned int v12 = 64;
    }
    else {
      unsigned int v12 = v11;
    }
    __memmove_chk();
    v25[v12] = 0;
    if (v12)
    {
      *(_DWORD *)a3 = 2;
      unsigned __int16 v13 = 0;
      if (v12 <= v10) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = v10;
      }
      if (v10)
      {
        uint64_t v14 = v10;
        unsigned __int16 v15 = v10;
        do
        {
          if ((v25[v14] + 49) >= 0xCu)
          {
            BOOL v16 = 0;
            int v17 = v25[v14];
            if ((v17 - 231) >= 7 && v17 != 229)
            {
              BOOL v16 = 0;
              int v19 = v25[(v14 - 1)];
              if ((v19 - 224) >= 5 && v19 != 230)
              {
                unsigned __int16 v23 = 256;
                uint64_t result = sysdct_word_LookUp_Thai(a1, (uint64_t)v25, v15, v24, &v23, a5);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                unsigned __int16 v13 = v23;
                BOOL v16 = v23 != 256;
              }
            }
          }
          else
          {
            BOOL v16 = 0;
          }
          __int16 v18 = v15 + v16;
          unsigned __int16 v15 = v15 + v16 - 1;
          uint64_t v14 = v15;
        }
        while (v10 > (unsigned __int16)(v18 - 2) && !v16);
      }
      else
      {
        unsigned __int16 v15 = 0;
        uint64_t v14 = 0;
      }
      if (v10 <= (unsigned __int16)(v15 - 1))
      {
        uint64_t result = 0;
        *(unsigned char *)(a3 + 4) = v25[0];
        *(unsigned char *)(a3 + 5) = 0;
        *(_WORD *)(a3 + 70) = 1;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        v24[v13] = 0;
        __strcpy_chk();
        *(_DWORD *)(a3 + 72) = 16;
        *(_WORD *)(a3 + 334) = v23;
        if (v25[v14] == 230)
        {
          __strcat_chk();
          *(_WORD *)(a3 + 334) += v23;
          ++v15;
        }
        v25[v15] = 0;
        __strcpy_chk();
        uint64_t result = 0;
        *(_WORD *)(a3 + 70) = v15;
      }
    }
    else
    {
      int v20 = 0;
      do
      {
        size_t v21 = (unsigned __int16)v20;
        int v22 = __s[(unsigned __int16)v20++];
      }
      while (v22 == 32);
      memmove((void *)(a3 + 4), __s, v21);
      return 0;
    }
  }
  return result;
}

uint64_t DoDctPlusRules(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12, _WORD *a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  __int16 v85 = -1;
  memset(__dst, 0, 336);
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  memset(v86, 0, sizeof(v86));
  uint64_t v84 = 0;
  unsigned __int16 v83 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  int v80 = 0;
  __int16 v79 = 0;
  bzero(v116, 0x244uLL);
  LOWORD(v87) = 0;
  BYTE2(v87) = 0;
  __int16 v115 = 0;
  *(_WORD *)(a15 + 8) = 0;
  *(void *)(a15 + 12) = 0x100000001;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  BOOL v73 = LogLevel > 4;
  uint64_t DomainSegmentations = bed_GetpElem(a8, 0xFFFFu, &v84);
  if ((DomainSegmentations & 0x80000000) != 0) {
    return DomainSegmentations;
  }
  if (!a6 && (unsigned __int16)*(_DWORD *)(v84 + 36)) {
    *(_DWORD *)(a15 + 16) = 0;
  }
  log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a6);
  UTOITrace(v73, a1, a7, a8, (uint64_t)"START of normalization");
  if (a16 == 1)
  {
    uint64_t DomainSegmentations = getDomainSegmentations(a1, a3, a5, a6, a8, a11, &v81, (__int16 *)&v80 + 1, 1, 0);
    if ((DomainSegmentations & 0x80000000) != 0) {
      return DomainSegmentations;
    }
  }
  uint64_t v76 = a2;
  uint64_t v71 = a7;
  uint64_t v72 = a8;
  __int16 v85 = -1;
  uint64_t v75 = a6;
  if (!a6)
  {
    uint64_t v47 = a11;
LABEL_48:
    LOBYTE(__dst[1]) = 0;
    HIWORD(__dst[17]) = 0;
    LOBYTE(__dst[19]) = 0;
    HIWORD(__dst[83]) = 0;
    uint64_t v49 = a1;
    uint64_t v50 = handleWordMatch(a1, v76, a4, a5, a6, (unsigned __int16 *)__dst, &v85, (uint64_t)v116, (char *)v86, a9, a14, a13, a10, v47, a12, a17, a18, &v80, &v79);
    if ((v50 & 0x80000000) == 0)
    {
      if (!v75) {
        goto LABEL_76;
      }
      uint64_t v50 = bed_GetcElem(a9, &v83);
      if ((v50 & 0x80000000) == 0)
      {
        if (!v83)
        {
          log_OutText(*(void *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v51, v52, v53, (uint64_t)v70);
          goto LABEL_76;
        }
        UTOISubTrace(v73, a1, a9, (uint64_t)"replacement string");
        if (*(_DWORD *)(a15 + 16) != 1)
        {
LABEL_76:
          uint64_t v48 = utoin_IncrReplaceCurrentRegion(v71, v72, a9, v75, (uint64_t *)a15);
          if ((v48 & 0x80000000) == 0) {
            UTOITrace(v73, a1, v71, v72, (uint64_t)"END of normalization");
          }
          goto LABEL_78;
        }
        uint64_t v50 = bed_GetpElem(a9, 0, &v82);
        if ((v50 & 0x80000000) == 0)
        {
          if (!v83)
          {
            int v66 = 1;
            unsigned int v61 = LogLevel;
            goto LABEL_70;
          }
          uint64_t v57 = 0;
          unsigned int v58 = 0;
          unsigned __int16 v59 = 1;
          uint64_t v60 = v82;
          unsigned int v61 = LogLevel;
          while (1)
          {
            if (*(unsigned char *)(v60 + v57) == 16)
            {
              uint64_t v62 = *(unsigned __int16 *)(a15 + 8);
              if (v58 >= v62)
              {
LABEL_68:
                log_OutText(*(void *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v54, v55, v56, v59);
                int v66 = 0;
LABEL_70:
                if (v61 >= 5 && *(_WORD *)(a15 + 8))
                {
                  uint64_t v67 = 0;
                  unint64_t v68 = 0;
                  do
                  {
                    log_OutText(*(void *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v54, v55, v56, v68++);
                    v67 += 12;
                  }
                  while (v68 < *(unsigned __int16 *)(a15 + 8));
                }
                if (v66) {
                  *(_DWORD *)(a15 + 12) = 0;
                }
                goto LABEL_76;
              }
              uint64_t v63 = v58;
              uint64_t v64 = (int *)(*(void *)a15 + 12 * v58 + 4);
              while (1)
              {
                int v65 = *v64;
                v64 += 3;
                if (v65 != 1) {
                  break;
                }
                if (v62 == ++v63) {
                  goto LABEL_68;
                }
              }
              *(_WORD *)(*(void *)a15 + 12 * (unsigned __int16)v63 + 8) = v57;
              ++v59;
              unsigned int v58 = (unsigned __int16)v63 + 1;
            }
            if (++v57 >= (unint64_t)v83)
            {
              int v66 = 1;
              goto LABEL_70;
            }
          }
        }
      }
    }
    uint64_t v48 = v50;
    goto LABEL_78;
  }
  uint64_t v28 = 0;
  LOWORD(v29) = 0;
  __int16 v30 = 0;
  LOWORD(a6) = 0;
  while (1)
  {
    if (a16 == 1 && HIWORD(v80) > (unsigned __int16)v29)
    {
      unsigned __int16 v31 = 0;
      unint64_t v29 = (unsigned __int16)v29;
      uint64_t v32 = (unsigned __int16 *)(v81 + 340 * (unsigned __int16)v29);
      while (1)
      {
        unsigned int v33 = *v32;
        if (v33 > (unsigned __int16)a6) {
          break;
        }
        v32 += 170;
        if (v33 == (unsigned __int16)a6) {
          unsigned __int16 v31 = v29;
        }
        ++v29;
        if (v33 == (unsigned __int16)a6 || v29 >= HIWORD(v80))
        {
          if (v33 != (unsigned __int16)a6) {
            break;
          }
          memcpy(__dst, (const void *)(v81 + 340 * v31 + 4), 0x150uLL);
          goto LABEL_23;
        }
      }
    }
    uint64_t v38 = wordm_sysdct_Lookup_Thai(a3, (char *)(a5 + (unsigned __int16)a6), (uint64_t)__dst, 22, "normal");
    if ((v38 & 0x80000000) != 0)
    {
LABEL_45:
      uint64_t v48 = v38;
      goto LABEL_46;
    }
LABEL_23:
    if (__dst[0] == 5 || __dst[0] == 2)
    {
      uint64_t v38 = handleWordMatch(a1, v76, a4, a5, a6, (unsigned __int16 *)__dst, &v85, (uint64_t)v116, (char *)v86, a9, a14, a13, a10, a11, a12, a17, a18, &v80, &v79);
      if ((v38 & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v38 = bed_GetcElem(a9, &v83);
      if ((v38 & 0x80000000) != 0) {
        goto LABEL_45;
      }
      int v40 = 0;
    }
    else
    {
      log_OutText(*(void *)(a1 + 32), v76, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v35, v36, v37, v28);
      if (v85 == -1) {
        __int16 v85 = a6;
      }
      int v40 = 1;
    }
    if (*(_DWORD *)(a15 + 16) == 1) {
      break;
    }
    __int16 v46 = HIWORD(__dst[17]);
LABEL_42:
    LOWORD(a6) = v46 + a6;
    uint64_t v28 = (unsigned __int16)a6;
    uint64_t v47 = a11;
    if ((unsigned __int16)a6 >= v75) {
      goto LABEL_48;
    }
  }
  unsigned int v41 = *(unsigned __int16 *)(a15 + 8);
  uint64_t v42 = *(void *)a15;
  if (v41 < *(unsigned __int16 *)(a15 + 10))
  {
LABEL_38:
    unsigned int v44 = v41;
    uint64_t v45 = v42 + 12 * v41;
    *(_WORD *)uint64_t v45 = v30;
    *(void *)(v45 + 2) = 0;
    __int16 v46 = HIWORD(__dst[17]);
    if (v40) {
      *(_DWORD *)(v42 + 12 * v44 + 4) = 1;
    }
    v30 += 3 * v46;
    *(_WORD *)(a15 + 8) = v44 + 1;
    goto LABEL_42;
  }
  uint64_t v43 = heap_Realloc(*(uint64_t **)(a1 + 8), v42, 12 * *(unsigned __int16 *)(a15 + 10) + 121);
  if (v43)
  {
    uint64_t v42 = v43;
    *(void *)a15 = v43;
    *(_WORD *)(a15 + 10) += 10;
    unsigned int v41 = *(unsigned __int16 *)(a15 + 8);
    goto LABEL_38;
  }
  uint64_t v48 = 2350915594;
LABEL_46:
  uint64_t v49 = a1;
LABEL_78:
  if (HIWORD(v80)) {
    heap_Free(*(void **)(v49 + 8), v81);
  }
  return v48;
}

uint64_t handleWordMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, unsigned __int16 *a6, _WORD *a7, uint64_t a8, char *__dst, uint64_t a10, int a11, _WORD *a12, uint64_t a13, uint64_t a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, _WORD *a18, _WORD *a19)
{
  *(void *)&__n[522] = *MEMORY[0x263EF8340];
  uint64_t HexArg = 2350915591;
  if (!a4 || !a6 || !a7 || !a8 || !__dst || !a10) {
    return HexArg;
  }
  char v59 = 0;
  *(_WORD *)size_t __n = 0;
  if ((__int16)*a7 == -1)
  {
    char v27 = 0;
    uint64_t HexArg = 0;
  }
  else
  {
    memmove(__dst, a6 + 2, a6[35]);
    *((_WORD *)__dst + 32) = a6[35];
    memmove(__dst + 66, a6 + 38, a6[167]);
    *((_WORD *)__dst + 289) = a6[167];
    *(_WORD *)size_t __n = 512;
    memset(&__n[2], 0, 512);
    uint64_t HexArg = o2t_Transcribe(a3, (unsigned char *)(a4 + (unsigned __int16)*a7), (unsigned __int16)(a5 - *a7), a8, (unsigned __int16 *)__dst, &__n[2], (unsigned __int16 *)__n, &v59);
    if ((HexArg & 0x80000000) != 0) {
      return HexArg;
    }
    char v27 = v59;
  }
  unint64_t v29 = a18;
  uint64_t v28 = a19;
  uint64_t v30 = a16;
  uint64_t v31 = a17;
  int v32 = a15;
  uint64_t v34 = a13;
  uint64_t v33 = a14;
  int v35 = a11;
  __int16 v36 = *(_WORD *)(a8 + 578);
  if (v36 && (v27 & 1) == 0)
  {
    if (a11)
    {
      uint64_t v37 = bed_Insert(a10, &szWORD_BEG_2, 1);
      if ((v37 & 0x80000000) != 0) {
        return v37;
      }
      uint64_t v49 = a17;
      ++*a12;
      __int16 v36 = *(_WORD *)(a8 + 578);
    }
    else
    {
      uint64_t v49 = a17;
    }
    size_t v38 = (unsigned __int16)(v36 + 1);
    int v39 = (char *)heap_Alloc(*(void *)(a1 + 8), v38);
    if (!v39) {
      return 2350915594;
    }
    int v40 = v39;
    bzero(v39, v38);
    strncpy(v40, (const char *)(a8 + 66), *(unsigned __int16 *)(a8 + 578));
    v40[*(unsigned __int16 *)(a8 + 578)] = 0;
    uint64_t v41 = bed_Insert(a10, v40, *(unsigned __int16 *)(a8 + 578));
    if ((v41 & 0x80000000) != 0)
    {
LABEL_44:
      uint64_t HexArg = v41;
      heap_Free(*(void **)(a1 + 8), (uint64_t)v40);
      return HexArg;
    }
    *a12 += *(_WORD *)(a8 + 578);
    heap_Free(*(void **)(a1 + 8), (uint64_t)v40);
    uint64_t v31 = v49;
    if (a11)
    {
      uint64_t v37 = bed_Insert(a10, &szWORD_END_3, 1);
      if ((v37 & 0x80000000) != 0) {
        return v37;
      }
      ++*a12;
    }
    uint64_t HexArg = getHexArg(a1, a2, *(unsigned __int16 *)(a8 + 64), a13, a15, a14, a16, v49, a18, a19);
    if ((HexArg & 0x80000000) != 0) {
      return HexArg;
    }
    char v27 = v59;
    uint64_t v30 = a16;
    int v32 = a15;
    uint64_t v28 = a19;
    uint64_t v33 = a14;
    uint64_t v34 = a13;
    unint64_t v29 = a18;
    int v35 = a11;
  }
  __int16 v42 = *(_WORD *)__n;
  if (*(_WORD *)__n && ((v27 & 2) == 0 || !*((_WORD *)__dst + 32)))
  {
    uint64_t v51 = v34;
    uint64_t v52 = v29;
    uint64_t v53 = v28;
    uint64_t v54 = v33;
    int v55 = v32;
    uint64_t v56 = v30;
    int v57 = v35;
    if (v35)
    {
      uint64_t v37 = bed_Insert(a10, &szWORD_BEG_2, 1);
      if ((v37 & 0x80000000) != 0) {
        return v37;
      }
      uint64_t v50 = v31;
      ++*a12;
      __int16 v42 = *(_WORD *)__n;
    }
    else
    {
      uint64_t v50 = v31;
    }
    size_t v43 = (unsigned __int16)(v42 + 1);
    unsigned int v44 = (char *)heap_Alloc(*(void *)(a1 + 8), v43);
    uint64_t HexArg = 2350915594;
    if (!v44) {
      return HexArg;
    }
    int v40 = v44;
    bzero(v44, v43);
    strncpy(v40, &__n[2], *(unsigned __int16 *)__n);
    v40[*(unsigned __int16 *)__n] = 0;
    uint64_t v41 = bed_Insert(a10, v40, *(unsigned __int16 *)__n);
    if ((v41 & 0x80000000) == 0)
    {
      *a12 += *(_WORD *)__n;
      heap_Free(*(void **)(a1 + 8), (uint64_t)v40);
      if (!v57)
      {
LABEL_37:
        uint64_t HexArg = getHexArg(a1, a2, (unsigned __int16)(a5 - *a7), v51, v55, v54, v56, v50, v52, v53);
        if ((HexArg & 0x80000000) != 0) {
          return HexArg;
        }
        char v27 = v59;
        goto LABEL_39;
      }
      uint64_t v37 = bed_Insert(a10, &szWORD_END_3, 1);
      if ((v37 & 0x80000000) == 0)
      {
        ++*a12;
        goto LABEL_37;
      }
      return v37;
    }
    goto LABEL_44;
  }
LABEL_39:
  if ((v27 & 2) != 0)
  {
    uint64_t v46 = (unsigned __int16)*a7;
    unsigned __int16 v47 = a5 - v46;
    memmove((void *)a8, (const void *)(a4 + v46), v47);
    memmove((void *)(a8 + v47), a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35] + v47;
    memmove((void *)(a8 + 66), &__n[2], *(unsigned __int16 *)__n);
    uint64_t v45 = __n;
  }
  else
  {
    memmove((void *)a8, a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35];
    uint64_t v45 = a6 + 167;
    memmove((void *)(a8 + 66), a6 + 38, a6[167]);
  }
  *(_WORD *)(a8 + 578) = *(_WORD *)v45;
  *a7 = -1;
  return HexArg;
}

uint64_t DoDctPlusRulesSpell(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 0;
  }
  uint64_t v15 = 0;
  for (i = 0; i < a5; uint64_t v15 = i)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v20 = wordm_sysdct_CharLookup_Thai(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, 0x16u, a11, "normal");
    if ((v20 & 0x80000000) != 0) {
      break;
    }
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v17, v18, v19, v15);
    }
    else
    {
      size_t v21 = (unsigned __int16)(strlen((const char *)&v29[4] + 12) + 3);
      int v22 = (char *)heap_Alloc(*(void *)(a1 + 8), v21);
      if (!v22) {
        return 2350915594;
      }
      unsigned __int16 v23 = v22;
      bzero(v22, v21);
      if (i)
      {
        strcpy(v23, (const char *)&v29[4] + 12);
      }
      else
      {
        *(_WORD *)unsigned __int16 v23 = 32;
        strcat(v23, (const char *)&v29[4] + 12);
      }
      *(_WORD *)&v23[strlen(v23)] = 32;
      unsigned __int16 v24 = strlen(v23);
      uint64_t v20 = bed_Insert(a6, v23, v24);
      if ((v20 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
        return v20;
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
    }
    __int16 v25 = strlen((const char *)v29 + 4);
    if (v25) {
      i += v25;
    }
    else {
      unsigned __int16 i = a5;
    }
  }
  return v20;
}

uint64_t getHexArg(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10)
{
  uint64_t v47 = a6;
  if (a3)
  {
    uint64_t v14 = a6;
    uint64_t v18 = 2350915584;
    uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), 1, 2 * a3 + 2);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v44 = a4;
      int v45 = a5;
      unint64_t v21 = (unsigned __int16)*a9 + a3;
      if (LH_wcslen(a8) >= v21)
      {
        unsigned __int16 v23 = (unsigned __int16 *)(a8 + 2 * (unsigned __int16)*a9);
        uint64_t v22 = a3;
        LH_wcsncpy(v20, v23, a3);
      }
      else
      {
        uint64_t v22 = 0;
      }
      *(_WORD *)(v20 + 2 * v22) = 0;
      __int16 v24 = utf8_16BitNbrOfUtf8Chars(v20);
      unsigned __int16 v28 = v24 - 1;
      if (v24 == 1)
      {
        log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cant get hex args", v25, v26, v27, v43);
        uint64_t v37 = *(void **)(a1 + 8);
        uint64_t v38 = v20;
LABEL_20:
        heap_Free(v37, v38);
        return v18;
      }
      uint64_t v29 = (unsigned __int16)(v24 - 1);
      uint64_t v30 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v29 + 1);
      if (v30)
      {
        uint64_t v31 = v30;
        strncpy(v30, (const char *)(a7 + (unsigned __int16)*a10), v28)[v29] = 0;
        log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v32, v33, v34, v20);
        unsigned int v35 = *(unsigned __int16 *)(v14 + 16);
        unsigned __int16 v36 = v35 + 2 * v28 + 1;
        if (*(unsigned __int16 *)(v14 + 18) >= v36)
        {
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = datac_RequestBlock(v44, v45, (unsigned __int16)(v35 + 2 * v28 + 1), &v47);
          if ((v18 & 0x80000000) != 0)
          {
LABEL_19:
            heap_Free(*(void **)(a1 + 8), v20);
            uint64_t v37 = *(void **)(a1 + 8);
            uint64_t v38 = (uint64_t)v31;
            goto LABEL_20;
          }
          uint64_t v14 = v47;
          unsigned int v35 = *(unsigned __int16 *)(v47 + 16);
        }
        uint64_t v39 = 0;
        int v40 = (unsigned char *)(*(void *)(v14 + 8) + *(unsigned __int16 *)(v14 + 2) * (unint64_t)v35);
        *(_WORD *)(v14 + 16) = v36;
        do
        {
          uint64_t v41 = v40;
          LH_itoa(v31[v39], v46, 0x10u);
          _OWORD v46[2] = 0;
          *uint64_t v41 = v46[0];
          int v40 = v41 + 2;
          v41[1] = v46[1];
          ++v39;
        }
        while (v29 != v39);
        unsigned char *v40 = 0;
        *a9 += a3;
        *a10 += v28;
        goto LABEL_19;
      }
      heap_Free(*(void **)(a1 + 8), v20);
      return 2350915594;
    }
    else
    {
      return 2350915594;
    }
  }
  else
  {
    uint64_t v18 = 2350915584;
    log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] that parser : word length is 0, cant get hex args", a6, a7, a8, v43);
  }
  return v18;
}

uint64_t xcode_Utf16leToWin874(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  uint64_t v5 = 2370838535;
  if (a2 && a4 && a5)
  {
    if (a3)
    {
      uint64_t v8 = a2;
      int v9 = 0;
      uint64_t v10 = a3;
      while ((unsigned __int16)*a5 > (unsigned __int16)v9)
      {
        unsigned int v11 = *v8++;
        v9 += local_xcode_char_Utf16leToWin874(v11, (char *)(a4 + (unsigned __int16)v9));
        if (!--v10) {
          goto LABEL_10;
        }
      }
      return 2370838537;
    }
    else
    {
      LOWORD(v9) = 0;
LABEL_10:
      uint64_t v5 = 0;
      *a5 = v9;
    }
  }
  return v5;
}

uint64_t local_xcode_char_Utf16leToWin874(unsigned int a1, char *a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 > 0xFF)
  {
    switch(a1)
    {
      case 0x2013u:
        char v2 = -106;
        break;
      case 0x2014u:
        char v2 = -105;
        break;
      case 0x2015u:
      case 0x2016u:
      case 0x2017u:
      case 0x201Au:
      case 0x201Bu:
      case 0x201Eu:
      case 0x201Fu:
      case 0x2020u:
      case 0x2021u:
      case 0x2023u:
      case 0x2024u:
      case 0x2025u:
        goto LABEL_11;
      case 0x2018u:
        char v2 = -111;
        break;
      case 0x2019u:
        char v2 = -110;
        break;
      case 0x201Cu:
        char v2 = -109;
        break;
      case 0x201Du:
        char v2 = -108;
        break;
      case 0x2022u:
        char v2 = -107;
        break;
      case 0x2026u:
        char v2 = -123;
        break;
      default:
        if (a1 == 8364)
        {
          char v2 = 0x80;
          break;
        }
LABEL_11:
        uint64_t v3 = 0;
        if ((~a1 & 0xE00) != 0 || a1 - 3585 > 0x5A) {
          return v3;
        }
        char v2 = a1 - 96;
        break;
    }
  }
  else
  {
    char v2 = a1;
  }
  *a2 = v2;
  return 1;
}

uint64_t mDictFind(char *__s2)
{
  char v2 = (const char *)&pMorp_Dct;
  uint64_t v3 = 3677;
  while (strcmp(v2, __s2))
  {
    v2 += 11;
    if (!--v3) {
      return 82;
    }
  }
  return v2[10];
}

uint64_t swapMRT(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(result + 89 + 4 * a2);
  *(_DWORD *)(result + 89 + 4 * a2) = *(_DWORD *)(result + 89 + 4 * a3);
  *(_DWORD *)(result + 89 + 4 * a3) = v3;
  return result;
}

__n128 swapMST(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 346 + 71 * a2;
  long long v11 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)unsigned int v12 = *(_OWORD *)(v3 + 48);
  *(void *)&v12[15] = *(void *)(v3 + 63);
  __n128 v9 = *(__n128 *)v3;
  long long v10 = *(_OWORD *)(v3 + 16);
  uint64_t v4 = a1 + 346 + 71 * a3;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
  long long v6 = *(_OWORD *)(v4 + 32);
  long long v5 = *(_OWORD *)(v4 + 48);
  long long v7 = *(_OWORD *)(v4 + 16);
  *(void *)(v3 + 63) = *(void *)(v4 + 63);
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 48) = v5;
  *(_OWORD *)(v3 + 16) = v7;
  *(void *)(v4 + 63) = *(void *)&v12[15];
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)v12;
  __n128 result = v9;
  *(__n128 *)uint64_t v4 = v9;
  *(_OWORD *)(v4 + 16) = v10;
  return result;
}

uint64_t o2t_ObjOpen(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2370838535;
  uint64_t v10 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v10) & 0x80000000) == 0)
  {
    *a3 = 0;
    long long v7 = (void *)heap_Alloc(*(void *)(v10 + 8), 9440);
    if (v7)
    {
      uint64_t v8 = v7;
      bzero(v7, 0x24E0uLL);
      uint64_t v3 = 0;
      *uint64_t v8 = a1;
      v8[1] = a2;
      v8[2] = v10;
      *a3 = v8;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t o2t_Transcribe(uint64_t a1, unsigned char *a2, unsigned int a3, uint64_t a4, unsigned __int16 *a5, char *__dst, unsigned __int16 *a7, char *a8)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2370838535;
  char v36 = 0;
  if (!a1 || !a2 || (unsigned __int16)(a3 - 64) < 0xFFC1u) {
    return v8;
  }
  long long v11 = a7;
  uint64_t v34 = *a7;
  int v35 = 0;
  v37[0] = 0;
  if (a3 < 2)
  {
    ReadThaiChar((char *)*a2, __dst);
    int v17 = *(unsigned __int16 *)(a4 + 64);
    if (*(_WORD *)(a4 + 64) || a5[32])
    {
      unsigned __int16 v30 = strlen(__dst);
      __memcpy_chk();
      v37[v30] = 0;
      goto LABEL_15;
    }
LABEL_43:
    uint64_t v8 = 0;
    *long long v11 = strlen(__dst);
    goto LABEL_44;
  }
  if (SParser(a1, a2, a3) != 255)
  {
    uint64_t v16 = WParser(a1, __dst, v11, &v36, &v35);
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    if (v35 != 255)
    {
      if (v36 && (*(_WORD *)(a4 + 64) || a5[32]))
      {
        __strncpy_chk();
        v37[v34] = 0;
        unsigned __int16 v30 = *v11;
        int v17 = *(unsigned __int16 *)(a4 + 64);
LABEL_15:
        unsigned __int16 v18 = 0;
        int v19 = v17 != 0;
        __src = a5;
        if (a5[32]) {
          v19 |= 2u;
        }
        if (v19 == 3) {
          char v20 = 7;
        }
        else {
          char v20 = v19;
        }
        uint64_t v31 = v11;
        while (1)
        {
          if (v20)
          {
            uint64_t v21 = *(unsigned __int16 *)(a4 + 64);
            if (v21 + a3 <= 0x3F) {
              break;
            }
          }
          if ((v20 & 2) != 0)
          {
            size_t v22 = __src[32];
            if (v22 + a3 <= 0x3F)
            {
              if (*a2 == 224 && *(unsigned __int8 *)__src == 224)
              {
                __memcpy_chk();
                v38[0] = -31;
                char v24 = -3;
                char v25 = 2;
                size_t v23 = v22;
              }
              else
              {
                __memcpy_chk();
                memcpy(&v38[a3], __src, v22);
                LOWORD(v22) = v22 + a3;
                size_t v23 = (unsigned __int16)v22;
                char v24 = -3;
                char v25 = 2;
              }
              goto LABEL_33;
            }
          }
          if ((v20 & 4) == 0) {
            goto LABEL_34;
          }
          uint64_t v26 = *(unsigned __int16 *)(a4 + 64);
          size_t v22 = __src[32];
          if (v26 + a3 + v22 <= 0x3F)
          {
            __memcpy_chk();
            memcpy(&v38[v26], a2, a3);
            unsigned __int16 v27 = v26 + a3;
            memcpy(&v38[v27], __src, v22);
            LOWORD(v22) = v27 + v22;
            size_t v23 = (unsigned __int16)v22;
            char v24 = -5;
            char v25 = 3;
            long long v11 = v31;
            goto LABEL_33;
          }
          long long v11 = v31;
LABEL_34:
          if (SParser(a1, v38, v18) == 255) {
            return 2370838535;
          }
          *long long v11 = v34;
          uint64_t v16 = WParser(a1, __dst, v11, &v36, &v35);
          if ((v16 & 0x80000000) != 0) {
            return v16;
          }
          if (v35 == 255) {
            return 2370838535;
          }
          if (!v20 || !v36)
          {
            if (!v36) {
              return 0;
            }
            if (a3 == 1 && (*a2 + 32) <= 4u)
            {
              uint64_t v8 = 2370838535;
              if (__src[289] + v30 < v34)
              {
                strcpy(__dst, v37);
                memcpy(&__dst[v30], __src + 33, __src[289]);
                uint64_t v8 = 0;
                unsigned __int16 v28 = __src[289] + v30;
                *long long v11 = v28;
                __dst[v28] = 0;
                *a8 = 2;
                return v8;
              }
LABEL_53:
              *long long v11 = 0;
              return v8;
            }
            uint64_t v8 = 2370838535;
            if (v34 <= v30) {
              goto LABEL_53;
            }
            strcpy(__dst, v37);
            uint64_t v8 = 0;
            *long long v11 = v30;
LABEL_44:
            *a8 = 0;
            return v8;
          }
        }
        __memcpy_chk();
        memcpy(&v38[v21], a2, a3);
        LOWORD(v22) = v21 + a3;
        size_t v23 = (unsigned __int16)(v21 + a3);
        char v24 = -2;
        char v25 = 1;
LABEL_33:
        v38[v23] = 0;
        *a8 = v25;
        v20 &= v24;
        unsigned __int16 v18 = v22;
        goto LABEL_34;
      }
      goto LABEL_43;
    }
  }
  return v8;
}

uint64_t SParser(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v280 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 217) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_OWORD *)(a1 + 153) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  unsigned int v249 = (unsigned __int8 *)(a1 + 89);
  *(_OWORD *)(a1 + 265) = 0u;
  bzero((void *)(a1 + 346), 0x2380uLL);
  uint64_t v6 = a1 + 24;
  memcpy((void *)(a1 + 24), a2, a3);
  unint64_t v7 = 0;
  unsigned __int8 v8 = 0;
  *(unsigned char *)(a1 + 24 + a3) = 0;
  unsigned int v272 = (unsigned __int8 *)(a1 + 9434);
  *(unsigned char *)(a1 + 9434) = 0;
  *(unsigned char *)(a1 + 345) = 0;
  uint64_t v9 = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 88) = 0;
  unsigned int v247 = a3;
  do
  {
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v9 = 0;
      unsigned int v11 = *(unsigned __int8 *)(a1 + 88);
    }
    else
    {
      uint64_t v10 = a1 + 71 * v9++;
      unsigned int v11 = *(unsigned __int8 *)(v10 + 347);
      *(unsigned char *)(a1 + 88) = v11;
    }
    if (v11 >= a3) {
      continue;
    }
    if (v8)
    {
      uint64_t v12 = v8;
      int v13 = 78;
      uint64_t v14 = v249;
      uint64_t v15 = v249;
      do
      {
        int v16 = *v15;
        v15 += 4;
        if (v16 == v11)
        {
          if (v14[1] == 1 && *(unsigned char *)(a1 + 71 * v14[3] + 349) == 69) {
            *(unsigned char *)(a1 + 71 * (v9 - 1) + 349) = 78;
          }
          int v13 = 89;
        }
        uint64_t v14 = v15;
        --v12;
      }
      while (v12);
      if (v13 != 78) {
        continue;
      }
    }
    uint64_t v259 = v9;
    uint64_t v17 = v11;
    BOOL v253 = (unsigned char *)(v6 + v11);
    if ((*v253 + 95) >= 0x2Eu) {
      uint64_t v18 = csrulesc;
    }
    else {
      uint64_t v18 = 0;
    }
    if ((*v253 + 95) >= 0x2Eu) {
      uint64_t v19 = csrulesv;
    }
    else {
      uint64_t v19 = csrulesc;
    }
    uint64_t v268 = v19;
    if (v18 >= v19) {
      goto LABEL_230;
    }
    char v256 = 0;
    LODWORD(v20) = 0;
    HIDWORD(v20) = v11;
    uint64_t v262 = v20;
    do
    {
      uint64_t v21 = &psrules[61 * v18];
      size_t v22 = v21 + 30;
      int v23 = *v21;
      char v24 = strchr(v21 + 30, 43);
      uint64_t v26 = v11;
      unsigned int v27 = v11;
      if (v23)
      {
        unsigned __int8 v28 = v23;
        *(void *)&long long v25 = v262;
        do
        {
          switch(v28)
          {
            case 'A':
              int v29 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v29 == 195) {
                goto LABEL_136;
              }
              goto LABEL_83;
            case 'B':
              int v29 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v29 == 199) {
                goto LABEL_136;
              }
              goto LABEL_83;
            case 'C':
              BOOL v36 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 161 > 0x29;
              uint64_t v37 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 95);
              uint64_t v38 = 0x2802C50040BLL;
              goto LABEL_86;
            case 'D':
              int v34 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              BOOL v39 = (v34 - 164) > 0x13;
              int v40 = 1 << (v34 + 92);
              int v41 = 655425;
              goto LABEL_101;
            case 'E':
              int v29 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v29 == 205) {
                goto LABEL_136;
              }
              goto LABEL_83;
            case 'F':
              int v34 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              BOOL v39 = (v34 - 164) > 0x12;
              int v40 = 1 << (v34 + 92);
              int v41 = 425985;
              goto LABEL_101;
            case 'G':
              BOOL v36 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 170 > 0x23;
              uint64_t v37 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 86);
              uint64_t v38 = 0x94840A001;
              goto LABEL_86;
            case 'H':
              int v29 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v29 == 203) {
                goto LABEL_136;
              }
LABEL_83:
              if ((v29 + 49) < 0xD2u) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'J':
              if ((*(unsigned char *)(v6 + BYTE4(v25)) + 49) < 0xD2u) {
                goto LABEL_136;
              }
              int v32 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v32 == 199 || v32 == 205) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'K':
              BOOL v36 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 164 > 0x26;
              uint64_t v37 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 92);
              uint64_t v38 = 0x4020000001;
              goto LABEL_86;
            case 'L':
              int v33 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v33 != 197 && v33 != 195) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'M':
              BOOL v36 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 161 > 0x2A;
              uint64_t v37 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 95);
              uint64_t v38 = 0x40681041401;
              goto LABEL_86;
            case 'N':
              BOOL v36 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 162 > 0x28;
              uint64_t v37 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 94);
              uint64_t v38 = 0x1A8006F81C5;
LABEL_86:
              uint64_t v45 = v37 & v38;
              if (!v36 && v45 != 0) {
                goto LABEL_117;
              }
              goto LABEL_136;
            case 'O':
              LOBYTE(v34) = *(unsigned char *)(v6 + BYTE4(v25));
              if ((v34 + 49) < 0xD2u) {
                goto LABEL_136;
              }
              BOOL v35 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 194 > 5 || ((1 << (v34 + 62)) & 0x23) == 0;
              if (!v35) {
                goto LABEL_136;
              }
              goto LABEL_111;
            case 'P':
              BOOL v42 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 184 > 0x13;
              int v43 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 72);
              int v44 = 796673;
              goto LABEL_94;
            case 'Q':
              BOOL v42 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 166 > 7;
              int v43 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 90);
              int v44 = 145;
              goto LABEL_94;
            case 'R':
              BOOL v42 = *(unsigned __int8 *)(v6 + BYTE4(v25)) - 195 > 4;
              int v43 = 1 << (*(unsigned char *)(v6 + BYTE4(v25)) + 61);
              int v44 = 21;
LABEL_94:
              int v47 = v43 & v44;
              if (!v42 && v47 != 0) {
                goto LABEL_117;
              }
              goto LABEL_136;
            case 'S':
              int v34 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              BOOL v39 = (v34 - 174) > 0x1B;
              int v40 = 1 << (v34 + 82);
              int v41 = 134217731;
LABEL_101:
              int v49 = v40 & v41;
              if (!v39 && v49 != 0) {
                goto LABEL_111;
              }
              goto LABEL_136;
            case 'T':
              if ((*(unsigned char *)(v6 + BYTE4(v25)) & 0xFC) == 0xE8) {
                goto LABEL_117;
              }
              if (psrules[61 * v18 + 60] == 78) {
                int v30 = -2;
              }
              else {
                int v30 = -1;
              }
              int v31 = v25;
              if (psrules[61 * v18 + 60] == 78) {
                int v31 = v25 + 1;
              }
              LODWORD(v25) = v31;
              break;
            case 'U':
              LOBYTE(v34) = *(unsigned char *)(v6 + BYTE4(v25));
              if ((v34 + 49) < 0xD2u || (v34 | 4) == 0xC7) {
                goto LABEL_136;
              }
              goto LABEL_111;
            case 'W':
              int v34 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v34 == 194) {
                goto LABEL_136;
              }
              goto LABEL_110;
            case 'X':
              if ((*(unsigned char *)(v6 + BYTE4(v25)) + 95) > 0x2Du) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'Y':
              LOBYTE(v34) = *(unsigned char *)(v6 + BYTE4(v25));
              if ((v34 + 95) > 0x2Du) {
                goto LABEL_136;
              }
              goto LABEL_111;
            case 'Z':
              int v34 = *(unsigned __int8 *)(v6 + BYTE4(v25));
              if (v34 == 199) {
                goto LABEL_136;
              }
LABEL_110:
              if ((v34 + 49) < 0xD2u) {
                goto LABEL_136;
              }
LABEL_111:
              *(int32x2_t *)&long long v25 = vadd_s32(*(int32x2_t *)&v25, (int32x2_t)0x100000001);
              long long v275 = v25;
              contable((char)v34, 1, (uint64_t)v277);
              long long v25 = v275;
              if (v277[0] == 45) {
                int v30 = -1;
              }
              else {
                int v30 = -2;
              }
              break;
            case 'a':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 209) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'b':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 212) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'c':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 213) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'd':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 214) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'e':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 215) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'f':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 216) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'g':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 217) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'h':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 211) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'i':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 231) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'j':
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != 236) {
                goto LABEL_136;
              }
              goto LABEL_117;
            default:
              if (*(unsigned __int8 *)(v6 + BYTE4(v25)) != v28) {
                goto LABEL_136;
              }
LABEL_117:
              *(int32x2_t *)&long long v25 = vadd_s32(*(int32x2_t *)&v25, (int32x2_t)0x100000001);
              int v30 = -2;
              break;
          }
          if (v30 != -2) {
            break;
          }
          unsigned __int8 v28 = v21[v25];
        }
        while (v28);
        if (v30 != -2) {
          goto LABEL_136;
        }
        unsigned int v27 = BYTE4(v25);
        uint64_t v26 = BYTE4(v25);
      }
      unsigned __int8 v51 = *(unsigned char *)(v6 + v26);
      if ((v51 & 0xFC) == 0xE8) {
        goto LABEL_136;
      }
      if (v51 - 208 <= 9 && v51 != 211) {
        goto LABEL_136;
      }
      unsigned int v53 = v27 - v11;
      if (v51 == 236 || v53 == -1) {
        goto LABEL_136;
      }
      __strncpy_chk();
      __s[v53] = 0;
      if (!v24) {
        goto LABEL_195;
      }
      int v55 = strchr(v24, 39);
      uint64_t v56 = (unsigned __int8 *)&v278;
      if (v55)
      {
        while (1)
        {
          int v58 = *++v56;
          int v57 = v58;
          if (v58 == 88) {
            break;
          }
          if (!v57)
          {
            if (patt_check(v56, "X\xE4\x58X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        char v59 = (unsigned __int8 *)&v278;
        while (1)
        {
          int v61 = *++v59;
          int v60 = v61;
          if (v61 == 88) {
            break;
          }
          if (!v60)
          {
            if (patt_check(v59, "X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        uint64_t v62 = (unsigned __int8 *)&v278;
        while (1)
        {
          int v64 = *++v62;
          int v63 = v64;
          if (v64 == 88) {
            break;
          }
          if (!v63)
          {
            if (patt_check(v62, "X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        int v65 = (unsigned __int8 *)&v278;
        while (1)
        {
          int v67 = *++v65;
          int v66 = v67;
          if (v67 == 88) {
            break;
          }
          if (!v66)
          {
            if (patt_check(v65, "X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        unint64_t v68 = __s;
        do
        {
          int v70 = *v68++;
          int v69 = v70;
        }
        while ((v70 + 49) < 0xD2u);
        int v71 = *v68;
        switch(v71)
        {
          case 199:
            if (v69 == 164) {
              goto LABEL_136;
            }
            break;
          case 197:
            unsigned int v87 = v69 - 161;
            BOOL v36 = v87 > 0x1D;
            int v88 = (1 << v87) & 0x2C000001;
            if (!v36 && v88 != 0) {
              goto LABEL_136;
            }
            break;
          case 195:
            unsigned int v72 = v69 - 161;
            if (v72 <= 0x29 && ((1 << v72) & 0x2802C500403) != 0) {
              goto LABEL_136;
            }
            break;
        }
LABEL_192:
        if (patt_check((unsigned __int8 *)__s, "\xE0\x58\x52") == 1
          || patt_check((unsigned __int8 *)__s, "\xE1\x58\x52") == 1
          || patt_check((unsigned __int8 *)__s, "\xE2\x58\x52") == 1)
        {
          goto LABEL_136;
        }
LABEL_195:
        if (v23 == 33)
        {
          char v90 = *(unsigned char *)(a1 + 88);
          if (!v90) {
            goto LABEL_136;
          }
          if (patt_check((unsigned __int8 *)__s, "X\xEC\x58XX\xEC\xECPQS") != 1)
          {
            if (patt_check((unsigned __int8 *)__s, "XX\xEC\xECPQS") == 1
              && v90 != 1
              && (*(unsigned char *)(v6 + (v90 - 1)) + 49) < 0xD2u)
            {
              goto LABEL_136;
            }
            goto LABEL_212;
          }
          if (v90 == 1)
          {
            unsigned __int8 v92 = -1;
          }
          else
          {
            if (*(unsigned __int8 *)(v6 + (v90 - 1)) - 205 <= 7
              && ((1 << (*(unsigned char *)(v6 + (v90 - 1)) + 51)) & 0xA1) != 0)
            {
              goto LABEL_212;
            }
            unsigned __int8 v92 = v90 - 2;
            if (v90 == 2) {
              goto LABEL_136;
            }
          }
          if (*(unsigned __int8 *)(v6 + v92) != 226) {
            goto LABEL_136;
          }
        }
LABEL_212:
        unint64_t v93 = *(unsigned __int8 *)(a1 + 345);
        if (v93 > 0x40) {
          return 255;
        }
        unint64_t v94 = *v272;
        if (v94 > 0x80) {
          return 255;
        }
        if (v256)
        {
          unint64_t v95 = a1 + 4 * v93;
          char v96 = *(unsigned char *)(v95 + 90) + 1;
          char v97 = *(unsigned char *)(v95 + 91) + 1;
        }
        else
        {
          *(_DWORD *)(a1 + 89 + 4 * v93) = 0;
          unint64_t v93 = *(unsigned __int8 *)(a1 + 345);
          uint64_t v98 = a1 + 89 + 4 * v93;
          *(unsigned char *)uint64_t v98 = *(unsigned char *)(a1 + 88);
          *(_WORD *)(v98 + 1) = 0;
          *(unsigned char *)(v98 + 3) = v94;
          char v97 = 1;
          char v96 = 1;
        }
        unint64_t v99 = a1 + 4 * v93;
        *(unsigned char *)(v99 + 90) = v96;
        *(unsigned char *)(v99 + 91) = v97;
        uint64_t v100 = a1 + 346 + 71 * v94;
        *(void *)(v100 + 63) = 0;
        *(_OWORD *)(v100 + 32) = 0u;
        *(_OWORD *)(v100 + 48) = 0u;
        *(_OWORD *)uint64_t v100 = 0u;
        *(_OWORD *)(v100 + 16) = 0u;
        long long v101 = (unsigned char *)(a1 + 346 + 71 * *v272);
        *long long v101 = *(unsigned char *)(a1 + 88);
        v101[1] = v11 + v53;
        v101[2] = 32;
        v101[5] = v18;
        __strcpy_chk();
        *(unsigned char *)(a1 + 346 + 71 * *v272 + 38) = 0;
        int v102 = mDictFind(__s);
        unsigned int v103 = *v272;
        uint64_t v104 = a1 + 346 + 71 * *v272;
        *(unsigned char *)(v104 + 4) = v102;
        long long v105 = (unsigned char *)(v104 + 4);
        if (*(v105 - 3) == v247) {
          char v106 = 76;
        }
        else {
          char v106 = 70;
        }
        *(v105 - 1) = v106;
        if (v102 == 82 && strchr(v22, 33))
        {
          *long long v105 = 86;
          *(unsigned char *)(a1 + 71 * v103 + 416) = 0;
        }
        else
        {
          long long v107 = strchr(v22, 39);
          long long v108 = (unsigned char *)(a1 + 71 * v103 + 416);
          if (v107) {
            *long long v108 = 2;
          }
          else {
            *long long v108 = 1;
          }
        }
        ++v256;
        *unsigned int v272 = v103 + 1;
        goto LABEL_136;
      }
      BOOL v73 = __s;
      do
      {
        int v75 = *v73++;
        int v74 = v75;
      }
      while ((v75 + 49) < 0xD2u);
      if (v74 != 187 || *v73 != 197)
      {
        uint64_t v76 = (unsigned __int8 *)&v278;
        do
        {
          int v78 = *++v76;
          int v77 = v78;
          if (v78 == 224) {
            goto LABEL_171;
          }
        }
        while (v77);
        if (patt_check(v76, "\xE0\x43\x52") != 1)
        {
LABEL_171:
          __int16 v79 = (unsigned __int8 *)&v278;
          while (1)
          {
            int v81 = *++v79;
            int v80 = v81;
            if (v81 == 225) {
              break;
            }
            if (!v80)
            {
              if (patt_check(v79, "\xE1\x43\x52") == 1) {
                goto LABEL_179;
              }
              break;
            }
          }
          uint64_t v82 = (unsigned __int8 *)&v278;
          while (1)
          {
            int v84 = *++v82;
            int v83 = v84;
            if (v84 == 226) {
              goto LABEL_195;
            }
            if (!v83)
            {
              if (patt_check(v82, "\xE2\x43\x52") != 1) {
                goto LABEL_195;
              }
              break;
            }
          }
        }
LABEL_179:
        char v85 = strlen(__s);
        if (__s[(v85 - 1)] - 195 > 4
          || ((1 << (__s[(v85 - 1)] + 61)) & 0x15) == 0)
        {
          goto LABEL_195;
        }
      }
LABEL_136:
      ++v18;
    }
    while (v18 != v268);
    unsigned __int8 v8 = *(unsigned char *)(a1 + 345);
    if (v256)
    {
      *(unsigned char *)(a1 + 345) = ++v8;
      unint64_t v7 = *v272;
      a3 = v247;
      uint64_t v9 = v259;
      continue;
    }
    LOBYTE(v7) = *v272;
    a3 = v247;
    uint64_t v17 = v11;
LABEL_230:
    uint64_t v109 = a1 + 4 * v8;
    *(unsigned char *)(v109 + 89) = v11;
    *(_WORD *)(v109 + 90) = 257;
    *(unsigned char *)(v109 + 92) = v7;
    LODWORD(v109) = v7;
    uint64_t v110 = a1 + 346 + 71 * v7;
    *(unsigned char *)uint64_t v110 = v11;
    *(unsigned char *)(v110 + 1) = v11 + 1;
    *(_WORD *)(v110 + 2) = 20000;
    *(unsigned char *)(v110 + 4) = 85;
    *(unsigned char *)(v110 + 6) = *(unsigned char *)(a1 + v17 + 24);
    *(unsigned char *)(v110 + 7) = 0;
    *(unsigned char *)(v110 + 38) = 0;
    *(unsigned char *)(v110 + 70) = 1;
    *(unsigned char *)(a1 + 345) = ++v8;
    unint64_t v7 = (v109 + 1);
    *unsigned int v272 = v109 + 1;
    uint64_t v111 = (v109 + 1);
    *(_WORD *)(a1 + 346 + 71 * v111 - 68) = 21573;
    if ((v7 & 0x100) != 0)
    {
      unint64_t v7 = 0;
      uint64_t v9 = v259;
    }
    else
    {
      int v112 = *(unsigned __int8 *)(a1 + 88);
      long long v113 = (unsigned char *)(a1 + 349);
      uint64_t v9 = v259;
      do
      {
        if (*(v113 - 2) == v112 && *v113 != 69) {
          *long long v113 = 78;
        }
        v113 += 71;
        --v111;
      }
      while (v111);
    }
  }
  while ((int)v9 < v7);
  if ((_BYTE)v7)
  {
    unint64_t v114 = 0;
    unint64_t v115 = v7;
    unint64_t v116 = v7;
    while (1)
    {
      unint64_t v117 = a1 + 71 * v114;
      if (*(unsigned char *)(v117 + 350) == 86)
      {
        uint64_t v118 = (unsigned __int8 *)(v117 + 346);
        if (v114 >= v116)
        {
          unint64_t v121 = v115;
        }
        else
        {
          unint64_t v119 = a1 + 71 * v114;
          v266 = (unsigned char *)(v119 + 349);
          unint64_t v269 = (unsigned char *)(v119 + 347);
          char v120 = 1;
          unint64_t v121 = v115;
          unint64_t v122 = v114;
LABEL_243:
          uint64_t v123 = a1 + 352 + 71 * v122;
          do
          {
            if (*(unsigned __int8 *)(v123 - 5) == *v118)
            {
              __strcpy_chk();
              __strcat_chk();
              int v124 = mDictFind(__s);
              if (v124 != 82)
              {
                char v125 = v124;
                __strcat_chk();
                char v120 = 0;
                *(unsigned char *)(v123 - 5) = *v269;
                *(unsigned char *)(v123 - 3) = *v266;
                *(unsigned char *)(v123 - 2) = v125;
                ++v122;
                unint64_t v115 = *v272;
                unint64_t v121 = v115;
                unint64_t v126 = v115;
                if (v122 < v115) {
                  goto LABEL_243;
                }
                goto LABEL_263;
              }
              unint64_t v121 = *v272;
            }
            ++v122;
            v123 += 71;
          }
          while (v122 < v121);
          unint64_t v116 = v121;
          unint64_t v115 = v121;
          unint64_t v126 = v121;
          if ((v120 & 1) == 0) {
            goto LABEL_263;
          }
        }
        unint64_t v127 = a1 + 71 * v114;
        *(unsigned char *)(v127 + 349) = 69;
        if (patt_check((unsigned __int8 *)(v127 + 352), "X\xECPQS") == 1) {
          *(_WORD *)(a1 + 71 * v114 + 384) = 33;
        }
        *(unsigned char *)(v117 + 350) = 84;
        if (!(_BYTE)v116)
        {
          unint64_t v126 = 0;
          unint64_t v115 = v121;
          goto LABEL_263;
        }
        int v128 = *v118;
        uint64_t v129 = v116;
        uint64_t v130 = (unsigned char *)(a1 + 349);
        do
        {
          if (*(v130 - 2) == v128 && *v130 != 69) {
            unsigned char *v130 = 78;
          }
          v130 += 71;
          --v129;
        }
        while (v129);
        unint64_t v115 = v121;
      }
      unint64_t v126 = v116;
LABEL_263:
      ++v114;
      unint64_t v116 = v126;
      if (v114 >= v126)
      {
        unsigned __int8 v8 = *(unsigned char *)(a1 + 345);
        goto LABEL_267;
      }
    }
  }
  LOBYTE(v115) = 0;
LABEL_267:
  if (v8 < 2u)
  {
    unsigned __int8 v137 = v115;
  }
  else
  {
    uint64_t v131 = 0;
    uint64_t v132 = 1;
    uint64_t v133 = 93;
    do
    {
      int v134 = v131 + 1;
      if (v131 + 1 < (unint64_t)v8)
      {
        uint64_t v135 = v133;
        unint64_t v136 = v132;
        do
        {
          if (*(unsigned __int8 *)(a1 + 4 * v131 + 89) > *(unsigned __int8 *)(a1 + v135))
          {
            swapMRT(a1, v131, v136);
            unsigned __int8 v8 = *(unsigned char *)(a1 + 345);
          }
          ++v136;
          v135 += 4;
        }
        while (v136 < v8);
      }
      ++v132;
      v133 += 4;
      ++v131;
    }
    while (v8 - 1 > v134);
    unsigned __int8 v137 = *v272;
  }
  if (v137 >= 2u)
  {
    uint64_t v138 = 0;
    uint64_t v139 = (unsigned __int8 *)(a1 + 418);
    uint64_t v140 = 1;
    unsigned __int8 v141 = v137;
    do
    {
      int v142 = v138 + 1;
      if (v138 + 1 < (unint64_t)v141)
      {
        uint64_t v143 = a1 + 71 * v138;
        uint64_t v144 = (unsigned __int8 *)(v143 + 346);
        uint64_t v145 = (unsigned __int8 *)(v143 + 347);
        unsigned int v146 = v139;
        unint64_t v147 = v140;
        do
        {
          unsigned int v148 = *v144;
          unsigned int v149 = *(v146 - 1);
          if (v148 > v149 || v148 == v149 && *v145 < *v146)
          {
            swapMST(a1, v138, v147);
            unsigned __int8 v137 = *v272;
          }
          ++v147;
          v146 += 71;
          unsigned __int8 v141 = v137;
        }
        while (v147 < v137);
      }
      ++v140;
      v139 += 71;
      ++v138;
    }
    while (v141 - 1 > v142);
    unsigned __int8 v8 = *(unsigned char *)(a1 + 345);
  }
  if (v8 >= 2u)
  {
    int v150 = *(unsigned __int8 *)(a1 + 92);
    uint64_t v151 = v8 - 1;
    uint64_t v152 = (unsigned char *)(a1 + 96);
    do
    {
      v150 += *(v152 - 6);
      *uint64_t v152 = v150;
      v152 += 4;
      --v151;
    }
    while (v151);
  }
  if (!v8) {
    return 1;
  }
  uint64_t v153 = v8;
  uint64_t v154 = a1 + 350;
  uint64_t v267 = a1 + 348;
  while (2)
  {
    uint64_t v155 = a1 + 4 * --v153;
    unsigned int v156 = *(unsigned __int8 *)(v155 + 91);
    v276 = (unsigned char *)(v155 + 91);
    if (v156 < 2) {
      goto LABEL_485;
    }
    uint64_t v157 = a1 + 4 * v153;
    char v159 = *(unsigned char *)(v157 + 90);
    unsigned __int16 v158 = (unsigned char *)(v157 + 90);
    uint64_t v160 = v158[2];
    v273 = v158 + 2;
    unsigned __int8 v161 = v159 + v160;
    if (v160 >= (v159 + v160))
    {
      int v166 = -1;
      __int16 v163 = -1;
      LOWORD(v165) = -1;
      int v168 = -1;
    }
    else
    {
      int v162 = -1;
      __int16 v163 = -1;
      uint64_t v164 = v158[2];
      int v165 = 0xFFFF;
      int v166 = -1;
      uint64_t v167 = (char *)(v154 + 71 * v164);
      int v168 = -1;
      do
      {
        if (*(v167 - 2) != 89)
        {
          int v169 = *(v167 - 1);
          if (v169 == 76) {
            int v170 = v164;
          }
          else {
            int v170 = v166;
          }
          if (v169 == 78)
          {
            int v170 = v166;
            int v171 = v164;
          }
          else
          {
            int v171 = v162;
          }
          if (v169 == 70)
          {
            int v168 = v164;
          }
          else
          {
            int v166 = v170;
            int v162 = v171;
          }
          int v172 = *v167;
          if (v172 == 88) {
            int v173 = v164;
          }
          else {
            int v173 = v165;
          }
          if (v172 == 89) {
            __int16 v163 = v164;
          }
          else {
            int v165 = v173;
          }
        }
        v167 += 71;
        ++v164;
      }
      while (v161 != v164);
      if ((v162 & 0x80000000) == 0 && ((v166 & 0x80000000) == 0 || (v168 & 0x80000000) == 0))
      {
        int v174 = (unsigned char *)(v267 + 71 * v158[2]);
        uint64_t v175 = v161 - v160;
        do
        {
          if (v174[1] == 78 && *v174 != 89)
          {
            unsigned char *v276 = --v156;
            *int v174 = 89;
          }
          v174 += 71;
          --v175;
        }
        while (v175);
      }
    }
    if (v166 < 0 && v168 < 0 && (v160 + 1) < v161)
    {
      unsigned __int8 v176 = *(unsigned char *)(a1 + 71 * v160 + 347);
      unsigned __int8 v177 = v160 + 1;
      uint64_t v178 = (unsigned char *)(v267 + 71 * (v160 + 1));
      unsigned __int8 v179 = v160;
      while (*(v178 - 1) > v176)
      {
        uint64_t v180 = a1 + 71 * v179;
        if (*(unsigned char *)(v180 + 348) != 89)
        {
          uint64_t v181 = (unsigned char *)(v180 + 348);
          unsigned __int8 v179 = v177;
          unsigned __int8 v176 = *(v178 - 1);
LABEL_333:
          unsigned char *v276 = --v156;
          *uint64_t v181 = 89;
          goto LABEL_334;
        }
        unsigned __int8 v179 = v177;
        unsigned __int8 v176 = *(v178 - 1);
LABEL_334:
        ++v177;
        v178 += 71;
        if (v161 == v177) {
          goto LABEL_335;
        }
      }
      uint64_t v181 = v178;
      if (*v178 == 89) {
        goto LABEL_334;
      }
      goto LABEL_333;
    }
LABEL_335:
    if (v156 < 2u) {
      goto LABEL_485;
    }
    if (v160 >= v161)
    {
      BOOL v189 = 0;
      __int16 v183 = -1;
      __int16 v185 = -1;
      __int16 v186 = -1;
      __int16 v188 = -1;
    }
    else
    {
      int v182 = -1;
      __int16 v183 = -1;
      uint64_t v184 = v160;
      __int16 v185 = -1;
      __int16 v186 = -1;
      BOOL v187 = (unsigned char *)(v154 + 71 * v160);
      __int16 v188 = -1;
      do
      {
        if (*(v187 - 2) != 89)
        {
          if (*(v187 - 1) == 76) {
            int v182 = v184;
          }
          switch(*v187)
          {
            case 'P':
              __int16 v186 = v184;
              break;
            case 'Q':
              __int16 v185 = v184;
              break;
            case 'R':
              __int16 v188 = v184;
              break;
            case 'S':
              __int16 v183 = v184;
              break;
            case 'X':
              LOWORD(v165) = v184;
              break;
            case 'Y':
              __int16 v163 = v184;
              break;
            default:
              break;
          }
        }
        v187 += 71;
        ++v184;
      }
      while (v161 != v184);
      BOOL v189 = v182 >= 0;
      if ((v182 & 0x80000000) == 0 && (v165 & 0x8000) != 0 && v163 < 0)
      {
        uint64_t v190 = v161 - v160;
        uint64_t v191 = (unsigned char *)(v267 + 71 * v160);
        do
        {
          if (v191[1] != 76 && *v191 != 89)
          {
            unsigned char *v276 = --v156;
            *uint64_t v191 = 89;
          }
          v191 += 71;
          --v190;
        }
        while (v190);
        BOOL v189 = 1;
      }
    }
    BOOL v270 = v189;
    if ((v165 & 0x8000) != 0 && v163 < 0)
    {
LABEL_382:
      if ((v165 & 0x8000) == 0 || (v163 & 0x8000) == 0) {
        goto LABEL_384;
      }
      goto LABEL_432;
    }
    if ((v165 & 0x8000) != 0)
    {
      if (v160 < v161 && (v163 & 0x8000) == 0)
      {
        __int16 v254 = v186;
        __int16 v257 = v185;
        __int16 v260 = v183;
        __int16 v263 = v188;
        uint64_t v192 = v158;
        uint64_t v193 = v153;
        int v196 = (unsigned char *)(v154 + 71 * v160);
        int v197 = v160;
        do
        {
          if (v197 != v163
            && (*v196 & 0xFE) == 0x58
            && *(v196 - 2) != 89
            && compareXX(a1, v193, v197, v163))
          {
            __int16 v163 = v197;
          }
          ++v197;
          v196 += 71;
        }
        while (v161 != v197);
LABEL_381:
        uint64_t v153 = v193;
        uint64_t v154 = a1 + 350;
        unsigned __int16 v158 = v192;
        __int16 v188 = v263;
        __int16 v185 = v257;
        __int16 v183 = v260;
        __int16 v186 = v254;
      }
      goto LABEL_382;
    }
    if (v160 < v161)
    {
      __int16 v254 = v186;
      __int16 v257 = v185;
      __int16 v260 = v183;
      __int16 v263 = v188;
      uint64_t v192 = v158;
      uint64_t v193 = v153;
      int v194 = (unsigned char *)(v154 + 71 * v160);
      int v195 = v160;
      do
      {
        if (v195 != (__int16)v165
          && (*v194 & 0xFE) == 0x58
          && *(v194 - 2) != 89
          && compareXX(a1, v193, v195, v165))
        {
          LOWORD(v165) = v195;
        }
        ++v195;
        v194 += 71;
      }
      while (v161 != v195);
      goto LABEL_381;
    }
LABEL_384:
    if ((v186 & 0x8000) == 0 || (v185 & 0x8000) == 0 || (v188 & 0x8000) == 0 || (v183 & 0x8000) == 0)
    {
      if (v160 >= v161)
      {
        if (!v270) {
          goto LABEL_431;
        }
      }
      else
      {
        __int16 v264 = v188;
        uint64_t v251 = v153;
        int v198 = 0;
        uint64_t v199 = (unsigned char *)(v267 + 71 * v160);
        uint64_t v200 = v161 - v160;
        uint64_t v201 = v160;
        do
        {
          if ((*(unsigned char *)(a1 + 71 * v201 + 350) & 0xFE) == 0x58 && *(unsigned char *)(a1 + 71 * v201 + 348) != 89)
          {
            if (*(unsigned char *)(a1 + 71 * v201 + 349) != 76
              && findCfollow(a1, v201, 0x58u) == 255)
            {
              if ((v264 & 0x8000) == 0
                && (findCfollow(a1, v201, 0x51u) != 255
                 || findCfollow(a1, v201, 0x53u) != 255
                 || findCfollow(a1, v201, 0x50u) != 255))
              {
                uint64_t v204 = v161 - v160;
                uint64_t v205 = (unsigned char *)(v267 + 71 * v160);
                do
                {
                  if (v205[2] == 82)
                  {
                    if (*v205 != 89)
                    {
                      --*v276;
                      *uint64_t v205 = 89;
                    }
                    int v198 = 9;
                  }
                  v205 += 71;
                  --v204;
                }
                while (v204);
              }
            }
            else
            {
              uint64_t v202 = (unsigned char *)(v267 + 71 * v160);
              uint64_t v203 = v161 - v160;
              do
              {
                if ((v202[2] & 0xFE) != 0x58)
                {
                  if (*v202 != 89)
                  {
                    --*v276;
                    *uint64_t v202 = 89;
                  }
                  int v198 = 9;
                }
                v202 += 71;
                --v203;
              }
              while (v203);
            }
          }
          ++v201;
        }
        while (v201 != v161);
        if (v198 != 9 && (v264 & 0x8000) == 0)
        {
          uint64_t v206 = (unsigned char *)(v267 + 71 * v160);
          do
          {
            if (v206[2] == 82
              && (allCfollow(a1, v160, 0x52u)
               || allCfollow(a1, v160, 0x54u))
              && *v206 != 89)
            {
              --*v276;
              unsigned char *v206 = 89;
            }
            LOBYTE(v160) = v160 + 1;
            v206 += 71;
          }
          while (v161 != v160);
        }
        BOOL v35 = v198 == 9;
        uint64_t v154 = a1 + 350;
        uint64_t v153 = v251;
        if (v35) {
          goto LABEL_432;
        }
        if (v270)
        {
          do
          {
            if (v199[1] != 76 && *v199 != 89)
            {
              --*v276;
              *uint64_t v199 = 89;
            }
            v199 += 71;
            --v200;
          }
          while (v200);
          goto LABEL_432;
        }
LABEL_431:
        keepLongest(a1, v153);
      }
    }
LABEL_432:
    if (*v276 >= 2u)
    {
      uint64_t v207 = *v273;
      unsigned __int8 v208 = *v158 + v207;
      if (v207 >= v208)
      {
        __int16 v210 = -1;
        __int16 v214 = -1;
        __int16 v213 = -1;
        __int16 v258 = -1;
        __int16 v261 = -1;
        __int16 v255 = -1;
        __int16 v212 = -1;
      }
      else
      {
        unsigned int v209 = (unsigned char *)(v154 + 71 * *v273);
        __int16 v210 = -1;
        __int16 v258 = -1;
        __int16 v261 = -1;
        uint64_t v211 = *v273;
        __int16 v212 = -1;
        __int16 v255 = -1;
        __int16 v213 = -1;
        __int16 v214 = -1;
        do
        {
          if (*(v209 - 2) != 89)
          {
            switch(*v209)
            {
              case 'P':
                __int16 v258 = v211;
                break;
              case 'Q':
                __int16 v255 = v211;
                break;
              case 'R':
                __int16 v213 = v211;
                break;
              case 'S':
                __int16 v212 = v211;
                break;
              case 'T':
                __int16 v261 = v211;
                break;
              case 'X':
                __int16 v210 = v211;
                break;
              case 'Y':
                __int16 v214 = v211;
                break;
              default:
                break;
            }
          }
          ++v211;
          v209 += 71;
        }
        while ((*v158 + v207) != v211);
      }
      BOOL v250 = (v210 & v214 & 0x8000u) != 0;
      if (((unsigned __int16)v210 & (unsigned __int16)v214 & 0x8000) != 0)
      {
        __int16 v246 = v212;
        __int16 v248 = v213;
        int v215 = *v276;
        uint64_t v252 = v153;
        unint64_t v216 = 0;
        uint64_t v271 = 71 * *v273 + 350;
        uint64_t v274 = *v273;
        uint64_t v265 = (unsigned char *)(v267 + 71 * v207);
        do
        {
          if (v207 >= v208)
          {
            LOBYTE(v219) = v207;
          }
          else
          {
            unsigned __int8 v217 = v207;
            uint64_t v218 = v271;
            uint64_t v219 = v207;
            while (1)
            {
              if (*(unsigned char *)(a1 + v218) != 82)
              {
                unsigned __int8 v220 = aX_4[v216 + 11];
                if (findCfollow(a1, v219, v220) != 255) {
                  break;
                }
              }
              ++v219;
              v218 += 71;
              ++v217;
              if (v208 == v219)
              {
                LOBYTE(v219) = v208;
                goto LABEL_463;
              }
            }
            uint64_t v221 = v217;
            long long v222 = v265;
            uint64_t v223 = v274;
            do
            {
              if (v221 != v223
                && (findCfollow(a1, v223, v220) == 255 || v222[2] == 82)
                && *v222 != 89)
              {
                unsigned char *v276 = --v215;
                *long long v222 = 89;
              }
              ++v223;
              v222 += 71;
            }
            while (v208 != v223);
LABEL_463:
            uint64_t v207 = v274;
          }
          char v224 = v216 + 1;
          int v225 = v219;
          if (v219 != v208) {
            break;
          }
        }
        while (v216++ < 3);
        uint64_t v154 = a1 + 350;
        uint64_t v153 = v252;
        __int16 v213 = v248;
        __int16 v212 = v246;
        if (v225 == v208 && v224 == 4) {
          keepLongest(a1, v252);
        }
      }
      if ((v261 & 0x8000) == 0)
      {
        unsigned int v227 = *v276;
        if (v227 >= 2)
        {
          BOOL v228 = v250;
          if (v258 >= 0) {
            BOOL v228 = 0;
          }
          if (v228 && v255 < 0 && v213 < 0 && v212 < 0)
          {
            keepLongest(a1, v153);
          }
          else if (v207 < v208)
          {
            uint64_t v229 = (unsigned char *)(v267 + 71 * v207);
            uint64_t v230 = v208 - v207;
            do
            {
              if (v229[2] == 84 && *v229 != 89)
              {
                unsigned char *v276 = --v227;
                *uint64_t v229 = 89;
              }
              v229 += 71;
              --v230;
            }
            while (v230);
          }
        }
      }
    }
LABEL_485:
    if ((_BYTE)v153) {
      continue;
    }
    break;
  }
  uint64_t v231 = *(unsigned __int8 *)(a1 + 345);
  uint64_t result = 1;
  if (!*(unsigned char *)(a1 + 345)) {
    return result;
  }
  uint64_t v233 = 0;
  int v234 = 0;
  uint64_t v235 = 0;
  while (2)
  {
    long long v236 = (unsigned char *)(a1 + 4 * v233);
    long long v237 = v236 + 91;
    if (v236[91] != 2) {
      goto LABEL_504;
    }
    unsigned int v238 = v236[92];
    char v239 = v236[90];
    unsigned __int8 v240 = v239 + v238;
    if (v238 >= (v239 + v238)) {
      goto LABEL_504;
    }
    int v241 = 0;
    uint64_t v242 = (unsigned __int8 *)(a1 + 347 + 71 * v238);
    while (2)
    {
      if (v242[1] == 89)
      {
LABEL_494:
        LOBYTE(v238) = v238 + 1;
        v242 += 71;
        if (v240 == v238) {
          goto LABEL_504;
        }
        continue;
      }
      break;
    }
    if (!v241)
    {
      int v234 = v242[69];
      uint64_t v235 = v238;
      int v241 = *v242;
      goto LABEL_494;
    }
    if (v241 == *v242)
    {
      int v243 = v242[69];
      if (v234 <= v243 || (uint64_t v244 = a1 + 71 * v235, *(unsigned char *)(v244 + 348) == 89))
      {
        char v245 = 1;
      }
      else
      {
        char v245 = 0;
        *long long v237 = 1;
        *(unsigned char *)(v244 + 348) = 89;
      }
      if (v234 < v243 && v242[1] != 89)
      {
        *long long v237 = v245;
        v242[1] = 89;
      }
    }
LABEL_504:
    if (++v233 != v231) {
      continue;
    }
    return 1;
  }
}

uint64_t WParser(uint64_t a1, char *a2, _WORD *a3, unsigned char *a4, int *a5)
{
  *a4 = 0;
  *a2 = 0;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 345);
  if (*(unsigned char *)(a1 + 345))
  {
    uint64_t v10 = (unsigned char *)(a1 + 90);
    do
    {
      unsigned char *v10 = 0;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 90);
  if (v11 < *(unsigned __int8 *)(a1 + 91))
  {
    LOBYTE(v11) = v11 + 1;
    *(unsigned char *)(a1 + 90) = v11;
  }
  unsigned int v12 = *(unsigned __int8 *)(a1 + 92);
  unsigned int v13 = *(unsigned __int8 *)(a1 + 9434);
  if (v12 < v13)
  {
    uint64_t v14 = (unsigned __int8 *)(a1 + 71 * *(unsigned __int8 *)(a1 + 92) + 348);
    unsigned __int8 v15 = 1;
    do
    {
      int v16 = *v14;
      v14 += 71;
      if (v16 != 89)
      {
        if (v15 == v11) {
          goto LABEL_13;
        }
        ++v15;
      }
      LOBYTE(v12) = v12 + 1;
    }
    while (v13 != v12);
  }
  LOBYTE(v12) = -1;
LABEL_13:
  int v17 = rule2phone(a1, v12);
  if (v17 < 0)
  {
    int v40 = a5;
    int v19 = 0;
  }
  else
  {
    char v18 = v17;
    int v19 = strlen((const char *)(a1 + 71 * v12 + 384));
    if ((unsigned __int16)*a3 <= (unsigned __int16)v19)
    {
      uint64_t result = 0;
      int v39 = 255;
      goto LABEL_48;
    }
    int v40 = a5;
    strcpy(a2, (const char *)(a1 + 71 * v12 + 384));
    *a4 = v18;
  }
  if (*(unsigned __int8 *)(a1 + 345) >= 2u)
  {
    for (unint64_t i = 1; i < *(unsigned __int8 *)(a1 + 345); ++i)
    {
      unint64_t v21 = a1 + 4 * i;
      if (*(unsigned __int8 *)(v21 + 89) == *(unsigned __int8 *)(a1 + 71 * v12 + 347))
      {
        unsigned int v24 = *(unsigned __int8 *)(v21 + 90);
        int v23 = (unsigned char *)(v21 + 90);
        char v22 = v24;
        if (v24 < v23[1]) {
          *int v23 = ++v22;
        }
        unsigned int v12 = *(unsigned __int8 *)(a1 + 4 * i + 92);
        unsigned int v25 = *(unsigned __int8 *)(a1 + 9434);
        if (v12 < v25)
        {
          uint64_t v26 = (unsigned __int8 *)(a1 + 348 + 71 * *(unsigned __int8 *)(a1 + 4 * i + 92));
          char v27 = 1;
          do
          {
            int v28 = *v26;
            v26 += 71;
            if (v28 != 89)
            {
              if (v27 == v22) {
                goto LABEL_29;
              }
              ++v27;
            }
            LOBYTE(v12) = v12 + 1;
          }
          while (v25 != v12);
        }
        LOBYTE(v12) = -1;
LABEL_29:
        int v29 = rule2phone(a1, v12);
        if ((v29 & 0x80000000) == 0)
        {
          char v30 = v29;
          v19 += strlen((const char *)(a1 + 71 * v12 + 384));
          if ((unsigned __int16)*a3 <= (unsigned __int16)v19)
          {
            uint64_t result = 0;
LABEL_46:
            int v39 = 255;
            goto LABEL_47;
          }
          strcat(a2, (const char *)(a1 + 71 * v12 + 384));
          *a4 |= v30;
        }
      }
    }
  }
  int v31 = strlen(a2);
  int v32 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v31 + 1));
  if (!v32)
  {
    uint64_t result = 2370838538;
    goto LABEL_46;
  }
  int v33 = v32;
  int v34 = strcpy(v32, a2);
  if (*a2)
  {
    size_t v35 = 0;
    int v34 = (char *)v33;
    do
    {
      int v36 = a2[v35];
      if (v36 != 39) {
        *v34++ = v36;
      }
      ++v35;
    }
    while (v35 < strlen(a2));
  }
  *int v34 = 0;
  strcpy(a2, v33);
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v33);
  __int16 v37 = strlen(a2);
  uint64_t result = 0;
  *a3 = v37;
  int v39 = 1;
LABEL_47:
  a5 = v40;
LABEL_48:
  *a5 = v39;
  return result;
}

char *ReadThaiChar(char *result, char *__dst)
{
  uint64_t v2 = cchar_dct;
  if (cchar_dct)
  {
    for (unint64_t i = (const char *)&unk_20D62F07D; *((unsigned __int8 *)i - 1) != result; i += 51)
    {
      if (!--v2) {
        return result;
      }
    }
    return strcpy(__dst, i);
  }
  return result;
}

uint64_t contable(uint64_t result, int a2, uint64_t a3)
{
  if (a2)
  {
    switch((int)result)
    {
      case -95:
      case -94:
      case -92:
      case -90:
        goto LABEL_9;
      case -89:
        goto LABEL_17;
      case -88:
      case -86:
      case -85:
      case -82:
      case -81:
      case -80:
      case -79:
      case -78:
      case -76:
      case -75:
      case -74:
      case -73:
      case -72:
      case -56:
      case -55:
      case -54:
        goto LABEL_3;
      case -87:
      case -84:
      case -68:
      case -67:
      case -60:
      case -58:
      case -53:
      case -51:
      case -50:
        __int16 v3 = 45;
        goto LABEL_27;
      case -83:
      case -77:
      case -71:
      case -61:
      case -59:
      case -52:
        goto LABEL_7;
      case -70:
      case -69:
      case -66:
      case -65:
      case -64:
        goto LABEL_8;
      case -63:
        goto LABEL_18;
      case -62:
        goto LABEL_12;
      case -57:
        goto LABEL_19;
      default:
        goto LABEL_16;
    }
  }
  switch((int)result)
  {
    case -95:
LABEL_9:
      __int16 v3 = 107;
      goto LABEL_27;
    case -94:
    case -93:
    case -92:
    case -91:
    case -90:
      *(unsigned char *)(a3 + 2) = 0;
      __int16 v3 = 26731;
      goto LABEL_27;
    case -89:
LABEL_17:
      *(unsigned char *)(a3 + 2) = 0;
      __int16 v3 = 26478;
      goto LABEL_27;
    case -88:
      __int16 v3 = 99;
      goto LABEL_27;
    case -87:
    case -86:
    case -84:
      *(unsigned char *)(a3 + 2) = 0;
      __int16 v3 = 26723;
      goto LABEL_27;
    case -85:
    case -56:
    case -55:
    case -54:
      __int16 v3 = 115;
      goto LABEL_27;
    case -83:
    case -62:
LABEL_12:
      __int16 v3 = 106;
      goto LABEL_27;
    case -82:
    case -76:
      __int16 v3 = 100;
      goto LABEL_27;
    case -81:
    case -75:
LABEL_3:
      __int16 v3 = 116;
      goto LABEL_27;
    case -80:
    case -79:
    case -78:
    case -74:
    case -73:
    case -72:
      *(unsigned char *)(a3 + 2) = 0;
      __int16 v3 = 26740;
      goto LABEL_27;
    case -77:
    case -71:
LABEL_7:
      __int16 v3 = 110;
      goto LABEL_27;
    case -70:
      __int16 v3 = 98;
      goto LABEL_27;
    case -69:
LABEL_8:
      __int16 v3 = 112;
      goto LABEL_27;
    case -68:
    case -66:
    case -64:
      *(unsigned char *)(a3 + 2) = 0;
      __int16 v3 = 26736;
      goto LABEL_27;
    case -67:
    case -65:
      __int16 v3 = 102;
      goto LABEL_27;
    case -63:
LABEL_18:
      __int16 v3 = 109;
      goto LABEL_27;
    case -61:
    case -60:
      __int16 v3 = 114;
      goto LABEL_27;
    case -59:
    case -58:
    case -52:
      __int16 v3 = 108;
      goto LABEL_27;
    case -57:
LABEL_19:
      __int16 v3 = 119;
      goto LABEL_27;
    case -53:
    case -50:
      __int16 v3 = 104;
      goto LABEL_27;
    case -51:
      __int16 v3 = 35;
LABEL_27:
      *(_WORD *)a3 = v3;
      break;
    default:
LABEL_16:
      *(unsigned char *)a3 = 0;
      break;
  }
  return result;
}

uint64_t patt_check(unsigned __int8 *a1, unsigned char *a2)
{
  unsigned __int8 v2 = *a1;
  if (*a1)
  {
    while (1)
    {
      int v3 = (char)*a2;
      if (!*a2) {
        return -1;
      }
      if (v3 <= 83) {
        break;
      }
      if (v3 != 84)
      {
        if (v3 == 88)
        {
          if ((v2 + 95) >= 0x2Eu) {
            return -1;
          }
          goto LABEL_18;
        }
LABEL_17:
        if (*a2 != v2) {
          return -1;
        }
        goto LABEL_18;
      }
      uint64_t v9 = (v2 & 0xFC) == 232;
LABEL_19:
      a1 += v9;
      ++a2;
      unsigned __int8 v2 = *a1;
      if (!*a1) {
        goto LABEL_20;
      }
    }
    if (v3 == 67)
    {
      int v7 = v2;
      unsigned __int8 v5 = -1;
      unsigned int v8 = v7 - 161;
      if (v8 > 0x29 || ((1 << v8) & 0x2802C50040BLL) == 0) {
        return v5;
      }
    }
    else
    {
      if (v3 != 82) {
        goto LABEL_17;
      }
      int v4 = v2;
      unsigned __int8 v5 = -1;
      unsigned int v6 = v4 - 195;
      if (v6 > 4 || ((1 << v6) & 0x15) == 0) {
        return v5;
      }
    }
LABEL_18:
    uint64_t v9 = 1;
    goto LABEL_19;
  }
LABEL_20:
  if (*a2) {
    return -1;
  }
  else {
    return 1;
  }
}

uint64_t compareXX(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v8 = allCfollow(a1, a3, 0x52u);
  uint64_t result = allCfollow(a1, a4, 0x52u);
  if (!v8 && result) {
    goto LABEL_3;
  }
  if (!v8)
  {
    int v12 = allNfollow(a1, a3);
    uint64_t result = allNfollow(a1, a4);
    if (!v12 && result)
    {
LABEL_3:
      uint64_t v10 = a1 + 71 * a4;
LABEL_4:
      int v11 = *(unsigned __int8 *)(v10 + 348);
      uint64_t result = 1;
      goto LABEL_10;
    }
    if (!v12) {
      return 0;
    }
  }
  if (result)
  {
    if (*(unsigned __int8 *)(a1 + 346 + 71 * a3 + 1) >= *(unsigned __int8 *)(a1 + 346 + 71 * a4 + 1))
    {
      uint64_t v10 = a1 + 71 * a4;
      goto LABEL_4;
    }
    uint64_t result = 0;
  }
  uint64_t v10 = a1 + 71 * a3;
  int v11 = *(unsigned __int8 *)(v10 + 348);
LABEL_10:
  if (v11 != 89)
  {
    --*(unsigned char *)(a1 + 4 * a2 + 91);
    *(unsigned char *)(v10 + 348) = 89;
  }
  return result;
}

uint64_t findCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  if (*(unsigned char *)(a1 + 71 * a2 + 348) != 89 && *(unsigned char *)(a1 + 345))
  {
    uint64_t v3 = 0;
    do
    {
      int v4 = (unsigned __int8 *)(a1 + 4 * v3);
      if (v4[89] == *(unsigned __int8 *)(a1 + 71 * a2 + 347))
      {
        unsigned int v5 = v4[92];
        unsigned __int8 v6 = v4[90] + v5;
        if (v5 < v6)
        {
          int v7 = (unsigned __int8 *)(a1 + 350 + 71 * v5);
          do
          {
            int v8 = *v7;
            if (a3 == 88)
            {
              if ((v8 & 0xFE) == 0x58 && *(v7 - 1) != 78 && *(v7 - 2) != 89) {
                return v5;
              }
            }
            else if (v8 == a3 && *(v7 - 2) != 89 && *(v7 - 1) != 78)
            {
              return v5;
            }
            LOBYTE(v5) = v5 + 1;
            v7 += 71;
          }
          while (v6 != v5);
        }
      }
      ++v3;
    }
    while (v3 != *(unsigned __int8 *)(a1 + 345));
  }
  LOBYTE(v5) = -1;
  return v5;
}

uint64_t allCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 345);
  if (!*(unsigned char *)(a1 + 345)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v3) {
      return 0;
    }
  }
  uint64_t v6 = *i;
  char v7 = *(i - 2);
  if (v6 < (v7 + v6))
  {
    uint64_t v8 = a1 + 71 * *i + 350;
    uint64_t v9 = v6 + 1;
    int v10 = (v7 + v6);
    int v11 = (char *)v8;
    while (1)
    {
      int v12 = *v11;
      v11 += 71;
      if (v12 != a3 && *(unsigned char *)(v8 - 2) != 89) {
        break;
      }
      BOOL v13 = v10 == v9++;
      uint64_t v8 = (uint64_t)v11;
      if (v13) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t keepLongest(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result + 4 * a2;
  unsigned int v3 = *(unsigned __int8 *)(v2 + 92);
  unsigned __int8 v4 = *(unsigned char *)(v2 + 90) + v3;
  unsigned __int8 v5 = v3;
  if (v3 < v4)
  {
    uint64_t v6 = (unsigned __int8 *)(result + 71 * v3 + 348);
    while (1)
    {
      int v7 = *v6;
      v6 += 71;
      if (v7 != 89) {
        break;
      }
      LOBYTE(v3) = v3 + 1;
      if (v4 == v3)
      {
        unsigned __int8 v5 = v4;
        goto LABEL_7;
      }
    }
    unsigned __int8 v5 = v3;
  }
LABEL_7:
  if ((v5 + 1) < v4)
  {
    unsigned int v8 = *(unsigned __int8 *)(result + 71 * v5 + 347);
    unsigned __int8 v9 = v5 + 1;
    int v10 = (unsigned __int8 *)(result + 71 * (v5 + 1) + 347);
    do
    {
      int v11 = v10 + 1;
      if (v10[1] != 89)
      {
        unsigned int v12 = *v10;
        if (v12 >= v8)
        {
          if (v12 == v8)
          {
            if (v10[69] < *(unsigned __int8 *)(result + 71 * v5 + 416))
            {
              uint64_t v13 = result + 71 * v5;
              if (*(unsigned char *)(v13 + 348) == 89)
              {
                unsigned __int8 v5 = v9;
                goto LABEL_12;
              }
              int v11 = (unsigned char *)(v13 + 348);
              unsigned __int8 v5 = v9;
            }
          }
          else
          {
            uint64_t v14 = result + 71 * v5;
            if (*(unsigned char *)(v14 + 348) == 89)
            {
              unsigned __int8 v5 = v9;
              unsigned int v8 = *v10;
              goto LABEL_12;
            }
            int v11 = (unsigned char *)(v14 + 348);
            unsigned __int8 v5 = v9;
            unsigned int v8 = *v10;
          }
        }
        --*(unsigned char *)(result + 4 * a2 + 91);
        *int v11 = 89;
      }
LABEL_12:
      ++v9;
      v10 += 71;
    }
    while (v4 != v9);
  }
  return result;
}

uint64_t allNfollow(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 345);
  if (!*(unsigned char *)(a1 + 345)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v2) {
      return 0;
    }
  }
  uint64_t v5 = *i;
  unsigned __int8 v6 = *(i - 2) + v5;
  if (v5 < v6)
  {
    uint64_t v7 = a1 + 71 * v5 + 349;
    uint64_t v8 = v5 + 1;
    unsigned __int8 v9 = (unsigned __int8 *)v7;
    while (1)
    {
      int v10 = *v9;
      v9 += 71;
      if (v10 != 78 && *(unsigned char *)(v7 - 1) != 89) {
        break;
      }
      BOOL v11 = v6 == v8++;
      uint64_t v7 = (uint64_t)v9;
      if (v11) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t rule2phone(uint64_t a1, unsigned int a2)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 71 * a2 + 348) == 89) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a1 + 71 * a2;
  if (*(unsigned char *)(v5 + 384))
  {
    if (*(unsigned char *)(v5 + 384) == 33) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  uint64_t v6 = a1 + 71 * a2;
  uint64_t v7 = (char *)*(unsigned __int8 *)(v6 + 352);
  if (!*(unsigned char *)(v6 + 352)) {
    return 4294967294;
  }
  uint64_t v8 = (char *)(v5 + 384);
  unsigned __int8 v9 = (char *)(v6 + 352);
  int v10 = *(unsigned __int8 *)(a1 + 71 * a2 + 350);
  if (v10 != 84)
  {
    uint64_t result = 0;
    if (v10 == 85 || *(unsigned char *)(a1 + 71 * a2 + 349) == 69) {
      return result;
    }
    uint64_t v12 = a1 + 71 * a2;
    __strcpy_chk();
    uint64_t v15 = *(unsigned __int8 *)(v12 + 351);
    unsigned __int8 v16 = psrules[61 * v15];
    if (v16)
    {
      int v17 = (unsigned __int8 *)(v12 + 351);
      long long v18 = 0uLL;
      do
      {
        switch(v16)
        {
          case 'A':
            int v19 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v19 != 195 && (v19 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v19, 0, (uint64_t)v130);
              uint64_t v20 = 65;
              goto LABEL_112;
            }
            break;
          case 'B':
            int v21 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v21 != 199 && (v21 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v21, 0, (uint64_t)v130);
              uint64_t v20 = 66;
              goto LABEL_112;
            }
            break;
          case 'C':
            int v22 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            BOOL v23 = (v22 - 161) > 0x29 || ((1 << (v22 + 95)) & 0x2802C50040BLL) == 0;
            if (!v23)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v22, 0, (uint64_t)v130);
              uint64_t v20 = 67;
              goto LABEL_112;
            }
            break;
          case 'D':
            int v24 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v24 - 164) <= 0x13 && ((1 << (v24 + 92)) & 0xA0041) != 0)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v24, 1, (uint64_t)v130);
              uint64_t v20 = 68;
              goto LABEL_112;
            }
            break;
          case 'E':
            int v26 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v26 != 205 && (v26 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v26, 0, (uint64_t)v130);
              uint64_t v20 = 69;
              goto LABEL_112;
            }
            break;
          case 'F':
            int v27 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v27 - 164) <= 0x12 && ((1 << (v27 + 92)) & 0x68001) != 0)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v27, 1, (uint64_t)v130);
              uint64_t v20 = 70;
              goto LABEL_112;
            }
            break;
          case 'G':
            int v29 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v29 - 170) <= 0x23 && ((1 << (v29 + 86)) & 0x94840A001) != 0)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v29, 0, (uint64_t)v130);
              uint64_t v20 = 71;
              goto LABEL_112;
            }
            break;
          case 'H':
            int v31 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v31 != 203 && (v31 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v31, 0, (uint64_t)v130);
              uint64_t v20 = 72;
              goto LABEL_112;
            }
            break;
          case 'J':
            char v32 = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            if ((v32 + 49) >= 0xD2u
              && *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) != 199
              && *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) != 205)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable(v32, 0, (uint64_t)v130);
              uint64_t v20 = 74;
              goto LABEL_112;
            }
            break;
          case 'K':
            int v33 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v33 - 164) <= 0x26 && ((1 << (v33 + 92)) & 0x4020000001) != 0)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v33, 0, (uint64_t)v130);
              uint64_t v20 = 75;
              goto LABEL_112;
            }
            break;
          case 'L':
            int v35 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v35 == 197 || v35 == 195)
            {
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
              long long v123 = v18;
              contable((char)v35, 0, (uint64_t)v130);
              uint64_t v20 = 76;
              goto LABEL_112;
            }
            break;
          case 'M':
            BOOL v36 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 161 > 0x2A;
            uint64_t v37 = 1 << (*(unsigned char *)(a1 + 71 * a2 + v18 + 352) + 95);
            uint64_t v38 = 0x40681041401;
            goto LABEL_66;
          case 'N':
            BOOL v36 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 162 > 0x28;
            uint64_t v37 = 1 << (*(unsigned char *)(a1 + 71 * a2 + v18 + 352) + 94);
            uint64_t v38 = 0x1A8006F81C5;
LABEL_66:
            uint64_t v39 = v37 & v38;
            BOOL v40 = v36 || v39 == 0;
            goto LABEL_79;
          case 'O':
            char v41 = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            if ((v41 + 49) < 0xD2u) {
              break;
            }
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 194 <= 5
              && ((1 << (v41 + 62)) & 0x23) != 0)
            {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable(v41, 1, (uint64_t)v130);
            uint64_t v20 = 79;
            goto LABEL_112;
          case 'P':
            BOOL v40 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) - 184 > 0x13
               || ((1 << (*(unsigned char *)(a1 + 71 * a2 + v18 + 352) + 72)) & 0xC2801) == 0;
LABEL_79:
            int8x8_t v13 = (int8x8_t)vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            if (!v40) {
              *(double *)&long long v18 = *(double *)&v13;
            }
            break;
          case 'Q':
            int v43 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v43 - 166) > 7 || ((1 << (v43 + 90)) & 0x91) == 0) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable((char)v43, 0, (uint64_t)v130);
            uint64_t v20 = 81;
            goto LABEL_112;
          case 'R':
            int v45 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v45 - 195) > 4 || ((1 << (v45 + 61)) & 0x15) == 0) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable((char)v45, 0, (uint64_t)v130);
            uint64_t v20 = 82;
            goto LABEL_112;
          case 'S':
            int v47 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if ((v47 - 174) > 0x1B || ((1 << (v47 + 82)) & 0x8000003) == 0) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable((char)v47, 1, (uint64_t)v130);
            uint64_t v20 = 83;
            goto LABEL_112;
          case 'T':
            if ((*(unsigned char *)(a1 + 71 * a2 + v18 + 352) & 0xFC) == 0xE8)
            {
              int8x8_t v13 = (int8x8_t)0x100000001;
              *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            }
            else
            {
              BOOL v23 = psrules[61 * v15 + 60] == 78;
              int v56 = DWORD1(v18);
              if (v23) {
                int v56 = DWORD1(v18) + 1;
              }
              DWORD1(v18) = v56;
            }
            break;
          case 'U':
            unsigned __int8 v49 = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            if ((v49 + 49) < 0xD2u || (v49 | 4) == 0xC7) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable((char)v49, 1, (uint64_t)v130);
            uint64_t v20 = 85;
            goto LABEL_112;
          case 'W':
            int v50 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v50 == 194 || (v50 + 49) < 0xD2u) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable((char)v50, 1, (uint64_t)v130);
            uint64_t v20 = 87;
            goto LABEL_112;
          case 'X':
            char v51 = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            if ((v51 + 95) > 0x2Du) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable(v51, 0, (uint64_t)v130);
            uint64_t v20 = 88;
            goto LABEL_112;
          case 'Y':
            char v52 = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            if ((v52 + 95) > 0x2Du) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable(v52, 1, (uint64_t)v130);
            uint64_t v20 = 89;
            goto LABEL_112;
          case 'Z':
            int v53 = *(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352);
            if (v53 == 199 || (v53 + 49) < 0xD2u) {
              break;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            long long v123 = v18;
            contable((char)v53, 1, (uint64_t)v130);
            uint64_t v20 = 90;
LABEL_112:
            replace((char *)v20, v130, __s);
            long long v18 = v123;
            break;
          case 'a':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 209;
            goto LABEL_123;
          case 'b':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 212;
            goto LABEL_123;
          case 'c':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 213;
            goto LABEL_123;
          case 'd':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 214;
            goto LABEL_123;
          case 'e':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 215;
            goto LABEL_123;
          case 'f':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 216;
            goto LABEL_123;
          case 'g':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 217;
            goto LABEL_123;
          case 'h':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 211;
            goto LABEL_123;
          case 'i':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 231;
            goto LABEL_123;
          case 'j':
            v13.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v18 + 352);
            int32x2_t v54 = (int32x2_t)vand_s8(v13, (int8x8_t)0xFF000000FFLL);
            int v55 = 236;
LABEL_123:
            v14.i32[0] = v55;
            int8x8_t v13 = (int8x8_t)vdup_lane_s32(vceq_s32(v54, (int32x2_t)vand_s8(v14, (int8x8_t)0xFF000000FFLL)), 0);
            *(int8x8_t *)&long long v18 = vbsl_s8(v13, (int8x8_t)vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001), *(int8x8_t *)&v18);
            break;
          default:
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v18 + 352) != v16) {
              return 0xFFFFFFFFLL;
            }
            *(int32x2_t *)&long long v18 = vadd_s32(*(int32x2_t *)&v18, (int32x2_t)0x100000001);
            break;
        }
        uint64_t v15 = *v17;
        unsigned __int8 v16 = psrules[61 * v15 + BYTE4(v18)];
      }
      while (v16);
    }
    unsigned __int8 v129 = 0;
    if (__s[0] == 33) {
      goto LABEL_141;
    }
    uint64_t v62 = __s;
    if (strchr(__s, 39))
    {
      if (strchr(v9, 234) || strchr(v9, 235)) {
        goto LABEL_223;
      }
      int v63 = (unsigned __int8 *)v9;
      do
      {
        char v65 = *v63++;
        char v64 = v65;
      }
      while ((v65 + 49) < 0xD2u);
      unsigned __int8 v66 = v64 + 95;
      if (v66 > 0x2Cu)
      {
        int v68 = 76;
        int v67 = "3";
      }
      else
      {
        int v67 = off_2641095F8[(char)v66];
        int v68 = byte_20D639FD1[(char)v66];
      }
      uint64_t v62 = __s;
      replace((char *)0x2B, v67, __s);
      do
        int v118 = *v62++;
      while (v118 != 39);
    }
    else
    {
      int v68 = 76;
      int v63 = (unsigned __int8 *)v9;
    }
    int v69 = 0;
    int v70 = &v124;
    int v71 = v128;
    unsigned int v72 = __src;
    for (unint64_t i = v62; ; ++i)
    {
      int v74 = *i;
      if ((v74 - 64) <= 0x38 && ((1 << (v74 - 64)) & 0x162822200000001) != 0)
      {
        uint64_t v76 = v70++;
        int v69 = 1;
        goto LABEL_156;
      }
      if (!*i || v74 == 43) {
        break;
      }
      if (v69) {
        uint64_t v76 = v71;
      }
      else {
        uint64_t v76 = v72;
      }
      if (v69) {
        ++v71;
      }
      else {
        ++v72;
      }
      if (!v69) {
        int v69 = 0;
      }
LABEL_156:
      char *v76 = v74;
    }
    *unsigned int v72 = 0;
    *int v71 = 0;
    char *v70 = 0;
    unsigned int v77 = v128[0] - 106;
    BOOL v36 = v77 > 0xD;
    int v78 = (1 << v77) & 0x2019;
    if (v36 || v78 == 0)
    {
      char v86 = 1;
      if (v128[0] || v124 != v125)
      {
LABEL_185:
        unsigned __int8 v129 = 32;
        unsigned __int8 v87 = *v63;
        if (*v63)
        {
          int v88 = 0;
          long long v89 = v63 + 1;
          char v90 = v127;
          long long v91 = v126;
          while ((v87 + 95) > 0x2Du)
          {
            if ((v87 & 0xFC) == 0xE8)
            {
              unsigned __int8 v92 = &v129;
LABEL_198:
              *unsigned __int8 v92 = v87;
            }
            int v93 = *v89++;
            unsigned __int8 v87 = v93;
            if (!v93) {
              goto LABEL_202;
            }
          }
          if (v88) {
            unsigned __int8 v92 = v91;
          }
          else {
            unsigned __int8 v92 = v90;
          }
          if (v88) {
            ++v91;
          }
          else {
            ++v90;
          }
          if (!v88) {
            int v88 = 1;
          }
          goto LABEL_198;
        }
        long long v91 = v126;
        char v90 = v127;
LABEL_202:
        *long long v91 = 0;
        *char v90 = 0;
        if (__src[1] != 104)
        {
          if ((unsigned int v94 = __src[0] - 98, v94 <= 0x12) && ((1 << v94) & 0x44207) != 0 || __src[0] == 35)
          {
            if (v86)
            {
              char v61 = 50;
              switch(v129)
              {
                case 0xE8u:
                case 0xEAu:
                case 0xEBu:
                  goto LABEL_223;
                case 0xE9u:
                  goto LABEL_224;
                default:
                  if (v129 == 32) {
                    goto LABEL_286;
                  }
                  goto LABEL_141;
              }
            }
            else
            {
              char v61 = 49;
              switch(v129)
              {
                case 0xE8u:
                  goto LABEL_224;
                case 0xE9u:
                  goto LABEL_220;
                case 0xEAu:
                  goto LABEL_223;
                case 0xEBu:
                  goto LABEL_284;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_224;
          }
        }
        if (v127[0] - 162 <= 0x29 && ((1 << (v127[0] + 94)) & 0x3C00C104081) != 0)
        {
          if (v86)
          {
            if (v129 <= 0xE9u)
            {
              if (v129 != 32)
              {
                if (v129 == 232) {
                  goto LABEL_223;
                }
                goto LABEL_217;
              }
              goto LABEL_286;
            }
          }
          else if (v129 <= 0xE9u)
          {
            if (v129 == 32)
            {
LABEL_284:
              char v61 = 52;
              goto LABEL_224;
            }
            if (v129 != 232)
            {
LABEL_217:
              if (v129 == 233)
              {
LABEL_220:
                char v61 = 50;
                goto LABEL_224;
              }
              goto LABEL_141;
            }
LABEL_286:
            char v61 = 49;
            goto LABEL_224;
          }
          unsigned int v95 = v129 - 234;
          goto LABEL_222;
        }
        if (v86)
        {
          int v119 = v129;
          if (v124 == v125)
          {
            if (v129 <= 0xE9u)
            {
              if (v129 != 32)
              {
                if (v129 == 232 || v129 == 233) {
                  goto LABEL_223;
                }
LABEL_141:
                char v61 = 48;
                goto LABEL_224;
              }
LABEL_304:
              BOOL v120 = v68 == 77 || v68 == 72;
LABEL_307:
              char v61 = 49;
LABEL_308:
              if (!v120) {
                ++v61;
              }
              goto LABEL_224;
            }
LABEL_299:
            unsigned int v95 = v119 - 234;
LABEL_222:
            if (v95 >= 2) {
              goto LABEL_141;
            }
LABEL_223:
            char v61 = 51;
            goto LABEL_224;
          }
          if (v129 - 233 < 3) {
            goto LABEL_223;
          }
          if (v129 != 32)
          {
            if (v129 != 232) {
              goto LABEL_141;
            }
            BOOL v120 = v68 == 77;
            goto LABEL_307;
          }
          BOOL v121 = v68 == 77 || v68 == 72;
          char v61 = 51;
          char v122 = 49;
        }
        else
        {
          int v119 = v129;
          if (v129 > 0xE9u) {
            goto LABEL_299;
          }
          if (v129 != 32)
          {
            if (v129 != 232)
            {
              if (v129 != 233) {
                goto LABEL_141;
              }
              BOOL v120 = v68 == 72;
              char v61 = 50;
              goto LABEL_308;
            }
            goto LABEL_304;
          }
          BOOL v121 = v68 == 72;
          char v61 = 48;
          char v122 = 52;
        }
        if (v121) {
          char v61 = v122;
        }
LABEL_224:
        v128[0] = v61;
        v128[1] = 0;
        __strcat_chk();
        if (!(*(unsigned __int16 *)__s ^ 0x3021 | v132)) {
          __s[0] = 0;
        }
        __strcpy_chk();
        if (*v9 == 205 && v9[1] == 194 && (char v96 = strchr(v8, 39)) != 0
          || (char v97 = strchr(v8, 104)) != 0
          && ((uint64_t v98 = v97, v99 = *(v97 - 1) - 99, v99 > 0x11) || ((1 << v99) & 0x22101) == 0)
          && (char v96 = strchr(v8, 39), v96 > v98))
        {
          uint64_t v104 = v96 + 1;
LABEL_251:
          size_t v105 = strlen(v104) + 1;
          char v106 = v8;
LABEL_252:
          uint64_t v110 = v104;
LABEL_253:
          memmove(v106, v110, v105);
          return 0;
        }
        uint64_t v100 = strchr(v9, 195);
        if (v100)
        {
          int v101 = *(v100 - 1);
          switch(v101)
          {
            case 202:
LABEL_236:
              if (!strchr(v8, 39))
              {
                uint64_t v111 = strchr(v8, 114);
                if (v111)
                {
                  int v112 = v111;
                  long long v113 = v111 + 1;
                  size_t v105 = strlen(v111 + 1) + 1;
                  char v106 = v112;
                  uint64_t v110 = v113;
                  goto LABEL_253;
                }
              }
              break;
            case 183:
              if (!strchr(v8, 39)
                && (patt_check((unsigned __int8 *)v9, "\xB7\xC3\xC7\xB4") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7\xC3\xC7\xA7") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7ç") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD2\xBA") == 1
                 || patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD2\xC1\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD8\xB4") == 1|| patt_check((unsigned __int8 *)v9, "\xB7\xC3\xD5") == 1))
              {
                unint64_t v114 = strchr(v8, 114);
                if (v114)
                {
                  uint64_t v104 = v114;
                  char *v114 = 115;
                  uint64_t v8 = v114 - 2;
                  goto LABEL_251;
                }
              }
              break;
            case 171:
              goto LABEL_236;
          }
        }
        int v102 = strchr(v8, 43);
        if (!v102 || (unsigned int v103 = v102 + 1, v102[1] != 39))
        {
          int v107 = *v8;
          if (v107 == 116)
          {
            if (v8[1] == 119)
            {
              int v109 = 3236212;
            }
            else
            {
              if (v8[2] != 119) {
                return 0;
              }
              char v134 = 0;
              int v109 = 828467316;
            }
          }
          else
          {
            if (v107 != 115) {
              return 0;
            }
            unsigned int v108 = v8[1] - 108;
            if (v108 > 0xB || ((1 << v108) & 0x841) == 0) {
              return 0;
            }
            int v109 = 3236211;
          }
          *(_DWORD *)__src = v109;
          __strcat_chk();
          strcpy(v8, __src);
          return 0;
        }
        *int v102 = 49;
        uint64_t v104 = v102 + 2;
        size_t v105 = strlen(v102 + 2) + 1;
        char v106 = v103;
        goto LABEL_252;
      }
    }
    if ((patt_check(v63, "\xE0\x58\x54X") == 1 || patt_check(v63, "\xE0\x58\x58TX") == 1)
      && (strchr((char *)v63, 232) || strchr((char *)v63, 233))
      && (int v80 = strchr(v62, 101)) != 0
      || (patt_check(v63, "\xE0\x58\xD4\xE8\x58\xE0\x58\x58\xD4\xE8X") == 1
       || patt_check(v63, "\xE0\x58\x58\xD4\xE8X") == 1)
      && (int v80 = strchr(v62, 113)) != 0
      || (patt_check(v63, "\xE1\x58\xE8X") == 1
       || patt_check(v63, "\xE1\x58\x58\xE8\x58X\xE8\xCD\x58") == 1)
      && (int v80 = strchr(v62, 120)) != 0)
    {
      int v81 = v80;
      uint64_t v82 = v80 + 1;
      size_t v83 = strlen(v80 + 1) + 1;
      int v84 = v81;
      char v85 = v82;
    }
    else
    {
      if (patt_check(v63, "X\xE8\xCD\x58") != 1 && patt_check(v63, "XX\xE8\xCD\x58") != 1) {
        goto LABEL_184;
      }
      unint64_t v115 = strchr(v62, 64);
      if (!v115) {
        goto LABEL_184;
      }
      unint64_t v116 = v115;
      unint64_t v117 = v115 + 1;
      size_t v83 = strlen(v115 + 1) + 1;
      int v84 = v116;
      char v85 = v117;
    }
    memmove(v84, v85, v83);
LABEL_184:
    char v86 = 0;
    goto LABEL_185;
  }
  size_t v11 = strlen((const char *)(v6 + 352));
  if (v11 == 1)
  {
    ReadThaiChar(v7, v8);
    return 1;
  }
  size_t v57 = v11;
  *uint64_t v8 = 0;
  if (!v11) {
    return 1;
  }
  uint64_t v58 = 0;
  do
  {
    if (cchar_dct)
    {
      char v59 = (const char *)&unk_20D62F07D;
      uint64_t v60 = cchar_dct;
      while (*((unsigned __int8 *)v59 - 1) != v9[v58])
      {
        v59 += 51;
        if (!--v60) {
          goto LABEL_137;
        }
      }
      strcat(v8, v59);
    }
LABEL_137:
    ++v58;
    uint64_t result = 1;
  }
  while (v58 != v57);
  return result;
}

char *replace(char *result, const char *a2, char *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*a3)
  {
    if (*a3 == result)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v7 = &a3[v5];
      __strcpy_chk();
      strcpy(v7, a2);
      return strcat(a3, __s2);
    }
    else
    {
      unsigned __int8 v6 = 0;
      while (1)
      {
        uint64_t v5 = ++v6;
        if (!a3[v6]) {
          break;
        }
        if (a3[v6] == result) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t wparserCrf_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplCrf;
  return result;
}

uint64_t wparser_impl_crf_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2350915591;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_crf_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_crf_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  MaxWordLeunint64_t n = 2350915591;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: Begin", v12, v13, v14, v21);
      uint64_t v15 = (void *)heap_Calloc(*(void **)(v22 + 8), 1, 88);
      if (v15)
      {
        unsigned __int8 v16 = v15;
        *uint64_t v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        v15[5] = a1;
        v15[6] = "WPARSER_IMPL_CRF";
        MaxWordLeunint64_t n = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(void *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_crf_ObjClose(uint64_t *a1, int a2)
{
  uint64_t Only_DereferenceCnt = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((Only_DereferenceCnt & 0x80000000) == 0)
  {
    uint64_t v7 = a1[2];
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : Begin", v3, v4, v5, v13);
    uint64_t v8 = a1[10];
    if (!v8)
    {
LABEL_5:
      heap_Free(*(void **)(v7 + 8), (uint64_t)a1);
      log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : End (%x)", v9, v10, v11, Only_DereferenceCnt);
      return Only_DereferenceCnt;
    }
    uint64_t Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1[2], a1[5], v8);
    if ((Only_DereferenceCnt & 0x80000000) == 0)
    {
      a1[10] = 0;
      goto LABEL_5;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t wparser_impl_crf_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLeunint64_t n = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_crf_Init(_WORD **a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v24 = 7549556;
  memset(v27, 0, sizeof(v27));
  uint64_t v23 = 0;
  uint64_t inited = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v24, (uint64_t)a1 + 68);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  a1[7] = a3;
  *((_DWORD *)a1 + 16) = a6;
  uint64_t inited = InitRsrcFunction(*a1, (int)a1[1], &v23);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v10 = v23;
  uint64_t v25 = 0;
  *(void *)int v26 = 0;
  int Str = paramc_ParamGetStr(*(void *)(v23 + 40), (uint64_t)"langcode", v26);
  if (Str < 0
    || (int Str = paramc_ParamGetStr(*(void *)(v10 + 40), (uint64_t)"fecfg", &v25), Str < 0)
    || (int Str = brokeraux_ComposeBrokerString(v10, "wpcrf", 1, 1, *(char **)v26, 0, 0, (char *)v27, 0x80uLL), Str < 0))
  {
    int v21 = Str;
    log_OutText(*(void *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 0, 0, (uint64_t)"Could not assemble broker string for WPCRF model", v12, v13, v14, v22);
    return v21 | 0x8C202000;
  }
  else
  {
    log_OutText(*(void *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"looking for WPCRF model at %s", v12, v13, v14, (uint64_t)v27);
    uint64_t v15 = (uint64_t *)(a1 + 10);
    uint64_t Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(*a1, (uint64_t)a1[1], a1[3], (uint64_t)a1[4], a1 + 10, 2, (uint64_t)v27, (uint64_t)"CRPH", 12341, 48, 0);
    if ((Only_ReferenceCnt & 0x80000000) != 0)
    {
      log_OutText(*(void *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"no CRF PW model found", v16, v17, v18, (uint64_t)v27);
      if (*v15)
      {
        uint64_t Only_ReferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt((uint64_t)a1[2], (uint64_t)a1[5], *v15);
        if ((Only_ReferenceCnt & 0x80000000) == 0) {
          *uint64_t v15 = 0;
        }
      }
    }
  }
  return Only_ReferenceCnt;
}

uint64_t wparser_impl_crf_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    *(unsigned char *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1 || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 56), a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 48);
      int v24 = *(void **)(a1 + 56);
      uint64_t v25 = *(void *)(a1 + 80);
      return DoWPCRF(v22, v23, v24, v25, a3, a5, a6, a7, a8, a12, a15);
    }
  }
  return result;
}

uint64_t wparser_impl_crf_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_crf_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 56);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_crf_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    uint64_t v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  uint64_t v3 = Str;
  int v4 = atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(unsigned char *)(a1 + 72) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoWPCRF(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, uint64_t a11)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  __int16 v87 = 0;
  unsigned int v86 = 0;
  uint64_t v85 = 0;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  *(void *)__s = 0;
  *(_WORD *)(a11 + 8) = 0;
  *(_DWORD *)(a11 + 16) = 1;
  if ((bed_GetpElem(a8, 0xFFFFu, __s) & 0x80000000) == 0)
  {
    if (!a6 || a6 == (unsigned __int16)*(_DWORD *)(*(void *)__s + 36))
    {
      uint64_t v21 = *(void *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a11 + 16) = 0;
      uint64_t v21 = *(void *)(a1 + 32);
    }
    log_OutText(v21, a2, 5, 0, (uint64_t)"[WPCRF] (length for CRF %d - region length in Marker %d %s)", v18, v19, v20, a6);
  }
  uint64_t v82 = a2;
  uint64_t v22 = heap_Calloc(*(void **)(a1 + 8), a6, 8);
  if (v22)
  {
    uint64_t v23 = (void *)v22;
    BOOL v79 = LogLevel > 4;
    uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), a6, 8);
    if (v24)
    {
      uint64_t v84 = heap_Calloc(*(void **)(a1 + 8), a6, 8);
      if (v84)
      {
        uint64_t v77 = a7;
        uint64_t v78 = a8;
        uint64_t v81 = a6;
        if (a6)
        {
          unsigned int v25 = 0;
          LODWORD(v26) = 0;
          while (1)
          {
            char v97 = 0;
            long long v95 = 0u;
            long long v96 = 0u;
            *(_OWORD *)__s = 0u;
            long long v94 = 0u;
            char v92 = 0;
            long long v90 = 0u;
            long long v91 = 0u;
            *(_OWORD *)__src = 0u;
            long long v89 = 0u;
            unsigned int v27 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a5 + v25));
            sysdct_wpcrf_LookUp_Chinese(a3, a5 + v25, v27, __s, __src, (BOOL *)(v24 + 8 * v26));
            if (LogLevel >= 5) {
              log_OutText(*(void *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v28, v29, v30, (uint64_t)__s);
            }
            int v31 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
            *(void *)(v84 + 8 * v26) = v31;
            if (!v31)
            {
LABEL_29:
              uint64_t v34 = 2350915594;
              goto LABEL_78;
            }
            if (__src[0])
            {
              if (!(*(_DWORD *)__src ^ 0x4C4C554E | __src[4]))
              {
                heap_Free(*(void **)(a1 + 8), (uint64_t)v31);
                *(void *)(v84 + 8 * v26) = 0;
                goto LABEL_22;
              }
              strcpy(v31, __src);
            }
            else
            {
              strncpy(v31, (const char *)(a5 + v25), v27);
            }
            size_t v32 = strlen(__s);
            int v33 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v32 + 1);
            v23[v26] = v33;
            if (!v33) {
              goto LABEL_29;
            }
            strcpy(v33, __s);
            LODWORD(v26) = v26 + 1;
LABEL_22:
            v25 += v27;
            if (v25 >= a6) {
              goto LABEL_31;
            }
          }
        }
        LODWORD(v26) = 0;
LABEL_31:
        crf_Process(a4, v23, v26, &v85, &v86);
        uint64_t v40 = v77;
        uint64_t v39 = a8;
        if (v86)
        {
          uint64_t v41 = heap_Calloc(*(void **)(a1 + 8), 64, v86);
          if (!v41)
          {
            uint64_t v34 = 2350915594;
LABEL_78:
            uint64_t v35 = v85;
            unsigned int v36 = v86;
            if (v26)
            {
              uint64_t v70 = 0;
              uint64_t v26 = v26;
              do
              {
                uint64_t v71 = v23[v70];
                if (v71) {
                  heap_Free(*(void **)(a1 + 8), v71);
                }
                ++v70;
              }
              while (v26 != v70);
              heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(void **)(a1 + 8), v24);
              unsigned int v72 = (uint64_t *)v84;
              do
              {
                if (*v72) {
                  heap_Free(*(void **)(a1 + 8), *v72);
                }
                ++v72;
                --v26;
              }
              while (v26);
            }
            else
            {
              heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(void **)(a1 + 8), v24);
            }
            uint64_t v37 = *(void **)(a1 + 8);
            uint64_t v38 = v84;
LABEL_90:
            heap_Free(v37, v38);
            if (!v35) {
              return v34;
            }
            goto LABEL_91;
          }
          int v45 = (char *)v41;
          if (v86)
          {
            unint64_t v46 = 0;
            int v47 = (_DWORD *)v24;
            do
            {
              uint64_t v48 = v85;
              if (LogLevel >= 5)
              {
                log_OutText(*(void *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] Predicted Tag: %s", v42, v43, v44, *(void *)(v85 + 8 * v46));
                uint64_t v48 = v85;
              }
              int v49 = **(unsigned __int8 **)(v48 + 8 * v46);
              if ((v49 == 83 || v49 == 66)
                && *v45
                && (v49 != 83 || *v47 != 1)
                && (v46 && !*(v47 - 2) || strlen(v45) >= 2))
              {
                hlp_updateWord(a9, v45, a10, a1, a11, &v87);
                bzero(v45, v86 << 6);
              }
              int v50 = *(const char **)(v84 + 8 * v46);
              if (v50) {
                strcat(v45, v50);
              }
              ++v46;
              v47 += 2;
            }
            while (v46 < v86);
          }
          if (*v45) {
            hlp_updateWord(a9, v45, a10, a1, a11, &v87);
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v45);
          uint64_t v40 = v77;
          uint64_t v39 = v78;
          if (a6)
          {
            *(void *)__s = 0;
            *(_WORD *)__src = 0;
            if ((bed_GetcElem(a9, __src) & 0x80000000) == 0)
            {
              if (*(_WORD *)__src)
              {
                UTOISubTrace(v79, a1, a9, (uint64_t)"replacement string");
                if (*(_DWORD *)(a11 + 16) == 1 && (bed_GetpElem(a9, 0, __s) & 0x80000000) == 0)
                {
                  unsigned int v57 = *(unsigned __int16 *)__src;
                  if (*(_WORD *)__src)
                  {
                    unint64_t v58 = 0;
                    unsigned int v59 = 0;
                    unsigned __int16 v60 = 1;
                    uint64_t v61 = *(void *)__s;
                    do
                    {
                      if (*(unsigned char *)(v61 + v58) == 16)
                      {
                        uint64_t v62 = *(unsigned __int16 *)(a11 + 8);
                        if (v59 >= v62)
                        {
LABEL_69:
                          uint64_t v66 = v24;
                          log_OutText(*(void *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] cant find non-deleted word to align new word number %d with", v54, v55, v56, v60);
                          int v67 = 0;
                          goto LABEL_70;
                        }
                        uint64_t v63 = v59;
                        char v64 = (int *)(*(void *)a11 + 12 * v59 + 4);
                        while (1)
                        {
                          int v65 = *v64;
                          v64 += 3;
                          if (v65 != 1) {
                            break;
                          }
                          if (v62 == ++v63) {
                            goto LABEL_69;
                          }
                        }
                        *(_WORD *)(*(void *)a11 + 12 * (unsigned __int16)v63 + 8) = v58;
                        ++v60;
                        unsigned int v59 = (unsigned __int16)v63 + 1;
                        unsigned int v57 = *(unsigned __int16 *)__src;
                      }
                      ++v58;
                    }
                    while (v58 < v57);
                  }
                  uint64_t v66 = v24;
                  int v67 = 1;
LABEL_70:
                  if (LogLevel >= 5 && *(_WORD *)(a11 + 8))
                  {
                    uint64_t v68 = 0;
                    unint64_t v69 = 0;
                    do
                    {
                      log_OutText(*(void *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v54, v55, v56, v69++);
                      v68 += 12;
                    }
                    while (v69 < *(unsigned __int16 *)(a11 + 8));
                  }
                  uint64_t v40 = v77;
                  uint64_t v39 = v78;
                  uint64_t v24 = v66;
                  a6 = v81;
                  if (v67) {
                    *(_DWORD *)(a11 + 12) = 0;
                  }
                }
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), v82, 5, 0, (uint64_t)"[WPCRF] deleting region, no replacement text found", v51, v52, v53, v76);
              }
            }
          }
        }
        uint64_t v34 = utoin_IncrReplaceCurrentRegion(v40, v39, a9, a6, (uint64_t *)a11);
        if ((v34 & 0x80000000) == 0) {
          UTOITrace(v79, a1, v40, v39, (uint64_t)"END of DOWPCRF");
        }
        goto LABEL_78;
      }
    }
    uint64_t v34 = 2586845194;
    uint64_t v35 = v85;
    unsigned int v36 = v86;
    heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
    if (v24)
    {
      uint64_t v37 = *(void **)(a1 + 8);
      uint64_t v38 = v24;
      goto LABEL_90;
    }
  }
  else
  {
    uint64_t v34 = 2586845194;
    uint64_t v35 = v85;
    unsigned int v36 = v86;
  }
  if (!v35) {
    return v34;
  }
LABEL_91:
  if (v36)
  {
    uint64_t v73 = v36;
    int v74 = (uint64_t *)v35;
    do
    {
      if (*v74) {
        heap_Free(*(void **)(a1 + 8), *v74);
      }
      ++v74;
      --v73;
    }
    while (v73);
  }
  heap_Free(*(void **)(a1 + 8), v35);
  return v34;
}

size_t hlp_updateWord(uint64_t a1, char *a2, _WORD *a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  if ((bed_Insert(a1, &szWORD_BEG_3, 1) & 0x80000000) == 0)
  {
    ++*a3;
    unsigned __int16 v12 = strlen(a2);
    if ((bed_Insert(a1, a2, v12) & 0x80000000) == 0)
    {
      *a3 += strlen(a2);
      if ((bed_Insert(a1, &szWORD_END_4, 1) & 0x80000000) == 0) {
        ++*a3;
      }
    }
  }
  if (*(_DWORD *)(a5 + 16) == 1)
  {
    __int16 v13 = *a6;
    unsigned int v14 = *(unsigned __int16 *)(a5 + 8);
    uint64_t v15 = *(void *)a5;
    if (v14 < *(unsigned __int16 *)(a5 + 10))
    {
LABEL_9:
      uint64_t v17 = v15 + 12 * v14;
      *(_WORD *)uint64_t v17 = v13;
      *(void *)(v17 + 2) = 0;
      *(_WORD *)(a5 + 8) = v14 + 1;
      goto LABEL_10;
    }
    uint64_t v16 = heap_Realloc(*(uint64_t **)(a4 + 8), v15, 12 * *(unsigned __int16 *)(a5 + 10) + 121);
    if (v16)
    {
      uint64_t v15 = v16;
      *(void *)a5 = v16;
      *(_WORD *)(a5 + 10) += 10;
      unsigned int v14 = *(unsigned __int16 *)(a5 + 8);
      goto LABEL_9;
    }
  }
LABEL_10:
  size_t result = strlen(a2);
  *a6 += result;
  return result;
}

uint64_t wparserDummy_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplDummy;
  return result;
}

uint64_t wparser_impl_dummy_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2350915591;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_dummy_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_dummy_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  MaxWordLeunint64_t n = 2350915591;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: Begin", v12, v13, v14, v21);
      uint64_t v15 = (void *)heap_Calloc(*(void **)(v22 + 8), 1, 80);
      if (v15)
      {
        uint64_t v16 = v15;
        *uint64_t v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        v15[5] = a1;
        v15[6] = "WPARSER_IMPL_DUMMY";
        MaxWordLeunint64_t n = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(void *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dummy_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLeunint64_t n = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_Init(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = 7549556;
  uint64_t v10 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v11, a1 + 68);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 56) = a3;
      *(_DWORD *)(a1 + 64) = a6;
      return InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v10);
    }
  }
  return result;
}

uint64_t wparser_impl_dummy_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    *(unsigned char *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1 || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 56), a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void **)(a1 + 56);
      return DoWPDUMMY(v22, v23, v24, a3, a5, a6, a7, a8, a12, a15);
    }
  }
  return result;
}

uint64_t wparser_impl_dummy_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, unsigned int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_dummy_Latin(uint64_t a1, int a2, uint64_t a3, int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(void **)(a1 + 56);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_dummy_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t DoWPDUMMY(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, uint64_t a10)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  BOOL v72 = LogLevel > 4;
  *(void *)__s = 0;
  *(_WORD *)(a10 + 8) = 0;
  *(_DWORD *)(a10 + 16) = 1;
  if ((bed_GetpElem(a7, 0xFFFFu, __s) & 0x80000000) == 0)
  {
    if (!a5 || a5 == (unsigned __int16)*(_DWORD *)(*(void *)__s + 36))
    {
      uint64_t v22 = *(void *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a10 + 16) = 0;
      uint64_t v22 = *(void *)(a1 + 32);
    }
    log_OutText(v22, a2, 5, 0, (uint64_t)"[WPDUMMY] (length for DUMMY %d - region length in Marker %d %s)", v19, v20, v21, a5);
  }
  uint64_t v73 = a2;
  uint64_t v23 = 2591039498;
  uint64_t v75 = heap_Calloc(*(void **)(a1 + 8), a5, 8);
  if (!v75) {
    return v23;
  }
  uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), a5, 8);
  unsigned int v25 = *(void **)(a1 + 8);
  uint64_t v74 = v24;
  if (!v24)
  {
    uint64_t v61 = v75;
    goto LABEL_71;
  }
  uint64_t v76 = heap_Calloc(v25, a5, 8);
  if (!v76)
  {
    unsigned int v27 = 0;
    goto LABEL_64;
  }
  if (!a5)
  {
    unsigned int v27 = 0;
LABEL_56:
    uint64_t v37 = (uint64_t *)a10;
    goto LABEL_57;
  }
  uint64_t v71 = a8;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  do
  {
    char v86 = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    *(_OWORD *)__s = 0u;
    long long v83 = 0u;
    char v81 = 0;
    long long v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)__src = 0u;
    long long v78 = 0u;
    unsigned int v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a4 + v26));
    sysdct_wpdummy_LookUp_Chinese(a3, a4 + v26, v28, __s, __src, (BOOL *)(v74 + 8 * v27));
    if (LogLevel >= 5) {
      log_OutText(*(void *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v29, v30, v31, (uint64_t)__s);
    }
    size_t v32 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *(void *)(v76 + 8 * v27) = v32;
    if (!v32)
    {
LABEL_54:
      uint64_t v23 = 2350915594;
      goto LABEL_59;
    }
    if (__src[0])
    {
      if (!(*(_DWORD *)__src ^ 0x4C4C554E | __src[4]))
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v32);
        *(void *)(v76 + 8 * v27) = 0;
        goto LABEL_22;
      }
      strcpy(v32, __src);
    }
    else
    {
      strncpy(v32, (const char *)(a4 + v26), v28);
    }
    size_t v33 = strlen(__s);
    uint64_t v34 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v33 + 1);
    *(void *)(v75 + 8 * v27) = v34;
    if (!v34) {
      goto LABEL_54;
    }
    strcpy(v34, __s);
    ++v27;
LABEL_22:
    v26 += v28;
  }
  while (v26 < a5);
  a8 = v71;
  if (!v27) {
    goto LABEL_56;
  }
  uint64_t v35 = v27;
  uint64_t v36 = heap_Calloc(*(void **)(a1 + 8), 64, v27);
  uint64_t v37 = (uint64_t *)a10;
  if (!v36)
  {
    uint64_t v23 = 2350915594;
    goto LABEL_60;
  }
  uint64_t v38 = (char *)v36;
  uint64_t v39 = (const char **)v76;
  do
  {
    uint64_t v40 = *v39++;
    strcat(v38, v40);
    --v35;
  }
  while (v35);
  a8 = v71;
  if (*v38)
  {
    if ((bed_Insert(v71, &szWORD_BEG_4, 1) & 0x80000000) == 0)
    {
      ++*a9;
      unsigned __int16 v41 = strlen(v38);
      if ((bed_Insert(v71, v38, v41) & 0x80000000) == 0)
      {
        *a9 += strlen(v38);
        if ((bed_Insert(v71, &szWORD_END_5, 1) & 0x80000000) == 0) {
          ++*a9;
        }
      }
    }
    if (*(_DWORD *)(a10 + 16) == 1)
    {
      unsigned int v42 = *(unsigned __int16 *)(a10 + 8);
      uint64_t v43 = *(void *)a10;
      if (v42 < *(unsigned __int16 *)(a10 + 10)) {
        goto LABEL_36;
      }
      uint64_t v44 = heap_Realloc(*(uint64_t **)(a1 + 8), v43, 12 * *(unsigned __int16 *)(a10 + 10) + 121);
      if (v44)
      {
        uint64_t v43 = v44;
        *(void *)a10 = v44;
        *(_WORD *)(a10 + 10) += 10;
        unsigned int v42 = *(unsigned __int16 *)(a10 + 8);
LABEL_36:
        uint64_t v45 = v43 + 12 * v42;
        *(_WORD *)uint64_t v45 = 0;
        *(void *)(v45 + 2) = 0;
        *(_WORD *)(a10 + 8) = v42 + 1;
      }
    }
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v38);
  *(void *)__s = 0;
  *(_WORD *)__src = 0;
  if ((bed_GetcElem(v71, __src) & 0x80000000) == 0)
  {
    if (*(_WORD *)__src)
    {
      UTOISubTrace(v72, a1, v71, (uint64_t)"replacement string");
      if (*(_DWORD *)(a10 + 16) == 1 && (bed_GetpElem(v71, 0, __s) & 0x80000000) == 0)
      {
        unsigned int v52 = *(unsigned __int16 *)__src;
        if (*(_WORD *)__src)
        {
          unint64_t v53 = 0;
          unsigned int v54 = 0;
          unsigned __int16 v55 = 1;
          uint64_t v56 = *(void *)__s;
          do
          {
            if (*(unsigned char *)(v56 + v53) == 16)
            {
              uint64_t v57 = *(unsigned __int16 *)(a10 + 8);
              if (v54 >= v57)
              {
LABEL_76:
                log_OutText(*(void *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPDUMMY] cant find non-deleted word to align new word number %d with", v49, v50, v51, v55);
                int v70 = 0;
                goto LABEL_77;
              }
              uint64_t v58 = v54;
              unsigned int v59 = (int *)(*(void *)a10 + 12 * v54 + 4);
              while (1)
              {
                int v60 = *v59;
                v59 += 3;
                if (v60 != 1) {
                  break;
                }
                if (v57 == ++v58) {
                  goto LABEL_76;
                }
              }
              *(_WORD *)(*(void *)a10 + 12 * (unsigned __int16)v58 + 8) = v53;
              ++v55;
              unsigned int v54 = (unsigned __int16)v58 + 1;
              unsigned int v52 = *(unsigned __int16 *)__src;
            }
            ++v53;
          }
          while (v53 < v52);
        }
        int v70 = 1;
LABEL_77:
        if (LogLevel >= 5 && *(_WORD *)(a10 + 8))
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          do
          {
            log_OutText(*(void *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPDUMMY] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v49, v50, v51, v68++);
            v67 += 12;
          }
          while (v68 < *(unsigned __int16 *)(a10 + 8));
        }
        a8 = v71;
        if (v70) {
          *(_DWORD *)(a10 + 12) = 0;
        }
      }
    }
    else
    {
      log_OutText(*(void *)(a1 + 32), v73, 5, 0, (uint64_t)"[WPDUMMY] deleting region, no replacement text found", v46, v47, v48, v69);
    }
  }
LABEL_57:
  uint64_t v23 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, a5, v37);
  if ((v23 & 0x80000000) == 0) {
    UTOITrace(v72, a1, a6, a7, (uint64_t)"END of DOWPDUMMY");
  }
LABEL_59:
  if (v27)
  {
LABEL_60:
    uint64_t v62 = v27;
    uint64_t v63 = (uint64_t *)v75;
    do
    {
      if (*v63) {
        heap_Free(*(void **)(a1 + 8), *v63);
      }
      ++v63;
      --v62;
    }
    while (v62);
  }
LABEL_64:
  heap_Free(*(void **)(a1 + 8), v75);
  heap_Free(*(void **)(a1 + 8), v74);
  if (v76)
  {
    if (v27)
    {
      uint64_t v64 = v27;
      int v65 = (uint64_t *)v76;
      do
      {
        if (*v65) {
          heap_Free(*(void **)(a1 + 8), *v65);
        }
        ++v65;
        --v64;
      }
      while (v64);
    }
    unsigned int v25 = *(void **)(a1 + 8);
    uint64_t v61 = v76;
LABEL_71:
    heap_Free(v25, v61);
  }
  return v23;
}

uint64_t get_char_kind_hash(unsigned int a1, int a2)
{
  unsigned int v2 = a2 + a1;
  if (a2 == 131) {
    unsigned int v2 = 3;
  }
  if (a1 == 130) {
    unsigned int v2 = a2 | 0x100;
  }
  if (!a2) {
    unsigned int v2 = a1;
  }
  int v3 = Char_kind_hash_table[v2];
  if (v3 == 0xFFFF) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v4 = (__int16)v3;
    uint64_t v5 = (&Char_kind)[2 * (__int16)v3];
    if (*v5 == a1 && v5[1] == a2) {
      break;
    }
    int v3 = *((unsigned __int16 *)&Char_kind + 8 * v4 + 5);
    if (v3 == 0xFFFF) {
      return 0xFFFFFFFFLL;
    }
  }
  return SLOWORD((&Char_kind)[2 * v4 + 1]);
}

unsigned __int8 *get_pron_from_grapheme_hash(unsigned __int8 *result, char *a2, int *a3, _DWORD *a4, int a5)
{
  if (result[1]) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  *a3 = v5;
  while (2)
  {
    *a4 = 0;
    int v6 = *result;
    int v7 = *a3;
    if (*a3 == 2 && (int v8 = result[1]) != 0)
    {
      unsigned int v9 = v8 + v6;
      if (v8 == 131) {
        unsigned int v9 = 3;
      }
      if (v6 == 130) {
        unsigned int v9 = v8 | 0x100;
      }
    }
    else
    {
      int v8 = 0;
      unsigned int v9 = *result;
    }
    for (int i = Char_pron_hash_table[v9]; i != 0xFFFF; int i = *((unsigned __int16 *)&Char_pron + 12 * (__int16)i + 9))
    {
      int v11 = (&Char_pron)[3 * (__int16)i];
      if (*v11 == v6
        && v11[1] == v8
        && SLOWORD((&Char_pron)[3 * (__int16)i + 2]) == a5)
      {
        uint64_t v14 = (&Char_pron)[3 * (__int16)i + 1];
        char v15 = *v14;
        if (*v14)
        {
          uint64_t v16 = (unsigned __int8 *)(v14 + 1);
          do
          {
            *a2++ = v15;
            ++*a4;
            int v17 = *v16++;
            char v15 = v17;
          }
          while (v17);
        }
        *a2 = 0;
        return result;
      }
    }
    BOOL v12 = __OFSUB__(v7, 1);
    int v13 = v7 - 1;
    *a3 = v13;
    if (!((v13 < 0) ^ v12 | (v13 == 0))) {
      continue;
    }
    break;
  }
  *a3 = 0;
  *a4 = 0;
  return result;
}

uint64_t get_name_of_symbol(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 < 0 || a1[2] <= a3) {
    return 0;
  }
  virtual_fseek(*a1, a2, a1[1] + 32 * a3, 0);
  uint64_t v7 = 0;
  while (1)
  {
    char v8 = virtual_getc((void *)*a1, a2);
    *(unsigned char *)(a4 + v7) = v8;
    if (!v8) {
      break;
    }
    if (++v7 == 32) {
      return 0;
    }
  }
  return a4;
}

uint64_t get_pointer_of_symbol(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || *(void *)(a1 + 16) <= a2) {
    return 0;
  }
  else {
    return **(void **)a1 + *(void *)(a1 + 8) + 32 * a2;
  }
}

uint64_t get_number_of_symbol(uint64_t **a1, char *__s1)
{
  uint64_t v4 = a1[1];
  int v3 = a1[2];
  uint64_t v5 = **a1;
  int v6 = strcmp(__s1, (const char *)v4 + v5);
  if (!v6) {
    return 0;
  }
  if (v6 < 0) {
    return -1;
  }
  uint64_t v7 = (uint64_t)v3 - 1;
  int v8 = strcmp(__s1, (const char *)&v4[4 * v7] + v5);
  if (!v8) {
    return v7;
  }
  if (v8 > 0 || v7 == 1) {
    return -1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v7;
  while (1)
  {
    uint64_t v12 = v7 >= 0 ? v7 : v7 + 1;
    uint64_t v7 = v10 + (v12 >> 1);
    int v13 = strcmp(__s1, (const char *)&v4[4 * v7] + v5);
    if (!v13) {
      break;
    }
    if (v13 < 0) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v10 = v7;
    }
    uint64_t v7 = v11 - v10;
    if (v11 - v10 == 1) {
      return -1;
    }
  }
  return v7;
}

uint64_t log_output_cost(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = ssftstring_AppendCStr(a1, "[");
  if ((result & 0x80000000) == 0)
  {
    strcpy(__s, "f^=\"");
    LH_itoa(*(_DWORD *)(a2 + 56), v5, 0xAu);
    __strcat_chk();
    __strcat_chk();
    LH_itoa(*(_DWORD *)(a2 + 64), v5, 0xAu);
    __strcat_chk();
    __strcat_chk();
    uint64_t result = ssftstring_AppendCStr(a1, __s);
    if ((result & 0x80000000) == 0) {
      return ssftstring_AppendCStr(a1, "]");
    }
  }
  return result;
}

uint64_t log_output_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t *a12)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v19 = ssftstring_Clear(a3);
  if ((v19 & 0x80000000) == 0 && get_name_of_symbol(SF_symbol_file, a12, *(void *)a4, (uint64_t)v50))
  {
    int v20 = *(_DWORD *)(a4 + 32);
    if (v20)
    {
      if (v20 == 1)
      {
        if (!a5 || v50[0] != 95)
        {
          strcpy(__s, "<");
          __strcat_chk();
          if (a5 != 1)
          {
            __strcat_chk();
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            __strcat_chk();
          }
          __strcat_chk();
          uint64_t appended = ssftstring_AppendCStr(a3, __s);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          if (a11 == 1)
          {
            strcpy(__s, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            __strcat_chk();
            __strcat_chk();
            uint64_t appended = ssftstring_AppendCStr(a3, __s);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a6 == 1)
          {
            uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24));
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a7 == 1)
          {
            uint64_t appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
        }
        uint64_t v37 = *(void *)(a1 + 32);
        uint64_t v38 = ssftstring_CStr(a3);
        log_OutText(v37, a2, 5, 0, (uint64_t)"[A*] %s", v39, v40, v41, v38);
        uint64_t appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t v27 = *(void *)(a4 + 48);
        uint64_t v28 = a1;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = a5;
      }
      else
      {
        if (v20 != 2)
        {
LABEL_58:
          uint64_t v42 = *(void *)(a1 + 32);
          uint64_t v43 = ssftstring_CStr(a3);
          log_OutText(v42, a2, 5, 0, (uint64_t)"[A*] %s", v44, v45, v46, v43);
          return ssftstring_Clear(a3);
        }
        if (!a5 || v50[0] != 95)
        {
          strcpy(__s, "<");
          __strcat_chk();
          if (a5 != 1)
          {
            __strcat_chk();
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            __strcat_chk();
          }
          __strcat_chk();
          uint64_t appended = ssftstring_AppendCStr(a3, __s);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          if (a11 == 1)
          {
            strcpy(__s, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            __strcat_chk();
            __strcat_chk();
            uint64_t appended = ssftstring_AppendCStr(a3, __s);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a6 == 1)
          {
            uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24));
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a7 == 1)
          {
            uint64_t appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
        }
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = ssftstring_CStr(a3);
        log_OutText(v21, a2, 5, 0, (uint64_t)"[A*] %s", v23, v24, v25, v22);
        uint64_t appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t appended = log_output_tree(a1, a2, a3, *(void *)(a4 + 40), a5);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t v27 = *(void *)(a4 + 48);
        uint64_t v28 = a1;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = a5;
      }
      uint64_t appended = log_output_tree(v28, v29, v30, v27, v31);
      if ((appended & 0x80000000) == 0) {
        goto LABEL_58;
      }
    }
    else
    {
      strcpy(__s, "<");
      __strcat_chk();
      if (a5 != 1)
      {
        __strcat_chk();
        LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
        __strcat_chk();
      }
      __strcat_chk();
      uint64_t appended = ssftstring_AppendCStr(a3, __s);
      if ((appended & 0x80000000) == 0)
      {
        if (a11 != 1 {
          || (strcpy(__s, "("),
        }
              LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu),
              __strcat_chk(),
              __strcat_chk(),
              uint64_t appended = ssftstring_AppendCStr(a3, __s),
              (appended & 0x80000000) == 0))
        {
          if (a6 != 1 || (uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24)), (appended & 0x80000000) == 0))
          {
            if (a7 != 1 || (uint64_t appended = log_output_cost(a3, a4), (appended & 0x80000000) == 0))
            {
              uint64_t appended = ssftstring_AppendCStr(a3, "(");
              if ((appended & 0x80000000) == 0)
              {
                uint64_t v32 = *(void *)(a4 + 48);
                if (v32)
                {
                  char v33 = 0;
                  do
                  {
                    if (v33)
                    {
                      uint64_t appended = ssftstring_AppendCStr(a3, ",");
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    uint64_t appended = ssftstring_AppendCStr(a3, *(char **)v32);
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t appended = ssftstring_AppendCStr(a3, ":\"");
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t appended = log_mbs_fput_sjis(a3, *(int **)(v32 + 8));
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t appended = ssftstring_AppendCStr(a3, "\"");
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t v32 = *(void *)(v32 + 16);
                    char v33 = 1;
                  }
                  while (v32);
                }
                uint64_t appended = ssftstring_AppendCStr(a3, ")");
                if ((appended & 0x80000000) == 0)
                {
                  uint64_t v34 = *(void *)(a4 + 48);
                  while (1)
                  {
                    uint64_t v34 = *(void *)(v34 + 24);
                    if (!v34) {
                      goto LABEL_58;
                    }
                    strcpy(__s, "<");
                    __strcat_chk();
                    if (a5 != 1)
                    {
                      __strcat_chk();
                      LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
                      __strcat_chk();
                    }
                    __strcat_chk();
                    uint64_t appended = ssftstring_AppendCStr(a3, __s);
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    if (a11 == 1)
                    {
                      strcpy(__s, "(");
                      LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
                      __strcat_chk();
                      __strcat_chk();
                      uint64_t appended = ssftstring_AppendCStr(a3, __s);
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    if (a6 == 1)
                    {
                      uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24));
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    if (a7 == 1)
                    {
                      uint64_t appended = log_output_cost(a3, a4);
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    uint64_t v35 = *(void *)(a4 + 48);
                    if (v35)
                    {
                      char v36 = 0;
                      do
                      {
                        if (v36)
                        {
                          uint64_t appended = ssftstring_AppendCStr(a3, ",");
                          if ((appended & 0x80000000) != 0) {
                            return appended;
                          }
                        }
                        uint64_t appended = ssftstring_AppendCStr(a3, *(char **)v35);
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t appended = ssftstring_AppendCStr(a3, ":\"");
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t appended = log_mbs_fput_sjis(a3, *(int **)(v35 + 8));
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t appended = ssftstring_AppendCStr(a3, "\"");
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t v35 = *(void *)(v35 + 16);
                        char v36 = 1;
                      }
                      while (v35);
                    }
                    uint64_t v19 = ssftstring_AppendCStr(a3, ")");
                    if ((v19 & 0x80000000) != 0) {
                      return v19;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return appended;
  }
  return v19;
}

uint64_t add_unit_product(void *a1, int a2, _DWORD *a3, int a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, void *a11)
{
  uint64_t leading_tree = cyk_hash_get_leading_tree(a1, a4, a5);
  uint64_t v18 = 1;
  if (leading_tree)
  {
    uint64_t v19 = (void *)leading_tree;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v41 = 0;
    if (a4) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = a2 - 1 == a5;
    }
    int v21 = v20;
    int v39 = v21;
    while (1)
    {
      *((void *)&v42 + 1) = -1;
      *(void *)&long long v43 = *v19;
      uint64_t v41 = &v42;
      uint64_t grammar_right = find_grammar_right((uint64_t *)&v41);
      if (grammar_right != -1) {
        break;
      }
LABEL_31:
      uint64_t v19 = (void *)v19[11];
      if (!v19) {
        return 1;
      }
    }
    uint64_t next_grammar_right = grammar_right - 1;
    char v36 = v19;
    while (1)
    {
      uint64_t v23 = heap_Alloc((uint64_t)a11, 96);
      if (!v23) {
        return 0;
      }
      uint64_t v24 = (uint64_t *)v23;
      uint64_t v25 = (uint64_t)v41;
      *(void *)uint64_t v23 = *(void *)v41;
      *(void *)(v23 + 24) = 0;
      *(_DWORD *)(v23 + 32) = 1;
      *(void *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = v19;
      *(void *)(v23 + 88) = 0;
      *(void *)(v23 + 8) = -1;
      *(_DWORD *)(v23 + 16) = *(void *)(v25 + 32);
      uint64_t v26 = *(void *)(v25 + 72);
      if ((v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(void *)*(&AC_pac + v26), v23) == 1)
        && (*(_DWORD *)(a6 + 32) != 1 || is_internal(*v24) == 1 || *v24 == a8))
      {
        uint64_t v27 = cyk_hash_get_leading_tree(a1, a4, a5);
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            uint64_t v27 = *(void *)(v27 + 88);
          }
          while (v27);
          *(void *)(v28 + 88) = v24;
        }
        else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v24, a4, a5, (uint64_t)a11) & 0x1FFF) == 0xA)
        {
          return 0;
        }
        uint64_t v29 = (uint64_t)v41;
        if (v39 && *(void *)v41 == a8)
        {
          uint64_t v30 = a8;
          uint64_t v31 = *a7;
          uint64_t v32 = tree_duplicate((uint64_t)v24, a6, a10, a11);
          uint64_t v33 = v31;
          a8 = v30;
          *a7 = tree_append(v33, (uint64_t)v32);
          uint64_t v19 = v36;
          ++*a3;
          uint64_t v29 = (uint64_t)v41;
        }
        uint64_t v34 = *(void *)(v29 + 72);
        if (v34 != -1
          && !*(_DWORD *)(a6 + 44)
          && !exec_actions(*((void *)*(&AC_pac + v34) + 1), (uint64_t)v24, (uint64_t)a11))
        {
          return 0;
        }
      }
      else
      {
        heap_Free(a11, (uint64_t)v24);
      }
      uint64_t next_grammar_right = find_next_grammar_right(&v41, grammar_right, next_grammar_right);
      if (next_grammar_right == -1) {
        goto LABEL_31;
      }
    }
  }
  return v18;
}

uint64_t check_left_upper(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, void *a11)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  int v13 = a4;
  uint64_t v14 = a3;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  unint64_t v53 = 0;
  int v16 = ~a4;
  int v45 = a2 - 1;
  int v42 = ~a4;
  do
  {
    int v17 = v13 + v16;
    if (v13 + v16 >= 0)
    {
      int v44 = v14 + 1;
      if (v14) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v13 == v45;
      }
      int v19 = v18;
      int v50 = v19;
      int v47 = v13;
      do
      {
        int v46 = v17;
        uint64_t leading_tree = (void *)cyk_hash_get_leading_tree(a1, v14, v17);
        if (leading_tree)
        {
          int v20 = v44 + v46;
          int v21 = v13 + ~v46;
          int v41 = v21;
          while (2)
          {
            uint64_t v22 = cyk_hash_get_leading_tree(a1, v20, v21);
            if (v22)
            {
              uint64_t v23 = (void *)v22;
              do
              {
                *((void *)&v54 + 1) = *leading_tree;
                *(void *)&long long v55 = *v23;
                unint64_t v53 = &v54;
                uint64_t grammar_right = find_grammar_right((uint64_t *)&v53);
                if (grammar_right != -1)
                {
                  uint64_t next_grammar_right = grammar_right - 1;
                  do
                  {
                    uint64_t result = heap_Alloc((uint64_t)a11, 96);
                    if (!result) {
                      return result;
                    }
                    uint64_t v26 = (uint64_t *)result;
                    uint64_t v27 = (uint64_t)v53;
                    *(void *)uint64_t result = *(void *)v53;
                    *(_DWORD *)(result + 8) = -1;
                    *(void *)(result + 24) = 0;
                    *(_DWORD *)(result + 32) = 2;
                    *(void *)(result + 40) = leading_tree;
                    *(void *)(result + 48) = v23;
                    *(void *)(result + 88) = 0;
                    *(int32x2_t *)(result + 12) = vmovn_s64(*(int64x2_t *)(v27 + 24));
                    uint64_t v28 = *(void *)(v27 + 72);
                    if ((v28 == -1 || eval_cond(*(void *)*(&AC_pac + v28), result) == 1)
                      && (*(_DWORD *)(a5 + 32) != 1 || is_internal(*v26) == 1 || *v26 == a8))
                    {
                      uint64_t v29 = cyk_hash_get_leading_tree(a1, v14, v13);
                      if (v29)
                      {
                        do
                        {
                          uint64_t v30 = v29;
                          uint64_t v29 = *(void *)(v29 + 88);
                        }
                        while (v29);
                        *(void *)(v30 + 88) = v26;
                      }
                      else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v26, v14, v13, (uint64_t)a11) & 0x1FFF) == 0xA)
                      {
                        return 0;
                      }
                      uint64_t v31 = (uint64_t)v53;
                      if (v50 && *(void *)v53 == a8)
                      {
                        uint64_t v32 = a1;
                        uint64_t v33 = v14;
                        uint64_t v34 = a8;
                        uint64_t v35 = *a7;
                        char v36 = tree_duplicate((uint64_t)v26, a5, a10, a11);
                        uint64_t v37 = v35;
                        a8 = v34;
                        uint64_t v14 = v33;
                        a1 = v32;
                        *a7 = tree_append(v37, (uint64_t)v36);
                        int v13 = v47;
                        ++*a6;
                        uint64_t v31 = (uint64_t)v53;
                      }
                      uint64_t v38 = *(void *)(v31 + 72);
                      if (v38 != -1)
                      {
                        uint64_t result = exec_actions(*((void *)*(&AC_pac + v38) + 1), (uint64_t)v26, (uint64_t)a11);
                        if (!result) {
                          return result;
                        }
                      }
                    }
                    else
                    {
                      heap_Free(a11, (uint64_t)v26);
                    }
                    uint64_t next_grammar_right = find_next_grammar_right(&v53, grammar_right, next_grammar_right);
                  }
                  while (next_grammar_right != -1);
                }
                uint64_t v23 = (void *)v23[11];
              }
              while (v23);
              uint64_t leading_tree = (void *)leading_tree[11];
              int v21 = v41;
              int v20 = v44 + v46;
              if (leading_tree) {
                continue;
              }
            }
            break;
          }
        }
        int v17 = v46 - 1;
      }
      while (v46 > 0);
    }
    uint64_t result = add_unit_product(a1, a2, a6, v14, v13, a5, a7, a8, v40, a10, a11);
    if (!result) {
      break;
    }
    ++v13;
    uint64_t result = 1;
    BOOL v39 = (int)v14 <= 0;
    uint64_t v14 = (v14 - 1);
    int v16 = v42;
  }
  while (!v39);
  return result;
}

uint64_t fill_up_table(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8, void *a9)
{
  uint64_t result = 0;
  unsigned int v18 = 0;
  if ((int)a2 < a3)
  {
    uint64_t v16 = a2;
    while (1)
    {
      uint64_t result = check_left_upper(a1, a3, v16, 0, a4, &v18, a5, a6, v17, a8, a9);
      if (!result) {
        break;
      }
      uint64_t v16 = (v16 + 1);
      if (a3 == v16) {
        return v18;
      }
    }
  }
  return result;
}

uint64_t parse_cyk(uint64_t a1, void *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  uint64_t v10 = 0;
  int v8 = fill_up_table(a2, 0, a3, a1, &v10, a4, (uint64_t)a7, a6, a7);
  uint64_t result = parser_result_create(1, v10, (uint64_t)a7);
  *(void *)(result + 16) = v8;
  return result;
}

double partial_tree_create_as_step(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13 = heap_Alloc(a7, 96);
  if (v13)
  {
    *(void *)uint64_t v13 = a5;
    *(void *)(v13 + 24) = 0;
    if (a3) {
      int v15 = 2;
    }
    else {
      int v15 = 1;
    }
    *(_DWORD *)(v13 + 32) = v15;
    double result = NAN;
    *(void *)(v13 + 8) = -1;
    *(void *)(v13 + 40) = a3;
    *(void *)(v13 + 48) = a4;
    *(void *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 16) = -1;
    *(_DWORD *)(v13 + 72) = a1;
    *(_DWORD *)(v13 + 76) = a2;
    *(_DWORD *)(v13 + 80) = a6;
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  return result;
}

uint64_t connect_terminals(int *a1, int a2, int a3, void *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a2 >= a5) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v43 = a3;
  uint64_t v16 = a3 - 1;
  int v17 = a2;
  int v41 = a5;
  do
  {
    int v18 = ~v17 + a5;
    if (v18 < 0) {
      goto LABEL_28;
    }
    while (1)
    {
      uint64_t leading_tree = cyk_hash_get_leading_tree(a4, v17, v18);
      if (leading_tree) {
        break;
      }
LABEL_15:
      if (v18-- <= 0)
      {
        int v18 = -1;
        goto LABEL_24;
      }
    }
    uint64_t v20 = leading_tree;
    uint64_t v21 = *(void *)(a8 + 8 * v43);
    while (1)
    {
      uint64_t v22 = *(void *)v20;
      if (*(void *)v20 == a7 || v22 == v21)
      {
        int v33 = v17 + ~a2;
        goto LABEL_32;
      }
      if (!a3) {
        break;
      }
      if (*(void *)(a8 + 8 * v16) == v22) {
        goto LABEL_18;
      }
LABEL_14:
      uint64_t v20 = *(void *)(v20 + 88);
      if (!v20) {
        goto LABEL_15;
      }
    }
    if (*(_DWORD *)(v20 + 32)) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v25 = *(void *)(a9 + 8 * v43);
    if (v15)
    {
      int v26 = v17 - a2 + 1 + v18;
      partial_tree_create_as_step(a2, v26, v15, v20, v25, a3, (uint64_t)a10);
      if (!v27) {
        return 0;
      }
      uint64_t v15 = v27;
      int v28 = add_partial_tree_checking_FI(a4, v27, a2, v26, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      __int16 v38 = v28;
      heap_Free(a10, v15);
      uint64_t v15 = 0;
      uint64_t v31 = 0;
      BOOL v32 = (v38 & 0x1FFF) == 10;
LABEL_27:
      a5 = v41;
      if (v32) {
        return v31;
      }
    }
    else
    {
      partial_tree_create_as_step(a2, v18, 0, v20, v25, a3, (uint64_t)a10);
      if (!v29) {
        return 0;
      }
      uint64_t v15 = v29;
      int v30 = add_partial_tree_checking_FI(a4, v29, a2, v18, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if (v30 < 0)
      {
        __int16 v40 = v30;
        heap_Free(a10, v15);
        uint64_t v15 = 0;
        uint64_t v31 = 0;
        BOOL v32 = (v40 & 0x1FFF) == 10;
        goto LABEL_27;
      }
LABEL_24:
      a5 = v41;
    }
LABEL_28:
    v17 += v18 + 1;
  }
  while (v17 < a5);
  int v33 = v17 + ~a2;
  uint64_t v21 = *(void *)(a8 + 8 * v43);
LABEL_32:
  partial_tree_create_as_step(a2, v33, 0, v15, v21, a3 + 1, (uint64_t)a10);
  uint64_t v31 = v34;
  if (v34)
  {
    int v35 = add_partial_tree_checking_FI(a4, v34, a2, v33, *(_DWORD *)(a6 + 52), (uint64_t)a10);
    if ((v35 & 0x80000000) == 0 || (v36 = v35, heap_Free(a10, v31), uint64_t v31 = 0, (v36 & 0x1FFF) != 0xA)) {
      *a1 = v17;
    }
  }
  return v31;
}

uint64_t max_len_parse(int a1, int a2, void *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, void *a12, void *a13)
{
  uint64_t v21 = 0;
  int v41 = a1;
  int v42 = 0;
  *a13 = 0;
  if (a1 == 1)
  {
    uint64_t v21 = jp_tree_create(*(void *)(a10 + 8 * a2), (const char *)(a5 + ((uint64_t)a2 << 6) + 976), 0, 0, 0, 0, a12);
    if (!v21) {
      return 2350915840;
    }
  }
  int v37 = a2;
  __int16 v38 = v21;
  uint64_t v39 = a5;
  if (a4 >= 1)
  {
    int v22 = 0;
    int v40 = v37 + 1;
    do
    {
      int v23 = ~v22 + a4;
      if (v23 < 0)
      {
LABEL_15:
        uint64_t v28 = connect_terminals(&v42, v22, v37, a3, a4, v39, a7, a8, a9, a12);
        if (!v28) {
          goto LABEL_33;
        }
        uint64_t v29 = v28;
        *(_DWORD *)(v28 + 80) = v40;
        *(void *)(a6 + 8) = as_list_insert(v28, *(void **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          int v30 = tree_duplicate(v29, v39, a11, a12);
          if (!v30) {
            goto LABEL_33;
          }
          uint64_t v31 = (uint64_t)v30;
          uint64_t v32 = v38[4];
          if (v32)
          {
            if (!tree_append(v32, v31)) {
              goto LABEL_33;
            }
          }
          else
          {
            v38[4] = v31;
          }
        }
        int v22 = v42;
      }
      else
      {
        while (1)
        {
          uint64_t leading_tree = cyk_hash_get_leading_tree(a3, v22, v23);
          if (leading_tree) {
            break;
          }
LABEL_13:
          if (v23-- <= 0) {
            goto LABEL_15;
          }
        }
        uint64_t v25 = leading_tree;
        while (*(void *)v25 != a7 && *(void *)v25 != *(void *)(a8 + 8 * v37))
        {
          uint64_t v25 = *(void *)(v25 + 88);
          if (!v25) {
            goto LABEL_13;
          }
        }
        *(_DWORD *)(v25 + 80) = v40;
        *(void *)(a6 + 8) = as_list_insert(v25, *(void **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          int v33 = tree_duplicate(v25, v39, a11, a12);
          if (!v33 && *(void *)v25 != a7)
          {
LABEL_33:
            uint64_t v35 = 2350915840;
            jpe_FreeTree(v38, a12);
            return v35;
          }
          uint64_t v34 = v38[4];
          if (v34)
          {
            if (!tree_append(v34, (uint64_t)v33)) {
              goto LABEL_33;
            }
          }
          else
          {
            v38[4] = v33;
          }
        }
        v22 += v23 + 1;
      }
    }
    while (v22 < a4);
  }
  uint64_t v35 = 0;
  *a13 = v38;
  return v35;
}

void *as_list_insert(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    if (*(void *)(a1 + 56) <= *(void *)(*a2 + 56)) {
      a2[1] = as_list_insert(a1, a2[1]);
    }
    else {
      a2[2] = as_list_insert(a1, a2[2]);
    }
  }
  else
  {
    uint64_t v5 = (void *)heap_Alloc(a3, 24);
    uint64_t v4 = v5;
    if (v5)
    {
      v5[1] = 0;
      v5[2] = 0;
      *uint64_t v5 = a1;
    }
  }
  return v4;
}

uint64_t get_word_cost(uint64_t a1, void *a2)
{
  if (!a1) {
    return -1;
  }
  uint64_t v3 = a1;
  while (strcmp(*(const char **)v3, "PROB"))
  {
    uint64_t v3 = *(void *)(v3 + 16);
    if (!v3) {
      return -1;
    }
  }
  uint64_t v5 = mbs_len_bytes(*(void *)(v3 + 8)) + 1;
  uint64_t v6 = heap_Alloc((uint64_t)a2, v5);
  if (v6)
  {
    uint64_t v7 = (const char *)v6;
    if (mbs2sjis(*(void *)(v3 + 8), 0, *(_DWORD *)(*(void *)(v3 + 8) + 8), v6, v5) != -1) {
      return atoi(v7);
    }
    heap_Free(a2, (uint64_t)v7);
  }
  return -1;
}

void *cyk2as_list(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v28 = (void *)heap_Alloc((uint64_t)a4, 24);
  if (!v28) {
    return v28;
  }
  *uint64_t v28 = 0;
  v28[1] = 0;
  _OWORD v28[2] = 0;
  if (a2 < 1) {
    return v28;
  }
  int v8 = 0;
  int v9 = a2;
  do
  {
    if (v8 < a2)
    {
      int v10 = 0;
      do
      {
        uint64_t leading_tree = cyk_hash_get_leading_tree(a1, v8, v10);
        if (leading_tree)
        {
          uint64_t v12 = (uint64_t *)leading_tree;
          do
          {
            if (*(_DWORD *)(a3 + 64) == 1) {
              uint64_t word_cost = 0;
            }
            else {
              uint64_t word_cost = get_word_cost(v12[6], a4);
            }
            v12[8] = word_cost;
            v12[7] = v12[8] + get_me_terminal(*v12);
            v28[1] = as_list_insert((uint64_t)v12, (void *)v28[1], (uint64_t)a4);
            uint64_t v12 = (uint64_t *)v12[11];
          }
          while (v12);
        }
        ++v10;
      }
      while (v10 != v9);
    }
    ++v8;
    --v9;
  }
  while (v8 != a2);
  uint64_t v31 = a2 - 2;
  uint64_t v34 = a2;
  int v29 = a2;
  int v30 = 1;
  while (2)
  {
    int v14 = 0;
    uint64_t v33 = v34--;
    int v32 = 1;
    int v35 = v33;
    do
    {
      uint64_t v15 = cyk_hash_get_leading_tree(a1, v14, v34);
      if (v15)
      {
        uint64_t v16 = (uint64_t *)v15;
        int v36 = v14;
        while (v33 < 2)
        {
LABEL_39:
          uint64_t v16 = (uint64_t *)v16[11];
          if (!v16) {
            goto LABEL_40;
          }
        }
        uint64_t v17 = v31;
        int v18 = v32;
        while (1)
        {
          int v19 = v14 <= v18 ? v18 : v14;
          if (v34 - v17 >= 0) {
            break;
          }
LABEL_38:
          --v17;
          ++v18;
          int v14 = v36;
          if (v18 == v35) {
            goto LABEL_39;
          }
        }
        uint64_t v20 = 100 * (v34 - v17);
        int v21 = v36;
        while (1)
        {
          uint64_t v22 = cyk_hash_get_leading_tree(a1, v21, v17);
          if (v22) {
            break;
          }
LABEL_36:
          BOOL v26 = v21++ == v19;
          if (v26) {
            goto LABEL_38;
          }
        }
        int v23 = (uint64_t *)v22;
        while (is_expensive_pos(*v23, *(void *)(a3 + 56)))
        {
          uint64_t v24 = v23 + 8;
          if (v23[8] < v20)
          {
            v23[8] = v20;
            uint64_t v25 = *v23;
LABEL_30:
            *v24 += get_me_terminal(v25);
          }
LABEL_35:
          int v23 = (uint64_t *)v23[11];
          if (!v23) {
            goto LABEL_36;
          }
        }
        if (is_expensive_pos(*v16, *(void *)(a3 + 56))) {
          goto LABEL_35;
        }
        uint64_t v25 = *v16;
        if (*v16 != *v23) {
          goto LABEL_35;
        }
        uint64_t v24 = v23 + 8;
        if (v23[8] >= v20) {
          goto LABEL_35;
        }
        *uint64_t v24 = v20;
        goto LABEL_30;
      }
LABEL_40:
      ++v14;
      ++v32;
      ++v35;
    }
    while (v14 != v30);
    --v31;
    BOOL v26 = v30++ == v29;
    if (!v26) {
      continue;
    }
    return v28;
  }
}

uint64_t is_expensive_pos(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  while (1)
  {
    pointer_of_symbol = (const char *)get_pointer_of_symbol((uint64_t)SF_symbol_file, a1);
    if (pointer_of_symbol)
    {
      if (!strcmp(pointer_of_symbol, *(const char **)v2)) {
        break;
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  return 1;
}

void *as_list_free_all(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    as_list_free_all(result[1]);
    as_list_free_all(*(void *)(v3 + 16));
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t add_partial_tree_checking_FI(void *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t leading_tree = cyk_hash_get_leading_tree(a1, a3, a4);
  if (leading_tree)
  {
    uint64_t v13 = leading_tree;
    uint64_t result = 2350907394;
    uint64_t v15 = *(void *)(v13 + 88);
    if (v15)
    {
      int v16 = 0;
      while (1)
      {
        uint64_t v17 = v13;
        uint64_t v13 = v15;
        if (*(void *)v17 == *(void *)a2)
        {
          int v18 = *(_DWORD *)(v17 + 32);
          if (v18 == *(_DWORD *)(a2 + 32)
            && (v18 == 1 || v18 == 2 && *(void *)(v17 + 40) == *(void *)(a2 + 40))
            && *(void *)(v17 + 48) == *(void *)(a2 + 48))
          {
            break;
          }
        }
        ++v16;
        uint64_t v15 = *(void *)(v13 + 88);
        if (!v15) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      int v16 = 0;
LABEL_16:
      if (a5 < 1 || v16 < a5 - 1)
      {
        uint64_t result = 0;
        *(void *)(v13 + 88) = a2;
      }
    }
  }
  else
  {
    return cyk_hash_add_leading_tree(a1, a2, a3, a4, a6);
  }
  return result;
}

uint64_t cyk_as_make_trees(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, void *a8)
{
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *a7 = -1;
  if (a3)
  {
    int v13 = *(_DWORD *)(a3 + 72);
    int v14 = *(_DWORD *)(a3 + 76) + 1;
    if (v14 + v13 != *((_DWORD *)a4 + 18)) {
      return 1;
    }
    int v15 = v14 + *((_DWORD *)a4 + 19);
    uint64_t v16 = *(void *)a3;
  }
  else
  {
    int v13 = *((_DWORD *)a4 + 18);
    int v15 = *((_DWORD *)a4 + 19);
    uint64_t v16 = -1;
  }
  uint64_t v17 = *a4;
  *((void *)&v40 + 1) = v16;
  *(void *)&long long v41 = v17;
  uint64_t v39 = &v40;
  uint64_t grammar_right = find_grammar_right((uint64_t *)&v39);
  if (grammar_right == -1) {
    return 1;
  }
  uint64_t v19 = grammar_right;
  uint64_t v35 = a5;
  uint64_t next_grammar_right = grammar_right - 1;
  while (1)
  {
    uint64_t result = heap_Alloc((uint64_t)a8, 96);
    if (!result) {
      break;
    }
    uint64_t v22 = result;
    uint64_t v23 = (uint64_t)v39;
    *(void *)uint64_t result = *(void *)v39;
    int v24 = -1;
    *(_DWORD *)(result + 8) = -1;
    *(void *)(result + 24) = 0;
    if (a3)
    {
      int v24 = *(_DWORD *)(v23 + 24);
      int v25 = 2;
    }
    else
    {
      int v25 = 1;
    }
    *(_DWORD *)(result + 32) = v25;
    *(_DWORD *)(result + 12) = v24;
    *(void *)(result + 40) = a3;
    *(void *)(result + 48) = a4;
    *(void *)(result + 88) = 0;
    *(_DWORD *)(result + 16) = *(void *)(v23 + 32);
    *(_DWORD *)(result + 72) = v13;
    *(_DWORD *)(result + 76) = v15;
    uint64_t v26 = *(void *)(v23 + 72);
    if (v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(void *)*(&AC_pac + v26), result) == 1)
    {
      if (a3)
      {
        uint64_t v27 = a4[8] + *(void *)(a3 + 64);
        uint64_t v28 = (uint64_t)v39;
        int v29 = (void *)v39 + 11;
      }
      else
      {
        uint64_t v28 = (uint64_t)v39;
        uint64_t v27 = *((void *)v39 + 11);
        int v29 = a4 + 8;
      }
      uint64_t v30 = v27 + *v29;
      *(void *)(v22 + 64) = v30;
      *(void *)(v22 + 56) = v30 + *(void *)(v28 + 120);
      int v31 = add_partial_tree_checking_FI(a1, v22, v13, v15, *(_DWORD *)(a6 + 52), (uint64_t)a8);
      if (v31 < 0)
      {
        __int16 v34 = v31;
        heap_Free(a8, v22);
        if ((v34 & 0x1FFF) == 0xA) {
          return 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = as_list_insert(v22, *(void **)(a2 + 8), (uint64_t)a8);
        uint64_t v32 = *((void *)v39 + 9);
        if (v32 != -1 && !*(_DWORD *)(a6 + 44))
        {
          uint64_t result = exec_actions(*((void *)*(&AC_pac + v32) + 1), v22, (uint64_t)a8);
          if (!result) {
            return result;
          }
        }
        if (!*(_DWORD *)(v22 + 72))
        {
          int v33 = *(_DWORD *)(v22 + 76);
          if (v33 > *a7 && *(void *)v22 == v35) {
            *a7 = v33;
          }
        }
      }
    }
    else
    {
      heap_Free(a8, v22);
    }
    uint64_t next_grammar_right = find_next_grammar_right(&v39, v19, next_grammar_right);
    if (next_grammar_right == -1) {
      return 1;
    }
  }
  return result;
}

uint64_t parse_cyk_as(_DWORD *a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  int v39 = 0;
  int v13 = cyk2as_list(a2, a3, (uint64_t)a1, a7);
  if (v13)
  {
    int v14 = v13;
    int v15 = 0;
    uint64_t v16 = 0;
    int v38 = 0;
    while (1)
    {
      do
      {
        uint64_t v17 = (uint64_t *)v14[1];
        int v18 = v14;
        do
        {
          if (!v17) {
            goto LABEL_38;
          }
          uint64_t v19 = v17;
          uint64_t v20 = v18;
          uint64_t v17 = (uint64_t *)v17[1];
          int v18 = v19;
        }
        while (v17);
        uint64_t v21 = *v19;
        v20[1] = v19[2];
        heap_Free(a7, (uint64_t)v19);
        if (!v21)
        {
LABEL_38:
          as_list_free_all(v14, a7);
          int v33 = 1;
          uint64_t v34 = v16;
          goto LABEL_40;
        }
        int v22 = *(_DWORD *)(v21 + 72);
        if (!v22)
        {
          if (*(_DWORD *)(v21 + 76) == a3 - 1 && *(void *)v21 == a4)
          {
            uint64_t v23 = tree_duplicate(v21, (uint64_t)a1, a6, a7);
            uint64_t v16 = tree_append(v16, (uint64_t)v23);
            if (v38 + 1 >= a1[1]) {
              goto LABEL_38;
            }
            ++v38;
            int v22 = *(_DWORD *)(v21 + 72);
          }
          else
          {
            int v22 = 0;
          }
        }
        int v24 = a1[67];
        if (v24 < 0) {
          break;
        }
        int v25 = *(_DWORD *)(v21 + 76) + v22;
        if (v25 >= v15 - v24) {
          break;
        }
      }
      while (v25 >= a1[66]);
      int v36 = a6;
      uint64_t v37 = v16;
      if (v22 >= 1) {
        break;
      }
LABEL_25:
      int v29 = v22 + *(_DWORD *)(v21 + 76) + 1;
      if (v29 < a3)
      {
        int v30 = 0;
        while (1)
        {
          uint64_t leading_tree = cyk_hash_get_leading_tree(a2, v29, v30);
          if (leading_tree) {
            break;
          }
LABEL_33:
          ++v30;
          int v29 = *(_DWORD *)(v21 + 72) + *(_DWORD *)(v21 + 76) + 1;
          if (v30 >= a3 - v29) {
            goto LABEL_34;
          }
        }
        uint64_t v32 = (uint64_t *)leading_tree;
        while (cyk_as_make_trees(a2, (uint64_t)v14, v21, v32, a4, (uint64_t)a1, &v39, a7))
        {
          if (v39 > v15) {
            int v15 = v39;
          }
          uint64_t v32 = (uint64_t *)v32[11];
          if (!v32) {
            goto LABEL_33;
          }
        }
        goto LABEL_43;
      }
LABEL_34:
      if (!cyk_as_make_trees(a2, (uint64_t)v14, 0, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7)) {
        goto LABEL_43;
      }
      if (v39 > v15) {
        int v15 = v39;
      }
      a6 = v36;
      uint64_t v16 = v37;
    }
    int v26 = 0;
    while (1)
    {
      uint64_t v27 = cyk_hash_get_leading_tree(a2, v22 + ~v26, v26);
      if (v27) {
        break;
      }
LABEL_24:
      ++v26;
      int v22 = *(_DWORD *)(v21 + 72);
      if (v26 >= v22) {
        goto LABEL_25;
      }
    }
    uint64_t v28 = v27;
    while (cyk_as_make_trees(a2, (uint64_t)v14, v28, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7))
    {
      if (v39 > v15) {
        int v15 = v39;
      }
      uint64_t v28 = *(void *)(v28 + 88);
      if (!v28) {
        goto LABEL_24;
      }
    }
LABEL_43:
    int v33 = 2;
    uint64_t v34 = v37;
  }
  else
  {
    int v33 = 2;
    uint64_t v34 = 0;
  }
LABEL_40:
  return parser_result_create(v33, v34, (uint64_t)a7);
}

void *set_step_partial_tree(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = result;
  while (1)
  {
    if (*(void *)a2 == a3 && *(_DWORD *)(a2 + 80) != a4)
    {
      *(_DWORD *)(a2 + 80) = a4;
      uint64_t result = as_list_insert(a2, (void *)v9[1], a5);
      v9[1] = result;
    }
    int v10 = *(_DWORD *)(a2 + 32);
    if (v10 != 1) {
      break;
    }
LABEL_8:
    a2 = *(void *)(a2 + 48);
  }
  if (v10 == 2)
  {
    uint64_t result = (void *)set_step_partial_tree(v9, *(void *)(a2 + 40), a3, a4, a5);
    goto LABEL_8;
  }
  return result;
}

uint64_t cyk_as_make_trees_step(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, void *a9)
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  *a8 = -1;
  if (a3)
  {
    int v15 = *(_DWORD *)(a3 + 72);
    int v16 = *(_DWORD *)(a3 + 76) + 1;
    if (v16 + v15 != *((_DWORD *)a4 + 18)) {
      return 1;
    }
    int v17 = v16 + *((_DWORD *)a4 + 19);
    uint64_t v18 = *(void *)a3;
  }
  else
  {
    int v15 = *((_DWORD *)a4 + 18);
    int v17 = *((_DWORD *)a4 + 19);
    uint64_t v18 = -1;
  }
  uint64_t v19 = *a4;
  *((void *)&v44 + 1) = v18;
  *(void *)&long long v45 = v19;
  long long v43 = (uint64_t *)&v44;
  uint64_t grammar_right = find_grammar_right((uint64_t *)&v43);
  if (grammar_right == -1) {
    return 1;
  }
  uint64_t v21 = grammar_right;
  uint64_t v39 = a5;
  uint64_t next_grammar_right = grammar_right - 1;
  int v42 = v17;
  while (1)
  {
    uint64_t result = heap_Alloc((uint64_t)a9, 96);
    if (!result) {
      break;
    }
    uint64_t v24 = result;
    uint64_t v25 = (uint64_t)v43;
    uint64_t v26 = *v43;
    *(void *)uint64_t v24 = *v43;
    int v27 = -1;
    *(_DWORD *)(v24 + 8) = -1;
    *(void *)(v24 + 24) = 0;
    if (a3)
    {
      int v27 = *(_DWORD *)(v25 + 24);
      int v28 = 2;
    }
    else
    {
      int v28 = 1;
    }
    *(_DWORD *)(v24 + 32) = v28;
    *(_DWORD *)(v24 + 12) = v27;
    *(void *)(v24 + 40) = a3;
    *(void *)(v24 + 48) = a4;
    *(void *)(v24 + 88) = 0;
    *(_DWORD *)(v24 + 16) = *(void *)(v25 + 32);
    *(_DWORD *)(v24 + 72) = v15;
    *(_DWORD *)(v24 + 76) = v17;
    *(_DWORD *)(v24 + 80) = a7;
    uint64_t v29 = *(void *)(v25 + 72);
    if ((!a7 && v29 == -1 || v29 != -1 && *((_DWORD *)*(&AC_pac + v29) + 4) == a7)
      && *((_DWORD *)a4 + 20) == a7
      && (!a3 || *(_DWORD *)(a3 + 80) == a7)
      && (v29 == -1
       || *(_DWORD *)(a6 + 44) == 1
       || is_internal(v26) == 1
       || eval_cond(*(void *)*(&AC_pac + v43[9]), v24) == 1))
    {
      if (a3)
      {
        uint64_t v30 = a4[8] + *(void *)(a3 + 64);
        uint64_t v31 = (uint64_t)v43;
        uint64_t v32 = v43 + 11;
      }
      else
      {
        uint64_t v31 = (uint64_t)v43;
        uint64_t v30 = v43[11];
        uint64_t v32 = a4 + 8;
      }
      uint64_t v33 = v30 + *v32;
      *(void *)(v24 + 64) = v33;
      *(void *)(v24 + 56) = v33 + *(void *)(v31 + 120);
      uint64_t v34 = a6;
      int v35 = add_partial_tree_checking_FI(a1, v24, v15, v42, *(_DWORD *)(a6 + 52), (uint64_t)a9);
      if (v35 < 0)
      {
        __int16 v37 = v35;
        heap_Free(a9, v24);
        int v38 = v37 & 0x1FFF;
        a6 = v34;
        int v17 = v42;
        if (v38 == 10) {
          return 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = as_list_insert(v24, *(void **)(a2 + 8), (uint64_t)a9);
        if (v43[9] != -1 && !*(_DWORD *)(a6 + 44) && is_internal(*(void *)v24) != 1)
        {
          uint64_t result = exec_actions(*((void *)*(&AC_pac + v43[9]) + 1), v24, (uint64_t)a9);
          if (!result) {
            return result;
          }
        }
        int v17 = v42;
        if (!*(_DWORD *)(v24 + 72))
        {
          int v36 = *(_DWORD *)(v24 + 76);
          if (v36 > *a8 && *(void *)v24 == *(void *)(v39 + 8 * a7)) {
            *a8 = v36;
          }
        }
      }
    }
    else
    {
      heap_Free(a9, v24);
    }
    uint64_t next_grammar_right = find_next_grammar_right(&v43, v21, next_grammar_right);
    if (next_grammar_right == -1) {
      return 1;
    }
  }
  return result;
}

uint64_t parse_cyk_as_step(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10)
{
  uint64_t v66 = 0;
  int v65 = 0;
  uint64_t v64 = 0;
  uint64_t v15 = 956;
  LODWORD(v16) = *(_DWORD *)(a1 + 956);
  do
  {
    int v17 = *(_DWORD *)(a1 + v15);
    if ((int)v16 <= v17) {
      uint64_t v16 = v17;
    }
    else {
      uint64_t v16 = v16;
    }
    v15 += 4;
  }
  while (v15 != 976);
  uint64_t v18 = heap_Calloc(a10, 8, v16);
  if (!v18)
  {
    return parser_result_create(2, 0, (uint64_t)a10);
  }
  uint64_t v19 = v18;
  uint64_t v20 = cyk2as_list(a2, a3, a1, a10);
  if (!v20)
  {
    uint64_t v50 = parser_result_create(2, 0, (uint64_t)a10);
    long long v51 = a10;
    uint64_t v52 = v19;
LABEL_73:
    heap_Free(v51, v52);
    return v50;
  }
  uint64_t v21 = v20;
  uint64_t v58 = a6;
  long long v59 = 0;
  uint64_t v60 = a5;
  LODWORD(a5) = 0;
  uint64_t v22 = 0;
  LODWORD(v23) = 0;
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v25 = (uint64_t *)v21[1];
    uint64_t v26 = v21;
    do
    {
      if (!v25) {
        goto LABEL_76;
      }
      int v27 = v25;
      int v28 = v26;
      uint64_t v25 = (uint64_t *)v25[1];
      uint64_t v26 = v27;
    }
    while (v25);
    uint64_t v61 = v19;
    uint64_t v29 = a4;
    uint64_t v30 = v22;
    uint64_t v31 = *v27;
    v28[1] = v27[2];
    heap_Free(a10, (uint64_t)v27);
    if (!v31) {
      break;
    }
    ++v24;
    uint64_t v56 = (int)v23;
    uint64_t v32 = (kaldi::nnet1::UpdatableComponent *)*(unsigned int *)(a1 + 4 * (int)v23 + 1300);
    if ((v32 & 0x80000000) != 0 || kaldi::nnet1::UpdatableComponent::IsUpdatable(v32) != 1)
    {
      if (*(_DWORD *)(v31 + 80) != v23)
      {
        uint64_t v22 = v30;
LABEL_29:
        a4 = v29;
        goto LABEL_30;
      }
      uint64_t v22 = v30;
      if (*(_DWORD *)(v31 + 72)) {
        goto LABEL_29;
      }
      a4 = v29;
      if (*(_DWORD *)(v31 + 76) != a3 - 1) {
        goto LABEL_30;
      }
      uint64_t v19 = v61;
      if (*(void *)v31 == *(void *)(a7 + 8 * (int)v23))
      {
        uint64_t v35 = (v22 + 1);
        if (v23 == *(_DWORD *)(a1 + 952) - 1)
        {
          int v36 = tree_duplicate(v31, a1, a9, a10);
          long long v59 = (void *)tree_append((uint64_t)v59, (uint64_t)v36);
          uint64_t v66 = v59;
          if ((int)v35 >= *(_DWORD *)(a1 + 4 * (int)v23 + 956))
          {
            LODWORD(v22) = v35;
            goto LABEL_75;
          }
LABEL_62:
          uint64_t v22 = v35;
        }
        else
        {
          *(void *)(v61 + 8 * (int)v22) = v31;
          if ((int)v35 < *(_DWORD *)(a1 + 4 * (int)v23 + 956)) {
            goto LABEL_62;
          }
          if ((v22 & 0x80000000) != 0)
          {
            LODWORD(a5) = 0;
            uint64_t v22 = 0;
            uint64_t v24 = 0;
            LODWORD(v23) = v23 + 1;
          }
          else
          {
            uint64_t v23 = (v23 + 1);
            long long v47 = (uint64_t *)v61;
            do
            {
              set_step_partial_tree(v21, *v47, *(void *)(v60 + 8 * v56), v23, (uint64_t)a10);
              uint64_t v48 = *v47++;
              set_step_partial_tree(v21, v48, a4, v23, (uint64_t)a10);
              --v35;
            }
            while (v35);
            LODWORD(a5) = 0;
            uint64_t v22 = 0;
            uint64_t v24 = 0;
          }
        }
LABEL_30:
        uint64_t v19 = v61;
      }
      if (*(_DWORD *)(v31 + 80) == v23
        || (int)v23 >= 1 && *(void *)v31 == *(void *)(v60 + 8 * (v23 - 1)))
      {
        int v37 = *(_DWORD *)(a1 + 4 * (int)v23 + 292);
        int v38 = *(_DWORD *)(v31 + 72);
        if (v37 < 0
          || (int v39 = *(_DWORD *)(v31 + 76) + v38, v39 >= (int)a5 - v37)
          || v39 < *(_DWORD *)(a1 + 4 * (int)v23 + 272))
        {
          uint64_t v55 = v24;
          unsigned int v57 = v22;
          if (v38 >= 1)
          {
            int v40 = 0;
            while (1)
            {
              uint64_t leading_tree = cyk_hash_get_leading_tree(a2, v38 + ~v40, v40);
              if (leading_tree) {
                break;
              }
LABEL_45:
              ++v40;
              int v38 = *(_DWORD *)(v31 + 72);
              if (v40 >= v38) {
                goto LABEL_46;
              }
            }
            uint64_t v42 = leading_tree;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v42, (uint64_t *)v31, a7, a1, v23, &v65, a10))
            {
              if (v65 > (int)a5) {
                LODWORD(a5) = v65;
              }
              uint64_t v42 = *(void *)(v42 + 88);
              if (!v42) {
                goto LABEL_45;
              }
            }
            goto LABEL_72;
          }
LABEL_46:
          int v43 = v38 + *(_DWORD *)(v31 + 76) + 1;
          if (v43 < a3)
          {
            int v44 = 0;
            while (1)
            {
              uint64_t v45 = cyk_hash_get_leading_tree(a2, v43, v44);
              if (v45) {
                break;
              }
LABEL_54:
              ++v44;
              int v43 = *(_DWORD *)(v31 + 72) + *(_DWORD *)(v31 + 76) + 1;
              if (v44 >= a3 - v43) {
                goto LABEL_55;
              }
            }
            long long v46 = (uint64_t *)v45;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v31, v46, a7, a1, v23, &v65, a10))
            {
              if (v65 > (int)a5) {
                LODWORD(a5) = v65;
              }
              long long v46 = (uint64_t *)v46[11];
              if (!v46) {
                goto LABEL_54;
              }
            }
LABEL_72:
            uint64_t v50 = parser_result_create(2, (uint64_t)v59, (uint64_t)a10);
            long long v51 = a10;
            uint64_t v52 = v61;
            goto LABEL_73;
          }
LABEL_55:
          if (!cyk_as_make_trees_step(a2, (uint64_t)v21, 0, (uint64_t *)v31, a7, a1, v23, &v65, a10)) {
            goto LABEL_72;
          }
          if (v65 > (int)a5) {
            LODWORD(a5) = v65;
          }
          uint64_t v19 = v61;
          uint64_t v22 = v57;
          uint64_t v24 = v55;
        }
      }
    }
    else
    {
      if (v23 == *(_DWORD *)(a1 + 952) - 1) {
        break;
      }
      if (!v30)
      {
        if ((max_len_parse(0, v23, a2, a3, a1, (uint64_t)v21, v29, v60, v58, a7, a9, a10, &v64) & 0x80000000) == 0)
        {
LABEL_60:
          LODWORD(a5) = 0;
          uint64_t v22 = 0;
          uint64_t v24 = 0;
          LODWORD(v23) = v23 + 1;
          a4 = v29;
          uint64_t v19 = v61;
          continue;
        }
        as_list_free_all(v21, a10);
        heap_Free(a10, v61);
        return 0;
      }
      if ((int)v30 <= 0) {
        goto LABEL_60;
      }
      uint64_t v23 = (v23 + 1);
      a5 = v30;
      uint64_t v33 = (uint64_t *)v61;
      do
      {
        set_step_partial_tree(v21, *v33, *(void *)(v60 + 8 * v56), v23, (uint64_t)a10);
        uint64_t v34 = *v33++;
        set_step_partial_tree(v21, v34, v29, v23, (uint64_t)a10);
        --a5;
      }
      while (a5);
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      a4 = v29;
      uint64_t v19 = v61;
    }
  }
  LODWORD(v22) = v30;
  a4 = v29;
LABEL_75:
  uint64_t v19 = v61;
LABEL_76:
  if (v22)
  {
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    return parser_result_create(1, (uint64_t)v59, (uint64_t)a10);
  }
  else
  {
    int v53 = max_len_parse(1, v23, a2, a3, a1, (uint64_t)v21, a4, v60, v58, a7, a9, a10, &v66);
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    if (v53 < 0) {
      return 0;
    }
    if (v66) {
      int v54 = 1;
    }
    else {
      int v54 = 2;
    }
    uint64_t v50 = parser_result_create(v54, (uint64_t)v66, (uint64_t)a10);
    if (!v50) {
      jpe_FreeTree(v66, a10);
    }
  }
  return v50;
}

uint64_t cyk_one_free_all(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    do
    {
      uint64_t v5 = *(void *)(v4 + 88);
      heap_Free(a2, v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  heap_Free(a2, (uint64_t)a1);
  return 0;
}

uint64_t cyk_hash_get_leading_tree(void *a1, int a2, int a3)
{
  int v3 = 20 * (a2 % 200);
  int v4 = v3 + a3 % 20;
  if ((a3 / 20)) {
    int v4 = v3 + 20 * (a3 / 20) - a3 + 19;
  }
  uint64_t v5 = *(void *)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  while (*(__int16 *)(v5 + 10) != a3 || *(__int16 *)(v5 + 8) != a2)
  {
    uint64_t v5 = *(void *)(v5 + 16);
    if (!v5) {
      return 0;
    }
  }
  return *(void *)v5;
}

uint64_t cyk_hash_add_leading_tree(void *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int16 v5 = a4;
  __int16 v6 = a3;
  int v9 = 20 * (a3 % 200);
  if ((a4 / 20)) {
    int v10 = v9 + 20 * (a4 / 20) - a4 + 19;
  }
  else {
    int v10 = v9 + a4 % 20;
  }
  uint64_t v11 = *(void *)(*a1 + 8 * v10);
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3) {
        break;
      }
      uint64_t v11 = *(void *)(v11 + 16);
      if (!v11) {
        goto LABEL_10;
      }
    }
    unsigned __int16 v15 = 1;
    return v15 | 0x8C200000;
  }
  uint64_t v12 = 0;
LABEL_10:
  uint64_t v13 = heap_Alloc(a5, 24);
  if (!v13)
  {
    unsigned __int16 v15 = 8202;
    return v15 | 0x8C200000;
  }
  *(_WORD *)(v13 + 8) = v6;
  *(_WORD *)(v13 + 10) = v5;
  *(void *)(v13 + 16) = 0;
  *(void *)uint64_t v13 = a2;
  if (v12) {
    int v14 = (uint64_t *)(v12 + 16);
  }
  else {
    int v14 = (uint64_t *)(*a1 + 8 * v10);
  }
  uint64_t v16 = 0;
  *int v14 = v13;
  return v16;
}

uint64_t *cyk_hash_free(void *a1, void *a2)
{
  for (uint64_t i = 0; i != 4000; ++i)
  {
    uint64_t result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        __int16 v6 = (uint64_t *)result[2];
        cyk_one_free_all(result, a2);
        uint64_t result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t SearchTERMINALTable(char *__s2)
{
  int v2 = 0;
  int v3 = 372;
  while (1)
  {
    int v4 = v3 - v2;
    if (v3 < v2) {
      ++v4;
    }
    uint64_t v5 = v2 + (v4 >> 1);
    int v6 = strcmp((&TERMINALTable)[2 * v5], __s2);
    if (!v6) {
      break;
    }
    if (v6 >= 0) {
      int v3 = v5 - 1;
    }
    else {
      int v2 = v5 + 1;
    }
    if (v2 > v3) {
      return 0;
    }
  }
  return LOBYTE((&TERMINALTable)[2 * v5 + 1]);
}

uint64_t log_intermediate_tree(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, void *a5, int a6, uint64_t *a7)
{
  uint64_t v14 = ssftstring_Clear(a3);
  if ((v14 & 0x80000000) == 0)
  {
    if (a5)
    {
      if (a6 >= 1)
      {
        int v28 = a5;
        uint64_t v15 = 0;
        int v16 = a6;
        int v26 = a6;
        while ((int)v15 >= a6)
        {
LABEL_12:
          uint64_t v15 = (v15 + 1);
          --v16;
          a6 = v26;
          if (v15 == v26) {
            return v14;
          }
        }
        int v17 = 0;
        int v27 = v16;
        while (1)
        {
          uint64_t leading_tree = cyk_hash_get_leading_tree(v28, v15, v17);
          if (leading_tree) {
            break;
          }
LABEL_11:
          ++v17;
          int v16 = v27;
          if (v17 == v27) {
            goto LABEL_12;
          }
        }
        uint64_t v22 = leading_tree;
        while (1)
        {
          uint64_t v23 = v22;
          uint64_t v22 = *(void *)(v22 + 88);
          log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[A*] (%d,%d) == (%d,%d)", v19, v20, v21, v15);
          LODWORD(v25) = 0;
          uint64_t v14 = log_output_tree(a1, a2, a3, v23, 0, a4[3], a4[9], 1, v25, 0, a4[324], a7);
          if ((v14 & 0x80000000) != 0) {
            break;
          }
          if (!v22) {
            goto LABEL_11;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t parser_result_create(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = heap_Alloc(a3, 56);
  if (result)
  {
    *(_DWORD *)uint64_t result = a1;
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t connection_table(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 100000;
  uint64_t v5 = *(unsigned int *)(a3[6] + 4 * a1 + 4);
  if ((v5 & 0x80000000) != 0) {
    return result;
  }
  uint64_t v6 = *(unsigned int *)(a3[7] + 4 * a2 + 4);
  if ((v6 & 0x80000000) != 0) {
    return result;
  }
  LOWORD(v7) = 0;
  int v8 = *(__int16 *)(a3[3] + 2 * v5);
  int v9 = (v8 + ((unsigned __int16)(v8 & 0x8000) >> 15)) << 16 >> 17;
  int v10 = (__int16 *)(*(void *)(a3[2] + 8 * v5) + 8 * v9);
  while ((int)v6 < *v10)
  {
    if (!(_WORD)v9)
    {
      uint64_t v20 = (__int16 *)(*(void *)(a3[4] + 8 * v5) + 2 * v6);
      return *v20;
    }
    if ((int)v6 > *(v10 - 3))
    {
      uint64_t v18 = *(void *)(a3[4] + 8 * v5);
      int v19 = *(v10 - 2);
      goto LABEL_35;
    }
    uint64_t v11 = v10 - 4;
    if ((int)v6 >= *(v10 - 4))
    {
      uint64_t v20 = v10 - 1;
      return *v20;
    }
    if ((_WORD)v7) {
      __int16 v12 = v7;
    }
    else {
      __int16 v12 = v9;
    }
    int v7 = (__int16)(v12 + ((unsigned __int16)(v12 & 0x8000) >> 15)) >> 1;
    unsigned int v13 = (unsigned __int16)(v12 + 1);
    v10 -= 4 * v7;
    BOOL v14 = v13 >= 3;
    if (v13 >= 3) {
      unsigned int v15 = -v7;
    }
    else {
      LOWORD(v15) = -1;
    }
    if (!v14) {
      int v10 = v11;
    }
LABEL_31:
    LOWORD(v9) = v15 + v9;
  }
  if ((int)v6 <= v10[1])
  {
    uint64_t v20 = v10 + 3;
    return *v20;
  }
  if (v8 - 1 == (__int16)v9 || (int v16 = v10 + 4, (int)v6 < v10[4]))
  {
    uint64_t v18 = *(void *)(a3[4] + 8 * v5);
    int v19 = v10[2];
LABEL_35:
    uint64_t v20 = (__int16 *)(v18 + 2 * ((int)v6 - v19));
    return *v20;
  }
  if ((int)v6 > v10[5])
  {
    if ((_WORD)v7) {
      int v7 = (__int16)v7;
    }
    else {
      int v7 = v8 - (__int16)v9;
    }
    if (v7 >= 0) {
      int v17 = v7;
    }
    else {
      int v17 = v7 + 1;
    }
    int v7 = v17 >> 1;
    v10 += 4 * (v17 >> 1);
    unsigned int v15 = (unsigned __int16)(v17 >> 1);
    if (!v15) {
      int v10 = v16;
    }
    if (v15 <= 1) {
      LOWORD(v15) = 1;
    }
    goto LABEL_31;
  }
  uint64_t v20 = v10 + 7;
  return *v20;
}

uint64_t JpCreate(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, int a7, uint64_t *a8, uint64_t a9)
{
  uint64_t v25 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v25);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v18 = heap_Calloc(*(void **)(v25 + 8), 1, 72);
  if (!v18) {
    return 2350915594;
  }
  uint64_t v19 = v18;
  *(void *)(v18 + 64) = 0;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  uint64_t v20 = jparser_ClassOpen(a1, a2, v18 + 8);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v22 = v20;
LABEL_13:
    heap_Free(*(void **)(v25 + 8), v19);
    return v22;
  }
  uint64_t v21 = jparser_ObjOpen(a1, a2, *(void *)(v19 + 8), *(void *)(v19 + 16), (uint64_t *)(v19 + 24), a3, a4, a5, a6, a7, a9);
  if ((v21 & 0x80000000) != 0)
  {
    uint64_t v22 = v21;
LABEL_12:
    jparser_ClassClose(*(void ***)(v19 + 8), *(void *)(v19 + 16));
    goto LABEL_13;
  }
  *(void *)(v19 + 48) = 0;
  uint64_t v22 = ssftstring_ObjOpen(*(void **)(v25 + 8), (void *)(v19 + 48));
  if ((v22 & 0x80000000) != 0)
  {
    jparser_ObjClose((uint64_t *)(v19 + 24));
    goto LABEL_12;
  }
  *(_DWORD *)uint64_t v19 = 1;
  uint64_t v23 = v25;
  *(void *)(v19 + 56) = a1;
  *(void *)(v19 + 64) = a2;
  *(void *)(v19 + 32) = v23;
  *(void *)(v19 + 40) = a9;
  *a8 = v19;
  return v22;
}

uint64_t JpRemove(void *a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    jparser_ObjClose((uint64_t *)(*a2 + 24));
    jparser_ClassClose(*(void ***)(*a2 + 8), *(void *)(*a2 + 16));
    uint64_t v4 = *a2;
    uint64_t v5 = *(void ***)(*a2 + 48);
    if (v5)
    {
      ssftstring_ObjClose(v5);
      *(void *)(*a2 + 48) = 0;
      uint64_t v4 = *a2;
    }
    heap_Free(a1, v4);
    *a2 = 0;
  }
  return 0;
}

uint64_t JpParse(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, _WORD *a10, uint64_t *a11, uint64_t a12, int a13, const char *a14, uint64_t a15)
{
  uint64_t v21 = a12;
  uint64_t v22 = 2350915594;
  v97[0] = 0;
  long long v96 = 0;
  int v94 = 0;
  int v95 = 0;
  __int16 v93 = 0;
  uint64_t v92 = 0;
  __int16 v91 = 0;
  uint64_t v90 = 0;
  unsigned __int16 v89 = 0;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(*(void *)(a1 + 32) + 32));
  BOOL v24 = LogLevel > 4;
  uint64_t v88 = 0;
  unsigned __int16 v87 = 0;
  *(_WORD *)(a12 + 8) = 0;
  *(void *)(a12 + 12) = 0x100000001;
  if (!*(_DWORD *)a1)
  {
    uint64_t v22 = 2350915601;
    goto LABEL_54;
  }
  unsigned int v25 = LogLevel;
  uint64_t v26 = bed_GetpElem(a5, 0, &v88);
  if ((v26 & 0x80000000) != 0
    || (uint64_t v26 = bed_GetcElem(a5, &v87), (v26 & 0x80000000) != 0)
    || (uint64_t v26 = bed_GetpElem(a5, 0xFFFFu, &v92), (v26 & 0x80000000) != 0))
  {
LABEL_53:
    uint64_t v22 = v26;
LABEL_54:
    if (v96)
    {
      int v73 = jparser_FreeTree(*(void *)(a1 + 24), &v96);
      if (v73 >= 0 || (int)v22 <= -1) {
        return v22;
      }
      else {
        return v73;
      }
    }
    return v22;
  }
  if (a13 != 1) {
    goto LABEL_12;
  }
  if (v87)
  {
    int v27 = (int *)(v88 + 20);
    unsigned __int16 v28 = 1;
    uint64_t v29 = v87;
    do
    {
      int v30 = *v27;
      v27 += 16;
      if (v30 == 21) {
        ++v28;
      }
      --v29;
    }
    while (v29);
    if (!v28)
    {
LABEL_12:
      uint64_t v22 = jparser_Parse(*(void *)(a1 + 24), a2, a3, &v96, v24, *(void *)(a1 + 48), v88, v87, v92, a8, a13);
      v97[0] = v22;
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      goto LABEL_33;
    }
  }
  else
  {
    unsigned __int16 v28 = 1;
  }
  uint64_t v34 = heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), 1, (unint64_t)v28 << 6);
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v81 = a4;
    unsigned int v36 = v87;
    if (v87)
    {
      unint64_t v37 = 0;
      unsigned __int16 v38 = 0;
      uint64_t v39 = v88;
      unsigned int v40 = v87;
      do
      {
        if (!v37 || *(_DWORD *)(v39 + 20) == 21)
        {
          long long v41 = (_OWORD *)(v34 + ((unint64_t)v38 << 6));
          long long v42 = *(_OWORD *)v39;
          long long v43 = *(_OWORD *)(v39 + 16);
          long long v44 = *(_OWORD *)(v39 + 48);
          v41[2] = *(_OWORD *)(v39 + 32);
          v41[3] = v44;
          *long long v41 = v42;
          v41[1] = v43;
          ++v38;
          unsigned int v36 = v40;
        }
        ++v37;
        v39 += 64;
      }
      while (v37 < v36);
      if (v38)
      {
        unsigned int v82 = v25;
        BOOL v83 = v24;
        uint64_t v79 = a6;
        uint64_t v80 = a5;
        uint64_t v45 = 0;
        while (1)
        {
          if (v45)
          {
            uint64_t v46 = v35 + v45;
            int v47 = *(_DWORD *)(v88 + 32);
            size_t v48 = (unsigned __int16)(*(_WORD *)(v35 + v45 + 32) - v47);
            if (*(_WORD *)(v35 + v45 + 32) != (_WORD)v47)
            {
              uint64_t v49 = v35;
              uint64_t v50 = a3;
              long long v51 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), (v48 + 1), 1);
              if (!v51)
              {
                heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v49);
                return v22;
              }
              uint64_t v52 = (uint64_t)v51;
              int v53 = strncpy(v51, a14, v48);
              v53[v48] = 0;
              *(_DWORD *)(v46 + 32) = 2 * Utf8_LengthInUtf8chars((unint64_t)v53, v48);
              heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v52);
              a3 = v50;
              uint64_t v35 = v49;
            }
          }
          v45 += 64;
          if ((unint64_t)v38 << 6 == v45)
          {
            a6 = v79;
            a5 = v80;
            unsigned int v25 = v82;
            BOOL v24 = v83;
            goto LABEL_32;
          }
        }
      }
    }
    unsigned __int16 v38 = 0;
LABEL_32:
    uint64_t v54 = v35;
    uint64_t v22 = jparser_Parse(*(void *)(a1 + 24), a2, a3, &v96, v24, *(void *)(a1 + 48), v35, v38, v92, a8, 1);
    v97[0] = v22;
    heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v54);
    uint64_t v21 = a12;
    a4 = v81;
    if ((v22 & 0x80000000) == 0)
    {
LABEL_33:
      BOOL v84 = v24;
      if (a3 && 3 * a3 != 2 * (unsigned __int16)*(_DWORD *)(v92 + 36)) {
        *(_DWORD *)(v21 + 16) = 0;
      }
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v31, v32, v33, a3);
      UTOITrace(v24, *(void *)(a1 + 32), a4, a5, (uint64_t)"START of normalization");
      __int16 v91 = 0;
      jparser_extractResult(*(void *)(a1 + 32), *(void *)(a1 + 40), v96, (int *)v97, a6, a7, a8, a9, a10, &v93, (_WORD *)&v95 + 1, &v95, (_WORD *)&v94 + 1, *(void *)(a1 + 48), a11, (unsigned __int16 *)&v94, v21, &v91, (uint64_t)a14,
        a15);
      uint64_t v22 = v97[0];
      if ((v97[0] & 0x80000000) != 0) {
        goto LABEL_54;
      }
      uint64_t v55 = a6;
      if (!a3) {
        goto LABEL_72;
      }
      uint64_t v26 = bed_GetcElem(a6, &v89);
      if ((v26 & 0x80000000) == 0)
      {
        uint64_t v59 = *(void *)(a1 + 32);
        if (!v89)
        {
          log_OutText(*(void *)(v59 + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v56, v57, v58, v78);
          goto LABEL_72;
        }
        UTOISubTrace(v24, v59, a6, (uint64_t)"replacement string");
        if (*(_DWORD *)(v21 + 16) != 1)
        {
LABEL_72:
          uint64_t v22 = utoin_IncrReplaceCurrentRegion(a4, a5, v55, a3 >> 1, (uint64_t *)v21);
          if ((v22 & 0x80000000) == 0) {
            UTOITrace(v24, *(void *)(a1 + 32), a4, a5, (uint64_t)"END of normalization");
          }
          goto LABEL_54;
        }
        uint64_t v26 = bed_GetpElem(a6, 0, &v90);
        if ((v26 & 0x80000000) == 0)
        {
          if (!v89)
          {
            int v72 = 1;
            unsigned int v67 = v25;
            goto LABEL_66;
          }
          uint64_t v63 = 0;
          unsigned int v64 = 0;
          unsigned __int16 v65 = 1;
          uint64_t v66 = v90;
          unsigned int v67 = v25;
          while (1)
          {
            if (*(unsigned char *)(v66 + v63) == 16)
            {
              uint64_t v68 = *(unsigned __int16 *)(v21 + 8);
              if (v64 >= v68)
              {
LABEL_64:
                log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] cannot find non-deleted word to align new word number %d with", v60, v61, v62, v65);
                int v72 = 0;
LABEL_66:
                if (v67 >= 5 && *(_WORD *)(v21 + 8))
                {
                  uint64_t v76 = 0;
                  unint64_t v77 = 0;
                  do
                  {
                    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v60, v61, v62, v77++);
                    v76 += 12;
                  }
                  while (v77 < *(unsigned __int16 *)(v21 + 8));
                }
                BOOL v24 = v84;
                if (v72) {
                  *(_DWORD *)(v21 + 12) = 0;
                }
                goto LABEL_72;
              }
              uint64_t v69 = v64;
              int v70 = (int *)(*(void *)v21 + 12 * v64 + 4);
              while (1)
              {
                int v71 = *v70;
                v70 += 3;
                if (v71 != 1) {
                  break;
                }
                if (v68 == ++v69) {
                  goto LABEL_64;
                }
              }
              *(_WORD *)(*(void *)v21 + 12 * (unsigned __int16)v69 + 8) = v63;
              ++v65;
              unsigned int v64 = (unsigned __int16)v69 + 1;
            }
            if (++v63 >= (unint64_t)v89)
            {
              int v72 = 1;
              goto LABEL_66;
            }
          }
        }
      }
      goto LABEL_53;
    }
  }
  return v22;
}

uint64_t jparser_extractResult(uint64_t a1, uint64_t a2, void *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, uint64_t a14, uint64_t *a15, unsigned __int16 *a16, uint64_t a17, _WORD *a18, uint64_t a19, uint64_t a20)
{
  uint64_t v114 = a7;
  if (*a4 < 0) {
    return 0;
  }
  int v27 = ssftstring_Clear(a14);
  *a4 = v27;
  if (v27 < 0) {
    return 0;
  }
  if (!a3) {
    return 1;
  }
  uint64_t v29 = a17;
  while (1)
  {
    uint64_t v30 = a3[4];
    if (v30)
    {
      int v31 = jparser_extractResult(a1, a2, v30, a4, a5, a6, v114, a8, a9, a10, a11, a12, a13, a14, a15, a16, v29, a18, a19,
              a20);
      uint64_t v29 = a17;
      if (v31 != 1) {
        return 0;
      }
      goto LABEL_7;
    }
    uint64_t v32 = a3[5];
    if (v32) {
      break;
    }
LABEL_7:
    a3 = (void *)a3[2];
    if (!a3) {
      return 1;
    }
  }
  uint64_t v108 = a20;
  uint64_t v109 = a2;
  uint64_t v110 = a5;
  uint64_t v111 = a1;
  uint64_t v106 = a6;
  unsigned int v107 = a8;
  unsigned __int16 v33 = 0;
  LOWORD(a6) = 0;
  __int16 v112 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  do
  {
    unint64_t v37 = *(const char **)v32;
    if (!strcmp(*(const char **)v32, "WORD"))
    {
      unsigned __int16 v38 = *(const char **)(v32 + 8);
      __int16 v112 = strlen(v38);
      unsigned int v39 = *(unsigned __int8 *)v38;
      if (*v38)
      {
        a6 = 0;
        do
        {
          unsigned int v40 = v38 + 2;
          if (v39 > 0xFC) {
            long long v41 = v38 + 1;
          }
          else {
            long long v41 = v38 + 2;
          }
          if (v39 > 0xFC) {
            uint64_t v42 = a6;
          }
          else {
            uint64_t v42 = a6 + 1;
          }
          if (v39 <= 0xA0) {
            uint64_t v43 = a6;
          }
          else {
            uint64_t v43 = a6 + 1;
          }
          if (v39 <= 0xDF)
          {
            long long v41 = v38 + 1;
            uint64_t v42 = v43;
          }
          if (v39 >= 0x81)
          {
            uint64_t v44 = a6 + 1;
          }
          else
          {
            unsigned int v40 = v38 + 1;
            uint64_t v44 = a6;
          }
          if (v39 <= 0x9F)
          {
            uint64_t v45 = v44;
          }
          else
          {
            unsigned int v40 = v41;
            uint64_t v45 = v42;
          }
          if ((v39 & 0x80) != 0) {
            unsigned __int16 v38 = v40;
          }
          else {
            ++v38;
          }
          if ((v39 & 0x80) != 0) {
            a6 = v45;
          }
          else {
            ++a6;
          }
          unsigned int v39 = *(unsigned __int8 *)v38;
        }
        while (*v38);
      }
      else
      {
        LOWORD(a6) = 0;
      }
      int appended = ssftstring_AppendCStr(a14, "Word \"");
      *a4 = appended;
      if (appended < 0) {
        return 0;
      }
      int v47 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v47;
      if (v47 < 0) {
        return 0;
      }
      int v48 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v48;
      if (v48 < 0) {
        return 0;
      }
      unint64_t v37 = *(const char **)v32;
      uint64_t v36 = v32;
    }
    if (!strcmp(v37, "POS"))
    {
      int v49 = ssftstring_AppendCStr(a14, "POS \"");
      *a4 = v49;
      if (v49 < 0) {
        return 0;
      }
      int v50 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v50;
      if (v50 < 0) {
        return 0;
      }
      int v51 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v51;
      if (v51 < 0) {
        return 0;
      }
      unint64_t v37 = *(const char **)v32;
      uint64_t v34 = v32;
    }
    if (!strcmp(v37, "PRON"))
    {
      unsigned __int16 v33 = strlen(*(const char **)(v32 + 8));
      int v52 = ssftstring_AppendCStr(a14, "Pron \"");
      *a4 = v52;
      if (v52 < 0) {
        return 0;
      }
      int v53 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v53;
      if (v53 < 0) {
        return 0;
      }
      int v54 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v54;
      uint64_t v35 = v32;
      if (v54 < 0) {
        return 0;
      }
    }
    uint64_t v32 = *(void *)(v32 + 16);
  }
  while (v32);
  if (!v36 || !v35 || !v34)
  {
    int v99 = -1944051456;
    goto LABEL_89;
  }
  uint64_t v55 = *(void *)(v111 + 32);
  uint64_t v56 = ssftstring_CStr(a14);
  log_OutText(v55, v109, 5, 0, (uint64_t)"[UTOI RES] %s", v57, v58, v59, v56);
  int v60 = ssftstring_Clear(a14);
  *a4 = v60;
  if (v60 < 0) {
    return 0;
  }
  int v61 = bed_Insert(v110, &szWORD_BEG_5, 1);
  *a4 = v61;
  if (v61 < 0) {
    return 0;
  }
  ++*a9;
  uint64_t v62 = *a15;
  unsigned __int16 v63 = *a16 + 1;
  *a16 = v63;
  unsigned int v64 = *(uint64_t **)(v111 + 8);
  uint64_t v65 = 2 * v63 + 2;
  if (v62)
  {
    uint64_t v66 = (_WORD *)heap_Realloc(v64, v62, v65);
    if (!v66) {
      goto LABEL_86;
    }
    *a15 = (uint64_t)v66;
  }
  else
  {
    uint64_t v66 = (_WORD *)heap_Calloc(v64, 1, v65);
    *a15 = (uint64_t)v66;
    if (!v66) {
      goto LABEL_86;
    }
  }
  *uint64_t v66 = *a16;
  int v67 = SearchTERMINALTable(*(char **)(v34 + 8));
  if (v67) {
    __int16 v68 = v67;
  }
  else {
    __int16 v68 = 42;
  }
  *(_WORD *)(*a15 + 2 * *a16) = v68;
  *a4 = bed_Insert(v110, *(void **)(v35 + 8), v33);
  *a9 += v33;
  int v69 = bed_Insert(v110, &szWORD_END_6, 1);
  *a4 = v69;
  if (v69 < 0) {
    return 0;
  }
  ++*a9;
  if (!v112)
  {
    log_OutText(*(void *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] jparser word length is 0, cannot get hex args", v70, v71, v72, v103);
    int v99 = -1944051712;
    goto LABEL_89;
  }
  a1 = v111;
  uint64_t v73 = heap_Calloc(*(void **)(v111 + 8), (unsigned __int16)a6 + 1, 2);
  if (!v73) {
    goto LABEL_86;
  }
  uint64_t v74 = v73;
  LH_wcsncpy(v73, (unsigned __int16 *)(v108 + 2 * (unsigned __int16)*a13), (unsigned __int16)a6);
  *(_WORD *)(v74 + 2 * (unsigned __int16)a6) = 0;
  __int16 v75 = utf8_16BitNbrOfUtf8Chars(v74);
  if (!v75)
  {
    log_OutText(*(void *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cannot get hex args", v76, v77, v78, v103);
    int v100 = -1944051712;
    goto LABEL_92;
  }
  size_t v79 = (unsigned __int16)(v75 - 1);
  uint64_t v80 = (char *)heap_Calloc(*(void **)(v111 + 8), v79 + 1, 1);
  a2 = v109;
  if (v80)
  {
    uint64_t v81 = (uint64_t)v80;
    strncpy(v80, (const char *)(a19 + (unsigned __int16)*a12), v79)[v79] = 0;
    log_OutText(*(void *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v82, v83, v84, v74);
    uint64_t v85 = v114;
    unsigned int v86 = *(unsigned __int16 *)(v114 + 16);
    unsigned __int16 v87 = v86 + 2 * v79 + 1;
    uint64_t v104 = v74;
    if (*(unsigned __int16 *)(v114 + 18) < v87)
    {
      int v88 = datac_RequestBlock(v106, v107, (unsigned __int16)(v86 + 2 * v79 + 1), &v114);
      *a4 = v88;
      if (v88 < 0)
      {
        heap_Free(*(void **)(v111 + 8), v74);
        int v101 = *(void **)(v111 + 8);
        uint64_t v102 = v81;
        goto LABEL_93;
      }
      uint64_t v85 = v114;
      unsigned int v86 = *(unsigned __int16 *)(v114 + 16);
    }
    unsigned __int16 v89 = (unsigned char *)(*(void *)(v85 + 8) + *(unsigned __int16 *)(v85 + 2) * (unint64_t)v86);
    *(_WORD *)(v85 + 16) = v87;
    __int16 v105 = v79;
    if (v79)
    {
      size_t v90 = v79;
      __int16 v91 = (unsigned __int8 *)v81;
      do
      {
        unsigned int v92 = *v91++;
        LH_itoa(v92, v113, 0x10u);
        v113[2] = 0;
        *unsigned __int16 v89 = v113[0];
        __int16 v93 = v89 + 2;
        v89[1] = v113[1];
        v89 += 2;
        --v90;
      }
      while (v90);
    }
    else
    {
      __int16 v93 = v89;
    }
    *__int16 v93 = 0;
    *a11 += v112;
    *a12 += v105;
    *a13 += a6;
    heap_Free(*(void **)(v111 + 8), v104);
    heap_Free(*(void **)(v111 + 8), v81);
    uint64_t v29 = a17;
    a8 = v107;
    a6 = v106;
    a5 = v110;
    a20 = v108;
    if (*(_DWORD *)(a17 + 16) != 1) {
      goto LABEL_84;
    }
    unsigned int v94 = *(unsigned __int16 *)(a17 + 8);
    uint64_t v95 = *(void *)a17;
    if (v94 < *(unsigned __int16 *)(a17 + 10))
    {
LABEL_83:
      uint64_t v97 = v95 + 12 * v94;
      *(_WORD *)uint64_t v97 = *a18;
      *(void *)(v97 + 2) = 0;
      *a18 += v105;
      ++*(_WORD *)(v29 + 8);
LABEL_84:
      *a10 = *a9;
      goto LABEL_7;
    }
    uint64_t v96 = heap_Realloc(*(uint64_t **)(v111 + 8), v95, 12 * *(unsigned __int16 *)(a17 + 10) + 121);
    if (v96)
    {
      uint64_t v95 = v96;
      uint64_t v29 = a17;
      *(void *)a17 = v96;
      *(_WORD *)(a17 + 10) += 10;
      unsigned int v94 = *(unsigned __int16 *)(a17 + 8);
      goto LABEL_83;
    }
LABEL_86:
    int v99 = -1944051702;
LABEL_89:
    *a4 = v99;
    return 0;
  }
  int v100 = -1944051702;
LABEL_92:
  *a4 = v100;
  int v101 = *(void **)(v111 + 8);
  uint64_t v102 = v74;
LABEL_93:
  heap_Free(v101, v102);
  return 0;
}

uint64_t wparserJparser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplJparser;
  return result;
}

uint64_t wparser_impl_jparser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = 0;
  if (!a5) {
    return 2350915591;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    __int16 v12 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 88);
    if (v12)
    {
      void *v12 = a3;
      v12[1] = a4;
      uint64_t v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[5] = "WPARSER_IMPL";
      *(void *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(void *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_jparser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v4, v5, v6, v13);
  uint64_t v8 = JpRemove(*(void **)(v7 + 8), (uint64_t *)(a1 + 32));
  if ((v8 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v9, v10, v11, v8);
  }
  return v8;
}

uint64_t wparser_impl_jparser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v3, v4, v5, v11);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_jparser_Init(uint64_t a1, int a2, void *a3, const char *a4, const char *a5, int a6, unsigned char *a7)
{
  uint64_t v13 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  *(void *)(a1 + 48) = a3;
  if (strcmp(a5, "win932"))
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 40), 1802, "%s%s", v14, v15, v16, v17, a5);
    return 2350915591;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = xcode_Utf16leToWin932;
  if (*a7)
  {
    uint64_t v19 = (*(uint64_t (**)(void, void, unsigned char *, uint64_t))(*a3 + 64))(a3[1], a3[2], a7, a1 + 64);
    if ((v19 & 0x80000000) != 0)
    {
      uint64_t v18 = v19;
      uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v27 = 1819;
      unsigned __int16 v28 = 0;
LABEL_15:
      log_OutPublic(v25, v26, v27, v28, v20, v21, v22, v23, v30);
      return v18;
    }
    a3 = *(void **)(a1 + 48);
  }
  *(void *)(a1 + 56) = 0;
  if (!strcmp(a4, "null")) {
    goto LABEL_11;
  }
  uint64_t v24 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*a3 + 64))(a3[1], a3[2], a4, a1 + 56);
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v18 = v24;
    uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 32);
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v30 = "xlit data : ";
    unsigned __int16 v28 = "%s%s";
    uint64_t v27 = 1804;
    goto LABEL_15;
  }
  a3 = *(void **)(a1 + 48);
LABEL_11:
  uint64_t v18 = JpCreate(*(_WORD **)a1, *(void *)(a1 + 8), *a3, a3[1], a3[2], *((_WORD *)a3 + 12), *((_DWORD *)a3 + 7), (uint64_t *)(a1 + 32), *(void *)(a1 + 40));
  if ((v18 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 80) = a6;
  }
  return v18;
}

uint64_t wparser_impl_jparser_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, uint64_t a13, uint64_t *a14, uint64_t a15)
{
  unsigned __int16 v42 = a5;
  int v41 = 0;
  uint64_t v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v25 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  int v26 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v27 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v41, 0);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v34 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v41 + 1));
      if (!v33) {
        return v25;
      }
      uint64_t v34 = (char *)v33;
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v28, (unsigned __int16)v41, v33, &v42, *(void *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        v34[v42] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v35, v36, v37, (uint64_t)v34);
        if (v42)
        {
          uint64_t v29 = JpParse(*(void *)(a1 + 32), v34, v42, a6, a7, a8, a9, a10, a11, a12, a14, a15, *(_DWORD *)(a1 + 80), a3, v28);
        }
        else
        {
          unsigned __int16 v40 = 0;
          uint64_t v29 = bed_GetcElem(a8, &v40);
          if ((v29 & 0x80000000) == 0)
          {
            if (!v40 || (uint64_t v29 = bed_Remove(a8, 0, v40), (v29 & 0x80000000) == 0))
            {
              int v39 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, 0, 0);
              uint64_t v25 = v39 & (v39 >> 31);
LABEL_11:
              heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v28);
              if (v34) {
                heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v34);
              }
              return v25;
            }
          }
        }
      }
    }
    uint64_t v25 = v29;
    goto LABEL_11;
  }
  return v25;
}

uint64_t wparser_impl_jparser_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, __int16 a5, uint64_t a6, int a7, int a8, __int16 a9, uint64_t a10, int a11)
{
  LOWORD(v37) = a5;
  int v36 = 0;
  uint64_t v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v21 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  int v22 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      uint64_t v30 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      uint64_t v29 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29) {
        return v21;
      }
      uint64_t v30 = v29;
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, int *, void))(a1 + 72))(*(void *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(void *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(unsigned char *)(v30 + (unsigned __int16)v37) = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        uint64_t v25 = DoJPJSpell(*(void *)(a1 + 16), *(void *)(a1 + 40), *(void *)(a1 + 48), v30, (unsigned __int16)v37, a6, a7, a8, v35, a10, a11);
      }
    }
    uint64_t v21 = v25;
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v24);
    if (v30) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v30);
    }
  }
  return v21;
}

uint64_t wparser_impl_jparser_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  unsigned __int16 v29 = a4;
  int v28 = 0;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  uint64_t v13 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v28, 0);
    if ((v16 & 0x80000000) != 0)
    {
      uint64_t v21 = 0;
      uint64_t v13 = v16;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      uint64_t v20 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v28 + 1));
      if (!v20) {
        return v13;
      }
      uint64_t v21 = (char *)v20;
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v15, (unsigned __int16)v28, v20, &v29, *(void *)(a1 + 64));
      if ((v13 & 0x80000000) == 0)
      {
        v21[v29] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v22, v23, v24, (uint64_t)v21);
        uint64_t v25 = *(void *)(a1 + 48);
        if (*(_DWORD *)(v25 + 28) == 1)
        {
          uint64_t v13 = DoJPJLatin(*(void *)(a1 + 16), *(void *)(a1 + 40), v25, v21, a5);
          if (a5)
          {
            if (*a5)
            {
              int v26 = *a3;
              if ((v26 & 0x80000000) == 0) {
                *(_WORD *)*a5 = v26;
              }
            }
          }
        }
      }
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
    if (v21) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v21);
    }
  }
  return v13;
}

uint64_t wparser_impl_jparser_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t get_a_rule(uint64_t a1)
{
  uint64_t result = 0;
  if ((a1 & 0x8000000000000000) == 0 && a1 < 1) {
    return (uint64_t)*(&pBG_grammar + a1);
  }
  return result;
}

uint64_t find_grammar_right(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = Sparse_index[2 * v2];
  if (v3 != -1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = Sparse_index[2 * v2 + 1];
    if ((v3 & 0x8000000000000000) == 0 && v3 < 1) {
      uint64_t v4 = *(&pBG_grammar + v3);
    }
    unsigned int v6 = 3;
    while (1)
    {
      uint64_t v7 = *(void *)(v1 + 8 * --v6);
      uint64_t v8 = v4[v6];
      if (v7 < v8) {
        return -1;
      }
      if (v7 > v8) {
        break;
      }
      if (v6 < 2)
      {
        uint64_t v9 = Sparse_index[2 * v2];
LABEL_21:
        *a1 = (uint64_t)v4;
        return v9;
      }
    }
    uint64_t v4 = 0;
    if ((v5 & 0x8000000000000000) == 0 && v5 < 1) {
      uint64_t v4 = *(&pBG_grammar + v5);
    }
    unsigned int v10 = 3;
    while (1)
    {
      uint64_t v11 = *(void *)(v1 + 8 * --v10);
      uint64_t v12 = v4[v10];
      if (v11 < v12) {
        break;
      }
      if (v11 > v12) {
        return -1;
      }
      if (v10 < 2)
      {
        uint64_t v9 = Sparse_index[2 * v2 + 1];
        goto LABEL_21;
      }
    }
    uint64_t v13 = v5 - v3;
    if (v5 - v3 == 1)
    {
      uint64_t v4 = 0;
      uint64_t v9 = -1;
    }
    else
    {
      do
      {
        uint64_t v4 = 0;
        if (v13 >= 0) {
          uint64_t v15 = v13;
        }
        else {
          uint64_t v15 = v13 + 1;
        }
        uint64_t v9 = v3 + (v15 >> 1);
        if (!v9) {
          uint64_t v4 = &BG_grammar;
        }
        unsigned int v16 = 3;
        while (1)
        {
          uint64_t v17 = *(void *)(v1 + 8 * --v16);
          uint64_t v18 = v4[v16];
          if (v17 < v18) {
            break;
          }
          if (v17 > v18)
          {
            uint64_t v3 = v9;
            goto LABEL_35;
          }
          if (v16 < 2) {
            goto LABEL_21;
          }
        }
        uint64_t v5 = v9;
LABEL_35:
        uint64_t v4 = 0;
        uint64_t v13 = v5 - v3;
        uint64_t v9 = -1;
      }
      while (v5 - v3 != 1);
    }
    goto LABEL_21;
  }
  return -1;
}

uint64_t find_next_grammar_right(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 >= a3)
  {
    if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
    {
      uint64_t v3 = (uint64_t)*(&pBG_grammar + a3);
      if (v3)
      {
        unsigned int v4 = 3;
        while (1)
        {
          --v4;
          if (*(void *)(*a1 + 8 * v4) != *(void *)(v3 + 8 * v4)) {
            break;
          }
          if (v4 < 2)
          {
            *a1 = v3;
            return a3 - 1;
          }
        }
      }
    }
    a3 = a2 + 1;
  }
  uint64_t v5 = -1;
  if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
  {
    uint64_t v6 = (uint64_t)*(&pBG_grammar + a3);
    if (v6)
    {
      unsigned int v7 = 3;
      while (1)
      {
        --v7;
        if (*(void *)(*a1 + 8 * v7) != *(void *)(v6 + 8 * v7)) {
          break;
        }
        if (v7 < 2)
        {
          *a1 = v6;
          return a3 + 1;
        }
      }
    }
    return -1;
  }
  return v5;
}

uint64_t get_me_terminal(uint64_t a1)
{
  uint64_t v1 = 1;
  for (uint64_t i = &pBG_terminal_line; *(void *)*i != a1; ++i)
  {
    if (!--v1) {
      return -1;
    }
  }
  return *((void *)*i + 8);
}

uint64_t mbs_copy(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  uint64_t v7 = 2350915594;
  if (a4 < 1)
  {
    if (!a4 || *(void *)a1)
    {
      uint64_t v13 = (int *)(a1 + 8);
LABEL_11:
      uint64_t v7 = 0;
      *uint64_t v13 = a4;
    }
  }
  else
  {
    int v10 = 4 * a4;
    uint64_t v11 = heap_Calloc(a5, 1, (4 * a4));
    *(void *)a1 = v11;
    if (v11)
    {
      uint64_t v12 = 0;
      *(_DWORD *)(a1 + 8) = a4;
      uint64_t v13 = (int *)(a1 + 8);
      if (v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      do
      {
        *(unsigned char *)(*(void *)a1 + v12) = *(unsigned char *)(*a2 + 4 * a3 + v12);
        ++v12;
      }
      while (v14 != v12);
      goto LABEL_11;
    }
  }
  return v7;
}

uint64_t mbs_create(uint64_t a1, int a2, const char *a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v8 = 2350915591;
  if (a3)
  {
    a2 = sjis_len(a3);
    if (a2 == -1) {
      return v8;
    }
  }
  if (a2 > 0)
  {
    uint64_t v9 = heap_Calloc(a4, 1, (4 * a2));
    *(void *)a1 = v9;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a1;
  if (a2)
  {
LABEL_6:
    if (!v9) {
      return 2350915594;
    }
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (v5)
  {
    int v10 = strlen(v5);
    if (v10 >= 1)
    {
      int v11 = 0;
      int v12 = 1;
      do
      {
        char v13 = *v5;
        if (v12 == 1)
        {
          uint64_t v14 = 4 * v11;
          *(unsigned char *)(*(void *)a1 + v14) = 1;
          BOOL v15 = (v13 + 32) >= 0x1Du && (v13 + 127) >= 0x1Fu;
          *(unsigned char *)(*(void *)a1 + (int)v14 + 1) = v13;
          ++v11;
          if (v15) {
            int v12 = 1;
          }
          else {
            int v12 = 2;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + 4 * v11 - 4) = 2;
          *(unsigned char *)(*(void *)a1 + 4 * v11 - 2) = v13;
          int v12 = 1;
        }
        ++v5;
        --v10;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t mbs_compare(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v4 = *((unsigned int *)a1 + 2);
    int v5 = *(_DWORD *)(a2 + 8);
    if ((int)v4 > v5) {
      return 1;
    }
    if ((int)v4 >= v5)
    {
      if ((int)v4 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *a1;
        uint64_t v8 = *(void *)a2 + 1;
        for (uint64_t i = (char *)(v7 + 1); ; i += 4)
        {
          int v10 = *(char *)(v7 + 4 * v6);
          int v11 = *(char *)(*(void *)a2 + 4 * v6);
          if (v10 > v11) {
            break;
          }
          if (v10 < v11) {
            return 0xFFFFFFFFLL;
          }
          int v12 = i;
          char v13 = (char *)v8;
          if (v10 >= 1)
          {
            do
            {
              int v15 = *v12++;
              int v14 = v15;
              int v16 = *v13++;
              BOOL v17 = v14 < v16;
              if (v14 > v16) {
                return 1;
              }
              if (v17) {
                return 0xFFFFFFFFLL;
              }
            }
            while (--v10);
          }
          uint64_t result = 0;
          ++v6;
          v8 += 4;
          if (v6 == v4) {
            return result;
          }
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *mbs_free(uint64_t *result, void *a2)
{
  if (*result) {
    return heap_Free(a2, *result);
  }
  return result;
}

uint64_t log_mbs_fput_sjis(uint64_t a1, int *a2)
{
  if (a2[2] < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = *(void *)a2;
    if (*(char *)(*(void *)a2 + 4 * v4) < 1)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        __s[v7] = *(unsigned char *)(v6 + v5 + v7);
        ++v7;
      }
      while (v7 < *(char *)(v6 + 4 * v4));
    }
    __s[v7] = 0;
    uint64_t result = ssftstring_AppendCStr(a1, __s);
    if ((result & 0x80000000) != 0) {
      break;
    }
    ++v4;
    v5 += 4;
  }
  while (v4 < a2[2]);
  return result;
}

uint64_t sjis_len(const char *a1)
{
  uint64_t v1 = a1;
  int v2 = strlen(a1);
  if (v2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 1;
  do
  {
    if (v4 == 1)
    {
      BOOL v5 = (*v1 + 32) >= 0x1Du && (*v1 + 127) >= 0x1Fu;
      uint64_t v3 = (v3 + 1);
      if (v5) {
        int v4 = 1;
      }
      else {
        int v4 = 2;
      }
    }
    else
    {
      int v4 = 1;
    }
    ++v1;
    --v2;
  }
  while (v2);
  return v3;
}

unint64_t mbs_len_bytes(unint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  int v2 = (char **)result;
  LODWORD(result) = 0;
  uint64_t v3 = *v2;
  do
  {
    int v4 = *v3;
    v3 += 4;
    uint64_t result = (result + v4);
    --v1;
  }
  while (v1);
  return result;
}

uint64_t mbs_add_str(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t v6 = 2350915591;
  if (a3 < 0 || *(_DWORD *)(a2 + 8) < a4 + a3) {
    return v6;
  }
  uint64_t v12 = *(int *)(a1 + 8);
  if (!v12)
  {
    size_t v14 = (4 * a4);
    uint64_t v13 = heap_Alloc((uint64_t)a6, v14);
    *(void *)a1 = v13;
    if (v13) {
      goto LABEL_7;
    }
    return 2350915594;
  }
  uint64_t v13 = heap_Realloc(a6, *(void *)a1, (4 * (v12 + a4)));
  if (!v13) {
    return 2350915594;
  }
  *(void *)a1 = v13;
  size_t v14 = (4 * a4);
LABEL_7:
  memcpy((void *)(v13 + 4 * v12), (const void *)(*(void *)a2 + 4 * a3), v14);
  if (a4 >= 1)
  {
    uint64_t v15 = a4;
    uint64_t v16 = 4 * v12 + 3;
    do
    {
      *(unsigned char *)(*(void *)a1 + v16) = a5;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 8) += a4;
  return v6;
}

uint64_t mbs2sjis(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5 = a3 + a2;
  if (*(_DWORD *)(a1 + 8) < a3 + (int)a2) {
    return -1;
  }
  if (a3 >= 1)
  {
    __int16 v6 = 0;
    uint64_t v7 = 4 * (int)a2;
    uint64_t v8 = (a2 << 34) | 0x100000000;
    while (*(char *)(*(void *)a1 + v7) < 1)
    {
LABEL_9:
      LODWORD(a2) = a2 + 1;
      v7 += 4;
      v8 += 0x400000000;
      if ((int)a2 >= v5) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + v7);
    uint64_t v10 = v8;
    while (1)
    {
      *(unsigned char *)(a4 + v6++) = *(unsigned char *)(*(void *)a1 + (v10 >> 32));
      if (a5 < v6) {
        return -1;
      }
      v10 += 0x100000000;
      if (!--v9) {
        goto LABEL_9;
      }
    }
  }
  __int16 v6 = 0;
LABEL_12:
  *(unsigned char *)(a4 + v6) = 0;
  return v6;
}

uint64_t compare_tag(uint64_t a1, int a2, char *__s)
{
  uint64_t v3 = __s;
  int v6 = strlen(__s);
  if (v6 + a2 > *(_DWORD *)(a1 + 8)) {
    return 0;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    for (uint64_t i = (unsigned __int8 *)(*(void *)a1 + 4 * a2 + 1); *(i - 1) == 1 && *i == *v3; i += 4)
    {
      ++v3;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t mbs_one_char(void *a1, int a2)
{
  return *(char *)(*a1 + 4 * a2 + 1);
}

uint64_t *attribute_copy_one(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = (uint64_t *)heap_Alloc((uint64_t)a2, 24);
  if (v4)
  {
    int v5 = strlen(*(const char **)a1);
    int v6 = (char *)heap_Alloc((uint64_t)a2, (v5 + 1));
    *int v4 = (uint64_t)v6;
    if (v6)
    {
      strcpy(v6, *(const char **)a1);
      int v7 = strlen(*(const char **)(a1 + 8));
      uint64_t v8 = (char *)heap_Alloc((uint64_t)a2, (v7 + 1));
      v4[1] = (uint64_t)v8;
      if (v8)
      {
        strcpy(v8, *(const char **)(a1 + 8));
        v4[2] = *(void *)(a1 + 16);
        return v4;
      }
      heap_Free(a2, *v4);
    }
    heap_Free(a2, (uint64_t)v4);
    return 0;
  }
  return v4;
}

uint64_t *attribute_copy_all(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    int v4 = 0;
    int v5 = 0;
    char v6 = 1;
    while (1)
    {
      uint64_t result = attribute_copy_one(v3, a2);
      if (!result) {
        break;
      }
      int v7 = result;
      result[2] = 0;
      if ((v6 & 1) == 0)
      {
        v4[2] = (uint64_t)result;
        uint64_t result = v5;
      }
      char v6 = 0;
      uint64_t v3 = *(void *)(v3 + 16);
      int v4 = v7;
      int v5 = result;
      if (!v3) {
        return result;
      }
    }
    attribute_free_all(v5, a2);
    return 0;
  }
  return result;
}

uint64_t *attribute_free_all(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (*result) {
      heap_Free(a2, *result);
    }
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      heap_Free(a2, v4);
    }
    attribute_free_all(*(void *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

unsigned char *is_internal(uint64_t a1)
{
  uint64_t result = (unsigned char *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, a1);
  if (result) {
    return (unsigned char *)(*result == 95 && result[1] == 73);
  }
  return result;
}

uint64_t exist_symbol(uint64_t a1, uint64_t a2)
{
  v10[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  v10[1] = *(void *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a2 + 40);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 1;
  }
  v10[0] = v5;
  while (1)
  {
    uint64_t v6 = v4;
    int v7 = (uint64_t *)v10[v4];
    pointer_of_symbol = (unsigned char *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v7);
    if (!pointer_of_symbol || *pointer_of_symbol != 95 || pointer_of_symbol[1] != 73) {
      break;
    }
    if (exist_symbol(a1, v7)) {
      return 1;
    }
LABEL_13:
    uint64_t v4 = 1;
    if (v6) {
      return 0;
    }
  }
  if (*(void *)a1 != *v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 4 * v6 + 12)) {
    goto LABEL_13;
  }
  return 1;
}

uint64_t find_attribute(uint64_t a1, uint64_t a2, void *a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  v14[1] = *(void *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 1;
  }
  v14[0] = v7;
  while (1)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t *)v14[v6];
    pointer_of_symbol = (unsigned char *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v9);
    if (pointer_of_symbol && *pointer_of_symbol == 95 && pointer_of_symbol[1] == 73)
    {
      uint64_t result = find_attribute(a1, v9, a3);
      if (result == 1) {
        return result;
      }
      goto LABEL_17;
    }
    if (*(void *)a1 == *v9 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 4 * v8 + 12))
    {
      uint64_t v12 = v9[3];
      if (v12) {
        break;
      }
    }
LABEL_17:
    uint64_t v6 = 1;
    if (v8) {
      return 0;
    }
  }
  uint64_t v13 = *(const char **)(a1 + 16);
  while (strcmp(*(const char **)v12, v13))
  {
    uint64_t v12 = *(void *)(v12 + 16);
    if (!v12) {
      goto LABEL_17;
    }
  }
  *a3 = *(void *)(v12 + 8);
  return 1;
}

uint64_t get_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (find_attribute(a1, a2, &v5) == 1) {
    return v5;
  }
  if (strcmp(*(const char **)(a1 + 16), "POS")) {
    return 0;
  }
  uint64_t v4 = *(void *)a1;
  return get_pointer_of_symbol((uint64_t)&SF_symbol_file, v4);
}

BOOL compare_operand(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  attribute = *(const char **)(a2 + 8);
  if (!*(_DWORD *)a2) {
    attribute = (const char *)get_attribute(*(void *)(a2 + 8), a4);
  }
  uint64_t v8 = *(const char **)(a3 + 8);
  if (!*(_DWORD *)a3) {
    uint64_t v8 = (const char *)get_attribute(*(void *)(a3 + 8), a4);
  }
  if (attribute) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 0;
  }
  int v10 = strcmp(attribute, v8);
  BOOL result = v10 == 0;
  if (a1 != 2)
  {
    BOOL v12 = v10 != 0;
    return a1 == 3 && v12;
  }
  return result;
}

uint64_t eval_cond(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v3 = a1;
  while (1)
  {
    int v4 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 != 1) {
      break;
    }
    if (!eval_cond(*(void *)(v3 + 8), a2))
    {
      uint64_t v3 = *(void *)(v3 + 16);
      if (v3) {
        continue;
      }
    }
    return 1;
  }
  if ((v4 - 2) >= 2)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        uint64_t v5 = *(void *)(v3 + 8);
        return exist_symbol(v5, a2);
      }
      return 0;
    }
    return eval_cond(*(void *)(v3 + 8), a2) && eval_cond(*(void *)(v3 + 16), a2);
  }
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)(v3 + 16);
  return compare_operand(v4, v7, v8, a2);
}

uint64_t assign_attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t attribute = *(void *)(a2 + 8);
  if (*(_DWORD *)a2 || (uint64_t attribute = get_attribute(*(void *)(a2 + 8), a3)) != 0)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    if (v8)
    {
      BOOL v9 = *(const char **)(*(void *)(a1 + 8) + 16);
      while (1)
      {
        uint64_t v10 = v8;
        uint64_t v8 = *(void *)(v8 + 16);
        int v11 = strcmp(*(const char **)v10, v9);
        if (!v8) {
          break;
        }
        if (!v11) {
          goto LABEL_13;
        }
      }
      if (!v11)
      {
LABEL_13:
        *(void *)uint64_t v10 = v9;
        *(void *)(v10 + 8) = attribute;
        return 1;
      }
      uint64_t result = heap_Alloc(a4, 24);
      if (!result) {
        return result;
      }
      *(void *)uint64_t result = *(void *)(*(void *)(a1 + 8) + 16);
      *(void *)(result + 8) = attribute;
      *(void *)(result + 16) = 0;
      *(void *)(v10 + 16) = result;
    }
    else
    {
      uint64_t result = heap_Alloc(a4, 24);
      if (!result) {
        return result;
      }
      *(void *)uint64_t result = *(void *)(*(void *)(a1 + 8) + 16);
      *(void *)(result + 8) = attribute;
      *(void *)(result + 16) = 0;
      *(void *)(a3 + 24) = result;
    }
  }
  return 1;
}

uint64_t exec_actions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t v5 = a1;
  while (1)
  {
    if (*(_DWORD *)v5 == 1)
    {
      uint64_t v7 = *(uint64_t **)(v5 + 8);
      if (*v7 && !eval_cond(*v7, a2)) {
        uint64_t v8 = v7[2];
      }
      else {
        uint64_t v8 = v7[1];
      }
      uint64_t result = exec_actions(v8, a2, a3);
      if (!result) {
        return result;
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)v5) {
      return 0;
    }
    uint64_t result = assign_attribute(**(void **)(v5 + 8), *(void *)(*(void *)(v5 + 8) + 8), a2, a3);
    if (!result) {
      return result;
    }
LABEL_12:
    uint64_t v5 = *(void *)(v5 + 16);
    if (!v5) {
      return 1;
    }
  }
}

BOOL compare_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (!a1 || !a2) {
    return (v3 | v2) == 0;
  }
  while (!strcmp(*(const char **)v3, *(const char **)v2) && !strcmp(*(const char **)(v3 + 8), *(const char **)(v2 + 8)))
  {
    uint64_t v3 = *(void *)(v3 + 16);
    uint64_t v2 = *(void *)(v2 + 16);
    if (!v3 || !v2) {
      return (v3 | v2) == 0;
    }
  }
  return 0;
}

uint64_t log_output_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t result = ssftstring_AppendCStr(a1, "{");
  if ((result & 0x80000000) == 0)
  {
    if (a2)
    {
      char v5 = 0;
      while (1)
      {
        if (v5)
        {
          uint64_t result = ssftstring_AppendCStr(a1, ",");
          if ((result & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t result = ssftstring_AppendCStr(a1, *(char **)a2);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = ssftstring_AppendCStr(a1, "=\"");
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = ssftstring_AppendCStr(a1, *(char **)(a2 + 8));
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = ssftstring_AppendCStr(a1, "\" ");
        if ((result & 0x80000000) != 0) {
          break;
        }
        a2 = *(void *)(a2 + 16);
        char v5 = 1;
        if (!a2) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      return ssftstring_AppendCStr(a1, "}");
    }
  }
  return result;
}

uint64_t box_hash_get_address(int a1, int a2)
{
  int v2 = 20 * (a1 % 200);
  if ((a2 / 20)) {
    return (v2 + 20 * (a2 / 20) - a2 + 19);
  }
  else {
    return (v2 + a2 % 20);
  }
}

uint64_t box_hash_get_leading_word(void *a1, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(*a1 + 8 * a4);
  if (!v4) {
    return 0;
  }
  while (*(__int16 *)(v4 + 10) != a3 || *(__int16 *)(v4 + 8) != a2)
  {
    uint64_t v4 = *(void *)(v4 + 16);
    if (!v4) {
      return 0;
    }
  }
  return *(void *)v4;
}

uint64_t *box_one_free_all(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *result;
    if (v4)
    {
      do
      {
        uint64_t v5 = *(void *)(v4 + 24);
        word_data_free_all((uint64_t **)v4, a2);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t *box_hash_free(void *a1, void *a2)
{
  for (uint64_t i = 0; i != 4000; ++i)
  {
    uint64_t result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        uint64_t v6 = (uint64_t *)result[2];
        box_one_free_all(result, a2);
        uint64_t result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t box_hash_set_unknown(uint64_t *a1, int a2, char *__b)
{
  if (a2 >= 1) {
    memset_pattern16(__b, &unk_20D62E130, 4 * a2);
  }
  int v5 = *((_DWORD *)a1 + 2);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    do
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      if (v8)
      {
        do
        {
          if (*(void *)v8 && (*(__int16 *)(v8 + 10) & 0x80000000) == 0) {
            bzero(&__b[4 * *(__int16 *)(v8 + 8)], 4 * *(unsigned __int16 *)(v8 + 10) + 4);
          }
          uint64_t v8 = *(void *)(v8 + 16);
        }
        while (v8);
        int v5 = *((_DWORD *)a1 + 2);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return 1;
}

uint64_t box_hash_add_word(void *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  __int16 v7 = a4;
  __int16 v8 = a3;
  uint64_t v11 = *(void *)(*a1 + 8 * a5);
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3) {
        break;
      }
      uint64_t v11 = *(void *)(v11 + 16);
      if (!v11) {
        goto LABEL_7;
      }
    }
    uint64_t result = v11;
    goto LABEL_13;
  }
  uint64_t v12 = 0;
LABEL_7:
  uint64_t result = heap_Alloc(a6, 24);
  if (result)
  {
    *(_WORD *)(result + 8) = v8;
    *(_WORD *)(result + 10) = v7;
    *(_WORD *)(result + 12) = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 16) = 0;
    if (v12) {
      size_t v14 = (uint64_t *)(v12 + 16);
    }
    else {
      size_t v14 = (uint64_t *)(*a1 + 8 * a5);
    }
    *size_t v14 = result;
LABEL_13:
    uint64_t v15 = 0;
    uint64_t v16 = (void *)result;
    do
    {
      uint64_t v17 = v15;
      uint64_t v15 = *v16;
      uint64_t v16 = (void *)(*v16 + 24);
    }
    while (v15);
    uint64_t v18 = (void *)(v17 + 24);
    if (!v17) {
      uint64_t v18 = (void *)result;
    }
    *uint64_t v18 = a2;
    return 1;
  }
  return result;
}

uint64_t add_info_to_table(uint64_t a1, int a2, int a3, uint64_t **a4, void *a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (mbs2sjis(*(void *)(*(void *)(a1 + 16) + 8), 0, *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 8), (uint64_t)__s1, 64) == -1)return 0; {
  uint64_t number_of_symbol = get_number_of_symbol(a4, __s1);
  }
  if (number_of_symbol == -1)
  {
    free_information((uint64_t *)a1, a8);
    attribute_free_all(a6, a8);
    return 1;
  }
  uint64_t v17 = number_of_symbol;
  int address = box_hash_get_address(a2, a3);
  if (*(_DWORD *)(a7 + 40) == 1)
  {
    uint64_t leading_word = box_hash_get_leading_word(a5, a2, a3, address);
    if (leading_word)
    {
      uint64_t v20 = (uint64_t *)leading_word;
      while (mbs_compare(*(uint64_t **)(a1 + 8), *(void *)(*v20 + 8))
           || mbs_compare(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(*v20 + 16) + 8))|| !compare_attribute((uint64_t)a6, v20[2]))
      {
        uint64_t v20 = (uint64_t *)v20[3];
        if (!v20) {
          goto LABEL_10;
        }
      }
      *(void *)(a1 + 24) = 0;
      uint64_t v23 = *v20;
      for (uint64_t i = *(void *)(*v20 + 24); i; uint64_t i = *(void *)(i + 24))
        uint64_t v23 = i;
      *(void *)(v23 + 24) = a1;
      return 1;
    }
  }
LABEL_10:
  uint64_t result = heap_Alloc((uint64_t)a8, 32);
  if (result)
  {
    uint64_t v22 = result;
    *(void *)uint64_t result = a1;
    *(void *)(result + 8) = v17;
    *(void *)(result + 16) = a6;
    *(void *)(result + 24) = 0;
    uint64_t result = box_hash_add_word(a5, result, a2, a3, address, (uint64_t)a8);
    if (result != 1)
    {
      heap_Free(a8, v22);
      return 0;
    }
  }
  return result;
}

uint64_t get_char_kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t result = mbs2sjis(a1, a2, 1, (uint64_t)v3, 256);
  if (result != -1) {
    return get_char_kind_hash(v3[0], v3[1]);
  }
  return result;
}

uint64_t *unknown_info_create(const char *a1, const char *a2, const char *a3, const char *a4, void *a5)
{
  info = (uint64_t *)create_info(0, a1, a5);
  if (info)
  {
    uint64_t v10 = create_info(1, a2, a5);
    info[2] = v10;
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = 0;
    uint64_t v12 = create_info(2, a3, a5);
    *(void *)(v11 + 16) = v12;
    if (!v12) {
      goto LABEL_6;
    }
    uint64_t v13 = v12;
    *(void *)(v12 + 16) = 0;
    uint64_t v14 = create_info(3, a4, a5);
    *(void *)(v13 + 16) = v14;
    if (v14)
    {
      *(void *)(v14 + 16) = 0;
    }
    else
    {
LABEL_6:
      free_information(info, a5);
      return 0;
    }
  }
  return info;
}

unsigned char *get_pron_from_grapheme(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  int v5 = a3 - a2;
  if (a3 < (int)a2) {
    return 0;
  }
  int v10 = v5 + 1;
  uint64_t v11 = heap_Alloc((uint64_t)a5, (2 * (v5 + 1)) | 1u);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (unsigned __int8 *)v11;
  int v13 = 8 * v10;
  if (a4 == 3) {
    uint64_t v14 = v13 | 2u;
  }
  else {
    uint64_t v14 = v13 | 1u;
  }
  uint64_t v15 = (unsigned char *)heap_Alloc((uint64_t)a5, v14);
  if (v15)
  {
    if (mbs2sjis(a1, a2, v10, (uint64_t)v12, (2 * v10) | 1u) != -1)
    {
      uint64_t v25 = 0;
      *uint64_t v15 = 0;
      if (*v12)
      {
        int v16 = 0;
        int v17 = 0;
        int v18 = 0;
        int v19 = 0;
        int v20 = 0;
        uint64_t v21 = v12;
        do
        {
          get_pron_from_grapheme_hash(v21, &v15[v19], (int *)&v25 + 1, &v25, a4);
          if (HIDWORD(v25))
          {
            v20 += HIDWORD(v25);
            v19 += v25;
            int v16 = v17;
            int v17 = v18;
            int v18 = v19;
          }
          uint64_t v21 = &v12[v20];
        }
        while (*v21);
        if (a4 == 3 && v16 >= 1)
        {
          if (v19 >= v16)
          {
            uint64_t v22 = v19;
            do
              v15[v22 + 1] = v15[v22];
            while (v22-- > v16);
          }
          v15[v16] = 39;
        }
      }
      goto LABEL_20;
    }
    heap_Free(a5, (uint64_t)v15);
    heap_Free(a5, (uint64_t)v12);
    return 0;
  }
LABEL_20:
  heap_Free(a5, (uint64_t)v12);
  return v15;
}

uint64_t non_lookup_tag(uint64_t a1, uint64_t a2, int a3, const char *a4, const char *a5, uint64_t **a6, void *a7, uint64_t a8, void *a9)
{
  int v9 = a3 - a2;
  if (a3 < (int)a2) {
    return 0;
  }
  uint64_t result = heap_Alloc((uint64_t)a9, (2 * (v9 + 1)) | 1u);
  if (result)
  {
    int v16 = (const char *)result;
    if (mbs2sjis(a1, a2, v9 + 1, result, (2 * (v9 + 1)) | 1u) == -1)
    {
      heap_Free(a9, (uint64_t)v16);
    }
    else
    {
      int v17 = unknown_info_create(v16, a4, a5, "922", a9);
      heap_Free(a9, (uint64_t)v16);
      if (v17)
      {
        if (*(unsigned char *)(a8 + 68)) {
          int v18 = a2 + 1;
        }
        else {
          int v18 = a2;
        }
        if (add_info_to_table((uint64_t)v17, v18, v9, a6, a7, 0, a8, a9)) {
          return 1;
        }
        free_information(v17, a9);
      }
    }
    return 0;
  }
  return result;
}

uint64_t look_up_unknown_word(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4, void *a5)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a2 + 68)) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = (char *)heap_Calloc(a5, v10, 4);
  if (v11 && box_hash_set_unknown(a4, v10, v11))
  {
    if ((int)v10 >= 1)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = (v10 - 1);
      do
      {
        if (v12 == v14)
        {
          int v15 = *(_DWORD *)&v11[4 * v14];
        }
        else
        {
          uint64_t v16 = v12 + 1;
          int v15 = *(_DWORD *)&v11[4 * v12];
          if (*(_DWORD *)&v11[4 * v12 + 4] == v15) {
            goto LABEL_14;
          }
        }
        if (v15 == 1
          && !non_lookup_tag(a1, v13 - (*(unsigned char *)(a2 + 68) != 0), v12 - (*(unsigned char *)(a2 + 68) != 0), (const char *)(a2 + 136), (const char *)(a2 + 200), a3, a4, a2, a5))
        {
          goto LABEL_16;
        }
        uint64_t v16 = v12 + 1;
        int v13 = v12 + 1;
LABEL_14:
        uint64_t v12 = v16;
      }
      while (v16 != v10);
    }
    uint64_t v17 = 1;
  }
  else
  {
LABEL_16:
    uint64_t v17 = 0;
  }
  heap_Free(a5, (uint64_t)v11);
  return v17;
}

uint64_t mbs_normalize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    int v2 = *(_DWORD *)(result + 8);
    uint64_t result = 1;
    if (v2 >= 1)
    {
      while (1)
      {
        int v3 = v2 - 1;
        uint64_t v4 = (unsigned char *)(*v1 + 4 * (v2 - 1));
        int v5 = v4[1];
        if (*v4 == 1)
        {
          if ((v5 & 0xFE) == 0xDE)
          {
            if (v5 == 222) {
              uint64_t v6 = Norm_in1;
            }
            else {
              uint64_t v6 = (char **)&Norm_in2;
            }
            if (v5 == 222) {
              __int16 v7 = (char **)&Norm_out1;
            }
            else {
              __int16 v7 = Norm_out2;
            }
            if (v2 == 1) {
              return 1;
            }
            if (*(v4 - 4) == 1)
            {
              int v8 = **v6;
              if (**v6)
              {
                unsigned int v9 = v6 + 1;
                while (v8 != *(v4 - 3))
                {
                  uint64_t v10 = *v9++;
                  int v8 = *v10;
                  ++v7;
                  if (!*v10) {
                    goto LABEL_51;
                  }
                }
LABEL_48:
                *uint64_t v4 = 0;
                *(v4 - 4) = 2;
                uint64_t v21 = *v7;
                *(v4 - 3) = **v7;
                *(v4 - 2) = v21[1];
                int v3 = v2 - 2;
              }
            }
          }
          else if ((v5 + 90) <= 0x37u)
          {
            uint64_t v17 = 0;
            unsigned __int8 v18 = -79;
            while (v5 != v18)
            {
              unsigned __int8 v18 = *Norm_in3[++v17];
              if (v17 == 56) {
                goto LABEL_51;
              }
            }
            *uint64_t v4 = 2;
            uint64_t v22 = Norm_out3[v17];
            v4[1] = *v22;
            v4[2] = v22[1];
          }
        }
        else
        {
          unsigned int v11 = v4[2];
          if (v5 == 129 && (v11 & 0xFE) == 0x4A)
          {
            if (v11 == 74) {
              uint64_t v12 = Norm_in4;
            }
            else {
              uint64_t v12 = Norm_in5;
            }
            if (v11 == 74) {
              __int16 v7 = (char **)&Norm_out4;
            }
            else {
              __int16 v7 = Norm_out5;
            }
            if (v2 == 1) {
              return 1;
            }
            if (*(v4 - 4) == 2)
            {
              int v13 = *v12;
              int v14 = **v12;
              if (**v12)
              {
                int v15 = v12 + 1;
                while (v14 != *(v4 - 3) || v13[1] != *(v4 - 2))
                {
                  uint64_t v16 = *v15++;
                  int v13 = v16;
                  int v14 = *v16;
                  ++v7;
                  if (!*v16) {
                    goto LABEL_51;
                  }
                }
                goto LABEL_48;
              }
            }
          }
          else if (v5 == 130 && v11 >= 0x60 && v11 <= 0x9A)
          {
            int v19 = (unsigned __int8 **)&Norm_in6;
            for (uint64_t i = Norm_out6; ; ++i)
            {
              if (**v19 == 130)
              {
                if ((*v19)[1] == v11)
                {
                  *uint64_t v4 = 1;
                  v4[1] = **i;
                  break;
                }
              }
              else if (!**v19)
              {
                break;
              }
              ++v19;
            }
          }
        }
LABEL_51:
        int v2 = v3;
        if (v3 <= 0) {
          return 1;
        }
      }
    }
  }
  return result;
}

void *modify_comma(void *a1, int a2, void *a3)
{
  size_t v6 = a2;
  uint64_t result = (void *)heap_Alloc((uint64_t)a3, a2);
  if (result)
  {
    int v8 = result;
    memcpy(result, a1, v6);
    if (a2 >= 1)
    {
      uint64_t v9 = 0;
      unsigned int v10 = -1;
      do
      {
        int v11 = v10;
        if (v10 >= 4uLL) {
          int v11 = 4;
        }
        if (v10 >= 4) {
          int v12 = 4;
        }
        else {
          int v12 = v10;
        }
        if (!*((unsigned char *)a1 + v9))
        {
          if (v9)
          {
            unsigned int v13 = 0;
            int v14 = v11 + 1;
            unsigned int v15 = v12 + 1;
            unsigned int v16 = v10;
            while (*((unsigned char *)a1 + v16) == 1)
            {
              ++v13;
              --v16;
              if (v14 == v13)
              {
                int v17 = v13 + 1;
                goto LABEL_17;
              }
            }
            int v17 = v13 + 1;
            unsigned int v15 = v13;
          }
          else
          {
            unsigned int v15 = 0;
            unsigned int v16 = -1;
            int v17 = 1;
          }
LABEL_17:
          int v18 = 0;
          uint64_t v19 = 1;
          while (v9 + v19 < v6)
          {
            if (*((unsigned char *)a1 + v9 + v19) != 1)
            {
              int v18 = v19 - 1;
              break;
            }
            ++v18;
            if (++v19 == 6)
            {
              int v18 = 5;
              break;
            }
          }
          if (v15 <= 4
            && (v15 > 2
             || v15 && ((v16 & 0x80000000) != 0 || v9 == v17 || *((unsigned char *)a1 + v16) || *((unsigned char *)a1 + v16 - 1) != 1))
            && (v18 - 3) < 2)
          {
            char v20 = 1;
          }
          else
          {
            char v20 = -1;
          }
          v8[v9] = v20;
        }
        ++v9;
        ++v10;
      }
      while (v9 != v6);
    }
    memcpy(a1, v8, v6);
    return heap_Free(a3, (uint64_t)v8);
  }
  return result;
}

uint64_t mark_tag_state(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 < 1) {
    return 1;
  }
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 36;
  do
  {
    int v9 = v7;
    if (v8 == 36 || v8 == 33)
    {
      v7 += 4;
      if (v7 <= v3 && compare_tag(a1, v9, START_TAG_SAPI_PRN) == 1)
      {
        unsigned int v10 = (unsigned char *)(a2 + v9);
        int v8 = 34;
        unsigned char *v10 = 34;
        int v11 = v10 + 1;
        int v12 = v9 + 2;
        if (v7 > v9 + 2) {
          int v12 = v7;
        }
        memset(v11, 35, (v12 - v9 - 2) + 1);
        int v5 = 1;
        goto LABEL_13;
      }
      if (mbs_one_char((void *)a1, v9) == 30)
      {
        int v7 = v9 + 1;
        int v8 = 34;
        *(unsigned char *)(a2 + v9) = 34;
LABEL_13:
        int v6 = v9;
        goto LABEL_23;
      }
      int v8 = 33;
    }
    else
    {
      if (v5 == 1)
      {
        v7 += 4;
        if (v7 <= v3 && compare_tag(a1, v9, END_TAG_SAPI_PRN) == 1)
        {
          int v5 = 0;
          *(_DWORD *)(a2 + v9) = 606282531;
          int v8 = 36;
          goto LABEL_23;
        }
      }
      if (mbs_one_char((void *)a1, v9) == 31)
      {
        int v7 = v9 + 1;
        int v8 = 36;
        *(unsigned char *)(a2 + v9) = 36;
        goto LABEL_23;
      }
      int v8 = 35;
    }
    *(unsigned char *)(a2 + v9) = v8;
    int v7 = v9 + 1;
LABEL_23:
    int v3 = *(_DWORD *)(a1 + 8);
  }
  while (v7 < v3);
  uint64_t result = 1;
  if ((v8 & 0xFFFFFFFE) == 0x22 && v6 < v7)
  {
    memset((void *)(a2 + v6), 33, (v7 + ~v6) + 1);
    return 1;
  }
  return result;
}

uint64_t look_up_dictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t **a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14)
{
  int v18 = a14;
  uint64_t v203 = *MEMORY[0x263EF8340];
  v195[0] = 0;
  v195[1] = 0;
  int v194 = 0;
  unsigned __int8 v193 = 0;
  uint64_t v191 = 0;
  uint64_t v192 = 0;
  __s1 = (char *)marker_getMarkerArgStr(1u);
  uint64_t v189 = *(void *)(a8 + 184);
  long long v190 = *(_OWORD *)(a8 + 192);
  LOWORD(v191) = *(_WORD *)(a8 + 208);
  HIDWORD(v191) = *(_DWORD *)(a8 + 212);
  bzero(v196, 0x3C0uLL);
  uint64_t v19 = heap_Alloc(*(void *)(a8 + 24), 1024);
  uint64_t v20 = heap_Alloc(*(void *)(a8 + 24), 1025);
  uint64_t v21 = heap_Alloc(*(void *)(a8 + 24), 1025);
  uint64_t v22 = 0;
  LODWORD(pron_from_grapheme) = 0;
  uint64_t v187 = v21;
  uint64_t v188 = v20;
  if (!v19 || !v20)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    goto LABEL_25;
  }
  unsigned __int8 v176 = a6;
  unsigned __int8 v177 = a5;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (!v21) {
    goto LABEL_26;
  }
  uint64_t v185 = v19;
  for (uint64_t i = 0; i != 120; ++i)
  {
    uint64_t v28 = heap_Alloc(*(void *)(a8 + 24), 80);
    v196[i] = v28;
    if (!v28)
    {
      LODWORD(pron_from_grapheme) = 0;
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
LABEL_22:
      uint64_t v26 = 0;
      goto LABEL_23;
    }
  }
  uint64_t v25 = heap_Alloc(*(void *)(a8 + 24), *(unsigned int *)(a2 + 8));
  uint64_t v24 = heap_Alloc(*(void *)(a8 + 24), *(unsigned int *)(a2 + 8));
  uint64_t v29 = heap_Alloc(*(void *)(a8 + 24), *(unsigned int *)(a2 + 8));
  uint64_t v22 = v29;
  LODWORD(pron_from_grapheme) = 0;
  if (!v25)
  {
    uint64_t v26 = 0;
    goto LABEL_23;
  }
  if (!v24 || !v29)
  {
LABEL_25:
    uint64_t v26 = 0;
    goto LABEL_26;
  }
  if (!mark_tag_state(a2, v25))
  {
    LODWORD(pron_from_grapheme) = 0;
    uint64_t v26 = 0;
    goto LABEL_26;
  }
  uint64_t v30 = a3;
  int v169 = (const char *)(a3 + 68);
  if (!*(unsigned char *)(a3 + 68)) {
    goto LABEL_17;
  }
  uint64_t info = create_info(0, &byte_20D5A22AE, *(void **)(a8 + 24));
  if (!info) {
    goto LABEL_186;
  }
  uint64_t v32 = (uint64_t *)info;
  uint64_t v33 = create_info(1, v169, *(void **)(a8 + 24));
  uint64_t pron_from_grapheme = v33;
  void v32[2] = v33;
  if (!v33)
  {
    free_information(v32, *(void **)(a8 + 24));
    goto LABEL_22;
  }
  uint64_t v167 = a14;
  *(void *)(v33 + 16) = 0;
  uint64_t v34 = create_info(2, " ", *(void **)(a8 + 24));
  *(void *)(pron_from_grapheme + 16) = v34;
  if (!v34
    || (uint64_t v35 = v34,
        *(void *)(v34 + 16) = 0,
        uint64_t v36 = create_info(3, "0", *(void **)(a8 + 24)),
        (*(void *)(v35 + 16) = v36) == 0))
  {
    free_information(v32, *(void **)(a8 + 24));
    goto LABEL_47;
  }
  *(void *)(v36 + 16) = 0;
  uint64_t v30 = a3;
  int v18 = a14;
  if (!add_info_to_table((uint64_t)v32, 0, 0, v177, v176, 0, a3, *(void **)(a8 + 24)))
  {
    free_information(v32, *(void **)(a8 + 24));
LABEL_186:
    LODWORD(pron_from_grapheme) = 0;
    goto LABEL_22;
  }
LABEL_17:
  LODWORD(v37) = *(_DWORD *)(a2 + 8);
  if ((int)v37 < 1)
  {
    uint64_t v19 = v185;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v19 = v185;
    do
    {
      *(unsigned char *)(v24 + v38) = 0;
      *(unsigned char *)(v22 + v38++) = 0;
      uint64_t v37 = *(int *)(a2 + 8);
    }
    while (v38 < v37);
  }
  if (*(_DWORD *)(v30 + 132) == 1)
  {
    uint64_t v26 = heap_Alloc(*(void *)(a8 + 24), v37);
    if (!v26)
    {
      LODWORD(pron_from_grapheme) = 0;
      goto LABEL_26;
    }
    LODWORD(v41) = *(_DWORD *)(a2 + 8);
    if ((int)v41 >= 1)
    {
      uint64_t v42 = 0;
      do
      {
        if (*(unsigned char *)(v25 + v42) != 33 || *(unsigned char *)(v24 + v42) == 1 || *(unsigned char *)(v22 + v42) == 1)
        {
          char v43 = -2;
        }
        else
        {
          int char_kind = get_char_kind(a2, v42);
          if (char_kind == 4) {
            char v43 = -1;
          }
          else {
            char v43 = char_kind;
          }
        }
        *(unsigned char *)(v26 + v42++) = v43;
        uint64_t v41 = *(int *)(a2 + 8);
      }
      while (v42 < v41);
    }
    modify_comma((void *)v26, v41, *(void **)(a8 + 24));
    int v45 = *(_DWORD *)(a2 + 8);
    if (v45 >= 1)
    {
      uint64_t v167 = v18;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      while (1)
      {
        if (v46 == v45 - 1)
        {
          unsigned int v48 = *(unsigned __int8 *)(v26 + v46);
        }
        else
        {
          uint64_t v49 = v46 + 1;
          int v50 = *(unsigned __int8 *)(v26 + v46 + 1);
          unsigned int v48 = *(unsigned __int8 *)(v26 + v46);
          if (v50 == v48)
          {
            int v51 = v46 - v47;
            if ((v50 != 1 || v51 <= 30) && ((v50 & 0xFE) != 2 || v51 <= 14)) {
              goto LABEL_70;
            }
LABEL_66:
            uint64_t pron_from_grapheme = (uint64_t)get_pron_from_grapheme(a2, v47, v46, (char)v50, *(void **)(a8 + 24));
            if (!pron_from_grapheme)
            {
              heap_Free(*(void **)(a8 + 24), v26);
              goto LABEL_48;
            }
            int v54 = non_lookup_tag(a2, v47, v46, Dtype[*(char *)(v26 + v46)], (const char *)pron_from_grapheme, v177, v176, a3, *(void **)(a8 + 24));
            uint64_t v55 = *(void **)(a8 + 24);
            if (!v54)
            {
              heap_Free(v55, v26);
              heap_Free(*(void **)(a8 + 24), pron_from_grapheme);
LABEL_47:
              LODWORD(pron_from_grapheme) = 0;
LABEL_48:
              uint64_t v26 = 0;
              int v18 = v167;
LABEL_23:
              uint64_t v19 = v185;
              goto LABEL_26;
            }
            heap_Free(v55, pron_from_grapheme);
            int v45 = *(_DWORD *)(a2 + 8);
            goto LABEL_69;
          }
        }
        LOBYTE(v50) = v48;
        if (v48 <= 0xFD) {
          goto LABEL_66;
        }
LABEL_69:
        uint64_t v49 = v46 + 1;
        uint64_t v47 = v46 + 1;
LABEL_70:
        uint64_t v46 = v49;
        if (v49 >= v45)
        {
          int v18 = v167;
          break;
        }
      }
    }
    uint64_t v19 = v185;
  }
  else
  {
    uint64_t v26 = 0;
  }
  heap_Free(*(void **)(a8 + 24), v26);
  if ((mbs_copy((uint64_t)v195, (void *)a2, 0, *(_DWORD *)(a2 + 8), *(void **)(a8 + 24)) & 0x80000000) != 0)
  {
    LODWORD(pron_from_grapheme) = 0;
    uint64_t v26 = 0;
    goto LABEL_249;
  }
  int v56 = a13;
  if (a13 != 1)
  {
    mbs_normalize((uint64_t)v195);
    __s = 0;
    uint64_t v57 = 0;
    LOWORD(v58) = 0;
    goto LABEL_76;
  }
  if (a10)
  {
    uint64_t v114 = 0;
    uint64_t v115 = a11;
    unint64_t v116 = (unsigned int *)(a9 + 40);
    unint64_t v117 = __s1;
    while (*(v116 - 2) <= *(_DWORD *)(a11 + 32))
    {
      if (*(v116 - 5) == 21) {
        unint64_t v117 = (char *)(*(void *)(a12 + 8) + *v116);
      }
      v116 += 16;
      if (a10 == ++v114)
      {
        __s1 = v117;
        LODWORD(v114) = a10;
        goto LABEL_191;
      }
    }
    __s1 = v117;
    LODWORD(v114) = (unsigned __int16)v114;
LABEL_191:
    unsigned int v162 = v114;
  }
  else
  {
    unsigned int v162 = 0;
    uint64_t v115 = a11;
  }
  uint64_t v26 = 2350915594;
  BOOL v120 = *(void **)(a8 + 24);
  MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
  int v122 = strlen(MarkerArgStr);
  uint64_t pron_from_grapheme = heap_Calloc(v120, 1, (v122 + 1));
  if (!pron_from_grapheme)
  {
    uint64_t v19 = v185;
    goto LABEL_249;
  }
  long long v123 = marker_getMarkerArgStr(1u);
  __s = (char *)pron_from_grapheme;
  strcpy((char *)pron_from_grapheme, v123);
  mbs_normalize((uint64_t)v195);
  int v124 = *(_DWORD *)(v115 + 32);
  int v125 = *(_DWORD *)(a9 + 32);
  uint64_t v126 = heap_Calloc(*(void **)(a8 + 24), 1, 264);
  if (!v126)
  {
    LODWORD(pron_from_grapheme) = 0;
    uint64_t v19 = v185;
    goto LABEL_246;
  }
  uint64_t v57 = v126;
  unsigned __int16 v127 = v124 - v125;
  if (v162 >= a10)
  {
    LODWORD(v58) = 0;
    int v60 = *(_DWORD *)(a2 + 8);
    unsigned __int8 v132 = __s1;
    if (v60 > 0)
    {
      int v168 = v18;
      LOWORD(v60) = 2 * v60;
      unsigned __int16 v138 = v124 - v125;
      int v56 = 1;
      uint64_t v59 = v177;
      goto LABEL_224;
    }
    uint64_t v19 = v185;
    int v56 = 1;
    uint64_t v59 = v177;
  }
  else
  {
    int v168 = v18;
    uint64_t v164 = 0;
    int v128 = (unsigned __int16)(v124 - v125);
    int v129 = *(_DWORD *)(a9 + 32);
    uint64_t v130 = (unsigned int *)(a9 + ((unint64_t)v162 << 6) + 40);
    unint64_t v131 = a10 - (unint64_t)v162;
    unsigned __int16 v156 = 10;
    unsigned __int16 v152 = v127;
    int v153 = v127;
    unsigned __int16 v160 = v127;
    unsigned __int8 v132 = __s1;
    do
    {
      int v133 = *(v130 - 2);
      if (v128 + 2 * *(_DWORD *)(a2 + 8) < (unsigned __int16)(v133 - v129)) {
        break;
      }
      if (*(v130 - 5) == 21)
      {
        int v173 = v129;
        uint64_t v174 = v57;
        uint64_t v163 = *v130;
        uint64_t v158 = *(void *)(a12 + 8);
        __s1c = (char *)v132;
        if (!strcmp(v132, (const char *)(v158 + v163)))
        {
          uint64_t v57 = v174;
          unsigned __int8 v132 = __s1c;
          int v128 = v153;
          int v129 = v173;
        }
        else
        {
          int v134 = v164;
          uint64_t v57 = v174;
          int v129 = v173;
          if ((unsigned __int16)v164 >= v156)
          {
            uint64_t v136 = heap_Realloc(*(uint64_t **)(a8 + 24), v174, 24 * v156 + 264);
            if (!v136) {
              goto LABEL_242;
            }
            v156 += 10;
            uint64_t v135 = *(void *)(a12 + 8);
            int v133 = *(v130 - 2);
            uint64_t v57 = v136;
            int v129 = *(_DWORD *)(a9 + 32);
            int v134 = v164;
            int v128 = v153;
          }
          else
          {
            int v128 = v153;
            uint64_t v135 = v158;
          }
          uint64_t v137 = v57 + 24 * (unsigned __int16)v134;
          *(void *)uint64_t v137 = __s1c;
          unsigned __int8 v132 = (const char *)(v135 + v163);
          *(void *)(v137 + 8) = v135 + v163;
          *(_WORD *)(v137 + 16) = v160;
          unsigned __int16 v160 = v133 - v129;
          *(_WORD *)(v137 + 18) = v133 - v129;
          uint64_t v164 = (v134 + 1);
        }
      }
      v130 += 16;
      --v131;
    }
    while (v131);
    int v60 = *(_DWORD *)(a2 + 8);
    if (v128 + 2 * v60 <= v160)
    {
      int v56 = 1;
      uint64_t v59 = v177;
      uint64_t v58 = v164;
    }
    else
    {
      LODWORD(v58) = v164;
      uint64_t v19 = v185;
      if ((unsigned __int16)v164 >= v156)
      {
        uint64_t v139 = v132;
        uint64_t v174 = v57;
        uint64_t v140 = heap_Realloc(*(uint64_t **)(a8 + 24), v57, 24 * v156 + 264);
        if (!v140) {
          goto LABEL_218;
        }
        int v60 = 2 * *(_DWORD *)(a2 + 8);
        uint64_t v57 = v140;
        int v56 = 1;
        uint64_t v59 = v177;
        unsigned __int8 v132 = v139;
        LODWORD(v58) = v164;
      }
      else
      {
        LOWORD(v60) = 2 * v60;
        int v56 = 1;
        uint64_t v59 = v177;
      }
      unsigned __int16 v127 = v152;
      unsigned __int16 v138 = v160;
LABEL_224:
      uint64_t v141 = v57 + 24 * (unsigned __int16)v58;
      *(void *)uint64_t v141 = v132;
      *(void *)(v141 + 8) = 0;
      *(_WORD *)(v141 + 16) = v138;
      *(_WORD *)(v141 + 18) = v60 + v127;
      uint64_t v58 = (v58 + 1);
    }
    if ((_WORD)v58)
    {
      int v142 = 0;
      int v143 = (unsigned __int16)v58;
      uint64_t v175 = v57;
      do
      {
        uint64_t v144 = v142 + 1;
        if ((int)v144 < v143 && (uint64_t v145 = (void *)(v57 + 24 * v144), (v146 = (const char *)v145[1]) != 0))
        {
          uint64_t v165 = v58;
          __s1d = (char *)(v57 + 24 * v142);
          if (!strcmp(*(const char **)__s1d, v146))
          {
            memmove(__s1d, v145, (int)(24 * (v143 + (~(_WORD)v142 | 0xFFFF0000))));
            uint64_t v58 = (v165 - 1);
            int v56 = 1;
            uint64_t v57 = v175;
          }
          else
          {
            ++v142;
            int v56 = 1;
            uint64_t v57 = v175;
            uint64_t v58 = v165;
          }
        }
        else
        {
          ++v142;
          int v56 = 1;
        }
        int v143 = (unsigned __int16)v58;
      }
      while (v142 < (unsigned __int16)v58);
      int v18 = v168;
      uint64_t v19 = v185;
LABEL_76:
      uint64_t v59 = v177;
    }
    else
    {
      LOWORD(v58) = 0;
      int v18 = v168;
      uint64_t v19 = v185;
    }
    int v60 = *(_DWORD *)(a2 + 8);
  }
  uint64_t v174 = v57;
  if (v60 < 1)
  {
LABEL_181:
    if (!*(unsigned char *)(a3 + 136) || look_up_unknown_word(a2, a3, v59, v176, *(void **)(a8 + 24)))
    {
      uint64_t v26 = 0;
      LODWORD(pron_from_grapheme) = 1;
      goto LABEL_244;
    }
    goto LABEL_216;
  }
  uint64_t v61 = 0;
  int v62 = a4;
  if ((_WORD)v58) {
    BOOL v63 = v56 == 1;
  }
  else {
    BOOL v63 = 0;
  }
  char v64 = !v63;
  char v161 = v64;
  uint64_t v157 = 24 * (unsigned __int16)v58;
  int v172 = 1;
  int v168 = v18;
  while (1)
  {
    char v200 = 0;
    if (v62 >= 1) {
      break;
    }
LABEL_169:
    if (++v61 >= v60) {
      goto LABEL_181;
    }
  }
  int v65 = 0;
  uint64_t v170 = (4 * v61);
  uint64_t v171 = v61;
  unint64_t v159 = 2 * v61;
  int v66 = 1;
  while (2)
  {
    int v67 = v66 + v61;
    if (v66 + (int)v61 > *(_DWORD *)(a2 + 8)
      || (uint64_t v68 = v67 - 1, *(unsigned char *)(v25 + v68) != 33)
      || *(unsigned char *)(v24 + v68) == 1
      || *(unsigned char *)(v22 + v68) == 1)
    {
      int v18 = v168;
      goto LABEL_168;
    }
    int __s1a = v65;
    uint64_t v69 = v61;
    if (mbs2sjis(a2, v61, v66, (uint64_t)v202, 80) == -1
      || (v70 = v69, int v71 = v66, mbs2sjis((uint64_t)v195, v70, v66, (uint64_t)v199, 80) == -1))
    {
      uint64_t v26 = 0;
LABEL_218:
      LODWORD(pron_from_grapheme) = 0;
      int v18 = v168;
      goto LABEL_244;
    }
    if (!*(unsigned char *)(v195[0] + v170))
    {
      int v18 = v168;
      uint64_t v61 = v171;
LABEL_168:
      int v60 = *(_DWORD *)(a2 + 8);
      uint64_t v59 = v177;
      int v62 = a4;
      goto LABEL_169;
    }
    uint64_t v72 = __s;
    if (a13 != 1) {
      uint64_t v72 = "normal";
    }
    if (v161)
    {
      uint64_t v73 = (char *)v72;
      int v18 = v168;
    }
    else
    {
      uint64_t v74 = 0;
      int v75 = 2 * v67;
      int v18 = v168;
      while (v159 < *(unsigned __int16 *)(v174 + v74 + 16) || v75 > *(unsigned __int16 *)(v174 + v74 + 18))
      {
        v74 += 24;
        if (v157 == v74)
        {
          uint64_t v19 = v185;
          uint64_t v73 = __s;
          goto LABEL_109;
        }
      }
      size_t v154 = strlen(__s);
      size_t v76 = strlen(*(const char **)(v174 + v74));
      if (v154 >= v76)
      {
        uint64_t v77 = __s;
      }
      else
      {
        uint64_t v77 = (char *)heap_Realloc(*(uint64_t **)(a8 + 24), (uint64_t)__s, (v76 + 1));
        if (!v77)
        {
          LODWORD(pron_from_grapheme) = 0;
          uint64_t v26 = 2350915594;
          uint64_t v19 = v185;
          uint64_t v149 = v174;
          goto LABEL_245;
        }
      }
      uint64_t v73 = strcpy(v77, *(const char **)(v174 + v74));
      uint64_t v19 = v185;
    }
LABEL_109:
    __s = v73;
    uint64_t v78 = lookup_JPARSER((uint64_t)&v189, (uint64_t)v199, &v194, &v193, v73);
    if (v78 == -1)
    {
      if (!__s1a)
      {
        int v65 = 0;
        ++v66;
LABEL_163:
        uint64_t v61 = v171;
LABEL_164:
        if (v66 < 0 || v66 > a4) {
          goto LABEL_168;
        }
        continue;
      }
      uint64_t v61 = v171;
      int v84 = v201[v172++];
      if (!v84) {
        goto LABEL_168;
      }
      int v66 = v84 - 48;
LABEL_161:
      int v65 = 1;
      goto LABEL_164;
    }
    break;
  }
  CopyOutput_JPARSER(v196, 120, v194, v78, v193);
  if (__s1a)
  {
    uint64_t v61 = v171;
    uint64_t v83 = v172 + 1;
    if (v201[v83 - 1]) {
      int v66 = v201[v83 - 1] - 48;
    }
    else {
      int v66 = a4 + 1;
    }
LABEL_114:
    int v172 = v83;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v85 = v196[0];
    uint64_t v61 = v171;
    while (*(unsigned char *)(v196[0] + v83) && *(unsigned char *)(v196[0] + v83) != 44)
      ++v83;
    char v200 = *(unsigned char *)(v196[0] + v83);
    if (v200)
    {
      uint64_t v86 = 0;
      do
      {
        int v87 = *(unsigned __int8 *)(v85 + v83 + 1 + v86);
        v201[v86++] = v87;
      }
      while (v87);
      if (v86)
      {
        int v66 = v201[0] - 48;
        *(unsigned char *)(v85 + v83) = 0;
        LODWORD(v83) = 1;
        goto LABEL_114;
      }
    }
    int v172 = 1;
    int v66 = a4 + 1;
  }
  if (!*(unsigned char *)v196[0]) {
    goto LABEL_161;
  }
  if (*v169) {
    int v88 = v61 + 1;
  }
  else {
    int v88 = v61;
  }
  int v155 = v88;
  if (!v202[0])
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 52003, "%s%s%s%s", v79, v80, v81, v82, "empty field");
    LODWORD(pron_from_grapheme) = 0;
    uint64_t v26 = 2350915584;
    goto LABEL_244;
  }
  uint64_t v89 = create_info(0, v202, *(void **)(a8 + 24));
  if (!v89)
  {
LABEL_216:
    uint64_t v26 = 0;
    LODWORD(pron_from_grapheme) = 0;
    goto LABEL_244;
  }
  int v150 = v66;
  uint64_t v94 = 0;
  int v151 = v71 - 1;
  *(void *)(v89 + 16) = 0;
  __s1b = (uint64_t *)v89;
  uint64_t v95 = v89;
  do
  {
    uint64_t v96 = (const char *)v196[v94];
    if (!v96 || !*v96)
    {
      uint64_t v118 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v119 = *(void *)(a1 + 216);
LABEL_188:
      log_OutPublic(v118, v119, 52003, "%s%s%s%s", v90, v91, v92, v93, "empty field");
      free_information(__s1b, *(void **)(a8 + 24));
LABEL_189:
      LODWORD(pron_from_grapheme) = 0;
      uint64_t v26 = 2350915584;
      goto LABEL_243;
    }
    uint64_t v97 = create_info((v94 + 1), v96, *(void **)(a8 + 24));
    uint64_t v26 = v97;
    *(void *)(v95 + 16) = v97;
    if (!v97)
    {
      free_information(__s1b, *(void **)(a8 + 24));
      goto LABEL_242;
    }
    *(void *)(v97 + 16) = 0;
    ++v94;
    uint64_t v95 = v97;
  }
  while (v94 != 2);
  if (*v197)
  {
    uint64_t v98 = create_info(3, v197, *(void **)(a8 + 24));
    *(void *)(v26 + 16) = v98;
    if (!v98)
    {
LABEL_237:
      unint64_t v147 = *(void **)(a8 + 24);
      unsigned int v148 = __s1b;
      goto LABEL_240;
    }
    *(void *)(v98 + 16) = 0;
    uint64_t v26 = v98;
  }
  uint64_t v99 = 0;
  int v100 = 4;
  unint64_t v101 = 3;
  while (2)
  {
    uint64_t v102 = *(const char **)&v198[v99];
    if (*v102 || **(unsigned char **)&v198[v99 + 8])
    {
      unint64_t v103 = 24 * (v101 / 3);
      if (v103 - 24 == v99)
      {
        int v104 = v100;
        if (!add_info_to_table((uint64_t)__s1b, v155, v151, v177, v176, 0, a3, *(void **)(a8 + 24)))
        {
          unint64_t v147 = *(void **)(a8 + 24);
          unsigned int v148 = __s1b;
          goto LABEL_240;
        }
        if (!v202[0])
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 52003, "%s%s%s%s", v105, v106, v107, v108, "empty field");
          goto LABEL_189;
        }
        uint64_t v109 = create_info(0, v202, *(void **)(a8 + 24));
        if (!v109) {
          goto LABEL_241;
        }
        *(void *)(v109 + 16) = 0;
        uint64_t v102 = *(const char **)&v198[v99];
        __s1b = (uint64_t *)v109;
        uint64_t v26 = v109;
        int v100 = v104;
        if (!v102)
        {
LABEL_236:
          uint64_t v118 = *(void *)(*(void *)(a1 + 32) + 32);
          uint64_t v119 = *(void *)(a1 + 216);
          goto LABEL_188;
        }
LABEL_154:
        if (!*v102) {
          goto LABEL_236;
        }
        int v110 = v100;
        uint64_t v112 = v100 - 3 * (v101 / 3);
        uint64_t v111 = *(void **)(a8 + 24);
LABEL_156:
        uint64_t v113 = create_info(v112, v102, v111);
        *(void *)(v26 + 16) = v113;
        if (!v113) {
          goto LABEL_237;
        }
        int v100 = v110;
        *(void *)(v113 + 16) = 0;
        uint64_t v26 = v113;
      }
      else
      {
        if (v103 - 8 != v99) {
          goto LABEL_154;
        }
        if (*v102)
        {
          int v110 = v100;
          uint64_t v111 = *(void **)(a8 + 24);
          uint64_t v112 = 3;
          goto LABEL_156;
        }
      }
      ++v101;
      v99 += 8;
      ++v100;
      if (v99 == 928) {
        break;
      }
      continue;
    }
    break;
  }
  if (add_info_to_table((uint64_t)__s1b, v155, v151, v177, v176, 0, a3, *(void **)(a8 + 24)))
  {
    int v65 = 1;
    int v66 = v150;
    int v18 = v168;
    uint64_t v19 = v185;
    goto LABEL_163;
  }
  unint64_t v147 = *(void **)(a8 + 24);
  unsigned int v148 = __s1b;
LABEL_240:
  free_information(v148, v147);
LABEL_241:
  uint64_t v26 = 0;
LABEL_242:
  LODWORD(pron_from_grapheme) = 0;
LABEL_243:
  int v18 = v168;
  uint64_t v19 = v185;
LABEL_244:
  uint64_t v149 = v174;
  if (v174) {
LABEL_245:
  }
    heap_Free(*(void **)(a8 + 24), v149);
LABEL_246:
  if (a13 == 1 && __s) {
    heap_Free(*(void **)(a8 + 24), (uint64_t)__s);
  }
LABEL_249:
  mbs_free(v195, *(void **)(a8 + 24));
LABEL_26:
  heap_Free(*(void **)(a8 + 24), v25);
  heap_Free(*(void **)(a8 + 24), v24);
  heap_Free(*(void **)(a8 + 24), v22);
  heap_Free(*(void **)(a8 + 24), v19);
  heap_Free(*(void **)(a8 + 24), v188);
  heap_Free(*(void **)(a8 + 24), v187);
  for (uint64_t j = 0; j != 120; ++j)
    heap_Free(*(void **)(a8 + 24), v196[j]);
  *int v18 = pron_from_grapheme;
  return v26;
}

uint64_t sapi_prn_tag_conv_replace(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v6 = strlen(__s);
  uint64_t v7 = mbs_create((uint64_t)&v27, v6, __s, *(void **)(a3 + 24));
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t v8 = heap_Alloc(*(void *)(a3 + 24), v28);
    if (!v8)
    {
      uint64_t v7 = 2350915594;
      goto LABEL_49;
    }
    if (!mark_tag_state((uint64_t)&v27, v8))
    {
      uint64_t v7 = 2350915601;
      goto LABEL_49;
    }
    if ((int)v28 < 1) {
      goto LABEL_49;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      unsigned int v11 = mbs_one_char(&v27, v10);
      if (v11 <= 0x20 && ((1 << v11) & 0x100002400) != 0)
      {
        uint64_t v7 = mbs_add_str(a1, (uint64_t)&v27, v10, 1, 0, *(uint64_t **)(a3 + 24));
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_49;
      }
      if ((int)v10 + 15 >= (int)v28) {
        int v13 = v28 - v10;
      }
      else {
        int v13 = 16;
      }
      if (v13 < 1) {
        goto LABEL_42;
      }
      int v14 = 0;
      int v15 = v13 + 1;
      while (mbs_one_char(&v27, (int)v10 + v14) != 30)
      {
        if (v13 == ++v14) {
          goto LABEL_22;
        }
      }
      int v15 = v14 + 1;
LABEL_22:
      int v16 = v15 - 1;
      if (v15 <= 1)
      {
LABEL_30:
        int v17 = v16;
      }
      else
      {
        int v17 = 0;
        while (1)
        {
          unsigned int v18 = mbs_one_char(&v27, (int)v10 + v17);
          if (v18 <= 0x20 && ((1 << v18) & 0x100002400) != 0) {
            break;
          }
          if (v16 == ++v17) {
            goto LABEL_30;
          }
        }
      }
      if (v17 < 1)
      {
LABEL_42:
        uint64_t v24 = v9;
LABEL_43:
        uint64_t v7 = mbs_add_str(a1, (uint64_t)&v27, v10, 1, 0, *(uint64_t **)(a3 + 24));
        uint64_t v9 = v24;
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_49;
      }
      while (1)
      {
        if (mbs2sjis((uint64_t)&v27, v10, v17, (uint64_t)__sa, 1000) == -1)
        {
          uint64_t v7 = 2350915840;
          goto LABEL_49;
        }
        int v20 = strlen(__sa);
        if (v20 >= 1)
        {
          uint64_t v21 = v20;
          uint64_t v22 = __sa;
          while (1)
          {
            int v23 = *v22++;
            if ((v23 & 0xFFFFFFDF) - 91 < 0xFFFFFFE6) {
              goto LABEL_39;
            }
            if (!--v21) {
              goto LABEL_45;
            }
          }
        }
        if (v9 == 1) {
          break;
        }
LABEL_39:
        LODWORD(v9) = 0;
        uint64_t v24 = 0;
        if (v17-- < 2) {
          goto LABEL_43;
        }
      }
LABEL_45:
      uint64_t v7 = mbs_add_str(a1, (uint64_t)&v27, v10, v17, 0, *(uint64_t **)(a3 + 24));
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_49;
      }
      LODWORD(v10) = v10 - 1 + v17;
      uint64_t v9 = 1;
LABEL_11:
      uint64_t v10 = (v10 + 1);
      if ((int)v10 >= (int)v28)
      {
LABEL_49:
        heap_Free(*(void **)(a3 + 24), v8);
        mbs_free(&v27, *(void **)(a3 + 24));
        return v7;
      }
    }
  }
  return v7;
}

uint64_t jparser_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v7 = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = heap_Calloc(*(void **)(v7 + 8), 1, 8);
    if (v5)
    {
      int v6 = (void *)v5;
      uint64_t result = 0;
      *int v6 = *(void *)(v7 + 8);
      *(void *)a3 = v6;
      *(_DWORD *)(a3 + 8) = 19024;
    }
    else
    {
      return 2350915594;
    }
  }
  return result;
}

uint64_t jparser_ClassClose(void **a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 19024, 8) & 0x80000000) != 0) {
    return 2350915592;
  }
  if (a1) {
    heap_Free(*a1, (uint64_t)a1);
  }
  return 0;
}

uint64_t jparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, int a10, uint64_t a11)
{
  uint64_t v34 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v20 = 2350915840;
  if ((safeh_HandleCheck(a3, a4, 19024, 8) & 0x80000000) != 0) {
    return 2350915592;
  }
  int v21 = 0;
  for (uint64_t i = 0; i != 1; ++i)
  {
    uint64_t v23 = *(void *)(get_a_rule(i) + 72);
    if (v23 > v21) {
      int v21 = v23;
    }
  }
  if (v21) {
    return 2350907394;
  }
  uint64_t v24 = heap_Alloc(*(void *)(v34 + 8), 232);
  if (!v24) {
    return 2350915594;
  }
  uint64_t v25 = v24;
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(void *)(v24 + 224) = 0;
  *(_OWORD *)(v24 + 160) = 0u;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(void *)(v24 + 8) = a1;
  *(void *)(v24 + 16) = a2;
  uint64_t v26 = v34;
  *(void *)(v24 + 24) = *(void *)(v34 + 8);
  *(void *)(v24 + 32) = v26;
  *(void *)(v24 + 216) = a11;
  *(void *)(v24 + 184) = a6;
  *(void *)(v24 + 192) = a7;
  *(void *)(v24 + 200) = a8;
  *(_WORD *)(v24 + 208) = a9;
  *(_DWORD *)(v24 + 212) = a10;
  *(void *)(v24 + 48) = get_number_of_symbol((uint64_t **)&SF_symbol_file, "SENTENCE");
  uint64_t number_of_symbol = get_number_of_symbol((uint64_t **)&SF_symbol_file, &byte_26410C79C);
  *(void *)(v25 + 56) = number_of_symbol;
  if ((number_of_symbol & 0x8000000000000000) == 0)
  {
    uint64_t v28 = 0;
    for (uint64_t j = (char *)&unk_26410CB28; ; j += 64)
    {
      uint64_t v30 = get_number_of_symbol((uint64_t **)&SF_symbol_file, j - 664);
      *(void *)(v25 + v28 + 64) = v30;
      if (v30 == -1) {
        break;
      }
      uint64_t v31 = get_number_of_symbol((uint64_t **)&SF_symbol_file, j);
      *(void *)(v25 + v28 + 144) = v31;
      if (v31 == -1) {
        break;
      }
      uint64_t v32 = get_number_of_symbol((uint64_t **)&SF_symbol_file, j - 344);
      *(void *)(v25 + v28 + 104) = v32;
      if (v32 == -1) {
        break;
      }
      v28 += 8;
      if (v28 == 24)
      {
        uint64_t v20 = 0;
        *a5 = v25;
        return v20;
      }
    }
  }
  heap_Free(*(void **)(v34 + 8), v25);
  return v20;
}

uint64_t jparser_ObjClose(uint64_t *a1)
{
  uint64_t result = 2350915592;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(void **)(*a1 + 24), *a1);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t jparser_Parse(uint64_t a1, char *a2, uint64_t a3, void *a4, int a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v33 = 0;
  uint64_t v11 = 2350915592;
  if (a1)
  {
    *(void *)(a1 + 224) = a6;
    v34[0] = 0;
    v34[1] = 0;
    long long v17 = *(_OWORD *)(a1 + 208);
    v31[12] = *(_OWORD *)(a1 + 192);
    v31[13] = v17;
    uint64_t v32 = a6;
    long long v18 = *(_OWORD *)(a1 + 144);
    v31[8] = *(_OWORD *)(a1 + 128);
    v31[9] = v18;
    long long v19 = *(_OWORD *)(a1 + 176);
    v31[10] = *(_OWORD *)(a1 + 160);
    v31[11] = v19;
    long long v20 = *(_OWORD *)(a1 + 80);
    v31[4] = *(_OWORD *)(a1 + 64);
    v31[5] = v20;
    long long v21 = *(_OWORD *)(a1 + 112);
    v31[6] = *(_OWORD *)(a1 + 96);
    v31[7] = v21;
    long long v22 = *(_OWORD *)(a1 + 16);
    v31[0] = *(_OWORD *)a1;
    v31[1] = v22;
    long long v23 = *(_OWORD *)(a1 + 48);
    v31[2] = *(_OWORD *)(a1 + 32);
    v31[3] = v23;
    uint64_t v24 = sapi_prn_tag_conv_replace((uint64_t)v34, a2, (uint64_t)v31);
    if ((v24 & 0x80000000) != 0)
    {
      uint64_t v28 = v24;
      mbs_free(v34, *(void **)(a1 + 24));
      return v28;
    }
    else
    {
      uint64_t v25 = iso_parse_fdp_bas(a1, (uint64_t)&Inifile_global, (uint64_t)v34, CT_connection_table, a5, &v33, a7, a8, a9, a10, a11);
      if ((v25 & 0x80000000) != 0)
      {
        uint64_t v29 = v25;
        mbs_free(v34, *(void **)(a1 + 24));
        return v29;
      }
      else
      {
        uint64_t v26 = v33;
        mbs_free(v34, *(void **)(a1 + 24));
        if (v26)
        {
          uint64_t v27 = v33;
          if (*(_DWORD *)v33 == 1)
          {
            *a4 = *(void *)(v33 + 8);
            heap_Free(*(void **)(a1 + 24), v27);
            return 0;
          }
          else
          {
            heap_Free(*(void **)(a1 + 24), v33);
            return 2350915840;
          }
        }
        else
        {
          return 2350915594;
        }
      }
    }
  }
  return v11;
}

uint64_t jparser_FreeTree(uint64_t a1, void **a2)
{
  if (a1) {
    return jpe_FreeTree(*a2, *(void **)(a1 + 24));
  }
  else {
    return 2350915592;
  }
}

uint64_t jpj_sysdct_CharLookup(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  __c[0] = 0;
  uint64_t v60 = 0;
  unsigned __int16 v59 = 0;
  *(_DWORD *)a5 = 0;
  *(_OWORD *)(a5 + 4) = 0u;
  int v13 = (void *)(a5 + 4);
  *(_OWORD *)(a5 + 20) = 0u;
  *(_OWORD *)(a5 + 36) = 0u;
  *(_OWORD *)(a5 + 52) = 0u;
  *(unsigned char *)(a5 + 68) = 0;
  *(_WORD *)(a5 + 70) = 0;
  *(_OWORD *)(a5 + 76) = 0u;
  int v14 = (unsigned char *)(a5 + 76);
  *(_DWORD *)(a5 + 72) = 0;
  *(_OWORD *)(a5 + 92) = 0u;
  *(_OWORD *)(a5 + 108) = 0u;
  *(_OWORD *)(a5 + 124) = 0u;
  *(_OWORD *)(a5 + 140) = 0u;
  *(_OWORD *)(a5 + 156) = 0u;
  *(_OWORD *)(a5 + 172) = 0u;
  *(_OWORD *)(a5 + 188) = 0u;
  *(_OWORD *)(a5 + 204) = 0u;
  *(_OWORD *)(a5 + 220) = 0u;
  *(_OWORD *)(a5 + 236) = 0u;
  *(_OWORD *)(a5 + 252) = 0u;
  *(unsigned char *)(a5 + 332) = 0;
  *(_OWORD *)(a5 + 268) = 0u;
  *(_OWORD *)(a5 + 284) = 0u;
  *(_OWORD *)(a5 + 300) = 0u;
  *(_OWORD *)(a5 + 316) = 0u;
  *(_WORD *)(a5 + 334) = 0;
  unsigned __int16 v15 = strlen(__s);
  if ((v15 & 0xFFC0) != 0) {
    unsigned int v16 = 64;
  }
  else {
    unsigned int v16 = v15;
  }
  __memmove_chk();
  v63[v16] = 0;
  if (!v16)
  {
    int v18 = 0;
    do
    {
      size_t v19 = (unsigned __int16)v18;
      int v20 = __s[(unsigned __int16)v18++];
    }
    while (v20 == 32);
    memmove(v13, __s, v19);
    return 0;
  }
  if (v16 > a6) {
    v63[a6] = 0;
  }
  if (v63[0] > 0x7Eu)
  {
    __int16 v17 = 2;
    *(_DWORD *)a5 = 2;
    *(_WORD *)(a5 + 4) = *(_WORD *)v63;
    *(unsigned char *)(a5 + 6) = 0;
  }
  else
  {
    *(_DWORD *)a5 = 3;
    *(unsigned char *)(a5 + 4) = v63[0];
    *(unsigned char *)(a5 + 5) = 0;
    __int16 v17 = 1;
  }
  *(_WORD *)(a5 + 70) = v17;
  if (!*(_DWORD *)(a3 + 28))
  {
    *(void *)&__c[1] = 0;
    uint64_t v29 = lookup_JPARSER(a3, (uint64_t)v13, (const char **)&__c[1], __c, "normal");
    if (v29 != -1)
    {
      uint64_t v30 = v29;
      memmove(v14, *(const void **)&__c[1], v29);
      *(unsigned char *)(a5 + v30 + 76) = 0;
      *(_WORD *)(a5 + 334) = v30;
      uint64_t v31 = strchr(v14, __c[0]);
      if (v31)
      {
        *uint64_t v31 = 0;
        uint64_t v36 = v31 + 1;
        uint64_t v37 = strchr(v31 + 1, __c[0]);
        if (v37)
        {
          *uint64_t v37 = 0;
          unsigned __int16 v38 = strlen(v36);
          *(_WORD *)(a5 + 334) = v38;
          memmove(v14, v36, v38);
          *(unsigned char *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
LABEL_27:
          uint64_t v21 = 0;
          goto LABEL_28;
        }
        uint64_t v40 = 1812;
      }
      else
      {
        uint64_t v40 = 1813;
      }
      uint64_t v21 = 2350915584;
      uint64_t v41 = *(void *)(a1 + 32);
      uint64_t v42 = a2;
      goto LABEL_41;
    }
    *(_DWORD *)a5 = 0;
    goto LABEL_27;
  }
  unsigned __int16 v59 = 0;
  uint64_t v21 = (*(uint64_t (**)(void, void, const char *, void *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(void *)a3 + 96))(*(void *)(a3 + 8), *(void *)(a3 + 16), "char", v13, &v60, &v59, __c);
  if ((v21 & 0x80000000) != 0 || !v59) {
    goto LABEL_37;
  }
  __sa = 0;
  int v57 = 0;
  *(_OWORD *)&__c[1] = 0u;
  int64x2_t v62 = 0u;
  getDictSolutionJPJ(v59, v60, __c[0], (const char **)&__sa, (_WORD *)&v57 + 1, "normal", 4, &v57, (long long *)&__c[1]);
  uint64_t v26 = *(const char **)&__c[9];
  uint64_t v55 = (const char *)v62.i64[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&__c[1]), (int32x4_t)vceqzq_s64(v62)))) & 1) != 0
    || !HIWORD(v57))
  {
    log_OutPublic(*(void *)(a1 + 32), a2, 1817, 0, v22, v23, v24, v25, v53);
    *(_DWORD *)a5 = 0;
  }
  else
  {
    BOOL v28 = 1;
    if (**(unsigned char **)&__c[1])
    {
      int v54 = *(const char **)&__c[9];
      int v27 = strcmp(*(const char **)&__c[1], "1");
      uint64_t v26 = v54;
      if (v27) {
        BOOL v28 = 0;
      }
    }
    if (*v26)
    {
      int v39 = strcmp(v26, "1");
      if (a7 == 1)
      {
        if (v39) {
          goto LABEL_37;
        }
      }
    }
    if (v28)
    {
      if (*__sa == __c[0])
      {
LABEL_37:
        *(_DWORD *)a5 = 0;
        return v21;
      }
      size_t v48 = strlen(__sa);
      memmove(v14, __sa, v48);
      *(unsigned char *)(a5 + v48 + 76) = 0;
      *(_WORD *)(a5 + 334) = v48;
      uint64_t v49 = strchr(v14, __c[0]);
      if (v49)
      {
        *uint64_t v49 = 0;
        int v50 = v49 + 1;
        int v51 = strchr(v49 + 1, __c[0]);
        if (v51)
        {
          char *v51 = 0;
          unsigned __int16 v52 = strlen(v50);
          *(_WORD *)(a5 + 334) = v52;
          size_t v45 = v52;
          uint64_t v46 = v14;
          uint64_t v47 = v50;
          goto LABEL_48;
        }
        uint64_t v21 = 2350915584;
        uint64_t v41 = *(void *)(a1 + 32);
        uint64_t v42 = a2;
        uint64_t v40 = 1812;
      }
      else
      {
        uint64_t v21 = 2350915584;
        uint64_t v41 = *(void *)(a1 + 32);
        uint64_t v42 = a2;
        uint64_t v40 = 1813;
      }
LABEL_41:
      log_OutPublic(v41, v42, v40, 0, v32, v33, v34, v35, v53);
      return v21;
    }
    if (*v55)
    {
      unsigned __int16 v44 = strlen(v55);
      *(_WORD *)(a5 + 334) = v44;
      size_t v45 = v44;
      uint64_t v46 = v14;
      uint64_t v47 = v55;
LABEL_48:
      memmove(v46, v47, v45);
      *(unsigned char *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
    }
  }
LABEL_28:
  if (*(_DWORD *)a5 && *v14 == 35)
  {
    *(unsigned char *)(a5 + 76) = atoi((const char *)(a5 + 77));
    *(unsigned char *)(a5 + 77) = 0;
    *(_WORD *)(a5 + 334) = 1;
  }
  return v21;
}

uint64_t DoJPJSpell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 0;
  }
  uint64_t v16 = 0;
  for (i = 0; i < a5; uint64_t v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v21 = jpj_sysdct_CharLookup(a1, a2, a3, (char *)(a4 + i), (uint64_t)v29, 0x16u, a11);
    if ((v21 & 0x80000000) != 0) {
      break;
    }
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      size_t v22 = (unsigned __int16)(strlen((const char *)&v29[4] + 12) + 3);
      uint64_t v23 = (char *)heap_Alloc(*(void *)(a1 + 8), v22);
      if (!v23) {
        return 2350915594;
      }
      uint64_t v24 = v23;
      bzero(v23, v22);
      if (i)
      {
        strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        *(_WORD *)uint64_t v24 = 32;
        strcat(v24, (const char *)&v29[4] + 12);
      }
      *(_WORD *)&v24[strlen(v24)] = 32;
      unsigned __int16 v25 = strlen(v24);
      uint64_t v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
    }
    __int16 v26 = strlen((const char *)v29 + 4);
    if (v26) {
      i += v26;
    }
    else {
      unsigned __int16 i = a5;
    }
  }
  return v21;
}

uint64_t DoJPJLatin(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char **a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  memset(v11, 0, sizeof(v11));
  uint64_t v7 = jpj_sysdct_CharLookup(a1, a2, a3, a4, (uint64_t)v11, 0x16u, 0);
  if (!v7)
  {
    int v8 = strlen((const char *)&v11[4] + 12);
    uint64_t v9 = (char *)heap_Alloc(*(void *)(a1 + 8), (v8 + 3));
    *a5 = v9;
    if (v9) {
      strcpy(v9, (const char *)&v11[4] + 12);
    }
  }
  return v7;
}

size_t getDictSolutionJPJ(unsigned int a1, uint64_t a2, int a3, const char **a4, _WORD *a5, const char *a6, int a7, _WORD *a8, long long *a9)
{
  uint64_t v11 = a9;
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  if (!a1)
  {
    LOWORD(v14) = 0;
    unsigned __int16 v23 = 0;
    unsigned __int16 v25 = &v39;
    goto LABEL_40;
  }
  BOOL v28 = a8;
  uint64_t v29 = a4;
  __int16 v30 = 0;
  uint64_t v14 = 0;
  unsigned __int16 v31 = 0;
  BOOL v32 = a7 != 0;
  unint64_t v33 = a1;
  while (1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    unsigned __int16 v15 = *(char **)(a2 + 8 * v14);
    __int16 v16 = strlen(v15);
    *a5 = v16;
    if (v16) {
      BOOL v17 = a7 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      int v21 = 0;
      unsigned __int16 v22 = 0;
      unsigned __int16 v23 = 0;
      while (1)
      {
        uint64_t v24 = *(char **)(a2 + 8 * v14);
        if (!*((void *)&v35 + v22)) {
          *((void *)&v35 + v22) = &v24[v23];
        }
        if (a7 == 1 && !v23 && *v24 != a3) {
          break;
        }
        if (v24[v23] == a3)
        {
          ++v22;
          v24[v23] = 0;
        }
        ++v23;
        if (v21) {
          goto LABEL_30;
        }
        if (v22 + 1 == a7)
        {
          unsigned __int16 v15 = (char *)(*(void *)(a2 + 8 * v14) + v23);
LABEL_30:
          int v21 = 1;
          goto LABEL_31;
        }
        int v21 = 0;
LABEL_31:
        BOOL v18 = a7 != v22;
        if ((unsigned __int16)*a5 <= v23 || a7 == v22) {
          goto LABEL_9;
        }
      }
      unsigned __int16 v23 = 1;
      goto LABEL_30;
    }
    unsigned __int16 v23 = 0;
    BOOL v18 = v32;
LABEL_9:
    if (v18) {
      *a5 = 0;
    }
    if (*v15) {
      break;
    }
    long long v39 = v35;
    long long v40 = v36;
    __int16 v30 = v14;
    unsigned __int16 v31 = v23;
LABEL_36:
    if (++v14 >= v33)
    {
      unsigned __int16 v25 = &v39;
      uint64_t v11 = a9;
      a4 = v29;
      a8 = v28;
      LOWORD(v14) = v30;
      unsigned __int16 v23 = v31;
      goto LABEL_40;
    }
  }
  uint64_t v19 = strchr(v15, 44);
  while (1)
  {
    if (v19) {
      *uint64_t v19 = 0;
    }
    if (!strcmp(v15, a6)) {
      break;
    }
    if (v19)
    {
      int v20 = v19[1];
      unsigned __int16 v15 = v19 + 1;
      uint64_t v19 = strchr(v19 + 1, 44);
      if (v20) {
        continue;
      }
    }
    goto LABEL_36;
  }
  long long v37 = v35;
  long long v38 = v36;
  unsigned __int16 v25 = &v37;
  uint64_t v11 = a9;
  a4 = v29;
  a8 = v28;
LABEL_40:
  *a8 = v14;
  *a4 = (const char *)(*(void *)(a2 + 8 * (unsigned __int16)v14) + v23);
  long long v26 = v25[1];
  *uint64_t v11 = *v25;
  v11[1] = v26;
  size_t result = strlen(*a4);
  *a5 = result;
  return result;
}

uint64_t lookup_JPARSER(uint64_t a1, uint64_t a2, const char **a3, unsigned __int8 *a4, const char *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned __int16 v15 = 0;
  unsigned __int16 v14 = 0;
  if (*(_DWORD *)(a1 + 28))
  {
    unsigned __int16 v16 = 0;
    if (((*(uint64_t (**)(void, void, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, void))(*(void *)a1 + 152))(*(void *)(a1 + 8), *(void *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24)) & 0x80000000) == 0&& v16)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 1, &v13, &v17);
      return v14;
    }
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      unsigned __int16 v16 = 0;
      int v12 = (*(uint64_t (**)(void, void, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *))(*(void *)a1 + 96))(*(void *)(a1 + 8), *(void *)(a1 + 16), "char", a2, &v15, &v16, a4);
      uint64_t result = -1;
      if ((v12 & 0x80000000) == 0 && v16)
      {
        long long v17 = 0u;
        long long v18 = 0u;
        getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 4, &v13, &v17);
        return v14;
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    unsigned __int16 v16 = -1;
    int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, void))(*(void *)a1 + 152))(*(void *)(a1 + 8), *(void *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24));
    uint64_t result = -1;
    if ((v10 & 0x80000000) == 0 && v16 == 1)
    {
      LOWORD(result) = strlen(*v15);
      *a3 = *v15;
      return (unsigned __int16)result;
    }
  }
  return result;
}

uint64_t FillFields(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    for (unsigned __int16 i = (unsigned char **)(result + 8); ; ++i)
    {
      uint64_t v8 = (a4 - v6);
      if (a4 <= v6) {
        break;
      }
      uint64_t v9 = 0;
      while (1)
      {
        int v10 = *(unsigned __int8 *)(a3 + v6 + v9);
        if (v10 == a5) {
          break;
        }
        *(unsigned char *)(*(void *)(result + 8 * v5) + v9++) = v10;
        if (v8 == v9) {
          goto LABEL_11;
        }
      }
      *(unsigned char *)(*(void *)(result + 8 * v5) + v9) = 0;
      v6 += v9 + 1;
      if (++v5 == a2) {
        return result;
      }
    }
    uint64_t v8 = 0;
LABEL_11:
    *(unsigned char *)(*(void *)(result + 8 * (unsigned __int16)v5) + v8) = 0;
    for (uint64_t j = 1; j != 5; ++j)
    {
      if (v5 + j >= (unint64_t)a2) {
        break;
      }
      int v12 = *i++;
      unsigned char *v12 = 0;
    }
  }
  return result;
}

uint64_t virtual_fseek(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 0:
      goto LABEL_6;
    case 1:
      a3 += *a2;
      goto LABEL_6;
    case 2:
      a3 = *(void *)(a1 + 8) + ~a3;
LABEL_6:
      uint64_t result = 0;
      *a2 = a3;
      return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t virtual_getc(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 < 0 || v2 >= a1[1]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *(unsigned __int8 *)(*a1 + v2);
  *a2 = v2 + 1;
  return result;
}

uint64_t xcode_Utf16leToWin932(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6 = 2370838535;
  if (a2 && a4 && a5)
  {
    if (a3)
    {
      int v10 = a2;
      int v12 = 0;
      uint64_t v13 = a3;
      while ((unsigned __int16)*a5 > (unsigned __int16)v12)
      {
        unsigned int v14 = *v10++;
        v12 += XLIT_chUnicodeWideToSJIS(v14, (char *)(a4 + (unsigned __int16)v12), a1, a6);
        if (!--v13) {
          goto LABEL_10;
        }
      }
      return 2370838537;
    }
    else
    {
      LOWORD(v12) = 0;
LABEL_10:
      uint64_t v6 = 0;
      *a5 = v12;
    }
  }
  return v6;
}

void *mas_list_insert(void *result, void *a2)
{
  if (result)
  {
    if (a2)
    {
      if (result[5] <= a2[5]) {
        a2[1] = mas_list_insert();
      }
      else {
        a2[2] = mas_list_insert();
      }
      return a2;
    }
    else
    {
      result[1] = 0;
      result[2] = 0;
    }
  }
  return result;
}

uint64_t lattice_word_print_all(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t appended = ssftstring_Reserve(a3, 64);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t v15 = ssftstring_Clear(a3);
  if ((v15 & 0x80000000) == 0 && a5 >= -1)
  {
    uint64_t v16 = 0;
    uint64_t v30 = (a5 + 2);
    uint64_t v31 = a4;
    while (1)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[FDP] x=%d", v12, v13, v14, v16);
      uint64_t v17 = *(void *)(a4 + 8 * v16);
      if (v17) {
        break;
      }
LABEL_25:
      ++v16;
      a4 = v31;
      if (v16 == v30) {
        return v15;
      }
    }
    int v18 = 0;
    while (1)
    {
      uint64_t v19 = 560;
      if (a6 == 1) {
        uint64_t v19 = 552;
      }
      uint64_t v20 = *(void *)(v17 + v19);
      __sprintf_chk(__s, 0, 0x40uLL, "[FDP] (%3d,%3d,%3d)", v16, *(_DWORD *)(v17 + 580), v18);
      uint64_t appended = ssftstring_AssignCStr(a3, __s);
      if ((appended & 0x80000000) != 0) {
        return appended;
      }
      int v21 = *(uint64_t **)v17;
      if (*(void *)v17)
      {
        for (uint64_t i = *v21; i; uint64_t i = *(void *)(i + 16))
        {
          uint64_t appended = ssftstring_AppendCStr(a3, *(char **)i);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t appended = ssftstring_AppendCStr(a3, ":");
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t appended = log_mbs_fput_sjis(a3, *(int **)(i + 8));
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t appended = ssftstring_AppendCStr(a3, " ");
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
        }
      }
      else
      {
        if (*(_DWORD *)(v17 + 568) == 1) {
          unsigned __int16 v23 = "<_START>";
        }
        else {
          unsigned __int16 v23 = "<_END>";
        }
        uint64_t appended = ssftstring_AppendCStr(a3, v23);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
      }
      strcpy(__s, "cost_h = ");
      LH_itoa(*(_DWORD *)(v17 + 8), v33, 0xAu);
      __strcat_chk();
      __strcat_chk();
      LH_itoa(*(_DWORD *)(v17 + 16), v33, 0xAu);
      __strcat_chk();
      uint64_t appended = ssftstring_AppendCStr(a3, __s);
      if ((appended & 0x80000000) != 0) {
        return appended;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = ssftstring_CStr(a3);
      log_OutText(v24, a2, 5, 0, (uint64_t)"%s", v26, v27, v28, v25);
      uint64_t v15 = ssftstring_Clear(a3);
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      ++v18;
      uint64_t v17 = v20;
      if (!v20) {
        goto LABEL_25;
      }
    }
  }
  return v15;
}

void *lattice_word_free_all(void *result, int a2, void *a3)
{
  if (a2 >= -1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = (a2 + 2);
    do
    {
      uint64_t v7 = v4[v5];
      if (v7)
      {
        do
        {
          uint64_t v8 = *(void *)(v7 + 552);
          uint64_t result = heap_Free(a3, v7);
          uint64_t v7 = v8;
        }
        while (v8);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t add_to_lattice(_DWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v10 = a2;
  if (!a2)
  {
    uint64_t v18 = heap_Alloc((uint64_t)a10, 584);
    uint64_t v10 = v18;
    if (!v18) {
      return v10;
    }
    *(_DWORD *)(v18 + 544) = 0;
    *(void *)(v18 + 536) = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 552) = 0;
    *(void *)(v18 + 568) = 0;
    *(void *)(v18 + 560) = 0;
    *(void *)uint64_t v18 = a3;
    if (a3)
    {
      uint64_t v19 = *a3;
      if (!*a3) {
        return 0;
      }
      while (strcmp(*(const char **)v19, "WCOST"))
      {
        uint64_t v19 = *(void *)(v19 + 16);
        if (!v19) {
          return 0;
        }
      }
      size_t v31 = mbs_len_bytes(*(void *)(v19 + 8)) + 1;
      BOOL v32 = (char *)heap_Alloc((uint64_t)a10, v31);
      if (!v32)
      {
        heap_Free(a10, v10);
        return 0;
      }
      unint64_t v33 = v32;
      bzero(v32, v31);
      if (mbs2sjis(*(void *)(v19 + 8), 0, *(_DWORD *)(*(void *)(v19 + 8) + 8), (uint64_t)v33, v31) == -1) {
        return 0;
      }
      *(void *)(v10 + 16) = atoi(v33);
      heap_Free(a10, (uint64_t)v33);
    }
    else
    {
      *(_DWORD *)(v18 + 572) = 1;
      *(void *)(v18 + 16) = 0;
    }
    *(_DWORD *)(v10 + 576) = a4;
    *(_DWORD *)(v10 + 580) = a5;
    uint64_t v25 = (uint64_t *)(a6 + 8 * (a4 + 1));
    uint64_t v26 = *v25;
    if (*v25)
    {
      do
      {
        uint64_t v27 = v26;
        uint64_t v26 = *(void *)(v26 + 552);
      }
      while (v26);
      uint64_t v25 = (uint64_t *)(v27 + 552);
    }
    uint64_t *v25 = v10;
    uint64_t v28 = (uint64_t *)(a7 + 8 * (a4 + 1 + a5));
    uint64_t v29 = *v28;
    if (*v28)
    {
      do
      {
        uint64_t v30 = v29;
        uint64_t v29 = *(void *)(v29 + 560);
      }
      while (v29);
      uint64_t v28 = (uint64_t *)(v30 + 560);
    }
    *uint64_t v28 = v10;
  }
  uint64_t v12 = *(int *)(v10 + 544);
  if ((int)v12 > 31) {
    return 0;
  }
  if (a1)
  {
    *(void *)(v10 + 8 * v12 + 280) = a1;
    if (a1[142] == 1) {
      uint64_t v20 = -1;
    }
    else {
      uint64_t v20 = *(void *)(*(void *)a1 + 8);
    }
    if (*(_DWORD *)(v10 + 572) == 1) {
      uint64_t v21 = -1;
    }
    else {
      uint64_t v21 = *(void *)(*(void *)v10 + 8);
    }
    uint64_t v22 = connection_table(v20, v21, a9);
    uint64_t v23 = *(int *)(v10 + 544);
    *(void *)(v10 + 8 * v23 + 24) = v22;
    *(_DWORD *)(v10 + 544) = v23 + 1;
  }
  return v10;
}

uint64_t forward_dp(int a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7)
{
  if (a1 >= -1)
  {
    uint64_t v13 = (a1 + 2);
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    do
    {
      *v14++ = 0;
      *v15++ = 0;
      --v13;
    }
    while (v13);
  }
  uint64_t result = heap_Alloc((uint64_t)a7, 584);
  if (result)
  {
    *(_DWORD *)(result + 544) = 0;
    *(void *)(result + 536) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 568) = 0;
    *(void *)(result + 552) = 0;
    *(void *)(result + 560) = 0;
    *(_DWORD *)(result + 568) = 1;
    *(void *)(result + 576) = 0;
    *a4 = result;
    *a5 = result;
    if (a1 <= 0)
    {
      unint64_t v19 = a1;
LABEL_22:
      uint64_t v27 = a5[v19];
      if (v27)
      {
        uint64_t v28 = 0;
        while (1)
        {
          uint64_t result = add_to_lattice((_DWORD *)v27, v28, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
          if (!result) {
            break;
          }
          uint64_t v28 = result;
          uint64_t v27 = *(void *)(v27 + 560);
          if (!v27) {
            goto LABEL_28;
          }
        }
      }
      else
      {
        uint64_t result = add_to_lattice(0, 0, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (result)
        {
LABEL_28:
          uint64_t v29 = (a1 + 1);
          if ((a1 & 0x80000000) == 0)
          {
            uint64_t v30 = 0;
            do
            {
              for (uint64_t i = a4[++v30]; i; uint64_t i = *(void *)(i + 552))
              {
                uint64_t v32 = *(unsigned int *)(i + 544);
                if (v32)
                {
                  uint64_t v33 = *(void *)(i + 280);
                  uint64_t v34 = *(void *)(i + 24) + *(void *)(v33 + 8) + *(void *)(v33 + 16);
                  *(void *)(i + 8) = v34;
                  *(void *)(i + 536) = v33;
                  if ((int)v32 >= 1)
                  {
                    uint64_t v35 = (uint64_t *)(i + 280);
                    do
                    {
                      uint64_t v36 = *v35;
                      uint64_t v37 = *(v35 - 32) + *(void *)(*v35 + 8) + *(void *)(*v35 + 16);
                      if (v37 < v34)
                      {
                        *(void *)(i + 8) = v37;
                        *(void *)(i + 536) = v36;
                        uint64_t v34 = v37;
                      }
                      ++v35;
                      --v32;
                    }
                    while (v32);
                  }
                }
                else
                {
                  *(void *)(i + 8) = 1000000;
                  *(void *)(i + 536) = 0;
                }
              }
            }
            while (v30 != v29);
          }
          return a5[(int)v29];
        }
      }
    }
    else
    {
      unint64_t v18 = 0;
      unint64_t v19 = a1;
      int v20 = a1;
      while (v18 >= v19)
      {
LABEL_19:
        ++v18;
        --v20;
        if (v18 == v19) {
          goto LABEL_22;
        }
      }
      int v21 = 0;
      unint64_t v38 = v19;
      long long v39 = a3;
      while (1)
      {
        int address = box_hash_get_address(v18, v21);
        uint64_t leading_word = box_hash_get_leading_word(a3, v18, v21, address);
        if (leading_word) {
          break;
        }
LABEL_18:
        ++v21;
        unint64_t v19 = v38;
        a3 = v39;
        if (v21 == v20) {
          goto LABEL_19;
        }
      }
      uint64_t v24 = (uint64_t *)leading_word;
      while (1)
      {
        uint64_t v25 = a5[v18];
        if (v25) {
          break;
        }
        uint64_t result = add_to_lattice(0, 0, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result) {
          return result;
        }
LABEL_17:
        uint64_t v24 = (uint64_t *)v24[3];
        if (!v24) {
          goto LABEL_18;
        }
      }
      uint64_t v26 = 0;
      while (1)
      {
        uint64_t result = add_to_lattice((_DWORD *)v25, v26, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result) {
          break;
        }
        uint64_t v26 = result;
        uint64_t v25 = *(void *)(v25 + 560);
        if (!v25) {
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

uint64_t add_lattice_word_to_cyk_table(void *a1, uint64_t a2, int *a3, void *a4)
{
  uint64_t leading_tree = cyk_hash_get_leading_tree(a1, a3[144], a3[145]);
  if (leading_tree)
  {
    while (*(_DWORD *)(leading_tree + 32) || *(void *)(leading_tree + 48) != **(void **)a3)
    {
      uint64_t leading_tree = *(void *)(leading_tree + 88);
      if (!leading_tree) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = heap_Alloc((uint64_t)a4, 96);
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = **(void **)a3;
    *(void *)uint64_t result = *(void *)(*(void *)a3 + 8);
    *(_DWORD *)(result + 32) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 48) = v10;
    *(void *)(result + 24) = *(void *)(*(void *)a3 + 16);
    *(void *)(result + 40) = 0;
    int v11 = a3[144];
    unsigned int v12 = a3[145];
    *(_DWORD *)(result + 72) = v11;
    *(void *)(result + 76) = v12;
    *(_DWORD *)(result + 8) = -1;
    uint64_t v13 = cyk_hash_get_leading_tree(a1, v11, v12);
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = *(void *)(v13 + 88);
      }
      while (v13);
      *(void *)(v14 + 88) = v9;
    }
    else if ((cyk_hash_add_leading_tree(a1, v9, a3[144], a3[145], (uint64_t)a4) & 0x1FFF) == 0xA)
    {
      heap_Free(a4, v9);
      return 0;
    }
  }
  return 1;
}

uint64_t add_word_to_cyk_table(void *a1, uint64_t a2, int **a3, void *a4)
{
  if ((*a3)[142] != 1) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v5 = (int **)v5[3];
    if (!v5 || (*v5)[143] == 1) {
      break;
    }
    uint64_t result = add_lattice_word_to_cyk_table(a1, a2, *v5, a4);
    if (!result) {
      return result;
    }
  }
  return 1;
}

uint64_t add_unknown_to_cyk_table(uint64_t a1, uint64_t a2, int a3, char *__s1, const char *a5, uint64_t **a6, void *a7, int a8, uint64_t a9, void *a10)
{
  uint64_t number_of_symbol = get_number_of_symbol(a6, __s1);
  uint64_t result = 0;
  int v18 = a3 - a2;
  if (a3 >= (int)a2 && number_of_symbol != -1)
  {
    uint64_t result = heap_Alloc((uint64_t)a10, (2 * (v18 + 1)) | 1u);
    if (result)
    {
      unint64_t v19 = (const char *)result;
      if (mbs2sjis(a1, a2, v18 + 1, result, (2 * (v18 + 1)) | 1u) == -1)
      {
        heap_Free(a10, (uint64_t)v19);
        return 0;
      }
      int v20 = unknown_info_create(v19, __s1, a5, "0", a10);
      heap_Free(a10, (uint64_t)v19);
      if (!v20) {
        return 0;
      }
      if (*(unsigned char *)(a9 + 68)) {
        int v21 = a2 + 1;
      }
      else {
        int v21 = a2;
      }
      uint64_t result = heap_Alloc((uint64_t)a10, 96);
      if (result)
      {
        uint64_t v22 = result;
        *(void *)uint64_t result = number_of_symbol;
        *(_DWORD *)(result + 32) = 0;
        *(void *)(result + 88) = 0;
        *(void *)(result + 24) = 0;
        *(void *)(result + 40) = 0;
        *(void *)(result + 48) = v20;
        *(_DWORD *)(result + 72) = v21;
        *(_DWORD *)(result + 76) = v18;
        *(_DWORD *)(result + 80) = 0;
        *(_DWORD *)(result + 8) = -1;
        uint64_t leading_tree = cyk_hash_get_leading_tree(a7, v21, v18);
        if (leading_tree)
        {
          do
          {
            uint64_t v24 = leading_tree;
            uint64_t leading_tree = *(void *)(leading_tree + 88);
          }
          while (leading_tree);
          *(void *)(v24 + 88) = v22;
          return 1;
        }
        return (cyk_hash_add_leading_tree(a7, v22, v21, v18, (uint64_t)a10) & 0x1FFF) != 0xA;
      }
    }
  }
  return result;
}

void *backward_as(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v17 = (_OWORD *)heap_Alloc((uint64_t)a10, 48);
  if (!v17) {
    return 0;
  }
  int v18 = v17;
  uint64_t v56 = a5;
  v17[1] = 0u;
  v17[2] = 0u;
  *uint64_t v17 = 0u;
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = (void *)heap_Alloc((uint64_t)a10, 48);
  if (!v20)
  {
    v18[1] = 0;
    goto LABEL_26;
  }
  uint64_t v51 = a6;
  unsigned __int16 v52 = a7;
  uint64_t v22 = 0;
  uint64_t v23 = a1;
  int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v49 = v23;
  int v50 = 0;
  *int v20 = v23;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = 0;
  v20[5] = v19;
  v18[1] = v20;
  uint64_t v54 = a4;
  uint64_t v55 = a8;
  int v53 = a2;
  while (1)
  {
    ++v22;
    if ((*(_DWORD *)(a4 + 1320) & 0x80000000) == 0) {
      break;
    }
LABEL_7:
    uint64_t v27 = v18;
    while (v20)
    {
      uint64_t v28 = v20;
      uint64_t v29 = v27;
      int v20 = (void *)v20[1];
      uint64_t v27 = v28;
      if (!v20)
      {
        uint64_t v30 = v29[1];
        v29[1] = v28[2];
        goto LABEL_12;
      }
    }
    uint64_t v30 = 0;
LABEL_12:
    size_t v31 = *(int **)v30;
    if (*(_DWORD *)(*(void *)v30 + 568) == 1)
    {
      add_word_to_cyk_table(a8, v21, (int **)v30, a10);
      if (++v24 >= a2) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v57 = v22;
      *(void *)uint64_t v58 = v25;
      if (v31[136] >= 1)
      {
        uint64_t v32 = 0;
        do
        {
          uint64_t v33 = *(void *)(v30 + 32);
          uint64_t v34 = &v31[2 * v32];
          uint64_t v35 = *((void *)v34 + 35);
          uint64_t v36 = *((void *)v34 + 3);
          uint64_t v38 = *(void *)(v35 + 8);
          uint64_t v37 = *(void *)(v35 + 16);
          long long v39 = (void *)heap_Alloc((uint64_t)a10, 48);
          if (!v39) {
            return 0;
          }
          uint64_t v40 = v37 + v33 + v36;
          *long long v39 = v35;
          v39[1] = 0;
          v39[2] = 0;
          v39[3] = v30;
          v39[4] = v40;
          v39[5] = v40 + v38;
          v18[1] = mas_list_insert(v39, (void *)v18[1]);
          ++v32;
          size_t v31 = *(int **)v30;
        }
        while (v32 < *(int *)(*(void *)v30 + 544));
      }
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
      if (*(void *)v58) {
        *(void *)(*(void *)v58 + 8) = v30;
      }
      else {
        int v50 = (void *)v30;
      }
      uint64_t v25 = v30;
      a4 = v54;
      a8 = v55;
      a2 = v53;
      uint64_t v22 = v57;
    }
    int v20 = (void *)v18[1];
    if (!v20) {
      goto LABEL_30;
    }
  }
  if (kaldi::nnet1::UpdatableComponent::IsUpdatable((kaldi::nnet1::UpdatableComponent *)*(unsigned int *)(a4 + 1320)) != 1)
  {
    int v20 = (void *)v18[1];
    goto LABEL_7;
  }
  if (v24)
  {
LABEL_30:
    as_list_free_all(v18, a10);
    as_list_free_all(v50, a10);
    return a8;
  }
  uint64_t v42 = 0;
  uint64_t v43 = *(void *)(v49 + 536);
  for (i = v43; ; uint64_t v43 = *(void *)(i + 536))
  {
    int v45 = *(_DWORD *)(i + 576);
    uint64_t v46 = v42;
    while (!v43)
    {
      int v47 = v45 - 1;
      uint64_t v42 = v46;
      if (v45 >= 1)
      {
        int v47 = v45;
        while (1)
        {
          uint64_t v42 = *(void *)(v56 + 8 * --v47);
          if (v42) {
            break;
          }
          if (v47 <= 0)
          {
            uint64_t v42 = 0;
            int v47 = -1;
            break;
          }
        }
      }
      if (*(unsigned char *)(a4 + 68)) {
        int v48 = v45 - 2;
      }
      else {
        int v48 = v45 - 1;
      }
      if (!add_unknown_to_cyk_table(v51, v47 - (*(unsigned char *)(a4 + 68) != 0), v48, (char *)(a4 + 136), (const char *)(a4 + 200), v52, a8, v26, a4, a10))goto LABEL_49; {
      uint64_t v43 = 0;
      }
      uint64_t v46 = 0;
      uint64_t i = v42;
      if (v42) {
        goto LABEL_46;
      }
    }
    uint64_t v42 = v46;
    uint64_t i = v43;
LABEL_46:
    if (*(_DWORD *)(i + 568) == 1) {
      goto LABEL_30;
    }
    if (!add_lattice_word_to_cyk_table(a8, v21, (int *)i, a10)) {
      break;
    }
  }
LABEL_49:
  cyk_hash_free(a8, a10);
LABEL_26:
  as_list_free_all(v18, a10);
  return 0;
}

uint64_t iso_parse_fdp_bas(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t *a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v19 = heap_Alloc(*(void *)(a1 + 24), 96800);
  if (!v19)
  {
    uint64_t v26 = 0;
    goto LABEL_7;
  }
  int v24 = (uint64_t *)v19;
  int v25 = *(_DWORD *)(a3 + 8);
  if (*(unsigned char *)(a2 + 68)) {
    ++v25;
  }
  if (v25 < 2049)
  {
    unsigned int v57 = v25;
    int v60 = 0;
    v63[1] = 4000;
    uint64_t v62 = 0;
    v63[0] = v19 + 32800;
    bzero((void *)(v19 + 32800), 0x7D00uLL);
    long long v29 = *(_OWORD *)(a1 + 176);
    long long v30 = *(_OWORD *)(a1 + 208);
    v58[12] = *(_OWORD *)(a1 + 192);
    v58[13] = v30;
    long long v31 = *(_OWORD *)(a1 + 112);
    long long v32 = *(_OWORD *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 160);
    char v58[8] = *(_OWORD *)(a1 + 128);
    v58[9] = v32;
    v58[10] = v33;
    v58[11] = v29;
    long long v34 = *(_OWORD *)(a1 + 48);
    long long v35 = *(_OWORD *)(a1 + 80);
    long long v36 = *(_OWORD *)(a1 + 96);
    v58[4] = *(_OWORD *)(a1 + 64);
    v58[5] = v35;
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v59 = *(void *)(a1 + 224);
    v58[6] = v36;
    v58[7] = v31;
    long long v38 = *(_OWORD *)(a1 + 16);
    v58[0] = *(_OWORD *)a1;
    v58[1] = v38;
    int v58[2] = *(_OWORD *)(a1 + 32);
    v58[3] = v34;
    uint64_t v27 = look_up_dictionary(a1, a3, a2, 20, (uint64_t **)SF_symbol_file, v63, v37, (uint64_t)v58, a7, a8, a9, a10, a11, &v60);
    if ((v27 & 0x80000000) != 0) {
      return v27;
    }
    if (v60 == 1)
    {
      uint64_t v47 = forward_dp(v57, v39, v63, v24 + 2050, v24, a4, *(void **)(a1 + 24));
      if (a5 == 1)
      {
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 5, 0, (uint64_t)"[FDP] Dumping LATTICE (RESULT OF FORWARD DP)", v44, v45, v46, v55);
        uint64_t v27 = lattice_word_print_all(*(void *)(a1 + 32), *(void *)(a1 + 216), *(void *)(a1 + 224), (uint64_t)(v24 + 2050), v57, 1);
        if ((v27 & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }
      if (v47)
      {
        uint64_t v61 = v24 + 8100;
        LODWORD(v62) = 4000;
        bzero(v24 + 8100, 0x7D00uLL);
        if (backward_as(v47, *(_DWORD *)(a2 + 8), v57, a2, (uint64_t)v24, a3, (uint64_t **)SF_symbol_file, &v61, v55, *(void **)(a1 + 24)))
        {
          if (a5 != 1
            || (log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 5, 0, (uint64_t)"[A*] RESULT OF BACKWARD A Star", v48, v49, v50, v56), uint64_t v27 = log_intermediate_tree(*(void *)(a1 + 32), *(void *)(a1 + 216), *(void *)(a1 + 224), (int *)a2, &v61, v57, (uint64_t *)a1), (v27 & 0x80000000) == 0))
          {
            lattice_word_free_all(v24 + 2050, v57, *(void **)(a1 + 24));
            if (*(_DWORD *)(a2 + 48) == 1)
            {
              uint64_t v51 = *(void *)(a1 + 24);
              int v52 = 1;
LABEL_30:
              uint64_t v54 = parser_result_create(v52, 0, v51);
              goto LABEL_31;
            }
            int v53 = *(_DWORD *)(a2 + 24);
            switch(v53)
            {
              case 3:
                uint64_t v54 = parse_cyk_as_step(a2, &v61, v57, *(void *)(a1 + 56), a1 + 64, a1 + 104, a1 + 144, *(void *)(a1 + 40), (uint64_t *)a1, *(void **)(a1 + 24));
                break;
              case 2:
                uint64_t v54 = parse_cyk_as((_DWORD *)a2, &v61, v57, *(void *)(a1 + 48), *(void *)(a1 + 40), (uint64_t *)a1, *(void **)(a1 + 24));
                break;
              case 1:
                uint64_t v54 = parse_cyk(a2, &v61, v57, *(void *)(a1 + 48), *(void *)(a1 + 40), (uint64_t *)a1, *(void **)(a1 + 24));
                break;
              default:
                uint64_t v51 = *(void *)(a1 + 24);
                int v52 = 2;
                goto LABEL_30;
            }
LABEL_31:
            uint64_t v26 = v54;
            cyk_hash_free(&v61, *(void **)(a1 + 24));
            box_hash_free(v63, *(void **)(a1 + 24));
            goto LABEL_32;
          }
LABEL_22:
          uint64_t v26 = 0;
          goto LABEL_8;
        }
      }
      box_hash_free(v63, *(void **)(a1 + 24));
      uint64_t v26 = parser_result_create(2, 0, *(void *)(a1 + 24));
      lattice_word_free_all(v24 + 2050, v57, *(void **)(a1 + 24));
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 52001, 0, v40, v41, v42, v43, v55);
      box_hash_free(v63, *(void **)(a1 + 24));
      uint64_t v26 = parser_result_create(2, 0, *(void *)(a1 + 24));
    }
LABEL_32:
    heap_Free(*(void **)(a1 + 24), (uint64_t)v24);
    goto LABEL_8;
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 52000, "%s%d", v20, v21, v22, v23, "maxlength");
  uint64_t v26 = parser_result_create(2, 0, *(void *)(a1 + 24));
  heap_Free(*(void **)(a1 + 24), (uint64_t)v24);
LABEL_7:
  uint64_t v27 = 0;
LABEL_8:
  *a6 = v26;
  return v27;
}

uint64_t tree_append(uint64_t result, uint64_t a2)
{
  if (!result) {
    return a2;
  }
  uint64_t v2 = result;
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = *(void *)(v2 + 16);
  }
  while (v2);
  *(void *)(v3 + 16) = a2;
  return result;
}

uint64_t *info_copy_sjis(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
    BOOL v5 = v4 == 0;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      char v8 = 0;
      char v9 = 1;
      while (1)
      {
        uint64_t v10 = v4;
        if (v9) {
          uint64_t v7 = v4;
        }
        int v11 = strlen(*(const char **)v3);
        unsigned int v12 = (char *)heap_Alloc((uint64_t)a2, (v11 + 1));
        *uint64_t v4 = (uint64_t)v12;
        if (!v12) {
          break;
        }
        strcpy(v12, *(const char **)v3);
        uint64_t v13 = mbs_len_bytes(*(void *)(v3 + 8)) + 1;
        uint64_t v14 = heap_Alloc((uint64_t)a2, v13);
        if (!v14
          || mbs2sjis(*(void *)(v3 + 8), 0, *(_DWORD *)(*(void *)(v3 + 8) + 8), v14, v13) == -1)
        {
          goto LABEL_23;
        }
        v10[1] = v14;
        if ((v9 & 1) == 0) {
          v6[2] = (uint64_t)v10;
        }
        uint64_t v3 = *(void *)(v3 + 16);
        if (!v3)
        {
          v10[2] = 0;
          return v7;
        }
        char v8 = 1;
        uint64_t v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
        char v9 = 0;
        BOOL v5 = v4 == 0;
        uint64_t v6 = v10;
        if (!v4) {
          goto LABEL_15;
        }
      }
      uint64_t v14 = 0;
LABEL_23:
      uint64_t v4 = v10;
      if (v8) {
        goto LABEL_16;
      }
    }
    else
    {
      char v8 = 0;
      uint64_t v7 = 0;
LABEL_15:
      uint64_t v14 = 0;
      if (v8) {
LABEL_16:
      }
        WordInfo_free(v7, a2);
    }
    if (!v5)
    {
      heap_Free(a2, *v4);
      heap_Free(a2, (uint64_t)v4);
    }
    heap_Free(a2, v14);
  }
  return 0;
}

uint64_t *WordInfo_free(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    heap_Free(a2, *result);
    heap_Free(a2, *(void *)(v3 + 8));
    WordInfo_free(*(void *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

void *tree_duplicate(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = heap_Alloc((uint64_t)a4, 64);
  if (v8)
  {
    char v9 = (const char *)v8;
    if (get_name_of_symbol(SF_symbol_file, a3, *(void *)a1, v8))
    {
      int v10 = *(_DWORD *)(a1 + 32);
      switch(v10)
      {
        case 0:
          if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1) {
            break;
          }
          uint64_t v15 = info_copy_sjis(*(void *)(a1 + 48), a4);
          if (!v15) {
            break;
          }
          uint64_t v16 = v15;
          uint64_t v17 = *(uint64_t **)(a1 + 24);
          if (v17 && *(_DWORD *)(a2 + 12) == 1)
          {
            int v18 = attribute_copy_all(v17, a4);
            if (!v18)
            {
              WordInfo_free(v16, a4);
              break;
            }
          }
          else
          {
            int v18 = 0;
          }
          unsigned int v12 = jp_tree_create(*(void *)a1, v9, 0, (uint64_t)v18, 0, (uint64_t)v16, a4);
          if (!v12) {
            WordInfo_free(v16, a4);
          }
          goto LABEL_33;
        case 1:
          uint64_t v19 = tree_duplicate(*(void *)(a1 + 48), a2, a3, a4);
          if (v19)
          {
            uint64_t v20 = (void *)v19;
            if (*v9 != 95 || *(_DWORD *)(a2 + 28) != 1)
            {
              uint64_t v21 = *(uint64_t **)(a1 + 24);
              if (v21 && *(_DWORD *)(a2 + 12) == 1)
              {
                uint64_t v22 = attribute_copy_all(v21, a4);
                if (!v22) {
                  break;
                }
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v12 = jp_tree_create(*(void *)a1, v9, 0, (uint64_t)v22, (uint64_t)v20, 0, a4);
              if (!v12) {
                jpe_FreeTree(v20, a4);
              }
              goto LABEL_33;
            }
            unsigned int v12 = (void *)v19;
            goto LABEL_33;
          }
          break;
        case 2:
          uint64_t v11 = tree_duplicate(*(void *)(a1 + 40), a2, a3, a4);
          if (v11)
          {
            unsigned int v12 = (void *)v11;
            uint64_t v13 = v11;
            do
            {
              uint64_t v14 = v13;
              uint64_t v13 = *(void *)(v13 + 16);
            }
            while (v13);
            *(void *)(v14 + 16) = tree_duplicate(*(void *)(a1 + 48), a2, a3, a4);
LABEL_27:
            if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1) {
              goto LABEL_33;
            }
            uint64_t v23 = *(uint64_t **)(a1 + 24);
            if (v23 && *(_DWORD *)(a2 + 12) == 1)
            {
              int v24 = attribute_copy_all(v23, a4);
              if (!v24) {
                break;
              }
            }
            else
            {
              int v24 = 0;
            }
            unsigned int v12 = jp_tree_create(*(void *)a1, v9, 0, (uint64_t)v24, (uint64_t)v12, 0, a4);
            goto LABEL_33;
          }
          unsigned int v12 = (void *)tree_duplicate(*(void *)(a1 + 48), a2, a3, a4);
          if (v12) {
            goto LABEL_27;
          }
LABEL_33:
          heap_Free(a4, (uint64_t)v9);
          return v12;
      }
    }
    unsigned int v12 = 0;
    goto LABEL_33;
  }
  return 0;
}

void *jp_tree_create(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = (void *)heap_Calloc(a7, 1, 48);
  uint64_t v15 = v14;
  if (v14)
  {
    *uint64_t v14 = a1;
    int v16 = strlen(a2);
    uint64_t v17 = (char *)heap_Alloc((uint64_t)a7, (v16 + 1));
    v15[1] = v17;
    if (v17)
    {
      strcpy(v17, a2);
      v15[2] = a3;
      v15[3] = a4;
      v15[4] = a5;
      v15[5] = a6;
    }
    else
    {
      heap_Free(a7, (uint64_t)v15);
      return 0;
    }
  }
  return v15;
}

uint64_t jpe_FreeTree(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t v4 = v3[4];
      if (v4)
      {
        jpe_FreeTree(v4, a2);
      }
      else
      {
        BOOL v5 = (uint64_t *)v3[5];
        if (v5) {
          WordInfo_free(v5, a2);
        }
      }
      uint64_t v6 = (void *)v3[2];
      jpe_FreeTreeOne((uint64_t)v3, a2);
      uint64_t v3 = v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t jpe_FreeTreeOne(uint64_t a1, void *a2)
{
  if (a1)
  {
    heap_Free(a2, *(void *)(a1 + 8));
    attribute_free_all(*(uint64_t **)(a1 + 24), a2);
    heap_Free(a2, a1);
  }
  return 1;
}

uint64_t *free_information(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    heap_Free(a2, *result);
    mbs_free(*(uint64_t **)(v3 + 8), a2);
    heap_Free(a2, *(void *)(v3 + 8));
    free_information(*(void *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t create_info(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = heap_Calloc(a3, 1, 32);
  if (v5)
  {
    uint64_t v6 = heap_Calloc(a3, 1, 16);
    *(void *)(v5 + 8) = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      int v8 = strlen(a2);
      if ((mbs_create(v7, v8, a2, a3) & 0x80000000) == 0)
      {
        __strcpy_chk();
        int v9 = strlen(__s);
        int v10 = (char *)heap_Alloc((uint64_t)a3, (v9 + 1));
        *(void *)uint64_t v5 = v10;
        if (v10)
        {
          strcpy(v10, __s);
          *(void *)(v5 + 16) = 0;
          *(void *)(v5 + 24) = 0;
          return v5;
        }
        mbs_free(*(uint64_t **)(v5 + 8), a3);
      }
      heap_Free(a3, *(void *)(v5 + 8));
    }
    heap_Free(a3, v5);
    return 0;
  }
  return v5;
}

void *word_data_free_all(uint64_t **a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)(*a1)[3];
  if (v5)
  {
    do
    {
      uint64_t v6 = (uint64_t *)v5[3];
      free_information(v5, a2);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  free_information(v4, a2);
  attribute_free_all(a1[2], a2);
  return heap_Free(a2, (uint64_t)a1);
}

uint64_t BSCompareUniToTts(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t XLIT_chUnicodeWideToSJIS(unsigned int a1, char *a2, uint64_t a3, uint64_t a4)
{
  __int16 v28 = a1;
  if (a1 - 65534 >= 2 && a1 != 65279)
  {
    if (a1 <= 0x7E)
    {
      *a2 = a1;
      return 1;
    }
    if (a1 - 1025 <= 0x50)
    {
      *a2 = -124;
      if (a1 == 1025)
      {
        char v8 = 70;
      }
      else
      {
        if (a1 <= 0x415) {
          char v14 = 48;
        }
        else {
          char v14 = 49;
        }
        char v15 = v14 + a1;
        if (a1 > 0x42F) {
          v15 += 15;
        }
        char v16 = a1 > 0x435;
        if (a1 > 0x43D) {
          ++v16;
        }
        char v8 = v16 + v15;
      }
      a2[1] = v8;
      return 2;
    }
    if (a1 - 913 <= 0x38)
    {
      if (a1 > 0x3A1) {
        int v9 = -32755;
      }
      else {
        int v9 = -32754;
      }
      unsigned int v10 = v9 + a1;
      if (a1 > 0x3A9) {
        ++v10;
      }
      unsigned int v11 = v10 - (a1 > 0x3C1);
LABEL_21:
      unsigned int v12 = bswap32(v11);
LABEL_22:
      unsigned int v13 = HIWORD(v12);
LABEL_23:
      *(_WORD *)a2 = v13;
      return 2;
    }
    if ((unsigned __int16)(a1 + 159) <= 0x3Eu)
    {
      *a2 = a1 + 64;
      return 1;
    }
    if ((unsigned __int16)(a1 + 255) <= 0x5Du)
    {
      uint64_t v5 = 0;
      unsigned int v17 = 33097;
      switch(a1)
      {
        case 0xFF01u:
          goto LABEL_88;
        case 0xFF02u:
        case 0xFF07u:
          return v5;
        case 0xFF03u:
          unsigned int v17 = 33172;
          goto LABEL_88;
        case 0xFF04u:
          unsigned int v17 = 33168;
          goto LABEL_88;
        case 0xFF05u:
          unsigned int v17 = 33171;
          goto LABEL_88;
        case 0xFF06u:
          unsigned int v17 = 33173;
          goto LABEL_88;
        case 0xFF08u:
          unsigned int v17 = 33129;
          goto LABEL_88;
        case 0xFF09u:
          unsigned int v17 = 33130;
          goto LABEL_88;
        case 0xFF0Au:
          unsigned int v17 = 33174;
          goto LABEL_88;
        case 0xFF0Bu:
          unsigned int v17 = 33147;
          goto LABEL_88;
        case 0xFF0Cu:
          unsigned int v17 = 33091;
          goto LABEL_88;
        case 0xFF0Du:
          unsigned int v17 = 33148;
          goto LABEL_88;
        case 0xFF0Eu:
          unsigned int v17 = 33092;
          goto LABEL_88;
        case 0xFF0Fu:
          unsigned int v17 = 33118;
          goto LABEL_88;
        case 0xFF10u:
        case 0xFF11u:
        case 0xFF12u:
        case 0xFF13u:
        case 0xFF14u:
        case 0xFF15u:
        case 0xFF16u:
        case 0xFF17u:
        case 0xFF18u:
        case 0xFF19u:
        case 0xFF21u:
        case 0xFF22u:
        case 0xFF23u:
        case 0xFF24u:
        case 0xFF25u:
        case 0xFF26u:
        case 0xFF27u:
        case 0xFF28u:
        case 0xFF29u:
        case 0xFF2Au:
        case 0xFF2Bu:
        case 0xFF2Cu:
        case 0xFF2Du:
        case 0xFF2Eu:
        case 0xFF2Fu:
        case 0xFF30u:
        case 0xFF31u:
        case 0xFF32u:
        case 0xFF33u:
        case 0xFF34u:
        case 0xFF35u:
        case 0xFF36u:
        case 0xFF37u:
        case 0xFF38u:
        case 0xFF39u:
        case 0xFF3Au:
LABEL_57:
          if (a1 <= 0xFF3A) {
            int v23 = -31937;
          }
          else {
            int v23 = -31936;
          }
          unsigned int v17 = v23 + a1;
          goto LABEL_88;
        case 0xFF1Au:
          unsigned int v17 = 33094;
          goto LABEL_88;
        case 0xFF1Bu:
          unsigned int v17 = 33095;
          goto LABEL_88;
        case 0xFF1Cu:
          unsigned int v17 = 33155;
          goto LABEL_88;
        case 0xFF1Du:
          unsigned int v17 = 33153;
          goto LABEL_88;
        case 0xFF1Eu:
          unsigned int v17 = 33156;
          goto LABEL_88;
        case 0xFF1Fu:
          unsigned int v17 = 33096;
          goto LABEL_88;
        case 0xFF20u:
          unsigned int v17 = 33175;
          goto LABEL_88;
        case 0xFF3Bu:
          unsigned int v17 = 33133;
          goto LABEL_88;
        case 0xFF3Cu:
          unsigned int v17 = 33119;
          goto LABEL_88;
        case 0xFF3Du:
          unsigned int v17 = 33134;
          goto LABEL_88;
        case 0xFF3Eu:
          unsigned int v17 = 33103;
          goto LABEL_88;
        case 0xFF3Fu:
          unsigned int v17 = 33105;
          goto LABEL_88;
        case 0xFF40u:
          unsigned int v17 = 33101;
          goto LABEL_88;
        default:
          switch(a1)
          {
            case 0xFF5Bu:
              unsigned int v17 = 33135;
              break;
            case 0xFF5Cu:
              unsigned int v17 = 33122;
              break;
            case 0xFF5Du:
              unsigned int v17 = 33136;
              break;
            case 0xFF5Eu:
              unsigned int v17 = 33120;
              break;
            default:
              goto LABEL_57;
          }
LABEL_88:
          unsigned int v12 = bswap32(v17);
          break;
      }
      goto LABEL_22;
    }
    if (a1 - 12353 <= 0x52)
    {
      a2[1] = a1 + 94;
      char v18 = -126;
LABEL_46:
      *a2 = v18;
      return 2;
    }
    if (a1 - 12449 <= 0x55)
    {
      if (a1 >> 5 <= 0x186) {
        char v19 = -97;
      }
      else {
        char v19 = -96;
      }
      a2[1] = v19 + a1;
      char v18 = -125;
      goto LABEL_46;
    }
    if ((unsigned __int16)(a1 - 19968) > 0x51A5u)
    {
      switch(a1)
      {
        case 0x2500u:
          unsigned int v13 = 33951;
          goto LABEL_129;
        case 0x2501u:
          unsigned int v13 = 33962;
          goto LABEL_129;
        case 0x2502u:
          unsigned int v13 = 33952;
          goto LABEL_129;
        case 0x2503u:
          unsigned int v13 = 33963;
          goto LABEL_129;
        case 0x2504u:
        case 0x2505u:
        case 0x2506u:
        case 0x2507u:
        case 0x2508u:
        case 0x2509u:
        case 0x250Au:
        case 0x250Bu:
        case 0x250Du:
        case 0x250Eu:
        case 0x2511u:
        case 0x2512u:
        case 0x2515u:
        case 0x2516u:
        case 0x2519u:
        case 0x251Au:
        case 0x251Eu:
        case 0x251Fu:
        case 0x2521u:
        case 0x2522u:
        case 0x2526u:
        case 0x2527u:
        case 0x2529u:
        case 0x252Au:
        case 0x252Du:
        case 0x252Eu:
        case 0x2531u:
        case 0x2532u:
        case 0x2535u:
        case 0x2536u:
        case 0x2539u:
        case 0x253Au:
        case 0x253Du:
        case 0x253Eu:
        case 0x2540u:
        case 0x2541u:
        case 0x2543u:
        case 0x2544u:
        case 0x2545u:
        case 0x2546u:
        case 0x2547u:
        case 0x2548u:
        case 0x2549u:
        case 0x254Au:
LABEL_93:
          unint64_t v25 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
          if (v25)
          {
            uint64_t v22 = (char *)&BSUniToTts + (((_WORD)v25 - (unsigned __int16)&BSUniToTts) & 0x1FE);
            goto LABEL_51;
          }
          if (!a4 || !*(_WORD *)(a4 + 2)) {
            return 0;
          }
          if (v28 == *(_WORD *)(a4 + 2))
          {
            uint64_t v26 = 0;
          }
          else
          {
            unsigned __int16 v27 = 1;
            do
            {
              v27 += 2;
              if (!*(_WORD *)(a4 + 2 * v27)) {
                return 0;
              }
            }
            while (v28 != *(_WORD *)(a4 + 2 * v27));
            uint64_t v26 = v27 - 1;
          }
          unsigned int v11 = *(unsigned __int16 *)(a4 + 2 * v26);
          break;
        case 0x250Cu:
          unsigned int v13 = 33953;
          goto LABEL_129;
        case 0x250Fu:
          unsigned int v13 = 33964;
          goto LABEL_129;
        case 0x2510u:
          unsigned int v13 = 33954;
          goto LABEL_129;
        case 0x2513u:
          unsigned int v13 = 33965;
          goto LABEL_129;
        case 0x2514u:
          unsigned int v13 = 33956;
          goto LABEL_129;
        case 0x2517u:
          unsigned int v13 = 33967;
          goto LABEL_129;
        case 0x2518u:
          unsigned int v13 = 33955;
          goto LABEL_129;
        case 0x251Bu:
          unsigned int v13 = 33966;
          goto LABEL_129;
        case 0x251Cu:
          unsigned int v13 = 33957;
          goto LABEL_129;
        case 0x251Du:
          unsigned int v13 = 33978;
          goto LABEL_129;
        case 0x2520u:
          unsigned int v13 = 33973;
          goto LABEL_129;
        case 0x2523u:
          unsigned int v13 = 33968;
          goto LABEL_129;
        case 0x2524u:
          unsigned int v13 = 33959;
          goto LABEL_129;
        case 0x2525u:
          unsigned int v13 = 33980;
          goto LABEL_129;
        case 0x2528u:
          unsigned int v13 = 33975;
          goto LABEL_129;
        case 0x252Bu:
          unsigned int v13 = 33970;
          goto LABEL_129;
        case 0x252Cu:
          unsigned int v13 = 33958;
          goto LABEL_129;
        case 0x252Fu:
          unsigned int v13 = 33974;
          goto LABEL_129;
        case 0x2530u:
          unsigned int v13 = 33979;
          goto LABEL_129;
        case 0x2533u:
          unsigned int v13 = 33969;
          goto LABEL_129;
        case 0x2534u:
          unsigned int v13 = 33960;
          goto LABEL_129;
        case 0x2537u:
          unsigned int v13 = 33976;
          goto LABEL_129;
        case 0x2538u:
          unsigned int v13 = 33981;
          goto LABEL_129;
        case 0x253Bu:
          unsigned int v13 = 33971;
          goto LABEL_129;
        case 0x253Cu:
          unsigned int v13 = 33961;
          goto LABEL_129;
        case 0x253Fu:
          unsigned int v13 = 33977;
          goto LABEL_129;
        case 0x2542u:
          unsigned int v13 = 33982;
          goto LABEL_129;
        case 0x254Bu:
          unsigned int v13 = 33972;
          goto LABEL_129;
        default:
          switch(a1)
          {
            case 0xFFE0u:
              unsigned int v13 = 33169;
              break;
            case 0xFFE1u:
              unsigned int v13 = 33170;
              break;
            case 0xFFE2u:
              unsigned int v13 = 33226;
              break;
            case 0xFFE3u:
            case 0xFFE4u:
              goto LABEL_93;
            case 0xFFE5u:
              unsigned int v13 = 33167;
              break;
            default:
              if (a1 != 8741) {
                goto LABEL_93;
              }
              unsigned int v13 = 33121;
              break;
          }
LABEL_129:
          LOWORD(v13) = __rev16(v13);
          goto LABEL_23;
      }
      goto LABEL_21;
    }
    unsigned int v20 = jpj_UniToCTts(a1);
    if (v20 != 0x1FFF)
    {
      LOWORD(v13) = __rev16(jpj_CTtsToTts(v20));
      goto LABEL_23;
    }
    unint64_t v21 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
    if (v21)
    {
      uint64_t v22 = (char *)&BSUniToTts + (((_WORD)v21 - (unsigned __int16)&BSUniToTts) & 0x1FE);
LABEL_51:
      unsigned int v11 = *((unsigned __int16 *)v22 + 147);
      goto LABEL_21;
    }
  }
  return 0;
}

uint64_t jpj_UniToCTts(__int16 a1)
{
  if ((unsigned __int16)(a1 - 19968) > 0x51A5u) {
    return 0x1FFFLL;
  }
  uint64_t v1 = (unsigned __int16 *)((char *)&CUni2CTts + 2 * CUni2CTtsindex[(unsigned __int16)(a1 - 19968) >> 6]);
  LOWORD(v2) = a1 & 0x3F;
  if ((a1 & 0x3F) == 0) {
    return *v1 >> 3;
  }
  do
  {
    unsigned __int16 v3 = *v1 & 7;
    if ((*v1 & 7) != 0)
    {
      ++v1;
    }
    else
    {
      unsigned __int16 v3 = v1[1];
      v1 += 2;
    }
    int v2 = (__int16)(v2 - v3);
  }
  while (v2 > 0);
  if (v2) {
    return 0x1FFFLL;
  }
  else {
    return *v1 >> 3;
  }
}

uint64_t jpj_CTtsToTts(unsigned int a1)
{
  if (a1)
  {
    __int16 v1 = a1 + 43;
    if (a1 <= 0xB95) {
      __int16 v1 = a1;
    }
    unsigned __int16 v2 = v1 + 1409;
    __int16 v3 = v2 / 0xBCu;
    LOBYTE(v2) = v2 % 0xBCu;
    unsigned __int8 v4 = v2 + 64;
    unsigned int v5 = (v2 + 64);
    unsigned __int8 v6 = v2 + 65;
    if (v5 <= 0x7E) {
      unsigned __int8 v6 = v4;
    }
    __int16 v7 = v3 - 127;
    unsigned int v8 = (v3 - 127);
    __int16 v9 = v3 - 63;
    if (v8 <= 0x9F) {
      __int16 v9 = v7;
    }
    return (unsigned __int16)(v6 | (unsigned __int16)(v9 << 8));
  }
  else
  {
    return (unsigned __int16)-32425;
  }
}

const char *marker_getMarkerArgStr(unsigned int a1)
{
  if (a1 > 0xB) {
    return "__not_defined__";
  }
  else {
    return off_264110FB0[a1];
  }
}

uint64_t marker_tag2string(int a1, char **a2, _DWORD *a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    int v5 = *(_DWORD *)&markerTable[56 * v3 + 48];
    if (v5 == a1) {
      uint64_t v3 = v4;
    }
    else {
      uint64_t v3 = v4 + 1;
    }
    unsigned __int8 v6 = &markerTable[56 * v3];
    if (*v6) {
      BOOL v7 = v5 == a1;
    }
    else {
      BOOL v7 = 1;
    }
    unsigned int v4 = v3;
  }
  while (!v7);
  if (v5 == a1)
  {
    uint64_t result = 0;
    __int16 v9 = v6 + 7;
    int v8 = *(_DWORD *)&markerTable[56 * v3 + 52];
  }
  else
  {
    int v8 = 0;
    __int16 v9 = &byte_20D5A22AE;
    uint64_t result = 20;
  }
  *a2 = v9;
  *a3 = v8;
  return result;
}

unint64_t marker_hasNonConstCharPtrArg(int a1)
{
  int v1 = 0;
  unsigned __int16 v2 = "!";
  while (1)
  {
    int v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 56) {
      return 0;
    }
  }
  return (0xE7DC3FF9804100uLL >> v1) & 1;
}

unint64_t marker_hasCharPtrArg(int a1)
{
  int v1 = 0;
  unsigned __int16 v2 = "!";
  while (1)
  {
    int v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 56) {
      return 0;
    }
  }
  if (v1 == 1) {
    return 1;
  }
  else {
    return (0xE7DC3FF9804100uLL >> v1) & 1;
  }
}

char *marker_getString(int a1)
{
  uint64_t result = "MARKER_PHONEME";
  if (a1 != 33)
  {
    for (uint64_t i = 0; ; i += 56)
    {
      uint64_t v4 = i + 56;
      if (i == 3080) {
        break;
      }
      int v5 = *(_DWORD *)&markerTable[i + 104];
      if (v5 == a1) {
        return &markerTable[v4];
      }
    }
    return "MARKER_UNDEF";
  }
  return result;
}

uint64_t marker_serialize_tostring(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3, int a4)
{
  int v5 = (_OWORD *)a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned int v17 = "UNKNOWN";
  long long v15 = 0u;
  memset(v14, 0, sizeof(v14));
  if (a4)
  {
    int v8 = *(_DWORD *)(a3 + 20);
  }
  else
  {
    long long v15 = 0uLL;
    memset(v14, 0, sizeof(v14));
    int v8 = *(_DWORD *)a3;
    *(_OWORD *)((char *)&v14[1] + 8) = *(_OWORD *)(a3 + 4);
    *((void *)&v14[2] + 1) = *(void *)(a3 + 24);
    int v5 = v14;
  }
  int v16 = 0;
  marker_tag2string(v8, &v17, &v16);
  LH_utoa(*((_DWORD *)v5 + 6), v18, 0xAu);
  a1(a2, v18);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 7), v18, 0xAu);
  a1(a2, v18);
  if (a4)
  {
    a1(a2, " ");
    __int16 v9 = *(_DWORD *)v5 ? "INT" : "EXT";
    a1(a2, v9);
    a1(a2, " ");
    LH_utoa(*((_DWORD *)v5 + 14), v18, 0xAu);
    a1(a2, v18);
    if (*((_DWORD *)v5 + 14))
    {
      unsigned int v10 = (const char *)*((void *)v5 + 6);
      a1(a2, " [");
      if (v10)
      {
        unsigned int v11 = strlen(v10);
        LH_utoa(v11, v18, 0xAu);
        a1(a2, v18);
        a1(a2, " ");
        a1(a2, (char *)v10);
      }
      a1(a2, "]");
    }
  }
  a1(a2, " ");
  a1(a2, v17);
  if ((v16 - 3) <= 1)
  {
    unsigned int v12 = (char *)*((void *)v5 + 5);
    a1(a2, " (");
    if (!v12) {
      unsigned int v12 = &byte_20D5A22AE;
    }
    goto LABEL_18;
  }
  if ((v16 - 1) <= 1)
  {
    unsigned int v12 = v18;
    LH_utoa(*((_DWORD *)v5 + 10), v18, 0xAu);
    a1(a2, " (");
LABEL_18:
    a1(a2, v12);
    a1(a2, ")");
  }
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 8), v18, 0xAu);
  a1(a2, v18);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 9), v18, 0xAu);
  return ((uint64_t (*)(uint64_t, char *))a1)(a2, v18);
}

uint64_t marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    if (!marker_hasNonConstCharPtrArg(*(_DWORD *)a1)) {
      return 1;
    }
    BOOL v7 = *(const char **)(a1 + 24);
    if (v7) {
      int v8 = strlen(v7);
    }
    else {
      int v8 = 0;
    }
    uint64_t result = heap_Alloc(a2, (v8 + 1));
    if (result)
    {
      if (v8) {
        uint64_t result = (uint64_t)strcpy((char *)result, *(const char **)(a1 + 24));
      }
      else {
        *(unsigned char *)uint64_t result = 0;
      }
      *(void *)(a3 + 24) = result;
      return 1;
    }
  }
  return result;
}

int *marker_freeParts(int *result, void *a2)
{
  if (result)
  {
    int v3 = result;
    uint64_t result = (int *)marker_hasNonConstCharPtrArg(*result);
    if (result)
    {
      uint64_t v4 = *((void *)v3 + 3);
      if (v4)
      {
        uint64_t result = (int *)heap_Free(a2, v4);
        *((void *)v3 + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t marker_sort(uint64_t a1, unint64_t a2)
{
  return ssft_qsort(a1, a2, 32, (uint64_t (*)(unint64_t, unint64_t))compare_3);
}

uint64_t compare_3(int *a1, int *a2)
{
  if (a1 == a2) {
    return 0;
  }
  unsigned int v2 = a1[3];
  unsigned int v3 = a2[3];
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v2 > v3) {
    return 1;
  }
  int v6 = *a2;
  if (*a1 == 0x4000)
  {
    if (v6 != 0x4000) {
      return 0xFFFFFFFFLL;
    }
    int v7 = a1[4];
    int v8 = a2[4];
    if (v7 | v8) {
      return (v8 - v7);
    }
    int v6 = 0x4000;
  }
  else if (v6 == 0x4000)
  {
    return 1;
  }
  uint64_t v9 = 0;
  int v10 = 255;
  int v11 = 255;
  do
  {
    int v12 = prescribedOrder1[v9];
    if (v12 == *a1) {
      int v11 = LOWORD(prescribedOrder1[v9 + 1]);
    }
    if (v12 == v6) {
      int v10 = LOWORD(prescribedOrder1[v9 + 1]);
    }
    v9 += 2;
  }
  while (v9 != 10);
  if (v10 != 255 && v11 != 255)
  {
    uint64_t v4 = (v11 - v10);
    if (v11 != v10) {
      return v4;
    }
  }
  unsigned int v13 = a1[1];
  unsigned int v14 = a2[1];
  if (v13 < v14) {
    return 0xFFFFFFFFLL;
  }
  if (v13 > v14) {
    return 1;
  }
  unsigned int v15 = a1[2];
  unsigned int v16 = a2[2];
  if (v15 <= v16) {
    return v16 > v15;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t marker_logOutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v16 = 0;
  int v15 = 0;
  if ((marker_tag2string(*(_DWORD *)a5, &v16, &v15) & 0x80000000) != 0 || !v16)
  {
    unsigned int v13 = "%s MARKER_%d : posCur %d, lenCur %d";
  }
  else if ((v15 - 3) <= 1 && *(void *)(a5 + 24))
  {
    unsigned int v13 = "%s MARKER_%s [%s] : posCur %u, lenCur %u";
  }
  else if (v15 == 1)
  {
    unsigned int v13 = "%s MARKER_%s [%u] : posCur %u, lenCur %u";
  }
  else if (v15 == 2)
  {
    unsigned int v13 = "%s MARKER_%s [%c] : posCur %u, lenCur %u";
  }
  else
  {
    unsigned int v13 = "%s MARKER_%s [] : posCur %u, lenCur %u";
  }
  return log_OutText(a1, a2, a3, 0, (uint64_t)v13, v10, v11, v12, a4);
}

uint64_t ppint_marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (!a1 || !a3) {
    return result;
  }
  if (marker_hasNonConstCharPtrArg(*(_DWORD *)(a1 + 20)))
  {
    int v7 = *(const char **)(a1 + 40);
    if (v7) {
      int v8 = strlen(v7);
    }
    else {
      int v8 = 0;
    }
    uint64_t result = heap_Alloc(a2, (v8 + 1));
    if (!result) {
      return result;
    }
    if (v8) {
      uint64_t result = (uint64_t)strcpy((char *)result, *(const char **)(a1 + 40));
    }
    else {
      *(unsigned char *)uint64_t result = 0;
    }
    *(void *)(a3 + 40) = result;
  }
  uint64_t v9 = *(const char **)(a1 + 48);
  if (v9)
  {
    int v10 = strlen(v9);
    uint64_t result = heap_Alloc(a2, (v10 + 1));
    if (!result) {
      return result;
    }
    if (v10) {
      uint64_t result = (uint64_t)strcpy((char *)result, *(const char **)(a1 + 48));
    }
    else {
      *(unsigned char *)uint64_t result = 0;
    }
    *(void *)(a3 + 48) = result;
  }
  return 1;
}

unint64_t ppint_marker_freeParts(unint64_t result, void *a2)
{
  if (result)
  {
    unint64_t v3 = result;
    uint64_t result = marker_hasNonConstCharPtrArg(*(_DWORD *)(result + 20));
    if (result)
    {
      uint64_t v4 = *(void *)(v3 + 40);
      if (v4)
      {
        uint64_t result = (unint64_t)heap_Free(a2, v4);
        *(void *)(v3 + 40) = 0;
      }
    }
    uint64_t v5 = *(void *)(v3 + 48);
    if (v5)
    {
      uint64_t result = (unint64_t)heap_Free(a2, v5);
      *(void *)(v3 + 48) = 0;
    }
  }
  return result;
}

uint64_t ttteg_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2288001025;
  }
  uint64_t result = 0;
  *a2 = &ITtteg;
  return result;
}

uint64_t ttteg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2288001031;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    __s1 = 0;
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if ((InitRsrcFunction(a3, a4, &v25) & 0x80000000) == 0)
    {
      int v10 = (void *)heap_Calloc(*(void **)(v25 + 8), 1, 136);
      if (v10)
      {
        uint64_t v11 = (uint64_t)v10;
        void *v10 = a3;
        v10[1] = a4;
        v10[15] = safeh_GetNullHandle();
        *(void *)(v11 + 128) = v12;
        uint64_t Object = objc_GetObject(*(void *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v23);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_36;
        }
        *(void *)(v11 + 40) = *(void *)(v23 + 8);
        uint64_t Object = sub_ObjOpen(a3, a4, (uint64_t *)(v11 + 16));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_36;
        }
        unsigned int v14 = *(void **)(v25 + 8);
        *(_OWORD *)unint64_t v21 = xmmword_20D669AD0;
        *(void *)&v21[16] = 0;
        if (!vector_ObjOpen(v14, (long long *)v21, 1, (uint64_t *)(v11 + 24)))
        {
          uint64_t v11 = 0;
LABEL_35:
          uint64_t v5 = 0;
          *a5 = v11;
          *((_DWORD *)a5 + 2) = 269;
          return v5;
        }
        if ((paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", &__s1) & 0x80000000) != 0)
        {
          *(_DWORD *)(v11 + 32) = 0;
          uint64_t Object = paramc_ParamSetStr(*(void *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", "0");
          if ((Object & 0x80000000) != 0) {
            goto LABEL_36;
          }
        }
        else
        {
          if (__s1)
          {
            int v15 = *__s1;
            if (*__s1)
            {
              if (LH_stricmp(__s1, "true")) {
                int v15 = strcmp(__s1, "1") == 0;
              }
              else {
                int v15 = 1;
              }
            }
          }
          else
          {
            int v15 = 0;
          }
          *(_DWORD *)(v11 + 32) = v15;
        }
        uint64_t v16 = *(void *)(v25 + 40);
        *(void *)unint64_t v21 = v11;
        *(_OWORD *)&v21[8] = xmmword_26C21F560;
        uint64_t Object = paramc_ListenerAdd(v16, "rulesetsfrommarkup", v21);
        if ((Object & 0x80000000) != 0)
        {
LABEL_36:
          uint64_t v5 = Object;
          ttteg_pObjClose(v11);
          return v5;
        }
        *(_DWORD *)(v11 + 112) = 0;
        if ((paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"clcpppipelinemode", &v22) & 0x80000000) == 0
          && v22
          && *v22)
        {
          *(_DWORD *)(v11 + 112) = 1;
        }
        else if (!*(_DWORD *)(v11 + 112))
        {
          *(_DWORD *)unint64_t v21 = 0;
          uint64_t Object = nuance_pcre_ObjOpen(a3, a4, v11 + 120);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_36;
          }
          if ((int)paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"retttmaxpcreframeblocks", (unsigned int *)v21) < 0) {
            unsigned __int16 v17 = 10;
          }
          else {
            unsigned __int16 v17 = *(_WORD *)v21;
          }
          int UInt = paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"retttnumframesinblock", (unsigned int *)v21);
          __int16 v19 = *(_WORD *)v21;
          if (UInt < 0) {
            __int16 v19 = 10;
          }
          nuance_pcre_Init(*(void **)(v11 + 120), *(void *)(v11 + 128), v17, v19);
          goto LABEL_34;
        }
        uint64_t Object = esc_seq_init(a3, a4, (uint64_t *)(v11 + 120));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_36;
        }
LABEL_34:
        uint64_t Object = paramc_ParamSetInt(*(void *)(v25 + 40), (uint64_t)"enablerett", 1u);
        if ((Object & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      return 2288001034;
    }
  }
  return v5;
}

uint64_t ttteg_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (a1)
    {
      if ((InitRsrcFunction((_WORD *)*a1, a1[1], &v8) & 0x80000000) == 0)
      {
        int Size = vector_GetSize(a1[3]);
        if (Size)
        {
          unsigned int v6 = Size - 1;
          do
          {
            if (!vector_GetElemAt(a1[3], v6, &v7)) {
              break;
            }
            ruleset_UnloadRules(v7);
            ruleset_ObjClose(v7);
            vector_Remove(a1[3], v6--);
          }
          while (v6 != -1);
        }
      }
    }
    ttteg_ProcessEnd(a1, a2);
    return ttteg_pObjClose((uint64_t)a1);
  }
  return result;
}

uint64_t ttteg_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    *a3 = ttteg_ResourceTypes_SZ_RETTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t ttteg_ResourceLoad(_WORD **a1, int a2, char *a3, const char *a4, uint64_t a5, int a6, uint64_t a7)
{
  v36[128] = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  *(void *)long long v35 = 0;
  uint64_t v7 = 2288001031;
  uint64_t v33 = 0;
  int v32 = 0;
  if (!a3 || !a7) {
    return v7;
  }
  if (a4)
  {
    BOOL v14 = a6 != 0;
    if (!a5 && a6) {
      return v7;
    }
  }
  else
  {
    if (!a5 || !a6) {
      return v7;
    }
    BOOL v14 = 1;
  }
  uint64_t Str = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], v35) & 0x80000000) != 0) {
    return v7;
  }
  if (a4)
  {
    if (*a4)
    {
      v36[0] = 0;
      if (vector_GetElemAt((uint64_t)a1[3], 0, v36))
      {
        int v16 = 0;
        while (!*(_DWORD *)(v36[0] + 44))
        {
          if (*(void *)(v36[0] + 24))
          {
            Name = (const char *)ruleset_GetName(v36[0]);
            if (!strcmp(Name, a4)) {
              return 2288001048;
            }
            if (*(void *)(v36[0] + 32))
            {
              AbsName = (const char *)ruleset_GetAbsName(v36[0]);
LABEL_18:
              if (!strcmp(AbsName, a4)) {
                return 2288001048;
              }
            }
          }
          if (!vector_GetElemAt((uint64_t)a1[3], (unsigned __int16)++v16, v36)) {
            goto LABEL_25;
          }
        }
        AbsName = (const char *)ruleset_GetName(v36[0]);
        goto LABEL_18;
      }
    }
  }
LABEL_25:
  char v19 = !v14;
  if (!a5) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v33 = a5;
    int v32 = a6;
LABEL_36:
    uint64_t v22 = ruleset_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[15], (uint64_t)a1[16], (uint64_t)a1[2], (uint64_t)v25);
    if ((v22 & 0x80000000) == 0)
    {
      uint64_t Rules = ruleset_LoadRules((_WORD **)v25, a4, 0, a3, v33, v32);
      if ((Rules & 0x80000000) == 0)
      {
        if (vector_Add((uint64_t)a1[3], v25) == 1)
        {
          *(void *)a7 = v26;
          *(_DWORD *)(a7 + 8) = 300;
          goto LABEL_45;
        }
        uint64_t Rules = 2288001034;
      }
      ruleset_ObjClose((uint64_t)v25);
      goto LABEL_45;
    }
LABEL_41:
    uint64_t Rules = v22;
    goto LABEL_45;
  }
  *(void *)int v24 = 0;
  bzero(v36, 0x400uLL);
  uint64_t Rules = brk_DataOpenEx(*(void *)(*(void *)v35 + 24), (uint64_t)a4, 1, (uint64_t)&v34);
  if (strstr(a3, ";loader=broker") && (Rules & 0x80000000) != 0)
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)v35 + 40), (uint64_t)"langcode", v24);
    if ((Str & 0x80000000) == 0)
    {
      int v21 = brokeraux_ComposeBrokerString(*(uint64_t *)v35, a4, 0, 1, *(char **)v24, 0, 0, (char *)v36, 0x400uLL);
      if (v21 < 0)
      {
        uint64_t Rules = v21 | 0x88602000;
        goto LABEL_45;
      }
      uint64_t Rules = brk_DataOpenEx(*(void *)(*(void *)v35 + 24), (uint64_t)v36, 0, (uint64_t)&v34);
      goto LABEL_34;
    }
    return Str;
  }
LABEL_34:
  if ((Rules & 0x80000000) == 0)
  {
    uint64_t v22 = brk_DataMapEx(*(void *)(*(void *)v35 + 24), v34, 0, (uint64_t)&v32, (uint64_t)&v33);
    if ((v22 & 0x80000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_45:
  if (v33)
  {
    brk_DataUnmap(*(void *)(*(void *)v35 + 24), v34, v33);
    uint64_t v33 = 0;
  }
  if (v34) {
    brk_DataClose(*(void *)(*(void *)v35 + 24), v34);
  }
  return Rules;
}

uint64_t ttteg_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v11 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v7 = safeh_HandleCheck(a3, a4, 300, 8);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = 2288002061;
  if (!vector_GetElemAt(*(void *)(a1 + 24), 0, &v11)) {
    return v8;
  }
  unsigned int v9 = 0;
  while (*(void *)(v11 + 80) != a3)
  {
    if (!vector_GetElemAt(*(void *)(a1 + 24), ++v9, &v11)) {
      return v8;
    }
  }
  uint64_t v7 = ruleset_UnloadRules(v11);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = ruleset_ObjClose(v11);
  if ((v8 & 0x80000000) == 0) {
    vector_Remove(*(void *)(a1 + 24), v9);
  }
  return v8;
}

uint64_t ttteg_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t Int = 2288001031;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 269, 136) & 0x80000000) != 0) {
    return 2288001032;
  }
  if ((InitRsrcFunction(*a1, (int)a1[1], &v15) & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    a1[10] = a3;
    a1[11] = a4;
    do
    {
      int v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, void, void, _WORD **))a1[5] + 8))(a3, a4, 134, ttteg_ProcessStart_szInput[v9], 0, 0, a1 + 12);
      if ((v10 & 0x80000000) == 0) {
        break;
      }
    }
    while (v9++ != 6);
    if (v10 < 0) {
      a1[12] = 0;
    }
    uint64_t Int = paramc_ParamGetInt(*(void *)(v15 + 40), (uint64_t)"enablerett", &v14);
    if ((Int & 0x80000000) != 0) {
      goto LABEL_17;
    }
    if (v14 == 1)
    {
      uint64_t v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, void, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              0,
              a1 + 6);
      if ((v12 & 0x80000000) != 0)
      {
        uint64_t Int = v12;
LABEL_17:
        ttteg_ProcessEnd(a1, a2);
        return Int;
      }
      uint64_t Int = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, uint64_t, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              1,
              a1 + 8);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      a1[6] = 0;
      a1[8] = 0;
    }
  }
  return Int;
}

uint64_t ttteg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v52 = 0;
  __src = 0;
  uint64_t v51 = 0;
  __s = 0;
  uint64_t v49 = 0;
  uint64_t v46 = 0;
  size_t __n = 0;
  int v45 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v52) & 0x80000000) == 0)
  {
    uint64_t Int = paramc_ParamGetInt(*(void *)(v52 + 40), (uint64_t)"enablerett", &v45);
    if ((Int & 0x80000000) != 0) {
      goto LABEL_39;
    }
    if (!*(void *)(a1 + 48))
    {
      uint64_t Str = 0;
LABEL_50:
      int v15 = 1;
      goto LABEL_51;
    }
    uint64_t Str = 0;
    int v15 = 1;
    if (!*(void *)(a1 + 64) || !v45) {
      goto LABEL_51;
    }
    *a5 = 0;
    uint64_t v7 = (*(uint64_t (**)(void, void, char *, size_t *))(*(void *)(a1 + 40) + 144))(*(void *)(a1 + 48), *(void *)(a1 + 56), (char *)&__n + 4, &__n);
    if ((v7 & 0x80000000) == 0)
    {
      int v15 = *(_DWORD *)(a1 + 112) | __n;
      if (!v15)
      {
        uint64_t Str = 0;
LABEL_51:
        *a5 = v15;
        return Str;
      }
      uint64_t v7 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 48), *(void *)(a1 + 56), &__src, (char *)&__n + 4);
      if ((v7 & 0x80000000) == 0)
      {
        if (log_HasTraceTuningDataSubscriber(*(void *)(v52 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 4, (uint64_t)"%s%s", v16, v17, v18, v19, v20, "BEG");
          log_OutTraceTuningDataBinary(*(void *)(v52 + 32), 5, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)__src,
            HIDWORD(__n));
        }
        int v21 = (char *)heap_Alloc(*(void *)(v52 + 8), (HIDWORD(__n) + 1));
        __s = v21;
        if (!v21) {
          return 2288001034;
        }
        if (__src)
        {
          memcpy(v21, __src, HIDWORD(__n));
          int v21 = __s;
        }
        v21[HIDWORD(__n)] = 0;
        uint64_t Int = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), HIDWORD(__n));
        if ((Int & 0x80000000) == 0)
        {
          __src = 0;
          uint64_t Str = paramc_ParamGetStr(*(void *)(v52 + 40), (uint64_t)"langcode", &v51);
          if ((Str & 0x80000000) == 0)
          {
            log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v9, v10, v11, v12, v13, "BEG");
            int Size = vector_GetSize(*(void *)(a1 + 24));
            uint64_t v23 = 0;
            if (Size)
            {
              unsigned int v24 = Size - 1;
              while (1)
              {
                uint64_t v46 = 0;
                if (vector_GetElemAt(*(void *)(a1 + 24), v24, &v46))
                {
                  if (*((_DWORD *)v46 + 11))
                  {
                    if (ruleset_GetEnabledForLng((uint64_t)v46, v51) == 1)
                    {
                      uint64_t v25 = __s;
                      __s = v23;
                      uint64_t Str = ruleset_Rewrite(v46, v25, (uint64_t *)&__s);
                      uint64_t v23 = v25;
                      if ((Str & 0x80000000) != 0) {
                        break;
                      }
                    }
                  }
                }
                if (--v24 == -1) {
                  goto LABEL_27;
                }
              }
            }
            else
            {
LABEL_27:
              uint64_t v26 = *(void *)(a1 + 96);
              if (v26)
              {
                size_t v9 = strlen(__s);
                if (v9) {
                  (*(void (**)(uint64_t, void, char *))(*(void *)(a1 + 40) + 176))(v26, *(void *)(a1 + 104), __s);
                }
              }
              log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v9, v10, v11, v12, v13, "END");
              log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v27, v28, v29, v30, v31, "BEG");
              uint64_t v46 = 0;
              int v32 = vector_GetSize(*(void *)(a1 + 24));
              if (v32)
              {
                unsigned int v38 = v32 - 1;
                do
                {
                  uint64_t v46 = 0;
                  if (vector_GetElemAt(*(void *)(a1 + 24), v38, &v46))
                  {
                    if (!*((_DWORD *)v46 + 11) && ruleset_GetEnabledForLng((uint64_t)v46, v51) == 1)
                    {
                      uint64_t v39 = __s;
                      __s = v23;
                      uint64_t Str = ruleset_Rewrite(v46, v39, (uint64_t *)&__s);
                      uint64_t v23 = v39;
                      if ((Str & 0x80000000) != 0) {
                        break;
                      }
                    }
                  }
                  --v38;
                }
                while (v38 != -1);
              }
              log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v33, v34, v35, v36, v37, "END");
              if ((Str & 0x80000000) == 0)
              {
                if (__s)
                {
                  size_t v43 = strlen(__s);
                  if (v43)
                  {
                    uint64_t v44 = (*(uint64_t (**)(void, void, void **, size_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 64), *(void *)(a1 + 72), &v49, v43);
                    if ((v44 & 0x80000000) == 0)
                    {
                      memcpy(v49, __s, v43);
                      _NashvilleFEModule_ReportModifiedText(v52, v49, v43);
                      log_OutTraceTuningDataBinary(*(void *)(v52 + 32), 6, (uint64_t)&byte_20D5A22AE, (uint64_t)"text/plain;charset=utf-8",
                        (uint64_t)v49,
                        v43);
                      uint64_t v44 = (*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), v43);
                    }
                    uint64_t Str = v44;
                  }
                }
              }
              uint64_t v25 = v23;
            }
            goto LABEL_41;
          }
LABEL_40:
          uint64_t v25 = 0;
LABEL_41:
          log_OutTraceTuningData(*(uint64_t ***)(v52 + 32), 4, (uint64_t)"%s%s %s%u", v9, v10, v11, v12, v13, "END");
          if (v25) {
            heap_Free(*(void **)(v52 + 8), (uint64_t)v25);
          }
          if (__s) {
            heap_Free(*(void **)(v52 + 8), (uint64_t)__s);
          }
          if (!*(_DWORD *)(a1 + 112))
          {
            int v40 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 64), *(void *)(a1 + 72));
            if (v40 >= 0) {
              uint64_t Str = Str;
            }
            else {
              uint64_t Str = v40;
            }
            *(void *)(a1 + 64) = safeh_GetNullHandle();
            *(void *)(a1 + 72) = v41;
          }
          goto LABEL_50;
        }
LABEL_39:
        uint64_t Str = Int;
        goto LABEL_40;
      }
    }
    return v7;
  }
  return 2288001031;
}

uint64_t ttteg_ProcessEnd(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v5))
    {
      int v6 = (*(uint64_t (**)(void, void))(a1[5] + 72))(a1[12], a1[13]);
      if (v6 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v6;
      }
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v7;
    uint64_t v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[6], a1[7], v8, v9))
    {
      int v10 = (*(uint64_t (**)(void, void))(a1[5] + 72))(a1[6], a1[7]);
      if (v10 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    a1[6] = safeh_GetNullHandle();
    a1[7] = v11;
    uint64_t v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[8], a1[9], v12, v13))
    {
      int v14 = (*(uint64_t (**)(void, void))(a1[5] + 72))(a1[8], a1[9]);
      if (v14 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v14;
      }
    }
    a1[8] = safeh_GetNullHandle();
    a1[9] = v15;
  }
  return v3;
}

uint64_t ttteg_ParamLearnChange(uint64_t a1, char *__s1, char *a3)
{
  if (!strcmp(__s1, "rulesetsfrommarkup"))
  {
    if (a3)
    {
      int v5 = *a3;
      if (*a3)
      {
        if (LH_stricmp(a3, "true")) {
          int v5 = strcmp(a3, "1") == 0;
        }
        else {
          int v5 = 1;
        }
      }
    }
    else
    {
      int v5 = 0;
    }
    *(_DWORD *)(a1 + 32) = v5;
  }
  return 0;
}

uint64_t ttteg_pObjClose(uint64_t a1)
{
  uint64_t v1 = 2288001031;
  uint64_t v9 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v9) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(v9 + 40);
    uint64_t v7 = a1;
    long long v8 = xmmword_26C21F560;
    paramc_ListenerRemove(v3, "rulesetsfrommarkup", (long long *)&v7);
    if (*(void *)(a1 + 40)) {
      objc_ReleaseObject(*(void *)(v9 + 48), (uint64_t)"SYNTHSTREAM");
    }
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      sub_ObjClose(v4);
    }
    if (*(_DWORD *)(a1 + 112))
    {
      esc_seq_deinit(*(_WORD **)a1, *(void *)(a1 + 8), *(void **)(a1 + 120), *(void *)(a1 + 128));
    }
    else
    {
      nuance_pcre_DeInit(*(void **)(a1 + 120), *(void *)(a1 + 128));
      nuance_pcre_ObjClose(*(void *)(a1 + 120), *(void *)(a1 + 128));
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      vector_ObjClose(v5);
    }
    heap_Free(*(void **)(v9 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t ruleset_ReadBinaryRules(_WORD **a1, uint64_t a2, int a3)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  *(void *)int v65 = 0;
  uint64_t v66 = 0;
  uint64_t v3 = 2288001031;
  unsigned __int8 v64 = 0;
  int v62 = 0;
  int v63 = 0;
  uint64_t v60 = 0;
  *(void *)uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (!a1 || !a2 || !a3 || (InitRsrcFunction(*a1, (int)a1[1], &v66) & 0x80000000) != 0) {
    return v3;
  }
  uint64_t v7 = ssftriff_reader_ObjOpenEx(*a1, (uint64_t)a1[1], 4, (const char *)a1[3], a2, a3, "USRT", 1031, (uint64_t *)v65);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  LODWORD(v12) = 0;
  int v13 = "RETTT";
  do
  {
    int v17 = ssftriff_reader_OpenChunk(*(uint64_t *)v65, &v63, (unsigned int *)&v62, v61, v8, v9, v10, v11);
    if (v17 < 0) {
      break;
    }
    if (v63 ^ 0x474E414C | v64)
    {
      if (v63 ^ 0x45505954 | v64)
      {
        if (v63 ^ 0x52455652 | v64)
        {
          if (v63 ^ 0x454C5552 | v64)
          {
            log_OutText(*(void *)(v66 + 32), (uint64_t)v13, 4, 0, (uint64_t)"ruleset_ReadBinaryRules unknown chunk type: '%s'", v9, v10, v11, (uint64_t)&v63);
          }
          else
          {
            if (!v12)
            {
              _Gryphon_ReportMissingPCREVersion();
              int v17 = -2006966268;
              break;
            }
            uint64_t v30 = (uint64_t)v13;
            uint64_t v31 = *(void *)v61;
            uint64_t v32 = **(_DWORD **)v61;
            *(void *)v61 += 4;
            uint64_t v33 = *(unsigned int *)(v31 + 4);
            *(void *)uint64_t v61 = v31 + 8;
            v62 -= 8;
            uint64_t v34 = heap_Calloc(*(void **)(v66 + 8), v32, 8);
            int v17 = PCRE_SerializeAndDecodeBatch((uint64_t)a1[13], (int)a1[14], *(uint64_t *)v61, v32, v34);
            if (v17 < 0) {
              break;
            }
            uint64_t v35 = *(void *)v61 + v33;
            *(void *)v61 += v33;
            int v36 = v62 - v33;
            v62 -= v33;
            if ((v33 & 3) != 0)
            {
              uint64_t v37 = 4 - (v33 & 3);
              *(void *)uint64_t v61 = v35 + v37;
              int v62 = v36 - v37;
            }
            if (v32)
            {
              unsigned int v38 = (uint64_t *)v34;
              while (1)
              {
                *(_DWORD *)__s = 0;
                int StringZ = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, 0, (unsigned int *)__s);
                if ((StringZ & 0x1FFF) != 9)
                {
                  int v17 = StringZ;
                  goto LABEL_49;
                }
                int v40 = (unsigned char *)heap_Alloc(*(void *)(v66 + 8), (*(_DWORD *)__s + 1));
                if (!v40)
                {
                  int v17 = -2006966262;
                  goto LABEL_49;
                }
                uint64_t v41 = (uint64_t)v40;
                unsigned char *v40 = 0;
                int v17 = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, v40, (unsigned int *)__s);
                if (v17 < 0)
                {
                  heap_Free(*(void **)(v66 + 8), v41);
                  goto LABEL_49;
                }
                uint64_t v42 = *(void *)v61 + *(unsigned int *)__s;
                uint64_t v60 = v41;
                *(void *)uint64_t v61 = v42;
                int v43 = v62 - *(_DWORD *)__s;
                v62 -= *(_DWORD *)__s;
                if ((__s[0] & 3) != 0)
                {
                  uint64_t v44 = 4 - (__s[0] & 3);
                  *(void *)uint64_t v61 = v42 + v44;
                  int v62 = v43 - v44;
                }
                PCRE_AttachPattern((uint64_t)a1[13], (int)a1[14], *v38, &v58);
                if (!vector_Add((uint64_t)a1[10], &v58)) {
                  break;
                }
                PCRE_FreePattern(v58, v59);
                heap_Free(*(void **)(v66 + 8), v41);
                ++v38;
                if (!--v32) {
                  goto LABEL_49;
                }
              }
              log_OutPublic(*(void *)(v66 + 32), v30, 11023, 0, v45, v46, v47, v48, v56);
              int v17 = -2006966266;
            }
LABEL_49:
            heap_Free(*(void **)(v66 + 8), v34);
            int v13 = (const char *)v30;
          }
        }
        else
        {
          *(_WORD *)__s = 0;
          LOWORD(v57) = 0;
          uint64_t v28 = *(void *)v61;
          uint64_t v12 = (unsigned __int16)**(_WORD **)v61;
          *(void *)v61 += 2;
          uint64_t v29 = (unsigned __int16)**(_WORD **)v61;
          *(void *)uint64_t v61 = v28 + 4;
          PCRE_Version((uint64_t)a1[13], (int)a1[14], (uint64_t)__s, (uint64_t)&v57);
          _Gryphon_ReportPCREVersion(v12, *(unsigned __int16 *)__s, v29, (unsigned __int16)v57);
          if (v12 != *(unsigned __int16 *)__s) {
            int v17 = -2006966268;
          }
        }
      }
      else
      {
        __s[0] = 0;
        unsigned int v57 = 1024;
        int v25 = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, __s, &v57);
        if (v25 < 0 || !v62) {
          goto LABEL_23;
        }
        unsigned int v57 = 1024;
        int v17 = -2006966265;
        if (!a1[8])
        {
          int v26 = strlen(__s);
          uint64_t v27 = (char *)heap_Alloc(*(void *)(v66 + 8), (v26 + 1));
          a1[8] = v27;
          if (!v27) {
            goto LABEL_44;
          }
          strcpy(v27, __s);
LABEL_23:
          int v17 = v25;
        }
      }
    }
    else
    {
      __s[0] = 0;
      unsigned int v57 = 1024;
      int v17 = ssftriff_reader_ReadStringZ(*(uint64_t *)v65, *(uint64_t *)v61, v62, 0, __s, &v57);
      if ((v17 & 0x80000000) == 0 && v62)
      {
        unsigned int v57 = 1024;
        if (!ruleset_IsLng((uint64_t)a1, __s))
        {
          uint64_t v22 = *(void *)(v66 + 32);
          uint64_t v23 = (uint64_t)v13;
          uint64_t v24 = 11022;
          goto LABEL_41;
        }
        if (a1[7])
        {
          uint64_t v22 = *(void *)(v66 + 32);
          uint64_t v23 = (uint64_t)v13;
          uint64_t v24 = 11021;
LABEL_41:
          log_OutPublic(v22, v23, v24, 0, v18, v19, v20, v21, v56);
          int v17 = -2006966265;
          goto LABEL_50;
        }
        int v49 = strlen(__s);
        uint64_t v50 = (char *)heap_Alloc(*(void *)(v66 + 8), (v49 + 1));
        a1[7] = v50;
        if (!v50)
        {
LABEL_44:
          int v17 = -2006966262;
          goto LABEL_50;
        }
        strcpy(v50, __s);
      }
    }
LABEL_50:
    int v51 = ssftriff_reader_CloseChunk(*(uint64_t *)v65);
    if (v51 < 0 && v17 > -1) {
      int v17 = v51;
    }
  }
  while ((v17 & 0x80000000) == 0);
  if ((v17 & 0x1FFF) == 0x14) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v17;
  }
  if (*(void *)v65)
  {
    int v53 = ssftriff_reader_ObjClose(*(void **)v65, v14, v15, v16, v8, v9, v10, v11);
    if (v53 >= 0 || (int)v3 <= -1) {
      return v3;
    }
    else {
      return v53;
    }
  }
  return v3;
}

uint64_t rule_Compile(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  *(_DWORD *)(a5 + 16) = 1;
  *a6 = PCRE_CompilePatternWithOptions(a1, a2, a4, a5, (uint64_t)v24, 256, (uint64_t)&v23 + 4, (int *)&v23);
  a6[1] = v11;
  PCRE_Adapter2PCREOptions(a1, a2, a5);
  if (*a6) {
    return v23;
  }
  uint64_t v16 = 2288001024;
  log_OutPublic(*(void *)(a3 + 32), (uint64_t)"RETTT", 11006, "%s%s%s%s%s%d", v12, v13, v14, v15, "regularExpression");
  log_OutTraceTuningData(*(uint64_t ***)(a3 + 32), 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%s %s%u", v17, v18, v19, v20, v21, "END");
  return v16;
}

BOOL ruleset_IsLng(uint64_t a1, char *__s)
{
  int v6 = 0;
  if (!__s) {
    return 0;
  }
  size_t v4 = strlen(__s);
  return (int)PCRE_Exec(*(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 152), *(void *)(a1 + 160), (uint64_t)__s, v4, 0, 0, 0, &v6) >= 0;
}

uint64_t ruleset_ScanRuleLine(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2288001031;
  if (!a2 || !a3 || !a5) {
    return v8;
  }
  *a3 = 0;
  *a5 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine: '%s'", a6, a7, a8, a2);
  for (uint64_t i = (unsigned __int8 *)(a2 + 1); ; ++i)
  {
    int v19 = *(i - 1);
    if (v19 != 9 && v19 != 32) {
      break;
    }
  }
  if (!*(i - 1))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    goto LABEL_50;
  }
  if (v19 == 92 || (v19 - 48) <= 9)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v22 = 11015;
    uint64_t v23 = 0;
    goto LABEL_51;
  }
  *a3 = (uint64_t)i;
  int v24 = *i;
  BOOL v25 = *i == 0;
  if (*i && v24 != v19)
  {
    do
    {
      if (v24 == 92 && i[1]) {
        ++i;
      }
      int v26 = *++i;
      int v24 = v26;
      BOOL v25 = v26 == 0;
      if (v26) {
        BOOL v27 = v24 == v19;
      }
      else {
        BOOL v27 = 1;
      }
    }
    while (!v27);
  }
  if (v25)
  {
LABEL_26:
    uint64_t v20 = *(void *)(a1 + 32);
    goto LABEL_50;
  }
  *uint64_t i = 0;
  for (uint64_t j = i + 4; ; ++j)
  {
    int v29 = (char)*(j - 3);
    int v30 = *(j - 3);
    if (v29 == 45 || v30 == 0) {
      break;
    }
    if (v29 > 108)
    {
      switch(v29)
      {
        case 'm':
          *(_DWORD *)(a4 + 4) = 1;
          continue;
        case 's':
          *(_DWORD *)(a4 + 8) = 1;
          continue;
        case 'x':
          *(_DWORD *)(a4 + 12) = 1;
          continue;
      }
      goto LABEL_43;
    }
    if (v29 != 9 && v29 != 32)
    {
      if (v29 == 105)
      {
        *(_DWORD *)a4 = 1;
        continue;
      }
LABEL_43:
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11016, "%s%c", v14, v15, v16, v17, "option");
      continue;
    }
  }
  while (v30 == 9 || v30 == 32)
  {
    LOBYTE(v30) = *(j - 2);
    ++j;
  }
  if (!(_BYTE)v30)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    goto LABEL_50;
  }
  if (strncmp(j - 3, "-->", 3uLL))
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11011, "%s%s", v14, v15, v16, v17, "separator");
    return v8;
  }
  while (1)
  {
    int v33 = *j;
    if (v33 != 9 && v33 != 32) {
      break;
    }
    ++j;
  }
  if (!*j)
  {
    uint64_t v20 = *(void *)(a1 + 32);
LABEL_50:
    uint64_t v47 = "message";
    uint64_t v23 = "%s%s";
    uint64_t v22 = 11026;
LABEL_51:
    log_OutPublic(v20, (uint64_t)"RETTT", v22, v23, v14, v15, v16, v17, v47);
    return v8;
  }
  if (v33 == 34) {
    uint64_t v34 = j + 1;
  }
  else {
    uint64_t v34 = j;
  }
  if (v33 == 34) {
    int v35 = 34;
  }
  else {
    int v35 = 32;
  }
  *a5 = v34;
  BOOL v36 = *v34 == 0;
  if (*v34) {
    BOOL v37 = v35 == (char)*v34;
  }
  else {
    BOOL v37 = 1;
  }
  if (v37)
  {
    uint64_t v39 = v34;
  }
  else
  {
    char v38 = *v34;
    uint64_t v39 = v34;
    do
    {
      if (v38 == 92 && v39[1]) {
        ++v39;
      }
      int v41 = (char)*++v39;
      int v40 = v41;
      char v38 = v41;
      BOOL v36 = v41 == 0;
      if (v41) {
        BOOL v42 = v35 == v40;
      }
      else {
        BOOL v42 = 1;
      }
    }
    while (!v42);
  }
  if (v33 != 34 && v36)
  {
    uint64_t v43 = *(void *)(a1 + 32);
    uint64_t v44 = *a3;
    goto LABEL_95;
  }
  if (v36) {
    goto LABEL_26;
  }
  *uint64_t v39 = 0;
  uint64_t v45 = v39 + 1;
  while (2)
  {
    unsigned int v46 = *v45;
    if (v46 <= 0x1F)
    {
      if (v46 != 9)
      {
        if (!*v45) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      goto LABEL_89;
    }
    if (v46 == 32)
    {
LABEL_89:
      ++v45;
      continue;
    }
    break;
  }
  if (v46 == 35) {
    goto LABEL_94;
  }
LABEL_93:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11018, "%s%s", v14, v15, v16, v17, "trailingString");
LABEL_94:
  uint64_t v43 = *(void *)(a1 + 32);
  uint64_t v44 = *a3;
LABEL_95:
  log_OutText(v43, (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine:  re = '%s'; tgt = '%s'",
    v15,
    v16,
    v17,
    v44);
  return 0;
}

uint64_t ruleset_ReadHeader(uint64_t a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  *(void *)&v68[1023] = *MEMORY[0x263EF8340];
  *(void *)uint64_t v66 = 0;
  if (!a1 || !a2 || !a3 || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), v66) & 0x80000000) != 0) {
    return 2288001031;
  }
  if ((ruleset_ReadDataLine(a1, *(uint64_t *)v66, a2, a3, a4, &__s, v8, v9) & 0x80000000) != 0)
  {
LABEL_8:
    uint64_t v19 = 11020;
    goto LABEL_9;
  }
  while (1)
  {
    BOOL IsSectionHeader = ruleset_IsSectionHeader((unsigned __int8 *)&__s, "header");
    uint64_t v17 = ruleset_ReadDataLine(a1, *(uint64_t *)v66, a2, a3, a4, &__s, v15, v16);
    uint64_t v18 = v17;
    if (IsSectionHeader) {
      break;
    }
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_20;
  }
  if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0)) {
    goto LABEL_14;
  }
  uint64_t v31 = "RETTT";
  while (2)
  {
    uint64_t v32 = *(void *)v66;
    p_s = &__s;
    log_OutText(*(void *)(*(void *)v66 + 32), (uint64_t)v31, 4, 0, (uint64_t)"ruleset_ScanHeaderLine: '%s'", v21, v22, v23, (uint64_t)&__s);
    for (uint64_t i = v68; ; ++i)
    {
      int v39 = *p_s;
      if (v39 != 9 && v39 != 32) {
        break;
      }
      ++p_s;
    }
    int v40 = p_s;
    if (!*p_s)
    {
      uint64_t v41 = *(void *)(v32 + 32);
LABEL_49:
      log_OutPublic(v41, (uint64_t)v31, 11026, "%s%s", v34, v35, v36, v37, "message");
      goto LABEL_50;
    }
    while (1)
    {
      if (!(_BYTE)v39)
      {
LABEL_41:
        uint64_t v41 = *(void *)(v32 + 32);
        goto LABEL_49;
      }
      if (v39 == 32) {
        break;
      }
      if (v39 == 61)
      {
        char *v40 = 0;
        uint64_t v44 = v40 + 1;
LABEL_45:
        while (1)
        {
          int v45 = *v44;
          if (v45 != 9 && v45 != 32) {
            break;
          }
          ++v44;
        }
        if (!*v44)
        {
          uint64_t v41 = *(void *)(v32 + 32);
          goto LABEL_49;
        }
        for (uint64_t j = strlen(v44); ; v44[j] = 0)
        {
          int v50 = v44[--j];
          if (v50 != 32 && v50 != 9) {
            break;
          }
        }
        log_OutText(*(void *)(v32 + 32), (uint64_t)v31, 5, 0, (uint64_t)"ruleset_ScanHeaderLine:  key = '%s'; val = '%s'",
          v46,
          v47,
          v48,
          (uint64_t)p_s);
        int v52 = LH_stricmp(p_s, "language");
        if (v52 || !ruleset_IsLng(a1, v44))
        {
LABEL_65:
          uint64_t v59 = v31;
          if (!LH_stricmp(p_s, "type"))
          {
            if (*(void *)(a1 + 64)) {
              goto LABEL_78;
            }
            int v60 = strlen(v44);
            uint64_t v61 = heap_Calloc(*(void **)(*(void *)v66 + 8), (v60 + 1), 1);
            *(void *)(a1 + 64) = v61;
            if (!v61) {
              goto LABEL_76;
            }
            if (v60)
            {
              for (uint64_t k = 0; k != v60; ++k)
                *(unsigned char *)(*(void *)(a1 + 64) + k) = ssft_tolower(v44[k]);
            }
          }
          uint64_t v31 = v59;
          if (LH_stricmp(p_s, "type_out")) {
            goto LABEL_50;
          }
          if (!*(void *)(a1 + 72))
          {
            int v63 = strlen(v44);
            unsigned __int8 v64 = (char *)heap_Calloc(*(void **)(*(void *)v66 + 8), (v63 + 1), 1);
            *(void *)(a1 + 72) = v64;
            if (v64)
            {
              strcpy(v64, v44);
              goto LABEL_50;
            }
            goto LABEL_76;
          }
        }
        else
        {
          if (!*(void *)(a1 + 56))
          {
            int v57 = strlen(v44);
            uint64_t v58 = (char *)heap_Alloc(*(void *)(*(void *)v66 + 8), (v57 + 1));
            *(void *)(a1 + 56) = v58;
            if (v58)
            {
              strcpy(v58, v44);
              goto LABEL_65;
            }
LABEL_76:
            uint64_t v18 = 2288001034;
            goto LABEL_20;
          }
          log_OutPublic(*(void *)(*(void *)v66 + 32), (uint64_t)"RETTT", 11021, 0, v53, v54, v55, v56, v65);
        }
LABEL_78:
        uint64_t v18 = 2288001031;
        goto LABEL_20;
      }
      char v42 = *++v40;
      LOBYTE(v39) = v42;
      ++i;
    }
    char *v40 = 0;
    while (1)
    {
      unsigned int v43 = *i;
      if (v43 > 0x1F) {
        break;
      }
      if (v43 != 9)
      {
        if (!*i) {
          goto LABEL_41;
        }
        goto LABEL_75;
      }
LABEL_38:
      ++i;
    }
    if (v43 == 32) {
      goto LABEL_38;
    }
    if (v43 == 61)
    {
      uint64_t v44 = i + 1;
      goto LABEL_45;
    }
LABEL_75:
    log_OutPublic(*(void *)(v32 + 32), (uint64_t)v31, 11011, "%s%s", v34, v35, v36, v37, "separator");
LABEL_50:
    uint64_t v18 = ruleset_ReadDataLine(a1, *(uint64_t *)v66, a2, a3, a4, &__s, v12, v13);
    if ((v18 & 0x80000000) == 0)
    {
      if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0))
      {
LABEL_14:
        unsigned int v24 = strlen(&__s);
        uint64_t v25 = (*a2)--;
        unsigned int v26 = (*a3)++;
        int v27 = *(unsigned __int8 *)(v25 - 2);
        BOOL v28 = v27 == 13;
        if (v27 == 13) {
          unsigned int v29 = v26 + 2;
        }
        else {
          unsigned int v29 = v26 + 1;
        }
        uint64_t v30 = -2;
        if (!v28) {
          uint64_t v30 = -1;
        }
        *a2 = v25 + v30 - v24;
        *a3 = v29 + v24;
        --*a4;
        break;
      }
      continue;
    }
    break;
  }
LABEL_20:
  if (!*(void *)(a1 + 56))
  {
    uint64_t v19 = 11022;
LABEL_9:
    log_OutPublic(*(void *)(*(void *)v66 + 32), (uint64_t)"RETTT", v19, 0, v10, v11, v12, v13, v65);
    return 2288001031;
  }
  return v18;
}

uint64_t ruleset_ReadDataLine(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, _DWORD *a5, char *__s, uint64_t a7, uint64_t a8)
{
  ++*a5;
  for (uint64_t result = ruleset_ReadLine(a2, a3, a4, __s, (uint64_t)a5, (uint64_t)__s, a7, a8);
        (result & 0x80000000) == 0;
        uint64_t result = ruleset_ReadLine(a2, a3, a4, __s, v16, v17, v18, v19))
  {
    unsigned int v23 = 0;
    size_t v15 = strlen(__s);
    int v20 = PCRE_Exec(*(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), (uint64_t)__s, v15, 0, 0, 0, &v23);
    uint64_t result = v23;
    if ((v23 & 0x80000000) != 0) {
      break;
    }
    if (v20 < 0)
    {
      size_t v21 = strlen(__s);
      int v22 = PCRE_Exec(*(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 136), *(void *)(a1 + 144), (uint64_t)__s, v21, 0, 0, 0, &v23);
      uint64_t result = v23;
      if ((v23 & 0x80000000) != 0) {
        return result;
      }
      if (v22 < 0) {
        return 0;
      }
    }
    ++*a5;
  }
  return result;
}

BOOL ruleset_IsSectionHeader(unsigned __int8 *a1, const char *a2)
{
  int v3 = *a1;
  if (v3 == 239)
  {
    if (a1[1] != 187)
    {
      LOBYTE(v3) = -17;
      goto LABEL_9;
    }
    uint64_t v4 = 3;
    if (a1[2] != 191) {
      uint64_t v4 = 0;
    }
    a1 += v4;
    int v3 = *a1;
  }
  if (!v3) {
    return 0;
  }
LABEL_9:
  uint64_t v5 = (const char *)(a1 + 1);
  while (memchr("\t ", (char)v3, 3uLL))
  {
    int v6 = *(unsigned __int8 *)v5++;
    LOBYTE(v3) = v6;
    if (!v6) {
      return 0;
    }
  }
  if (v3 != 91) {
    return 0;
  }
  do
  {
    uint64_t v7 = v5;
    char v8 = *v5;
    if (!*v5)
    {
      if (!a2)
      {
        char v10 = 0;
        return v10 == 93;
      }
      goto LABEL_22;
    }
  }
  while (memchr("\t ", *v5++, 3uLL));
  if (!a2)
  {
    char v10 = v8;
    uint64_t v11 = v5 - 1;
    while (!memchr("\t ]", v10, 4uLL))
    {
      int v12 = *(unsigned __int8 *)++v11;
      char v10 = v12;
      if (!v12) {
        return v10 == 93;
      }
    }
LABEL_25:
    size_t v15 = (unsigned __int8 *)(v11 + 1);
    do
    {
      if (!memchr("\t ", v10, 3uLL)) {
        break;
      }
      int v16 = *v15++;
      char v10 = v16;
    }
    while (v16);
    return v10 == 93;
  }
LABEL_22:
  size_t v13 = strlen(a2);
  if (strncmp(a2, v7, v13)) {
    return 0;
  }
  uint64_t v11 = &v7[v13];
  char v10 = *v11;
  if (*v11) {
    goto LABEL_25;
  }
  return v10 == 93;
}

uint64_t ruleset_ReadRules(uint64_t a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  *(void *)uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v4 = 2288001031;
  uint64_t v50 = 0;
  if (!a1) {
    return v4;
  }
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  v53[0] = 0;
  v53[1] = 0;
  int v54 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), v48) & 0x80000000) != 0) {
    return v4;
  }
  if ((ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v9, v10) & 0x80000000) == 0)
  {
    while (!ruleset_IsSectionHeader((unsigned __int8 *)__s, "data")
         && (ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v11, v12) & 0x80000000) == 0)
      ;
  }
  unsigned int DataLine = ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v11, v12);
  if ((DataLine & 0x80000000) != 0)
  {
    if ((DataLine & 0x1FFF) == 0x17) {
      return 0;
    }
    else {
      return DataLine;
    }
  }
  uint64_t v4 = 0;
  while (1)
  {
    while (1)
    {
      log_OutTraceTuningData(*(uint64_t ***)(*(void *)v48 + 32), 2, (uint64_t)"%s%s %s%s %s%d", v14, v15, v16, v17, v18, "BEG");
      unsigned int v22 = ruleset_ScanRuleLine(*(uint64_t *)v48, (uint64_t)__s, &v52, (uint64_t)v53, &v51, v19, v20, v21);
      PCRE_Adapter2PCREOptions(*(void *)(a1 + 104), *(void *)(a1 + 112), (uint64_t)v53);
      if ((v22 & 0x80000000) == 0) {
        break;
      }
      log_OutTraceTuningData(*(uint64_t ***)(*(void *)v48 + 32), 2, (uint64_t)"%s%s %s%s %s%u", v23, v24, v25, v26, v27, "END");
LABEL_19:
      if (v4) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = v22;
      }
      if ((ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v43, v44) & 0x80000000) != 0) {
        return v4;
      }
    }
    unsigned int v28 = rule_Compile(*(void *)(a1 + 104), *(void *)(a1 + 112), *(uint64_t *)v48, v52, (uint64_t)v53, &v49);
    if ((v28 & 0x80000000) != 0)
    {
      unsigned int v22 = v28;
      _Gryphon_ReportInvalidRule(v52);
      goto LABEL_19;
    }
    int v29 = vector_Add(*(void *)(a1 + 80), &v49);
    uint64_t v34 = *(uint64_t ***)(*(void *)v48 + 32);
    if (!v29) {
      break;
    }
    vector_GetSize(*(void *)(a1 + 80));
    log_OutTraceTuningData(v34, 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%u", v35, v36, v37, v38, v39, "END");
    if (v49) {
      PCRE_FreePattern(v49, v50);
    }
    unsigned int v42 = ruleset_ReadDataLine(a1, *(uint64_t *)v48, a2, a3, a4, __s, v40, v41);
    if ((v42 & 0x80000000) != 0) {
      goto LABEL_28;
    }
  }
  log_OutPublic(*(void *)(*(void *)v48 + 32), (uint64_t)"RETTT", 11023, 0, v30, v31, v32, v33, v47);
  PCRE_FreePattern(v49, v50);
  unsigned int v42 = -2006966266;
LABEL_28:
  if ((v42 & 0x1FFF) == 0x17) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v42;
  }
  if (!v4) {
    return v45;
  }
  return v4;
}

uint64_t ruleset_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = 0;
  unsigned int v26 = 0;
  uint64_t v6 = 2288001031;
  if (a6 && (InitRsrcFunction(a1, a2, &v27) & 0x80000000) == 0)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(void *)(a6 + 160) = 0;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(void *)a6 = a1;
    *(void *)(a6 + 8) = a2;
    *(void *)(a6 + 16) = a5;
    *(_DWORD *)(a6 + 40) = 1;
    size_t v13 = (void *)v27[1];
    long long v24 = xmmword_26C21F570;
    uint64_t v25 = off_26C21F580;
    if (vector_ObjOpen(v13, &v24, 8, (uint64_t *)(a6 + 80)))
    {
      LODWORD(v24) = PCRE_Adapter_Create(1, a6 + 104, a1, a2);
      if ((v24 & 0x80000000) == 0)
      {
        uint64_t NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(a3, a4, NullHandle, v19))
        {
          *(_OWORD *)(a6 + 88) = *(_OWORD *)(a6 + 104);
        }
        else
        {
          *(void *)(a6 + 88) = a3;
          *(void *)(a6 + 96) = a4;
        }
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttmaxpcreframeblocks", &v26);
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttnumframesinblock", &v26);
        LODWORD(v24) = PCRE_ObjOpen(*(uint64_t **)(a6 + 104), *(void *)(a6 + 112), 0);
        if ((v24 & 0x80000000) == 0)
        {
          uint64_t v20 = 0;
          for (uint64_t i = (void *)(a6 + 128); ; i += 2)
          {
            *(i - 1) = PCRE_CompilePattern(*(void *)(a6 + 104), *(void *)(a6 + 112), (uint64_t)&HARDCODED_RULESET_PATTERN[v20], 0, 0, 0, (int *)&v24);
            *uint64_t i = v22;
            uint64_t v6 = v24;
            if ((v24 & 0x80000000) != 0) {
              break;
            }
            v20 += 128;
            if (v20 == 384) {
              return v6;
            }
          }
        }
      }
      vector_ObjClose(*(void *)(a6 + 80));
      *(void *)(a6 + 80) = 0;
      PCRE_ObjClose(*(void *)(a6 + 104), *(void *)(a6 + 112));
      return v24;
    }
    else
    {
      log_OutPublic(v27[4], (uint64_t)"RETTT", 11002, 0, v14, v15, v16, v17, v24);
      return 2288001034;
    }
  }
  return v6;
}

uint64_t *rule_CopyParts(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  int v9 = 0;
  if (result)
  {
    int v3 = result;
    uint64_t v4 = *result;
    if (!*result) {
      return 0;
    }
    uint64_t result = 0;
    if (a3 && v3[2])
    {
      if ((PCRE_CopyPattern(v4, v3[1], (uint64_t)a3, &v9) & 0x80000000) == 0)
      {
        int v7 = strlen((const char *)v3[2]);
        char v8 = (char *)heap_Alloc(a2, (v7 + 1));
        a3[2] = (uint64_t)v8;
        if (v8)
        {
          strcpy(v8, (const char *)v3[2]);
          return (uint64_t *)1;
        }
        PCRE_FreePattern(*a3, a3[1]);
      }
      return 0;
    }
  }
  return result;
}

void *rule_FreeParts(void *result, void *a2)
{
  if (result)
  {
    int v3 = result;
    uint64_t result = (void *)*result;
    if (result)
    {
      uint64_t result = (void *)PCRE_FreePattern((uint64_t)result, v3[1]);
      *int v3 = 0;
    }
    uint64_t v4 = v3[2];
    if (v4)
    {
      uint64_t result = heap_Free(a2, v4);
      v3[2] = 0;
    }
  }
  return result;
}

uint64_t ruleset_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2288001031;
  uint64_t v6 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v6) & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 24)) {
      ruleset_UnloadRules(a1);
    }
    uint64_t v3 = *(void *)(a1 + 80);
    if (v3)
    {
      vector_ObjClose(v3);
      *(void *)(a1 + 80) = 0;
    }
    for (uint64_t i = 0; i != 48; i += 16)
      PCRE_FreePattern(*(void *)(a1 + i + 120), *(void *)(a1 + i + 128));
    PCRE_ObjClose(*(void *)(a1 + 104), *(void *)(a1 + 112));
    uint64_t v1 = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(void *)(a1 + 160) = 0;
  }
  return v1;
}

uint64_t ruleset_UnloadRules(uint64_t a1)
{
  uint64_t v1 = 2288001031;
  uint64_t v25 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v25) & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v25 + 32), 3, (uint64_t)"%s%s %s%s", v3, v4, v5, v6, v7, "BEG");
    uint64_t v26 = 0;
    if (*(void *)(a1 + 24) && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v26) & 0x80000000) == 0)
    {
      if (vector_Clear(*(void *)(a1 + 80)))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        if (v18)
        {
          heap_Free(*(void **)(v25 + 8), v18);
          *(void *)(a1 + 32) = 0;
        }
        uint64_t v19 = *(void *)(a1 + 56);
        if (v19)
        {
          heap_Free(*(void **)(v25 + 8), v19);
          *(void *)(a1 + 56) = 0;
        }
        uint64_t v20 = *(void *)(a1 + 64);
        if (v20)
        {
          heap_Free(*(void **)(v25 + 8), v20);
          *(void *)(a1 + 64) = 0;
        }
        uint64_t v21 = *(void *)(a1 + 72);
        if (v21)
        {
          heap_Free(*(void **)(v25 + 8), v21);
          *(void *)(a1 + 72) = 0;
        }
        log_OutTraceTuningData(*(uint64_t ***)(v25 + 32), 3, (uint64_t)"%s%s %s%u", v13, v14, v15, v16, v17, "END");
        uint64_t v22 = *(void *)(a1 + 24);
        if (v22)
        {
          heap_Free(*(void **)(v25 + 8), v22);
          uint64_t v1 = 0;
          *(void *)(a1 + 24) = 0;
          return v1;
        }
        return 0;
      }
      log_OutPublic(*(void *)(v26 + 32), (uint64_t)"RETTT", 11024, 0, v14, v15, v16, v17, v24);
    }
    log_OutTraceTuningData(*(uint64_t ***)(v25 + 32), 3, (uint64_t)"%s%s %s%u", v8, v9, v10, v11, v12, "END");
    return 0;
  }
  return v1;
}

uint64_t ruleset_GetName(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t ruleset_GetAbsName(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t ruleset_GetEnabledForLng(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v2 = result;
    if (!*(_DWORD *)(result + 40)) {
      return 0;
    }
    uint64_t result = 0;
    if (a2 && *(void *)(v2 + 56))
    {
      __strcpy_chk();
      if (!LH_stricmp("*", *(char **)(v2 + 56))) {
        return 1;
      }
      uint64_t v3 = *(char **)(v2 + 56);
      if (*v3)
      {
        uint64_t v4 = 0;
        unsigned int v5 = 1;
        do
        {
          v3[v4] = __tolower(v3[v4]);
          uint64_t v4 = v5;
          uint64_t v3 = *(char **)(v2 + 56);
          BOOL v6 = strlen(v3) > v5++;
        }
        while (v6);
      }
      if (v9[0])
      {
        uint64_t v7 = 0;
        unsigned int v8 = 1;
        do
        {
          v9[v7] = __tolower(v9[v7]);
          uint64_t v7 = v8;
          BOOL v6 = strlen(v9) > v8++;
        }
        while (v6);
        uint64_t v3 = *(char **)(v2 + 56);
      }
      if (strstr(v3, v9)) {
        return 1;
      }
      if (v9[0] == *v3 && v9[1] == v3[1]) {
        return v3[2] == 42;
      }
      return 0;
    }
  }
  return result;
}

uint64_t ruleset_LoadRules(_WORD **a1, const char *a2, const char *a3, const char *a4, uint64_t a5, int a6)
{
  uint64_t v43 = a5;
  int v42 = a6;
  uint64_t v6 = 2288001031;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  if (a1 && a5 && a6)
  {
    if (a1[3]) {
      return 2288001041;
    }
    uint64_t v13 = a2;
    a1[4] = 0;
    if (!a2 || !*a2) {
      uint64_t v13 = "in-memory RETT";
    }
    if ((InitRsrcFunction(*a1, (int)a1[1], &v41) & 0x80000000) == 0)
    {
      int v14 = strlen(v13);
      uint64_t v15 = (char *)heap_Alloc(*(void *)(v41 + 8), (v14 + 1));
      a1[3] = v15;
      if (v15)
      {
        strcpy(v15, v13);
        if ((paramc_ParamGetStr(*(void *)(v41 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &v40) & 0x80000000) == 0
          && v40
          && !strcmp("__NUAN_alternative_esc_seq__", (const char *)a1[3]))
        {
          *((_DWORD *)a1 + 11) = 1;
        }
        if (!a3) {
          goto LABEL_19;
        }
        int v25 = strlen(a3);
        uint64_t v26 = (char *)heap_Alloc(*(void *)(v41 + 8), (v25 + 1));
        a1[4] = v26;
        if (v26)
        {
          strcpy(v26, a3);
LABEL_19:
          log_OutTraceTuningData(*(uint64_t ***)(v41 + 32), 1, (uint64_t)"%s%s %s%s %s%s", v20, v21, v22, v23, v24, "BEG");
          if (!strcmp(a4, "application/x-vocalizer-rettt+bin")
            || !strcmp(a4, "application/x-vocalizer-rettt+bin;loader=broker"))
          {
            Binaryuint64_t Rules = ruleset_ReadBinaryRules(a1, a5, a6);
          }
          else
          {
            int v39 = 0;
            Binaryuint64_t Rules = ruleset_ReadHeader((uint64_t)a1, &v43, (unsigned int *)&v42, &v39);
            if ((BinaryRules & 0x80000000) == 0) {
              Binaryuint64_t Rules = ruleset_ReadRules((uint64_t)a1, &v43, (unsigned int *)&v42, &v39);
            }
          }
          uint64_t v6 = BinaryRules;
          uint64_t v37 = *(uint64_t ***)(v41 + 32);
          if ((v6 & 0x80000000) != 0)
          {
            log_OutTraceTuningData(v37, 1, (uint64_t)"%s%s %s%u", v32, v33, v34, v35, v36, "END");
            ruleset_UnloadRules((uint64_t)a1);
          }
          else
          {
            log_OutTraceTuningData(v37, 1, (uint64_t)"%s%s %s%s %s%s %s%s %s%u", v32, v33, v34, v35, v36, "END");
          }
          return v6;
        }
        log_OutPublic(*(void *)(v41 + 32), (uint64_t)"RETTT", 11002, 0, v27, v28, v29, v30, v38);
        ruleset_UnloadRules((uint64_t)a1);
      }
      else
      {
        log_OutPublic(*(void *)(v41 + 32), (uint64_t)"RETTT", 11002, 0, v16, v17, v18, v19, v38);
      }
      return 2288001034;
    }
  }
  return v6;
}

uint64_t ruleset_Rewrite(_WORD **a1, const char *a2, uint64_t *a3)
{
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  uint64_t v3 = 2288001031;
  if (!a1) {
    return v3;
  }
  if (!a2) {
    return v3;
  }
  if (!a3) {
    return v3;
  }
  uint64_t inited = InitRsrcFunction(*a1, (int)a1[1], &v57);
  if ((inited & 0x80000000) != 0) {
    return v3;
  }
  if (!a1[3]) {
    return 2288001041;
  }
  uint64_t v8 = inited;
  int v9 = strlen(a2);
  uint64_t v10 = (char *)heap_Alloc(*(void *)(v57 + 8), (v9 + 1));
  char __s = v10;
  if (!v10)
  {
    log_OutPublic(*(void *)(v57 + 32), (uint64_t)"RETTT", 11002, 0, v11, v12, v13, v14, v54);
    return 2288001034;
  }
  strcpy(v10, a2);
  uint64_t v15 = (const char *)a1[8];
  if (!v15
    || (uint64_t v16 = __s,
        __int16 v58 = 0,
        unsigned __int16 v17 = strlen(__s),
        esc_seq_tn_strncmp(*a1, (int)a1[1], a1[11], (int)a1[12], __s, v17, &v58))
    && !strcmp(v15, "normal"))
  {
LABEL_12:
    int v20 = 1;
  }
  else
  {
    while (1)
    {
      unsigned __int16 v18 = strlen(v16);
      uint64_t v59 = esc_seq_tn_seq(*a1, (int)a1[1], a1[11], (int)a1[12], v16, v18);
      if (!v59) {
        break;
      }
      IsMatchingEscTunint64_t n = ruleset_IsMatchingEscTn((uint64_t)a1, v15, &v59);
      uint64_t v16 = ++v59;
      if (IsMatchingEscTn) {
        goto LABEL_12;
      }
    }
    int v20 = 0;
  }
  if (log_HasTraceTuningDataSubscriber(*(void *)(v57 + 32)))
  {
    uint64_t v26 = *(uint64_t ***)(v57 + 32);
    if (a1[8]) {
      log_OutTraceTuningData(v26, 8, (uint64_t)"%s%s %s%s %s%s %s%s", v21, v22, v23, v24, v25, "BEG");
    }
    else {
      log_OutTraceTuningData(v26, 8, (uint64_t)"%s%s %s%s %s%s", v21, v22, v23, v24, v25, "BEG");
    }
  }
  if (!v20) {
    goto LABEL_37;
  }
  int Size = vector_GetSize((uint64_t)a1[10]);
  if (!a1[8])
  {
    int v33 = vector_GetSize((uint64_t)a1[10]);
    if (v33)
    {
      int v34 = v33;
      unsigned int v35 = 0;
      uint64_t v32 = 0;
      while (1)
      {
        uint64_t v36 = v32;
        uint64_t v32 = __s;
        char __s = v36;
        int ElemAt = vector_GetElemAt((uint64_t)a1[10], v35, &v55);
        uint64_t v43 = *(uint64_t ***)(v57 + 32);
        if (!ElemAt) {
          break;
        }
        log_OutTraceTuningData(v43, 9, (uint64_t)"%s%s %s%d %s%s", v37, v38, v39, v40, v41, "BEG");
        uint64_t v8 = sub_GsubCompiledRe((uint64_t)a1[2], *(void *)v55, *(void *)(v55 + 8), *(char **)(v55 + 16), v32, (const char **)&__s);
        log_OutTraceTuningData(*(uint64_t ***)(v57 + 32), 9, (uint64_t)"%s%s %s%u %s%s", v44, v45, v46, v47, v48, "END");
        if ((v8 & 0x80000000) != 0) {
          goto LABEL_43;
        }
        if (v34 == ++v35) {
          goto LABEL_38;
        }
      }
      log_OutPublic((uint64_t)v43, (uint64_t)"RETTT", 11025, 0, v38, v39, v40, v41, v54);
      uint64_t v3 = 2288001030;
      if (!v32) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    goto LABEL_37;
  }
  int v28 = Size;
  if (Size)
  {
    unsigned int v29 = 0;
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = __s;
      char __s = v30;
      if (v30)
      {
        heap_Free(*(void **)(v57 + 8), (uint64_t)v30);
        char __s = 0;
      }
      ruleset_RewriteTnRegions((uint64_t)a1, v29++, 0, v31, (const char **)&__s);
      uint64_t v30 = v31;
    }
    while (v28 != v29);
    if (v31) {
      heap_Free(*(void **)(v57 + 8), (uint64_t)v31);
    }
  }
  uint64_t v32 = __s;
  char __s = 0;
  ruleset_RewriteTnRegions((uint64_t)a1, 0, 1, v32, (const char **)&__s);
  if (v32)
  {
    heap_Free(*(void **)(v57 + 8), (uint64_t)v32);
LABEL_37:
    uint64_t v32 = 0;
  }
LABEL_38:
  if (__s)
  {
    uint64_t v50 = strlen(__s) + 1;
    uint64_t v51 = *(uint64_t **)(v57 + 8);
    if (*a3)
    {
      uint64_t v52 = (char *)heap_Realloc(v51, *a3, v50);
      if (v52) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v52 = (char *)heap_Alloc((uint64_t)v51, v50);
      if (v52)
      {
LABEL_41:
        *a3 = (uint64_t)v52;
        strcpy(v52, __s);
        if (strcmp(a2, (const char *)*a3)) {
          log_OutEvent(*(uint64_t ***)(v57 + 32), 29, "%s%s", v49, v22, v23, v24, v25, "RULSET_NAME");
        }
LABEL_43:
        uint64_t v3 = v8;
        if (!v32) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
    }
  }
  log_OutPublic(*(void *)(v57 + 32), (uint64_t)"RETTT", 11002, 0, v22, v23, v24, v25, v54);
  uint64_t v3 = 2288001034;
  if (v32) {
LABEL_47:
  }
    heap_Free(*(void **)(v57 + 8), (uint64_t)v32);
LABEL_48:
  if (__s) {
    heap_Free(*(void **)(v57 + 8), (uint64_t)__s);
  }
  log_OutTraceTuningData(*(uint64_t ***)(v57 + 32), 8, (uint64_t)"%s%s %s%u %s%s", v49, v22, v23, v24, v25, "END");
  return v3;
}

uint64_t ruleset_RewriteTnRegions(uint64_t result, unsigned int a2, int a3, const char *a4, const char **a5)
{
  uint64_t v89 = 0;
  uint64_t v87 = 0;
  char __s = 0;
  if (a4)
  {
    if (a5)
    {
      if (!*a5)
      {
        int v9 = (_WORD **)result;
        uint64_t result = InitRsrcFunction(*(_WORD **)result, *(void *)(result + 8), &v89);
        if ((result & 0x80000000) == 0)
        {
          if (v9[3])
          {
            if (a3 || vector_GetElemAt((uint64_t)v9[10], a2, &v87))
            {
              if (log_HasTraceTuningDataSubscriber(*(void *)(v89 + 32)))
              {
                uint64_t v19 = *(uint64_t ***)(v89 + 32);
                if (a3) {
                  log_OutTraceTuningData(v19, 16, (uint64_t)"%s%s %s%s", v14, v15, v16, v17, v18, "BEG");
                }
                else {
                  log_OutTraceTuningData(v19, 9, (uint64_t)"%s%s %s%d %s%s", v14, v15, v16, v17, v18, "BEG");
                }
              }
              int v20 = strlen(a4);
              uint64_t v21 = (const char *)heap_Alloc(*(void *)(v89 + 8), (v20 + 1));
              *a5 = v21;
              if (v21)
              {
                *uint64_t v21 = 0;
                int64_t v22 = strlen(a4);
                if (v22 >= 1)
                {
                  uint64_t v23 = 0;
                  uint64_t v24 = &a4[v22];
                  if (a3) {
                    int v25 = 18;
                  }
                  else {
                    int v25 = 11;
                  }
                  unsigned int v85 = v25;
                  uint64_t v26 = a4;
                  uint64_t v86 = &a4[v22];
                  do
                  {
                    unsigned __int16 v27 = strlen(v26 + 1);
                    int v28 = esc_seq_tn_seq(*v9, (int)v9[1], v9[11], (int)v9[12], (char *)v26 + 1, v27);
                    if (v28) {
                      unsigned int v29 = v28;
                    }
                    else {
                      unsigned int v29 = (char *)v24;
                    }
                    uint64_t v30 = (char *)heap_Alloc(*(void *)(v89 + 8), (v29 - v26 + 1));
                    if (!v30) {
                      break;
                    }
                    uint64_t v31 = v30;
                    memcpy(v30, v26, (v29 - v26));
                    v31[v29 - v26] = 0;
                    uint64_t v32 = (const char *)v9[8];
                    uint64_t v91 = v31;
                    __int16 v90 = 0;
                    unsigned __int16 v33 = strlen(v31);
                    if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v31, v33, &v90))
                    {
                      IsMatchingEscTunint64_t n = strcmp(v32, "normal") == 0;
                    }
                    else
                    {
                      IsMatchingEscTunint64_t n = ruleset_IsMatchingEscTn((uint64_t)v9, v32, &v91);
                      if (a3 && IsMatchingEscTn)
                      {
                        unsigned int v35 = v91;
                        IsMatchingEscTunint64_t n = 1;
                        goto LABEL_37;
                      }
                    }
                    unsigned int v35 = v31;
                    if (!a3 && IsMatchingEscTn)
                    {
                      uint64_t v36 = ruleset_stristr(v31, (char *)v9[8]);
                      if (v36)
                      {
                        uint64_t v37 = strchr(v36, 92);
                        if (v37) {
                          uint64_t v23 = (v37 + 1 - v31);
                        }
                        else {
                          uint64_t v23 = 0;
                        }
                        char v38 = 0;
                        if (v37) {
                          unsigned int v35 = v37 + 1;
                        }
                        else {
                          unsigned int v35 = v31;
                        }
                      }
                      else
                      {
                        char v38 = 0;
                        unsigned int v35 = v31;
                      }
                      goto LABEL_49;
                    }
LABEL_37:
                    char v38 = 1;
                    if (a3)
                    {
                      if (IsMatchingEscTn)
                      {
                        uint64_t v39 = v9[9];
                        if (v39)
                        {
                          if (*v39)
                          {
                            unsigned int v84 = v23;
                            LOWORD(v91) = 0;
                            unsigned __int16 v40 = strlen(v31);
                            if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v31, v40, &v91))
                            {
                              int v41 = strlen(v35);
                              int v42 = (const char *)heap_Realloc(*(uint64_t **)(v89 + 8), (uint64_t)v35, (v41 + 13));
                              if (!v42) {
                                goto LABEL_79;
                              }
                              unsigned int v35 = (char *)v42;
                              uint64_t v43 = (void *)(v42 + 12);
                              size_t v44 = strlen(v42);
                              memmove(v43, v35, v44 + 1);
                              *(_DWORD *)unsigned int v35 = 1853119515;
                              *(void *)(v35 + 4) = 0x5C6C616D726F6E3DLL;
                            }
                            else
                            {
                              size_t v45 = strlen((const char *)v9[9]);
                              int v46 = strlen(v31);
                              uint64_t v47 = (char *)heap_Realloc(*(uint64_t **)(v89 + 8), (uint64_t)v31, (v45 + v46 + 1));
                              if (!v47) {
                                goto LABEL_79;
                              }
                              unsigned int v35 = v47;
                              uint64_t v48 = ruleset_stristr(v47, (char *)v9[8]);
                              uint64_t v49 = strchr(v48, 92);
                              if (v49)
                              {
                                uint64_t v50 = v49;
                                size_t v51 = strlen(v49);
                                memmove(&v48[v45], v50, v51 + 1);
                                memcpy(v48, v9[9], v45);
                              }
                            }
                            char v38 = 1;
                            uint64_t v31 = v35;
                            uint64_t v23 = v84;
                          }
                        }
                      }
                    }
LABEL_49:
                    if (log_HasTraceTuningDataSubscriber(*(void *)(v89 + 32)))
                    {
                      uint64_t v57 = *(uint64_t ***)(v89 + 32);
                      if (a3) {
                        log_OutTraceTuningData(v57, 18, (uint64_t)"%s%s %s%d %s%d", v52, v53, v54, v55, v56, "FOCUS");
                      }
                      else {
                        log_OutTraceTuningData(v57, 10, (uint64_t)"%s%s %s%s %s%d %s%d", v52, v53, v54, v55, v56, "BEG");
                      }
                    }
                    if (v38)
                    {
                      int v58 = strlen(v35);
                      uint64_t v59 = (char *)heap_Alloc(*(void *)(v89 + 8), (v58 + 1));
                      char __s = v59;
                      if (!v59) {
                        goto LABEL_79;
                      }
                      uint64_t v60 = v23;
                      strcpy(v59, v35);
                      uint64_t v61 = 0;
                    }
                    else
                    {
                      if ((sub_GsubCompiledRe((uint64_t)v9[2], *(void *)v87, *(void *)(v87 + 8), *(char **)(v87 + 16), v35, (const char **)&__s) & 0x80000000) != 0|| (int v62 = strlen(__s), (v63 = (char *)heap_Alloc(*(void *)(v89 + 8), (v23 + v62 + 1))) == 0))
                      {
LABEL_79:
                        heap_Free(*(void **)(v89 + 8), (uint64_t)v31);
                        break;
                      }
                      uint64_t v61 = v63;
                      unsigned __int8 v64 = strncpy(v63, v26, v23);
                      uint64_t v60 = v23;
                      v64[v23] = 0;
                      strcat(v64, __s);
                    }
                    heap_Free(*(void **)(v89 + 8), (uint64_t)v31);
                    unsigned int v65 = *(uint64_t **)(v89 + 8);
                    uint64_t v66 = (uint64_t)*a5;
                    int v67 = strlen(*a5);
                    if (v61)
                    {
                      int v68 = strlen(v61);
                      uint64_t v69 = (char *)heap_Realloc(v65, v66, (v67 + v68 + 1));
                      *a5 = v69;
                      if (!v69) {
                        break;
                      }
                      uint64_t v70 = (char *)v61;
                    }
                    else
                    {
                      int v71 = strlen(__s);
                      uint64_t v69 = (char *)heap_Realloc(v65, v66, (v67 + v71 + 1));
                      *a5 = v69;
                      if (!v69) {
                        break;
                      }
                      uint64_t v70 = __s;
                    }
                    strcat(v69, v70);
                    uint64_t v23 = v60;
                    if (log_HasTraceTuningDataSubscriber(*(void *)(v89 + 32))) {
                      log_OutTraceTuningData(*(uint64_t ***)(v89 + 32), v85, (uint64_t)"%s%s", v72, v73, v74, v75, v76, "APPEND");
                    }
                    if (__s)
                    {
                      heap_Free(*(void **)(v89 + 8), (uint64_t)__s);
                      char __s = 0;
                    }
                    if (v61) {
                      heap_Free(*(void **)(v89 + 8), (uint64_t)v61);
                    }
                    if (!a3) {
                      log_OutTraceTuningData(*(uint64_t ***)(v89 + 32), 10, (uint64_t)"%s%s %s%s", v72, v73, v74, v75, v76, "END");
                    }
                    uint64_t v26 = v29;
                    uint64_t v24 = v86;
                  }
                  while (v29 < v86);
                }
              }
              uint64_t result = log_HasTraceTuningDataSubscriber(*(void *)(v89 + 32));
              if (result)
              {
                if (a3) {
                  uint64_t v82 = 16;
                }
                else {
                  uint64_t v82 = 9;
                }
                return log_OutTraceTuningData(*(uint64_t ***)(v89 + 32), v82, (uint64_t)"%s%s %s%u %s%s", v77, v78, v79, v80, v81, "END");
              }
            }
            else
            {
              return log_OutPublic(*(void *)(v89 + 32), (uint64_t)"RETTT", 11025, 0, v10, v11, v12, v13, v83);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ruleset_ReadLine(uint64_t a1, uint64_t *a2, unsigned int *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = 0;
  unsigned int v11 = *a3;
  uint64_t v12 = *a2;
  if (*a3 >= 0x3FF) {
    uint64_t v13 = 1023;
  }
  else {
    uint64_t v13 = v11;
  }
  unsigned int v14 = v11 - v13;
  while (v13 != v10)
  {
    int v15 = *(unsigned __int8 *)(v12 + v10);
    uint64_t v16 = v10 + 1;
    __s[v10++] = v15;
    if (v15 == 10)
    {
      LODWORD(v13) = (unsigned __int16)v16;
      unsigned int v14 = v11 - v16;
      uint64_t v17 = v12 + v16;
      goto LABEL_9;
    }
  }
  LODWORD(v13) = (unsigned __int16)v13;
  uint64_t v17 = v12 + v10;
LABEL_9:
  __s[v13] = 0;
  *a3 = v14;
  *a2 = v17;
  if (__s && v13)
  {
    unsigned int v18 = strlen(__s);
    if (!v18) {
      return 0;
    }
    uint64_t v23 = v18 - 1;
    if (v14 && __s[v23] != 10)
    {
      uint64_t v25 = 2288001024;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11008, "%s%u%s%s", v19, v20, v21, v22, "maximumCharacters");
      return v25;
    }
    if (__s[v23] == 10) {
      __s[v23] = 0;
    }
    if (v18 >= 2 && (uint64_t v24 = v18 - 2, __s[v24] == 13))
    {
      uint64_t v25 = 0;
      __s[v24] = 0;
    }
    else
    {
      return 0;
    }
  }
  else if (v14)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11010, 0, a5, a6, a7, a8, v27);
    return 2288001028;
  }
  else
  {
    return 2288001047;
  }
  return v25;
}

uint64_t ruleset_IsMatchingEscTn(uint64_t a1, const char *a2, char **a3)
{
  uint64_t v6 = *a3;
  unsigned __int16 v14 = 0;
  unsigned __int16 v7 = strlen(v6);
  int v8 = esc_seq_tn_strncmp(*(_WORD **)a1, *(void *)(a1 + 8), *(void **)(a1 + 88), *(void *)(a1 + 96), v6, v7, &v14);
  uint64_t result = 0;
  if (!v8)
  {
    uint64_t v10 = &v6[v14];
    if (*v10 == 61
      && (uint64_t v11 = (uint64_t)(v10 + 1), v12 = strlen(a2), !LH_strnicmp(v11, (uint64_t)a2, v12))
      && (size_t v13 = strlen(a2), *(unsigned char *)(v11 + v13) == 92))
    {
      *a3 = (char *)(v11 + v13 + 1);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *ruleset_stristr(char *a1, char *__s)
{
  uint64_t result = 0;
  if (a1 && __s)
  {
    if (*a1 && (v5 = *__s) != 0 && (unsigned int v6 = strlen(__s), v7 = __tolower(v5), (v8 = *a1) != 0))
    {
      unint64_t v9 = v6;
      int v10 = v7;
      while (__tolower(v8) != v10 || LH_strnicmp((uint64_t)a1, (uint64_t)__s, v9))
      {
        int v11 = *++a1;
        char v8 = v11;
        if (!v11) {
          return 0;
        }
      }
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2147491847;
  uint64_t v19 = 0;
  unsigned int v18 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v19) & 0x80000000) == 0)
  {
    *a3 = 0;
    uint64_t v7 = heap_Alloc(v19[1], 32);
    if (!v7)
    {
      log_OutPublic(v19[4], (uint64_t)"RETTT", 11002, 0, v8, v9, v10, v11, v17);
      return 2147491850;
    }
    uint64_t v12 = v7;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(void *)uint64_t v7 = a1;
    *(void *)(v7 + 8) = a2;
    uint64_t v13 = PCRE_Adapter_Create(1, v7 + 16, a1, a2);
    unsigned __int16 v14 = v19;
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v3 = v13;
    }
    else
    {
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttmaxpcreframeblocks", &v18);
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttnumframesinblock", &v18);
      uint64_t v15 = PCRE_ObjOpen(*(uint64_t **)(v12 + 16), *(void *)(v12 + 24), 0);
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v3 = 0;
        *a3 = v12;
        return v3;
      }
      uint64_t v3 = v15;
      unsigned __int16 v14 = v19;
    }
    heap_Free((void *)v14[1], v12);
  }
  return v3;
}

uint64_t sub_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2147491847;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = PCRE_ObjClose(*(void *)(a1 + 16), *(void *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      heap_Free(*(void **)(v5 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_Substitute(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, int a6, const char **a7)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v7 = 2147491847;
  uint64_t v98 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a5)
      {
        if (a7)
        {
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          size_t v97 = 0;
          unsigned int inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v98);
          if ((inited & 0x80000000) == 0)
          {
            size_t v17 = strlen(a5);
            if ((v17 & 0x80000000) != 0)
            {
              log_OutPublic(*((void *)v98 + 4), (uint64_t)"RETTT", 11004, "%s%u", v13, v14, v15, v16, "bufferBytes");
              return 2147491849;
            }
            else
            {
              unsigned int v18 = (uint64_t ***)v98;
              uint64_t v19 = *((void *)v98 + 1);
              uint64_t v20 = *((void *)v98 + 4);
              v94[0] = v19;
              v94[1] = v20;
              uint64_t v91 = v17;
              uint64_t v96 = v17;
              uint64_t v21 = *a7;
              if (*a7)
              {
                LODWORD(v97) = strlen(*a7);
                uint64_t v95 = v21;
                *a7 = 0;
                goto LABEL_12;
              }
              LODWORD(v97) = 128;
              unsigned int v27 = (char *)heap_Alloc(v19, 128);
              uint64_t v95 = v27;
              if (v27)
              {
                bzero(v27, v97);
                unsigned int v18 = (uint64_t ***)v98;
LABEL_12:
                uint64_t v90 = a1;
                uint64_t v89 = a7;
                log_OutTraceTuningData(v18[4], 12, (uint64_t)"%s%s", v22, v23, v24, v25, v26, "BEG");
                BOOL HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*((void *)v98 + 4));
                uint64_t v38 = v91;
                if (!v91 && HasTraceTuningDataSubscriber)
                {
                  log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%d", v33, v34, v35, v36, v37, "BEG");
                  log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%s", v39, v40, v41, v42, v43, "RES");
                }
                uint64_t v44 = 0;
                unsigned int v45 = -1;
                int v46 = -1;
                while (v44 < v38)
                {
                  log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%d", v33, v34, v35, v36, v37, "BEG");
                  uint64_t v47 = PCRE_Exec(*(void **)(v90 + 16), *(void *)(v90 + 24), a2, a3, (uint64_t)a5, v38, v44, (uint64_t)&v100, 0x1Eu, &inited);
                  if ((inited & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                  uint64_t v53 = v47;
                  if ((v47 & 0x80000000) != 0)
                  {
                    unsigned int inited = PCRE_ErrorToLhError(*(void *)(v90 + 16), *(void *)(v90 + 24), v47);
                    uint64_t v80 = (uint64_t **)*((void *)v98 + 4);
                    uint64_t v81 = "RES";
LABEL_45:
                    log_OutTraceTuningData(v80, 13, (uint64_t)"%s%s %s%s %s%u", v75, v76, v77, v78, v79, v81);
                    break;
                  }
                  if (v100 == v46 && v101 == v45)
                  {
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%s", v48, v49, v50, v51, v52, "RES");
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%d", v54, v55, v56, v57, v58, "BEG");
                    int v59 = a5[v44];
                    if ((~v59 & 0xC0) != 0) {
                      int v60 = 0;
                    }
                    else {
                      int v60 = pcre_sub_utf8_table4[v59 & 0x3F];
                    }
                    uint64_t v61 = PCRE_Exec(*(void **)(v90 + 16), *(void *)(v90 + 24), a2, a3, (uint64_t)a5, v91, (v60 + v44 + 1), (uint64_t)&v100, 0x1Eu, &inited);
                    if ((inited & 0x80000000) != 0) {
                      goto LABEL_58;
                    }
                    uint64_t v53 = v61;
                    if ((v61 & 0x80000000) != 0)
                    {
                      unsigned int inited = PCRE_ErrorToLhError(*(void *)(v90 + 16), *(void *)(v90 + 24), v61);
                      uint64_t v80 = (uint64_t **)*((void *)v98 + 4);
                      uint64_t v81 = "END";
                      goto LABEL_45;
                    }
                  }
                  if (log_HasTraceTuningDataSubscriber(*((void *)v98 + 4)))
                  {
                    if (v53)
                    {
                      int v67 = 0;
                      do
                      {
                        log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 14, (uint64_t)"%s%d %s%d %s%d", v62, v63, v64, v65, v66, "$");
                        v67 += 2;
                      }
                      while (((unsigned __int16)v67 | 1u) < 2 * (int)v53);
                    }
                    else
                    {
                      log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%d %s%s", v62, v63, v64, v65, v66, "IDXBEG");
                    }
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 13, (uint64_t)"%s%s %s%s %s%d %s%d", v62, v63, v64, v65, v66, "END");
                  }
                  unsigned int inited = sub_Append((uint64_t)v94, (void *)&a5[v44], (v100 - v44), v62, v63, v64, v65, v66);
                  if ((inited & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                  BOOL v68 = log_HasTraceTuningDataSubscriber(*((void *)v98 + 4));
                  int v74 = HIDWORD(v96);
                  if (v68)
                  {
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 15, (uint64_t)"%s%.*s", v69, v70, v71, v72, v73, "APPEND");
                    int v74 = HIDWORD(v96);
                  }
                  unsigned int inited = sub_AppendSubstitute((uint64_t)v94, a4, (uint64_t)a5, &v100, v53, v71, v72, v73);
                  if ((inited & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                  _Gryphon_TrackSubstitution((unint64_t)v98, v101 - v100, v74, HIDWORD(v96) - v74);
                  if (log_HasTraceTuningDataSubscriber(*((void *)v98 + 4))) {
                    log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 15, (uint64_t)"%s%.*s", v33, v34, v35, v36, v37, "APPEND");
                  }
                  uint64_t v38 = v91;
                  int v46 = v100;
                  unsigned int v45 = v101;
                  uint64_t v44 = v101;
                  if (!a6) {
                    goto LABEL_47;
                  }
                }
                unsigned int v45 = v44;
LABEL_47:
                unsigned int v82 = inited;
                if (inited >> 20 == 2213)
                {
                  if ((inited & 0x1FFF) == 0xA)
                  {
                    uint64_t v83 = *((void *)v98 + 4);
                    uint64_t v84 = 11002;
                    unsigned int v85 = 0;
                  }
                  else
                  {
                    if ((inited & 0x1FFF) == 0x14)
                    {
                      unsigned int inited = 0;
LABEL_55:
                      unsigned int inited = sub_Append((uint64_t)v94, (void *)&a5[v45], v91 - v45 + 1, v33, v34, v35, v36, v37);
                      if ((inited & 0x80000000) != 0)
                      {
LABEL_58:
                        *uint64_t v89 = v95;
                        log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 12, (uint64_t)"%s%s %s%u %s%s", v48, v49, v50, v51, v52, "END");
                        return inited;
                      }
LABEL_56:
                      if (log_HasTraceTuningDataSubscriber(*((void *)v98 + 4))) {
                        log_OutTraceTuningData(*((uint64_t ***)v98 + 4), 15, (uint64_t)"%s%.*s", v48, v49, v50, v51, v52, "APPEND");
                      }
                      goto LABEL_58;
                    }
                    uint64_t v83 = *((void *)v98 + 4);
                    int v88 = "lhError";
                    unsigned int v85 = "%s%x";
                    uint64_t v84 = 11027;
                  }
                  log_OutPublic(v83, (uint64_t)"RETTT", v84, v85, v34, v35, v36, v37, v88);
                  unsigned int v82 = inited;
                }
                if ((v82 & 0x80000000) != 0) {
                  goto LABEL_56;
                }
                goto LABEL_55;
              }
              log_OutPublic(*((void *)v98 + 4), (uint64_t)"RETTT", 11002, 0, v28, v29, v30, v31, v87);
              return 2147491850;
            }
          }
        }
      }
    }
  }
  return v7;
}

uint64_t sub_GsubCompiledRe(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, const char **a6)
{
  return sub_Substitute(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t sub_Append(uint64_t a1, void *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && __src)
  {
    unsigned int v10 = __n;
    if (!__n) {
      return 0;
    }
    unsigned int v11 = *(_DWORD *)(a1 + 28);
    unsigned int v12 = v11 + __n;
    if (v11 > (__n ^ 0x7FFFFFFF) || v12 >= 0xF4240 && v12 > 2 * *(_DWORD *)(a1 + 24))
    {
      log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11001, "%s%u", a5, a6, a7, a8, "bufferLimitBytes");
      return 2147491849;
    }
    if (*(_DWORD *)(a1 + 32) >= v12)
    {
      uint64_t v22 = *(void *)(a1 + 16);
LABEL_21:
      memcpy((void *)(v22 + v11), __src, v10);
      uint64_t v13 = 0;
      *(_DWORD *)(a1 + 28) += v10;
      return v13;
    }
    if (v12 <= 0x7FFFFF7F) {
      uint64_t v14 = (v12 & 0xFFFFFF80) + 128;
    }
    else {
      uint64_t v14 = 0x7FFFFFFFLL;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(uint64_t **)a1;
    if (v15)
    {
      uint64_t v17 = heap_Realloc(v16, v15, v14);
      if (v17)
      {
        uint64_t v22 = v17;
        bzero((void *)(v17 + *(unsigned int *)(a1 + 32) + 1), (v14 + ~*(_DWORD *)(a1 + 32)));
LABEL_20:
        *(void *)(a1 + 16) = v22;
        *(_DWORD *)(a1 + 32) = v14;
        unsigned int v11 = *(_DWORD *)(a1 + 28);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v22 = heap_Calloc(v16, v14, 1);
      if (v22) {
        goto LABEL_20;
      }
    }
    log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11002, 0, v18, v19, v20, v21, v24);
    return 2147491850;
  }
  uint64_t v13 = 2147491847;
  if (a1) {
    log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11000, 0, a5, a6, a7, a8, v24);
  }
  return v13;
}

uint64_t sub_AppendSubstitute(uint64_t a1, char *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2 && a4)
  {
    int v11 = a5;
    _Gryphon_ReportSubstitution(a4[1] - *a4, (void *)(a3 + *a4), a2);
    unsigned int v18 = strlen(a2);
    if (v18)
    {
      unsigned int v19 = 0;
      while (1)
      {
        uint64_t v20 = (unsigned __int8 *)&a2[v19];
        int v21 = (char)*v20;
        if (v21 == 36) {
          break;
        }
        if (v21 == 92)
        {
          __int16 __src = 0;
          char v22 = v20[1];
          if ((v22 - 48) < 8)
          {
            uint64_t v23 = (char *)(v20 + 2);
            v22 -= 48;
            int v33 = v19 + a2 + 4;
            unsigned int v34 = 1;
            while (1)
            {
              char v35 = *v23;
              if ((*v23 & 0xF8) != 0x30) {
                break;
              }
              ++v23;
              char v22 = v35 + 8 * v22 - 48;
              if (v34++ >= 2)
              {
LABEL_35:
                LODWORD(v23) = v33;
                break;
              }
            }
          }
          else
          {
            switch(v20[1])
            {
              case 'n':
                LODWORD(v23) = v20 + 2;
                char v22 = 10;
                break;
              case 'o':
              case 'p':
              case 'q':
              case 's':
              case 'u':
              case 'w':
LABEL_55:
                LODWORD(v23) = v20 + 2;
                break;
              case 'r':
                LODWORD(v23) = v20 + 2;
                char v22 = 13;
                break;
              case 't':
                LODWORD(v23) = v20 + 2;
                char v22 = 9;
                break;
              case 'v':
                LODWORD(v23) = v20 + 2;
                char v22 = 11;
                break;
              case 'x':
                char v22 = 0;
                uint64_t v23 = (char *)(v20 + 2);
                int v33 = v19 + a2 + 4;
                char v38 = 1;
                while (1)
                {
                  char v39 = v38;
                  int v40 = *v23;
                  char v41 = v40 - 48;
                  if ((v40 - 48) >= 0xA)
                  {
                    if ((v40 - 97) >= 6)
                    {
                      if ((v40 - 65) > 5) {
                        goto LABEL_36;
                      }
                      char v41 = v40 - 55;
                    }
                    else
                    {
                      char v41 = v40 - 87;
                    }
                  }
                  char v38 = 0;
                  char v22 = v41 + 16 * v22;
                  ++v23;
                  if ((v39 & 1) == 0) {
                    goto LABEL_35;
                  }
                }
              default:
                switch(v20[1])
                {
                  case 'a':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 7;
                    break;
                  case 'b':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 8;
                    break;
                  case 'e':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 27;
                    break;
                  case 'f':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 12;
                    break;
                  default:
                    goto LABEL_55;
                }
                break;
            }
          }
LABEL_36:
          int v37 = v23 - a2;
          LOBYTE(__src) = v22;
          uint64_t v28 = sub_Append(a1, &__src, 1uLL, v13, v14, v15, v16, v17);
          unsigned int v24 = v37;
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
        }
        else
        {
          uint64_t v28 = sub_Append(a1, v20, 1uLL, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          unsigned int v24 = v19 + 1;
        }
LABEL_37:
        unsigned int v19 = v24;
        if (v24 >= v18) {
          return 0;
        }
      }
      unsigned int v24 = v19 + 1;
      int v25 = a2[v19 + 1];
      unsigned int v26 = v25 - 58;
      if ((v25 - 58) <= 0xFFFFFFF5)
      {
        if (v25 != 123)
        {
          uint64_t v32 = a1;
          size_t v31 = 1;
LABEL_29:
          uint64_t v28 = sub_Append(v32, v20, v31, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          goto LABEL_37;
        }
        unsigned int v24 = v19 + 2;
        int v25 = a2[v19 + 2];
      }
      if ((v25 - 48) > 9)
      {
        int v27 = 0;
      }
      else
      {
        int v27 = 0;
        do
        {
          int v27 = v25 + 10 * v27 - 48;
          int v25 = a2[++v24];
        }
        while ((v25 - 48) < 0xA);
      }
      if (v26 <= 0xFFFFFFF5)
      {
        if (v25 != 125) {
          goto LABEL_37;
        }
        ++v24;
      }
      if (v27 >= v11) {
        goto LABEL_37;
      }
      uint64_t v29 = a4[2 * v27];
      if ((v29 & 0x80000000) != 0) {
        goto LABEL_37;
      }
      int v30 = *(int *)((char *)a4 + ((8 * v27) | 4));
      if (v30 < 0) {
        goto LABEL_37;
      }
      uint64_t v20 = (unsigned __int8 *)(a3 + v29);
      size_t v31 = (v30 - v29);
      uint64_t v32 = a1;
      goto LABEL_29;
    }
    return 0;
  }
  else
  {
    uint64_t v42 = 2147491847;
    if (a1) {
      log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11003, 0, a5, a6, a7, a8, v44);
    }
  }
  return v42;
}

uint64_t PCRE_V10_Adapter_Init(void *a1)
{
  a1[2] = PCRE_V10_ObjOpen;
  a1[3] = PCRE_V10_ObjClose;
  a1[4] = PCRE_V10_ErrorToLhError;
  a1[5] = PCRE_V10_CompilePattern;
  a1[11] = PCRE_V10_Exec;
  a1[8] = PCRE_V10_SerializeAndEncode;
  a1[9] = PCRE_V10_SerializeAndEncodeBatch;
  a1[6] = PCRE_V10_SerializeAndDecode;
  a1[7] = PCRE_V10_SerializeAndDecodeBatch;
  a1[10] = PCRE_V10_SerializeFree;
  a1[12] = &PCRE_V10_OPTIONS_MAP;
  a1[13] = PCRE_V10_GetVersion;
  return 0;
}

uint64_t PCRE_V10_ObjOpen(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 2320506890;
  uint64_t v6 = heap_Alloc(*(void *)(a3 + 8), 32);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = pcre2_general_context_create_8((void *(*)(size_t))loc_PCRE_V10_private_malloc, (void (__cdecl *)(void *))loc_PCRE_V10_private_free, *(void *(**)(size_t))(a3 + 8));
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      pcre2_compile_context_create_8((uint64_t)v8);
      uint64_t v11 = v10;
      pcre2_match_context_create_8(v9);
      if (v11) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v5 = 0;
        *uint64_t v7 = a3;
        v7[1] = v9;
        v7[2] = v11;
        v7[3] = v12;
        *a1 = v7;
      }
    }
  }
  return v5;
}

uint64_t PCRE_V10_ObjClose(void *a1)
{
  if (!a1) {
    return 2320506886;
  }
  uint64_t v2 = a1[3];
  if (v2) {
    pcre2_general_context_free_8(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    pcre2_general_context_free_8(v3);
  }
  uint64_t v4 = a1[1];
  if (v4) {
    pcre2_general_context_free_8(v4);
  }
  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t PCRE_V10_ErrorToLhError(int a1)
{
  if ((a1 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t result = 2320506887;
  switch(a1)
  {
    case -55:
    case -54:
    case -53:
    case -52:
    case -50:
    case -46:
    case -45:
    case -43:
    case -42:
    case -41:
    case -40:
    case -39:
    case -38:
    case -36:
    case -35:
    case -33:
    case -32:
    case -30:
      goto LABEL_7;
    case -51:
      return 2320507149;
    case -49:
      goto LABEL_6;
    case -48:
      return 2320506890;
    case -47:
      return 2320514656;
    case -44:
      return 2320514660;
    case -37:
      return 2320514657;
    case -34:
    case -29:
      return result;
    case -31:
      return 2320514662;
    default:
      if (a1 == -2)
      {
        uint64_t result = 2320514658;
      }
      else if (a1 == -1)
      {
LABEL_6:
        uint64_t result = 2320506900;
      }
      else
      {
LABEL_7:
        uint64_t result = 2320514663;
      }
      break;
  }
  return result;
}

uint64_t PCRE_V10_CompilePattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v9 = pcre2_compile_8();
  if (!v9)
  {
    pcre2_get_error_message_8(0, a4, a5);
    if (!a6) {
      return v9;
    }
    goto LABEL_3;
  }
  if (a6) {
LABEL_3:
  }
    *a6 = 0;
  return v9;
}

uint64_t PCRE_V10_Exec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int a8, int *a9)
{
  uint64_t v11 = pcre2_match_data_create_from_pattern_8(a2, *(long long **)(a1 + 8));
  if (v11)
  {
    uint64_t matched = pcre2_match_8();
    uint64_t v13 = matched;
    if ((matched & 0x80000000) == 0)
    {
      if (a8 / 3 >= (int)matched) {
        uint64_t v14 = matched;
      }
      else {
        uint64_t v14 = (a8 / 3);
      }
      ovector_pointer_8 = (int64x2_t *)pcre2_get_ovector_pointer_8((uint64_t)v11);
      if ((int)v14 >= 1)
      {
        do
        {
          int64x2_t v16 = *ovector_pointer_8++;
          *a7++ = vmovn_s64(v16);
          --v14;
        }
        while (v14);
      }
    }
    int v17 = 0;
  }
  else
  {
    int v17 = -1974460406;
    *a9 = -1974460406;
    uint64_t v13 = 0xFFFFFFFFLL;
  }
  pcre2_match_data_free_8((uint64_t)v11);
  *a9 = v17;
  return v13;
}

uint64_t PCRE_V10_SerializeAndEncode(uint64_t a1, size_t *a2, _DWORD *a3, void *a4)
{
  v10[1] = *(size_t **)MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v10[0] = a2;
  int v6 = pcre2_serialize_encode_8(v10, 1, &v9, &v8, *(long long **)(a1 + 8));
  if ((v6 & 0x80000000) == 0)
  {
    *a3 = v8;
    *a4 = v9;
  }
  return PCRE_V10_ErrorToLhError(v6);
}

uint64_t PCRE_V10_SerializeAndEncodeBatch(uint64_t a1, size_t **a2, uint64_t a3, _DWORD *a4, void *a5)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v7 = pcre2_serialize_encode_8(a2, a3, &v10, &v9, *(long long **)(a1 + 8));
  if ((v7 & 0x80000000) == 0)
  {
    *a4 = v9;
    *a5 = v10;
  }
  return PCRE_V10_ErrorToLhError(v7);
}

uint64_t PCRE_V10_SerializeAndDecode(uint64_t a1, _DWORD *a2, void *a3)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = 0;
  int v4 = pcre2_serialize_decode_8((uint64_t)v6, 1, a2, *(long long **)(a1 + 8));
  uint64_t result = PCRE_V10_ErrorToLhError(v4);
  *a3 = v6[0];
  return result;
}

uint64_t PCRE_V10_SerializeAndDecodeBatch(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  if (pcre2_serialize_decode_8(a4, a3, a2, *(long long **)(a1 + 8)) == a3) {
    return 0;
  }
  else {
    return 2320514662;
  }
}

_WORD *PCRE_V10_GetVersion(_WORD *result, _WORD *a2)
{
  *uint64_t result = 10;
  *a2 = 32;
  return result;
}

uint64_t PCRE_V10_Adapter_Pattern_Init(void *a1)
{
  a1[2] = PCRE_V10_FreePattern;
  a1[3] = PCRE_V10_GetPatternSize;
  a1[4] = PCRE_V10_CopyPattern;
  return 0;
}

uint64_t PCRE_V10_GetPatternSize(uint64_t a1, uint64_t *a2)
{
  int v2 = pcre2_pattern_info_8(a1, 0x16u, a2);
  return PCRE_V10_ErrorToLhError(v2);
}

uint64_t loc_PCRE_V10_private_malloc(uint64_t a1, uint64_t a2)
{
  return heap_Alloc(a2, a1);
}

void *loc_PCRE_V10_private_free(uint64_t a1, void *a2)
{
  return heap_Free(a2, a1);
}

uint64_t PCRE_Adapter_Create(int a1, uint64_t a2, _WORD *a3, int a4)
{
  uint64_t v11 = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v11);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v7 = 2320506890;
  uint64_t v8 = (void *)heap_Alloc(*(void *)(v11 + 8), 112);
  if (v8)
  {
    uint64_t v9 = v8;
    if (a1 == 1) {
      uint64_t v7 = PCRE_V10_Adapter_Init(v8);
    }
    else {
      uint64_t v7 = 2320506898;
    }
    *uint64_t v9 = v11;
    v9[1] = 0;
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 56664;
  }
  return v7;
}

uint64_t PCRE_ObjOpen(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
  {
    int v6 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))a1[2];
    uint64_t v7 = *a1;
    return v6(a1 + 1, a3, v7);
  }
  return result;
}

uint64_t PCRE_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(a1 + 24))(*(void *)(a1 + 8));
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
    return v4;
  }
  return result;
}

uint64_t PCRE_ErrorToLhError(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(uint64_t (**)(uint64_t))(a1 + 32);
    return v6(a3);
  }
  return result;
}

void *PCRE_CompilePattern(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v8[0] = 0;
  v8[1] = 0;
  int v9 = 0;
  return PCRE_CompilePatternWithOptions(a1, a2, a3, (uint64_t)v8, a4, a5, a6, a7);
}

void *PCRE_CompilePatternWithOptions(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v15 = safeh_HandleCheck(a1, a2, 56664, 112);
  if (v15 < 0)
  {
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  uint64_t v16 = 0;
  LODWORD(v17) = 0;
  do
  {
    int v18 = *(_DWORD *)(a4 + v16);
    if (v18) {
      int v18 = *(_DWORD *)(*(void *)(a1 + 96) + v16);
    }
    uint64_t v17 = v18 | v17;
    v16 += 4;
  }
  while (v16 != 20);
  unsigned int v19 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
  uint64_t v20 = v19;
  if (!v19)
  {
LABEL_12:
    int v15 = -1974460406;
    goto LABEL_13;
  }
  PCRE_V10_Adapter_Pattern_Init(v19);
  uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(*(void *)(a1 + 8), a3, v17, a5, a6, a7);
  if (!v21)
  {
    uint64_t v20 = 0;
    goto LABEL_12;
  }
  *uint64_t v20 = *(void *)a1;
  v20[1] = v21;
LABEL_13:
  *a8 = v15;
  return v20;
}

uint64_t PCRE_FreePattern(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v3 & 0x80000000) == 0)
  {
    (*(void (**)(void))(a1 + 16))(*(void *)(a1 + 8));
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
  }
  return v3;
}

uint64_t PCRE_CopyPattern(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v8 = 2320506890;
  int v9 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
  if (v9)
  {
    uint64_t v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    uint64_t v11 = *(void *)(a1 + 8);
    void *v10 = *(void *)a1;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(a1 + 32))(v11);
    v10[1] = v12;
    if (v12)
    {
      *(void *)a3 = v10;
      *(_DWORD *)(a3 + 8) = 56665;
LABEL_5:
      uint64_t v8 = v7;
    }
  }
  *a4 = v8;
  return v8;
}

uint64_t PCRE_Exec(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, _DWORD *a10)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  return PCRE_ExecWithOptions(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v11, a8, a9, a10);
}

uint64_t PCRE_ExecWithOptions(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  int v18 = safeh_HandleCheck((uint64_t)a1, a2, 56664, 112);
  if (v18 < 0 || (int v18 = safeh_HandleCheck(a3, a4, 56665, 0), v18 < 0))
  {
    *a11 = v18;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v19 = 0;
    LODWORD(v20) = 0;
    do
    {
      int v21 = *(_DWORD *)(a8 + v19);
      if (v21) {
        int v21 = *(_DWORD *)(a1[12] + v19);
      }
      uint64_t v20 = v21 | v20;
      v19 += 4;
    }
    while (v19 != 20);
    char v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD *))a1[11];
    uint64_t v23 = a1[1];
    uint64_t v24 = *(void *)(a3 + 8);
    return v22(v23, v24, a5, a6, a7, v20, a9, a10, a11);
  }
}

uint64_t PCRE_Adapter2PCREOptions(uint64_t a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck(a1, a2, 56664, 112) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(result) = 0;
  do
  {
    int v7 = *(_DWORD *)(a3 + v5);
    if (v7) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 96) + v5);
    }
    uint64_t result = v7 | result;
    v5 += 4;
  }
  while (v5 != 20);
  return result;
}

uint64_t PCRE_Version(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((v7 & 0x80000000) == 0) {
    (*(void (**)(uint64_t, uint64_t))(a1 + 104))(a3, a4);
  }
  return v7;
}

uint64_t PCRE_AttachPattern(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = 2320506890;
  int v9 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
  if (v9)
  {
    uint64_t v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    if (a3)
    {
      void *v10 = *(void *)a1;
      v10[1] = a3;
      *a4 = v10;
      a4[1] = 56665;
      return v7;
    }
  }
  return v8;
}

uint64_t PCRE_SerializeAndDecodeBatch(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56664, 112);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 8);
    return v10(v11, a3, a4, a5);
  }
  return result;
}

uint64_t luattt_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2711625729;
  }
  uint64_t result = 0;
  *a2 = &ILuattt;
  return result;
}

uint64_t luattt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2711625735;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    if ((InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
    {
      uint64_t v10 = (void *)heap_Calloc(*(void **)(v21 + 8), 1, 144);
      if (v10)
      {
        uint64_t v11 = (_WORD **)v10;
        v10[2] = 0;
        int v12 = v10 + 2;
        void *v10 = a3;
        v10[1] = a4;
        v10[8] = 0;
        uint64_t v13 = v10 + 8;
        uint64_t Object = objc_GetObject(*(void *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v20);
        if ((Object & 0x80000000) == 0)
        {
          v11[9] = *(_WORD **)(v20 + 8);
          int v15 = *(void **)(v21 + 8);
          long long v18 = xmmword_20D669D90;
          uint64_t v19 = 0;
          if (!vector_ObjOpen(v15, &v18, 1, v13))
          {
            uint64_t v11 = 0;
            goto LABEL_14;
          }
          int Allocator = ooc_utils_createAllocator((uint64_t)(v11 + 3), *v11, (int)v11[1]);
          uint64_t Object = LH_ERROR_to_VERROR(Allocator);
          if ((Object & 0x80000000) == 0)
          {
            uint64_t v5 = 2711626240;
            if ((luavmldoutil_initialize_lua_vm_from_buffer(*v11, (uint64_t)v11[1], (uint64_t)(v11 + 3), (uint64_t)"TTT_rewrite_process", (uint64_t)luattt_log_callback, v12, "TTT_script_set = {}\n\n-- Load a resource\n-- argument: the resource name\n-- return: the identifier\nfunction TTT_resource_load(name)\n    local id = 0\n    for _, info in ipairs(TTT_script_set) do\n        if id < info.id then\n            id = info.id\n        end\n    end\n    id = id + 1\n"
                    "    local uint64_t info = {}\n"
                    "    info.id = id\n"
                    "    info.func = _G[name]\n"
                    "    table.insert(TTT_script_set, 1, info)\n"
                    "    return tostring(id)\n"
                    "end\n"
                    "\n"
                    "-- Unload a resource\n"
                    "-- argument: the identifier\n"
                    "-- return: the identifier or an empty string if not present\n"
                    "function TTT_resource_unload(id_str)\n"
                    "    local id = tonumber(id_str)\n"
                    "    for pos, info in ipairs(TTT_script_set) do\n"
                    "        if info.id == id then\n"
                    "            table.remove(TTT_script_set, pos)\n"
                    "            return id_str\n"
                    "        end\n"
                    "    end\n"
                    "    return \"\"\n"
                    "end\n"
                    "\n"
                    "-- Call the rewrite process of all resources\n"
                    "-- argument: input text\n"
                    "-- return: output text\n"
                    "function TTT_rewrite_process(text)\n"
                    "    local buffer = text\n"
                    "    for _, info in ipairs(TTT_script_set) do\n"
                    "        buffer = info.func(buffer)\n"
                    "    end\n"
                    "    return buffer\n"
                    "end\n",
                    0x412u) & 0x80000000) != 0
              || !*v12)
            {
              goto LABEL_12;
            }
LABEL_14:
            uint64_t v5 = 0;
            *a5 = (uint64_t)v11;
            *((_DWORD *)a5 + 2) = 1077;
            return v5;
          }
        }
        uint64_t v5 = Object;
LABEL_12:
        luattt_pObjClose((uint64_t)v11);
        return v5;
      }
      return 2711625738;
    }
  }
  return v5;
}

uint64_t luattt_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = luattt_UnloadAllScripts((uint64_t)a1);
    if ((result & 0x80000000) == 0)
    {
      luattt_ProcessEnd(a1, a2);
      return luattt_pObjClose((uint64_t)a1);
    }
  }
  return result;
}

uint64_t luattt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    return luattt_UnloadAllScripts(a1);
  }
  return result;
}

uint64_t luattt_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    *a3 = &luattt_ResourceTypes_SZ_LUATTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t luattt_ResourceLoad(uint64_t a1, int a2, char *a3, const char *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v7 = 2711625735;
  unsigned int v31 = 0;
  if (a3 && a7)
  {
    unsigned int v9 = a6;
    uint64_t v10 = a5;
    if (a4)
    {
      BOOL v14 = a6 != 0;
      if (!a5 && a6) {
        return v7;
      }
    }
    else
    {
      if (!a5 || !a6) {
        return v7;
      }
      BOOL v14 = 1;
    }
    uint64_t v15 = safeh_HandleCheck(a1, a2, 1077, 144);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    uint64_t v29 = 0;
    int v30 = 0;
    *(void *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v34) & 0x80000000) == 0)
    {
      uint64_t v35 = 0;
      if (a4 && *a4 && vector_GetElemAt(*(void *)(a1 + 64), 0, &v35))
      {
        unsigned int v16 = 1;
        do
        {
          uint64_t v17 = *(const char **)(v35 + 8);
          if (v17)
          {
            if (!strcmp(v17, a4)) {
              return 2711625752;
            }
          }
        }
        while (vector_GetElemAt(*(void *)(a1 + 64), v16++, &v35));
      }
      char v19 = !v14;
      if (!v10) {
        char v19 = 1;
      }
      if (v19)
      {
        uint64_t v20 = luattt_DataOpen(v34, a4, &v33, a3, (uint64_t)&v32, (uint64_t)&v31);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_32;
        }
        uint64_t v10 = v32;
        unsigned int v9 = v31;
      }
      else
      {
        uint64_t v32 = v10;
        unsigned int v31 = v9;
      }
      int ScriptFromBuffer = LuaVMLDO_LoadScriptFromBuffer(*(void *)(a1 + 16), v10, v9);
      uint64_t v20 = LH_ERROR_to_VERROR(ScriptFromBuffer);
      if ((v20 & 0x80000000) == 0)
      {
        int v22 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 16), (uint64_t)"TTT_resource_load", (uint64_t)"TTT_script", 4u, (char *)&v29);
        uint64_t v23 = LH_ERROR_to_VERROR(v22);
        unsigned int v27 = v23;
        if ((v23 & 0x80000000) != 0)
        {
          uint64_t v7 = v23;
        }
        else
        {
          int v30 = a4;
          log_OutText(*(void *)(v34 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Loaded resource %s", v24, v25, v26, (uint64_t)&v29);
          if (vector_Add(*(void *)(a1 + 64), &v29) == 1) {
            uint64_t v7 = v27;
          }
          else {
            uint64_t v7 = 2711625738;
          }
          *(void *)a7 = v30;
          *(_DWORD *)(a7 + 8) = 1108;
        }
        goto LABEL_34;
      }
LABEL_32:
      uint64_t v7 = v20;
LABEL_34:
      if (v32)
      {
        brk_DataUnmap(*(void *)(v34 + 24), v33, v32);
        uint64_t v32 = 0;
      }
      if (v33) {
        brk_DataClose(*(void *)(v34 + 24), v33);
      }
    }
  }
  return v7;
}

uint64_t luattt_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = 2711626765;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v16) & 0x80000000) != 0) {
    return 2711625735;
  }
  uint64_t v7 = safeh_HandleCheck(a3, a4, 1108, 16);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  if (vector_GetElemAt(*(void *)(a1 + 64), 0, &v15))
  {
    unsigned int v9 = 0;
    while (*((void *)v15 + 1) != a3)
    {
      if (!vector_GetElemAt(*(void *)(a1 + 64), ++v9, &v15)) {
        return v8;
      }
    }
    int v11 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v15, 4u, v15);
    uint64_t v8 = LH_ERROR_to_VERROR(v11);
    if ((v8 & 0x80000000) == 0)
    {
      log_OutText(*(void *)(v16 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v12, v13, v14, (uint64_t)v15);
      vector_Remove(*(void *)(a1 + 64), v9);
    }
  }
  return v8;
}

uint64_t luattt_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v14 = 0;
  uint64_t v8 = 2711625735;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1077, 144) & 0x80000000) != 0) {
    return 2711625736;
  }
  if ((InitRsrcFunction(*a1, (int)a1[1], &v14) & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    a1[14] = a3;
    a1[15] = a4;
    do
    {
      int v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, void, void, _WORD **))a1[9] + 8))(a3, a4, 538, luattt_ProcessStart_szInput[v9], 0, 0, a1 + 16);
      if ((v10 & 0x80000000) == 0) {
        break;
      }
    }
    while (v9++ != 6);
    if (v10 < 0) {
      a1[16] = 0;
    }
    uint64_t v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, void, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 10);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v8 = v12;
LABEL_14:
      luattt_ProcessEnd(a1, a2);
      return v8;
    }
    uint64_t v8 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, uint64_t, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
           0,
           1,
           a1 + 12);
    if ((v8 & 0x80000000) != 0) {
      goto LABEL_14;
    }
  }
  return v8;
}

uint64_t luattt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) == 0)
  {
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v22) & 0x80000000) != 0) {
      return 2711625735;
    }
    if (!*(void *)(a1 + 80) || !*(void *)(a1 + 96))
    {
      uint64_t v15 = 0;
LABEL_24:
      int v8 = 1;
LABEL_25:
      *a5 = v8;
      return v15;
    }
    *a5 = 0;
    uint64_t v7 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 72) + 144))(*(void *)(a1 + 80), *(void *)(a1 + 88), (char *)&v18 + 4, &v18);
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = v18;
      if (!v18)
      {
        uint64_t v15 = 0;
        goto LABEL_25;
      }
      uint64_t v7 = (*(uint64_t (**)(void, void, char **, char *))(*(void *)(a1 + 72) + 88))(*(void *)(a1 + 80), *(void *)(a1 + 88), &v21, (char *)&v18 + 4);
      if ((v7 & 0x80000000) == 0)
      {
        char __s = v21;
        size_t v9 = HIDWORD(v18);
        if (vector_GetSize(*(void *)(a1 + 64)))
        {
          int v10 = LuaVMLDO_RunFunctionReturningPointerToString(*(void *)(a1 + 16), (uint64_t)"TTT_rewrite_process", (uint64_t)v21, (uint64_t *)&__s);
          unsigned int v11 = LH_ERROR_to_VERROR(v10);
          if ((v11 & 0x80000000) != 0) {
            goto LABEL_17;
          }
          size_t v9 = strlen(__s);
        }
        if (!v9
          || (unsigned int v11 = (*(uint64_t (**)(void, void, void **, size_t))(*(void *)(a1 + 72) + 112))(*(void *)(a1 + 96), *(void *)(a1 + 104), &v19, v9), (v11 & 0x80000000) == 0)&& (memcpy(v19, __s, v9), unsigned int v11 = (*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 72) + 120))(*(void *)(a1 + 96), *(void *)(a1 + 104), v9), (v11 & 0x80000000) == 0))
        {
          unsigned int v12 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 72) + 96))(*(void *)(a1 + 80), *(void *)(a1 + 88), HIDWORD(v18));
          if ((v12 & 0x80000000) != 0 || !vector_GetSize(*(void *)(a1 + 64)))
          {
LABEL_18:
            int v14 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 72) + 72))(*(void *)(a1 + 96), *(void *)(a1 + 104));
            if (v14 >= 0) {
              uint64_t v15 = v12;
            }
            else {
              uint64_t v15 = v14;
            }
            *(void *)(a1 + 96) = safeh_GetNullHandle();
            *(void *)(a1 + 104) = v16;
            goto LABEL_24;
          }
          int v13 = LuaVMLDO_ReleasePointerToString(*(void *)(a1 + 16));
          unsigned int v11 = LH_ERROR_to_VERROR(v13);
        }
LABEL_17:
        unsigned int v12 = v11;
        goto LABEL_18;
      }
    }
  }
  return v7;
}

uint64_t luattt_ProcessEnd(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[16], a1[17], NullHandle, v5))
    {
      int v6 = (*(uint64_t (**)(void, void))(a1[9] + 72))(a1[16], a1[17]);
      if (v6 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v6;
      }
    }
    a1[16] = safeh_GetNullHandle();
    a1[17] = v7;
    uint64_t v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[10], a1[11], v8, v9))
    {
      int v10 = (*(uint64_t (**)(void, void))(a1[9] + 72))(a1[10], a1[11]);
      if (v10 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    a1[10] = safeh_GetNullHandle();
    a1[11] = v11;
    uint64_t v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], v12, v13))
    {
      int v14 = (*(uint64_t (**)(void, void))(a1[9] + 72))(a1[12], a1[13]);
      if (v14 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v14;
      }
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v15;
  }
  return v3;
}

uint64_t luattt_log_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"LUATTT", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t luattt_pObjClose(uint64_t a1)
{
  uint64_t v1 = 2711625735;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 72)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"SYNTHSTREAM");
    }
    if (*(void *)(a1 + 16)) {
      luavmldoutil_destroy_lua_vm(a1 + 24, (uint64_t *)(a1 + 16));
    }
    kaldi::nnet1::Component::IsUpdatable((kaldi::nnet1::Component *)(a1 + 24));
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      vector_ObjClose(v3);
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t luattt_UnloadAllScripts(uint64_t a1)
{
  uint64_t i = 2711625735;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v4 = inited;
      int Size = vector_GetSize(*(void *)(a1 + 64));
      if (Size)
      {
        unsigned int v6 = Size - 1;
        for (uint64_t i = v4; vector_GetElemAt(*(void *)(a1 + 64), v6, &v12); --v6)
        {
          int v7 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v12, 4u, v12);
          uint64_t i = LH_ERROR_to_VERROR(v7);
          if ((i & 0x80000000) != 0) {
            break;
          }
          log_OutText(*(void *)(v13 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v8, v9, v10, (uint64_t)v12);
          vector_Remove(*(void *)(a1 + 64), v6);
          if (!v6) {
            break;
          }
        }
      }
      else
      {
        return v4;
      }
    }
  }
  return i;
}

uint64_t luattt_DataOpen(uint64_t a1, const char *a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v16 = 0;
  bzero(v17, 0x400uLL);
  uint64_t v12 = brk_DataOpenEx(*(void *)(a1 + 24), (uint64_t)a2, 1, (uint64_t)a3);
  if (strstr(a4, ";loader=broker") && (v12 & 0x80000000) != 0)
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v16);
    if ((Str & 0x80000000) != 0) {
      return Str;
    }
    int v14 = brokeraux_ComposeBrokerString(a1, a2, 0, 1, *(char **)v16, 0, 0, v17, 0x400uLL);
    if (v14 < 0) {
      return v14 | 0xA1A02000;
    }
    uint64_t v12 = brk_DataOpenEx(*(void *)(a1 + 24), (uint64_t)v17, 0, (uint64_t)a3);
  }
  if ((v12 & 0x80000000) == 0) {
    return brk_DataMapEx(*(void *)(a1 + 24), *a3, 0, a6, a5);
  }
  return v12;
}

uint64_t araparser_loc_getStandardizeRule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(__c) = 0;
  uint64_t v21 = 0;
  __int16 v20 = -1;
  uint64_t v5 = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, __int16 *, int *))(*(void *)(*(void *)(a1 + 24) + 24) + 96))(*(void *)(*(void *)(a1 + 24) + 8), *(void *)(*(void *)(a1 + 24) + 16), "fecfg", a2, &v21, &v20, &__c);
  if ((v5 & 0x80000000) == 0 && v20)
  {
    unsigned int v6 = *v21;
    int v7 = strchr(*v21, __c);
    if (v7) {
      *int v7 = 0;
    }
    if (v6)
    {
      for (char i = 0; ; ++i)
      {
        uint64_t v9 = strchr(v6, 95);
        uint64_t v10 = v9;
        if (v9) {
          *uint64_t v9 = 0;
        }
        int v11 = strlen(v6);
        uint64_t v12 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v11 + 1));
        if (!v12) {
          break;
        }
        uint64_t v17 = v12;
        strcpy(v12, v6);
        if (i == 1)
        {
          *(void *)(a3 + 8) = v17;
        }
        else if (i)
        {
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v17);
        }
        else
        {
          *(void *)a3 = v17;
          *(_WORD *)(a3 + 16) = strlen(v17);
        }
        unsigned int v6 = v10 + 1;
        if (!v10) {
          return v5;
        }
      }
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v13, v14, v15, v16, v19);
      return 2356158474;
    }
  }
  return v5;
}

uint64_t fe_ara_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t PosparserIGTreesAndDict = 2356158471;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (!a5) {
    return PosparserIGTreesAndDict;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v37);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(*(void *)(v37 + 48), (uint64_t)"SYNTHSTREAM", &v36);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(*(void *)(v37 + 48), (uint64_t)"FE_DEPES", &v34);
  uint64_t v11 = *(void *)(v37 + 48);
  if ((Object & 0x80000000) != 0)
  {
    uint64_t v28 = "SYNTHSTREAM";
LABEL_17:
    objc_ReleaseObject(v11, (uint64_t)v28);
    return Object;
  }
  uint64_t v12 = objc_GetObject(v11, (uint64_t)"FE_DCTLKP", &v35);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t Object = v12;
    objc_ReleaseObject(*(void *)(v37 + 48), (uint64_t)"SYNTHSTREAM");
    uint64_t v11 = *(void *)(v37 + 48);
    uint64_t v28 = "FE_DEPES";
    goto LABEL_17;
  }
  uint64_t v17 = heap_Calloc(*(void **)(v37 + 8), 952, 1);
  if (!v17)
  {
    log_OutPublic(*(void *)(v37 + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v13, v14, v15, v16, v30);
    objc_ReleaseObject(*(void *)(v37 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(v37 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(void *)(v37 + 48), (uint64_t)"FE_DEPES");
    return 2356158474;
  }
  uint64_t v18 = (void **)(v17 + 24);
  uint64_t inited = posparser_Open(v37, (uint64_t *)(v17 + 24));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_WORD *)(v17 + 56) = 0;
  *(void *)(v17 + 48) = 0;
  uint64_t inited = paramc_ParamGetStr(*(void *)(v37 + 40), (uint64_t)"langcode", &v33);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  __strcpy_chk();
  *(_DWORD *)(*(void *)(v17 + 24) + 243) = 7565168;
  uint64_t v19 = v37;
  *(void *)(v17 + 8) = a4;
  *(void *)(v17 + 16) = v19;
  *(void *)uint64_t v17 = a3;
  *(void *)(v17 + 32) = *(void *)(v36 + 8);
  uint64_t v20 = v35;
  uint64_t v21 = *(void *)(v17 + 24);
  *(void *)(v21 + 24) = *(void *)(v35 + 8);
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 16);
  uint64_t v22 = v34;
  uint64_t v23 = *(void *)(v17 + 24);
  *(void *)(v23 + 56) = *(void *)(v34 + 8);
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v22 + 16);
  *(void *)a5 = v17;
  *(_DWORD *)(a5 + 8) = 85954;
  uint64_t v24 = *(void *)(v17 + 24);
  uint64_t PosparserIGTreesAndDict = getPosparserIGTreesAndDict(*(void *)(v17 + 16), *(_WORD **)v17, *(void *)(v17 + 8), *(void *)(v24 + 8), *(void *)(v24 + 16), *(void *)(v24 + 24), (_DWORD *)(v24 + 232), (uint64_t *)(v24 + 216), (uint64_t *)(v24 + 224), (_DWORD *)(v24 + 236), v24 + 240, (_DWORD *)(v17 + 40));
  if ((PosparserIGTreesAndDict & 0x80000000) != 0)
  {
LABEL_21:
    fe_ara_parser_ObjClose(*(void *)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return PosparserIGTreesAndDict;
  }
  if (!*(_DWORD *)(v17 + 40)) {
    return PosparserIGTreesAndDict;
  }
  uint64_t v25 = *(void **)(v37 + 8);
  uint64_t v26 = *v18 + 32;
  v31[0] = xmmword_26C21F588;
  v31[1] = *(_OWORD *)&off_26C21F598;
  uint64_t v32 = off_26C21F5A8;
  uint64_t v27 = ssftmap_ObjOpen(v25, 0, v31, v26);
  if ((v27 & 0x80000000) != 0)
  {
    uint64_t PosparserIGTreesAndDict = v27;
    goto LABEL_21;
  }
  uint64_t PosparserIGTreesAndDict = posparser_getPosMap(*v18);
  if ((PosparserIGTreesAndDict & 0x80000000) != 0) {
    goto LABEL_21;
  }
  return PosparserIGTreesAndDict;
}

uint64_t fe_ara_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0) {
    return 2356158472;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) && (ssftmap_ObjClose(*(void *)(*(void *)(a1 + 24) + 256)) & 0x80000000) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      if (*(_DWORD *)(v9 + 232) == 1) {
        freePosparserIGTrees(*(void *)(a1 + 16), (uint64_t *)(v9 + 216), (uint64_t *)(v9 + 224), v4, v5, v6, v7, v8);
      }
    }
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    posparser_Close(*(void **)(a1 + 24));
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_ara_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v12 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0) {
    return 2356158472;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) != 1
      || (uint64_t result = ssftmap_Clear(*(void *)(*(void *)(a1 + 24) + 256)), (result & 0x80000000) == 0)
      && (uint64_t result = posparser_getPosMap(*(void **)(a1 + 24)), (result & 0x80000000) == 0)
      && ((uint64_t v9 = *(void *)(a1 + 24), *(_DWORD *)(v9 + 232) != 1)
       || (uint64_t result = freePosparserIGTrees(*(void *)(a1 + 16), (uint64_t *)(v9 + 216), (uint64_t *)(v9 + 224), v4, v5, v6, v7, v8), (result & 0x80000000) == 0)))
    {
      uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &v12);
      if ((result & 0x80000000) == 0)
      {
        __strcpy_chk();
        *(_DWORD *)(*(void *)(a1 + 24) + 243) = 7565168;
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v11 = *(_DWORD **)(a1 + 24);
        v11[58] = 0;
        v11 += 58;
        return getPosparserIGTreesAndDict(v10, *(_WORD **)a1, *(void *)(a1 + 8), *((void *)v11 - 28), *((void *)v11 - 27), *((void *)v11 - 26), v11, (uint64_t *)v11 - 2, (uint64_t *)v11 - 1, v11 + 1, (uint64_t)(v11 + 2), (_DWORD *)(a1 + 40));
      }
    }
  }
  return result;
}

uint64_t fe_ara_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v7 = 2356158472;
  *(_WORD *)&__c[1] = -1;
  uint64_t v8 = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((v8 & 0x80000000) != 0) {
    return v7;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    return v8;
  }
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  uint64_t StandardizeRule = posparser_ProcessStart(*(char **)(a1 + 24));
  if ((StandardizeRule & 0x80000000) != 0) {
    goto LABEL_19;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t v8 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(*(void *)(a1 + 24) + 24) + 96))(*(void *)(*(void *)(a1 + 24) + 8), *(void *)(*(void *)(a1 + 24) + 16), "fecfg", "araparsernumstandardize", &__c[3], &__c[1], __c);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  if (!*(_WORD *)&__c[1])
  {
    unsigned int v13 = *(unsigned __int16 *)(a1 + 56);
    if (!*(_WORD *)(a1 + 56)) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  uint64_t v10 = **(const char ***)&__c[3];
  uint64_t v11 = strchr(**(char ***)&__c[3], __c[0]);
  if (v11)
  {
    *uint64_t v11 = 0;
    uint64_t v10 = **(const char ***)&__c[3];
  }
  unsigned __int16 v12 = atoi(v10);
  unsigned int v13 = v12;
  *(_WORD *)(a1 + 56) = v12;
  if (v12)
  {
LABEL_12:
    uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (24 * v13) | 1);
    *(void *)(a1 + 48) = v14;
    if (!v14)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v15, v16, v17, v18, v22);
      uint64_t v7 = 2356158474;
      goto LABEL_20;
    }
    if (!*(_WORD *)(a1 + 56)) {
      goto LABEL_17;
    }
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    while (1)
    {
      v25[7] = 0;
      *(void *)((char *)&v25[5] + 1) = 0;
      strcpy((char *)v25, "araparserstandardize");
      LH_itoa(v20, v23, 0xAu);
      __strcat_chk();
      uint64_t StandardizeRule = araparser_loc_getStandardizeRule(a1, (uint64_t)v25, *(void *)(a1 + 48) + v19);
      if ((StandardizeRule & 0x80000000) != 0) {
        break;
      }
      ++v20;
      v19 += 24;
      if (v20 >= *(unsigned __int16 *)(a1 + 56)) {
        goto LABEL_17;
      }
    }
LABEL_19:
    uint64_t v7 = StandardizeRule;
LABEL_20:
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(void *)(a1 + 32));
    return v7;
  }
LABEL_17:
  synstrmaux_InitStreamOpener(a1 + 64, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(void *)(a1 + 32), a3, a4);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_20;
  }
  return v7;
}

uint64_t fe_ara_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char __s = 0;
  unsigned int v87 = 0;
  size_t __n = 0;
  unsigned int v85 = 0;
  uint64_t v9 = 2356158474;
  unsigned __int16 v83 = 0;
  uint64_t v82 = 0;
  uint64_t v79 = 0;
  unsigned __int16 v78 = 0;
  int v77 = 0;
  uint64_t v10 = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((v10 & 0x80000000) != 0) {
    return 2356158472;
  }
  *a5 = 1;
  if (!*(_DWORD *)(a1 + 40)) {
    return v10;
  }
  __int16 __src = 0;
  uint64_t v10 = (*(uint64_t (**)(void, void, char **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &v87, (char *)&__n + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v11 = HIDWORD(__n);
  uint64_t v12 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 904), *(void *)(a1 + 912), (char *)&v82 + 4, &v82);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  if (HIDWORD(__n))
  {
    uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &__src, &__n);
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v13 = __n;
      unsigned __int16 v83 = __n >> 5;
      uint64_t v14 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), __n);
      uint64_t v19 = v14;
      uint64_t v80 = v14;
      if (!v14) {
        goto LABEL_69;
      }
      memcpy(v14, __src, __n);
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sentence \"%s\"", v20, v21, v22, (uint64_t)v87);
      if (v83)
      {
        uint64_t v23 = 0;
        uint64_t v24 = (int *)(v19 + 12);
        while (1)
        {
          int v25 = *v24;
          v24 += 8;
          if (v25 != *((_DWORD *)v19 + 3)) {
            break;
          }
          if (v83 == ++v23)
          {
            unsigned __int16 v26 = v83;
            uint64_t v23 = v83;
            goto LABEL_30;
          }
        }
        unsigned __int16 v26 = v23;
      }
      else
      {
        unsigned __int16 v26 = 0;
        uint64_t v23 = 0;
      }
LABEL_30:
      uint64_t v29 = heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), 4 * v83);
      if (v29)
      {
        uint64_t v34 = v29;
        uint64_t v35 = (uint64_t)&v19[32 * v23];
        uint64_t v36 = v83;
        if (v83 != v26)
        {
          uint64_t v37 = 0;
          char v38 = (_DWORD *)(v35 + 4);
          do
          {
            *(_DWORD *)(v34 + 4 * v37) = *v38;
            *char v38 = v37;
            v38 += 8;
            ++v37;
          }
          while ((unsigned __int16)(v36 - v26) != v37);
        }
        marker_sort(v35, v36 - v23);
        if (v83 != v26)
        {
          uint64_t v39 = (unsigned __int16)(v83 - v26);
          int v40 = &v19[32 * v23 + 4];
          do
          {
            *(_DWORD *)int v40 = *(_DWORD *)(v34 + 4 * *(unsigned int *)v40);
            v40 += 32;
            --v39;
          }
          while (v39);
        }
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v34);
        char v41 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (HIDWORD(__n) + 1));
        char __s = v41;
        if (v41)
        {
          uint64_t v42 = strcpy(v41, v87);
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing This Sentence \"%s\"", v43, v44, v45, (uint64_t)v42);
          araParser_SanitizeSentence(a1, &__s, (_DWORD *)&__n + 1, (uint64_t *)&v80, &v83);
          int v46 = __s;
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sanitized Sentence \"%s\"", v47, v48, v49, (uint64_t)__s);
          if (!*(_WORD *)(a1 + 56))
          {
            uint64_t v19 = 0;
LABEL_45:
            uint64_t v56 = v80;
            uint64_t v57 = posparser_ExtractWords(*(_DWORD **)(a1 + 24), (uint64_t)v80, v83, v46, HIDWORD(__n), (uint64_t *)&v79, &v78);
            if ((v57 & 0x80000000) == 0)
            {
              if (*(_WORD *)(a1 + 56))
              {
                araParser_setStandardizedWords(v79, v78, (uint64_t)v46, (uint64_t)v19);
                if (v19)
                {
                  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v19);
                  uint64_t v19 = 0;
                  unsigned int v85 = 0;
                }
              }
              uint64_t v58 = *(void *)(a1 + 24);
              if (!*(_WORD *)(v58 + 184)) {
                goto LABEL_52;
              }
              uint64_t v57 = posparser_applyEmbeddedRules(v58, (uint64_t)v79, v78, (uint64_t)v46, HIDWORD(__n));
              if ((v57 & 0x80000000) == 0)
              {
                uint64_t v58 = *(void *)(a1 + 24);
LABEL_52:
                if (*(_DWORD *)(v58 + 192) != 1) {
                  goto LABEL_55;
                }
                *(_WORD *)(v58 + 210) = 50;
                int v59 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 306);
                uint64_t v60 = *(void *)(a1 + 24);
                *(void *)(v60 + 200) = v59;
                if (v59)
                {
                  *(_WORD *)(v60 + 208) = 0;
                  bzero(v59, 6 * *(unsigned __int16 *)(v60 + 210));
LABEL_55:
                  uint64_t v57 = araParser_NormalizeSentence(a1, (const char **)&__s, (_DWORD *)&__n + 1, v56, v83, (uint64_t)v79, v78);
                  if ((v57 & 0x80000000) == 0)
                  {
                    uint64_t v64 = *(void *)(a1 + 24);
                    if (*(_DWORD *)(v64 + 192) == 1)
                    {
                      uint64_t v65 = *(unsigned __int16 *)(v64 + 208);
                      if (v65)
                      {
                        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Identified %d Diacritics", v61, v62, v63, v65);
                        uint64_t v66 = *(void *)(a1 + 24);
                        if (*(_WORD *)(v66 + 208))
                        {
                          uint64_t v67 = 0;
                          unint64_t v68 = 0;
                          do
                          {
                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"(%d,%s)", v61, v62, v63, *(unsigned __int16 *)(*(void *)(v66 + 200) + v67));
                            ++v68;
                            uint64_t v66 = *(void *)(a1 + 24);
                            v67 += 6;
                          }
                          while (v68 < *(unsigned __int16 *)(v66 + 208));
                        }
                      }
                    }
                    uint64_t v69 = __s;
                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Normalized Sentence \"%s\"", v61, v62, v63, (uint64_t)__s);
                    BOOL v70 = araParser_checkIfIsolatedWord(a1, (uint64_t)v79, v78, (uint64_t)v69);
                    uint64_t v57 = posparser_Process(*(unsigned __int16 **)(a1 + 24), a3, a4, (uint64_t)v79, v78, v70, 0, &__s, (uint64_t *)&v80, &v83);
                    if ((v57 & 0x80000000) == 0)
                    {
                      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Final Sentence \"%s\"", v71, v72, v73, (uint64_t)__s);
                      int v74 = strlen(__s);
                      LODWORD(__n) = 32 * v83;
                      HIDWORD(__n) = v74 + 1;
                      uint64_t v57 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 920), *(void *)(a1 + 928), __s);
                      if ((v57 & 0x80000000) == 0)
                      {
                        uint64_t v57 = (*(uint64_t (**)(void, void, char *, void))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 936), *(void *)(a1 + 944), v80, __n);
                        if ((v57 & 0x80000000) == 0)
                        {
                          uint64_t v57 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), v11);
                          if ((v57 & 0x80000000) == 0)
                          {
                            uint64_t v57 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 904), *(void *)(a1 + 912), v13);
                            if ((v57 & 0x80000000) == 0)
                            {
                              uint64_t v57 = (*(uint64_t (**)(void, void, int *, void))(*(void *)(*(void *)(a1 + 24) + 56)
                                                                                             + 112))(*(void *)(*(void *)(a1 + 24) + 40), *(void *)(*(void *)(a1 + 24) + 48), &v77, 0);
                              if ((v57 & 0x80000000) == 0)
                              {
                                v77 += HIDWORD(__n) - v11;
                                uint64_t v57 = (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 24) + 56)
                                                                                + 104))(*(void *)(*(void *)(a1 + 24) + 40), *(void *)(*(void *)(a1 + 24) + 48));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_68;
                }
LABEL_69:
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v15, v16, v17, v18, v76);
                goto LABEL_70;
              }
            }
LABEL_68:
            uint64_t v9 = v57;
            goto LABEL_70;
          }
          uint64_t v50 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (HIDWORD(__n) + 1));
          unsigned int v85 = v50;
          if (v50)
          {
            strcpy(v50, v46);
            araParser_ApplyStandardizations((char *)a1, &v85);
            uint64_t v19 = v85;
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Got Standardized Sentence     \"%s\"", v51, v52, v53, (uint64_t)v85);
            goto LABEL_45;
          }
        }
        uint64_t v54 = *(void *)(*(void *)(a1 + 16) + 32);
        uint64_t v55 = 54000;
      }
      else
      {
        uint64_t v54 = *(void *)(*(void *)(a1 + 16) + 32);
        uint64_t v55 = 30000;
      }
      log_OutPublic(v54, (uint64_t)"FE_ARAPARSER", v55, 0, v30, v31, v32, v33, v76);
      uint64_t v19 = 0;
LABEL_70:
      if (v80)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v80);
        uint64_t v80 = 0;
      }
      posparser_FreeWords(*(void **)(a1 + 24), (uint64_t)v79, v78);
      uint64_t v79 = 0;
      if (__s)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)__s);
        char __s = 0;
      }
      if (v19) {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v19);
      }
      uint64_t v75 = *(void *)(*(void *)(a1 + 24) + 200);
      if (v75)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v75);
        *(void *)(*(void *)(a1 + 24) + 200) = 0;
      }
      return v9;
    }
    return v10;
  }
  int v27 = v82;
  if (v82)
  {
    if (HIDWORD(v82))
    {
      uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &__src, &__n);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      uint64_t v10 = (*(uint64_t (**)(void, void, void *, void))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 936), *(void *)(a1 + 944), __src, __n);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      uint64_t v12 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 904), *(void *)(a1 + 912), __n);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      int v27 = v82;
    }
    if (!v27) {
      return v12;
    }
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(void *)(a1 + 32));
  }
  uint64_t v80 = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"clcpppipelinemode", &v80) & 0x80000000) != 0
    || !v80
    || !*v80)
  {
    *a5 = 0;
  }
  return v12;
}

size_t araParser_SanitizeSentence(uint64_t a1, char **a2, _DWORD *a3, uint64_t *a4, _WORD *a5)
{
  uint64_t v6 = a4;
  uint64_t v8 = a2;
  char __s = *a2;
  __int16 v102 = 0;
  unsigned int v101 = (_DWORD *)*a4;
  unsigned __int16 v100 = 0;
  unsigned __int16 v10 = strlen(__s);
  if (!v10) {
    goto LABEL_160;
  }
  size_t v97 = a3;
  uint64_t v98 = v8;
  uint64_t v99 = v6;
  unsigned __int16 v11 = 0;
  unsigned int v12 = v10;
  unsigned __int16 v13 = v10;
  do
  {
    if ((unsigned __int16)*a5 < 2u) {
      goto LABEL_23;
    }
    unsigned int v14 = 1;
    uint64_t v15 = (uint64_t)v101;
    uint64_t v16 = 64;
    do
    {
      uint64_t v17 = v14;
      if (*(_DWORD *)(v15 + 32 * v14) == 21
        && (uint64_t v18 = *(char **)(v15 + 32 * v14 + 24)) != 0
        && (v19 = LH_stricmp(v18, "spell"), uint64_t v15 = (uint64_t)v101, !v19)
        && ((int v21 = v101[3], v22 = v101[8 * v17 + 3] - v21, v22 == v11) || v22 == (unsigned __int16)(v11 + 1)))
      {
        uint64_t v23 = v16;
        uint64_t v24 = v17;
        do
        {
          if (++v24 >= (unint64_t)(unsigned __int16)*a5)
          {
            LOWORD(v26) = v13;
            goto LABEL_21;
          }
          int v25 = *(_DWORD *)((char *)v101 + v23);
          v23 += 32;
        }
        while (v25 != 21);
        LOWORD(v26) = v13;
        if (v101[8 * (unsigned __int16)v24] == 21) {
          int v26 = v101[8 * (unsigned __int16)v24 + 3] - v21;
        }
LABEL_21:
        BOOL v20 = v11 != (unsigned __int16)v26;
        unsigned __int16 v11 = v26;
      }
      else
      {
        BOOL v20 = 0;
      }
      if (*(_DWORD *)(v15 + 32 * v17 + 12) - *(_DWORD *)(v15 + 12) > v11) {
        break;
      }
      if (v20) {
        break;
      }
      unsigned int v14 = v17 + 1;
      v16 += 32;
    }
    while ((int)v17 + 1 < (unsigned __int16)*a5);
    if (!v20)
    {
LABEL_23:
      uint64_t v27 = v11;
      uint64_t v28 = (unsigned __int8 *)&__s[v11];
      if (*v28 != 32) {
        goto LABEL_39;
      }
      unsigned int v29 = v11;
      uint64_t v30 = v11 + 1;
      if (v30 < v12 && __s[v30] == 32)
      {
        unint64_t v31 = (unsigned __int16)*a5;
        if (v31 >= 2)
        {
          uint64_t v32 = v101 + 8;
          unint64_t v33 = 2;
          do
          {
            unsigned int v34 = v32[3] - v101[3];
            BOOL v35 = v34 == v11;
            if (v34 == (unsigned __int16)(v11 + 1)) {
              BOOL v35 = 1;
            }
            char v36 = *v32 == 21 && v35;
            if (v34 > v11) {
              break;
            }
            v32 += 8;
            char v37 = v33++ >= v31 ? 1 : v36;
          }
          while ((v37 & 1) == 0);
          if (v36)
          {
LABEL_39:
            if (!isPunc_0(*(void *)(a1 + 24), v28)) {
              goto LABEL_99;
            }
            unint64_t v38 = (unsigned __int16)*a5;
            if (v38 > 1)
            {
              uint64_t v39 = v101 + 11;
              uint64_t v40 = 2;
              for (unint64_t i = 1; i < v38; ++i)
              {
                if (v101[8 * i] == 34)
                {
                  int v42 = v101[3];
                  if (v101[8 * i + 3] - v42 <= v11)
                  {
                    uint64_t v43 = v39;
                    unint64_t v44 = v40;
                    do
                    {
                      int v45 = *(v43 - 3);
                      if (v45 == 21 || v45 == 3)
                      {
                        if (*v43 - v42 > v11 || v38 == v44)
                        {
LABEL_73:
                          inSMSMode(v11, (uint64_t)v101, v38);
                          goto LABEL_99;
                        }
                      }
                      else if (v38 == v44)
                      {
                        goto LABEL_73;
                      }
                      BOOL v48 = v45 == 21 || v44++ >= v38;
                      v43 += 8;
                    }
                    while (!v48);
                  }
                }
                ++v40;
                v39 += 8;
              }
            }
            int v49 = inSMSMode(v11, (uint64_t)v101, v38);
            int v50 = v49;
            if (!v11) {
              goto LABEL_92;
            }
            uint64_t v51 = v11 - 1;
            int v52 = __s[v51];
            if (v52 == 32) {
              goto LABEL_92;
            }
            if (v49)
            {
              if (v49 != 1) {
                goto LABEL_92;
              }
              if (isSMSPunc(*(void *)(a1 + 24), (unsigned __int8 *)&__s[v51]))
              {
                int v50 = 1;
                goto LABEL_92;
              }
              LOBYTE(v52) = __s[v51];
            }
            if (!isDigit(v52))
            {
              uint64_t v68 = v11 + 1;
              if (v68 == v12)
              {
                if (v11 < 2u) {
                  goto LABEL_92;
                }
                uint64_t v69 = __s;
              }
              else
              {
                if (v68 >= v12) {
                  goto LABEL_92;
                }
                if (v11 < 2u) {
                  goto LABEL_92;
                }
                uint64_t v69 = __s;
                if (__s[v68] != 32) {
                  goto LABEL_92;
                }
              }
              if (strncmp(&v69[v11 - 2], "§", 2uLL))
              {
                size_t result = posparserGrowStr(*(void *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v12 + 1), &v102, 0);
                if ((result & 0x80000000) != 0
                  || (size_t result = posparserInsertWordMarker(*(void *)(a1 + 24), (uint64_t *)&v101, a5, v11, 1, __s, &v100),
                      (result & 0x80000000) != 0))
                {
LABEL_145:
                  unsigned __int16 v83 = __s;
                  goto LABEL_146;
                }
                memmove(&__s[v68], &__s[v11], (int)(v12 - v11));
                __s[v12 + 1] = 0;
                unsigned __int16 v13 = strlen(__s);
                __s[v11] = 32;
                unint64_t v77 = (unsigned __int16)*a5;
                uint64_t v72 = (uint64_t)v101;
                if (v77 >= 2)
                {
                  uint64_t v78 = 0;
                  uint64_t v79 = 32 * v100 - 32;
                  uint64_t v80 = 32 * v77 - 32;
                  do
                  {
                    if (v79 != v78)
                    {
                      int v81 = *(_DWORD *)(v72 + v78 + 44);
                      if (v11 <= (unsigned __int16)(v81 - *(_WORD *)(v72 + 12))) {
                        *(_DWORD *)(v72 + v78 + 44) = v81 + 1;
                      }
                    }
                    v78 += 32;
                  }
                  while (v80 != v78);
                }
LABEL_128:
                ++*(_DWORD *)(v72 + 16);
                if (v11) {
                  --v11;
                }
                else {
                  unsigned __int16 v11 = 0;
                }
                goto LABEL_100;
              }
            }
LABEL_92:
            uint64_t v65 = v11 + 1;
            int v66 = v12 - v65;
            if (v12 <= v65) {
              goto LABEL_99;
            }
            if (v50 == 1)
            {
              if (isSMSPunc(*(void *)(a1 + 24), (unsigned __int8 *)&__s[v65])) {
                goto LABEL_99;
              }
            }
            else if (v50)
            {
              goto LABEL_99;
            }
            int v67 = __s[v65];
            if (v67 == 32 || isDigit(v67) || v11 && __s[v11 - 1] != 32) {
              goto LABEL_99;
            }
            uint64_t v70 = v12 + 1;
            size_t result = posparserGrowStr(*(void *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)v70, &v102, 0);
            if ((result & 0x80000000) != 0) {
              goto LABEL_145;
            }
            size_t result = posparserInsertWordMarker(*(void *)(a1 + 24), (uint64_t *)&v101, a5, (unsigned __int16)(v11 + 1), 1, __s, &v100);
            if ((result & 0x80000000) != 0) {
              goto LABEL_145;
            }
            memmove(&__s[v11 + 2], &__s[v65], v66);
            __s[v70] = 0;
            unsigned __int16 v13 = strlen(__s);
            __s[v65] = 32;
            unint64_t v71 = (unsigned __int16)*a5;
            uint64_t v72 = (uint64_t)v101;
            if (v71 >= 2)
            {
              uint64_t v73 = 0;
              uint64_t v74 = 32 * v100 - 32;
              uint64_t v75 = 32 * v71 - 32;
              do
              {
                if (v74 != v73)
                {
                  int v76 = *(_DWORD *)(v72 + v73 + 44);
                  if (v11 < (unsigned __int16)(v76 - *(_WORD *)(v72 + 12))) {
                    *(_DWORD *)(v72 + v73 + 44) = v76 + 1;
                  }
                }
                v73 += 32;
              }
              while (v75 != v73);
            }
            goto LABEL_128;
          }
        }
      }
      unsigned __int16 v53 = v11;
      if (v11 >= v13) {
        goto LABEL_77;
      }
      while (__s[v27] == 32)
      {
        if (v13 == ++v27)
        {
          unsigned __int16 v53 = v13;
          goto LABEL_75;
        }
      }
      unsigned __int16 v53 = v27;
LABEL_75:
      unsigned int v29 = v53;
      if (!v11 || v30 != v53)
      {
LABEL_77:
        size_t result = posparserGrowStr(*(void *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v13 + 1), &v102, 0);
        if ((result & 0x80000000) != 0) {
          goto LABEL_145;
        }
        memmove(&__s[v30], &__s[v53], (int)(v12 - v29));
        int v55 = v29 - v30;
        __s[(int)(v12 - (v29 - v30))] = 0;
        unsigned __int16 v56 = strlen(__s);
        unint64_t v57 = (unsigned __int16)*a5;
        uint64_t v58 = (uint64_t)v101;
        if (v57 >= 2)
        {
          int v59 = v101[3];
          uint64_t v60 = v101 + 11;
          unint64_t v61 = v57 - 1;
          while (1)
          {
            unsigned int v62 = (unsigned __int16)(*v60 - v59);
            BOOL v63 = v62 <= v30 || v62 >= v29;
            int v64 = v59 + v30;
            if (!v63) {
              goto LABEL_87;
            }
            if (v62 >= v29) {
              break;
            }
LABEL_88:
            v60 += 8;
            if (!--v61) {
              goto LABEL_89;
            }
          }
          int v64 = *v60 - v55;
LABEL_87:
          *uint64_t v60 = v64;
          goto LABEL_88;
        }
LABEL_89:
        *(_DWORD *)(v58 + 16) -= v55;
        unsigned __int16 v13 = v56;
      }
LABEL_99:
      ++v11;
    }
LABEL_100:
    unsigned int v12 = v13;
  }
  while (v13 > v11);
  uint64_t v8 = v98;
  uint64_t v6 = v99;
  if (!v13) {
    goto LABEL_160;
  }
  uint64_t v82 = (unsigned __int8 *)&__s[v13 - 1];
  if (*v82 == 32
    || v13 >= 3u && !strncmp(&__s[v13 - 3], "§", 2uLL) && isPunc_0(*(void *)(a1 + 24), v82))
  {
    uint64_t v8 = v98;
    uint64_t v6 = v99;
    a3 = v97;
LABEL_138:
    unsigned __int16 v84 = v13 - 1;
    if (v13 != 1)
    {
      unsigned int v85 = __s;
      uint64_t v86 = &__s[v84];
      if (*v86 == 32)
      {
        int v87 = 0;
        int v88 = (unsigned __int16)(v13 - 1);
        while (1)
        {
          if (v85[v88 - 1] != 32) {
            goto LABEL_148;
          }
          unsigned __int16 v89 = v84;
          *uint64_t v86 = 0;
          if (!--v84) {
            break;
          }
          ++v87;
          int v88 = v84;
          unsigned int v85 = __s;
          uint64_t v86 = &__s[v84];
          unsigned __int16 v13 = v89;
          if (*v86 != 32)
          {
            unsigned __int16 v13 = v89;
            goto LABEL_149;
          }
        }
        unsigned __int16 v13 = 1;
LABEL_149:
        unint64_t v90 = (unsigned __int16)*a5;
        if (v90 >= 2)
        {
          int v91 = v101[3];
          uint64_t v92 = v101 + 11;
          unint64_t v93 = v90 - 1;
          while (1)
          {
            unsigned int v94 = (unsigned __int16)(*v92 - v91);
            BOOL v95 = v94 <= v13 || v94 >= v11;
            int v96 = v91 + v13;
            if (!v95) {
              goto LABEL_158;
            }
            if (v94 >= v11) {
              break;
            }
LABEL_159:
            v92 += 8;
            if (!--v93) {
              goto LABEL_160;
            }
          }
          int v96 = v13 - v11 + *v92;
LABEL_158:
          *uint64_t v92 = v96;
          goto LABEL_159;
        }
        goto LABEL_160;
      }
      int v87 = 0;
LABEL_148:
      if (v87) {
        goto LABEL_149;
      }
    }
LABEL_160:
    unsigned __int16 v83 = __s;
    size_t result = strlen(__s);
    *a3 = result;
    goto LABEL_161;
  }
  size_t result = posparserGrowStr(*(void *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v13 + 1), &v102, 0);
  unsigned __int16 v83 = __s;
  if ((result & 0x80000000) == 0)
  {
    __s[v13] = 32;
    __s[v13 + 1] = 0;
    unsigned __int16 v13 = strlen(__s);
    uint64_t v8 = v98;
    uint64_t v6 = v99;
    a3 = v97;
    if (!v13) {
      goto LABEL_160;
    }
    goto LABEL_138;
  }
LABEL_146:
  uint64_t v8 = v98;
  uint64_t v6 = v99;
LABEL_161:
  *uint64_t v6 = (uint64_t)v101;
  *uint64_t v8 = v83;
  return result;
}

char *araParser_ApplyStandardizations(char *result, char **a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int16 *)result + 28);
  if (*((_WORD *)result + 28))
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    uint64_t v7 = *((void *)result + 6);
    do
    {
      size_t result = strstr(v3, *(const char **)(v7 + 24 * v6));
      if (result)
      {
        uint64_t v8 = result;
        do
        {
          memcpy(v8, *(const void **)(v7 + 24 * v6 + 8), *(unsigned __int16 *)(v7 + 24 * v6 + 16));
          uint64_t v7 = *((void *)v5 + 6);
          size_t result = strstr(v8, *(const char **)(v7 + 24 * v6));
          uint64_t v8 = result;
        }
        while (result);
        unsigned int v4 = *((unsigned __int16 *)v5 + 28);
      }
      ++v6;
    }
    while (v6 < v4);
  }
  *a2 = v3;
  return result;
}

void *araParser_setStandardizedWords(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (char *)result + 92;
    do
    {
      if (!*(v7 - 1) && !*v7)
      {
        uint64_t v8 = *((unsigned __int16 *)v7 - 42);
        uint64_t v9 = (void *)(a3 + v8);
        unsigned __int16 v10 = (const void *)(a4 + v8);
        size_t v11 = *((unsigned __int16 *)v7 - 41) - v8;
        size_t result = (void *)strncmp((const char *)(a3 + v8), (const char *)(a4 + v8), v11);
        if (result) {
          size_t result = memcpy(v9, v10, v11);
        }
      }
      v7 += 26;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t araParser_NormalizeSentence(uint64_t a1, const char **a2, _DWORD *a3, _DWORD *a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  unsigned __int16 v10 = *a2;
  unsigned __int16 v41 = 0;
  unsigned __int16 v11 = strlen(v10);
  if (v11)
  {
    unsigned int v12 = 0;
    int v13 = 0;
    unsigned int v14 = v11;
    if (a7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a7;
    }
    uint64_t v36 = v15;
    unsigned __int16 v16 = v11;
    while (1)
    {
      if (a7)
      {
        uint64_t v17 = a7;
        uint64_t v18 = (_DWORD *)(a6 + 92);
        while (*((unsigned __int16 *)v18 - 42) > (unsigned __int16)v13
             || *((unsigned __int16 *)v18 - 41) <= (unsigned __int16)v13)
        {
          v18 += 26;
          if (!--v17) {
            goto LABEL_15;
          }
        }
        if (!*(v18 - 1) && !*(v18 - 20) && !*v18) {
          break;
        }
      }
LABEL_15:
      v13 += Utf8_LengthInBytes((unsigned __int8 *)&v10[(unsigned __int16)v13], 1);
LABEL_16:
      unsigned int v12 = (unsigned __int16)v13;
      unsigned int v14 = v16;
      if ((unsigned __int16)v13 >= v16) {
        goto LABEL_42;
      }
    }
    BOOL v35 = a3;
    int v19 = (unsigned __int8 *)&v10[(unsigned __int16)v13];
    int v20 = isMAPPINGXBI2A(*(void *)(a1 + 24), v19);
    uint64_t v21 = *(void *)(a1 + 24);
    if (v20 == 1)
    {
      if (*(_DWORD *)(v21 + 192) == 1)
      {
        uint64_t result = storeDiacritic(a1, v13, (unsigned __int8 *)&v10[(unsigned __int16)v13], (uint64_t *)(v21 + 200), (_WORD *)(v21 + 208), (_WORD *)(v21 + 210), &v41);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      *int v19 = 65;
      ++v13;
      goto LABEL_41;
    }
    if (!isDiacritic(v21, (unsigned __int8 *)&v10[(unsigned __int16)v13]))
    {
      v13 += Utf8_LengthInBytes(v19, 1);
LABEL_41:
      a3 = v35;
      goto LABEL_16;
    }
    uint64_t v23 = *(void *)(a1 + 24);
    if (*(_DWORD *)(v23 + 192) != 1
      || (uint64_t result = storeDiacritic(a1, v13, v19, (uint64_t *)(v23 + 200), (_WORD *)(v23 + 208), (_WORD *)(v23 + 210), &v41), (result & 0x80000000) == 0))
    {
      uint64_t v24 = v41;
      unsigned int v25 = v12 + v41;
      if (v25 < v14) {
        memmove((void *)&v10[(unsigned __int16)v13], &v10[v25], (int)(v14 - v12));
      }
      v10[(int)v14 - v24] = 0;
      unsigned __int16 v16 = strlen(v10);
      if (a5 >= 2)
      {
        int v26 = a4[3];
        uint64_t v27 = a5 - 1;
        uint64_t v28 = a4 + 11;
        do
        {
          if (v12 < (unsigned __int16)(*v28 - v26)) {
            *v28 -= v24;
          }
          v28 += 8;
          --v27;
        }
        while (v27);
      }
      uint64_t v29 = 0;
      a4[4] -= v24;
      unint64_t v31 = (_WORD *)(a6 + 10);
      uint64_t v30 = v36;
      while (1)
      {
        unsigned int v32 = (unsigned __int16)*(v31 - 1);
        if (v32 > (unsigned __int16)v13) {
          break;
        }
        unsigned int v32 = (unsigned __int16)*v31;
        if (v32 > (unsigned __int16)v13)
        {
          unint64_t v33 = (_WORD *)(a6 + 104 * v29 + 10);
          goto LABEL_37;
        }
LABEL_38:
        ++v29;
        v31 += 52;
        if (!--v30) {
          goto LABEL_41;
        }
      }
      *(v31 - 1) = v32 - v24;
      LOWORD(v32) = *v31;
      unint64_t v33 = v31;
LABEL_37:
      _WORD *v33 = v32 - v24;
      goto LABEL_38;
    }
  }
  else
  {
LABEL_42:
    int v34 = strlen(v10);
    uint64_t result = 0;
    *a3 = v34;
    *a2 = v10;
  }
  return result;
}

BOOL araParser_checkIfIsolatedWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (!a3) {
    return v4 == 1;
  }
  if (a3 != 1)
  {
    unint64_t v7 = a3;
    uint64_t v8 = (unsigned __int16 *)(a2 + 10);
    unint64_t v9 = 1;
    LODWORD(v4) = 0;
    do
    {
      uint64_t v10 = *(v8 - 1);
      if (*v8 - v10 != 1 || !isPunc_0(*(void *)(a1 + 24), (unsigned __int8 *)(a4 + v10))) {
        LODWORD(v4) = v4 + 1;
      }
      if (v9 >= v7) {
        break;
      }
      v8 += 52;
      ++v9;
    }
    while (v4 < 2);
    return v4 == 1;
  }
  return v4;
}

uint64_t fe_ara_parser_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0) {
    return 2356158472;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    return result;
  }
  if (*(_WORD *)(a1 + 56))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    do
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v6 + v4));
      unint64_t v7 = (void *)(*(void *)(a1 + 48) + v4);
      *unint64_t v7 = 0;
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v7[1]);
      uint64_t v6 = *(void *)(a1 + 48);
      *(void *)(v6 + v4 + 8) = 0;
      ++v5;
      v4 += 24;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 56));
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
LABEL_10:
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v6);
    *(void *)(a1 + 48) = 0;
  }
  *(_WORD *)(a1 + 56) = 0;
  posparser_ProcessEnd(*(void **)(a1 + 24));
  uint64_t v8 = *(void *)(a1 + 32);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 64), v8);
}

uint64_t fe_ara_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2356158465;
  }
  uint64_t result = 0;
  *a2 = &IAraParser;
  return result;
}

uint64_t storeDiacritic(uint64_t a1, __int16 a2, unsigned __int8 *a3, uint64_t *a4, _WORD *a5, _WORD *a6, unsigned __int16 *a7)
{
  uint64_t v14 = *a4;
  unsigned __int16 v15 = Utf8_LengthInBytes(a3, 1);
  *a7 = v15;
  unsigned int v16 = (unsigned __int16)*a5;
  unsigned int v17 = (unsigned __int16)*a6;
  if (v16 < v17) {
    goto LABEL_4;
  }
  *a6 = v17 + 50;
  uint64_t v18 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v14, 6 * (unsigned __int16)(v17 + 50) + 6);
  if (v18)
  {
    uint64_t v14 = v18;
    unsigned int v16 = (unsigned __int16)*a5;
    unsigned __int16 v15 = *a7;
LABEL_4:
    strncpy((char *)(v14 + 6 * v16 + 2), (const char *)a3, v15);
    uint64_t result = 0;
    *(unsigned char *)(v14 + 6 * (unsigned __int16)*a5 + *a7 + 2) = 0;
    *(_WORD *)(v14 + 6 * (unsigned __int16)(*a5)++) = a2;
    *a4 = v14;
    return result;
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v19, v20, v21, v22, v24);
  return 2356158474;
}

uint64_t embed_dict_getName(char *a1, char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(v5, 0, sizeof(v5));
  if (!strncmp(a1, "clm", 3uLL))
  {
    if (!strchr(a1, 95)) {
      return 2693799943;
    }
    __strncat_chk();
    __strcat_chk();
  }
  else
  {
    __strcat_chk();
  }
  __strcat_chk();
  strcpy(a2, (const char *)v5);
  return 0;
}

uint64_t embed_vect_getBrokerString(uint64_t a1, char *a2, char *a3, char *a4, unint64_t a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  *(void *)uint64_t v14 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", v14);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v13);
    if ((result & 0x80000000) == 0)
    {
      if (!strncmp(a2, "clm", 3uLL))
      {
        uint64_t result = (uint64_t)strchr(a2, 95);
        if (!result) {
          return result;
        }
        unsigned __int16 v11 = (const char *)result;
        strcpy(a3, "clmnn:");
        unsigned int v12 = strncat(a3, a2, result - (void)a2);
        strcpy(&a3[strlen(v12)], "_embed_vect");
        strcat(a3, v11);
        return 0;
      }
      if (!strcmp(a2, "lid"))
      {
        __strcat_chk();
        uint64_t result = brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 0, *(char **)v14, 0, 0, a3, a5);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        strcpy((char *)v15, "ml2emb");
        __strcat_chk();
        uint64_t result = brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 0, *(char **)v14, 0, 0, a4, a5);
      }
      else
      {
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
        uint64_t result = brokeraux_ComposeBrokerString(a1, (const char *)v15, 1, 1, *(char **)v14, 0, 0, a3, a5);
      }
      if ((result & 0x80000000) == 0) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t nn_word_lkp_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2693799937;
  }
  uint64_t result = 0;
  *a2 = &INnWordLkp;
  return result;
}

uint64_t nn_word_lkp_ObjOpen(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = 0;
  uint64_t v6 = 2693799943;
  if (a6)
  {
    *(void *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a4, a5, &v28);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjOpen", v14, v15, v16, v26);
      unsigned int v17 = (void *)heap_Calloc(*(void **)(v28 + 8), 1, 128);
      if (v17)
      {
        *(void *)a6 = v17;
        *(_DWORD *)(a6 + 8) = 62639;
        *unsigned int v17 = a1;
        v17[1] = a2;
        v17[2] = a4;
        v17[3] = a5;
        v17[4] = v28;
        v17[15] = a3;
        uint64_t v6 = nn_word_lkp_ObjOpenHelper((uint64_t)v17, a6);
        if ((v6 & 0x80000000) == 0) {
          log_OutText(*(void *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjOpen", v22, v23, v24, v27);
        }
      }
      else
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v18, v19, v20, v21, v27);
        return 2693799946;
      }
    }
  }
  return v6;
}

uint64_t nn_word_lkp_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0) {
    return 2693799944;
  }
  if (a1)
  {
    log_OutText(*(void *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lookup_ObjClose", v4, v5, v6, v12);
    nn_word_lkp_ObjCloseHelper(a1);
    uint64_t v10 = a1[4];
    uint64_t v11 = *(void *)(v10 + 48);
    if (v11)
    {
      objc_ReleaseObject(v11, (uint64_t)"FE_DCTLKP");
      uint64_t v10 = a1[4];
    }
    log_OutText(*(void *)(v10 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lookup_ObjClose", v7, v8, v9, v13);
    heap_Free(*(void **)(a1[4] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t nn_word_lkp_ObjReopen(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = (void *)a1;
  uint64_t v13 = (void *)a1;
  uint64_t v14 = a2;
  uint64_t v7 = 2693799944;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0 && v3)
  {
    log_OutText(*(void *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjReOpen", v4, v5, v6, (uint64_t)v13);
    uint64_t v8 = nn_word_lkp_ObjCloseHelper(v3);
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v7 = v8;
    }
    else
    {
      uint64_t v7 = nn_word_lkp_ObjOpenHelper((uint64_t)v3, (uint64_t)&v13);
      if ((v7 & 0x80000000) == 0)
      {
        log_OutText(*(void *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjReOpen", v9, v10, v11, (uint64_t)v13);
        return v7;
      }
      uint64_t v3 = v13;
      int v2 = v14;
    }
    nn_word_lkp_ObjClose(v3, v2);
  }
  return v7;
}

uint64_t nn_word_lkp_getVectorLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0) {
    return 2693799944;
  }
  *a3 = *(_DWORD *)(a1 + 68);
  return result;
}

uint64_t nn_word_lkp_getVectorExtLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0) {
    return 2693799944;
  }
  *a3 = *(_DWORD *)(a1 + 72);
  return result;
}

uint64_t nn_word_lkp_word2fvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  BOOL v35 = 0;
  __int16 v34 = 0;
  uint64_t v7 = 2693799944;
  char v33 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)char __s = 0u;
  long long v37 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    int Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (strstr(__s, "lid") || (*(unsigned __int16 *)__s == 27747 ? (BOOL v24 = __s[2] == 109) : (BOOL v24 = 0), v24)) {
        __int16 v34 = 1;
      }
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, const char ***, __int16 *, char *))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), __s, a3, &v35, &v34, &v33);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      size_t v12 = strlen(__s);
      uint64_t v13 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 32) + 8), v12 + 2);
      if (!v13)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v14, v15, v16, v17, v32);
        return 2693799946;
      }
      uint64_t v18 = (uint64_t)v13;
      uint64_t v19 = strcpy(v13, __s);
      *(_WORD *)(v18 + strlen(v19)) = 95;
      uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, const char ***, __int16 *, char *, void))(*(void *)(a1 + 40) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), v18, a3, &v35, &v34, &v33, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v18);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_6;
      }
    }
    if (!v34)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
    int v25 = atoi(*v35);
    unsigned int v29 = *(_DWORD *)(a1 + 64);
    if (v29 <= 6)
    {
      if (((1 << v29) & 0x12) != 0) {
        return nn_word_lkp_get_vector_u16linear(a1, v25, a3, 0, a4, v26, v27, v28);
      }
      if (((1 << v29) & 0x24) != 0) {
        return nn_word_lkp_get_vector_u8kmeans(a1, v25, a3, 0, a4, v26, v27, v28);
      }
      if (((1 << v29) & 0x48) != 0) {
        return nn_word_lkp_get_vector_binary(a1, v25, a3, 0, a4, v26, v27, v28);
      }
    }
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v26, v27, v28, *(unsigned int *)(a1 + 64));
    return 2693799952;
  }
  return v7;
}

uint64_t nn_word_lkp_word2extfvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  __int16 v34 = 0;
  __int16 v33 = 0;
  uint64_t v7 = 2693799944;
  char v32 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)char __s = 0u;
  long long v36 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    int Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, const char ***, __int16 *, char *))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), __s, a3, &v34, &v33, &v32);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      size_t v12 = strlen(__s);
      uint64_t v13 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 32) + 8), v12 + 2);
      if (!v13)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v14, v15, v16, v17, v31);
        return 2693799946;
      }
      uint64_t v18 = (uint64_t)v13;
      uint64_t v19 = strcpy(v13, __s);
      *(_WORD *)(v18 + strlen(v19)) = 95;
      uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, const char ***, __int16 *, char *, void))(*(void *)(a1 + 40) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), v18, a3, &v34, &v33, &v32, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v18);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_6;
      }
    }
    if (v33)
    {
      int v24 = atoi(*v34);
      int v28 = *(_DWORD *)(a1 + 64);
      if (v28 == 6) {
        return nn_word_lkp_get_vector_binary(a1, v24, a3, 1, a4, v25, v26, v27);
      }
      if (v28 == 5) {
        return nn_word_lkp_get_vector_u8kmeans(a1, v24, a3, 1, a4, v25, v26, v27);
      }
      if (v28 != 4)
      {
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v25, v26, v27, *(unsigned int *)(a1 + 64));
        return 2693799952;
      }
      return nn_word_lkp_get_vector_u16linear(a1, v24, a3, 1, a4, v25, v26, v27);
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_word2id(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned int v29 = 0;
  __int16 v28 = 0;
  uint64_t v7 = 2693799944;
  char v27 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)char __s = 0u;
  long long v31 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    int Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (strstr(__s, "lid") || (*(unsigned __int16 *)__s == 27747 ? (BOOL v24 = __s[2] == 109) : (BOOL v24 = 0), v24)) {
        __int16 v28 = 1;
      }
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, const char ***, __int16 *, char *))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), __s, a3, &v29, &v28, &v27);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      size_t v12 = strlen(__s);
      uint64_t v13 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 32) + 8), v12 + 2);
      if (!v13)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v14, v15, v16, v17, v26);
        return 2693799946;
      }
      uint64_t v18 = (uint64_t)v13;
      uint64_t v19 = strcpy(v13, __s);
      *(_WORD *)(v18 + strlen(v19)) = 95;
      uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, const char ***, __int16 *, char *, void))(*(void *)(a1 + 40) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), v18, a3, &v29, &v28, &v27, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v18);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_6;
      }
    }
    if (v28)
    {
      uint64_t v7 = 0;
      *a4 = (float)atoi(*v29);
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_ObjOpenHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  unint64_t v57 = 0;
  memset(v63, 0, sizeof(v63));
  memset(v62, 0, sizeof(v62));
  uint64_t BrokerString = embed_vect_getBrokerString(*(void *)(a1 + 32), *(char **)(a1 + 120), (char *)v63, (char *)v62, 0x100uLL);
  if ((BrokerString & 0x80000000) != 0)
  {
    uint64_t v9 = BrokerString;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
    uint64_t v11 = v9 & 0x1FFF;
    size_t v12 = "Failed to generate the embedding vector brokerstring. Returns %u";
LABEL_32:
    log_OutText(v10, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v12, v5, v6, v7, v11);
    goto LABEL_33;
  }
  if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), 2, (const char *)v62, "CRPH", 5, (uint64_t *)&v57) & 0x80000000) != 0)
  {
    uint64_t v13 = ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), 0, (const char *)v63, "CRPH", 5, (uint64_t *)&v57);
    uint64_t v17 = *(void *)(a1 + 32);
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v9 = v13;
      log_OutText(*(void *)(v17 + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to open the word vector riff file (%s). Returns %u", v14, v15, v16, (uint64_t)v63);
      goto LABEL_33;
    }
    uint64_t v8 = *(void *)(v17 + 24);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 24);
  }
  uint64_t v18 = brk_DataOpen(v8);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v9 = v18;
    goto LABEL_33;
  }
  uint64_t v23 = v57;
  unsigned __int8 v61 = 0;
  unsigned int v59 = 0;
  int v60 = 0;
  __int16 __src = 0;
  uint64_t v24 = ssftriff_reader_OpenChunk((uint64_t)v57, &v60, &v59, &__src, v19, v20, v21, v22);
  if ((v24 & 0x80000000) != 0)
  {
LABEL_31:
    uint64_t v9 = v24;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
    uint64_t v11 = v9 & 0x1FFF;
    size_t v12 = "Failed to open riff chunk. Returns %u";
    goto LABEL_32;
  }
  if (!(v60 ^ 0x44414548 | v61))
  {
    uint64_t v11 = v59;
    if (v59 > 0xF)
    {
      unsigned int v26 = (char *)__src;
      uint64_t v27 = *(void *)__src;
      *(void *)(a1 + 64) = *(void *)__src;
      if ((v27 - 4) > 2)
      {
        int v28 = 0;
        uint64_t v29 = 2;
      }
      else
      {
        int v28 = *((_DWORD *)v26 + 2);
        uint64_t v29 = 3;
      }
      *(_DWORD *)(a1 + 72) = v28;
      *(_DWORD *)(a1 + 84) = *(_DWORD *)&v26[4 * v29];
      switch((int)v27)
      {
        case 1:
          int32x2_t v31 = *(int32x2_t *)(v26 + 12);
          goto LABEL_26;
        case 2:
        case 3:
          int v30 = *((_DWORD *)v26 + 3);
          goto LABEL_22;
        case 4:
          int32x2_t v31 = *(int32x2_t *)(v26 + 16);
LABEL_26:
          *(float32x2_t *)(a1 + 76) = vcvt_f32_s32(v31);
          *(_DWORD *)(a1 + 88) = 0;
          goto LABEL_27;
        case 5:
        case 6:
          int v30 = *((_DWORD *)v26 + 4);
LABEL_22:
          *(_DWORD *)(a1 + 88) = v30;
          *(_DWORD *)(a1 + 76) = 0;
          *(_DWORD *)(a1 + 80) = 0;
LABEL_27:
          uint64_t v32 = ssftriff_reader_CloseChunk((uint64_t)v23);
          if ((v32 & 0x80000000) != 0) {
            goto LABEL_53;
          }
          long long v34 = v57;
          unsigned __int8 v61 = 0;
          unsigned int v59 = 0;
          int v60 = 0;
          __int16 __src = 0;
          uint64_t v24 = ssftriff_reader_OpenChunk((uint64_t)v57, &v60, &v59, &__src, v33, v5, v6, v7);
          if ((v24 & 0x80000000) != 0) {
            goto LABEL_31;
          }
          if (v60 ^ 0x54434556 | v61)
          {
            uint64_t v9 = 2693799953;
            uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 32);
            goto LABEL_11;
          }
          unsigned int v42 = *(_DWORD *)(a1 + 64);
          if (v42 <= 6 && ((1 << v42) & 0x6C) != 0)
          {
            size_t v43 = (4 * *(_DWORD *)(a1 + 88));
            long long v44 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), 1, v43);
            *(void *)(a1 + 104) = v44;
            if (!v44)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v45, v46, v47, v48, v56);
              uint64_t v9 = 2693799946;
              goto LABEL_33;
            }
            memcpy(v44, __src, v43);
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v34) + v43;
            unsigned int v49 = v59 - v43;
          }
          else
          {
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v34);
            unsigned int v49 = v59;
          }
          *(_DWORD *)(a1 + 116) = v49;
          uint64_t v32 = ssftriff_reader_CloseChunk((uint64_t)v34);
          if ((v32 & 0x80000000) != 0)
          {
LABEL_53:
            uint64_t v9 = v32;
            uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
            uint64_t v11 = v9 & 0x1FFF;
            size_t v12 = "Failed to close riff chunk. Returns %u";
          }
          else
          {
            uint64_t v54 = ssftriff_reader_ObjClose(v57, v50, v51, v52, v53, v5, v6, v7);
            unint64_t v57 = 0;
            if ((v54 & 0x80000000) != 0)
            {
              uint64_t v9 = v54;
              uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
              uint64_t v11 = v9 & 0x1FFF;
              size_t v12 = "Failed to close the riff file; ssftriff_reader_ObjClose returns %u";
            }
            else
            {
              uint64_t Interface = fe_dctlkp_GetInterface(1u, (void *)(a1 + 40));
              if ((Interface & 0x80000000) != 0)
              {
                uint64_t v9 = Interface;
                uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
                uint64_t v11 = v9 & 0x1FFF;
                size_t v12 = "fe_dctlkp_GetInterface returns %u";
              }
              else
              {
                uint64_t v9 = (*(uint64_t (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 40) + 32))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a1 + 48);
                if ((v9 & 0x80000000) == 0) {
                  goto LABEL_33;
                }
                uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
                uint64_t v11 = v9 & 0x1FFF;
                size_t v12 = "pfObjOpen returns %u";
              }
            }
          }
          break;
        default:
          log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v5, v6, v7, v27);
          uint64_t v9 = 2693799952;
          goto LABEL_33;
      }
    }
    else
    {
      uint64_t v9 = 2693799953;
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
      size_t v12 = "Found riff chunk of size %u. Expected at least %u";
    }
    goto LABEL_32;
  }
  uint64_t v9 = 2693799953;
  uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 32);
LABEL_11:
  log_OutText(v25, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Found riff chunk (%s). Expected %s", v5, v6, v7, (uint64_t)&v60);
LABEL_33:
  if (v57)
  {
    unsigned int v35 = ssftriff_reader_CloseChunk((uint64_t)v57);
    if ((v35 & 0x80000000) != 0)
    {
      unsigned int v39 = v35;
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; ssftriff_reader_CloseChunk returns %u",
        v36,
        v37,
        v38,
        v35 & 0x1FFF);
      if ((int)v9 >= 0) {
        uint64_t v9 = v39;
      }
      else {
        uint64_t v9 = v9;
      }
      goto LABEL_40;
    }
  }
  if ((v9 & 0x80000000) != 0)
  {
LABEL_40:
    nn_word_lkp_ObjClose(*(void **)a2, *(void *)(a2 + 8));
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = safeh_GetNullHandle();
    *(void *)(a2 + 8) = v40;
  }
  return v9;
}

uint64_t nn_word_lkp_ObjCloseHelper(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2 && (uint64_t v3 = (*(uint64_t (**)(void, void))(v2 + 40))(a1[6], a1[7]), (v3 & 0x80000000) != 0))
  {
    uint64_t v7 = v3;
    log_OutText(*(void *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close dct. pIDct->pfObjClose returns %u", v4, v5, v6, v3 & 0x1FFF);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[13];
  if (v8)
  {
    heap_Free(*(void **)(a1[4] + 8), v8);
    a1[13] = 0;
  }
  uint64_t v9 = a1[12];
  if (v9)
  {
    unsigned int v10 = brk_DataClose(*(void *)(a1[4] + 24), v9);
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v14 = v10;
      log_OutText(*(void *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; brk_DataClose returns %u",
        v11,
        v12,
        v13,
        v10 & 0x1FFF);
      if (v7) {
        return v7;
      }
      else {
        return v14;
      }
    }
  }
  return v7;
}

uint64_t nn_word_lkp_get_vector_u16linear(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72) + v9;
  unsigned int v11 = *(_DWORD *)(a1 + 116) - v10;
  uint64_t v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v9;
    }
    uint64_t v15 = brk_DataMap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, (2 * v14), (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v12 = v15;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      unsigned int v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      uint64_t v20 = v28;
      if (v14)
      {
        unint64_t v21 = 0;
        unint64_t v22 = *(unsigned int *)(a1 + 68);
        do
        {
          LOWORD(v19) = *(_WORD *)(v20 + 2 * v21);
          float v19 = (float)LODWORD(v19);
          if (v21 < v22) {
            float v19 = *(float *)(a1 + 76)
          }
                + (float)((float)((float)(*(float *)(a1 + 80) - *(float *)(a1 + 76)) * v19) * 0.000030518);
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      uint64_t v23 = brk_DataUnmap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v12 = v23;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      unsigned int v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_binary(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72) + v9;
  unsigned int v11 = (v10 + 7) >> 3;
  unsigned int v12 = *(_DWORD *)(a1 + 116) - v11;
  uint64_t v35 = 0;
  if (v11 * a2 <= v12)
  {
    if (a4) {
      unsigned int v15 = v10;
    }
    else {
      unsigned int v15 = v9;
    }
    if (a4) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = (v9 + 7) >> 3;
    }
    uint64_t v17 = brk_DataMap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), *(_DWORD *)(a1 + 112) + v11 * a2, v16, (uint64_t)&v35);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t v13 = v17;
      uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v32 = v13 & 0x1FFF;
      uint64_t v33 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      uint64_t v21 = v35;
      if (v16)
      {
        unint64_t v22 = 0;
        unint64_t v23 = (*(_DWORD *)(a1 + 68) + 7) >> 3;
        uint64_t v24 = (float *)(a5 + 16);
        do
        {
          unsigned int v25 = *(unsigned __int8 *)(v21 + v22);
          if (v15 >= 8) {
            int v26 = 8;
          }
          else {
            int v26 = v15;
          }
          unsigned int v27 = v25 >> 7;
          if (v22 >= v23)
          {
            switch(v26)
            {
              case 1:
                goto LABEL_40;
              case 2:
                goto LABEL_39;
              case 3:
                goto LABEL_38;
              case 4:
                goto LABEL_37;
              case 5:
                goto LABEL_36;
              case 6:
                goto LABEL_35;
              case 7:
                goto LABEL_34;
              default:
                v24[3] = (float)(v25 & 1);
LABEL_34:
                int v24[2] = (float)((v25 >> 1) & 1);
LABEL_35:
                v24[1] = (float)((v25 >> 2) & 1);
LABEL_36:
                *uint64_t v24 = (float)((v25 >> 3) & 1);
LABEL_37:
                *(v24 - 1) = (float)((v25 >> 4) & 1);
LABEL_38:
                *(v24 - 2) = (float)((v25 >> 5) & 1);
LABEL_39:
                *(v24 - 3) = (float)((v25 >> 6) & 1);
LABEL_40:
                float v29 = (float)v27;
                break;
            }
          }
          else
          {
            switch(v26)
            {
              case 1:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_32;
              case 2:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_31;
              case 3:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_30;
              case 4:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_29;
              case 5:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_28;
              case 6:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_27;
              case 7:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_26;
              default:
                uint64_t v28 = *(void *)(a1 + 104);
                v24[3] = *(float *)(v28 + 4 * (v25 & 1));
LABEL_26:
                int v24[2] = *(float *)(v28 + 4 * ((v25 >> 1) & 1));
LABEL_27:
                v24[1] = *(float *)(v28 + 4 * ((v25 >> 2) & 1));
LABEL_28:
                *uint64_t v24 = *(float *)(v28 + 4 * ((v25 >> 3) & 1));
LABEL_29:
                *(v24 - 1) = *(float *)(v28 + 4 * ((v25 >> 4) & 1));
LABEL_30:
                *(v24 - 2) = *(float *)(v28 + 4 * ((v25 >> 5) & 1));
LABEL_31:
                *(v24 - 3) = *(float *)(v28 + 4 * ((v25 >> 6) & 1));
LABEL_32:
                float v29 = *(float *)(v28 + 4 * v27);
                break;
            }
          }
          *(v24 - 4) = v29;
          ++v22;
          v24 += 8;
          v15 -= 8;
        }
        while (v16 != v22);
      }
      uint64_t v30 = brk_DataUnmap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), v21);
      if ((v30 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v13 = v30;
      uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v32 = v13 & 0x1FFF;
      uint64_t v33 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v31, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v33, v18, v19, v20, v32);
    return v13;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_u8kmeans(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72) + v9;
  unsigned int v11 = *(_DWORD *)(a1 + 116) - v10;
  uint64_t v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v9;
    }
    uint64_t v15 = brk_DataMap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, v14, (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v12 = v15;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      int v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      uint64_t v20 = v28;
      if (v14)
      {
        unint64_t v21 = 0;
        unint64_t v22 = *(unsigned int *)(a1 + 68);
        do
        {
          if (v21 >= v22)
          {
            LOBYTE(v19) = *(unsigned char *)(v20 + v21);
            float v19 = (float)LODWORD(v19);
          }
          else
          {
            float v19 = *(float *)(*(void *)(a1 + 104) + 4 * *(unsigned __int8 *)(v20 + v21));
          }
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      uint64_t v23 = brk_DataUnmap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v12 = v23;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      int v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t tnplus_word_copyParts(char **a1, void *a2, void *a3)
{
  if (!a1) {
    return 1;
  }
  if (!a3) {
    return 1;
  }
  uint64_t result = hlp_DuplicateString(a2, *a1, a3);
  if (result)
  {
    uint64_t result = hlp_DuplicateString(a2, a1[1], a3 + 1);
    if (result)
    {
      uint64_t result = hlp_DuplicateString(a2, a1[2], a3 + 2);
      if (result)
      {
        uint64_t result = hlp_DuplicateString(a2, a1[3], a3 + 3);
        if (result)
        {
          uint64_t result = hlp_DuplicateString(a2, a1[4], a3 + 4);
          if (result)
          {
            uint64_t result = hlp_DuplicateString(a2, a1[6], a3 + 6);
            if (result)
            {
              uint64_t result = hlp_DuplicateString(a2, a1[7], a3 + 7);
              if (result)
              {
                uint64_t result = hlp_DuplicateString(a2, a1[9], a3 + 9);
                if (result)
                {
                  uint64_t result = hlp_DuplicateString(a2, a1[10], a3 + 10);
                  if (result)
                  {
                    uint64_t result = hlp_DuplicateString(a2, a1[11], a3 + 11);
                    if (result)
                    {
                      uint64_t result = hlp_DuplicateString(a2, a1[12], a3 + 12);
                      if (result)
                      {
                        uint64_t result = hlp_DuplicateString(a2, a1[13], a3 + 13);
                        if (result)
                        {
                          uint64_t result = hlp_DuplicateString(a2, a1[15], a3 + 15);
                          if (result) {
                            return 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_DuplicateString(void *a1, char *__s, void *a3)
{
  if (!a3) {
    return 0;
  }
  if (__s)
  {
    size_t v6 = strlen(__s);
    uint64_t result = heap_Calloc(a1, v6 + 1, 1);
    *a3 = result;
    if (!result) {
      return result;
    }
    strcpy((char *)result, __s);
  }
  else
  {
    *a3 = 0;
  }
  return 1;
}

uint64_t *tnplus_word_freeParts(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*result)
    {
      uint64_t result = heap_Free(a2, *result);
      *uint64_t v3 = 0;
    }
    uint64_t v4 = v3[1];
    if (v4)
    {
      uint64_t result = heap_Free(a2, v4);
      v3[1] = 0;
    }
    uint64_t v5 = v3[2];
    if (v5)
    {
      uint64_t result = heap_Free(a2, v5);
      v3[2] = 0;
    }
    uint64_t v6 = v3[3];
    if (v6)
    {
      uint64_t result = heap_Free(a2, v6);
      v3[3] = 0;
    }
    uint64_t v7 = v3[4];
    if (v7)
    {
      uint64_t result = heap_Free(a2, v7);
      v3[4] = 0;
    }
    uint64_t v8 = v3[6];
    if (v8)
    {
      uint64_t result = heap_Free(a2, v8);
      v3[6] = 0;
    }
    uint64_t v9 = v3[7];
    if (v9)
    {
      uint64_t result = heap_Free(a2, v9);
      v3[7] = 0;
    }
    uint64_t v10 = v3[9];
    if (v10)
    {
      uint64_t result = heap_Free(a2, v10);
      v3[9] = 0;
    }
    uint64_t v11 = v3[10];
    if (v11)
    {
      uint64_t result = heap_Free(a2, v11);
      v3[10] = 0;
    }
    uint64_t v12 = v3[11];
    if (v12)
    {
      uint64_t result = heap_Free(a2, v12);
      v3[11] = 0;
    }
    uint64_t v13 = v3[12];
    if (v13)
    {
      uint64_t result = heap_Free(a2, v13);
      v3[12] = 0;
    }
    uint64_t v14 = v3[13];
    if (v14)
    {
      uint64_t result = heap_Free(a2, v14);
      v3[13] = 0;
    }
    uint64_t v15 = v3[15];
    if (v15)
    {
      uint64_t result = heap_Free(a2, v15);
      v3[15] = 0;
    }
  }
  return result;
}

uint64_t p_xcoder_ObjOpen(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v10);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v3 = (_DWORD *)heap_Alloc(*(void *)(v10 + 8), 4);
    *(void *)(a1 + 280) = v3;
    if (v3)
    {
      *uint64_t v3 = 0;
    }
    else
    {
      log_OutPublic(*(void *)(v10 + 32), (uint64_t)"XCODER", 15000, 0, v4, v5, v6, v7, v9);
      return 2282758154;
    }
  }
  return inited;
}

uint64_t p_xcoder_ObjClose(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4);
  if ((inited & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), *(void *)(a1 + 280));
    *(void *)(a1 + 280) = 0;
  }
  return inited;
}

uint64_t p_xcoder_OpenXCoder(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v14);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 144))
  {
    **(_DWORD **)(a1 + 280) = 0;
    if (LH_stricmp((char *)(a1 + 16), "UTF-16"))
    {
      uint64_t v11 = 2282758145;
      log_OutPublic(*(void *)(v14 + 32), (uint64_t)"XCODER", 15004, "%s%s%s%s", v7, v8, v9, v10, "charsetIn");
    }
    else
    {
      uint64_t v11 = 0;
      **(_DWORD **)(a1 + 280) = 2;
    }
  }
  else
  {
    log_OutPublic(*(void *)(v14 + 32), (uint64_t)"XCODER", 15002, 0, v3, v4, v5, v6, v13);
    uint64_t v11 = 2282758151;
  }
  *(_DWORD *)(a1 + 272) = v11;
  return v11;
}

uint64_t p_xcoder_Convert(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5, unsigned int a6, unsigned int *a7, _DWORD *a8)
{
  uint64_t v28 = 0;
  *a4 = 0;
  *a7 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v28);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v21 = 2282758158;
  if (**(_DWORD **)(a1 + 280) == 2)
  {
    if (a3)
    {
      uint64_t v21 = 2282758405;
      goto LABEL_10;
    }
    uint64_t v21 = utf8_Utf16ToUtf8(a2, a3 >> 1, a4, a5, a6, a7, a8);
    int v22 = v21 & 0x1FFF;
    if ((v21 & 0x1FFF) != 0 && v22 != 7)
    {
      if (v22 == 9)
      {
        uint64_t v23 = *(void *)(v28 + 32);
        uint64_t v24 = 15015;
        uint64_t v25 = 0;
LABEL_11:
        log_OutPublic(v23, (uint64_t)"XCODER", v24, v25, v17, v18, v19, v20, v27);
        return v21;
      }
LABEL_10:
      uint64_t v23 = *(void *)(v28 + 32);
      unsigned int v27 = "input";
      uint64_t v25 = "%s%s%s%s%s%x";
      uint64_t v24 = 15016;
      goto LABEL_11;
    }
  }
  return v21;
}

uint64_t xcoder_mrksync_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2282758145;
  }
  uint64_t result = 0;
  *a2 = &IXCoderMrkSync;
  return result;
}

uint64_t xcoder_mrksync_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2282758151;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        uint64_t v12 = (void *)heap_Calloc(*(void **)(v24 + 8), 1, 72);
        if (v12)
        {
          uint64_t v17 = (uint64_t)v12;
          void *v12 = a3;
          v12[1] = a4;
          uint64_t Object = objc_GetObject(*(void *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23);
          if ((Object & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
            heap_Free(*(void **)(v24 + 8), v17);
          }
          else
          {
            *(void *)(v17 + 16) = *(void *)(v23 + 8);
            *(void *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 854;
          }
        }
        else
        {
          log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return Object;
}

uint64_t xcoder_mrksync_ObjClose(void *a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v6, &v5);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = objc_ReleaseObject(*(void *)(v6 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v3 & 0x80000000) == 0) {
    heap_Free(*(void **)(v6 + 8), v5);
  }
  return v3;
}

uint64_t xcoder_mrksync_ProcessStart(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v17, &v16);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v7 = v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(v16 + 16) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
          0,
          0,
          v16 + 24) & 0x80000000) != 0)
    return 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
         0,
         0,
         v7 + 40);
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v13 = v8;
    uint64_t v14 = 15026;
    goto LABEL_9;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
          0,
          1,
          v7 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v14 = 15027;
LABEL_9:
    log_OutPublic(*(void *)(v17 + 32), (uint64_t)"XCODER", v14, "%s%s", v9, v10, v11, v12, "contentType");
  }
  return v13;
}

uint64_t xcoder_mrksync_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v56 = 0;
  size_t __n = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v55, &v56);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  *a5 = 1;
  uint64_t v7 = v56;
  if (!v56[7]) {
    return 0;
  }
  uint64_t v12 = (*(uint64_t (**)(void, void, size_t *, char *))(v56[2] + 144))(v56[5], v56[6], &__n, (char *)&__n + 4);
  if ((v12 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(v55 + 32), (uint64_t)"XCODER", 15028, "%s%s%s%x", v8, v9, v10, v11, "stream");
    return v12;
  }
  if (__n)
  {
    uint64_t v13 = (*(uint64_t (**)(void, void, char **, size_t *))(v7[2] + 88))(v7[5], v7[6], &v53, &__n);
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v12 = v13;
      uint64_t v35 = *(void *)(v55 + 32);
    }
    else
    {
      uint64_t v18 = (*(uint64_t (**)(void, void, char *))(v7[2] + 136))(v7[3], v7[4], (char *)&v51 + 4);
      if ((v18 & 0x80000000) != 0)
      {
        uint64_t v12 = v18;
        log_OutPublic(*(void *)(v55 + 32), (uint64_t)"XCODER", 15029, "%s%s%s%x", v19, v20, v21, v22, "stream");
        return v12;
      }
      uint64_t v23 = (*(uint64_t (**)(void, void, int **, uint64_t *))(v7[2] + 88))(v7[3], v7[4], &v50, &v51);
      if ((v23 & 0x80000000) == 0)
      {
        uint64_t v12 = (*(uint64_t (**)(void, void, char **, void))(v7[2] + 112))(v7[7], v7[8], &v52, __n);
        if ((v12 & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(v55 + 32), (uint64_t)"XCODER", 15031, "%s%s%s%x", v24, v25, v26, v27, "stream");
          (*(void (**)(void, void, void))(v7[2] + 96))(v7[5], v7[6], 0);
        }
        else
        {
          memcpy(v52, v53, __n);
          unsigned int v30 = v51 >> 2;
          LODWORD(v51) = v51 >> 2;
          HIDWORD(v51) >>= 2;
          unsigned int v31 = __n;
          if (__n >= 0x20)
          {
            uint64_t v37 = 0;
            unint64_t v38 = 0;
            unsigned int v32 = 0;
            unsigned int v39 = v53;
            do
            {
              unsigned int v40 = *(_DWORD *)&v39[v37];
              BOOL v41 = v40 > 0x1D || ((1 << v40) & 0x215F0112) == 0;
              if (!v41 || v40 == 0x4000)
              {
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, *(unsigned int *)&v39[v37 + 4], (int *)&v52[v37 + 4], v28, v29);
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, (*(_DWORD *)&v53[v37 + 8] + *(_DWORD *)&v53[v37 + 4]), (int *)&v52[v37 + 8], v42, v43);
                LODWORD(v12) = 0;
                *(_DWORD *)&v52[v37 + 8] -= *(_DWORD *)&v52[v37 + 4];
                unsigned int v39 = v53;
                if (*(_DWORD *)&v53[v37 + 4] > v32) {
                  unsigned int v32 = *(_DWORD *)&v53[v37 + 4];
                }
                unsigned int v31 = __n;
              }
              ++v38;
              v37 += 32;
            }
            while (v38 < v31 >> 5);
            unsigned int v30 = v51;
          }
          else
          {
            unsigned int v32 = 0;
          }
          if (v32 >= v30) {
            unsigned int v32 = v30 - 1;
          }
          int v44 = (*(uint64_t (**)(void, void))(v7[2] + 120))(v7[7], v7[8]);
          if (v44 < 0) {
            LODWORD(v12) = v44;
          }
          int v45 = (*(uint64_t (**)(void, void, void))(v7[2] + 96))(v7[5], v7[6], __n);
          if (v45 < 0 && (int)v12 > -1) {
            LODWORD(v12) = v45;
          }
          if (v32 <= HIDWORD(v51)) {
            uint64_t v47 = 0;
          }
          else {
            uint64_t v47 = 4 * (v32 - HIDWORD(v51));
          }
          int v48 = (*(uint64_t (**)(void, void, uint64_t))(v7[2] + 96))(v7[3], v7[4], v47);
          if (v48 >= 0 || (int)v12 <= -1) {
            return v12;
          }
          else {
            return v48;
          }
        }
        return v12;
      }
      uint64_t v12 = v23;
      uint64_t v35 = *(void *)(v55 + 32);
    }
    log_OutPublic(v35, (uint64_t)"XCODER", 15030, "%s%s%s%x", v14, v15, v16, v17, "stream");
    return v12;
  }
  if (HIDWORD(__n))
  {
    uint64_t v33 = v7[7];
    if (v33)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(v7[2] + 72))(v33, v7[8]);
      v7[7] = safeh_GetNullHandle();
      v7[8] = v34;
    }
  }
  else
  {
    *a5 = 1;
  }
  return v12;
}

uint64_t xcoder_mrksync_ProcessEnd(void *a1, int a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v12, &v11);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v11;
    uint64_t v4 = v11[3];
    if (v4)
    {
      (*(void (**)(uint64_t, void))(v11[2] + 72))(v4, v11[4]);
      v3[3] = safeh_GetNullHandle();
      v3[4] = v5;
    }
    uint64_t v6 = v3[5];
    if (v6)
    {
      (*(void (**)(uint64_t, void))(v3[2] + 72))(v6, v3[6]);
      v3[5] = safeh_GetNullHandle();
      v3[6] = v7;
    }
    uint64_t v8 = v3[7];
    if (v8)
    {
      (*(void (**)(uint64_t, void))(v3[2] + 72))(v8, v3[8]);
      v3[7] = safeh_GetNullHandle();
      v3[8] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_mrksync_BeginFunction(void *a1, int a2, void *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck((uint64_t)a1, a2, 854, 72);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      return 2282758152;
    }
    else {
      return result;
    }
  }
  else
  {
    *a4 = a1;
    uint64_t v8 = (_WORD *)*a1;
    uint64_t v9 = a1[1];
    return InitRsrcFunction(v8, v9, a3);
  }
}

uint64_t p_xcoder_GetRefPosition(uint64_t result, unsigned int a2, int *a3, int a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  if (a5 >= a2)
  {
    if (a4 + a2 >= a5)
    {
      if (a4 + a2 == a5) {
        int v8 = a3[a4 - 1] + 2;
      }
      else {
        int v8 = a3[a5 - a2];
      }
      *a6 = v8;
    }
    else
    {
      *a6 = a3[a4 - 1] + 2;
      return log_OutText(*(void *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is beyond the end of the sync object, charPos=%u, maxSyncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
    }
  }
  else
  {
    *a6 = *a3;
    return log_OutText(*(void *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is before the synch object, charPos=%u, syncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
  }
  return result;
}

uint64_t xcoder_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2282758145;
  }
  uint64_t result = 0;
  *a2 = &IXCoder;
  return result;
}

uint64_t xcoder_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 2282758151;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        uint64_t v12 = heap_Calloc(*(void **)(v24 + 8), 1, 344);
        if (v12)
        {
          uint64_t v17 = v12;
          *(void *)uint64_t v12 = a3;
          *(void *)(v12 + 8) = a4;
          *(_DWORD *)(v12 + 272) = -2012209145;
          strcpy((char *)(v12 + 144), "UTF-8");
          if ((objc_GetObject(*(void *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23) & 0x80000000) != 0) {
            log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
          }
          else {
            *(void *)(v17 + 288) = *(void *)(v23 + 8);
          }
          uint64_t v8 = p_xcoder_ObjOpen(v17);
          if ((v8 & 0x80000000) != 0)
          {
            heap_Free(*(void **)(v24 + 8), v17);
            if (v23) {
              objc_ReleaseObject(*(void *)(v24 + 48), (uint64_t)"SYNTHSTREAM");
            }
          }
          else
          {
            *(void *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 852;
          }
        }
        else
        {
          log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return v8;
}

uint64_t xcoder_ObjClose(void *a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v2 = p_xcoder_BeginFunction(a1, a2, &v7, &v6);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = v6;
  uint64_t v2 = p_xcoder_ObjClose(v6);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v4 = objc_ReleaseObject(*(void *)(v7 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v4 & 0x80000000) == 0) {
    heap_Free(*(void **)(v7 + 8), v3);
  }
  return v4;
}

uint64_t xcoder_ProcessStart(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  __s1 = 0;
  uint64_t v6 = p_xcoder_BeginFunction(a1, a2, &v30, &v29);
  if ((v6 & 0x80000000) == 0)
  {
    v31[0] = 0;
    if ((paramc_ParamGetStr(*(void *)(v30 + 40), (uint64_t)"inputmimetype", &__s1) & 0x80000000) == 0
      && (uint64_t v7 = __s1) != 0
      && *__s1)
    {
      if (!strcmp(__s1, "text/plain"))
      {
        if ((paramc_ParamGetStr(*(void *)(v30 + 40), (uint64_t)"nativetypeofchar", &v27) & 0x80000000) != 0
          || !v27
          || !*v27)
        {
          uint64_t v27 = "UTF-8";
        }
        __strcpy_chk();
      }
      else
      {
        if (strncmp(v7, "text/plain;", 0xBuLL)) {
          return 0;
        }
        uint64_t v8 = strstr(v7, ";charset=");
        if (!v8) {
          return 0;
        }
        int v9 = v8[9];
        if (v8[9])
        {
          unint64_t v10 = 0;
          while (v10 <= 0x7E && v9 != 59)
          {
            v31[v10] = v9;
            unint64_t v11 = v10 + 1;
            int v9 = v8[v10++ + 10];
            if (!v9) {
              goto LABEL_43;
            }
          }
          unint64_t v11 = v10;
        }
        else
        {
          unint64_t v11 = 0;
        }
LABEL_43:
        v31[v11] = 0;
      }
    }
    else
    {
      if ((paramc_ParamGetStr(*(void *)(v30 + 40), (uint64_t)"nativetypeofchar", &v27) & 0x80000000) != 0
        || !v27
        || !*v27)
      {
        uint64_t v27 = "UTF-8";
      }
      __strcpy_chk();
      strcpy(v32, "text/plain;charset=");
      __strcat_chk();
      __s1 = v32;
    }
    if (LH_stricmp(v31, "UTF-8"))
    {
      uint64_t v12 = (kaldi::nnet1::Component *)v29;
      if (*(_DWORD *)(v29 + 272) || LH_stricmp(v31, (char *)(v29 + 16)))
      {
        __strcpy_chk();
        uint64_t v13 = p_xcoder_OpenXCoder((uint64_t)v12);
        if ((v13 & 0x1FFF) == 1) {
          return 0;
        }
        uint64_t v6 = v13;
        if ((v13 & 0x80000000) != 0) {
          return v6;
        }
      }
      else
      {
        uint64_t IsUpdatable = kaldi::nnet1::Component::IsUpdatable(v12);
        if ((IsUpdatable & 0x80000000) != 0) {
          return IsUpdatable;
        }
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, void, void *))(*((void *)v12 + 36) + 64))(a3, a4, 129, __s1, 0, 0, (void *)v12 + 37);
      if ((v15 & 0x80000000) != 0)
      {
        uint64_t v6 = v15;
        log_OutPublic(*(void *)(v30 + 32), (uint64_t)"XCODER", 15026, "%s%s", v16, v17, v18, v19, "contentType");
        return v6;
      }
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, void *))(*((void *)v12 + 36) + 64))(a3, a4, 129, "text/plain;charset=utf-8",
              0,
              1,
              (void *)v12 + 39);
      if ((v20 & 0x80000000) != 0)
      {
        uint64_t v6 = v20;
        uint64_t v25 = *(void *)(v30 + 32);
      }
      else
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, void *))(*((void *)v12 + 36) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
               0,
               1,
               (void *)v12 + 41);
        if ((v6 & 0x80000000) == 0) {
          return v6;
        }
        uint64_t v25 = *(void *)(v30 + 32);
      }
      log_OutPublic(v25, (uint64_t)"XCODER", 15027, "%s%s", v21, v22, v23, v24, "contentType");
    }
  }
  return v6;
}

uint64_t xcoder_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  unsigned int v54 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  __b = 0;
  uint64_t v6 = p_xcoder_BeginFunction(a1, a2, &v57, &v56);
  if ((v6 & 0x80000000) == 0)
  {
    *a5 = 1;
    uint64_t v7 = v56;
    if (v56[39])
    {
      uint64_t v6 = (*(uint64_t (**)(void, void, unsigned int *, char *))(v56[36] + 144))(v56[37], v56[38], &v54, (char *)&v55 + 4);
      if ((v6 & 0x80000000) != 0)
      {
        log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15028, "%s%s%s%x", v8, v9, v10, v11, "stream");
      }
      else if (v54)
      {
        uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t *))(v7[36] + 136))(v7[37], v7[38], &v55);
        if ((v12 & 0x80000000) != 0)
        {
          uint64_t v6 = v12;
          log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15029, "%s%s%s%x", v13, v14, v15, v16, "stream");
        }
        else
        {
          uint64_t v17 = (*(uint64_t (**)(void, void, unsigned __int8 **, unsigned int *))(v7[36] + 88))(v7[37], v7[38], &v52, &v54);
          if ((v17 & 0x80000000) != 0)
          {
            uint64_t v6 = v17;
            log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15030, "%s%s%s%x", v18, v19, v20, v21, "stream");
          }
          else
          {
            uint64_t v22 = (*(uint64_t (**)(void, void, uint64_t *, void))(v7[36] + 112))(v7[39], v7[40], &v51, 4 * v54);
            if ((v22 & 0x80000000) != 0)
            {
              uint64_t v6 = v22;
              log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15031, "%s%s%s%x", v23, v24, v25, v26, "stream");
            }
            else
            {
              uint64_t v27 = (*(uint64_t (**)(void, void, void **, void))(v7[36] + 112))(v7[41], v7[42], &__b, 16 * v54);
              if ((v27 & 0x80000000) != 0)
              {
                uint64_t v6 = v27;
                log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15031, "%s%s%s%x", v28, v29, v30, v31, "stream");
                (*(void (**)(void, void, void))(v7[36] + 96))(v7[37], v7[38], 0);
              }
              else if (!v55 {
                     && p_xcoder_CheckBom((uint64_t)v7, v52, v54)
              }
                     && (uint64_t v43 = p_xcoder_OpenXCoder((uint64_t)v7), (v43 & 0x80000000) != 0))
              {
                return v43;
              }
              else
              {
                unsigned int v32 = 4 * v54;
                unsigned int v53 = 4 * v54;
                memset(__b, 255, 16 * v54);
                int v33 = p_xcoder_Convert((uint64_t)v7, (uint64_t)v52, v54, &v54, v51, v32, &v53, __b);
                if (v33 < 0 && ((LODWORD(v6) = v33, (v33 & 0x1FFF) != 7) || HIDWORD(v55)))
                {
                  unsigned int v34 = 0;
                  unsigned int v53 = 0;
                  unsigned int v54 = 0;
                }
                else
                {
                  LODWORD(v6) = 0;
                  unsigned int v34 = v53;
                  if (v55 && v53)
                  {
                    unint64_t v35 = 0;
                    uint64_t v36 = __b;
                    do
                    {
                      v36[v35++] += v55;
                      unsigned int v34 = v53;
                    }
                    while (v35 < v53);
                    LODWORD(v6) = 0;
                  }
                }
                int v44 = (*(uint64_t (**)(void, void, void))(v7[36] + 120))(v7[41], v7[42], 4 * v34);
                if (v44 < 0 && (int)v6 > -1) {
                  LODWORD(v6) = v44;
                }
                int v46 = (*(uint64_t (**)(void, void, void))(v7[36] + 120))(v7[39], v7[40], v53);
                if (v46 < 0 && (int)v6 > -1) {
                  LODWORD(v6) = v46;
                }
                int v48 = (*(uint64_t (**)(void, void, void))(v7[36] + 96))(v7[37], v7[38], v54);
                if (v48 >= 0 || (int)v6 <= -1) {
                  return v6;
                }
                else {
                  return v48;
                }
              }
            }
          }
        }
      }
      else if (HIDWORD(v55))
      {
        uint64_t v37 = v7[39];
        if (v37)
        {
          LODWORD(v6) = (*(uint64_t (**)(uint64_t, void))(v7[36] + 72))(v37, v7[40]);
          v7[39] = safeh_GetNullHandle();
          v7[40] = v38;
          int v39 = (*(uint64_t (**)(void, void))(v7[36] + 72))(v7[41], v7[42]);
          v7[41] = safeh_GetNullHandle();
          v7[42] = v40;
          if (v39 >= 0 || (int)v6 <= -1) {
            return v6;
          }
          else {
            return v39;
          }
        }
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return v6;
}

uint64_t xcoder_ProcessEnd(void *a1, int a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = p_xcoder_BeginFunction(a1, a2, &v12, &v11);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v11;
    uint64_t v4 = v11[37];
    if (v4)
    {
      (*(void (**)(uint64_t, void))(v11[36] + 72))(v4, v11[38]);
      v3[37] = safeh_GetNullHandle();
      v3[38] = v5;
    }
    uint64_t v6 = v3[39];
    if (v6)
    {
      (*(void (**)(uint64_t, void))(v3[36] + 72))(v6, v3[40]);
      v3[39] = safeh_GetNullHandle();
      v3[40] = v7;
    }
    uint64_t v8 = v3[41];
    if (v8)
    {
      (*(void (**)(uint64_t, void))(v3[36] + 72))(v8, v3[42]);
      v3[41] = safeh_GetNullHandle();
      v3[42] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_BeginFunction(void *a1, int a2, void *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck((uint64_t)a1, a2, 852, 344);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      return 2282758152;
    }
    else {
      return result;
    }
  }
  else
  {
    *a4 = a1;
    uint64_t v8 = (_WORD *)*a1;
    uint64_t v9 = a1[1];
    return InitRsrcFunction(v8, v9, a3);
  }
}

uint64_t p_xcoder_CheckBom(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 < 2) {
    return 0;
  }
  uint64_t v4 = (char *)(a1 + 16);
  if (LH_stricmp((char *)(a1 + 16), "UTF-16") && LH_stricmp(v4, "UCS-2")) {
    return 0;
  }
  if (*a2 == 254 && a2[1] == 255)
  {
    strcpy(v4, "UTF-16BE");
    return 1;
  }
  else
  {
    uint64_t result = 0;
    strcpy(v4, "UTF-16");
  }
  return result;
}

uint64_t synthstream_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2297438209;
  }
  uint64_t result = 0;
  *a2 = &ISynthStream;
  return result;
}

uint64_t synthstream_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2297438214;
  uint64_t v31 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v31);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: Begin", v10, v11, v12, v27);
      uint64_t v13 = heap_Calloc(*(void **)(v31 + 8), 1, 48);
      if (v13)
      {
        uint64_t v18 = v13;
        *(void *)uint64_t v13 = a3;
        *(void *)(v13 + 8) = a4;
        uint64_t v19 = (_DWORD *)(v13 + 32);
        if ((paramc_ParamGetUInt(*(void *)(v31 + 40), (uint64_t)"synthstreamminmemalloc", (unsigned int *)(v13 + 32)) & 0x80000000) != 0
          || !*v19)
        {
          *uint64_t v19 = 1024;
        }
        uint64_t v20 = (_DWORD *)(v18 + 36);
        if ((paramc_ParamGetUInt(*(void *)(v31 + 40), (uint64_t)"synthstreamminmemmove", (unsigned int *)(v18 + 36)) & 0x80000000) != 0
          || !*v20)
        {
          *uint64_t v20 = 128;
        }
        uint64_t v21 = (_DWORD *)(v18 + 40);
        if ((paramc_ParamGetUInt(*(void *)(v31 + 40), (uint64_t)"synthstreamminmemfree", (unsigned int *)(v18 + 40)) & 0x80000000) != 0
          || !*v21)
        {
          *uint64_t v21 = 4097;
        }
        paramc_ParamGetInt(*(void *)(v31 + 40), (uint64_t)"loginputtext", (int *)(v18 + 44));
        uint64_t v22 = *(void **)(v31 + 8);
        v29[0] = xmmword_26C21F5B0;
        v29[1] = *(_OWORD *)&off_26C21F5C0;
        uint64_t v30 = off_26C21F5D0;
        uint64_t v5 = ssftmap_ObjOpen(v22, 0, v29, (uint64_t *)(v18 + 24));
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(*(void **)(v31 + 8), v18);
        }
        else
        {
          *(void *)a5 = v18;
          *(_DWORD *)(a5 + 8) = 18397;
        }
      }
      else
      {
        log_OutPublic(*(void *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v14, v15, v16, v17, v28);
        uint64_t v5 = 2297438218;
      }
      log_OutText(*(void *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: End (%x)", v23, v24, v25, v5);
    }
  }
  return v5;
}

uint64_t synthstream_ObjClose(uint64_t a1, int a2)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  uint64_t v2 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : Begin", v3, v4, v5, v23);
  uint64_t v6 = v29;
  uint64_t v10 = ssftmap_IteratorOpen(*(void *)(v29 + 24), 0, 1, (uint64_t)&v27);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v26, &v25) & 0x80000000) == 0)
    {
      uint64_t v15 = v25;
      if (!*(_DWORD *)(v25 + 108))
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, "%s%u%s%s%s%u", v11, v12, v13, v14, "writer");
        uint64_t v15 = v25;
      }
      if (*(void *)(v15 + 16))
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, "%s%u%s%s%s%u", v11, v12, v13, v14, "module");
        heap_Free(*(void **)(v28 + 8), *(void *)(v25 + 16));
        uint64_t v15 = v25;
        *(void *)(v25 + 16) = 0;
      }
      if (vector_GetElemAt(*(void *)(v15 + 24), 0, &v24) == 1)
      {
        unsigned int v20 = 1;
        do
        {
          log_OutPublic(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, "%s%u%s%s%s%u", v16, v17, v18, v19, "module");
          heap_Free(*(void **)(v28 + 8), *v24);
          int ElemAt = vector_GetElemAt(*(void *)(v25 + 24), v20++, &v24);
        }
        while (ElemAt == 1);
      }
      if (*(unsigned __int16 *)(v25 + 42) >= 2u) {
        *(_WORD *)(v25 + 42) = 1;
      }
    }
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v10 & 0x80000000) == 0 || (v10 & 0x1FFF) == 0x14)
  {
    uint64_t v10 = ssftmap_ObjClose(*(void *)(v6 + 24));
    if ((v10 & 0x80000000) == 0) {
      heap_Free(*(void **)(v28 + 8), v6);
    }
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : End (%x)", v7, v8, v9, v10);
  return v10;
}

uint64_t synthstream_SetPipelinePos(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v7 = synthstream_loc_BeginFunction(a1, a2, &v12, &v13);
  if ((v7 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : Begin (%u)", v4, v5, v6, a3);
    *(_WORD *)(v13 + 16) = a3;
    log_OutText(*(void *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : End (%x)", v8, v9, v10, v7);
  }
  return v7;
}

uint64_t synthstream_StreamOpen(uint64_t a1, int a2, unsigned int a3, const char *a4, long long *a5, int a6, uint64_t a7)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = 0;
  uint64_t v12 = synthstream_loc_BeginFunction(a1, a2, &v79, &v81);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v16 = v81;
  log_OutText(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : Begin (%u, %s, %p, %d, %u)", v13, v14, v15, a3);
  if (a4 && a7 && *a4 && strlen(a4) < 0x80)
  {
    *(void *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    p_s1 = 0;
    uint64_t v78 = 0;
    int v76 = 0;
    if (*a4)
    {
      uint64_t v22 = 0;
      unsigned int v23 = 1;
      do
      {
        v83[v22 - 16] = __tolower(a4[v22]);
        uint64_t v22 = v23;
      }
      while (strlen(a4) > v23++);
    }
    else
    {
      uint64_t v22 = 0;
    }
    v83[v22 - 16] = 0;
    p_s1 = (char *)&__s1;
    LOWORD(v78) = 0;
    uint64_t v21 = ssftmap_IteratorOpen(*(void *)(v16 + 24), (uint64_t)&p_s1, 1, (uint64_t)&v76);
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      *(void *)&long long v73 = 0;
      uint64_t v75 = 0;
      if ((ssftmap_IteratorNext(v76, &v73, &v75) & 0x80000000) == 0
        && (uint64_t v29 = v73, !strcmp((const char *)&__s1, *(const char **)v73)))
      {
        uint64_t v34 = 0;
        uint64_t v31 = 0;
        do
        {
          uint64_t v30 = v34;
          BOOL v35 = a6 == 0;
          unsigned int v36 = *(unsigned __int16 *)(v75 + 40);
          unsigned int v37 = *(unsigned __int16 *)(v16 + 16);
          if (v36 != v37) {
            BOOL v35 = 0;
          }
          if (v36 >= v37 && !v35) {
            break;
          }
          uint64_t v34 = v29;
          uint64_t v31 = v75;
          if ((ssftmap_IteratorNext(v76, &v73, &v75) & 0x80000000) != 0)
          {
            uint64_t v30 = v29;
            break;
          }
          uint64_t v29 = v73;
          uint64_t v30 = v34;
        }
        while (!strcmp((const char *)&__s1, *(const char **)v73));
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
      }
      ssftmap_IteratorClose((uint64_t)v76);
    }
    if ((v21 & 0x1FFF) == 0x14) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v21;
    }
    if ((v32 & 0x80000000) != 0) {
      goto LABEL_109;
    }
    if ((a6 - 1) < 2)
    {
      if (v31 && *(unsigned __int16 *)(v31 + 40) == *(unsigned __int16 *)(v16 + 16))
      {
        log_OutText(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for write failed for %s %u, already present", v26, v27, v28, (uint64_t)&__s1);
        uint64_t v21 = 2297438210;
LABEL_109:
        log_OutText(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : End (%x, %p, %p, %u)", v26, v27, v28, v21);
        return v21;
      }
      if (v30) {
        __int16 v33 = *(_WORD *)(v30 + 8) + 1;
      }
      else {
        __int16 v33 = 0;
      }
      LOWORD(v78) = v33;
      uint64_t v39 = heap_Calloc(*(void **)(v79 + 8), 1, 120);
      uint64_t v41 = v79;
      if (!v39)
      {
        uint64_t v21 = 2297438218;
LABEL_108:
        log_OutPublic(*(void *)(v41 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v40, v26, v27, v28, v72);
        goto LABEL_109;
      }
      uint64_t v31 = v39;
      uint64_t v42 = *(void **)(v79 + 8);
      long long v73 = xmmword_20D669F40;
      uint64_t v74 = 0;
      if (vector_ObjOpen(v42, &v73, 1, (uint64_t *)(v31 + 24)) == 1)
      {
        int v47 = strlen((const char *)&__s1);
        int v48 = (char *)heap_Alloc(*(void *)(v79 + 8), (v47 + 1));
        *(void *)(v31 + 32) = v48;
        if (v48)
        {
          if (!a5)
          {
            if (!strcmp((const char *)&__s1, "application/x-realspeak-markers-pp;version=4.0"))
            {
              a5 = &IElemMarkerT;
            }
            else if (!strcmp((const char *)&__s1, "application/x-realspeak-int-markers-pp;version=4.0"))
            {
              a5 = &IElemIntMarkerT;
            }
            else if (!strcmp((const char *)&__s1, "application/x-tnplus-words;version=1.0"))
            {
              a5 = (long long *)&IElemGeeneWordT;
            }
            else
            {
              a5 = 0;
            }
          }
          *(void *)uint64_t v31 = v16;
          *(void *)(v31 + 8) = v79;
          strcpy(v48, (const char *)&__s1);
          *(_WORD *)(v31 + 40) = *(_WORD *)(v16 + 16);
          *(_WORD *)(v31 + 42) = 1;
          *(_WORD *)(v31 + 44) = a3;
          if (a5 && *(_WORD *)a5)
          {
            long long v53 = *a5;
            *(void *)(v31 + 64) = *((void *)a5 + 2);
            *(_OWORD *)(v31 + 48) = v53;
          }
          *(unsigned char *)(v31 + 72) = a6 == 2;
          unsigned int v54 = p_s1;
          BOOL v55 = !strncmp(p_s1, "text/", 5uLL) && strstr(v54, "charset=wchar_t") == 0;
          *(unsigned char *)(v31 + 73) = v55;
          if (*(_DWORD *)(v16 + 44))
          {
            BOOL v56 = (void)__s1 == 0x616C702F74786574 && *((void *)&__s1 + 1) == 0x73726168633B6E69;
            BOOL v57 = v56 && *(void *)v83 == 0x312D6674753D7465;
            BOOL v58 = v57 && *(unsigned __int16 *)&v83[8] == 54;
            if (v58
              || !((unint64_t)__s1 ^ 0x616C702F74786574 | *((void *)&__s1 + 1) ^ 0x73726168633B6E69 | *(void *)v83 ^ 0x382D6674753D7465 | v83[8])
              || ((void)__s1 == 0x746163696C707061
                ? (BOOL v59 = *((void *)&__s1 + 1) == 0x746E79732F6E6F69)
                : (BOOL v59 = 0),
                  v59 ? (BOOL v60 = *(void *)v83 == 0x73732B7369736568) : (BOOL v60 = 0),
                  v60 ? (BOOL v61 = *(void *)&v83[3] == 0x6C6D73732B7369) : (BOOL v61 = 0),
                  v61
               || ((void)__s1 == 0x6D74682F74786574 ? (BOOL v62 = WORD4(__s1) == 108) : (BOOL v62 = 0),
                   v62
                || ((void)__s1 == 0x616D652F74786574
                  ? (BOOL v63 = *(void *)((char *)&__s1 + 3) == 0x6C69616D652F74)
                  : (BOOL v63 = 0),
                    v63 || !((unint64_t)__s1 ^ 0x6C6D782F74786574 | BYTE8(__s1))))))
            {
              *(_DWORD *)(v16 + 44) = 0;
              *(unsigned char *)(v31 + 72) = 1;
              *(unsigned char *)(v31 + 74) = 1;
            }
          }
          uint64_t v21 = ssftmap_Insert(*(void *)(v16 + 24), (uint64_t)&p_s1, v31);
          if ((v21 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22002, "%s%u%s%s%s%u", v64, v65, v66, v67, "module");
          }
          synthstream_loc_ElemReleaseStreamImpl((void *)v31);
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_109;
          }
LABEL_100:
          uint64_t v68 = heap_Calloc(*(void **)(v79 + 8), 1, 24);
          uint64_t v80 = v68;
          if (v68)
          {
            uint64_t v69 = v68;
            if (a6 || (v70 = vector_Add(*(void *)(v31 + 24), &v80), uint64_t v69 = v80, v70))
            {
              *(_DWORD *)uint64_t v69 = a6;
              *(_WORD *)(v69 + 4) = a3;
              *(void *)(v69 + 8) = v31;
              *(_DWORD *)(v69 + 16) = *(_DWORD *)(v31 + 80);
              ++*(_WORD *)(v31 + 42);
              if ((a6 - 1) <= 1) {
                *(void *)(v31 + 16) = v69;
              }
              *(void *)a7 = v69;
              *(_DWORD *)(a7 + 8) = 18398;
              goto LABEL_109;
            }
            uint64_t v21 = 2297438218;
            heap_Free(*(void **)(v79 + 8), v80);
            uint64_t v80 = 0;
          }
          else
          {
            uint64_t v21 = 2297438218;
          }
          uint64_t v41 = v79;
          goto LABEL_108;
        }
        uint64_t v21 = 2297438218;
        log_OutPublic(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v49, v50, v51, v52, v72);
        vector_ObjClose(*(void *)(v31 + 24));
      }
      else
      {
        uint64_t v21 = 2297438218;
        log_OutPublic(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v43, v44, v45, v46, v72);
      }
      heap_Free(*(void **)(v79 + 8), v31);
      goto LABEL_109;
    }
    if (a6)
    {
      log_OutPublic(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22007, "%s%d%s%u%s%s", v25, v26, v27, v28, "openMode");
      uint64_t v21 = 2297438215;
      goto LABEL_109;
    }
    if (!v31)
    {
      log_OutText(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for read failed for %s %u, not found", v26, v27, v28, (uint64_t)&__s1);
      uint64_t v21 = 2297438228;
      goto LABEL_109;
    }
    uint64_t v21 = v32;
    goto LABEL_100;
  }
  log_OutPublic(*(void *)(v79 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p", v17, v18, v19, v20, "function");
  return 2297438215;
}

uint64_t synthstream_StreamClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : Begin (%u, %p, %d)", v3, v4, v5, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 108) = 1;
      synthstream_loc_StreamImplDump(v8, 0, 0);
    }
    else
    {
      uint64_t v19 = 0;
      unsigned int v13 = 0;
      if (vector_GetElemAt(*(void *)(*(void *)(a1 + 8) + 24), 0, &v19) == 1)
      {
        unsigned int v13 = 0;
        do
        {
          if (*v19 == a1) {
            break;
          }
          ++v13;
        }
        while (vector_GetElemAt(*(void *)(*(void *)(a1 + 8) + 24), v13, &v19) == 1);
      }
      if (*v19 == a1) {
        vector_Remove(*(void *)(*(void *)(a1 + 8) + 24), v13);
      }
      else {
        log_OutPublic(*(void *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 22003, 0, v9, v10, v11, v12, v18);
      }
    }
    synthstream_loc_ElemReleaseStreamImpl(*(void **)(a1 + 8));
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : End (%x)", v14, v15, v16, v6);
  }
  return v6;
}

uint64_t synthstream_Read(uint64_t a1, int a2, void *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : Begin (%u, %p, %lu bytes)", v9, v10, v11, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4 && a5)
    {
      if (*(_DWORD *)a1)
      {
        uint64_t v12 = 2297438215;
        log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v14, v15, v16, v17, "function");
      }
      else
      {
        unsigned int v18 = *(_DWORD *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 8);
        unsigned int v20 = *(_DWORD *)(v19 + 88);
        uint64_t v21 = v18 - v20;
        if (v18 >= v20)
        {
          unsigned int v23 = *(_DWORD *)(v19 + 76) - v18;
          if (v23 >= a4) {
            size_t v24 = a4;
          }
          else {
            size_t v24 = v23;
          }
          *a5 = v24;
          if (v24)
          {
            memcpy(a3, (const void *)(*(void *)(v19 + 96) + v21), v24);
            unsigned int v29 = *(_DWORD *)(a1 + 16) + *a5;
            *(_DWORD *)(a1 + 16) = v29;
            uint64_t v30 = *(void *)(a1 + 8);
            if (v29 > *(_DWORD *)(v30 + 80)) {
              *(_DWORD *)(v30 + 80) = v29;
            }
            if (*(void *)(v30 + 56)) {
              log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22014, "%s%s%s%u%s%s", v25, v26, v27, v28, "function");
            }
            else {
              synthstream_loc_StreamImplRecoverExcessBuffer(v30, 0);
            }
          }
          goto LABEL_12;
        }
        log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22011, "%s%s%s%u%s%s%s%u%s%u", v14, v15, v16, v17, "function");
        uint64_t v12 = 2297438212;
      }
    }
    else
    {
      uint64_t v12 = 2297438215;
      log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p%s%d%s%p", v14, v15, v16, v17, "function");
      if (!a5) {
        return v12;
      }
    }
    *a5 = 0;
LABEL_12:
    log_OutText(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : End (%x, %lu bytes)", v15, v16, v17, v12);
  }
  return v12;
}

uint64_t synthstream_ReadDirectStart(uint64_t a1, int a2, void *a3, unsigned int *a4)
{
  uint64_t v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if (*(_DWORD *)a1)
      {
        uint64_t v10 = 2297438215;
        log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        unsigned int v16 = *(_DWORD *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 8);
        unsigned int v18 = *(_DWORD *)(v17 + 88);
        uint64_t v19 = v16 - v18;
        if (v16 >= v18)
        {
          unsigned int v20 = *(_DWORD *)(v17 + 76) - v16;
          *a4 = v20;
          uint64_t v21 = *(void *)(v17 + 96);
          *a3 = v21 + v19;
          if (v20) {
            BOOL v22 = v21 == 0;
          }
          else {
            BOOL v22 = 0;
          }
          if (!v22) {
            goto LABEL_19;
          }
          uint64_t v10 = 2297438218;
        }
        else
        {
          log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22011, "%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          uint64_t v10 = 2297438212;
        }
      }
    }
    else
    {
      uint64_t v10 = 2297438215;
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p%s%p", v12, v13, v14, v15, "function");
      if (!a3)
      {
        if (!a4) {
          return v10;
        }
        goto LABEL_18;
      }
    }
    *a3 = 0;
    if (a4)
    {
LABEL_18:
      *a4 = 0;
LABEL_19:
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : End (%x, %lu bytes)", v13, v14, v15, v10);
    }
  }
  return v10;
}

uint64_t synthstream_ReadDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      uint64_t v8 = 2297438215;
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v10, v11, v12, v13, "function");
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 8);
      int v18 = *(_DWORD *)(a1 + 16);
      unsigned int v19 = *(_DWORD *)(v17 + 76) - v18;
      if (v19 >= a3)
      {
        unsigned int v20 = v18 + a3;
      }
      else
      {
        uint64_t v8 = 2297438215;
        log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22004, "%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
        unsigned int v20 = *(_DWORD *)(a1 + 16) + v19;
        uint64_t v17 = *(void *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 16) = v20;
      if (v20 > *(_DWORD *)(v17 + 80)) {
        *(_DWORD *)(v17 + 80) = v20;
      }
      synthstream_loc_StreamImplRecoverExcessBuffer(v17, 0);
    }
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : End (%x)", v14, v15, v16, v8);
  }
  return v8;
}

uint64_t synthstream_Write(uint64_t a1, int a2, char *a3, unsigned int a4)
{
  int v31 = 1;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (!a3 || !a4)
    {
      uint64_t v20 = 2297438215;
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"%s%u%s%s%s%p%s%u", v13, v14, v15, (uint64_t)"function=Write|module=");
      goto LABEL_22;
    }
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      uint64_t v20 = 2297438215;
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      goto LABEL_22;
    }
    uint64_t v16 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v16 + 76) < *(_DWORD *)(v16 + 88))
    {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, "%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
      uint64_t v20 = 2297438213;
LABEL_22:
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : End (%x)", v17, v18, v19, v20);
      return v20;
    }
    uint64_t v21 = synthstream_loc_StreamImplGrowBuf(v16, a4, &v31);
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v20 = v21;
      goto LABEL_22;
    }
    uint64_t v22 = *(void *)(a1 + 8);
    if (v31 == 1)
    {
      unsigned int v23 = *(_DWORD *)(v22 + 76);
      unsigned int v24 = *(_DWORD *)(v22 + 88);
      uint64_t v25 = v23 - v24;
      if (v23 >= v24)
      {
        memcpy((void *)(*(void *)(v22 + 96) + v25), a3, a4);
        uint64_t v22 = *(void *)(a1 + 8);
        if (*(void *)(v22 + 56))
        {
          unsigned int v26 = 0;
          while (1)
          {
            int v27 = (*(uint64_t (**)(char *, void, void))(v22 + 56))(&a3[v26], *(void *)(*(void *)(v22 + 8) + 8), *(void *)(v22 + 96) + v26 + v25);
            uint64_t v22 = *(void *)(a1 + 8);
            if (!v27) {
              break;
            }
            v26 += *(unsigned __int16 *)(v22 + 48);
            if (v26 >= a4) {
              goto LABEL_21;
            }
          }
          if (*(void *)(v22 + 64)) {
            BOOL v29 = v26 == 0;
          }
          else {
            BOOL v29 = 1;
          }
          if (!v29)
          {
            unsigned int v30 = 0;
            do
            {
              (*(void (**)(void, void))(v22 + 64))(*(void *)(v22 + 96) + v30 + v25, *(void *)(*(void *)(v22 + 8) + 8));
              uint64_t v22 = *(void *)(a1 + 8);
              v30 += *(unsigned __int16 *)(v22 + 48);
            }
            while (v30 < v26);
          }
          uint64_t v20 = 2297438218;
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v24 = *(_DWORD *)(v22 + 88);
    }
    *(_DWORD *)(v22 + 88) = v24 + a4;
LABEL_21:
    *(_DWORD *)(v22 + 76) += a4;
    synthstream_loc_StreamImplDump(v22, (uint64_t)a3, a4);
    uint64_t v20 = 0;
    goto LABEL_22;
  }
  return v7;
}

uint64_t synthstream_WriteDirectStart(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if ((*(_DWORD *)a1 - 1) >= 2)
      {
        uint64_t v20 = 2297438215;
        log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v16 + 76) >= *(_DWORD *)(v16 + 88))
        {
          uint64_t v22 = synthstream_loc_StreamImplGrowBuf(v16, a4, 0);
          if ((v22 & 0x80000000) == 0)
          {
            unsigned int v23 = (void *)(*(void *)(*(void *)(a1 + 8) + 96)
                         + (*(_DWORD *)(*(void *)(a1 + 8) + 76)
                                        - *(_DWORD *)(*(void *)(a1 + 8) + 88)));
            *a3 = v23;
            bzero(v23, a4);
            uint64_t v20 = 0;
            goto LABEL_12;
          }
          uint64_t v20 = v22;
        }
        else
        {
          log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, "%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          uint64_t v20 = 2297438213;
        }
      }
    }
    else
    {
      uint64_t v20 = 2297438215;
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p%s%u", v12, v13, v14, v15, "function");
      if (!a3) {
        goto LABEL_12;
      }
    }
    *a3 = 0;
LABEL_12:
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : End (%x)", v17, v18, v19, v20);
    return v20;
  }
  return v7;
}

uint64_t synthstream_WriteDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      uint64_t v8 = 2297438215;
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v10, v11, v12, v13, "function");
      goto LABEL_6;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(v14 + 76);
    unsigned int v16 = *(_DWORD *)(v14 + 88);
    unsigned int v17 = v15 - v16;
    if (v15 < v16)
    {
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22012, "%s%s%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "function");
      uint64_t v8 = 2297438213;
LABEL_6:
      log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : End (%x)", v18, v19, v20, v8);
      return v8;
    }
    unsigned int v22 = v17 + a3;
    if (v17 + a3 > *(_DWORD *)(v14 + 104))
    {
      uint64_t v8 = 2297438215;
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22005, "%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
      goto LABEL_6;
    }
    if (*(void *)(v14 + 56))
    {
      if (a3)
      {
        unsigned int v23 = 0;
        while (1)
        {
          int v24 = (*(uint64_t (**)(void, void))(v14 + 56))(*(void *)(v14 + 96) + v23 + v17, *(void *)(*(void *)(v14 + 8) + 8));
          uint64_t v14 = *(void *)(a1 + 8);
          if (!v24) {
            break;
          }
          v23 += *(unsigned __int16 *)(v14 + 48);
          if (v23 >= a3) {
            goto LABEL_15;
          }
        }
        if (*(void *)(v14 + 64)) {
          BOOL v28 = v23 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          unsigned int v29 = 0;
          do
          {
            (*(void (**)(void, void))(v14 + 64))(*(void *)(v14 + 96) + v29 + v17, *(void *)(*(void *)(v14 + 8) + 8));
            uint64_t v14 = *(void *)(a1 + 8);
            v29 += *(unsigned __int16 *)(v14 + 48);
          }
          while (v29 < v23);
        }
        uint64_t v8 = 2297438218;
        goto LABEL_6;
      }
LABEL_15:
      unsigned int v15 = *(_DWORD *)(v14 + 76);
    }
    *(_DWORD *)(v14 + 76) = v15 + a3;
    synthstream_loc_StreamImplDump(v14, *(void *)(v14 + 96) + v17, a3);
    uint64_t v25 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v25 + 104) - v22 >= *(_DWORD *)(*(void *)v25 + 40))
    {
      *(_DWORD *)(v25 + 104) = v22;
      uint64_t v26 = *(void *)(v25 + 96);
      if (v22)
      {
        uint64_t v27 = heap_Realloc(*(uint64_t **)(*(void *)(v25 + 8) + 8), v26, v22 + 1);
        uint64_t v25 = *(void *)(a1 + 8);
        if (!v27) {
          goto LABEL_29;
        }
      }
      else
      {
        heap_Free(*(void **)(*(void *)(v25 + 8) + 8), v26);
        uint64_t v27 = 0;
        uint64_t v25 = *(void *)(a1 + 8);
      }
      *(void *)(v25 + 96) = v27;
    }
LABEL_29:
    synthstream_loc_StreamImplRecoverExcessBuffer(v25, 0);
    goto LABEL_6;
  }
  return v8;
}

uint64_t synthstream_WriteCopy(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v16 = 2297438215;
    uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : Begin (%u, %p, %p, %lu bytes)", v13, v14, v15, *(unsigned __int16 *)(a1 + 4));
    if (a5 && a6)
    {
      if ((*(_DWORD *)a1 - 1) < 2)
      {
        BOOL v28 = 0;
        unsigned int v27 = 0;
        *a6 = 0;
        uint64_t v16 = synthstream_ReadDirectStart(a3, a4, &v28, &v27);
        if ((v16 & 0x80000000) == 0 && v27)
        {
          if (v27 < a5) {
            a5 = v27;
          }
          uint64_t v25 = synthstream_Write(a1, a2, v28, a5);
          if ((v25 & 0x80000000) != 0)
          {
            uint64_t v16 = v25;
            a5 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            *a6 = a5;
          }
          synthstream_ReadDirectEnd(a3, a4, a5);
        }
        goto LABEL_18;
      }
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22008, "%s%s%s%u%s%s", v18, v19, v20, v21, "function");
    }
    else
    {
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%u%s%p", v18, v19, v20, v21, "function");
      if (!a6) {
        return v16;
      }
    }
    *a6 = 0;
LABEL_18:
    log_OutText(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : End (%x, %lu bytes)", v22, v23, v24, v16);
    return v16;
  }
  return v12;
}

uint64_t synthstream_GetPosition(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : Begin (%u, %p)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (*(_DWORD *)a1) {
        uint64_t v14 = (_DWORD *)(*(void *)(a1 + 8) + 76);
      }
      else {
        uint64_t v14 = (_DWORD *)(a1 + 16);
      }
      *a3 = *v14;
      log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : End (%x, %lu)", v11, v12, v13, v8);
    }
    else
    {
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p", v10, v11, v12, v13, "function");
      return 2297438215;
    }
  }
  return v8;
}

uint64_t synthstream_GetRemaining(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (!*(_DWORD *)a1)
      {
        uint64_t v16 = *(void *)(a1 + 8);
        *a3 = *(_DWORD *)(v16 + 76) - *(_DWORD *)(a1 + 16);
        if (a4) {
          *a4 = *(_DWORD *)(v16 + 108);
        }
LABEL_12:
        log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : End (%x, %lu)", v13, v14, v15, v10);
        return v10;
      }
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, "%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      *a3 = 0;
      if (a4) {
        goto LABEL_5;
      }
    }
    else
    {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, "%s%s%s%u%s%s%s%p", v12, v13, v14, v15, "function");
      if (a4) {
LABEL_5:
      }
        *a4 = 1;
    }
    uint64_t v10 = 2297438215;
    if (!a3) {
      return v10;
    }
    goto LABEL_12;
  }
  return v10;
}

long long *synthstream_GetMarkerTIElem()
{
  return &IElemMarkerT;
}

uint64_t synthstream_Reset(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  unsigned int v27 = 0;
  uint64_t v25 = 0;
  uint64_t v4 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : Begin (%u)", v5, v6, v7, a3);
  int Str = paramc_ParamGetStr(*(void *)(v28 + 40), (uint64_t)"clcpppipelinemode", &v26);
  int v9 = ssftmap_IteratorOpen(*(void *)(v29 + 24), 0, 1, (uint64_t)&v27);
  LODWORD(v13) = v9;
  if (Str < 0)
  {
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
      {
        if (*(_WORD *)(v23 + 42) == 1)
        {
          unsigned int v20 = *(unsigned __int16 *)(v23 + 40);
          if (v20 >= a3) {
            uint64_t v21 = "Clear";
          }
          else {
            uint64_t v21 = "Keep";
          }
          log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)v21);
          if (v20 >= a3) {
            ssftmap_IteratorRemove(v27);
          }
        }
        else
        {
          log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)"Keep");
        }
      }
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
    {
      uint64_t v14 = v23;
      *(void *)(v23 + 84) = 0;
      *(void *)(v14 + 76) = 0;
      if (vector_GetElemAt(*(void *)(v14 + 24), 0, &v25) == 1)
      {
        unsigned int v15 = 1;
        do
        {
          *(_DWORD *)(*(void *)v25 + 16) = 0;
          int ElemAt = vector_GetElemAt(*(void *)(v23 + 24), v15++, &v25);
        }
        while (ElemAt == 1);
      }
    }
LABEL_21:
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v13 & 0x1FFF) == 0x14) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v13;
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : End (%x)", v10, v11, v12, v13);
  return v13;
}

long long *synthstream_GetIntMarkerTIElem()
{
  return &IElemIntMarkerT;
}

uint64_t synthstream_SetRulRes(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v8 + 8);
    if (a4)
    {
      int v10 = 0;
      uint64_t v11 = a4;
      uint64_t v12 = a3;
      do
      {
        int v13 = *v12++;
        if ((v13 - 1) < 0x1F) {
          ++v10;
        }
        --v11;
      }
      while (v11);
      int v14 = 4 * v10;
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = *(void *)(v8 + 112);
    if (v15)
    {
      heap_Free(*(void **)(v9 + 8), v15);
      uint64_t v16 = *(void *)(a1 + 8);
      *(void *)(v16 + 112) = 0;
      uint64_t v9 = *(void *)(v16 + 8);
    }
    uint64_t v17 = (char *)heap_Alloc(*(void *)(v9 + 8), a4 + v14 + 1);
    *(void *)(*(void *)(a1 + 8) + 112) = v17;
    if (v17) {
      uint64_t v18 = v7;
    }
    else {
      uint64_t v18 = 2297438218;
    }
    if (v17) {
      BOOL v19 = a4 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      return v18;
    }
    else
    {
      uint64_t v20 = a4;
      do
      {
        int v22 = *a3++;
        int v21 = v22;
        if ((v22 - 1) > 0x1E)
        {
          *uint64_t v17 = v21;
          uint64_t v23 = 1;
        }
        else
        {
          switch(v21)
          {
            case 7:
              strcpy(v17, "\\a");
              goto LABEL_32;
            case 8:
              strcpy(v17, "\\b");
              goto LABEL_32;
            case 9:
              strcpy(v17, "\\t");
              goto LABEL_32;
            case 10:
              strcpy(v17, "\\n");
              goto LABEL_32;
            case 11:
              strcpy(v17, "\\v");
              goto LABEL_32;
            case 12:
              strcpy(v17, "\\f");
              goto LABEL_32;
            case 13:
              strcpy(v17, "\\r");
LABEL_32:
              uint64_t v23 = 2;
              break;
            default:
              if (v21 == 27) {
                strcpy(v17, "<ESC>");
              }
              else {
                strcpy(v17, "<SPC>");
              }
              uint64_t v23 = 5;
              break;
          }
        }
        v17 += v23;
        --v20;
      }
      while (v20);
    }
  }
  return v7;
}

void *synthstream_GetGeeneMarkerTIElem()
{
  return &IElemGeeneWordT;
}

uint64_t synthstream_loc_ElemCopyMapKey(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = 2297438215;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = heap_Calloc(a2, 1, 16);
    if (v7)
    {
      uint64_t v8 = v7;
      *(_WORD *)(v7 + 8) = *(_WORD *)(a1 + 8);
      uint64_t v3 = ssftmap_ElemCopyString(*(const char **)a1, (uint64_t)a2, (char **)v7);
      if ((v3 & 0x80000000) != 0) {
        heap_Free(a2, v8);
      }
      else {
        *a3 = v8;
      }
    }
    else
    {
      return 2297438218;
    }
  }
  return v3;
}

uint64_t *synthstream_loc_ElemFreeMapKey(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (*result) {
      heap_Free(a2, *result);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t synthstream_loc_ElemCompareKeysMapKey(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(const char **)a1;
    if (*(void *)a1)
    {
      if (!a2) {
        return 1;
      }
      uint64_t v5 = *(const char **)a2;
      if (!*(void *)a2) {
        return 1;
      }
LABEL_13:
      uint64_t result = strcmp(v4, v5);
      if (!result)
      {
        unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
        unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
        BOOL v9 = v7 >= v8;
        BOOL v10 = v7 > v8;
        if (v9) {
          return v10;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
      return result;
    }
  }
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(const char **)a2;
  if (*(void *)a2) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 0;
  }
  if (a1 && v5)
  {
    uint64_t v4 = *(const char **)a1;
    if (!*(void *)a1) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t synthstream_loc_ElemCopyStreamImpl(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 2297438215;
  if (a1 && a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      ++*(_WORD *)(a1 + 42);
      *a3 = a1;
    }
  }
  return result;
}

void *synthstream_loc_ElemReleaseStreamImpl(void *result)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    unsigned int v2 = *((unsigned __int16 *)result + 21);
    if (v2 < 2)
    {
      uint64_t v3 = result[1];
      if (*((unsigned char *)result + 74))
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v4 = (char *)result[4];
        char v27 = 0;
        __strcpy_chk();
        if (!strcmp(v4, "application/synthesis+ssml")
          || !strcmp(v4, "text/html")
          || !strcmp(v4, "text/email")
          || !strcmp(v4, "text/xml"))
        {
          if ((paramc_ParamGetStr(*(void *)(*(void *)(v1 + 8) + 40), (uint64_t)"ssmldocumentencoding", &v26) & 0x80000000) == 0
            && v26
            && *v26)
          {
            __strcat_chk();
            __strcat_chk();
          }
        }
        else if ((paramc_ParamGetStr(*(void *)(*(void *)(v1 + 8) + 40), (uint64_t)"inputmimetype", &v26) & 0x80000000) != 0 {
               || !v26
        }
               || !*v26)
        {
          uint64_t v26 = strstr(v4, ";charset=");
          if (v26)
          {
            __strcpy_chk();
            v28[v26 - v4] = 0;
          }
        }
        if ((ssftstring_ObjOpen(*(void **)(*(void *)(v1 + 8) + 8), &v25) & 0x80000000) == 0)
        {
          log_OutBinary(*(void *)(*(void *)(v1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 0, 0, (uint64_t)"input text", (uint64_t)v29, *(void *)(v1 + 96), *(_DWORD *)(v1 + 76), (uint64_t)v25);
          uint64_t v26 = (unsigned char *)ssftstring_CStr((uint64_t)v25);
          BOOL v10 = *(uint64_t ***)(*(void *)(v1 + 8) + 32);
          if (v26)
          {
            log_OutEvent(v10, 17, "%s%s%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
            __strcpy_chk();
          }
          else
          {
            log_OutEvent(v10, 17, "%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
          }
          ssftstring_ObjClose(v25);
          if (v27)
          {
            if (*(void *)(v1 + 112)) {
              log_OutEvent(*(uint64_t ***)(*(void *)(v1 + 8) + 32), 20, "%s%s%s%s", v11, v12, v13, v14, v15, "TXID");
            }
          }
        }
      }
      uint64_t v16 = *(void *)(v1 + 32);
      if (v16) {
        heap_Free(*(void **)(v3 + 8), v16);
      }
      uint64_t v17 = *(void *)(v1 + 112);
      if (v17)
      {
        heap_Free(*(void **)(v3 + 8), v17);
        *(void *)(v1 + 112) = 0;
      }
      uint64_t v18 = *(void *)(v1 + 24);
      if (v18) {
        vector_ObjClose(v18);
      }
      uint64_t v19 = *(void *)(v1 + 96);
      if (v19)
      {
        if (*(void *)(v1 + 64))
        {
          int v20 = *(_DWORD *)(v1 + 88);
          unsigned int v21 = *(_DWORD *)(v1 + 84) - v20;
          if (v21 < *(_DWORD *)(v1 + 76) - v20)
          {
            unint64_t v22 = v19 + v21;
            do
            {
              (*(void (**)(unint64_t, void))(v1 + 64))(v22, *(void *)(*(void *)(v1 + 8) + 8));
              uint64_t v23 = *(unsigned __int16 *)(v1 + 48);
              int v24 = *(_DWORD *)(v1 + 88);
              *(_DWORD *)(v1 + 84) += v23;
              v22 += v23;
              uint64_t v19 = *(void *)(v1 + 96);
            }
            while (v22 < v19 + (unint64_t)(*(_DWORD *)(v1 + 76) - v24));
          }
        }
        heap_Free(*(void **)(v3 + 8), v19);
      }
      return heap_Free(*(void **)(v3 + 8), v1);
    }
    else
    {
      *((_WORD *)result + 21) = v2 - 1;
    }
  }
  return result;
}

uint64_t synthstream_loc_BeginFunction(uint64_t a1, int a2, void *a3, uint64_t *a4)
{
  *a4 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 18397, 48);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), a3);
    if ((result & 0x80000000) == 0) {
      *a4 = a1;
    }
  }
  return result;
}

uint64_t synthstream_loc_StreamImplDump(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = log_GetLogLevel(*(void *)(*(void *)(a1 + 8) + 32));
  if (result >= 6)
  {
    if (a2 && a3)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
      uint64_t v11 = *(unsigned __int16 *)(a1 + 44);
      if (*(unsigned char *)(a1 + 73))
      {
        log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)"writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes [%.*s]", v7, v8, v9, v11);
        LH_utoa(*(unsigned __int16 *)(a1 + 44), v13, 0xAu);
        return log_OutBinary(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 99, 0, (uint64_t)v13, *(void *)(a1 + 32), a2, a3, 0);
      }
      uint64_t v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes";
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
      uint64_t v11 = *(unsigned __int16 *)(a1 + 44);
      uint64_t v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d";
    }
    return log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)v12, v7, v8, v9, v11);
  }
  return result;
}

uint64_t synthstream_loc_StreamImplRecoverExcessBuffer(uint64_t result, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 76);
  uint64_t v17 = 0;
  if (!*(void *)(result + 96)) {
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 72)) {
    return result;
  }
  uint64_t result = vector_GetElemAt(*(void *)(result + 24), 0, &v17);
  if (result == 1)
  {
    unsigned int v5 = 1;
    do
    {
      if (*(_DWORD *)(*(void *)v17 + 16) < v2) {
        unsigned int v2 = *(_DWORD *)(*(void *)v17 + 16);
      }
      uint64_t result = vector_GetElemAt(*(void *)(v3 + 24), v5++, &v17);
    }
    while (result == 1);
  }
  int v6 = *(_DWORD *)(v3 + 88);
  unsigned int v7 = v2 - v6;
  unsigned int v8 = *(unsigned __int16 *)(v3 + 48);
  if (v8 >= 2) {
    unsigned int v7 = v7 / v8 * v8;
  }
  if (*(void *)(v3 + 64))
  {
    if (v7)
    {
      unsigned int v9 = *(_DWORD *)(v3 + 84) - v6;
      if (v9 < v7)
      {
        unint64_t v10 = *(void *)(v3 + 96) + v9;
        do
        {
          uint64_t result = (*(uint64_t (**)(unint64_t, void))(v3 + 64))(v10, *(void *)(*(void *)(v3 + 8) + 8));
          uint64_t v11 = *(unsigned __int16 *)(v3 + 48);
          *(_DWORD *)(v3 + 84) += v11;
          v10 += v11;
        }
        while (v10 < *(void *)(v3 + 96) + (unint64_t)v7);
      }
    }
  }
  if (a2)
  {
    if (v7 >= a2) {
      goto LABEL_21;
    }
    unsigned int v12 = *(_DWORD *)(*(void *)v3 + 36);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(*(void *)v3 + 40);
  }
  if (v7 < v12) {
    return result;
  }
LABEL_21:
  int v13 = *(_DWORD *)(v3 + 76);
  if (v13 != v2) {
    uint64_t result = (uint64_t)memmove(*(void **)(v3 + 96), (const void *)(*(void *)(v3 + 96) + v7), v13 - v2);
  }
  *(_DWORD *)(v3 + 88) += v7;
  if (!a2)
  {
    int v14 = *(_DWORD *)(v3 + 104);
    if (v14 == v7)
    {
      uint64_t v15 = *(void *)(v3 + 96);
    }
    else
    {
      uint64_t v15 = *(void *)(v3 + 96);
      if (v2 != *(_DWORD *)(v3 + 76))
      {
        uint64_t result = heap_Realloc(*(uint64_t **)(*(void *)(v3 + 8) + 8), v15, v14 - v7);
        if (!result) {
          return result;
        }
        *(void *)(v3 + 96) = result;
        unsigned int v16 = *(_DWORD *)(v3 + 104) - v7;
LABEL_28:
        *(_DWORD *)(v3 + 104) = v16;
        return result;
      }
    }
    uint64_t result = (uint64_t)heap_Free(*(void **)(*(void *)(v3 + 8) + 8), v15);
    unsigned int v16 = 0;
    *(void *)(v3 + 96) = 0;
    goto LABEL_28;
  }
  return result;
}

uint64_t synthstream_loc_StreamImplGrowBuf(uint64_t a1, int a2, _DWORD *a3)
{
  if (!a3)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
    unsigned int v7 = *(_DWORD *)(a1 + 104);
    if (v6 > v7) {
      goto LABEL_7;
    }
    return 0;
  }
  *a3 = 1;
  unsigned int v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  unsigned int v7 = *(_DWORD *)(a1 + 104);
  if (v6 <= v7) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t result = vector_GetSize(*(void *)(a1 + 24));
    if (!result)
    {
      *a3 = 0;
      return result;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 104);
  }
LABEL_7:
  synthstream_loc_StreamImplRecoverExcessBuffer(a1, v6 - v7);
  unsigned int v9 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  if (v9 <= *(_DWORD *)(a1 + 104)) {
    return 0;
  }
  if (v9 <= *(_DWORD *)(*(void *)a1 + 32)) {
    int v10 = *(_DWORD *)(*(void *)a1 + 32);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  }
  uint64_t v11 = *(void *)(a1 + 96);
  unsigned int v12 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v13 = (v10 + 1);
  if (v11) {
    uint64_t v14 = heap_Realloc(v12, v11, v13);
  }
  else {
    uint64_t v14 = heap_Calloc(v12, 1, v13);
  }
  uint64_t v19 = v14;
  if (v14)
  {
    uint64_t result = 0;
    *(void *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = v10;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v15, v16, v17, v18, v20);
    return 2297438218;
  }
  return result;
}

uint64_t DecoAddr(void *a1, int a2)
{
  uint64_t v3 = (unsigned int *)a1[2];
  uint64_t v4 = *(void *)v3;
  int v5 = *(unsigned __int8 *)(*(void *)v3 + 19);
  char v6 = v5 * a2;
  unsigned int v7 = (v5 * a2) >> 3;
  uint64_t v8 = a1[6];
  if (v8)
  {
    a1[1] = v8 + v3[34] + v7;
  }
  else
  {
    unsigned int v15 = *(unsigned __int16 *)(v4 + 54);
    unsigned int v16 = *(_DWORD *)(v4 + 68);
    if (v7 + v15 <= v16) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = v16 - v7;
    }
    int v18 = brk_DataMap(a1[3], a1[4], v3[34] + v7, v17, (uint64_t)(a1 + 1));
    if ((v18 & 0x1FFF) == 0xA) {
      return 4294967294;
    }
    if (v18) {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v9 = (v6 & 7) + v5;
  int v10 = (unsigned __int8 *)a1[1];
  unsigned int v11 = *v10;
  if (v9 < 9)
  {
    uint64_t v19 = (v11 >> (8 - v9)) & (0xFFFFFFFF >> -(char)v5);
  }
  else
  {
    unsigned int v12 = ((0xFFu >> (v6 & 7)) & v11) << (v9 - 8);
    if (v9 < 0x11)
    {
      char v14 = 16;
      uint64_t v13 = 1;
    }
    else
    {
      LOBYTE(v13) = 1;
      char v14 = 16;
      do
      {
        v12 += v10[v13] << (v9 - v14);
        LOBYTE(v13) = v13 + 1;
        char v14 = 8 * v13 + 8;
      }
      while (v9 > (v14 & 0xF8u));
      uint64_t v13 = v13;
    }
    uint64_t v19 = (v10[v13] >> (v14 - v9)) + v12;
  }
  if (!a1[6]) {
    brk_DataUnmap(a1[3], a1[4], (uint64_t)v10);
  }
  return v19;
}

uint64_t WordToHashOpt(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, int a5, uint64_t a6)
{
  int v34 = 0;
  unsigned int v12 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
  {
    unsigned __int16 v13 = 0;
    goto LABEL_3;
  }
  uint64_t v23 = *(void **)(a1 + 16);
  uint64_t v24 = v23[1];
  uint64_t v25 = *(unsigned __int8 *)(a2 + a3);
  if (a5)
  {
    LODWORD(v25) = depes_tolower(v25);
    uint64_t v23 = *(void **)(a1 + 16);
  }
  uint64_t v26 = *v23;
  unsigned int v27 = *(unsigned __int8 *)(v24 - *(unsigned __int8 *)(*v23 + 4) + v25);
  uint64_t v28 = *(unsigned __int16 *)(*v23 + 46);
  if (*(_WORD *)(*v23 + 46))
  {
    uint64_t v29 = 0;
    int v30 = 0;
    while (v27 > *(unsigned __int8 *)(v23[3] + v29))
    {
      v30 += *(_DWORD *)(v23[5] + 4 * v29++);
      if (v28 == v29) {
        return 0xFFFFFFFFLL;
      }
    }
    LODWORD(v29) = (unsigned __int16)v29;
  }
  else
  {
    int v30 = 0;
    LODWORD(v29) = 0;
  }
  int v34 = v30;
  if (v29 != v28 && v27 == *(unsigned __int8 *)(v23[3] + v29))
  {
    *(_DWORD *)(a6 + 4) = v30;
    unsigned int v12 = *(_DWORD *)(v23[4] + 4 * v29);
    if (v12 <= *(unsigned __int8 *)(v26 + 18))
    {
      int v32 = *(_DWORD *)(v26 + 56);
      *(_DWORD *)a1 = v32;
      int v33 = *(unsigned __int8 *)(v26 + 17);
      *(unsigned char *)(a1 + 4) = v33;
      unsigned int v12 = v33 + 8 * v32;
    }
    *(_DWORD *)a6 = v12;
    unsigned __int16 v13 = 1;
LABEL_3:
    uint64_t v14 = a3;
    unsigned __int16 v15 = a4 - a3 + 1;
    while (v13 != v15)
    {
      unsigned int v16 = *(void **)(a1 + 16);
      uint64_t v17 = v16[1];
      uint64_t v18 = *(unsigned __int8 *)(a2 + v14 + v13);
      if (a5)
      {
        unint64_t v19 = depes_tolower(v18) - (unint64_t)*(unsigned __int8 *)(**(void **)(a1 + 16) + 4);
        unsigned int v12 = *(_DWORD *)a6;
      }
      else
      {
        unint64_t v19 = v18 - *(unsigned __int8 *)(*v16 + 4);
      }
      unsigned int v20 = *(unsigned __int8 *)(v17 + v19);
      if ((SearchEntry(a1, v12, v20, (unsigned __int16 *)(a6 + 8), &v34, (unsigned int *)a6) & 0x1FFF) == 0xA) {
        return 4294967294;
      }
      unsigned int v12 = *(_DWORD *)a6;
      if (!*(_DWORD *)a6)
      {
        uint64_t result = 0xFFFFFFFFLL;
        *(_DWORD *)(a6 + 4) = -1;
        return result;
      }
      unsigned int v21 = *(_DWORD *)(a6 + 4) + v34;
      *(_DWORD *)(a6 + 4) = v21;
      ++v13;
      if (v20 == *(unsigned __int8 *)(**(void **)(a1 + 16) + 16))
      {
        if (v12 == 1) {
          return v21;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    unsigned int v36 = 0;
    unsigned int v31 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 16);
    unsigned __int16 v35 = *(_WORD *)(a6 + 8);
    if ((SearchEntry(a1, v12, v31, &v35, &v34, &v36) & 0x1FFF) == 0xA) {
      return 4294967294;
    }
    if (v36 == 1) {
      return (v34 + *(_DWORD *)(a6 + 4));
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t SearchEntry(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int16 *a4, _DWORD *a5, unsigned int *a6)
{
  char v6 = a6;
  unsigned int SourceAddress = a2;
  unsigned int v12 = a2 >> 3;
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13)
  {
    uint64_t v46 = a6;
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v13 + *(unsigned int *)(v14 + 128) + v12;
  }
  else
  {
    uint64_t result = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 16) + 128) + v12, *(unsigned __int16 *)(**(void **)(a1 + 16) + 50), a1 + 8);
    if (result)
    {
      unsigned int SourceAddress = 0;
      goto LABEL_72;
    }
    uint64_t v46 = v6;
    uint64_t v14 = *(void *)(a1 + 16);
  }
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = SourceAddress & 7;
  *a5 = 0;
  uint64_t v15 = *(void *)(v14 + 88);
  unsigned int v16 = *(unsigned __int16 *)(v15
                            + 2
                            * HuffDecode((unsigned int *)a1, *(void *)(v14 + 48), *(unsigned __int16 *)(*(void *)v14 + 26)));
  uint64_t v17 = *(uint64_t **)(a1 + 16);
  unsigned int v18 = *(unsigned __int16 *)(*v17 + 24);
  unsigned __int16 v19 = v16 - v18;
  if (v16 > v18)
  {
    int v20 = 0;
    do
    {
      unsigned int v21 = *(uint64_t **)(a1 + 16);
      uint64_t v22 = v21[12];
      unsigned int v23 = HuffDecode((unsigned int *)a1, v21[7], *(unsigned __int16 *)(*v21 + 28));
      ++v20;
      unsigned int v24 = *a4;
    }
    while (v24 >= (unsigned __int16)v20);
    if (*(unsigned __int8 *)(v22 + v23) == a3)
    {
      *a5 = 0;
      unsigned __int16 v25 = v24 + 1;
      *a4 = v25;
      if (v25 < v19)
      {
        uint64_t v26 = *(void *)(a1 + 48);
        goto LABEL_44;
      }
      *a4 = 0;
      if (*(unsigned __int8 *)(**(void **)(a1 + 16) + 16) == a3)
      {
LABEL_43:
        uint64_t v26 = *(void *)(a1 + 48);
        unsigned int SourceAddress = 1;
LABEL_44:
        char v6 = v46;
        if (!v26) {
          goto LABEL_70;
        }
LABEL_71:
        uint64_t result = 0;
        goto LABEL_72;
      }
      unsigned int v43 = DecodeSourceLink(a1);
      char v6 = v46;
      if (!v43)
      {
        unsigned int SourceAddress = GetSourceAddress((unsigned int *)a1);
        goto LABEL_69;
      }
      unsigned int SourceAddress = v43;
      uint64_t v44 = **(void **)(a1 + 16);
      if (v43 > *(unsigned __int8 *)(v44 + 18)) {
        goto LABEL_69;
      }
      int v40 = *(unsigned __int8 *)(a1 + 4);
      int v45 = *(unsigned __int8 *)(v44 + 15);
      if ((v45 & v40) != 0)
      {
        do
          ++v40;
        while ((v45 & v40) != 0);
        *(unsigned char *)(a1 + 4) = v40;
      }
LABEL_59:
      unsigned int v42 = *(_DWORD *)a1;
      if (v40 == 8)
      {
        LOBYTE(v40) = 0;
        *(unsigned char *)(a1 + 4) = 0;
        *(_DWORD *)a1 = ++v42;
      }
      unsigned int SourceAddress = 8 * (v42 + v12) + v40;
LABEL_69:
      if (*(void *)(a1 + 48)) {
        goto LABEL_71;
      }
LABEL_70:
      brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 8));
      goto LABEL_71;
    }
    goto LABEL_39;
  }
  uint64_t v27 = v17[12];
  unsigned int v28 = *(unsigned __int8 *)(v27 + HuffDecode((unsigned int *)a1, v17[7], *(unsigned __int16 *)(*v17 + 28)));
  if (v28 == *(unsigned __int8 *)(**(void **)(a1 + 16) + 16))
  {
    unsigned int SourceAddress = 0;
    if (v28 == a3) {
      goto LABEL_19;
    }
    int v29 = 1;
    goto LABEL_18;
  }
  unsigned int SourceAddress = DecodeSourceLink(a1);
  if (!SourceAddress) {
    unsigned int SourceAddress = GetSourceAddress((unsigned int *)a1);
  }
  if (v28 != a3)
  {
    int v29 = DecodeSourceHash(a1);
LABEL_18:
    *a5 += v29;
  }
LABEL_19:
  BOOL v31 = v16 > 1;
  unsigned __int16 v32 = 1;
  if (v28 < a3 && v16 >= 2)
  {
    do
    {
      int v34 = *(uint64_t **)(a1 + 16);
      uint64_t v35 = v34[13];
      LOBYTE(v28) = *(unsigned char *)(v35
                             + HuffDecode((unsigned int *)a1, v34[8], *(unsigned __int16 *)(*v34 + 30)))
                  + v28;
      if (*(unsigned __int8 *)(**(void **)(a1 + 16) + 16) == v28)
      {
        if (a3 == v28) {
          goto LABEL_32;
        }
        int v36 = 1;
      }
      else
      {
        unsigned int SourceAddress = DecodeSourceLink(a1);
        if (!SourceAddress) {
          unsigned int SourceAddress = GetSourceAddress((unsigned int *)a1);
        }
        if (a3 == v28) {
          goto LABEL_32;
        }
        int v36 = DecodeSourceHash(a1);
      }
      *a5 += v36;
LABEL_32:
      BOOL v31 = v16 > ++v32;
    }
    while (a3 > v28 && v16 > v32);
  }
  if (a3 != v28)
  {
LABEL_39:
    unsigned int SourceAddress = 0;
    uint64_t result = 0;
    char v6 = v46;
    if (!*(void *)(a1 + 48)) {
      goto LABEL_70;
    }
    goto LABEL_72;
  }
  uint64_t v37 = **(void **)(a1 + 16);
  if (*(unsigned __int8 *)(v37 + 16) == a3) {
    goto LABEL_43;
  }
  if (SourceAddress <= *(unsigned __int8 *)(v37 + 18))
  {
    if (v31) {
      DecodeSourceHash(a1);
    }
    while (v16 > v32)
    {
      uint64_t v38 = *(uint64_t **)(a1 + 16);
      uint64_t v39 = v38[13];
      LOBYTE(a3) = *(unsigned char *)(v39
                            + HuffDecode((unsigned int *)a1, v38[8], *(unsigned __int16 *)(*v38 + 30)))
                 + a3;
      if (*(unsigned __int8 *)(**(void **)(a1 + 16) + 16) != a3)
      {
        if (!DecodeSourceLink(a1)) {
          GetSourceAddress((unsigned int *)a1);
        }
        if (v32 < (unsigned __int16)(v16 - 1)) {
          DecodeSourceHash(a1);
        }
      }
      ++v32;
    }
    int v40 = *(unsigned __int8 *)(a1 + 4);
    int v41 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 15);
    if ((v41 & v40) != 0)
    {
      do
        ++v40;
      while ((v41 & v40) != 0);
      *(unsigned char *)(a1 + 4) = v40;
    }
    char v6 = v46;
    goto LABEL_59;
  }
  if (!*(void *)(a1 + 48))
  {
    char v6 = v46;
    goto LABEL_70;
  }
  uint64_t result = 0;
  char v6 = v46;
LABEL_72:
  *char v6 = SourceAddress;
  return result;
}

uint64_t open_DctRom(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v11 = 0;
  int v5 = (_DWORD *)a1[6];
  if (v5)
  {
    unsigned int v11 = (_DWORD *)a1[6];
  }
  else
  {
    uint64_t v8 = brk_DataOpenEx(a1[3], a2, 1, (uint64_t)(a1 + 4));
    if (v8)
    {
      uint64_t v6 = v8;
      a1[4] = 0;
      return v6;
    }
    uint64_t v9 = brk_DataMap(a1[3], a1[4], 0, 40, (uint64_t)&v11);
    if (v9)
    {
      uint64_t v6 = v9;
      brk_DataClose(a1[3], a1[4]);
      a1[4] = 0;
      return v6;
    }
    int v5 = v11;
  }
  uint64_t v6 = 2306875417;
  if (*v5 == 65279
    && !LH_strnicmp((uint64_t)(v5 + 1), (uint64_t)"SCANSOFT", 8uLL)
    && !LH_strnicmp((uint64_t)(v11 + 3), (uint64_t)"SYS_DCT", 7uLL))
  {
    int v7 = v11[5];
    if (!a1[6]) {
      brk_DataUnmap(a1[3], a1[4], (uint64_t)v11);
    }
    uint64_t v6 = 0;
    *a3 = v7 - 40;
  }
  return v6;
}

uint64_t close_DctRom(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    brk_DataClose(*(void *)(a1 + 24), v1);
  }
  return 0;
}

uint64_t query_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v6 = a3;
  uint64_t v15 = 0;
  *a5 = 0;
  uint64_t v9 = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), 40, a3, (uint64_t)&v15);
  if (v9)
  {
    uint64_t v10 = v9;
    brk_DataClose(*(void *)(a1 + 24), *(void *)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    uint64_t v11 = v15;
    if (v6)
    {
      unsigned int v12 = 0;
      while (LH_stricmp((char *)(v11 + v12), a2))
      {
        uint64_t v11 = v15;
        int v13 = strlen((const char *)(v15 + v12));
        v12 += v13 + ((~(_BYTE)v13 - (_BYTE)v12) & 3) + 5;
        if (v12 >= v6) {
          goto LABEL_9;
        }
      }
      *a5 = 1;
      uint64_t v11 = v15;
    }
LABEL_9:
    brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), v11);
    return 0;
  }
  return v10;
}

uint64_t init_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = a3;
  int v36 = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    int v36 = (const char *)(v8 + 40);
  }
  else
  {
    uint64_t v15 = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), 40, a3, (uint64_t)&v36);
    if (v15)
    {
LABEL_10:
      uint64_t v14 = v15;
      brk_DataClose(*(void *)(a1 + 24), *(void *)(a1 + 32));
      *(void *)(a1 + 32) = 0;
      return v14;
    }
  }
  if (v5)
  {
    unsigned int v9 = 0;
    uint64_t v10 = (char *)v36;
    while (1)
    {
      int v11 = LH_stricmp(&v10[v9], a2);
      uint64_t v10 = (char *)v36;
      int v12 = strlen(&v36[v9]);
      int v13 = (~(_BYTE)v12 - (_BYTE)v9) & 3;
      if (!v11) {
        break;
      }
      v9 += v13 + v12 + 5;
      if (v9 >= v5) {
        goto LABEL_7;
      }
    }
    uint64_t v16 = *(unsigned int *)&v36[(v12 + v9 + v13 + 1) & 0xFFFFFFFC];
    uint64_t v17 = *(void *)(a1 + 48);
    if (v17
      || (brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v36), (uint64_t v17 = *(void *)(a1 + 48)) != 0))
    {
      if (v16 > *(_DWORD *)(a1 + 56)) {
        return 2306875412;
      }
      LODWORD(v18) = *(_DWORD *)(v17 + v16);
      goto LABEL_16;
    }
    uint64_t v15 = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), v16, 4, (uint64_t)&v36);
    if (!v15)
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(unsigned int *)v36;
      if (!v17)
      {
        brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v36);
        uint64_t v14 = brk_DataMap(*(void *)(a1 + 24), a4, v16, v18, *(void *)(a1 + 16));
        if (v14) {
          return v14;
        }
        int v20 = *(uint64_t **)(a1 + 16);
        uint64_t v19 = *v20;
        goto LABEL_17;
      }
LABEL_16:
      uint64_t v19 = v17 + v16;
      int v20 = *(uint64_t **)(a1 + 16);
      *int v20 = v19;
LABEL_17:
      uint64_t v14 = 0;
      uint64_t v21 = v19 + 72 + ((*(unsigned __int8 *)(v19 + 5) - *(unsigned __int8 *)(v19 + 4) + 4) & 0xFFFFFFFC);
      v20[1] = v19 + 72;
      v20[2] = v21;
      uint64_t v22 = v21 + ((2 * (*(unsigned __int8 *)(v19 + 7) - *(unsigned __int8 *)(v19 + 6)) + 5) & 0xFFFFFFFC);
      LODWORD(v21) = *(unsigned __int16 *)(v19 + 46);
      uint64_t v23 = v22 + ((v21 + 3) & 0x1FFFC);
      v20[3] = v22;
      v20[4] = v23;
      uint64_t v24 = v23 + 4 * v21;
      uint64_t v25 = v24 + 4 * v21;
      v20[5] = v24;
      v20[6] = v25;
      uint64_t v26 = v25 + 4 * *(unsigned __int16 *)(v19 + 26) + 4;
      uint64_t v27 = v26 + 4 * *(unsigned __int16 *)(v19 + 28) + 4;
      v20[7] = v26;
      v20[8] = v27;
      uint64_t v28 = v27 + 4 * *(unsigned __int16 *)(v19 + 30) + 4;
      uint64_t v29 = v28 + 4 * *(unsigned __int16 *)(v19 + 32) + 4;
      v20[9] = v28;
      v20[10] = v29;
      uint64_t v30 = v29 + 4 * *(unsigned __int16 *)(v19 + 34) + 4;
      uint64_t v31 = v30 + ((2 * *(unsigned __int16 *)(v19 + 36) + 3) & 0x3FFFC);
      v20[11] = v30;
      v20[12] = v31;
      uint64_t v32 = v31 + ((*(unsigned __int16 *)(v19 + 38) + 3) & 0x1FFFC);
      uint64_t v33 = v32 + ((*(unsigned __int16 *)(v19 + 40) + 3) & 0x1FFFC);
      v20[13] = v32;
      v20[14] = v33;
      v20[15] = v33 + ((2 * *(unsigned __int16 *)(v19 + 42) + 3) & 0x3FFFC);
      LODWORD(v33) = *(_DWORD *)(v19 + 60);
      int v34 = *(_DWORD *)(v19 + 64);
      LODWORD(v33) = ((v33 + 3) & 0xFFFFFFFC) + v18 + v16;
      *((_DWORD *)v20 + 32) = v18 + v16;
      *((_DWORD *)v20 + 33) = v33;
      *((_DWORD *)v20 + 34) = ((v34 + 3) & 0xFFFFFFFC) + v33;
      return v14;
    }
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v14 = 2306875412;
  if (!*(void *)(a1 + 48)) {
    brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v36);
  }
  return v14;
}

uint64_t exit_DctRom(uint64_t a1, uint64_t a2)
{
  if (a2) {
    brk_DataUnmap(*(void *)(a1 + 24), a2, **(void **)(a1 + 16));
  }
  return 0;
}

uint64_t GetMaxOutLen(uint64_t a1)
{
  return *(unsigned __int16 *)(**(void **)(a1 + 16) + 48);
}

uint64_t GetFieldSeparator(uint64_t a1)
{
  return *(unsigned __int8 *)(**(void **)(a1 + 16) + 9);
}

uint64_t set_DctBrk(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

BOOL test_DCT(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (a3 > a4) {
    return a4 >= a3;
  }
  LOWORD(v10) = a3;
  while (1)
  {
    uint64_t v11 = *(unsigned __int8 *)(a2 + (__int16)v10);
    if (a5) {
      LODWORD(v11) = depes_tolower(v11);
    }
    uint64_t v12 = **(void **)(a1 + 16);
    if (v11 < *(unsigned __int8 *)(v12 + 4) || v11 > *(unsigned __int8 *)(v12 + 5)) {
      break;
    }
    int v10 = (__int16)(v10 + 1);
    if (v10 > a4) {
      return a4 >= a3;
    }
  }
  return 0;
}

uint64_t DctLookup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, __int16 *a4, int a5, _WORD *a6, uint64_t a7)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  memset(v54, 0, 41);
  if ((unsigned __int16)(*a4 - *a3) > 0x7FFEu
    || *(__int16 *)(**(void **)(a1 + 16) + 22) <= (__int16)(*a4 - *a3)
    || !test_DCT(a1, a2, (__int16)*a3, *a4, a5))
  {
    return 20;
  }
  int v14 = WordToHashOpt(a1, a2, *a3, *a4, a5, a7);
  if (v14 == -2) {
    return 10;
  }
  if (v14 < 0) {
    return 20;
  }
  unsigned int v15 = DecoAddr((void *)a1, v14);
  if (v15 == -2) {
    return 10;
  }
  if ((v15 & 0x80000000) != 0) {
    return 20;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17)
  {
    uint64_t v18 = (unsigned char *)(v17 + *(unsigned int *)(*(void *)(a1 + 16) + 132) + v15);
    *(void *)(a1 + 8) = v18;
  }
  else
  {
    uint64_t result = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 16) + 132) + v15, *(unsigned __int16 *)(**(void **)(a1 + 16) + 52), a1 + 8);
    if (result) {
      return result;
    }
    uint64_t v18 = *(unsigned char **)(a1 + 8);
  }
  uint64_t v19 = 0;
  LOWORD(v20) = 0;
  int v21 = 0;
  LOBYTE(v22) = *v18;
  uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
  do
  {
    v23[(__int16)v21++] = v22;
    uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
    uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v25 = *v24;
    do
    {
      uint64_t v20 = (__int16)v20;
      unsigned __int8 v26 = v24[2][2 * (v23[(__int16)v20] - (unint64_t)v25[6])];
      if (v26)
      {
        __int16 v27 = v21 - 1;
        do
        {
          if ((int)v20 < (__int16)(v21 - 1))
          {
            uint64_t v28 = v27;
            do
            {
              *(unsigned char *)(*(void *)(a1 + 40) + v28 + 1) = *(unsigned char *)(*(void *)(a1 + 40) + v28);
              --v28;
            }
            while (v28 > v20);
            uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
            uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
            uint64_t v25 = *v24;
          }
          ++v21;
          v23[v20 + 1] = v24[2][2 * (v23[v20] - (unint64_t)v25[6]) + 1];
          *(unsigned char *)(*(void *)(a1 + 40) + v20) = v26;
          uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
          uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
          uint64_t v25 = *v24;
          unsigned __int8 v26 = v24[2][2 * (v23[v20] - (unint64_t)(*v24)[6])];
          ++v27;
        }
        while (v26);
      }
      LODWORD(v20) = (__int16)(v20 + 1);
    }
    while ((int)v20 < (__int16)v21);
    ++v19;
    unsigned int v22 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v19);
    unsigned int v29 = v25[10];
  }
  while (v22 != v25[8] && (v22 < v29 || v22 > v25[11]));
  unsigned int v30 = *v23;
  if (v30 >= v29)
  {
    do
    {
      int v31 = v30;
      unsigned int v32 = v25[11];
      if (v30 > v32) {
        break;
      }
      uint64_t v33 = *(void *)(a1 + 8);
      int v34 = v25[8];
      int v35 = *(unsigned __int8 *)(v33 + (int)v19);
      if (v35 == v34)
      {
LABEL_34:
        int v38 = 1;
      }
      else
      {
        int v36 = (unsigned __int8 *)(v33 + (int)v19 + 1);
        while (v35 < v29 || v32 < v35)
        {
          LODWORD(v19) = v19 + 1;
          int v37 = *v36++;
          LOBYTE(v35) = v37;
          if (v37 == v34) {
            goto LABEL_34;
          }
        }
        int v38 = 0;
        LOBYTE(v34) = v35;
      }
      LODWORD(v19) = v19 + v38;
      unsigned int v39 = v29;
      unsigned __int8 v40 = v29 - 1;
      if (v34 <= v32 && v34 >= v39) {
        unsigned __int8 v40 = v34;
      }
      if (v40 >= v30)
      {
        LODWORD(v19) = v19 + 1;
      }
      else
      {
        LOWORD(v42) = 0;
        int v43 = 0;
        uint64_t v44 = v24[2];
        uint64_t v45 = v25[6];
        uint64_t v19 = (int)v19;
        do
        {
          uint64_t v46 = (__int16)v43++;
          *((unsigned char *)v54 + v46) = *(unsigned char *)(v33 + v19);
          do
          {
            uint64_t v42 = (__int16)v42;
            uint64_t v47 = *((unsigned __int8 *)v54 + (__int16)v42);
            if (v44[2 * (v47 - v45)])
            {
              __int16 v48 = v43 - 1;
              do
              {
                if ((int)v42 < (__int16)(v43 - 1))
                {
                  uint64_t v49 = v48;
                  do
                  {
                    *((unsigned char *)v54 + v49 + 1) = *((unsigned char *)v54 + v49);
                    --v49;
                  }
                  while (v49 > v42);
                  uint64_t v47 = *((unsigned __int8 *)v54 + v42);
                }
                uint64_t v50 = &v44[2 * (v47 - v45)];
                *((unsigned char *)v54 + v42 + 1) = v50[1];
                uint64_t v47 = *v50;
                *((unsigned char *)v54 + v42) = v47;
                ++v43;
                ++v48;
              }
              while (v44[2 * (v47 - v45)]);
            }
            LODWORD(v42) = (__int16)(v42 + 1);
            LOBYTE(v30) = v30 - 1;
          }
          while ((int)v42 < (__int16)v43 && v30 >= v40);
          ++v19;
        }
        while (v30 >= v40);
        unsigned int v30 = v31 - v40;
        if ((__int16)v21 >= 2)
        {
          uint64_t v51 = (unsigned __int16)v21 - 1;
          uint64_t v52 = (__int16)(v21 + v31 - v40) - 1;
          do
            *(unsigned char *)(*(void *)(a1 + 40) + v52--) = *(unsigned char *)(*(void *)(a1 + 40) + v51--);
          while (v51);
        }
        if ((v30 & 0x80000000) == 0)
        {
          int v53 = 0;
          do
          {
            *(unsigned char *)(*(void *)(a1 + 40) + (__int16)v53) = *((unsigned char *)v54 + (__int16)v53);
            ++v53;
          }
          while ((int)v30 >= (__int16)v53);
        }
        LOWORD(v21) = v21 + v30;
        LOBYTE(v30) = v40;
      }
      uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
      uint64_t v25 = *v24;
      unsigned int v29 = (*v24)[10];
    }
    while (v29 <= v30);
  }
  if (!*(void *)(a1 + 48)) {
    brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 8));
  }
  uint64_t result = 0;
  *a6 = v21;
  return result;
}

uint64_t HuffDecode(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (__int16 *)(a2 + 4 * a3);
  if (*v3 != -1)
  {
    uint64_t v4 = *((void *)a1 + 1);
    a3 = a3;
    uint64_t v5 = *a1;
    unsigned __int8 v6 = *(unsigned char *)(v4 + v5);
    unsigned int v7 = *((unsigned __int8 *)a1 + 4);
    do
    {
      if (!v7) {
        unsigned __int8 v6 = *(unsigned char *)(v4 + v5);
      }
      if (((1 << v7) & v6) == 0) {
        uint64_t v3 = (__int16 *)(a2 + 4 * a3 + 2);
      }
      a3 = (unsigned __int16)*v3;
      if (v7 > 6)
      {
        unsigned int v7 = 0;
        LODWORD(v5) = v5 + 1;
        *a1 = v5;
      }
      else
      {
        ++v7;
      }
      *((unsigned char *)a1 + 4) = v7;
      uint64_t v3 = (__int16 *)(a2 + 4 * a3);
    }
    while (*v3 != -1);
  }
  return a3;
}

uint64_t DecodeSourceLink(uint64_t a1)
{
  unsigned int v2 = *(uint64_t **)(a1 + 16);
  unsigned int v3 = *(unsigned __int8 *)(*v2 + 12);
  int v4 = HuffDecode((unsigned int *)a1, v2[10], *(unsigned __int16 *)(*v2 + 34));
  int v5 = (v4 * v3) & 0xF;
  char v6 = 16 - v5;
  unsigned int v7 = *(uint64_t **)(a1 + 16);
  uint64_t v8 = v7[15];
  int v9 = (unsigned __int16)((v4 * v3) >> 4);
  int v10 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  if (16 - v5 >= v3)
  {
    uint64_t result = v10 & (0xFFFFu >> (16 - v3));
  }
  else
  {
    int v11 = *(unsigned __int16 *)(v8 + 2 * (v9 + 1));
    if (32 - v5 >= v3) {
      uint64_t result = (((0xFFFFu >> (-(char)v3 - v5)) & v11) << v6) + v10;
    }
    else {
      uint64_t result = (v11 << v6)
    }
             + v10
             + (((0xFFFFu >> (48 - v3 - v5)) & *(unsigned __int16 *)(v8 + 2 * (v9 + 2))) << (32 - v5));
  }
  uint64_t v13 = *v7;
  if (result > *(unsigned __int8 *)(v13 + 18)) {
    return (result << *(unsigned char *)(v13 + 14));
  }
  return result;
}

uint64_t GetSourceAddress(unsigned int *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = **((void **)a1 + 2);
  int v3 = *(unsigned __int8 *)(v2 + 12);
  int v4 = *((unsigned __int8 *)a1 + 4);
  unsigned int v5 = v4 + v3;
  uint64_t v6 = *a1;
  int v7 = *(unsigned __int8 *)(v1 + v6) >> v4;
  if ((v4 + v3) < 9)
  {
    unsigned int v12 = v7 & (0xFFu >> (8 - v3));
  }
  else
  {
    if (v5 < 0x11)
    {
      char v11 = 16;
      LOBYTE(v9) = 8;
      int v8 = 1;
    }
    else
    {
      int v8 = 1;
      LOBYTE(v9) = 8;
      int v10 = 1;
      do
      {
        v7 += *(unsigned __int8 *)(v1 + (v8 + v6)) << (v9 - v4);
        int v8 = ++v10;
        int v9 = 8 * v10;
        char v11 = 8 * v10 + 8;
      }
      while (v5 > v9 + 8);
    }
    unsigned int v12 = (((0xFFu >> (v11 - v5)) & *(unsigned __int8 *)(v1 + (v8 + v6))) << (v9 - v4)) + v7;
  }
  unsigned int v13 = v4 + v3;
  *a1 = v6 + ((v13 >> 3) & 7);
  *((unsigned char *)a1 + 4) = v13 & 7;
  return v12 << *(unsigned char *)(v2 + 14);
}

uint64_t DecodeSourceHash(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  unsigned int v3 = *(unsigned __int8 *)(*v2 + 13);
  unsigned int v4 = HuffDecode((unsigned int *)a1, v2[9], *(unsigned __int16 *)(*v2 + 32));
  if (v3 <= 0x10) {
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 112) + 2 * v4);
  }
  int v6 = (v4 * v3) & 0xF;
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 112);
  int v8 = (unsigned __int16)((v4 * v3) >> 4);
  int v9 = *(unsigned __int16 *)(v7 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  int v10 = *(unsigned __int16 *)(v7 + 2 * (v8 + 1));
  if (32 - v6 >= v3) {
    return (((0xFFFFu >> (-(char)v3 - v6)) & v10) << (16 - v6)) + v9;
  }
  else {
    return (v10 << (16 - v6))
  }
         + v9
         + (((0xFFFFu >> (48 - v3 - v6)) & *(unsigned __int16 *)(v7 + 2 * (v8 + 2))) << (32 - v6));
}

uint64_t try_flipped(long long *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*(_DWORD *)a1 != 1163019088) {
    return 0;
  }
  long long v4 = *a1;
  long long v5 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  *(int8x8_t *)(a2 + 4) = vrev32_s8(*(int8x8_t *)((char *)a1 + 4));
  *(int8x8_t *)(a2 + 16) = vrev16_s8((int8x8_t)a1[1]);
  *(_WORD *)(a2 + 24) = bswap32(*((unsigned __int16 *)a1 + 12)) >> 16;
  *(_WORD *)(a2 + 26) = bswap32(*((unsigned __int16 *)a1 + 13)) >> 16;
  *(_WORD *)(a2 + 28) = bswap32(*((unsigned __int16 *)a1 + 14)) >> 16;
  if (a3)
  {
    long long v6 = *a3;
    long long v7 = a3[1];
    *(void *)(a4 + 32) = *((void *)a3 + 4);
    *(_OWORD *)a4 = v6;
    *(_OWORD *)(a4 + 16) = v7;
    *(int8x8_t *)a4 = vrev32_s8(*(int8x8_t *)a3);
  }
  return a2;
}

uint64_t nuance_pcre_fullinfo(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t result = 4294967294;
  if (a1 && a4)
  {
    if (a2 && (*(unsigned char *)a2 & 1) != 0) {
      int v9 = *(long long **)(a2 + 8);
    }
    else {
      int v9 = 0;
    }
    memset(v14, 0, sizeof(v14));
    memset(v15, 0, sizeof(v15));
    uint64_t v16 = 0;
    if (*(_DWORD *)a1 != 1346589253)
    {
      uint64_t v10 = try_flipped((long long *)a1, (uint64_t)v14, v9, (uint64_t)v15);
      if (!v10) {
        return 4294967292;
      }
      a1 = v10;
      if (v9) {
        int v9 = v15;
      }
      else {
        int v9 = 0;
      }
    }
    switch(a3)
    {
      case 0:
        uint64_t result = 0;
        uint64_t v11 = *(_DWORD *)(a1 + 8) & 0x7A7FLL;
        goto LABEL_36;
      case 1:
        uint64_t result = 0;
        uint64_t v11 = *(unsigned int *)(a1 + 4);
        goto LABEL_36;
      case 2:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 16);
        goto LABEL_40;
      case 3:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 18);
        goto LABEL_40;
      case 4:
        int v13 = *(_DWORD *)(a1 + 8);
        if ((v13 & 0x40000000) != 0)
        {
          int v12 = *(unsigned __int16 *)(a1 + 20);
        }
        else if ((v13 & 0x10000000) != 0)
        {
          int v12 = -1;
        }
        else
        {
          int v12 = -2;
        }
        goto LABEL_39;
      case 5:
        if (!v9 || (*((unsigned char *)v9 + 4) & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v11 = *(void *)(a2 + 8) + 8;
        goto LABEL_35;
      case 6:
        if ((*(unsigned char *)(a1 + 11) & 0x20) != 0) {
          int v12 = *(unsigned __int16 *)(a1 + 22);
        }
        else {
          int v12 = -1;
        }
LABEL_39:
        uint64_t result = 0;
        goto LABEL_40;
      case 7:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 26);
        goto LABEL_40;
      case 8:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 28);
LABEL_40:
        *a4 = v12;
        return result;
      case 9:
        uint64_t result = 0;
        uint64_t v11 = a1 + *(unsigned __int16 *)(a1 + 24);
        goto LABEL_36;
      case 10:
        if (v9) {
          uint64_t v11 = *(unsigned int *)v9;
        }
        else {
LABEL_34:
        }
          uint64_t v11 = 0;
LABEL_35:
        uint64_t result = 0;
        goto LABEL_36;
      case 11:
        uint64_t result = 0;
        uint64_t v11 = (uint64_t)&pcre_default_tables;
LABEL_36:
        *(void *)a4 = v11;
        break;
      default:
        uint64_t result = 4294967293;
        break;
    }
  }
  return result;
}

uint64_t nuance_pcre_compile(uint64_t a1, int a2, char *a3, uint64_t a4, const char **a5, _DWORD *a6, char *a7)
{
  v202[126] = *MEMORY[0x263EF8340];
  v202[0] = 0;
  int v201 = 0;
  char v200 = 0;
  if ((safeh_HandleCheck(a1, a2, 56663, 32) & 0x80000000) != 0 || !a5) {
    return 0;
  }
  *a5 = 0;
  if (!a6)
  {
    uint64_t v14 = 0;
    unsigned int v15 = "erroffset passed as NULL";
    goto LABEL_11;
  }
  *a6 = 0;
  if ((a4 & 0x2800) == 0x800)
  {
    int valid = valid_utf8(a3, -1);
    *a6 = valid;
    if ((valid & 0x80000000) == 0)
    {
      uint64_t v14 = 0;
      unsigned int v15 = "invalid UTF-8 string";
LABEL_11:
      *a5 = v15;
      return v14;
    }
  }
  if ((a4 & 0xFFFF8580) != 0)
  {
    uint64_t v14 = 0;
    unsigned int v15 = "unknown option bit(s) set";
    goto LABEL_11;
  }
  uint64_t v184 = 0;
  int v183 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  long long v197 = 0u;
  long long v198 = 0u;
  long long v196 = 0u;
  if (a7) {
    uint64_t v20 = a7;
  }
  else {
    uint64_t v20 = (char *)&pcre_default_tables;
  }
  uint64_t v192 = v20;
  unsigned __int8 v193 = v20 + 256;
  int v182 = v20;
  uint64_t v185 = (unsigned __int8 *)a3;
  int v194 = v20 + 512;
  int v195 = v20 + 832;
  *(void *)&long long v198 = 0;
  uint64_t v199 = (unsigned __int8 *)(a3 - 1);
  int v21 = digitab;
  uint64_t v22 = a4;
  int v23 = 3;
  int v24 = -1;
LABEL_17:
  uint64_t v25 = v199;
  unsigned __int8 v26 = v199 + 1;
  uint64_t v27 = *++v199;
  if (!v27)
  {
LABEL_398:
    if ((v22 & 0x4000) != 0) {
      int v154 = 10;
    }
    else {
      int v154 = 4;
    }
    int v155 = v154 + v23;
    if (v154 + v23 > 0x10000)
    {
      uint64_t v14 = 0;
      unsigned int v15 = "regular expression too large";
      goto LABEL_11;
    }
    uint64_t v156 = v22;
    int v157 = v17 + 3;
    unsigned int v158 = v155 + (v17 + 3) * v183 + 48;
    uint64_t v159 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v158);
    uint64_t v14 = v159;
    if (!v159)
    {
      unsigned int v15 = "failed to get memory";
      goto LABEL_11;
    }
    *(_DWORD *)uint64_t v159 = 1346589253;
    *(_DWORD *)(v159 + 4) = v158;
    *(_WORD *)(v159 + 30) = 0;
    *(_DWORD *)(v159 + 8) = v156;
    *(_DWORD *)(v159 + 12) = 0;
    *(_WORD *)(v159 + 24) = 48;
    *(_WORD *)(v159 + 26) = v157;
    *(_WORD *)(v159 + 28) = v183;
    if (v182 == (char *)&pcre_default_tables) {
      unsigned __int16 v160 = 0;
    }
    else {
      unsigned __int16 v160 = v182;
    }
    *(void *)(v159 + 32) = v160;
    *(void *)(v159 + 40) = 0;
    DWORD2(v197) = 0;
    HIDWORD(v197) = v157;
    *(void *)&long long v197 = v159 + 48;
    char v161 = (unsigned char *)(v159 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183);
    *(void *)&long long v196 = v161;
    *((void *)&v196 + 1) = v185;
    *((void *)&v198 + 1) = 0;
    uint64_t v199 = v185;
    char v200 = v161;
    *char v161 = 80;
    int v201 = 0;
    compile_regex_0(v156, v156 & 7, &v201, (unint64_t *)&v200, &v199, a5, 0, 0, (int *)v202 + 1, (int *)v202, 0, (uint64_t)&v192);
    *(_WORD *)(v14 + 16) = v201;
    int v162 = HIDWORD(v198);
    *(_WORD *)(v14 + 18) = v198;
    if (v162) {
      *(_DWORD *)(v14 + 8) |= 0x4000000u;
    }
    if (!*a5 && *v199) {
      *a5 = "unmatched parentheses";
    }
    uint64_t v163 = v200;
    unsigned char *v200 = 0;
    if (v163 - v161 + 1 > v155) {
      *a5 = "internal error: code overflow";
    }
    if (*(unsigned __int16 *)(v14 + 18) > *(unsigned __int16 *)(v14 + 16))
    {
      *a5 = "reference to non-existent subpattern";
LABEL_418:
      heap_Free(*(void **)(*(void *)a1 + 8), v14);
      goto LABEL_421;
    }
    if (*a5) {
      goto LABEL_418;
    }
    if ((v156 & 0x10) == 0)
    {
      int v190 = v156;
      int v165 = DWORD1(v198);
      if (is_anchored_0(v14 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183, &v190, 0, SDWORD1(v198)))
      {
        int v166 = 16;
      }
      else
      {
        LOWORD(firstassertedchar) = WORD2(v202[0]);
        if ((v202[0] & 0x8000000000000000) != 0
          && (int firstassertedchar = find_firstassertedchar(v14 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183, &v190, 0), firstassertedchar < 0))
        {
          if (!is_startline_0(v14 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183, 0, v165))goto LABEL_432; {
          int v166 = 0x10000000;
          }
        }
        else
        {
          if ((firstassertedchar & 0x100) == 0
            || (__int16 v168 = firstassertedchar,
                v193[firstassertedchar] != firstassertedchar))
          {
            __int16 v168 = firstassertedchar;
          }
          *(_WORD *)(v14 + 20) = v168;
          int v166 = 0x40000000;
        }
      }
      *(_DWORD *)(v14 + 8) |= v166;
    }
LABEL_432:
    __int16 v169 = v202[0];
    if ((v202[0] & 0x80000000) == 0)
    {
      int v170 = *(_DWORD *)(v14 + 8);
      if ((v202[0] & 0x200) != 0 || (v170 & 0x10) == 0)
      {
        if ((v202[0] & 0x100) != 0 && v193[LOBYTE(v202[0])] == LOBYTE(v202[0])) {
          __int16 v169 = v202[0] & 0xFEFF;
        }
        *(_WORD *)(v14 + 22) = v169;
        *(_DWORD *)(v14 + 8) = v170 | 0x20000000;
      }
    }
    return v14;
  }
  uint64_t v191 = 0;
  if (v19)
  {
    if ((v22 & 0x4000) != 0) {
      v23 += 6;
    }
    if (v27 == 92)
    {
      int v29 = v25[2];
      uint64_t v28 = v25 + 2;
      if (v29 == 69)
      {
        int v19 = 0;
        uint64_t v199 = v28;
        goto LABEL_77;
      }
      v23 += 2;
LABEL_74:
      int v44 = 2;
      uint64_t v18 = 1;
      goto LABEL_78;
    }
    goto LABEL_63;
  }
  if ((v22 & 8) != 0)
  {
    if (v195[v27]) {
      goto LABEL_72;
    }
    if (v27 == 35)
    {
      while (1)
      {
        int v39 = *++v26;
        int v38 = v39;
        if (v39 == 10) {
          break;
        }
        if (!v38) {
          goto LABEL_398;
        }
      }
      int v19 = 0;
      goto LABEL_76;
    }
  }
  ++v24;
  unsigned int v187 = v22;
  if ((v22 & 0x4000) != 0 && (v27 - 42) >= 2 && v27 != 63)
  {
    if (v27 == 123)
    {
      unsigned int v179 = v17;
      int v180 = v24;
      uint64_t v30 = v18;
      int v31 = is_counted_repeat(v25 + 2);
      uint64_t v18 = v30;
      uint64_t v17 = v179;
      int v24 = v180;
      int v21 = digitab;
      uint64_t v22 = v187;
      if (v31) {
        goto LABEL_85;
      }
    }
    v23 += 6;
  }
  if ((int)v27 <= 62)
  {
    switch((int)v27)
    {
      case '$':
      case '.':
        goto LABEL_73;
      case '(':
        int v32 = v24;
        if (v25[2] != 63)
        {
          int v59 = 0;
          if ((v22 & 0x1000) != 0)
          {
            int v61 = 3;
          }
          else
          {
            int v60 = v201++;
            if (v60 <= 99) {
              int v61 = 3;
            }
            else {
              int v61 = 6;
            }
          }
          unsigned int v107 = HIDWORD(v184);
          goto LABEL_263;
        }
        break;
      case ')':
        v23 += 3;
        if (HIDWORD(v184))
        {
          int v37 = v23 - *((_DWORD *)&v202[26] + (HIDWORD(v184) - 1));
          LODWORD(v184) = *((unsigned __int8 *)&v202[1] + --HIDWORD(v184));
        }
        else
        {
          HIDWORD(v184) = 0;
          int v37 = 0;
        }
        goto LABEL_225;
      case '*':
      case '+':
        goto LABEL_69;
      default:
        goto LABEL_63;
    }
    HIDWORD(v189) = 0;
    int v190 = 0;
    unsigned __int8 v26 = v25 + 3;
    unsigned __int8 v33 = v25[3];
    switch(v33)
    {
      case '!':
      case ':':
      case '=':
      case '>':
        int v59 = 0;
        uint64_t v199 = v25 + 3;
        goto LABEL_262;
      case '#':
        uint64_t v119 = v25 + 4;
        while (2)
        {
          if (!*v119)
          {
            uint64_t v199 = v119;
            int v134 = "missing) after comment";
            goto LABEL_370;
          }
          if (*v119 != 41)
          {
            ++v119;
            continue;
          }
          break;
        }
        uint64_t v199 = v119;
        int v44 = 2;
        goto LABEL_383;
      case '(':
        BOOL v120 = v25 + 4;
        uint64_t v121 = v25[4];
        if (v121 == 82)
        {
          int v123 = v25[5];
          int v122 = v25 + 5;
          if (v123 == 41)
          {
            int v59 = 0;
            uint64_t v199 = v122;
            v23 += 3;
            goto LABEL_262;
          }
LABEL_353:
          uint64_t v199 = v120;
          int v134 = "assertion expected after (?(";
          goto LABEL_370;
        }
        uint64_t v128 = v17;
        if ((v21[v121] & 4) == 0)
        {
          uint64_t v199 = v25 + 2;
          if (v121 == 63)
          {
            unsigned int v135 = v25[5];
            if (v135 <= 0x3D && ((1 << v135) & 0x3000000200000000) != 0)
            {
              int v59 = 0;
              goto LABEL_262;
            }
          }
          goto LABEL_353;
        }
        int v142 = v25 + 4;
        do
        {
          int v144 = *++v142;
          int v143 = v144;
        }
        while ((v21[v144] & 4) != 0);
        v23 += 3;
        uint64_t v199 = v142;
        if (v143 == 41) {
          goto LABEL_368;
        }
        unsigned __int16 v138 = "malformed number after (?(";
LABEL_382:
        *a5 = v138;
        int v44 = 8;
        uint64_t v22 = v187;
        uint64_t v17 = v128;
        goto LABEL_383;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        do
        {
          int v35 = *++v26;
          int v34 = v35;
        }
        while ((v21[v35] & 4) != 0);
        goto LABEL_36;
      case '<':
        int v125 = v25[4];
        int v124 = v125;
        uint64_t v199 = v25 + 4;
        if (v125 == 61 || v124 == 33)
        {
          v23 += 3;
          int v59 = 3;
          goto LABEL_262;
        }
        int v134 = "unrecognized character after (?<";
        goto LABEL_370;
      case 'C':
        do
        {
          int v58 = *++v26;
          int v57 = v58;
        }
        while ((v21[v58] & 4) != 0);
        uint64_t v199 = v26;
        int v24 = v32;
        if (v57 == 41)
        {
          v23 += 6;
          goto LABEL_283;
        }
        uint64_t v109 = "closing) for (?C expected";
        goto LABEL_260;
      case 'P':
        uint64_t v126 = v25 + 4;
        int v127 = v25[4];
        uint64_t v199 = v25 + 4;
        if ((v127 - 61) < 2)
        {
          uint64_t v128 = v17;
          do
          {
            int v130 = *++v126;
            int v129 = v130;
          }
          while ((v195[v130] & 0x10) != 0);
          uint64_t v199 = v126;
          if (v129 != 41)
          {
LABEL_354:
            unsigned __int16 v138 = "syntax error after (?P";
            goto LABEL_382;
          }
LABEL_368:
          int v59 = 0;
          uint64_t v22 = v187;
          uint64_t v17 = v128;
          goto LABEL_262;
        }
        if (v127 == 60)
        {
          uint64_t v128 = v17;
          uint64_t v136 = -1;
          do
            uint64_t v137 = v25[v136++ + 6];
          while ((v195[v137] & 0x10) != 0);
          uint64_t v199 = &v25[v136 + 5];
          if (v137 != 62) {
            goto LABEL_354;
          }
          int v59 = 0;
          ++v183;
          if (v136 <= (int)v17) {
            uint64_t v17 = v17;
          }
          else {
            uint64_t v17 = v136;
          }
          uint64_t v22 = v187;
          goto LABEL_262;
        }
        int v134 = "unrecognized character after (?P";
        goto LABEL_370;
      case 'R':
        int v34 = v25[4];
        unsigned __int8 v26 = v25 + 4;
LABEL_36:
        int v24 = v32;
        uint64_t v199 = v26;
        if (v34 == 41)
        {
          int v36 = v26[1];
          if ((v36 - 42) < 2 || v36 == 63 || v36 == 123)
          {
            v23 += 9;
            int v37 = 11;
LABEL_225:
            unsigned __int16 v100 = v26 + 1;
            unsigned int v101 = v26[1];
            if (v101 <= 0x3E)
            {
              if (v101 == 42)
              {
                uint64_t v191 = 0xFFFFFFFFLL;
                ++v23;
                goto LABEL_248;
              }
              if (v101 == 43)
              {
                uint64_t v191 = 0x1FFFFFFFFLL;
LABEL_248:
                ++v26;
                uint64_t v199 = v100;
                goto LABEL_70;
              }
LABEL_244:
              uint64_t v191 = 0x100000001;
              goto LABEL_70;
            }
            if (v101 == 63)
            {
              int v106 = 1;
              uint64_t v191 = 1;
              uint64_t v199 = v26 + 1;
              ++v23;
              ++v26;
            }
            else
            {
              if (v101 != 123) {
                goto LABEL_244;
              }
              uint64_t v102 = v17;
              int v181 = v24;
              uint64_t v103 = v18;
              int v104 = is_counted_repeat(v26 + 2);
              uint64_t v18 = v103;
              int v24 = v181;
              int v21 = digitab;
              uint64_t v17 = v102;
              uint64_t v22 = v187;
              if (!v104) {
                goto LABEL_244;
              }
              repeat_counts_0 = read_repeat_counts_0(v26 + 2, (int *)&v191 + 1, (int *)&v191, a5);
              uint64_t v199 = repeat_counts_0;
              if (*a5) {
                goto LABEL_421;
              }
              unsigned __int8 v26 = repeat_counts_0;
              int v106 = v191;
              if (HIDWORD(v191))
              {
                if ((int)v191 > SHIDWORD(v191)) {
                  int v23 = v23 + (HIDWORD(v191) - 1) * v37 + (v191 - HIDWORD(v191)) * (v37 + 7) - 6;
                }
                else {
                  v23 += (HIDWORD(v191) - 1) * v37;
                }
                uint64_t v22 = v187;
                uint64_t v17 = v102;
                int v21 = digitab;
                int v24 = v181;
                uint64_t v18 = v103;
                goto LABEL_70;
              }
              ++v23;
              uint64_t v22 = v187;
              uint64_t v17 = v102;
              int v21 = digitab;
              int v24 = v181;
              uint64_t v18 = v103;
              if ((int)v191 < 1) {
                goto LABEL_70;
              }
            }
            v23 += (v106 - 1) * (v37 + 7);
            goto LABEL_70;
          }
          v23 += 3;
LABEL_283:
          int v44 = 2;
        }
        else
        {
          uint64_t v109 = "(?R or (?digits must be followed by)";
LABEL_260:
          *a5 = v109;
          int v44 = 8;
        }
        goto LABEL_384;
      default:
        int v190 = 0;
        unint64_t v116 = &v190;
        while (2)
        {
          if (v33 <= 0x68u)
          {
            if (v33 <= 0x54u)
            {
              switch(v33)
              {
                case '-':
                  unint64_t v116 = (int *)&v189 + 1;
LABEL_303:
                  unsigned __int8 v118 = *++v26;
                  unsigned __int8 v33 = v118;
                  continue;
                case ')':
                  uint64_t v199 = v26;
                  char v139 = BYTE4(v189);
                  char v140 = v190;
                  if (!v32)
                  {
                    unsigned int v187 = (v190 | v187) & ~HIDWORD(v189);
                    HIDWORD(v189) = 0;
                    int v190 = 0;
                    int v32 = -1;
                    char v139 = 0;
                    char v140 = 0;
                  }
                  char v141 = v139 | v140;
                  if ((v141 & 7) != 0)
                  {
                    v23 += 4;
                    v187 |= (v141 & 1) << 27;
                    if (v184 == 3 || !v184) {
                      LODWORD(v184) = v184 + 2;
                    }
                  }
                  int v44 = 2;
                  uint64_t v22 = v187;
LABEL_383:
                  int v24 = v32;
LABEL_384:
                  int v19 = 0;
                  goto LABEL_78;
                case ':':
                  uint64_t v199 = v26;
                  if (((BYTE4(v189) | v190) & 7) != 0) {
                    uint64_t v22 = (((BYTE4(v189) | v190) & 1) << 27) | v22;
                  }
                  else {
                    uint64_t v22 = v22;
                  }
                  if (((BYTE4(v189) | v190) & 7) != 0)
                  {
                    v23 += 4;
                    int v59 = 2;
                  }
                  else
                  {
                    int v59 = 0;
                  }
LABEL_262:
                  unsigned int v107 = HIDWORD(v184);
                  int v61 = 3;
LABEL_263:
                  if (v107 > 0xC7)
                  {
                    uint64_t v164 = "parentheses nested too deeply";
                    goto LABEL_420;
                  }
                  int v19 = 0;
                  *((unsigned char *)&v202[1] + v107) = v184;
                  *((_DWORD *)&v202[26] + v107) = v23;
                  v23 += v61;
                  int v44 = 2;
                  LODWORD(v184) = v59;
                  HIDWORD(v184) = v107 + 1;
                  int v24 = v32;
                  goto LABEL_78;
              }
            }
            else
            {
              if (v33 == 85)
              {
                int v117 = 512;
                goto LABEL_302;
              }
              if (v33 == 88)
              {
                int v117 = 64;
                goto LABEL_302;
              }
            }
          }
          else if (v33 > 0x72u)
          {
            if (v33 == 115)
            {
              int v117 = 4;
              goto LABEL_302;
            }
            if (v33 == 120)
            {
              int v117 = 8;
              goto LABEL_302;
            }
          }
          else
          {
            if (v33 == 105)
            {
              int v117 = 1;
              goto LABEL_302;
            }
            if (v33 == 109)
            {
              int v117 = 2;
LABEL_302:
              *v116 |= v117;
              goto LABEL_303;
            }
          }
          break;
        }
        uint64_t v199 = v26;
        int v134 = "unrecognized character after (?";
LABEL_370:
        *a5 = v134;
        int v44 = 8;
        goto LABEL_383;
    }
  }
  if ((int)v27 > 93)
  {
    if (v27 == 94)
    {
LABEL_73:
      int v19 = 0;
      ++v23;
      goto LABEL_74;
    }
    if (v27 != 123)
    {
      if (v27 == 124)
      {
        int v19 = 0;
        v23 += v184 + 3;
        goto LABEL_77;
      }
      goto LABEL_63;
    }
    uint64_t v30 = v18;
    unsigned int v179 = v17;
    int v180 = v24;
LABEL_85:
    if (!is_counted_repeat(v25 + 2))
    {
      int v19 = 0;
      v23 += 2;
      int v44 = 2;
      uint64_t v18 = 1;
      uint64_t v22 = v187;
      goto LABEL_99;
    }
    int v53 = read_repeat_counts_0(v25 + 2, (int *)&v191 + 1, (int *)&v191, a5);
    uint64_t v199 = v53;
    if (*a5) {
      goto LABEL_421;
    }
    unsigned __int8 v26 = v53;
    if (HIDWORD(v191))
    {
      int v54 = v191;
      uint64_t v22 = v187;
      uint64_t v18 = v30;
      if (v191 != 0x1FFFFFFFFLL)
      {
        if (SHIDWORD(v191) <= 0) {
          int v55 = -(int)v30;
        }
        else {
          int v55 = 3;
        }
        if (HIDWORD(v191) == 1) {
          int v56 = 0;
        }
        else {
          int v56 = v55;
        }
        goto LABEL_254;
      }
    }
    else
    {
      int v54 = v191;
      uint64_t v22 = v187;
      uint64_t v18 = v30;
      if (v191 != -1 && v191 != 1)
      {
        int v56 = -(int)v30;
LABEL_254:
        BOOL v86 = v54 < 1;
        int v108 = v23 + v18 + v56;
        if (v86) {
          int v23 = v108 + 1;
        }
        else {
          int v23 = v108 + 3;
        }
LABEL_257:
        uint64_t v17 = v179;
        int v24 = v180;
        int v21 = digitab;
        if (v53[1] == 63)
        {
          uint64_t v199 = v53 + 1;
          unsigned __int8 v26 = v53 + 1;
        }
LABEL_70:
        int v49 = v26[1];
        __int16 v48 = v26 + 1;
        if (v49 == 43)
        {
          int v19 = 0;
          uint64_t v199 = v48;
          v23 += 6;
        }
        else
        {
LABEL_72:
          int v19 = 0;
        }
LABEL_77:
        int v44 = 2;
        goto LABEL_78;
      }
    }
    ++v23;
    goto LABEL_257;
  }
  if (v27 == 63)
  {
LABEL_69:
    ++v23;
    goto LABEL_70;
  }
  if (v27 != 91)
  {
    if (v27 == 92)
    {
      int v40 = v24;
      int v41 = v21;
      uint64_t v42 = v17;
      unsigned int v43 = check_escape(&v199, a5, v201, v22, 0);
      if (*a5) {
        goto LABEL_421;
      }
      if ((v43 & 0x80000000) != 0)
      {
        if (v43 + 14 >= 2)
        {
          uint64_t v22 = v187;
          uint64_t v17 = v42;
          int v21 = v41;
          int v24 = v40;
          if (v43 == -19)
          {
            int v44 = 2;
            uint64_t v18 = 1;
            int v19 = 1;
            goto LABEL_78;
          }
          uint64_t v18 = 1;
          if (v43 > 0xFFFFFFEC)
          {
            int v19 = 0;
            ++v23;
            goto LABEL_77;
          }
          int v110 = -20 - v43;
          int v111 = 1 << (-20 - v43);
          if (v43 <= 0xFFFFFFCC) {
            int v111 = 1;
          }
          int v112 = DWORD1(v198) | v111;
          if (v110 <= (int)v198) {
            int v110 = v198;
          }
          *(void *)&long long v198 = __PAIR64__(v112, v110);
          if (v199[1] != 123)
          {
            int v19 = 0;
            int v44 = 2;
            v23 += 3;
            goto LABEL_242;
          }
          uint64_t v113 = v199 + 2;
          if (is_counted_repeat(v199 + 2))
          {
            uint64_t v114 = read_repeat_counts_0(v113, (int *)&v191 + 1, (int *)&v191, a5);
            uint64_t v199 = v114;
            if (*a5) {
              goto LABEL_421;
            }
            if (HIDWORD(v191)) {
              BOOL v115 = HIDWORD(v191) == 1 && v191 == -1;
            }
            else {
              BOOL v115 = ((v191 + 1) & 0xFFFFFFFD) == 0;
            }
            if (v115) {
              int v146 = 4;
            }
            else {
              int v146 = 8;
            }
            v23 += v146;
            int v148 = v114[1];
            unint64_t v147 = v114 + 1;
            int v19 = 0;
            if (v148 == 63) {
              uint64_t v199 = v147;
            }
            int v44 = 2;
            uint64_t v18 = 1;
          }
          else
          {
            int v19 = 0;
            int v44 = 2;
            uint64_t v18 = 1;
            v23 += 3;
          }
        }
        else
        {
          if ((get_ucp_0(&v199, &v190, a5) & 0x80000000) != 0) {
            goto LABEL_421;
          }
          int v19 = 0;
          v23 += 2;
          uint64_t v18 = 2;
          int v44 = 2;
        }
        uint64_t v22 = v187;
      }
      else
      {
        int v19 = 0;
        v23 += 2;
        int v44 = 2;
        uint64_t v18 = 1;
        uint64_t v22 = v187;
        if ((a4 & 0x800) != 0)
        {
          uint64_t v17 = v42;
          int v21 = v41;
          if (v43 >= 0x80)
          {
            for (uint64_t i = 0; i != 6; ++i)
            {
              if ((signed int)v43 <= utf8_table1[i]) {
                break;
              }
            }
            int v19 = 0;
            v23 += i;
            uint64_t v18 = (i + 1);
            int v44 = 2;
          }
          goto LABEL_243;
        }
      }
LABEL_242:
      uint64_t v17 = v42;
      int v21 = v41;
LABEL_243:
      int v24 = v40;
      goto LABEL_78;
    }
LABEL_63:
    v23 += 2;
    int v44 = 2;
    uint64_t v18 = 1;
    if ((a4 & 0x800) == 0 || v27 < 0xC0) {
      goto LABEL_78;
    }
    if ((v25[2] & 0xC0) == 0x80)
    {
      uint64_t v46 = 0;
      do
        int v47 = v25[v46++ + 3] & 0xC0;
      while (v47 == 128);
      unsigned __int8 v26 = &v25[v46 + 1];
      uint64_t v18 = (v46 + 1);
      v23 += v46;
    }
LABEL_76:
    uint64_t v199 = v26;
    goto LABEL_77;
  }
  uint64_t v50 = v25 + 2;
  int v51 = v25[2];
  uint64_t v199 = v25 + 2;
  if (v51 == 94)
  {
    int v51 = v25[3];
    uint64_t v199 = v25 + 3;
    int v52 = 10;
    uint64_t v50 = v25 + 3;
  }
  else
  {
    int v52 = 0;
  }
  if (!v51)
  {
LABEL_419:
    uint64_t v164 = "missing terminating ] for character class";
    goto LABEL_420;
  }
  int v177 = v52;
  unsigned int v179 = v17;
  int v180 = v24;
  int v62 = 0;
  BOOL v63 = v195;
  int v186 = v201;
  int v172 = v22 & 1;
  if (v22) {
    int v64 = 127;
  }
  else {
    int v64 = 255;
  }
  int v173 = v64;
  int v174 = 0;
  BOOL v65 = 1;
  unsigned int v176 = v18;
  while (1)
  {
    int v66 = v62;
    while (1)
    {
      if (!v65)
      {
        uint64_t v18 = v176;
        if (v51 == 92 && v50[1] == 69)
        {
          int v66 = 0;
          uint64_t v199 = v50 + 1;
          goto LABEL_195;
        }
LABEL_130:
        if ((a4 & 0x800) != 0)
        {
          if ((~v51 & 0xC0) != 0)
          {
            LODWORD(v71) = 0;
          }
          else
          {
            unint64_t v71 = utf8_table4[v51 & 0x3F];
            int v51 = (utf8_table3[v71] & v51) << (6 * v71);
            unsigned int v72 = (char *)(v50 + 1);
            if (v71 <= 1) {
              uint64_t v73 = 1;
            }
            else {
              uint64_t v73 = v71;
            }
            int v74 = 6 * v71 - 6;
            do
            {
              char v75 = *v72++;
              v51 |= (v75 & 0x3F) << v74;
              v74 -= 6;
              --v73;
            }
            while (v73);
          }
          uint64_t v199 = &v50[v71];
        }
        goto LABEL_147;
      }
      if (v51 != 92)
      {
        uint64_t v18 = v176;
        if (v51 == 91)
        {
          uint64_t v68 = v50 + 2;
          if (v50[2] == 94) {
            uint64_t v68 = v50 + 3;
          }
          do
          {
            int v70 = *v68++;
            int v69 = v70;
          }
          while ((v63[v70] & 2) != 0);
          if (v69 == v50[1] && *v68 == 93)
          {
            int v66 = 0;
            uint64_t v199 = v68;
            goto LABEL_194;
          }
        }
        goto LABEL_130;
      }
      int v67 = check_escape(&v199, a5, v186, v22, 1);
      if (*a5) {
        goto LABEL_421;
      }
      int v51 = v67;
      if (v67 != -19) {
        break;
      }
      BOOL v65 = 0;
      uint64_t v50 = v199 + 1;
      int v51 = *++v199;
      int v66 = 1;
      uint64_t v22 = v187;
      if (!v51) {
        goto LABEL_419;
      }
    }
    uint64_t v22 = v187;
    if (v67 == -15)
    {
      int v51 = 88;
LABEL_139:
      uint64_t v18 = v176;
    }
    else
    {
      if (v67 == -4)
      {
        int v51 = 8;
        goto LABEL_139;
      }
      uint64_t v18 = v176;
      if (v67 < 0)
      {
        if ((v67 & 0xFFFFFFFE) == 0xFFFFFFF2)
        {
          int v66 = 0;
          int v76 = v23 + 4;
          if (v174) {
            int v76 = v23;
          }
          int v23 = v76 + 2;
LABEL_193:
          int v177 = 10;
          int v174 = 1;
          goto LABEL_195;
        }
        int v66 = 0;
LABEL_194:
        int v177 = 10;
        goto LABEL_195;
      }
    }
LABEL_147:
    unint64_t v77 = v199;
    if (v199[1] != 45) {
      goto LABEL_187;
    }
    uint64_t v78 = v199 + 2;
    uint64_t v79 = v199[2];
    if (v199[2])
    {
      if (v79 != 93) {
        break;
      }
    }
LABEL_186:
    uint64_t v199 = v77;
LABEL_187:
    ++v177;
    if ((a4 & 0x800) != 0 && v51 > v173)
    {
      if (v174) {
        int v89 = v23;
      }
      else {
        int v89 = v23 + 4;
      }
      int v90 = ord2utf8(v51, (uint64_t)&v190);
      uint64_t v18 = v176;
      uint64_t v22 = v187;
      int v23 = ((v90 + 1) << v172) + v89;
      goto LABEL_193;
    }
LABEL_195:
    int v91 = v199;
    uint64_t v50 = v199 + 1;
    int v51 = *++v199;
    if (!v51) {
      goto LABEL_419;
    }
    BOOL v65 = v66 == 0;
    int v62 = 1;
    if (!v66)
    {
      int v62 = 0;
      if (v51 == 93)
      {
        if (v177 == 1)
        {
          int v19 = 0;
          v23 += 3;
          int v44 = 2;
LABEL_99:
          uint64_t v17 = v179;
          int v24 = v180;
          int v21 = digitab;
        }
        else
        {
          if (v91[2] == 123 && (unint64_t v131 = v91 + 3, is_counted_repeat(v91 + 3)))
          {
            unsigned __int8 v132 = read_repeat_counts_0(v131, (int *)&v191 + 1, (int *)&v191, a5);
            uint64_t v199 = v132;
            if (*a5) {
              goto LABEL_421;
            }
            if (HIDWORD(v191)) {
              BOOL v133 = HIDWORD(v191) == 1 && v191 == -1;
            }
            else {
              BOOL v133 = ((v191 + 1) & 0xFFFFFFFD) == 0;
            }
            if (v133) {
              int v150 = 34;
            }
            else {
              int v150 = 38;
            }
            v23 += v150;
            int v153 = v132[1];
            int v151 = v132 + 1;
            int v152 = v153;
            if (v153 == 63)
            {
              int v19 = 0;
              uint64_t v199 = v151;
            }
            else
            {
              int v19 = 0;
              if (v152 == 43)
              {
                uint64_t v199 = v151;
                v23 += 6;
              }
            }
            int v44 = 2;
          }
          else
          {
            int v19 = 0;
            int v44 = 2;
            v23 += 33;
          }
          uint64_t v22 = v187;
          uint64_t v17 = v179;
          int v24 = v180;
          int v21 = digitab;
          uint64_t v18 = v176;
        }
LABEL_78:
        if (v44 != 2) {
          goto LABEL_421;
        }
        goto LABEL_17;
      }
    }
  }
  if (v79 != 92)
  {
    v199 += 2;
    if ((a4 & 0x800) == 0)
    {
      if (v51 <= (int)v79) {
        goto LABEL_194;
      }
      goto LABEL_440;
    }
    if ((~v79 & 0xC0) != 0)
    {
      LODWORD(v81) = 0;
    }
    else
    {
      unint64_t v81 = utf8_table4[v79 & 0x3F];
      LODWORD(v79) = (utf8_table3[v81] & v79) << (6 * v81);
      uint64_t v82 = (char *)(v77 + 3);
      if (v81 <= 1) {
        uint64_t v83 = 1;
      }
      else {
        uint64_t v83 = v81;
      }
      int v84 = 6 * v81 - 6;
      do
      {
        char v85 = *v82++;
        uint64_t v79 = ((v85 & 0x3F) << v84) | v79;
        v84 -= 6;
        --v83;
      }
      while (v83);
    }
    uint64_t v199 = &v78[v81];
LABEL_169:
    if ((v79 & 0x80000000) == 0) {
      goto LABEL_170;
    }
    goto LABEL_186;
  }
  v199 += 2;
  uint64_t v80 = check_escape(&v199, a5, v186, v22, 1);
  if (*a5) {
    goto LABEL_421;
  }
  uint64_t v79 = v80;
  if (v80 == -15)
  {
    uint64_t v79 = 88;
    uint64_t v22 = v187;
    uint64_t v18 = v176;
    goto LABEL_170;
  }
  uint64_t v22 = v187;
  uint64_t v18 = v176;
  if (v80 != -4) {
    goto LABEL_169;
  }
  uint64_t v79 = 8;
LABEL_170:
  if ((int)v79 >= v51)
  {
    if ((a4 & 0x800) != 0)
    {
      BOOL v86 = v172 && v79 > 0x7F;
      BOOL v87 = v86;
      if (v79 > 0xFF || v87)
      {
        if (!v174) {
          v23 += 4;
        }
        if (v172)
        {
          uint64_t v189 = 0;
          uint64_t v92 = v79;
          int v188 = v51;
          uint64_t v171 = v63;
LABEL_200:
          int v178 = v23;
LABEL_201:
          uint64_t v93 = v92;
LABEL_202:
          uint64_t v92 = v93;
          while (1)
          {
            uint64_t v94 = v92;
            if (!get_othercase_range(&v188, v79, (_DWORD *)&v189 + 1, &v189)) {
              break;
            }
            uint64_t v93 = v189;
            int v95 = HIDWORD(v189);
            uint64_t v92 = v94;
            if (SHIDWORD(v189) < v51 || (int)v189 > (int)v94)
            {
              if (SHIDWORD(v189) < v51 && (int)v189 >= v51 - 1)
              {
                int v51 = HIDWORD(v189);
                goto LABEL_201;
              }
              if ((int)v189 <= (int)v94 || SHIDWORD(v189) > (int)v94 + 1)
              {
                int v175 = ord2utf8(SHIDWORD(v189), (uint64_t)&v190);
                if (v95 == v93) {
                  int v98 = 0;
                }
                else {
                  int v98 = ord2utf8(v93, (uint64_t)&v190);
                }
                int v23 = v178 + v175 + v98 + 1;
                uint64_t v92 = v94;
                goto LABEL_200;
              }
              goto LABEL_202;
            }
          }
          int v23 = v178;
          LODWORD(v79) = v94;
          BOOL v63 = v171;
        }
        int v99 = ord2utf8(v51, (uint64_t)&v190);
        v23 += v99 + ord2utf8(v79, (uint64_t)&v190) + 1;
        int v177 = 10;
        int v174 = 1;
        uint64_t v22 = v187;
        uint64_t v18 = v176;
        goto LABEL_195;
      }
    }
    goto LABEL_194;
  }
LABEL_440:
  uint64_t v164 = "range out of order in character class";
LABEL_420:
  *a5 = v164;
LABEL_421:
  uint64_t v14 = 0;
  *a6 = v199 - v185;
  return v14;
}

uint64_t valid_utf8(char *a1, int a2)
{
  if (a2 < 0)
  {
    a2 = -1;
    uint64_t v2 = a1;
    do
    {
      int v3 = *v2++;
      ++a2;
    }
    while (v3);
  }
  if (a2 >= 1)
  {
    long long v4 = a1;
    do
    {
      int v5 = a2 - 1;
      if (*v4 < 0)
      {
        unsigned int v7 = *v4;
        if ((~v7 & 0xC0) != 0) {
          return (v4 - a1);
        }
        int v8 = utf8_table4[*v4 & 0x3F];
        if (a2 <= v8) {
          return (v4 - a1);
        }
        long long v6 = (unsigned __int8 *)(v4 + 1);
        if ((v4[1] & 0xC0) != 0x80) {
          return (v6 - a1);
        }
        v5 -= v8;
        switch(*v4 & 0x3F)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
            if ((v7 & 0x3E) == 0) {
              return (v6 - a1);
            }
            goto LABEL_8;
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
            if (v7 == 224 && (v4[1] & 0x20) == 0) {
              return (v6 - a1);
            }
            break;
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
            if (v7 == 240 && (v4[1] & 0x30) == 0) {
              return (v6 - a1);
            }
            break;
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
            if (v7 == 248 && (v4[1] & 0x38) == 0) {
              return (v6 - a1);
            }
            break;
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
            if (v7 > 0xFD || v7 == 252 && (v4[1] & 0x3C) == 0) {
              return (v6 - a1);
            }
            break;
          default:
            break;
        }
        LODWORD(v4) = 1 - a1 + v4;
        while (1)
        {
          BOOL v9 = __OFSUB__(v8--, 1);
          if ((v8 < 0) ^ v9 | (v8 == 0)) {
            break;
          }
          char v10 = *++v6;
          long long v4 = (char *)(v4 + 1);
          if ((v10 & 0xC0) != 0x80) {
            return (uint64_t)v4;
          }
        }
      }
      else
      {
        long long v6 = (unsigned __int8 *)v4;
      }
LABEL_8:
      long long v4 = (char *)(v6 + 1);
      a2 = v5;
    }
    while (v5 >= 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t is_counted_repeat(unsigned __int8 *a1)
{
  if ((digitab[*a1] & 4) == 0) {
    return 0;
  }
  do
  {
    uint64_t v2 = a1;
    int v4 = *++a1;
    int v3 = v4;
  }
  while ((digitab[v4] & 4) != 0);
  if (v3 != 44) {
    return v3 == 125;
  }
  uint64_t v5 = v2[2];
  if (v5 == 125) {
    return 1;
  }
  if ((digitab[v5] & 4) == 0) {
    return 0;
  }
  uint64_t v6 = 2;
  do
    uint64_t v7 = a1[v6++];
  while ((digitab[v7] & 4) != 0);
  return v7 == 125;
}

uint64_t check_escape(unsigned __int8 **a1, const char **a2, int a3, __int16 a4, int a5)
{
  uint64_t v5 = *a1;
  uint64_t v7 = *a1 + 1;
  uint64_t v6 = *v7;
  if (!*v7)
  {
    BOOL v9 = "\\ at end of pattern";
    goto LABEL_6;
  }
  if ((v6 - 123) < 0xFFFFFFB5) {
    goto LABEL_7;
  }
  unsigned int v8 = v6 - 48;
  if (escapes_0[(v6 - 48)])
  {
    uint64_t v6 = escapes_0[v8];
    goto LABEL_7;
  }
  if ((v6 - 49) < 9)
  {
    if (!a5)
    {
      int v11 = v5[2];
      if ((digitab[v5[2]] & 4) != 0)
      {
        int v12 = v6 - 48;
        do
        {
          int v12 = v11 + 10 * v12 - 48;
          int v11 = v7[2];
          char v16 = digitab[v7[2]];
          ++v7;
        }
        while ((v16 & 4) != 0);
      }
      else
      {
        int v12 = v6 - 48;
      }
      if (v12 < 10 || v12 <= a3)
      {
        uint64_t v6 = (-20 - v12);
        goto LABEL_7;
      }
    }
    if (v6 > 0x37)
    {
      uint64_t v6 = 0;
LABEL_35:
      uint64_t v7 = v5;
      goto LABEL_7;
    }
LABEL_36:
    uint64_t v18 = 0;
    uint64_t v7 = v5 + 3;
    while (1)
    {
      unsigned __int8 v19 = v5[v18 + 2];
      if ((v19 & 0xF8) != 0x30) {
        break;
      }
      LOBYTE(v8) = v19 + 8 * v8 - 48;
      if (++v18 == 2) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = &v5[v18 + 1];
LABEL_41:
    uint64_t v6 = v8;
    goto LABEL_7;
  }
  uint64_t v13 = (v6 - 76);
  if (v13 > 0x2C) {
    goto LABEL_22;
  }
  if (((1 << (v6 - 76)) & 0x20100000205) != 0)
  {
    BOOL v9 = "PCRE does not support \\L, \\l, \\N, \\U, or \\u";
    goto LABEL_6;
  }
  if (v13 == 23)
  {
    unsigned int v20 = v5[2];
    v5 += 2;
    uint64_t v6 = v20;
    if (!v20)
    {
      *a2 = "\\c at end of pattern";
      return v6;
    }
    if ((v6 - 97) < 0x1A) {
      LODWORD(v6) = v6 - 32;
    }
    uint64_t v6 = v6 ^ 0x40;
    goto LABEL_35;
  }
  if (v13 != 44)
  {
LABEL_22:
    if (v6 == 48) {
      goto LABEL_36;
    }
    if ((a4 & 0x40) == 0) {
      goto LABEL_7;
    }
    BOOL v9 = "unrecognized character follows \\"";
LABEL_6:
    *a2 = v9;
    goto LABEL_7;
  }
  if ((a4 & 0x800) == 0 || v5[2] != 123) {
    goto LABEL_59;
  }
  uint64_t v7 = v5 + 3;
  int v14 = v5[3];
  if ((digitab[v5[3]] & 8) != 0)
  {
    uint64_t v15 = 0;
    LODWORD(v6) = 0;
    do
    {
      int v21 = &v5[v15];
      if (v14 > 0x60) {
        v14 -= 32;
      }
      int v22 = v14 + 16 * v6;
      if (v14 >= 65) {
        int v23 = -55;
      }
      else {
        int v23 = -48;
      }
      uint64_t v6 = (v22 + v23);
      int v14 = v21[4];
      ++v15;
    }
    while ((digitab[v21[4]] & 8) != 0);
    uint64_t v7 = &v5[v15 + 3];
  }
  else
  {
    uint64_t v6 = 0;
    LODWORD(v15) = 0;
  }
  if (v14 != 125)
  {
LABEL_59:
    uint64_t v24 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v5 + 3;
    while (1)
    {
      uint64_t v25 = v5[v24 + 2];
      if ((digitab[v25] & 8) == 0) {
        break;
      }
      if (v25 > 0x60) {
        LODWORD(v25) = v25 - 32;
      }
      int v26 = v25 + 16 * v6;
      if ((int)v25 >= 65) {
        int v27 = -55;
      }
      else {
        int v27 = -48;
      }
      uint64_t v6 = (v26 + v27);
      if (++v24 == 2) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = &v5[v24 + 1];
    goto LABEL_7;
  }
  if ((v6 & 0x80000000) != 0 || v15 >= 9)
  {
    BOOL v9 = "character value in \\x{...} sequence is too large";
    goto LABEL_6;
  }
LABEL_7:
  *a1 = v7;
  return v6;
}

uint64_t get_ucp_0(void *a1, _DWORD *a2, const char **a3)
{
  uint64_t v5 = *a1;
  uint64_t v7 = (unsigned char *)(*a1 + 1);
  int v6 = *v7;
  if (!*v7)
  {
LABEL_15:
    int v14 = "malformed \\P or \\p sequence";
LABEL_26:
    *a3 = v14;
    *a1 = v7;
    return 0xFFFFFFFFLL;
  }
  *a2 = 0;
  if (v6 == 123)
  {
    int v9 = *(unsigned __int8 *)(v5 + 2);
    unsigned int v8 = (unsigned char *)(v5 + 2);
    if (v9 == 94)
    {
      *a2 = 1;
      uint64_t v7 = v8;
    }
    for (uint64_t i = 0; i != 3; ++i)
    {
      int v11 = v7[i + 1];
      if (!v7[i + 1])
      {
        v7 += i + 1;
        goto LABEL_15;
      }
      if (v11 == 125)
      {
        v7 += i + 1;
        goto LABEL_17;
      }
      __s1[i] = v11;
    }
    v7 += 3;
    while (1)
    {
      int v13 = *++v7;
      int v12 = v13;
      if (!v13) {
        goto LABEL_15;
      }
      if (v12 == 125) {
        goto LABEL_25;
      }
    }
  }
  __s1[0] = v6;
  uint64_t i = 1;
LABEL_17:
  int v15 = 0;
  __s1[i] = 0;
  *a1 = v7;
  int v16 = 37;
  while (1)
  {
    int v17 = v16 + v15;
    if (v16 + v15 < 0 != __OFADD__(v16, v15)) {
      ++v17;
    }
    uint64_t v18 = (uint64_t)v17 >> 1;
    int v19 = strcmp(__s1, (&utt)[2 * (v17 >> 1)]);
    if (!v19) {
      return LODWORD((&utt)[2 * v18 + 1]);
    }
    if (v19 <= 0) {
      int v16 = v18;
    }
    else {
      int v15 = v18 + 1;
    }
    if (v15 >= v16)
    {
LABEL_25:
      int v14 = "unknown property name after \\P or \\p";
      goto LABEL_26;
    }
  }
}

unsigned __int8 *read_repeat_counts_0(unsigned __int8 *result, int *a2, int *a3, const char **a4)
{
  int v4 = *result;
  if ((digitab[*result] & 4) != 0)
  {
    int v5 = 0;
    int v6 = *result;
    do
    {
      int v7 = *++result;
      int v4 = v7;
      int v5 = v6 + 10 * v5 - 48;
      int v6 = v7;
    }
    while ((digitab[v7] & 4) != 0);
  }
  else
  {
    int v5 = 0;
  }
  if (v4 == 125)
  {
    int v8 = v5;
  }
  else
  {
    unsigned int v10 = *++result;
    uint64_t v9 = v10;
    if (v10 == 125)
    {
      int v8 = -1;
    }
    else
    {
      if ((digitab[v9] & 4) != 0)
      {
        int v8 = 0;
        do
        {
          int v11 = v9 + 10 * v8;
          int v12 = *++result;
          LODWORD(v9) = v12;
          int v8 = v11 - 48;
        }
        while ((digitab[v12] & 4) != 0);
      }
      else
      {
        int v8 = 0;
      }
      if (v8 < v5)
      {
        int v13 = "numbers out of order in {} quantifier";
        goto LABEL_19;
      }
    }
  }
  if (v5 < 0x10000 && v8 < 0x10000)
  {
    *a2 = v5;
    *a3 = v8;
    return result;
  }
  int v13 = "number too big in {} quantifier";
LABEL_19:
  *a4 = v13;
  return result;
}

uint64_t get_othercase_range(int *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 0;
  unsigned int v19 = 0;
  int v6 = *a1;
  if (*a1 <= a2)
  {
    int v10 = a2 + 1;
    while (1)
    {
      int v11 = ucp_findchar(v6, &v20, &v19);
      unsigned int v12 = v19;
      if (v11 == 1 && v19 != 0) {
        break;
      }
      if (v10 == ++v6) {
        return 0;
      }
    }
    int v14 = 0;
    *a3 = v19;
    do
    {
      int v15 = v14;
      int v16 = v6 + v14;
      int v17 = v6 + v14 + 1;
      if (v6 + v14 >= a2) {
        break;
      }
      ++v14;
    }
    while (ucp_findchar(v16 + 1, &v20, &v19) == 1 && v14 + v12 == v19);
    *a4 = v12 + v15;
    *a1 = v17;
    return 1;
  }
  return result;
}

uint64_t ord2utf8(int a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (utf8_table1[v2] < a1)
  {
    if (++v2 == 6)
    {
      int v3 = (unsigned char *)(a2 + 6);
      int v4 = 6;
      goto LABEL_6;
    }
  }
  int v3 = (unsigned char *)(a2 + v2);
  int v4 = v2;
  if ((int)v2 <= 0) {
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v5 = v4 + 1;
  do
  {
    *v3-- = a1 & 0x3F | 0x80;
    a1 >>= 6;
    --v5;
  }
  while (v5 > 1);
LABEL_8:
  *int v3 = utf8_table2[4 * v2] | a1;
  return (v4 + 1);
}

uint64_t compile_regex_0(uint64_t a1, int a2, int *a3, unint64_t *a4, unsigned __int8 **a5, const char **a6, int a7, int a8, int *a9, int *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v339 = 0;
  uint64_t v396 = *MEMORY[0x263EF8340];
  int v13 = (unsigned __int8 *)*a4;
  int v14 = (unsigned __int8 *)(*a4 + (a8 + 3));
  uint64_t v15 = a12;
  int v16 = *a5;
  uint64_t v383 = a11;
  unint64_t v384 = (unint64_t)v13;
  *(_WORD *)(v13 + 1) = 0;
  __int16 v331 = (__int16)v13;
  unsigned int v338 = v13;
  int v336 = -2;
  int v337 = -2;
  int v335 = a2;
  while (2)
  {
    if ((a1 & 7) != a2)
    {
      *int v14 = 18;
      v14[1] = a1 & 7;
      v14 += 2;
    }
    if (a7)
    {
      uint64_t v339 = v14 + 1;
      *(_WORD *)int v14 = 73;
      int v14[2] = 0;
      v14 += 3;
    }
    int v371 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    v391 = 0;
    uint64_t v392 = 0;
    int v20 = a1 & 0x800;
    unsigned int v340 = (a1 >> 11) & 1;
    v390 = v16;
    __int16 v389 = 0;
    unsigned int v357 = (a1 >> 9) & 1;
    int v358 = 0;
    BOOL v349 = 0;
    BOOL v350 = (a1 & 0x200) == 0;
    int v375 = (a1 & 1) << 8;
    uint64_t v21 = 4294967294;
    int __src = 0;
    uint64_t v22 = 4294967294;
    unsigned int v382 = -2;
    uint64_t v23 = 4294967294;
    int v374 = v20;
    while (1)
    {
      uint64_t v387 = 0;
      uint64_t v24 = *v16;
      if (v17 && *v16)
      {
        if (v24 == 92 && v16[1] == 69)
        {
          uint64_t v17 = 0;
          v390 = v16 + 1;
LABEL_87:
          unint64_t v32 = (unint64_t)v18;
          goto LABEL_499;
        }
        if (v19) {
          *((_WORD *)v19 + 2) = bswap32(v16 - *(_DWORD *)(v15 + 40) - (bswap32(*((unsigned __int16 *)v19 + 1)) >> 16)) >> 16;
        }
        if ((a1 & 0x4000) != 0)
        {
          __int16 v33 = (__int16)v390;
          *(_WORD *)int v14 = -192;
          int v14[2] = (unsigned __int16)(v33 - *(_WORD *)(v15 + 40)) >> 8;
          _OWORD v14[3] = v33 - *(unsigned char *)(v15 + 40);
          *((_WORD *)v14 + 2) = 0;
          unint64_t v32 = (unint64_t)(v14 + 6);
          unsigned int v19 = v14;
        }
        else
        {
          unsigned int v19 = 0;
          unint64_t v32 = (unint64_t)v14;
        }
LABEL_25:
        v393[0] = v24;
        if (!v20 || (v24 & 0xC0) != 0xC0) {
          goto LABEL_351;
        }
        int v34 = v390;
        unsigned __int8 v35 = v390[1];
        if ((v35 & 0xC0) == 0x80)
        {
          uint64_t v36 = 0;
          do
          {
            v393[v36 + 1] = v35;
            unsigned __int8 v35 = v34[v36++ + 2];
          }
          while ((v35 & 0xC0) == 0x80);
          int v37 = v36 + 1;
          v34 += v36;
        }
        else
        {
          int v37 = 1;
        }
        v390 = v34;
LABEL_33:
        if (a1) {
          unsigned __int8 v38 = 22;
        }
        else {
          unsigned __int8 v38 = 21;
        }
        *(unsigned char *)unint64_t v32 = v38;
        int v14 = (unsigned __int8 *)(v32 + 1);
        if (v37 >= 1) {
          goto LABEL_355;
        }
        goto LABEL_357;
      }
      char v25 = 1;
      unsigned int v377 = v23;
      if ((v24 - 42) >= 2 && v24 != 63)
      {
        if (v24 == 123)
        {
          uint64_t v26 = v21;
          int v27 = v19;
          uint64_t v28 = v17;
          uint64_t v29 = v15;
          uint64_t v30 = v22;
          int v31 = is_counted_repeat(v16 + 1);
          uint64_t v22 = v30;
          uint64_t v15 = v29;
          uint64_t v17 = v28;
          uint64_t v23 = v377;
          unsigned int v19 = v27;
          int v20 = v374;
          BOOL v80 = v31 == 0;
          uint64_t v21 = v26;
          char v25 = !v80;
          if (v25) {
            goto LABEL_42;
          }
        }
        else
        {
          char v25 = 0;
        }
        if (v19)
        {
          if (v371 <= 0)
          {
            char v25 = 0;
            *((_WORD *)v19 + 2) = bswap32(v16- *(_DWORD *)(v15 + 40)- (bswap32(*((unsigned __int16 *)v19 + 1)) >> 16)) >> 16;
            --v371;
            unsigned int v19 = 0;
            if ((a1 & 8) == 0) {
              goto LABEL_43;
            }
            goto LABEL_66;
          }
          char v25 = 0;
          --v371;
        }
      }
LABEL_42:
      if ((a1 & 8) == 0) {
        goto LABEL_43;
      }
LABEL_66:
      if (*(unsigned char *)(*(void *)(v15 + 24) + v24)) {
        goto LABEL_87;
      }
      if (v24 == 35)
      {
        int v49 = v390;
        while (1)
        {
          int v51 = *++v49;
          int v50 = v51;
          if (v51 == 10) {
            break;
          }
          if (!v50)
          {
            LODWORD(v24) = 0;
            v390 = v49;
            goto LABEL_43;
          }
        }
        v390 = v49;
        goto LABEL_87;
      }
LABEL_43:
      if ((a1 & 0x4000) != 0) {
        char v39 = v25;
      }
      else {
        char v39 = 1;
      }
      if (v39)
      {
        unint64_t v32 = (unint64_t)v14;
      }
      else
      {
        __int16 v40 = (__int16)v390;
        *(_WORD *)int v14 = -192;
        int v14[2] = (unsigned __int16)(v40 - *(_WORD *)(v15 + 40)) >> 8;
        _OWORD v14[3] = v40 - *(unsigned char *)(v15 + 40);
        *((_WORD *)v14 + 2) = 0;
        unint64_t v32 = (unint64_t)(v14 + 6);
        unsigned int v19 = v14;
      }
      v376 = v19;
      if ((int)v24 <= 62)
      {
        switch((int)v24)
        {
          case '$':
            char v41 = 20;
            goto LABEL_289;
          case '%':
          case '&':
          case '\'':
          case ',':
          case '-':
            goto LABEL_25;
          case '(':
            int v52 = v390;
            int v53 = *++v390;
            if (v53 != 63)
            {
              if ((a1 & 0x1000) != 0)
              {
                uint64_t v155 = 0;
                int v156 = 80;
                uint64_t v157 = a1;
                int v153 = a3;
                goto LABEL_606;
              }
              goto LABEL_310;
            }
            break;
          case ')':
            goto LABEL_651;
          case '*':
            HIDWORD(v392) = 0;
            goto LABEL_78;
          case '+':
            HIDWORD(v392) = 1;
LABEL_78:
            LODWORD(v392) = -1;
            goto LABEL_79;
          case '.':
            if (v23 == -2) {
              uint64_t v21 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v21 = v23;
            }
            *(unsigned char *)unint64_t v32 = 11;
            int v14 = (unsigned __int8 *)(v32 + 1);
            goto LABEL_85;
          default:
            if (!v24) {
              goto LABEL_651;
            }
            goto LABEL_25;
        }
        uint64_t v386 = 0;
        int v55 = v52 + 2;
        uint64_t v54 = v52[2];
        v390 = v52 + 2;
        switch(v54)
        {
          case '!':
            uint64_t v155 = 0;
            v390 = v52 + 3;
            int v156 = 70;
            goto LABEL_603;
          case '#':
            __int16 v258 = v52 + 2;
            do
              int v259 = *++v258;
            while (v259 != 41);
            v390 = v258;
            int v201 = 4;
            goto LABEL_548;
          case '(':
            __int16 v260 = v52 + 3;
            uint64_t v261 = v52[3];
            if (v261 == 82)
            {
              *(_WORD *)(v32 + 3) = -180;
              *(unsigned char *)(v32 + 5) = -1;
              v390 += 3;
LABEL_583:
              int v156 = 75;
              uint64_t v155 = 3;
LABEL_603:
              uint64_t v157 = a1;
              goto LABEL_604;
            }
            if (!digitab[v261])
            {
              uint64_t v155 = 0;
              int v156 = 75;
              goto LABEL_603;
            }
            int v275 = v261 - 48;
            unint64_t v277 = v52 + 4;
            int v276 = v52[4];
            if (v276 != 41)
            {
              __int16 v260 = v52 + 3;
              do
              {
                int v275 = v276 + 10 * v275 - 48;
                int v276 = v260[2];
                ++v260;
              }
              while (v276 != 41);
              unint64_t v277 = v260 + 1;
            }
            v390 = v277;
            if (v275)
            {
              v390 = v260 + 2;
              *(unsigned char *)(v32 + 3) = 76;
              *(unsigned char *)(v32 + 4) = BYTE1(v275);
              *(unsigned char *)(v32 + 5) = v275;
              goto LABEL_583;
            }
            *a6 = "invalid condition (?(0)";
            int v358 = 75;
            int v201 = 9;
LABEL_548:
            int v14 = (unsigned __int8 *)v32;
            goto LABEL_644;
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            goto LABEL_74;
          case ':':
            uint64_t v155 = 0;
            v390 = v52 + 3;
            int v156 = 80;
            goto LABEL_603;
          case '<':
            int v262 = v52[3];
            v390 = v52 + 3;
            if (v262 == 33)
            {
              uint64_t v155 = 0;
              v390 = v52 + 4;
              int v156 = 72;
              goto LABEL_603;
            }
            int v153 = a3;
            uint64_t v155 = 0;
            if (v262 == 61)
            {
              v390 = v52 + 4;
              int v156 = 71;
              goto LABEL_427;
            }
            uint64_t v157 = a1;
            int v156 = v358;
            goto LABEL_605;
          case '=':
            uint64_t v155 = 0;
            v390 = v52 + 3;
            int v156 = 69;
            goto LABEL_603;
          case '>':
            uint64_t v155 = 0;
            v390 = v52 + 3;
            int v156 = 74;
            goto LABEL_603;
          case 'C':
            *(unsigned char *)unint64_t v32 = 64;
            int v14 = (unsigned __int8 *)(v32 + 1);
            __int16 v263 = v390 + 1;
            uint64_t v264 = v390[1];
            if ((digitab[v264] & 4) == 0)
            {
              LOBYTE(v265) = 0;
              ++v390;
LABEL_587:
              *(unsigned char *)(v32 + 1) = v265;
              *(unsigned char *)(v32 + 2) = (unsigned __int16)((_WORD)v390 - *(_WORD *)(v15 + 40) + 1) >> 8;
              int v14 = (unsigned __int8 *)(v32 + 6);
              *(unsigned char *)(v32 + 3) = (_BYTE)v390 - *(_DWORD *)(v15 + 40) + 1;
              *(_WORD *)(v32 + 4) = 0;
              int v201 = 4;
              int v371 = 1;
              unsigned int v19 = (unsigned char *)v32;
              unint64_t v32 = 0;
              goto LABEL_645;
            }
            int v265 = 0;
            do
            {
              int v265 = v264 + 10 * v265 - 48;
              int v278 = *++v263;
              LODWORD(v264) = v278;
            }
            while ((digitab[v278] & 4) != 0);
            v390 = v263;
            if (v265 < 256) {
              goto LABEL_587;
            }
            *a6 = "number after (?C is > 255";
            int v201 = 9;
            int v371 = 1;
            unsigned int v19 = (unsigned char *)v32;
            goto LABEL_644;
          case 'P':
            int v266 = v52[3];
            v390 = v52 + 3;
            if ((v266 - 61) < 2)
            {
              unsigned int v345 = v22;
              unsigned int v368 = v21;
              unsigned int v356 = v17;
              uint64_t v267 = (const char *)(v52 + 4);
              uint64_t v268 = *(const char **)(v15 + 48);
              unint64_t v269 = v52 + 3;
              uint64_t v270 = 0xFFFFFFFF00000000;
              do
              {
                int v271 = *++v269;
                v270 += 0x100000000;
              }
              while (v271 != 41);
              v390 = v269;
              int v272 = *(_DWORD *)(v15 + 56);
              if (v272 < 1)
              {
LABEL_566:
                *a6 = "reference to non-existent subpattern";
                int v201 = 9;
                int v14 = (unsigned __int8 *)v32;
                int v20 = v374;
                unsigned int v19 = v376;
                uint64_t v23 = v377;
                uint64_t v17 = v356;
                uint64_t v21 = v368;
                uint64_t v22 = v345;
              }
              else
              {
                size_t v273 = v270 >> 32;
                while (strncmp(v267, v268 + 2, v273))
                {
                  v268 += *(int *)(v15 + 60);
                  if (!--v272) {
                    goto LABEL_566;
                  }
                }
                int v300 = *(unsigned __int8 *)v268;
                int v301 = *((unsigned __int8 *)v268 + 1);
                int v56 = v301 | (v300 << 8);
                int v20 = v374;
                if (v266 == 62)
                {
                  unsigned int v19 = v376;
                  uint64_t v23 = v377;
                  uint64_t v17 = v356;
                  uint64_t v21 = v368;
                  uint64_t v22 = v345;
LABEL_407:
                  *(unsigned char *)unint64_t v32 = 0;
                  int v194 = *(unsigned __int8 **)(v15 + 32);
                  if (v56)
                  {
                    unsigned int v195 = *v194;
                    if (*v194)
                    {
                      while (1)
                      {
                        if (v195 < 0x51)
                        {
                          uint64_t v197 = OP_lengths[v195];
                          long long v198 = &v194[v197];
                          if (v20)
                          {
                            if (v195 - 24 < 9 || v195 - 21 < 2)
                            {
                              long long v198 = &v194[v197 - 1];
                              do
                              {
                                unsigned int v199 = *++v198;
                                unsigned int v195 = v199;
                              }
                              while ((v199 & 0xC0) == 0x80);
                              goto LABEL_421;
                            }
                            if (v195 == 61) {
                              v198 += __rev16(*(unsigned __int16 *)(v198 + 1)) + 1;
                            }
                          }
                        }
                        else
                        {
                          if (v195 < 0xB5) {
                            unsigned int v196 = v195 - 80;
                          }
                          else {
                            unsigned int v196 = __rev16(*((unsigned __int16 *)v194 + 2));
                          }
                          if (v196 == v56) {
                            goto LABEL_437;
                          }
                          long long v198 = v194 + 3;
                        }
                        unsigned int v195 = *v198;
LABEL_421:
                        int v194 = v198;
                        if (!v195) {
                          goto LABEL_439;
                        }
                      }
                    }
                    goto LABEL_439;
                  }
                  if (!v194)
                  {
LABEL_439:
                    *a6 = "reference to non-existent subpattern";
                    int v201 = 9;
                    int v14 = (unsigned __int8 *)v32;
                    goto LABEL_645;
                  }
LABEL_437:
                  uint64_t v200 = v21;
                  if (__rev16(*(unsigned __int16 *)(v194 + 1)))
                  {
LABEL_438:
                    *(unsigned char *)unint64_t v32 = 63;
                    *(unsigned char *)(v32 + 1) = (unsigned __int16)((_WORD)v194 - *(_WORD *)(v15 + 32)) >> 8;
                    *(unsigned char *)(v32 + 2) = (_BYTE)v194 - *(_DWORD *)(v15 + 32);
                    int v14 = (unsigned __int8 *)(v32 + 3);
                    int v201 = 4;
                  }
                  else
                  {
                    int v243 = &v383;
                    do
                    {
                      unint64_t v244 = v243[1];
                      if (v244 < (unint64_t)v194) {
                        break;
                      }
                      uint64_t v245 = v22;
                      int v246 = could_be_empty_branch(v244, v32, v340);
                      uint64_t v22 = v245;
                      uint64_t v23 = v377;
                      unsigned int v19 = v376;
                      if (!v246) {
                        goto LABEL_438;
                      }
                      int v243 = (uint64_t *)*v243;
                    }
                    while (v243);
                    *a6 = "recursive call could loop indefinitely";
                    int v201 = 9;
                    int v14 = (unsigned __int8 *)v32;
                  }
                  int v20 = v374;
                  uint64_t v21 = v200;
                  goto LABEL_645;
                }
                *(unsigned char *)unint64_t v32 = 62;
                *(unsigned char *)(v32 + 1) = v300;
                *(unsigned char *)(v32 + 2) = v301;
                int v14 = (unsigned __int8 *)(v32 + 3);
                int v302 = 1 << v301;
                if (v56 >= 0x20) {
                  int v302 = 1;
                }
                int v303 = *(_DWORD *)(v15 + 64);
                *(_DWORD *)(v15 + 68) |= v302;
                uint64_t v23 = v377;
                uint64_t v17 = v356;
                uint64_t v21 = v368;
                uint64_t v22 = v345;
                if (v56 > v303) {
                  *(_DWORD *)(v15 + 64) = v56;
                }
                int v201 = 4;
                uint64_t v18 = (char *)v32;
                unsigned int v19 = v376;
              }
LABEL_644:
              unint64_t v32 = (unint64_t)v18;
              goto LABEL_645;
            }
            if (v266 != 60)
            {
              uint64_t v155 = 0;
              uint64_t v157 = a1;
              int v156 = v358;
              goto LABEL_604;
            }
            uint64_t v279 = v15;
            uint64_t v280 = a1;
            uint64_t v281 = *(unsigned char **)(v279 + 48);
            uint64_t v282 = v52 + 4;
            uint64_t v283 = 0x100000000;
            uint64_t v284 = 0xFFFFFFFF00000000;
            v285 = v282;
            do
            {
              int v286 = *v285++;
              v283 += 0x100000000;
              v284 += 0x100000000;
            }
            while (v286 != 62);
            v390 = v285;
            int v287 = *(_DWORD *)(a12 + 56);
            size_t v288 = v284 >> 32;
            uint64_t v289 = v283 >> 32;
            if (v287 < 1) {
              goto LABEL_649;
            }
            unsigned int v346 = v22;
            unsigned int v369 = v21;
            while (1)
            {
              int v290 = memcmp(v282, v281 + 2, v288);
              if (!v290) {
                break;
              }
              if (v290 < 0) {
                goto LABEL_648;
              }
              v281 += *(int *)(a12 + 60);
              if (!--v287) {
                goto LABEL_649;
              }
            }
            if (v281[v289])
            {
LABEL_648:
              memmove(&v281[*(int *)(a12 + 60)], v281, *(int *)(a12 + 60) * (uint64_t)v287);
LABEL_649:
              *uint64_t v281 = (unsigned __int16)(*(_WORD *)a3 + 1) >> 8;
              v281[1] = *(unsigned char *)a3 + 1;
              memcpy(v281 + 2, v282, v288);
              v281[v289] = 0;
              ++*(_DWORD *)(a12 + 56);
              a1 = v280;
              uint64_t v15 = a12;
LABEL_310:
              int v153 = a3;
              int v154 = (*a3)++;
              if (v154 >= 100)
              {
                *(unsigned char *)(v32 + 3) = 79;
                *(unsigned char *)(v32 + 4) = BYTE1(*a3);
                *(unsigned char *)(v32 + 5) = *a3;
                uint64_t v155 = 3;
                int v156 = 181;
                uint64_t v157 = a1;
                goto LABEL_606;
              }
              uint64_t v155 = 0;
              int v156 = v154 + 81;
LABEL_427:
              uint64_t v157 = a1;
LABEL_605:
              if (v156 < 74)
              {
                unint64_t v291 = 0;
LABEL_608:
                *(unsigned char *)unint64_t v32 = v156;
                v391 = (char *)v32;
                int v292 = *(_DWORD *)(v15 + 72);
                int v358 = v156;
                int v293 = compile_regex_0(v157, a1 & 7, v153, &v391, &v390, a6, (v156 - 71) < 2, v155, &v387, (char *)&v387 + 4, &v383, v15);
                int v20 = v374;
                unsigned int v19 = v376;
                uint64_t v294 = v377;
                if (v293)
                {
                  if (v358 == 75)
                  {
                    int v295 = 1;
                    do
                    {
                      v32 += __rev16(*(unsigned __int16 *)(v32 + 1));
                      --v295;
                    }
                    while (*(unsigned char *)v32 != 66);
                    if (-v295 != 1 && v295 != 0)
                    {
                      v320 = "conditional group contains more than two branches";
                      goto LABEL_689;
                    }
                    if (!v295) {
                      uint64_t v387 = -1;
                    }
                  }
                  if (v358 > 79 || (v358 & 0xFFFFFFFE) == 0x4A)
                  {
                    if (v377 == -2)
                    {
                      BOOL v296 = (int)v387 >= 0;
                      if ((int)v387 < 0) {
                        uint64_t v299 = 0xFFFFFFFFLL;
                      }
                      else {
                        uint64_t v299 = v387;
                      }
                      uint64_t v294 = 0xFFFFFFFFLL;
                      int v298 = HIDWORD(v387);
                    }
                    else
                    {
                      BOOL v296 = 0;
                      int v298 = HIDWORD(v387);
                      if ((v387 & 0x80000000) == 0 && v387 < 0)
                      {
                        BOOL v296 = 0;
                        int v298 = v387 | v292;
                        HIDWORD(v387) = v387 | v292;
                      }
                      uint64_t v299 = v377;
                    }
                    if (v298 < 0) {
                      int v298 = v382;
                    }
                  }
                  else
                  {
                    BOOL v296 = 0;
                    BOOL v297 = SHIDWORD(v387) > -1 && v358 == 69;
                    int v298 = v382;
                    if (v297) {
                      int v298 = HIDWORD(v387);
                    }
                    uint64_t v299 = v377;
                  }
                  if (*v390 == 41)
                  {
                    BOOL v349 = v296;
                    unint64_t v32 = v291;
                    int v14 = (unsigned __int8 *)v391;
                    uint64_t v21 = v294;
                    uint64_t v22 = v382;
                    unsigned int v382 = v298;
                    uint64_t v23 = v299;
                    goto LABEL_499;
                  }
                  v320 = "missing)";
LABEL_689:
                  *a6 = v320;
                }
                goto LABEL_690;
              }
LABEL_606:
              unint64_t v291 = v32;
              goto LABEL_608;
            }
            *a6 = "two named groups have the same name";
            int v201 = 9;
            int v14 = (unsigned __int8 *)v32;
            unint64_t v32 = (unint64_t)v18;
            a1 = v280;
            uint64_t v15 = a12;
            int v20 = v374;
            unsigned int v19 = v376;
            uint64_t v23 = v377;
            uint64_t v21 = v369;
            uint64_t v22 = v346;
            goto LABEL_645;
          case 'R':
            uint64_t v54 = v52[3];
            int v55 = v52 + 3;
LABEL_74:
            if ((digitab[v54] & 4) != 0)
            {
              int v56 = 0;
              do
              {
                int v192 = 10 * v56 + v54;
                int v193 = *++v55;
                LOBYTE(v54) = v193;
                int v56 = v192 - 48;
              }
              while ((digitab[v193] & 4) != 0);
            }
            else
            {
              int v56 = 0;
            }
            v390 = v55;
            goto LABEL_407;
          default:
            HIDWORD(v386) = 0;
            __int16 v254 = v52 + 3;
            __int16 v255 = (int *)&v386 + 1;
            while (2)
            {
              if (v54 == 41 || v54 == 58)
              {
                uint64_t v274 = v21;
                v390 = v254 - 1;
                uint64_t v157 = (HIDWORD(v386) | a1) & ~v386;
                if (v54 != 41)
                {
                  uint64_t v155 = 0;
                  v390 = v254;
                  int v156 = 80;
LABEL_604:
                  int v153 = a3;
                  goto LABEL_605;
                }
                if ((a1 & 7) != ((BYTE4(v386) | a1) & ~(_BYTE)v386 & 7))
                {
                  *(unsigned char *)unint64_t v32 = 18;
                  *(unsigned char *)(v32 + 1) = v157 & 7;
                  v32 += 2;
                }
                unsigned int v357 = (v157 >> 9) & 1;
                BOOL v350 = (v157 & 0x200) == 0;
                int v375 = (v157 & 1) << 8;
                int v201 = 4;
                a1 = v157;
                int v14 = (unsigned __int8 *)v32;
                unint64_t v32 = 0;
                uint64_t v21 = v274;
LABEL_645:
                if (v201 == 4) {
                  goto LABEL_499;
                }
LABEL_690:
                uint64_t result = 0;
                *a5 = v390;
                return result;
              }
              if (v54 <= 104)
              {
                switch(v54)
                {
                  case '-':
                    __int16 v255 = (int *)&v386;
                    break;
                  case 'U':
                    int v256 = *v255 | 0x200;
                    goto LABEL_543;
                  case 'X':
                    int v256 = *v255 | 0x40;
                    goto LABEL_543;
                }
              }
              else if (v54 > 114)
              {
                if (v54 == 115)
                {
                  int v256 = *v255 | 4;
                  goto LABEL_543;
                }
                if (v54 == 120)
                {
                  int v256 = *v255 | 8;
                  goto LABEL_543;
                }
              }
              else
              {
                if (v54 == 105)
                {
                  int v256 = *v255 | 1;
                  goto LABEL_543;
                }
                if (v54 == 109)
                {
                  int v256 = *v255 | 2;
LABEL_543:
                  int *v255 = v256;
                }
              }
              unsigned int v257 = *v254++;
              uint64_t v54 = v257;
              continue;
            }
        }
      }
      if ((int)v24 > 93) {
        break;
      }
      if (v24 == 63)
      {
        uint64_t v392 = 1;
        if (!v18) {
          goto LABEL_688;
        }
        goto LABEL_89;
      }
      if (v24 == 91)
      {
        char v75 = v390;
        unsigned int v78 = v390[1];
        int v76 = v390 + 1;
        unsigned int v77 = v78;
        uint64_t v79 = (1 << v78) & 0x2400400000000000;
        BOOL v80 = v78 > 0x3D || v79 == 0;
        if (!v80)
        {
          unint64_t v81 = v390 + 2;
          if (v390[2] == 94) {
            unint64_t v81 = v390 + 3;
          }
          do
          {
            unsigned int v83 = *v81++;
            unsigned int v82 = v83;
          }
          while ((*(unsigned char *)(*(void *)(v15 + 24) + v83) & 2) != 0);
          if (v82 == v77 && *v81 == 93)
          {
            v320 = "POSIX collating elements are not supported";
            if (v77 == 58) {
              v320 = "POSIX named classes are supported only within a class";
            }
            goto LABEL_689;
          }
        }
        ++v390;
        LODWORD(v84) = v77;
        unsigned int v351 = v77;
        if (v77 == 94)
        {
          LODWORD(v84) = v75[2];
          v390 = v75 + 2;
          int v76 = v75 + 2;
        }
        int v362 = 0;
        int v85 = 0;
        int v14 = (unsigned __int8 *)(v32 + 2);
        int8x16_t v394 = 0u;
        int8x16_t v395 = 0u;
        int v86 = -1;
        v341 = (void *)(v32 + 36);
        unsigned int v372 = (char *)(v32 + 36);
        while (1)
        {
          if (v20 && (char)v84 < 0 && (v84 & 0xC0) == 0xC0)
          {
            unint64_t v87 = utf8_table4[v84 & 0x3F];
            LODWORD(v84) = (utf8_table3[v87] & v84) << (6 * v87);
            int v88 = (char *)(v76 + 1);
            if (v87 <= 1) {
              uint64_t v89 = 1;
            }
            else {
              uint64_t v89 = v87;
            }
            int v90 = 6 * v87 - 6;
            do
            {
              char v91 = *v88++;
              LODWORD(v84) = ((v91 & 0x3F) << v90) | v84;
              v90 -= 6;
              --v89;
            }
            while (v89);
            v76 += v87;
            v390 = v76;
          }
          if (v17)
          {
            if (v84 != 92) {
              goto LABEL_175;
            }
            int v93 = v76[1];
            uint64_t v92 = v76 + 1;
            if (v93 != 69)
            {
              LODWORD(v84) = 92;
LABEL_178:
              v394.i8[(int)v84 / 8] |= 1 << (v84 & 7);
              if (a1)
              {
                unint64_t v84 = *(unsigned __int8 *)(*(void *)(v15 + 8) + (int)v84);
                v394.i8[v84 >> 3] |= 1 << (v84 & 7);
              }
              ++v85;
              int v86 = v84;
              goto LABEL_181;
            }
          }
          else
          {
            if (v84 != 92)
            {
              if (v84 == 91)
              {
                unsigned int v94 = v76[1];
                LODWORD(v84) = 91;
                if (v94 <= 0x3D && ((1 << v94) & 0x2400400000000000) != 0)
                {
                  uint64_t v95 = 0;
                  int v98 = v76[2];
                  int v96 = v76 + 2;
                  int v97 = v98;
                  if (v98 == 94) {
                    int v99 = v96 + 1;
                  }
                  else {
                    int v99 = v96;
                  }
                  do
                  {
                    int v100 = v99[v95];
                    char v101 = *(unsigned char *)(*(void *)(a12 + 24) + v99[v95++]);
                  }
                  while ((v101 & 2) != 0);
                  if (v100 == v94 && v99[v95] == 93)
                  {
                    if (v94 == 58)
                    {
                      uint64_t v102 = 0;
                      uint64_t v103 = 0;
                      long long v332 = *(char **)(a12 + 16);
                      v390 = v99;
                      while (posix_name_lengths_0[v103] + 1 != v95
                           || strncmp((const char *)v99, posix_names_0[v103], (v95 - 1)))
                      {
                        ++v103;
                        v102 += 0x300000000;
                        if (v103 == 14) {
                          goto LABEL_687;
                        }
                      }
                      if ((v103 & 0x80000000) != 0)
                      {
LABEL_687:
                        v320 = "unknown POSIX class name";
                        goto LABEL_689;
                      }
                      uint64_t v127 = v102 >> 32;
                      int v128 = strncmp((const char *)v99, "blank", 5uLL);
                      uint64_t v23 = v377;
                      unsigned int v19 = v376;
                      int v20 = v374;
                      uint64_t v129 = 0;
                      a1 = a1;
                      if ((a1 & (v103 < 3)) != 0) {
                        uint64_t v130 = 0;
                      }
                      else {
                        uint64_t v130 = v127;
                      }
                      while (2)
                      {
                        if ((0x36DB6DB41B4uLL >> (v129 + v130)))
                        {
LABEL_240:
                          LODWORD(v17) = 0;
                          v390 = &v99[v95];
                          int v85 = 10;
                          goto LABEL_241;
                        }
                        uint64_t v131 = posix_class_maps_0[v129 + v130];
                        if (v97 == 94)
                        {
                          uint64_t v132 = 0;
                          BOOL v133 = &v332[v131];
                          if (v129)
                          {
                            do
                            {
                              *(int8x16_t *)((char *)&v394 + v132) = vbicq_s8(*(int8x16_t *)((char *)&v394 + v132), *(int8x16_t *)&v133[v132]);
                              v132 += 16;
                            }
                            while (v132 != 32);
                          }
                          else
                          {
                            do
                            {
                              *(int8x16_t *)((char *)&v394 + v132) = vornq_s8(*(int8x16_t *)((char *)&v394 + v132), *(int8x16_t *)&v133[v132]);
                              v132 += 16;
                            }
                            while (v132 != 32);
                          }
                          if (!v128)
                          {
                            __int8 v134 = v394.i8[1] | 0x3C;
                            goto LABEL_238;
                          }
                        }
                        else
                        {
                          uint64_t v135 = 0;
                          uint64_t v136 = &v332[v131];
                          do
                          {
                            *(int8x16_t *)((char *)&v394 + v135) = vorrq_s8(*(int8x16_t *)((char *)&v394 + v135), *(int8x16_t *)&v136[v135]);
                            v135 += 16;
                          }
                          while (v135 != 32);
                          if (!v128)
                          {
                            __int8 v134 = v394.i8[1] & 0xC3;
LABEL_238:
                            v394.i8[1] = v134;
                          }
                        }
                        if (++v129 == 3) {
                          goto LABEL_240;
                        }
                        continue;
                      }
                    }
                    v320 = "POSIX collating elements are not supported";
                    goto LABEL_689;
                  }
                  LODWORD(v84) = 91;
                }
              }
LABEL_160:
              uint64_t v105 = v390;
              if (v390[1] == 45)
              {
                uint64_t v106 = a1;
                unsigned int v107 = v390 + 2;
                uint64_t v108 = v390[2];
                if (v108 == 93) {
                  goto LABEL_173;
                }
                v390 += 2;
                if (v20 && (v108 & 0xC0) == 0xC0)
                {
                  unint64_t v109 = utf8_table4[v108 & 0x3F];
                  LODWORD(v108) = (utf8_table3[v109] & v108) << (6 * v109);
                  int v110 = (char *)(v105 + 3);
                  if (v109 <= 1) {
                    uint64_t v111 = 1;
                  }
                  else {
                    uint64_t v111 = v109;
                  }
                  int v112 = 6 * v109 - 6;
                  do
                  {
                    char v113 = *v110++;
                    uint64_t v108 = ((v113 & 0x3F) << v112) | v108;
                    v112 -= 6;
                    --v111;
                  }
                  while (v111);
                  v107 += v109;
                  v390 = v107;
                }
                if (v108 != 92
                  || (uint64_t v114 = check_escape(&v390, a6, *a3, v106, 1),
                      uint64_t v23 = v377,
                      unsigned int v19 = v376,
                      int v20 = v374,
                      uint64_t v108 = v114,
                      (v114 & 0x80000000) == 0))
                {
LABEL_172:
                  if (v108 == v84) {
                    goto LABEL_173;
                  }
                  a1 = v106;
                  if (!v20
                    || ((int)v108 <= 255 ? (BOOL v117 = (v106 & ((int)v108 > 127)) == 0) : (BOOL v117 = 0), v117))
                  {
                    if ((int)v84 <= (int)v108)
                    {
                      uint64_t v120 = (int)v84;
                      int v86 = v84 - 1;
                      do
                      {
                        int v121 = v86++;
                        if (v86 >= 0) {
                          int v122 = v121 + 1;
                        }
                        else {
                          int v122 = v121 + 8;
                        }
                        v394.i8[v122 >> 3] |= 1 << (v86 & 7);
                        if (v106)
                        {
                          unint64_t v123 = *(unsigned __int8 *)(*(void *)(a12 + 8) + v120);
                          v394.i8[v123 >> 3] |= 1 << (v123 & 7);
                        }
                        ++v120;
                      }
                      while (v108 != v86);
                      LODWORD(v17) = 0;
                      int v85 = v108 + v85 + 1 - v84;
                    }
                    else
                    {
                      LODWORD(v17) = 0;
                    }
LABEL_241:
                    uint64_t v15 = a12;
                    goto LABEL_181;
                  }
                  if (v106)
                  {
                    uint64_t v386 = 0;
                    uint64_t v118 = v108;
                    int v385 = v84;
LABEL_245:
                    uint64_t v137 = v118;
LABEL_246:
                    uint64_t v118 = v137;
                    while (get_othercase_range(&v385, v108, (_DWORD *)&v386 + 1, &v386))
                    {
                      uint64_t v137 = v386;
                      if (SHIDWORD(v386) < (int)v84 || (int)v386 > (int)v118)
                      {
                        if (SHIDWORD(v386) < (int)v84 && (int)v386 >= (int)v84 - 1)
                        {
                          LODWORD(v84) = HIDWORD(v386);
                          goto LABEL_245;
                        }
                        if ((int)v386 <= (int)v118 || SHIDWORD(v386) > (int)v118 + 1)
                        {
                          uint64_t v140 = (uint64_t)(v372 + 1);
                          if (HIDWORD(v386) == v386)
                          {
                            *unsigned int v372 = 1;
                          }
                          else
                          {
                            *unsigned int v372 = 2;
                            v140 += (int)ord2utf8(SHIDWORD(v386), v140);
                          }
                          unsigned int v372 = (char *)(v140 + (int)ord2utf8(v386, v140));
                          goto LABEL_245;
                        }
                        goto LABEL_246;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v118) = v108;
                  }
                  *unsigned int v372 = 2;
                  uint64_t v119 = (uint64_t)&v372[(int)ord2utf8(v84, (uint64_t)(v372 + 1)) + 1];
                  LODWORD(v17) = 0;
                  unsigned int v372 = (char *)(v119 + (int)ord2utf8(v118, v119));
                  int v362 = 1;
                  a1 = v106;
                  uint64_t v15 = a12;
LABEL_188:
                  int v20 = v374;
                  unsigned int v19 = v376;
                  uint64_t v23 = v377;
                  goto LABEL_181;
                }
                if (v114 == -4)
                {
                  uint64_t v108 = 8;
                  goto LABEL_172;
                }
                if (v114 == -15)
                {
                  uint64_t v108 = 88;
                  goto LABEL_172;
                }
                v390 = v107 - 2;
LABEL_173:
                a1 = v106;
              }
              uint64_t v15 = a12;
LABEL_175:
              if (!v20 || (int)v84 <= 255 && (a1 & ((int)v84 > 127)) == 0) {
                goto LABEL_178;
              }
              int v362 = 1;
              *unsigned int v372 = 1;
              v372 += (int)ord2utf8(v84, (uint64_t)(v372 + 1)) + 1;
              if (a1)
              {
                LODWORD(v386) = 0;
                if ((ucp_findchar(v84, (int *)&v386 + 1, (unsigned int *)&v386) & 0x80000000) == 0 && (int)v386 >= 1)
                {
                  *unsigned int v372 = 1;
                  v372 += (int)ord2utf8(v386, (uint64_t)(v372 + 1)) + 1;
                }
                unsigned int v19 = v376;
                uint64_t v23 = v377;
                int v362 = 1;
                goto LABEL_203;
              }
              goto LABEL_188;
            }
            int v104 = check_escape(&v390, a6, *a3, a1, 1);
            if (v104 != -19)
            {
              LODWORD(v84) = v104;
              unsigned int v19 = v376;
              uint64_t v23 = v377;
              if (v104 == -4)
              {
                LODWORD(v84) = 8;
                int v20 = v374;
              }
              else
              {
                int v20 = v374;
                if (v104 == -15)
                {
                  LODWORD(v84) = 88;
                }
                else if (v104 < 0)
                {
                  uint64_t v15 = a12;
                  int v124 = *(int8x16_t **)(a12 + 16);
                  switch(-5 - v104)
                  {
                    case 0:
                      uint64_t v141 = 0;
                      int v142 = v124 + 4;
                      do
                      {
                        *(int8x16_t *)((char *)&v394 + v141 * 16) = vornq_s8(*(int8x16_t *)((char *)&v394 + v141 * 16), v142[v141]);
                        ++v141;
                      }
                      while (v141 != 2);
                      goto LABEL_276;
                    case 1:
                      LODWORD(v17) = 0;
                      int8x16_t v143 = v124[4];
                      int8x16_t v144 = v124[5];
                      goto LABEL_278;
                    case 2:
                      for (uint64_t i = 0; i != 2; ++i)
                        *(int8x16_t *)((char *)&v394 + i * 16) = vornq_s8(*(int8x16_t *)((char *)&v394 + i * 16), v124[i]);
                      LODWORD(v17) = 0;
                      __int8 v146 = v394.i8[1] | 8;
                      goto LABEL_273;
                    case 3:
                      for (uint64_t j = 0; j != 2; ++j)
                        *(int8x16_t *)((char *)&v394 + j * 16) = vorrq_s8(*(int8x16_t *)((char *)&v394 + j * 16), v124[j]);
                      LODWORD(v17) = 0;
                      __int8 v146 = v394.i8[1] & 0xF7;
LABEL_273:
                      v394.i8[1] = v146;
                      goto LABEL_279;
                    case 4:
                      uint64_t v148 = 0;
                      uint64_t v149 = v124 + 10;
                      do
                      {
                        *(int8x16_t *)((char *)&v394 + v148 * 16) = vornq_s8(*(int8x16_t *)((char *)&v394 + v148 * 16), v149[v148]);
                        ++v148;
                      }
                      while (v148 != 2);
LABEL_276:
                      LODWORD(v17) = 0;
                      goto LABEL_279;
                    case 5:
                      LODWORD(v17) = 0;
                      int8x16_t v143 = v124[10];
                      int8x16_t v144 = v124[11];
LABEL_278:
                      int8x16_t v394 = vorrq_s8(v394, v143);
                      int8x16_t v395 = vorrq_s8(v395, v144);
LABEL_279:
                      v85 += 2;
                      goto LABEL_181;
                    case 8:
                    case 9:
                      HIDWORD(v386) = 0;
                      int ucp_0 = get_ucp_0(&v390, (_DWORD *)&v386 + 1, a6);
                      if (ucp_0 < 0) {
                        goto LABEL_690;
                      }
                      LODWORD(v17) = 0;
                      if (HIDWORD(v386) == (v84 == -14)) {
                        char v126 = 4;
                      }
                      else {
                        char v126 = 3;
                      }
                      *unsigned int v372 = v126;
                      v372[1] = ucp_0;
                      int v362 = 1;
                      v372 += 2;
                      goto LABEL_188;
                    default:
                      if ((a1 & 0x40) != 0)
                      {
                        v320 = "invalid escape sequence in character class";
                        goto LABEL_689;
                      }
                      LODWORD(v84) = *v390;
                      break;
                  }
                }
              }
              goto LABEL_160;
            }
            unsigned int v19 = v376;
            uint64_t v23 = v377;
            if (v390[1] != 92)
            {
              LODWORD(v17) = 1;
LABEL_203:
              int v20 = v374;
              goto LABEL_181;
            }
            uint64_t v92 = v390 + 2;
            int v20 = v374;
            if (v390[2] != 69)
            {
              LODWORD(v17) = 1;
              goto LABEL_181;
            }
          }
          LODWORD(v17) = 0;
          v390 = v92;
LABEL_181:
          int v115 = v390[1];
          int v76 = v390 + 1;
          LODWORD(v84) = v115;
          ++v390;
          if (v115 == 93 && v17 == 0)
          {
            if (v85 != 1
              || v20
              && (v351 == 94 ? (BOOL v151 = v86 <= 127) : (BOOL v151 = 1), v151 ? (v152 = 0) : (v152 = 1), v362 || (v152 & 1) != 0))
            {
              if (v23 == -2) {
                uint64_t v21 = 0xFFFFFFFFLL;
              }
              else {
                uint64_t v21 = v23;
              }
              if (v362)
              {
                *unsigned int v372 = 0;
                int v14 = (unsigned __int8 *)(v372 + 1);
                *(unsigned char *)unint64_t v32 = 61;
                *(unsigned char *)(v32 + 3) = v351 == 94;
                if (v85 < 1)
                {
                  unsigned int v202 = v14 - v341;
                  uint64_t v203 = v21;
                  memmove((void *)(v32 + 4), v341, v202);
                  uint64_t v21 = v203;
                  unsigned int v19 = v376;
                  int v20 = v374;
                  int v14 = (unsigned __int8 *)(v32 + 3 + (int)(v202 + 1));
                }
                else
                {
                  *(unsigned char *)(v32 + 3) = (v351 == 94) | 2;
                  int8x16_t v172 = v394;
                  *(int8x16_t *)(v32 + 20) = v395;
                  *(int8x16_t *)(v32 + 4) = v172;
                }
                uint64_t v17 = 0;
                *(_WORD *)(v32 + 1) = bswap32(v14 - v32) >> 16;
              }
              else
              {
                int v190 = (int8x16_t *)(v32 + 1);
                if (v351 == 94)
                {
                  uint64_t v191 = 0;
                  *(unsigned char *)unint64_t v32 = 60;
                  do
                  {
                    v190->i8[v191] = ~v394.i8[v191];
                    ++v191;
                  }
                  while (v191 != 32);
                }
                else
                {
                  *(unsigned char *)unint64_t v32 = 59;
                  int8x16_t v217 = v395;
                  *int v190 = v394;
                  *(int8x16_t *)(v32 + 17) = v217;
                }
                uint64_t v17 = 0;
                int v14 = (unsigned __int8 *)(v32 + 33);
              }
              goto LABEL_85;
            }
            if (v351 == 94)
            {
              uint64_t v17 = 0;
              if (v23 == -2) {
                uint64_t v21 = 0xFFFFFFFFLL;
              }
              else {
                uint64_t v21 = v23;
              }
              *(unsigned char *)unint64_t v32 = 23;
              *(unsigned char *)(v32 + 1) = v86;
              goto LABEL_85;
            }
            if (v20 && v86 >= 128)
            {
              int v37 = ord2utf8(v86, (uint64_t)v393);
              uint64_t v23 = v377;
              unsigned int v19 = v376;
              int v20 = v374;
              uint64_t v17 = 0;
              goto LABEL_33;
            }
            uint64_t v17 = 0;
            v393[0] = v86;
LABEL_351:
            if (a1) {
              char v173 = 22;
            }
            else {
              char v173 = 21;
            }
            *(unsigned char *)unint64_t v32 = v173;
            int v14 = (unsigned __int8 *)(v32 + 1);
            int v37 = 1;
LABEL_355:
            uint64_t v174 = v37;
            int v175 = v393;
            do
            {
              unsigned __int8 v176 = *v175++;
              unsigned __int8 v38 = v176;
              *v14++ = v176;
              --v174;
            }
            while (v174);
LABEL_357:
            BOOL v178 = v37 == 1 || v375 == 0;
            if (v23 != -2)
            {
              if (v178)
              {
                uint64_t v22 = v382;
                int v179 = *(_DWORD *)(v15 + 72) | v375 | v38;
                uint64_t v21 = v23;
LABEL_366:
                unsigned int v382 = v179;
                goto LABEL_499;
              }
              uint64_t v21 = v23;
LABEL_368:
              uint64_t v22 = v382;
              goto LABEL_499;
            }
            if (v178)
            {
              uint64_t v23 = v375 | v393[0];
              if (v37 != 1)
              {
                uint64_t v22 = v382;
                int v179 = *(_DWORD *)(v15 + 72) | v38;
                uint64_t v21 = 0xFFFFFFFFLL;
                goto LABEL_366;
              }
              uint64_t v21 = 0xFFFFFFFFLL;
              goto LABEL_368;
            }
            uint64_t v21 = 0xFFFFFFFFLL;
            uint64_t v22 = v382;
            unsigned int v382 = -1;
            uint64_t v23 = 0xFFFFFFFFLL;
            goto LABEL_499;
          }
        }
      }
      if (v24 != 92) {
        goto LABEL_25;
      }
      uint64_t v42 = v22;
      uint64_t v43 = v21;
      unsigned int v44 = check_escape(&v390, a6, *a3, a1, 0);
      unsigned int v45 = v44;
      if ((v44 & 0x80000000) == 0)
      {
        int v20 = v374;
        if (v374 && v44 >= 0x80)
        {
          int v37 = ord2utf8(v44, (uint64_t)v393);
          int v20 = v374;
          unsigned int v19 = v376;
          uint64_t v23 = v377;
          goto LABEL_33;
        }
        v393[0] = v44;
        unsigned int v19 = v376;
        uint64_t v23 = v377;
        goto LABEL_351;
      }
      int v20 = v374;
      uint64_t v23 = v377;
      if (v44 != -19)
      {
        unsigned int v188 = v44 + 15;
        if (v44 + 15 >= 0xB) {
          unsigned int v189 = -2;
        }
        else {
          unsigned int v189 = -1;
        }
        if (v377 == -2) {
          uint64_t v21 = v189;
        }
        else {
          uint64_t v21 = v377;
        }
        unsigned int v19 = v376;
        if (v45 > 0xFFFFFFEC)
        {
          if ((v45 & 0xFFFFFFFE) == 0xFFFFFFF2)
          {
            HIDWORD(v386) = 0;
            uint64_t v204 = v21;
            char v205 = get_ucp_0(&v390, (_DWORD *)&v386 + 1, a6);
            unsigned int v19 = v376;
            int v20 = v374;
            if (HIDWORD(v386) == (v45 == -14)) {
              char v206 = 13;
            }
            else {
              char v206 = 14;
            }
            *(unsigned char *)unint64_t v32 = v206;
            int v14 = (unsigned __int8 *)(v32 + 2);
            *(unsigned char *)(v32 + 1) = v205;
            uint64_t v21 = v204;
            uint64_t v22 = v382;
            uint64_t v23 = v204;
            goto LABEL_499;
          }
          if (v188 >= 0xB) {
            unint64_t v229 = 0;
          }
          else {
            unint64_t v229 = v32;
          }
          *(unsigned char *)unint64_t v32 = -(char)v45;
          int v14 = (unsigned __int8 *)(v32 + 1);
          unint64_t v32 = v229;
        }
        else
        {
          *(unsigned char *)unint64_t v32 = 62;
          *(unsigned char *)(v32 + 1) = (unsigned __int16)(-20 - v45) >> 8;
          *(unsigned char *)(v32 + 2) = -20 - v45;
          int v14 = (unsigned __int8 *)(v32 + 3);
        }
LABEL_85:
        uint64_t v22 = v382;
        uint64_t v23 = v21;
        goto LABEL_499;
      }
      unsigned int v19 = v376;
      if (v390[1] == 92)
      {
        uint64_t v21 = v43;
        uint64_t v22 = v42;
        if (v390[2] == 69) {
          v390 += 2;
        }
        else {
          uint64_t v17 = 1;
        }
        int v14 = (unsigned __int8 *)v32;
        goto LABEL_87;
      }
      uint64_t v17 = 1;
      int v14 = (unsigned __int8 *)v32;
      unint64_t v32 = (unint64_t)v18;
      uint64_t v21 = v43;
      uint64_t v22 = v42;
LABEL_499:
      int v16 = ++v390;
      uint64_t v18 = (char *)v32;
    }
    if (v24 == 94)
    {
      if (v23 == -2) {
        unsigned int v150 = -1;
      }
      else {
        unsigned int v150 = v23;
      }
      if ((a1 & 2) != 0) {
        uint64_t v23 = v150;
      }
      else {
        uint64_t v23 = v23;
      }
      char v41 = 19;
LABEL_289:
      *(unsigned char *)unint64_t v32 = v41;
      int v14 = (unsigned __int8 *)(v32 + 1);
      unint64_t v32 = 0;
      goto LABEL_499;
    }
    if (v24 == 123)
    {
      if ((v25 & 1) == 0)
      {
        v393[0] = 123;
        goto LABEL_351;
      }
      uint64_t v46 = v21;
      uint64_t v47 = v22;
      repeat_counts_0 = read_repeat_counts_0(v390 + 1, (int *)&v392 + 1, (int *)&v392, a6);
      uint64_t v22 = v47;
      LODWORD(v23) = v377;
      unsigned int v19 = v376;
      int v20 = v374;
      v390 = repeat_counts_0;
      uint64_t v21 = v46;
      if (*a6) {
        goto LABEL_690;
      }
LABEL_79:
      if (!v18)
      {
LABEL_688:
        v320 = "nothing to repeat";
        goto LABEL_689;
      }
LABEL_89:
      int v57 = HIDWORD(v392) != v392;
      unsigned int v58 = v382;
      if (!HIDWORD(v392)) {
        unsigned int v58 = v22;
      }
      unsigned int v382 = v58;
      if (HIDWORD(v392)) {
        uint64_t v23 = v23;
      }
      else {
        uint64_t v23 = v21;
      }
      v391 = v18;
      int v59 = v390[1];
      if (v59 == 43)
      {
        char v60 = 0;
        ++v390;
      }
      else
      {
        char v60 = v357;
        if (v59 == 63)
        {
          ++v390;
          char v60 = v350;
        }
      }
      unsigned int v61 = *v18;
      if (v61 == 63)
      {
        *(_WORD *)(v18 + 3) = *(_WORD *)v18;
        v18[5] = v18[2];
        *uint64_t v18 = 80;
        __int16 v62 = v32 + 3 - (_WORD)v18;
        v18[1] = HIBYTE(v62);
        v18[2] = v62;
        *(unsigned char *)(v32 + 3) = 66;
        *(unsigned char *)(v32 + 4) = HIBYTE(v62);
        *(unsigned char *)(v32 + 5) = v62;
        v32 += 6;
        unsigned int v61 = *v18;
      }
      if (v61 - 21 < 2)
      {
        if (v20 && *(char *)(v32 - 1) < 0)
        {
          char v378 = v60;
          unsigned int v359 = a1;
          int v63 = v59;
          int v64 = v57;
          uint64_t v65 = v22;
          uint64_t v66 = v21;
          uint64_t v67 = v17;
          uint64_t v68 = v23;
          uint64_t v69 = 0;
          do
            int v70 = *(unsigned char *)(v32 + v69-- - 1) & 0xC0;
          while (v70 == 128);
          uint64_t v71 = -v69;
          __memcpy_chk();
          char v72 = 0;
          int v73 = v71 | 0x80;
          unsigned int v61 = *v18;
          int v20 = v374;
          unsigned int v19 = v376;
          uint64_t v23 = v68;
          uint64_t v17 = v67;
          uint64_t v21 = v66;
          uint64_t v22 = v65;
          int v57 = v64;
          int v59 = v63;
          a1 = v359;
          char v60 = v378;
        }
        else
        {
          int v73 = *(unsigned __int8 *)(v32 - 1);
          char v72 = 0;
          if (SHIDWORD(v392) >= 2) {
            unsigned int v382 = *(_DWORD *)(v15 + 72) | v73 | v375;
          }
        }
LABEL_313:
        if (v61 - 13 > 1) {
          int v74 = -1;
        }
        else {
          int v74 = v18[1];
        }
LABEL_316:
        int v158 = v392;
        if (v392)
        {
          uint64_t v159 = a1;
          if (v392 != 1) {
            *(_DWORD *)(a12 + 76) = 1;
          }
          char v160 = v72 + v60;
          if (HIDWORD(v392) != 1)
          {
            int v373 = v57;
            if (!HIDWORD(v392))
            {
              if (v158 != 1)
              {
                if (v158 == -1)
                {
                  char v161 = v160 + 24;
                  goto LABEL_383;
                }
                *uint64_t v18 = v160 + 30;
                v18[1] = BYTE1(v392);
                v18[2] = v392;
                int v162 = v18 + 3;
                goto LABEL_488;
              }
              char v161 = v160 + 28;
LABEL_383:
              *uint64_t v18 = v161;
              int v162 = v18 + 1;
              goto LABEL_488;
            }
            *uint64_t v18 = v72 | 0x20;
            v18[1] = BYTE5(v392);
            v18[2] = BYTE4(v392);
            int v162 = v18 + 3;
            if ((v392 & 0x80000000) != 0)
            {
              if (v20 && v73 >= 128)
              {
                size_t v180 = v73 & 7;
                unsigned int v364 = v21;
                int v181 = v18 + 3;
                unsigned int v353 = v17;
                uint64_t v182 = v23;
                uint64_t v183 = v22;
                int v184 = v73;
                memcpy(v181, &__src, v180);
                int v73 = v184;
                uint64_t v22 = v183;
                uint64_t v21 = v364;
                uint64_t v23 = v182;
                uint64_t v17 = v353;
                unsigned int v19 = v376;
                int v20 = v374;
                uint64_t v185 = &v162[v180];
              }
              else
              {
                v18[3] = v73;
                if (v74 < 0)
                {
                  uint64_t v185 = v18 + 4;
                }
                else
                {
                  uint64_t v185 = v18 + 5;
                  v18[4] = v74;
                }
              }
              *uint64_t v185 = v160 + 24;
              int v162 = v185 + 1;
              goto LABEL_488;
            }
            if (v392 != HIDWORD(v392))
            {
              if (v20 && v73 >= 128)
              {
                size_t v163 = v73 & 7;
                unsigned int v363 = v21;
                uint64_t v164 = v18 + 3;
                unsigned int v352 = v17;
                uint64_t v165 = v23;
                uint64_t v166 = v22;
                int v167 = v73;
                memcpy(v164, &__src, v163);
                int v73 = v167;
                uint64_t v22 = v166;
                uint64_t v21 = v363;
                uint64_t v23 = v165;
                uint64_t v17 = v352;
                unsigned int v19 = v376;
                int v20 = v374;
                __int16 v168 = &v162[v163];
                if (v74 < 0) {
                  goto LABEL_435;
                }
LABEL_434:
                *v168++ = v74;
              }
              else
              {
                __int16 v168 = v18 + 4;
                v18[3] = v73;
                if ((v74 & 0x80000000) == 0) {
                  goto LABEL_434;
                }
              }
LABEL_435:
              LODWORD(v392) = v392 - HIDWORD(v392);
              *__int16 v168 = v160 + 30;
              v168[1] = BYTE1(v392);
              v168[2] = v392;
              int v162 = v168 + 3;
            }
LABEL_488:
            a1 = v159;
            if (v20 && v73 >= 128)
            {
              size_t v230 = v73 & 7;
              uint64_t v231 = v21;
              uint64_t v232 = v159;
              int v233 = v59;
              uint64_t v234 = v23;
              uint64_t v235 = v22;
              memcpy(v162, &__src, v230);
              uint64_t v22 = v235;
              uint64_t v21 = v231;
              uint64_t v23 = v234;
              int v59 = v233;
              a1 = v232;
              unsigned int v19 = v376;
              int v20 = v374;
              uint64_t v171 = &v162[v230];
            }
            else
            {
              *int v162 = v73;
              uint64_t v171 = v162 + 1;
            }
            uint64_t v15 = a12;
            if ((v74 & 0x80000000) == 0) {
              *v171++ = v74;
            }
LABEL_494:
            if (v59 == 43)
            {
              long long v236 = v391;
              int v237 = v171 - v391;
              uint64_t v238 = v21;
              uint64_t v239 = v17;
              uint64_t v240 = v23;
              uint64_t v241 = v15;
              uint64_t v242 = v22;
              memmove(v391 + 3, v391, (int)v171 - (int)v391);
              uint64_t v22 = v242;
              uint64_t v15 = v241;
              uint64_t v21 = v238;
              uint64_t v23 = v240;
              uint64_t v17 = v239;
              unsigned int v19 = v376;
              int v20 = v374;
              *long long v236 = 74;
              v171[3] = 66;
              v171[4] = (unsigned __int16)(v237 + 3) >> 8;
              v171[5] = v237 + 3;
              uint64_t v18 = v171 + 6;
              *(_WORD *)(v391 + 1) = bswap32(v237 + 3) >> 16;
            }
            else
            {
              uint64_t v18 = v171;
            }
            int v57 = v373;
LABEL_498:
            unint64_t v32 = 0;
            *(_DWORD *)(v15 + 72) |= v57 << 9;
            int v14 = (unsigned __int8 *)v18;
            goto LABEL_499;
          }
          if (v158 != 1)
          {
            int v373 = v57;
            if (v158 != -1)
            {
              *(unsigned char *)unint64_t v32 = v160 + 30;
              *(unsigned char *)(v32 + 1) = (unsigned __int16)(v392 - 1) >> 8;
              *(unsigned char *)(v32 + 2) = v392 - 1;
              int v162 = (char *)(v32 + 3);
              goto LABEL_488;
            }
            char v161 = v160 + 26;
            goto LABEL_383;
          }
          uint64_t v18 = (char *)v32;
          a1 = v159;
        }
        uint64_t v15 = a12;
        goto LABEL_498;
      }
      if (v61 == 23)
      {
        int v73 = v18[1];
        int v74 = -1;
        char v72 = 9;
        goto LABEL_316;
      }
      if (v61 <= 0xF)
      {
        char v72 = 18;
        int v73 = v61;
        goto LABEL_313;
      }
      if (v61 - 59 <= 3)
      {
        int v169 = v392;
        if (!v392) {
          goto LABEL_498;
        }
        int v373 = v57;
        if (v392 == 1)
        {
          if (HIDWORD(v392))
          {
LABEL_337:
            *(unsigned char *)unint64_t v32 = v60 + 57;
            *(unsigned char *)(v32 + 1) = BYTE5(v392);
            *(unsigned char *)(v32 + 2) = BYTE4(v392);
            int v170 = v392;
            if (v392 == -1) {
              int v170 = 0;
            }
            LODWORD(v392) = v170;
            *(unsigned char *)(v32 + 3) = BYTE1(v170);
            *(unsigned char *)(v32 + 4) = v392;
            uint64_t v171 = (char *)(v32 + 5);
            goto LABEL_494;
          }
          char v218 = v60 + 55;
        }
        else
        {
          *(_DWORD *)(v15 + 76) = 1;
          if (v169 != -1 || HIDWORD(v392))
          {
            if (v169 != -1 || HIDWORD(v392) != 1) {
              goto LABEL_337;
            }
            char v218 = v60 + 53;
          }
          else
          {
            char v218 = v60 + 51;
          }
        }
        *(unsigned char *)unint64_t v32 = v218;
        uint64_t v171 = (char *)(v32 + 1);
        goto LABEL_494;
      }
      if (v61 <= 0x4F && (v61 & 0xFE) != 0x4A)
      {
        v320 = "internal error: unexpected repeat";
        goto LABEL_689;
      }
      int v186 = v392;
      unsigned int v360 = a1;
      if (v392 == -1)
      {
        uint64_t v207 = v18;
        do
          uint64_t v207 = (_WORD *)((char *)v207 + __rev16(*(unsigned __int16 *)((char *)v207 + 1)));
        while (*(unsigned char *)v207 != 66);
        int v187 = v207 - v32;
      }
      else
      {
        int v187 = 0;
      }
      int v208 = v32 - v18;
      int v209 = HIDWORD(v392);
      if (HIDWORD(v392))
      {
        int v334 = v59;
        int v373 = v57;
        uint64_t v171 = (char *)v32;
        if (SHIDWORD(v392) > 1)
        {
          int v379 = v187;
          unsigned int v342 = v22;
          unsigned int v365 = v21;
          unsigned int v354 = v17;
          unsigned int v210 = v382;
          BOOL v211 = (v382 & 0x80000000) == 0 || !v349;
          uint64_t v212 = v23;
          if (!v211) {
            unsigned int v210 = v23;
          }
          unsigned int v382 = v210;
          int v213 = 1;
          uint64_t v171 = (char *)v32;
          do
          {
            memcpy(v171, v18, v208);
            v171 += v208;
            ++v213;
            int v209 = HIDWORD(v392);
          }
          while (v213 < SHIDWORD(v392));
          int v186 = v392;
          int v20 = v374;
          unsigned int v19 = v376;
          int v187 = v379;
          uint64_t v23 = v212;
          uint64_t v17 = v354;
          uint64_t v21 = v365;
          uint64_t v22 = v342;
        }
        uint64_t v214 = 0;
        if (v186 >= 1)
        {
          v186 -= v209;
          LODWORD(v392) = v186;
        }
        long long v333 = v18;
        if ((v186 & 0x80000000) == 0) {
          goto LABEL_473;
        }
LABEL_574:
        v171[v187] = v60 + 67;
        a1 = v360;
      }
      else
      {
        if (!v392)
        {
          a1 = v360;
          goto LABEL_498;
        }
        int v380 = v187;
        int v334 = v59;
        int v373 = v57;
        unsigned int v343 = v22;
        unsigned int v366 = v21;
        uint64_t v215 = v17;
        uint64_t v216 = v23;
        *(unsigned char *)unint64_t v32 = 0;
        if (v186 > 1)
        {
          adjust_recurse((unsigned __int8 *)v18, 4, v340, v15);
          long long v333 = v18 + 4;
          memmove(v18 + 4, v18, v208);
          uint64_t v171 = (char *)(v32 + 4);
          uint64_t v214 = (uint64_t)(v18 + 2);
          *(_WORD *)(v18 + 1) = 80;
          v18[3] = 0;
        }
        else
        {
          adjust_recurse((unsigned __int8 *)v18, 1, v340, v15);
          long long v333 = v18 + 1;
          memmove(v18 + 1, v18, v208);
          uint64_t v214 = 0;
          uint64_t v171 = (char *)(v32 + 1);
        }
        *uint64_t v18 = v60 + 77;
        int v186 = v392 - 1;
        LODWORD(v392) = v186;
        int v20 = v374;
        unsigned int v19 = v376;
        int v187 = v380;
        uint64_t v23 = v216;
        uint64_t v17 = v215;
        uint64_t v21 = v366;
        uint64_t v22 = v343;
        if (v186 < 0) {
          goto LABEL_574;
        }
LABEL_473:
        if (v186)
        {
          unsigned int v344 = v22;
          unsigned int v367 = v21;
          unsigned int v381 = v23;
          char v219 = v60 + 77;
          size_t v220 = v208;
          *uint64_t v171 = v219;
          uint64_t v221 = v171 + 1;
          int v222 = v186 - 1;
          if (v186 == 1)
          {
            char v226 = v333;
          }
          else
          {
            unsigned int v355 = v17;
            size_t v223 = v220 + 4;
            __int16 v224 = (_WORD)v171 + 2;
            __int16 v225 = v32 - (_WORD)v18 + 4;
            char v226 = v333;
            do
            {
              __int16 v227 = v224 - v214;
              if (!v214) {
                __int16 v227 = 0;
              }
              v221[1] = HIBYTE(v227);
              uint64_t v214 = (uint64_t)(v221 + 1);
              *uint64_t v221 = 80;
              v221[2] = v227;
              size_t v228 = v220;
              memcpy(v221 + 3, v333, v220);
              size_t v220 = v228;
              v221 += v223;
              *(v221 - 1) = v219;
              v224 += v225;
              --v222;
            }
            while (v222);
            uint64_t v214 = (uint64_t)&v221[-v228 - 3];
            uint64_t v17 = v355;
          }
          size_t v247 = v220;
          memcpy(v221, v226, v220);
          uint64_t v171 = &v221[v247];
          uint64_t v15 = a12;
          int v20 = v374;
          unsigned int v19 = v376;
          uint64_t v23 = v381;
          uint64_t v21 = v367;
          uint64_t v22 = v344;
        }
        a1 = v360;
        if (v214)
        {
          int v248 = v171 + 1;
          do
          {
            char v249 = v248 - v214;
            BOOL v250 = &v171[-(v248 - (int)v214)];
            uint64_t v251 = __rev16(*(unsigned __int16 *)(v250 + 1));
            *uint64_t v171 = 66;
            unsigned int v252 = (v248 - v214) >> 8;
            v171[1] = (unsigned __int16)(v248 - v214) >> 8;
            v171[2] = v248 - v214;
            if (v251) {
              BOOL v253 = v214 == 0;
            }
            else {
              BOOL v253 = 1;
            }
            v214 -= v251;
            v171 += 3;
            v250[1] = v252;
            v250[2] = v249;
            v248 += 3;
          }
          while (!v253);
        }
      }
      int v59 = v334;
      goto LABEL_494;
    }
    if (v24 != 124) {
      goto LABEL_25;
    }
LABEL_651:
    long long v304 = v390;
    int v305 = *v338;
    BOOL v307 = v336 < 0 || v336 == v23;
    if (v337 >= 0) {
      int v308 = v337;
    }
    else {
      int v308 = v336;
    }
    BOOL v309 = !v307;
    if (v307) {
      int v310 = v336;
    }
    else {
      int v310 = -1;
    }
    if (!v309) {
      int v308 = v337;
    }
    if ((v382 & 0x80000000) != 0 && (int)v23 > -1 && v310 < 0) {
      int v313 = v23;
    }
    else {
      int v313 = v382;
    }
    int v314 = v313 ^ v308;
    int v315 = v313 | v308;
    if ((v314 & 0xFFFFFDFF) != 0) {
      int v315 = -1;
    }
    if (v305 == 65) {
      int v316 = v310;
    }
    else {
      int v316 = v23;
    }
    if (v305 == 65) {
      int v317 = v315;
    }
    else {
      int v317 = v382;
    }
    int v336 = v316;
    int v337 = v317;
    if (!a7)
    {
LABEL_685:
      if (*v304 != 124)
      {
        long long v322 = v338;
        unsigned int v323 = v32 - v338;
        do
        {
          uint64_t v324 = __rev16(*(unsigned __int16 *)(v322 + 1));
          *(_WORD *)(v322 + 1) = bswap32(v323) >> 16;
          v322 -= v324;
          unsigned int v323 = v324;
        }
        while (v324);
        *(unsigned char *)unint64_t v32 = 66;
        *(unsigned char *)(v32 + 1) = (unsigned __int16)(v32 - v331) >> 8;
        *(unsigned char *)(v32 + 2) = v32 - v331;
        unint64_t v325 = v32 + 3;
        if ((a1 & 7) == v335)
        {
          long long v326 = a4;
          int v328 = v336;
          int v327 = v337;
        }
        else
        {
          long long v326 = a4;
          int v328 = v336;
          int v327 = v337;
          if (*v304 == 41)
          {
            *(unsigned char *)(v32 + 3) = 18;
            unint64_t v325 = v32 + 5;
            *(unsigned char *)(v32 + 4) = v335;
          }
        }
        *long long v326 = v325;
        *a5 = v304;
        *a9 = v328;
        uint64_t result = 1;
        *a10 = v327;
        return result;
      }
      *(unsigned char *)unint64_t v32 = 65;
      *(unsigned char *)(v32 + 1) = (unsigned __int16)(v32 - (_WORD)v338) >> 8;
      *(unsigned char *)(v32 + 2) = v32 - (_BYTE)v338;
      unint64_t v384 = v32;
      int v14 = (unsigned __int8 *)(v32 + 3);
      int v16 = v304 + 1;
      unsigned int v338 = (unsigned __int8 *)v32;
      a2 = v335;
      continue;
    }
    break;
  }
  *(unsigned char *)unint64_t v32 = 0;
  unsigned int fixedlength = find_fixedlength((uint64_t)v338, a1);
  unsigned int v319 = fixedlength;
  if ((fixedlength & 0x80000000) == 0)
  {
    *uint64_t v339 = bswap32(fixedlength) >> 16;
    goto LABEL_685;
  }
  uint64_t result = 0;
  if (v319 == -2) {
    v329 = "\\C not allowed in lookbehind assertion";
  }
  else {
    v329 = "lookbehind assertion is not fixed length";
  }
  *a6 = v329;
  *a5 = v304;
  return result;
}

uint64_t is_anchored_0(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  int v6 = a4 & a3;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 2, 0);
    unsigned int v8 = *significant_code_0;
    if (v8 < 0x51 && (v8 - 69 > 0xB || ((1 << (v8 - 69)) & 0x861) == 0)) {
      break;
    }
    if (!is_anchored_0()) {
      return 0;
    }
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(unsigned char *)a1 != 65) {
      return 1;
    }
  }
  if ((v8 & 0xFE) != 0x2A)
  {
    if (v8 - 3 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      if (v8 != 19 || (*a2 & 2) != 0) {
        return v10;
      }
    }
    goto LABEL_8;
  }
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    uint64_t v10 = 0;
    if (v6 || significant_code_0[1] != 11) {
      return v10;
    }
    goto LABEL_8;
  }
  return 0;
}

uint64_t find_firstassertedchar(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = 0xFFFFFFFFLL;
  do
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 1, 1);
    unsigned int v8 = *significant_code_0;
    if (v8 >= 0x50) {
      unsigned int v8 = 80;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v10 = v8 - 21;
    if (v10 > 0x3B) {
      break;
    }
    if (((1 << (v8 - 21)) & 0x63) != 0) {
      goto LABEL_14;
    }
    if (((1 << (v8 - 21)) & 0x861000000000000) == 0)
    {
      if (v10 != 11) {
        return result;
      }
      significant_code_0 += 2;
LABEL_14:
      if (!a3) {
        return result;
      }
      int v12 = significant_code_0[1];
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v6 = v12 & 0xFFFFFEFF | ((*a2 & 1) << 8);
      }
      else if (v6 != v12)
      {
        return result;
      }
      goto LABEL_19;
    }
    uint64_t firstassertedchar = find_firstassertedchar(significant_code_0, a2, v8 == 69);
    if ((firstassertedchar & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v6 = firstassertedchar;
    }
    else if (v6 != firstassertedchar)
    {
      return 0xFFFFFFFFLL;
    }
LABEL_19:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    uint64_t result = v6;
  }
  while (*(unsigned char *)a1 == 65);
  return result;
}

uint64_t is_startline_0(uint64_t a1, int a2, int a3)
{
  int v4 = a3 & a2;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 0);
    unsigned int v6 = *significant_code_0;
    if (v6 >= 0x51 || (v6 - 69 <= 0xB ? (BOOL v7 = ((1 << (v6 - 69)) & 0x861) == 0) : (BOOL v7 = 1), !v7))
    {
      if (!is_startline_0()) {
        return 0;
      }
      goto LABEL_8;
    }
    if ((v6 & 0xFE) == 0x2A)
    {
      uint64_t v8 = 0;
      if (v4 || significant_code_0[1] != 11) {
        return v8;
      }
      goto LABEL_8;
    }
    if (v6 != 19) {
      return 0;
    }
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(unsigned char *)a1 != 65) {
      return 1;
    }
  }
}

uint64_t nuance_pcre_exec(void *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10)
{
  return nuance_pcre_exec2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t nuance_pcre_exec2(void *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10, uint64_t a11)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if ((safeh_HandleCheck((uint64_t)a1, a2, 56663, 32) & 0x80000000) != 0) {
    return 4294967280;
  }
  pcre_clearMem(a1);
  if ((a8 & 0xFFFF5A6F) != 0) {
    return 4294967293;
  }
  uint64_t result = 4294967294;
  if (a3 && a5 && (a9 || a10 <= 0))
  {
    if (a10 < 0) {
      return 4294967281;
    }
    int32x4_t v21 = 0uLL;
    long long v89 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v86 = 0u;
    long long v84 = 0u;
    memset(v85, 0, sizeof(v85));
    uint64_t v81 = 0;
    *(_OWORD *)__b = 0u;
    uint64_t v82 = 10000000;
    long long v90 = 0uLL;
    uint64_t v22 = *(char **)(a3 + 32);
    if (!a4)
    {
      uint64_t v24 = 0;
      goto LABEL_21;
    }
    int v23 = *a4;
    if (*a4) {
      uint64_t v24 = (long long *)*((void *)a4 + 1);
    }
    else {
      uint64_t v24 = 0;
    }
    if ((v23 & 2) != 0)
    {
      uint64_t v82 = *((void *)a4 + 2);
      if ((v23 & 4) == 0)
      {
LABEL_19:
        if ((v23 & 8) == 0) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else if ((v23 & 4) == 0)
    {
      goto LABEL_19;
    }
    *(void *)&long long v90 = *((void *)a4 + 3);
    if ((v23 & 8) == 0)
    {
LABEL_21:
      uint64_t v92 = 0;
      memset(v91, 0, sizeof(v91));
      memset(v80, 0, sizeof(v80));
      if (v22) {
        char v25 = v22;
      }
      else {
        char v25 = (char *)&pcre_default_tables;
      }
      if (*(_DWORD *)a3 == 1346589253)
      {
        uint64_t v26 = a3;
      }
      else
      {
        int v76 = v25;
        int v27 = v24;
        uint64_t v28 = try_flipped((long long *)a3, (uint64_t)v80, v24, (uint64_t)v91);
        if (!v28) {
          return 4294967292;
        }
        uint64_t v26 = v28;
        if (v27) {
          uint64_t v24 = v91;
        }
        else {
          uint64_t v24 = 0;
        }
        char v25 = v76;
      }
      unsigned int v29 = *(_DWORD *)(v26 + 8);
      *(void *)&long long v86 = a3
                      + *(unsigned __int16 *)(v26 + 24)
                      + *(unsigned __int16 *)(v26 + 26) * (unint64_t)*(unsigned __int16 *)(v26 + 28);
      *((void *)&v86 + 1) = a5;
      LODWORD(v89) = a7;
      uint64_t v30 = &a5[a6];
      v21.i64[0] = __PAIR64__(v29, a8);
      *(void *)&long long v87 = v30;
      v31.i64[0] = 0x100000001;
      v31.i64[1] = 0x100000001;
      int8x16_t v32 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v21, v21), (uint32x4_t)xmmword_20D669F60), v31);
      *(int8x16_t *)((char *)v85 + 4) = v32;
      DWORD1(v85[1]) = (a8 >> 10) & 1;
      *((void *)&v85[1] + 1) = a8 >> 15;
      *((void *)&v89 + 1) = 0;
      *(void *)&long long v84 = v25;
      *((void *)&v84 + 1) = v25 + 832;
      if (a8 >= 0x8000 && (v29 & 0x4000000) != 0) {
        return 4294967283;
      }
      unsigned int v72 = v29;
      __int16 v33 = &a5[a7];
      if ((a8 & 0x2000) == 0 && v32.i32[2])
      {
        int v73 = v24;
        unsigned int v77 = v25;
        if ((valid_utf8(a5, a6) & 0x80000000) == 0) {
          return 4294967286;
        }
        uint64_t v24 = v73;
        char v25 = v77;
        if (a7 >= 1 && a7 < a6 && *v33 < -64) {
          return 4294967285;
        }
      }
      uint64_t v34 = *(unsigned __int16 *)(v26 + 18);
      unsigned int v35 = a10 / 3u;
      if (*(_WORD *)(v26 + 18)) {
        BOOL v36 = v35 > v34;
      }
      else {
        BOOL v36 = 1;
      }
      char v37 = v36;
      char v66 = v37;
      if (v36)
      {
        LODWORD(v38) = 3 * v35;
        __b[0] = a9;
        char v39 = (char *)a9;
      }
      else
      {
        int v74 = v24;
        unsigned int v78 = v25;
        uint64_t v38 = 3 * v34 + 3;
        char v39 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, 4 * v38);
        __b[0] = v39;
        if (!v39) {
          return 4294967290;
        }
        uint64_t v24 = v74;
        char v25 = v78;
      }
      char v75 = v72 | a8;
      LODWORD(__b[1]) = v38;
      HIDWORD(__b[1]) = 2 * (int)v38 / 3u;
      LODWORD(v85[0]) = 0;
      HIDWORD(v88) = -1;
      unsigned int v40 = 2 * *(unsigned __int16 *)(v26 + 16) + 2;
      if (v40 > a10) {
        unsigned int v40 = v38;
      }
      int v79 = v40;
      if (v39 && v40 >= 4)
      {
        char v41 = &v39[4 * v38];
        unint64_t v42 = (unint64_t)&v41[-4 * (v40 >> 1) + 4];
        uint64_t v43 = v41 - 4;
        do
        {
          *(_DWORD *)uint64_t v43 = -1;
          v43 -= 4;
        }
        while ((unint64_t)v43 >= v42);
      }
      int v44 = *(_DWORD *)(v26 + 8);
      if (((v72 | a8) & 0x10) == 0)
      {
        if ((v44 & 0x40000000) != 0)
        {
          uint64_t v46 = *(_WORD *)(v26 + 20);
          if ((*(_WORD *)(v26 + 20) & 0x100) != 0)
          {
            unsigned int v45 = 0;
            LODWORD(v46) = *(unsigned __int8 *)(v84 + v46);
            char v71 = 1;
          }
          else
          {
            char v71 = 0;
            unsigned int v45 = 0;
          }
        }
        else
        {
          unsigned int v45 = 0;
          char v71 = 0;
          LODWORD(v46) = -1;
          if ((v72 & 0x10000000) == 0 && v24)
          {
            char v71 = 0;
            if (*((unsigned char *)v24 + 4)) {
              unsigned int v45 = (char *)v24 + 8;
            }
            else {
              unsigned int v45 = 0;
            }
            goto LABEL_71;
          }
        }
LABEL_72:
        uint64_t v47 = v33 - 1;
        uint64_t v48 = a6;
        if ((v44 & 0x20000000) != 0)
        {
          __int16 v51 = *(_WORD *)(v26 + 22);
          int v49 = v51;
          int v50 = v25[v51 + 256];
          BOOL v67 = (v51 & 0x100) == 0;
        }
        else
        {
          BOOL v67 = 1;
          int v49 = -1;
          int v50 = -1;
        }
        uint64_t v68 = a7;
        BOOL v69 = (int)v46 >= 0;
        int v52 = &a5[v48];
        uint64_t v70 = 4 * v79;
        while (1)
        {
          if (__b[0]) {
            BOOL v53 = v79 < 1;
          }
          else {
            BOOL v53 = 1;
          }
          if (!v53)
          {
            uint64_t v54 = (char *)__b[0] + v70;
            if ((char *)__b[0] + v70 <= (char *)__b[0] + 4) {
              uint64_t v54 = (char *)__b[0] + 4;
            }
            memset(__b[0], 255, ((unint64_t)&v54[~(uint64_t)__b[0]] & 0xFFFFFFFFFFFFFFFCLL) + 4);
          }
          if ((v46 & 0x80000000) == 0) {
            break;
          }
          if ((v72 & 0x10000000) != 0)
          {
            if ((unint64_t)v33 > *((void *)&v86 + 1) + v68 && v33 < v30)
            {
              int64_t v62 = v52 - v33;
              while (*(v33 - 1) != 10)
              {
                ++v33;
                if (!--v62)
                {
LABEL_124:
                  int v56 = v52;
                  if ((v49 & 0x80000000) == 0) {
                    goto LABEL_107;
                  }
                  goto LABEL_125;
                }
              }
            }
            goto LABEL_105;
          }
          if (!v45) {
            goto LABEL_105;
          }
          do
          {
            int v56 = v33;
            if (v33 >= v30) {
              break;
            }
            ++v33;
          }
          while (((v45[(unint64_t)*v56 >> 3] >> (*v56 & 7)) & 1) == 0);
LABEL_106:
          if ((v49 & 0x80000000) == 0)
          {
LABEL_107:
            if (v30 - v56 <= 999 && !DWORD2(v85[1]))
            {
              int v59 = (unsigned __int8 *)&v56[v69];
              if (&v56[v69] > v47)
              {
                if (v67)
                {
                  do
                  {
                    uint64_t v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30) {
                      break;
                    }
                    ++v59;
                  }
                  while (v49 != *v47);
                }
                else
                {
                  do
                  {
                    uint64_t v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30) {
                      break;
                    }
                    ++v59;
                    int v60 = *v47;
                  }
                  while (v49 != v60 && v50 != v60);
                }
                if (v47 >= v30) {
                  goto LABEL_134;
                }
              }
            }
          }
LABEL_125:
          *((void *)&v87 + 1) = v56;
          uint64_t v81 = 0;
          uint64_t result = match_2((uint64_t)a1, (uint64_t)v56, v86, (uint64_t)&v81, v72 & 7, a11, v18, v19);
          if (result)
          {
            if (result == 1)
            {
              if ((v66 & 1) == 0)
              {
                if (a10 >= 4) {
                  memcpy(a9 + 2, (char *)__b[0] + 8, 4 * (a10 - 2));
                }
                if (SDWORD2(v88) > a10) {
                  LODWORD(v85[0]) = 1;
                }
                heap_Free(*(void **)(*a1 + 8), (uint64_t)__b[0]);
              }
              if (LODWORD(v85[0])) {
                uint64_t result = 0;
              }
              else {
                uint64_t result = (SDWORD2(v88) / 2);
              }
              if (a10 >= 2)
              {
                int v65 = v88 - DWORD2(v86);
                *a9 = v56 - DWORD2(v86);
                a9[1] = v65;
              }
              else
              {
                return 0;
              }
            }
            return result;
          }
          __int16 v33 = v56 + 1;
          if (HIDWORD(v85[0]) && v33 < v30)
          {
            uint64_t v63 = v52 - 1 - v56;
            while ((*v33 & 0xC0) == 0x80)
            {
              ++v33;
              if (!--v63)
              {
                __int16 v33 = v30;
                break;
              }
            }
          }
          if ((v75 & 0x10) != 0 || v33 > v30)
          {
LABEL_134:
            if ((v66 & 1) == 0) {
              heap_Free(*(void **)(*a1 + 8), (uint64_t)__b[0]);
            }
            if (HIDWORD(v85[1])) {
              BOOL v64 = DWORD2(v85[1]) == 0;
            }
            else {
              BOOL v64 = 1;
            }
            if (v64) {
              return 0xFFFFFFFFLL;
            }
            else {
              return 4294967284;
            }
          }
        }
        if (v71)
        {
          if (v33 < v30)
          {
            int64_t v55 = v52 - v33;
            while (v46 != *(unsigned __int8 *)(v84 + *v33))
            {
              ++v33;
              if (!--v55) {
                goto LABEL_124;
              }
            }
          }
        }
        else if (v33 < v30)
        {
          int64_t v57 = v52 - v33;
          while (v46 != *v33)
          {
            ++v33;
            if (!--v57) {
              goto LABEL_124;
            }
          }
        }
LABEL_105:
        int v56 = v33;
        goto LABEL_106;
      }
      char v71 = 0;
      unsigned int v45 = 0;
LABEL_71:
      LODWORD(v46) = -1;
      goto LABEL_72;
    }
LABEL_20:
    uint64_t v22 = (char *)*((void *)a4 + 4);
    goto LABEL_21;
  }
  return result;
}

void *pcre_clearMem(void *result)
{
  uint64_t v1 = result;
  if (*((unsigned __int16 *)result + 8) >= 2u)
  {
    unint64_t v2 = 1;
    do
    {
      int v3 = *(uint64_t **)(v1[1] + 8 * v2);
      if (v3)
      {
        heap_Free(*(void **)(*v1 + 8), *v3);
        uint64_t v5 = *v1;
        uint64_t v4 = v1[1];
        **(void **)(v4 + 8 * v2) = 0;
        heap_Free(*(void **)(v5 + 8), *(void *)(*(void *)(v4 + 8 * v2) + 16));
        uint64_t v6 = v1[1];
        *(void *)(*(void *)(v6 + 8 * v2) + 16) = 0;
        uint64_t v7 = *(void *)(v6 + 8 * v2);
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t result = heap_Free(*(void **)(*v1 + 8), v7);
      *(void *)(v1[1] + 8 * v2++) = 0;
    }
    while (v2 < *((unsigned __int16 *)v1 + 8));
  }
  *((_WORD *)v1 + 8) = 1;
  *((_DWORD *)v1 + 6) = 0;
  *((_WORD *)v1 + 14) = 0;
  return result;
}

uint64_t match_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t (*)(void))a6;
  uint64_t v772 = a3;
  unsigned int __n = 0;
  int v774 = 0;
  uint64_t v11 = 0;
  __s2[1] = *MEMORY[0x263EF8340];
  int v12 = 99;
  int v783 = 99;
  v782 = 0;
  int v13 = (void *)(a4 + 152);
LABEL_2:
  switch(v12)
  {
    case 0:
      goto LABEL_245;
    case 1:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      *(_DWORD *)(a4 + 124) = *((_DWORD *)v782 + 63);
      uint64_t v15 = v14[2];
      uint64_t v16 = __rev16(*(unsigned __int16 *)(v15 + 1));
      int v14[2] = v15 + v16;
      if (*(unsigned char *)(v15 + v16) == 65) {
        goto LABEL_7;
      }
      uint64_t v205 = *(void *)(a4 + 16);
      *(_DWORD *)(v205 + 4 * *((int *)v14 + 61)) = *((_DWORD *)v14 + 64);
      *(_DWORD *)(v205 + 4 * *((int *)v14 + 61) + 4) = *((_DWORD *)v14 + 65);
      *(_DWORD *)(v205 + 4 * (*(_DWORD *)(a4 + 24) - *((_DWORD *)v14 + 60))) = *((_DWORD *)v14 + 66);
      goto LABEL_320;
    case 2:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v19 = v782[2];
      uint64_t v20 = __rev16(*(unsigned __int16 *)(v19 + 1));
      v782[2] = v19 + v20;
      if (*(unsigned char *)(v19 + v20) == 65) {
        goto LABEL_10;
      }
      goto LABEL_320;
    case 3:
    case 5:
      goto LABEL_48;
    case 4:
      if (!v11)
      {
        v782[2] += __rev16(*(unsigned __int16 *)(v782[2] + 1));
LABEL_271:
        *(void *)&long long v778 = 0;
        Meunsigned int m = pcre_getMem(a1, 5, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || Mem < 0) {
          goto LABEL_1142;
        }
        char v24 = 0;
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        uint64_t v194 = v23[2];
LABEL_274:
        uint64_t v41 = v194 + 3;
LABEL_1024:
        v22[2] = v41;
        *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
        uint64_t v176 = v23[4];
        v22[4] = v176;
        uint64_t v175 = v23[5];
        *((_DWORD *)v22 + 12) = 2;
        v22[5] = v175;
LABEL_1025:
        *uint64_t v22 = (uint64_t)v23;
        goto LABEL_1026;
      }
      if (v11 == 1)
      {
        int v27 = v782;
        uint64_t v28 = (unsigned __int8 *)(__rev16(*(unsigned __int16 *)(v782[2] + 4)) + v782[2] + 3);
        v782[2] = (uint64_t)v28;
        for (int i = *v28; i == 65; int i = *v28)
        {
          v28 += __rev16(*(unsigned __int16 *)(v28 + 1));
          v27[2] = (uint64_t)v28;
        }
        goto LABEL_271;
      }
      goto LABEL_48;
    case 6:
      if (v11)
      {
        if (v11 == 1)
        {
          int v14 = v782;
          uint64_t v30 = (unsigned __int8 *)v782[2];
          int v31 = *v30;
          goto LABEL_277;
        }
        goto LABEL_48;
      }
      int v14 = v782;
      uint64_t v30 = (unsigned __int8 *)(v782[2] + __rev16(*(unsigned __int16 *)(v782[2] + 1)));
      v782[2] = (uint64_t)v30;
      int v31 = *v30;
      if (v31 != 65)
      {
LABEL_277:
        if (v31 != 66)
        {
          if ((v14[6] & 1) == 0)
          {
            do
            {
              v30 += __rev16(*(unsigned __int16 *)(v30 + 1));
              int v14[2] = (uint64_t)v30;
            }
            while (*v30 == 65);
            int v14[2] = (uint64_t)(v30 + 3);
            *((_DWORD *)v14 + 6) = *(_DWORD *)(a4 + 120);
            break;
          }
          goto LABEL_314;
        }
LABEL_320:
        uint64_t v204 = (uint64_t *)*v14;
        goto LABEL_968;
      }
LABEL_276:
      *(void *)&long long v778 = 0;
      uint64_t v195 = a1;
      char v196 = 6;
      goto LABEL_283;
    case 7:
      if (v11)
      {
        if (v11 != 1)
        {
LABEL_48:
          int v14 = v782;
LABEL_49:
          unint64_t v42 = (uint64_t *)*v14;
          goto LABEL_241;
        }
LABEL_319:
        int v14 = v782;
        goto LABEL_320;
      }
      int v14 = v782;
      __int16 v33 = (unsigned __int8 *)(v782[2] + __rev16(*(unsigned __int16 *)(v782[2] + 1)));
      v782[2] = (uint64_t)v33;
      if (*v33 == 65)
      {
LABEL_282:
        *(void *)&long long v778 = 0;
        uint64_t v195 = a1;
        char v196 = 7;
LABEL_283:
        int v197 = pcre_getMem(v195, v196, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || v197 < 0) {
          goto LABEL_1142;
        }
        uint64_t v175 = 0;
        char v24 = 0;
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        v22[2] = v23[2] + 3;
        *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
        uint64_t v176 = v23[4];
        *uint64_t v22 = (uint64_t)v23;
        v22[4] = v176;
        v22[5] = 0;
        goto LABEL_291;
      }
      if (v14[6]) {
        goto LABEL_314;
      }
LABEL_312:
      uint64_t v39 = (uint64_t)(v33 + 3);
LABEL_313:
      int v14[2] = v39;
      break;
    case 8:
      if (v11)
      {
        if (v11 == 1)
        {
          int v14 = v782;
          *(void *)(a4 + 136) = v782[14];
          uint64_t v32 = v14[18];
          if ((uint64_t *)v32 != (uint64_t *)((char *)v14 + 268))
          {
            heap_Free(*(void **)(*(void *)a1 + 8), v32);
            int v14 = v782;
          }
LABEL_314:
          uint64_t v207 = (uint64_t *)*v14;
          goto LABEL_315;
        }
        goto LABEL_48;
      }
      long long v198 = v782;
      *(void *)(a4 + 136) = v782 + 14;
      memcpy(*(void **)(a4 + 16), (const void *)v198[18], 4 * *((unsigned int *)v198 + 38));
      int v14 = v782;
      uint64_t v199 = v782[7];
      uint64_t v200 = __rev16(*(unsigned __int16 *)(v199 + 1));
      v782[7] = v199 + v200;
      if (*(unsigned char *)(v199 + v200) == 65)
      {
LABEL_287:
        *(void *)&long long v778 = 0;
        int v201 = pcre_getMem(a1, 8, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || v201 < 0) {
          goto LABEL_1142;
        }
        char v24 = 0;
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        uint64_t v26 = v23[7];
        goto LABEL_290;
      }
      *(void *)(a4 + 136) = v14[14];
      uint64_t v208 = v14[18];
      if ((uint64_t *)v208 == (uint64_t *)((char *)v14 + 268)) {
        goto LABEL_320;
      }
      heap_Free(*(void **)(*(void *)a1 + 8), v208);
      goto LABEL_319;
    case 9:
      if (v11)
      {
        if (v11 != 1) {
          goto LABEL_48;
        }
        int v14 = v782;
        __int16 v33 = (unsigned __int8 *)v782[2];
        int v34 = *v33;
      }
      else
      {
        int v14 = v782;
        __int16 v33 = (unsigned __int8 *)(v782[2] + __rev16(*(unsigned __int16 *)(v782[2] + 1)));
        v782[2] = (uint64_t)v33;
        int v34 = *v33;
        if (v34 == 65)
        {
LABEL_293:
          *(void *)&long long v778 = 0;
          uint64_t v17 = a1;
          char v18 = 9;
          goto LABEL_11;
        }
      }
      if (v34 != 74 && v34 != 65) {
        goto LABEL_320;
      }
      do
      {
        v33 += __rev16(*(unsigned __int16 *)(v33 + 1));
        int v14[2] = (uint64_t)v33;
      }
      while (*v33 == 65);
      *((_DWORD *)v14 + 6) = *(_DWORD *)(a4 + 120);
      uint64_t v202 = *(void *)(a4 + 112);
      v14[1] = v202;
      int v203 = *v33;
      if (v203 != 66 && v202 != v14[13])
      {
        if (v33[3] == 18)
        {
          v14[4] = v14[4] & 0xFFFFFFFFFFFFFFF8 | v33[4];
          int v203 = *v33;
        }
        if (v203 == 68)
        {
          *(void *)&long long v778 = 0;
          uint64_t v37 = a1;
          char v38 = 10;
LABEL_249:
          int v177 = pcre_getMem(v37, v38, &v778, a4, a5, a6, a7, a8);
          uint64_t v22 = (uint64_t *)v778;
          BOOL v178 = v782;
          if ((void)v778 && (v177 & 0x80000000) == 0)
          {
LABEL_251:
            uint64_t v25 = v178[1];
            v22[1] = v25;
            v22[2] = v178[2] + 3;
            *((_DWORD *)v22 + 6) = *((_DWORD *)v178 + 6);
            uint64_t v176 = v178[4];
            v22[4] = v176;
            uint64_t v175 = v178[5];
            v22[5] = v175;
            *((_DWORD *)v22 + 12) = 0;
            *uint64_t v22 = (uint64_t)v178;
            v782 = v22;
            goto LABEL_1194;
          }
LABEL_977:
          v584 = (uint64_t *)*v178;
          goto LABEL_1199;
        }
        *(void *)&long long v778 = 0;
        uint64_t v35 = a1;
        char v36 = 12;
LABEL_44:
        int v40 = pcre_getMem(v35, v36, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if ((void)v778 && (v40 & 0x80000000) == 0)
        {
LABEL_46:
          char v24 = 0;
          uint64_t v25 = v23[1];
          v22[1] = v25;
          uint64_t v41 = v23[12];
          goto LABEL_1024;
        }
LABEL_1142:
        v584 = (uint64_t *)*v23;
        goto LABEL_1199;
      }
      goto LABEL_312;
    case 10:
      if (v11) {
        goto LABEL_48;
      }
      *(void *)&long long v778 = 0;
      uint64_t v35 = a1;
      char v36 = 11;
      goto LABEL_44;
    case 11:
    case 13:
    case 17:
    case 19:
      int v14 = v782;
      if (!v11) {
        goto LABEL_320;
      }
      goto LABEL_49;
    case 12:
      if (v11) {
        goto LABEL_48;
      }
      *(void *)&long long v778 = 0;
      uint64_t v37 = a1;
      char v38 = 13;
      goto LABEL_249;
    case 14:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      __int16 v33 = (unsigned __int8 *)v782[10];
      do
      {
        v33 += __rev16(*(unsigned __int16 *)(v33 + 1));
        v14[10] = (uint64_t)v33;
      }
      while (*v33 == 65);
      goto LABEL_312;
    case 15:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v39 = v782[2] + 1;
      goto LABEL_313;
    case 16:
      if (v11) {
        goto LABEL_48;
      }
      *(void *)&long long v778 = 0;
      uint64_t v35 = a1;
      char v36 = 17;
      goto LABEL_44;
    case 18:
      if (v11) {
        goto LABEL_48;
      }
      *(void *)&long long v778 = 0;
      uint64_t v37 = a1;
      char v38 = 19;
      goto LABEL_249;
    case 20:
      uint64_t v43 = v782;
      if (v11) {
        goto LABEL_93;
      }
      int v44 = v8;
      int v45 = *((_DWORD *)v782 + 56);
      if (v45 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_265;
      }
      uint64_t v46 = (unsigned __int8 *)v782[1];
      int v47 = *((_DWORD *)v782 + 57);
      if (!match_ref_0(*((_DWORD *)v782 + 61), v46, v47, (void *)a4, v782[4])) {
        goto LABEL_265;
      }
      v43[1] = (uint64_t)&v46[v47];
      *((_DWORD *)v43 + 56) = v45 + 1;
      goto LABEL_54;
    case 21:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      __int16 v51 = (unsigned __int8 *)(v782[1] - *((int *)v782 + 57));
      v782[1] = (uint64_t)v51;
      int v52 = (unsigned __int8 *)v50[11];
      goto LABEL_57;
    case 22:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v53 = *((_DWORD *)v782 + 56);
      if (v53 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      uint64_t v54 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v54 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      v782[1] = (uint64_t)(v54 + 1);
      int v55 = *v54;
      if ((~v55 & 0xC0) != 0) {
        goto LABEL_321;
      }
      int v56 = utf8_table4[v55 & 0x3F];
      int v57 = 6 * v56;
      int v55 = (utf8_table3[utf8_table4[v55 & 0x3F]] & v55) << (6 * v56);
      unsigned int v58 = v54 + 2;
      unsigned int v59 = v56 + 1;
      int v60 = v57 - 6;
      do
      {
        v14[1] = (uint64_t)v58;
        v55 |= (*(v58++ - 1) & 0x3F) << v60;
        --v59;
        v60 -= 6;
      }
      while (v59 > 1);
      if (v55 < 256)
      {
LABEL_321:
        if (((*(unsigned __int8 *)(v14[9] + v55 / 8) >> (v55 & 7)) & 1) == 0) {
          goto LABEL_320;
        }
      }
      else if (*((_DWORD *)v14 + 62) == 59)
      {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v53 + 1;
LABEL_323:
      *(void *)&long long v778 = 0;
      uint64_t v63 = a1;
      char v64 = 22;
      goto LABEL_1191;
    case 23:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v61 = *((_DWORD *)v782 + 56);
      if (v61 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      int64_t v62 = (unsigned char *)v782[1];
      if ((unint64_t)v62 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      v782[1] = (uint64_t)(v62 + 1);
      if (((*(unsigned __int8 *)(v14[9] + ((unint64_t)*v62 >> 3)) >> (*v62 & 7)) & 1) == 0) {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v61 + 1;
      goto LABEL_73;
    case 24:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v65 = v782[1];
      v782[1] = v65 - 1;
      if (v65 == v50[11]) {
        goto LABEL_967;
      }
      if ((*(unsigned char *)(v65 - 1) & 0xC0) == 0x80)
      {
        char v66 = (char *)(v65 - 2);
        do
        {
          v50[1] = (uint64_t)v66;
          char v67 = *v66--;
        }
        while ((v67 & 0xC0) == 0x80);
      }
      goto LABEL_79;
    case 25:
      int v50 = v782;
      unint64_t v68 = v782[1] - 1;
      v782[1] = v68;
      if (v11) {
        goto LABEL_240;
      }
      BOOL v69 = (unsigned __int8 *)v50[11];
      goto LABEL_82;
    case 26:
      uint64_t v70 = v782;
      if (v11)
      {
        unint64_t v42 = (uint64_t *)*v782;
        goto LABEL_241;
      }
      int v179 = *((_DWORD *)v782 + 56);
      if (v179 < *((_DWORD *)v782 + 58))
      {
        size_t v180 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v180 < *(void *)(a4 + 96))
        {
          v782[1] = (uint64_t)(v180 + 1);
          int v181 = *v180;
          if ((~v181 & 0xC0) == 0)
          {
            int v182 = utf8_table4[v181 & 0x3F];
            int v183 = 6 * v182;
            int v181 = (utf8_table3[utf8_table4[v181 & 0x3F]] & v181) << (6 * v182);
            int v184 = v180 + 2;
            unsigned int v185 = v182 + 1;
            int v186 = v183 - 6;
            do
            {
              v70[1] = (uint64_t)v184;
              v181 |= (*(v184++ - 1) & 0x3F) << v186;
              --v185;
              v186 -= 6;
            }
            while (v185 > 1);
          }
          if (match_xclass(v181, (unsigned char *)v70[9]))
          {
            *((_DWORD *)v70 + 56) = v179 + 1;
            goto LABEL_259;
          }
        }
      }
      uint64_t v204 = (uint64_t *)*v70;
      goto LABEL_968;
    case 27:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v71 = v782[1];
      v782[1] = v71 - 1;
      if (v71 == v14[11]) {
        goto LABEL_320;
      }
      if ((*(unsigned char *)(v71 - 1) & 0xC0) == 0x80)
      {
        unsigned int v72 = (char *)(v71 - 2);
        do
        {
          v14[1] = (uint64_t)v72;
          char v73 = *v72--;
        }
        while ((v73 & 0xC0) == 0x80);
      }
      goto LABEL_91;
    case 28:
      uint64_t v43 = v782;
      if (v11)
      {
LABEL_93:
        unint64_t v42 = (uint64_t *)*v43;
        goto LABEL_241;
      }
      int v44 = v8;
      int v187 = *((_DWORD *)v782 + 56);
      if (v187 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_265;
      }
      unsigned int v188 = (char *)v782[1];
      if ((unint64_t)v188 >= *(void *)(a4 + 96)) {
        goto LABEL_265;
      }
      unsigned int v189 = *((_DWORD *)v782 + 57);
      if (!memcmp((const void *)v782[1], (const void *)v782[8], v189)) {
        goto LABEL_325;
      }
      unsigned int v189 = __n;
      if (__n)
      {
        if (!memcmp(v188, __s2, __n))
        {
LABEL_325:
          v43[1] = (uint64_t)&v188[v189];
          *((_DWORD *)v43 + 56) = v187 + 1;
LABEL_326:
          *(void *)&long long v778 = 0;
          uint64_t v48 = a1;
          char v49 = 28;
          goto LABEL_327;
        }
LABEL_265:
        v782 = (uint64_t *)*v43;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
        uint64_t v191 = v782;
        if (!v782) {
          return 0;
        }
      }
      else
      {
        v782 = (uint64_t *)*v43;
        pcre_freeMem(a1, &v783, v190, a4, a5, a6, a7, a8, v760);
        uint64_t v191 = v782;
        if (!v782) {
          return 0;
        }
        unsigned int __n = 0;
      }
      uint64_t v11 = 0;
      *((_DWORD *)v191 + 102) = 0;
      *int v13 = v191;
      uint64_t v8 = v44;
      goto LABEL_1203;
    case 29:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      int v74 = (char *)(v782[1] - *((int *)v782 + 57));
      v782[1] = (uint64_t)v74;
      char v75 = (char *)v50[11];
      goto LABEL_96;
    case 30:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v76 = *((_DWORD *)v782 + 56);
      if (v76 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      unsigned int v77 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v77 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      int v78 = *((_DWORD *)v782 + 55);
      uint64_t v79 = *(void *)(a4 + 32);
      v782[1] = (uint64_t)(v77 + 1);
      if (v78 != *(unsigned __int8 *)(v79 + *v77)) {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v76 + 1;
      goto LABEL_103;
    case 31:
      int v50 = v782;
      unint64_t v80 = v782[1] - 1;
      v782[1] = v80;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v81 = (unsigned __int8 *)v50[11];
      goto LABEL_106;
    case 32:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v82 = *((_DWORD *)v782 + 56);
      if (v82 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      unsigned int v83 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v83 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      int v84 = *((_DWORD *)v782 + 55);
      v782[1] = (uint64_t)(v83 + 1);
      if (v84 != *v83) {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v82 + 1;
      goto LABEL_113;
    case 33:
      int v50 = v782;
      unint64_t v85 = v782[1] - 1;
      v782[1] = v85;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v81 = (unsigned __int8 *)v50[11];
      goto LABEL_116;
    case 34:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      long long v86 = (unsigned __int8 *)v782[1];
      long long v87 = v86 + 1;
      v782[1] = (uint64_t)(v86 + 1);
      int v88 = *v86;
      if ((~v88 & 0xC0) != 0) {
        goto LABEL_123;
      }
      int v89 = utf8_table4[v88 & 0x3F];
      int v90 = 6 * v89;
      int v88 = (utf8_table3[utf8_table4[v88 & 0x3F]] & v88) << (6 * v89);
      unsigned int v91 = v89 + 1;
      int v92 = v90 - 6;
      do
      {
        uint64_t v93 = v87++;
        v14[1] = (uint64_t)v87;
        v88 |= (*v93 & 0x3F) << v92;
        --v91;
        v92 -= 6;
      }
      while (v91 > 1);
      if (v88 <= 255) {
LABEL_123:
      }
        int v88 = *(unsigned __int8 *)(*(void *)(a4 + 32) + v88);
      int v94 = *((_DWORD *)v14 + 56);
      if (v94 >= *((_DWORD *)v14 + 58) || (unint64_t)v87 >= *(void *)(a4 + 96) || *((_DWORD *)v14 + 55) == v88) {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v94 + 1;
      goto LABEL_128;
    case 35:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v97 = *((_DWORD *)v782 + 56);
      if (v97 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      int v98 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v98 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      int v99 = *((_DWORD *)v782 + 55);
      uint64_t v100 = *(void *)(a4 + 32);
      v782[1] = (uint64_t)(v98 + 1);
      if (v99 == *(unsigned __int8 *)(v100 + *v98)) {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v97 + 1;
      goto LABEL_134;
    case 36:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v101 = v782[1];
      v782[1] = v101 - 1;
      if (v101 == v50[11]) {
        goto LABEL_967;
      }
      if ((*(unsigned char *)(v101 - 1) & 0xC0) == 0x80)
      {
        uint64_t v102 = (char *)(v101 - 2);
        do
        {
          v50[1] = (uint64_t)v102;
          char v103 = *v102--;
        }
        while ((v103 & 0xC0) == 0x80);
      }
      goto LABEL_140;
    case 37:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      unint64_t v104 = v782[1] - 1;
      v782[1] = v104;
      uint64_t v105 = (unsigned __int8 *)v50[11];
      goto LABEL_143;
    case 38:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v106 = (unsigned __int8 *)v782[1];
      unsigned int v107 = v106 + 1;
      v782[1] = (uint64_t)(v106 + 1);
      int v108 = *v106;
      if ((~v108 & 0xC0) != 0)
      {
        int v112 = v107;
      }
      else
      {
        int v109 = utf8_table4[v108 & 0x3F];
        int v108 = (utf8_table3[utf8_table4[v108 & 0x3F]] & v108) << (6 * v109);
        int v110 = 6 * v109 - 6;
        unsigned int v111 = v109 + 1;
        do
        {
          int v112 = v107 + 1;
          v14[1] = (uint64_t)(v107 + 1);
          v108 |= (*v107 & 0x3F) << v110;
          v110 -= 6;
          --v111;
          ++v107;
        }
        while (v111 > 1);
      }
      int v206 = *((_DWORD *)v14 + 56);
      if (v206 >= *((_DWORD *)v14 + 58)
        || (unint64_t)v112 >= *(void *)(a4 + 96)
        || *((_DWORD *)v14 + 55) == v108)
      {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v206 + 1;
      goto LABEL_310;
    case 39:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v113 = *((_DWORD *)v782 + 56);
      if (v113 >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      uint64_t v114 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v114 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      int v115 = *((_DWORD *)v782 + 55);
      v782[1] = (uint64_t)(v114 + 1);
      if (v115 == *v114) {
        goto LABEL_320;
      }
      *((_DWORD *)v14 + 56) = v113 + 1;
      goto LABEL_155;
    case 40:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v116 = v782[1];
      v782[1] = v116 - 1;
      if (v116 == v50[11]) {
        goto LABEL_967;
      }
      if ((*(unsigned char *)(v116 - 1) & 0xC0) == 0x80)
      {
        BOOL v117 = (char *)(v116 - 2);
        do
        {
          v50[1] = (uint64_t)v117;
          char v118 = *v117--;
        }
        while ((v118 & 0xC0) == 0x80);
      }
      goto LABEL_161;
    case 41:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      unint64_t v119 = v782[1] - 1;
      v782[1] = v119;
      uint64_t v120 = (unsigned __int8 *)v50[11];
      goto LABEL_164;
    case 42:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      if (*((_DWORD *)v782 + 56) >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      int v121 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v121 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      v782[1] = (uint64_t)(v121 + 1);
      int v122 = *v121;
      if ((~v122 & 0xC0) == 0)
      {
        int v123 = utf8_table4[v122 & 0x3F];
        int v122 = (utf8_table3[utf8_table4[v122 & 0x3F]] & v122) << (6 * v123);
        int v124 = v121 + 2;
        int v125 = 6 * v123 - 6;
        unsigned int v126 = v123 + 1;
        do
        {
          v14[1] = (uint64_t)v124;
          v122 |= (*(v124++ - 1) & 0x3F) << v125;
          v125 -= 6;
          --v126;
        }
        while (v126 > 1);
      }
      int v127 = ucp_findchar(v122, (int *)v14 + 49, (unsigned int *)v14 + 50);
      int v14 = v782;
      *((_DWORD *)v782 + 48) = v127;
      if (*((_DWORD *)v14 + 47) == (*(_DWORD *)v14[26] == *((_DWORD *)v14 + 51))) {
        goto LABEL_320;
      }
      ++*((_DWORD *)v14 + 56);
      goto LABEL_174;
    case 43:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      if (*((_DWORD *)v782 + 56) >= *((_DWORD *)v782 + 58)) {
        goto LABEL_320;
      }
      int v128 = (unsigned __int8 *)v782[1];
      if ((unint64_t)v128 >= *(void *)(a4 + 96)) {
        goto LABEL_320;
      }
      v782[1] = (uint64_t)(v128 + 1);
      int v129 = *v128;
      if (*(_DWORD *)(a4 + 60) && (v129 & 0xC0) == 0xC0)
      {
        int v130 = utf8_table4[v129 & 0x3F];
        int v129 = (utf8_table3[utf8_table4[v129 & 0x3F]] & v129) << (6 * v130);
        uint64_t v131 = v128 + 2;
        int v132 = 6 * v130 - 6;
        unsigned int v133 = v130 + 1;
        do
        {
          v14[1] = (uint64_t)v131;
          v129 |= (*(v131++ - 1) & 0x3F) << v132;
          v132 -= 6;
          --v133;
        }
        while (v133 > 1);
      }
      int v134 = ucp_findchar(v129, (int *)v14 + 49, (unsigned int *)v14 + 50);
      int v14 = v782;
      *((_DWORD *)v782 + 48) = v134;
      if (v134 == 2) {
        goto LABEL_320;
      }
      for (uint64_t j = (unsigned __int8 *)v14[1]; (unint64_t)j < *(void *)(a4 + 96); v14[1] = (uint64_t)j)
      {
        int v136 = *j;
        unsigned int v137 = 1;
        if (*(_DWORD *)(a4 + 60) && (v136 & 0xC0) == 0xC0)
        {
          unint64_t v138 = utf8_table4[v136 & 0x3F];
          int v136 = (utf8_table3[v138] & v136) << (6 * v138);
          char v139 = (char *)(j + 1);
          if (v138 <= 1) {
            uint64_t v140 = 1;
          }
          else {
            uint64_t v140 = v138;
          }
          int v141 = 6 * v138 - 6;
          do
          {
            char v142 = *v139++;
            v136 |= (v142 & 0x3F) << v141;
            v141 -= 6;
            --v140;
          }
          while (v140);
          unsigned int v137 = v138 + 1;
        }
        int v143 = ucp_findchar(v136, (int *)v14 + 49, (unsigned int *)v14 + 50);
        int v14 = v782;
        *((_DWORD *)v782 + 48) = v143;
        if (v143 != 2) {
          break;
        }
        uint64_t j = (unsigned __int8 *)(v14[1] + v137);
      }
      ++*((_DWORD *)v14 + 56);
      goto LABEL_330;
    case 44:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v144 = *((_DWORD *)v782 + 56);
      if (v144 < *((_DWORD *)v782 + 58))
      {
        uint64_t v145 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v145 < *(void *)(a4 + 96))
        {
          v782[1] = (uint64_t)(v145 + 1);
          int v146 = *v145;
          if ((~v146 & 0xC0) == 0)
          {
            int v147 = utf8_table4[v146 & 0x3F];
            int v146 = (utf8_table3[utf8_table4[v146 & 0x3F]] & v146) << (6 * v147);
            uint64_t v148 = v145 + 2;
            int v149 = 6 * v147 - 6;
            unsigned int v150 = v147 + 1;
            do
            {
              v14[1] = (uint64_t)v148;
              v146 |= (*(v148++ - 1) & 0x3F) << v149;
              v149 -= 6;
              --v150;
            }
            while (v150 > 1);
          }
          switch(*((_DWORD *)v14 + 54))
          {
            case 5:
              if (v146 > 255 || (*(unsigned char *)(*(void *)(a4 + 40) + v146) & 4) == 0) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 6:
              if (v146 <= 255 && (*(unsigned char *)(*(void *)(a4 + 40) + v146) & 4) != 0) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 7:
              if (v146 > 255 || (*(unsigned char *)(*(void *)(a4 + 40) + v146) & 1) == 0) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 8:
              if (v146 <= 255 && (*(unsigned char *)(*(void *)(a4 + 40) + v146) & 1) != 0) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 9:
              if (v146 > 255 || (*(unsigned char *)(*(void *)(a4 + 40) + v146) & 0x10) == 0) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 0xA:
              if (v146 < 256 || (*(unsigned char *)(*(void *)(a4 + 40) + v146) & 0x10) != 0) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 0xB:
              if ((v14[4] & 4) != 0 || v146 != 10) {
                goto LABEL_353;
              }
              goto LABEL_320;
            case 0xC:
LABEL_353:
              *((_DWORD *)v14 + 56) = v144 + 1;
              goto LABEL_354;
            default:
              goto LABEL_333;
          }
        }
      }
      goto LABEL_320;
    case 45:
      int v14 = v782;
      if (v11) {
        goto LABEL_49;
      }
      int v151 = *((_DWORD *)v782 + 56);
      if (v151 < *((_DWORD *)v782 + 58))
      {
        char v152 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v152 < *(void *)(a4 + 96))
        {
          v782[1] = (uint64_t)(v152 + 1);
          uint64_t v153 = *v152;
          switch(*((_DWORD *)v14 + 54))
          {
            case 5:
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v153) & 4) == 0) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 6:
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v153) & 4) != 0) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 7:
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v153) & 1) == 0) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 8:
              if (*(unsigned char *)(*(void *)(a4 + 40) + v153)) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 9:
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v153) & 0x10) == 0) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 0xA:
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v153) & 0x10) != 0) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 0xB:
              if ((v14[4] & 4) != 0 || v153 != 10) {
                goto LABEL_367;
              }
              goto LABEL_320;
            case 0xC:
LABEL_367:
              *((_DWORD *)v14 + 56) = v151 + 1;
              goto LABEL_368;
            default:
LABEL_333:
              BOOL v211 = (uint64_t *)*v14;
LABEL_334:
              v782 = v211;
              pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
              uint64_t v174 = v782;
              uint64_t v11 = 4294967282;
              if (!v782) {
                return v11;
              }
              goto LABEL_1201;
          }
        }
      }
      goto LABEL_320;
    case 46:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v154 = v782[1];
      v782[1] = v154 - 1;
      if (v154 == v50[11]) {
        goto LABEL_967;
      }
      if ((*(unsigned char *)(v154 - 1) & 0xC0) == 0x80)
      {
        uint64_t v155 = (char *)(v154 - 2);
        do
        {
          v50[1] = (uint64_t)v155;
          char v156 = *v155--;
        }
        while ((v156 & 0xC0) == 0x80);
      }
      goto LABEL_216;
    case 47:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v157 = v782[1];
      int v158 = (unsigned __int8 *)(v157 - 1);
      v782[1] = v157 - 1;
      if (v157 == v50[11]) {
        goto LABEL_967;
      }
      while (1)
      {
        int v159 = *v158;
        int v160 = v159 & 0xC0;
        if (v160 == 128)
        {
          char v161 = v158 - 1;
          do
          {
            v50[1] = (uint64_t)v161;
            int v162 = *v161--;
            int v159 = v162;
            int v160 = v162 & 0xC0;
          }
          while (v160 == 128);
          int v158 = v161 + 1;
        }
        BOOL v163 = v160 != 192 || *(_DWORD *)(a4 + 60) == 0;
        if (!v163)
        {
          unint64_t v164 = utf8_table4[v159 & 0x3F];
          int v165 = 6 * v164;
          int v159 = (utf8_table3[v164] & v159) << (6 * v164);
          uint64_t v166 = (char *)(v158 + 1);
          if (v164 <= 1) {
            unint64_t v164 = 1;
          }
          int v167 = v165 - 6;
          do
          {
            char v168 = *v166++;
            v159 |= (v168 & 0x3F) << v167;
            v167 -= 6;
            --v164;
          }
          while (v164);
        }
        int v169 = ucp_findchar(v159, (int *)v50 + 49, (unsigned int *)v50 + 50);
        int v50 = v782;
        *((_DWORD *)v782 + 48) = v169;
        if (v169 != 2) {
          break;
        }
        int v158 = (unsigned __int8 *)(v50[1] - 1);
        v50[1] = (uint64_t)v158;
      }
      goto LABEL_1053;
    case 48:
      int v50 = v782;
      if (v11) {
        goto LABEL_240;
      }
      uint64_t v170 = v782[1];
      v782[1] = v170 - 1;
      if (v170 == v50[11]) {
        goto LABEL_967;
      }
      if ((*(unsigned char *)(v170 - 1) & 0xC0) == 0x80)
      {
        uint64_t v171 = (char *)(v170 - 2);
        do
        {
          v50[1] = (uint64_t)v171;
          char v172 = *v171--;
        }
        while ((v172 & 0xC0) == 0x80);
      }
      goto LABEL_238;
    case 49:
      int v50 = v782;
      unint64_t v173 = v782[1] - 1;
      v782[1] = v173;
      if (v11)
      {
LABEL_240:
        unint64_t v42 = (uint64_t *)*v50;
LABEL_241:
        v782 = v42;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
        goto LABEL_242;
      }
      int v192 = (unsigned char *)v50[11];
      goto LABEL_268;
    default:
      int v774 = pcre_getMem(a1, v12, &v782, a4, a5, a6, a7, a8);
LABEL_245:
      uint64_t v11 = 4294967290;
      if (!v782 || v774 < 0) {
        return v11;
      }
      uint64_t v175 = 0;
      char v24 = 0;
      uint64_t *v782 = 0;
      uint64_t v22 = v782;
      uint64_t v25 = a2;
      v782[1] = a2;
      v22[2] = v772;
      *((_DWORD *)v22 + 6) = 2;
      uint64_t v176 = a5;
      v22[4] = a5;
      v22[5] = 0;
      *((_DWORD *)v22 + 12) = 2;
      goto LABEL_1195;
  }
LABEL_369:
  while (2)
  {
    while (2)
    {
      int v50 = v782;
      uint64_t v212 = (unsigned __int8 *)v782[2];
      unsigned int v213 = *v212;
      *((_DWORD *)v782 + 62) = v213;
      *((_DWORD *)v50 + 42) = 0;
      if (*(_DWORD *)(a4 + 72))
      {
        unint64_t v214 = v50[1];
        if (v214 >= *(void *)(a4 + 96) && v214 > *(void *)(a4 + 104)) {
          *(_DWORD *)(a4 + 76) = 1;
        }
      }
      if (v213 >= 0x51)
      {
        unsigned int v568 = v213 - 80;
        *((_DWORD *)v50 + 60) = v213 - 80;
        if (v213 - 80 >= 0x65)
        {
          unsigned int v568 = __rev16(*((unsigned __int16 *)v212 + 2));
          *((_DWORD *)v50 + 60) = v568;
        }
        unsigned int v569 = 2 * v568;
        *((_DWORD *)v50 + 61) = 2 * v568;
        if ((signed int)(2 * v568) >= *(_DWORD *)(a4 + 28))
        {
          *((_DWORD *)v50 + 62) = 80;
LABEL_10:
          *(void *)&long long v778 = 0;
          uint64_t v17 = a1;
          char v18 = 2;
        }
        else
        {
          uint64_t v570 = *(void *)(a4 + 16);
          *((_DWORD *)v50 + 64) = *(_DWORD *)(v570 + 4 * v569);
          *((_DWORD *)v50 + 65) = *(_DWORD *)(v570 + 4 * (v569 | 1));
          signed int v571 = *(_DWORD *)(a4 + 24) - v568;
          *((_DWORD *)v50 + 66) = *(_DWORD *)(v570 + 4 * v571);
          *((_DWORD *)v50 + 63) = *(_DWORD *)(a4 + 124);
          *(_DWORD *)(v570 + 4 * v571) = *((_DWORD *)v50 + 2) - *(_DWORD *)(a4 + 88);
LABEL_7:
          *(void *)&long long v778 = 0;
          uint64_t v17 = a1;
          char v18 = 1;
        }
LABEL_11:
        int v21 = pcre_getMem(v17, v18, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || v21 < 0) {
          goto LABEL_1142;
        }
        char v24 = 0;
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        uint64_t v26 = v23[2];
LABEL_290:
        v22[2] = v26 + 3;
        *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
        uint64_t v176 = v23[4];
        v22[4] = v176;
        uint64_t v175 = v23[5];
        *uint64_t v22 = (uint64_t)v23;
        v22[5] = v175;
LABEL_291:
        *((_DWORD *)v22 + 12) = 2;
LABEL_1026:
        v782 = v22;
LABEL_1195:
        *((_DWORD *)v22 + 47) = 0;
        *((_DWORD *)v22 + 51) = 0;
        v22[26] = 0;
        unint64_t v694 = *(void *)a4;
        unint64_t v695 = *(void *)(a4 + 8);
        ++*(void *)a4;
        if (v694 >= v695)
        {
          v782 = (uint64_t *)*v22;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
          uint64_t v174 = v782;
          uint64_t v11 = 4294967288;
          if (!v782) {
            return v11;
          }
          goto LABEL_1201;
        }
        v22[22] = v176;
        if ((v24 & 1) == 0)
        {
          v22[49] = v175;
          v22[50] = v25;
          v22[5] = (uint64_t)(v22 + 49);
        }
        continue;
      }
      break;
    }
    switch(v213)
    {
      case 0u:
        uint64_t v572 = *(void *)(a4 + 136);
        if (!v572 || *(_DWORD *)(v572 + 8))
        {
          uint64_t v574 = v50[1];
          if (*(_DWORD *)(a4 + 68) && v574 == *(void *)(a4 + 104)) {
            goto LABEL_967;
          }
LABEL_938:
          *(void *)(a4 + 112) = v574;
          *(_DWORD *)(a4 + 120) = *((_DWORD *)v50 + 6);
          uint64_t v207 = (uint64_t *)*v50;
LABEL_315:
          v782 = v207;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
          uint64_t v174 = v782;
          uint64_t v11 = 1;
          if (!v782) {
            return v11;
          }
          goto LABEL_1201;
        }
        *(void *)(a4 + 136) = *(void *)v572;
        memmove(*(void **)(a4 + 16), *(const void **)(v572 + 32), 4 * *(unsigned int *)(v572 + 40));
        *(void *)(a4 + 104) = *(void *)(v572 + 24);
        int v14 = v782;
        v782[4] = v782[22];
        uint64_t v39 = *(void *)(v572 + 16);
        goto LABEL_313;
      case 1u:
        uint64_t v266 = *(void *)(a4 + 88);
        goto LABEL_499;
      case 2u:
        if (v50[1] != *(void *)(a4 + 88) + *(int *)(a4 + 128)) {
          goto LABEL_967;
        }
        goto LABEL_846;
      case 3u:
      case 4u:
        int v237 = (unsigned __int8 *)v50[1];
        uint64_t v238 = *(unsigned __int8 **)(a4 + 88);
        if (*(_DWORD *)(a4 + 60))
        {
          if (v237 == v238) {
            goto LABEL_739;
          }
          uint64_t v239 = v50[1];
          do
          {
            int v241 = *(unsigned __int8 *)--v239;
            int v240 = v241;
            int v242 = v241 & 0xC0;
          }
          while (v242 == 128);
          if (v242 != 192) {
            goto LABEL_406;
          }
          uint64_t v243 = 0;
          unint64_t v244 = utf8_table4[v240 & 0x3F];
          int v245 = 6 * v244;
          int v240 = (utf8_table3[v244] & v240) << (6 * v244);
          if (v244 <= 1) {
            unint64_t v244 = 1;
          }
          int v246 = v245 - 6;
          do
          {
            v240 |= (*(unsigned char *)(v239 + v243++ + 1) & 0x3F) << v246;
            v246 -= 6;
          }
          while (v244 != v243);
          if (v240 >= 256) {
LABEL_739:
          }
            int v247 = 0;
          else {
LABEL_406:
          }
            int v247 = (*(unsigned __int8 *)(*(void *)(a4 + 40) + v240) >> 4) & 1;
          *((_DWORD *)v50 + 43) = v247;
          if ((unint64_t)v237 < *(void *)(a4 + 96))
          {
            int v487 = *v237;
            if ((~v487 & 0xC0) != 0) {
              goto LABEL_747;
            }
            unint64_t v488 = utf8_table4[v487 & 0x3F];
            int v489 = 6 * v488;
            int v487 = (utf8_table3[v488] & v487) << (6 * v488);
            uint64_t v490 = (char *)(v237 + 1);
            if (v488 <= 1) {
              unint64_t v488 = 1;
            }
            int v491 = v489 - 6;
            do
            {
              char v492 = *v490++;
              v487 |= (v492 & 0x3F) << v491;
              v491 -= 6;
              --v488;
            }
            while (v488);
            if (v487 <= 255)
            {
LABEL_747:
              int v493 = (unsigned __int8 *)(*(void *)(a4 + 40) + v487);
LABEL_833:
              int v352 = (*v493 >> 4) & 1;
              goto LABEL_835;
            }
          }
        }
        else
        {
          if (v237 == v238) {
            int v247 = 0;
          }
          else {
            int v247 = (*(unsigned __int8 *)(*(void *)(a4 + 40) + *(v237 - 1)) >> 4) & 1;
          }
          *((_DWORD *)v50 + 43) = v247;
          if ((unint64_t)v237 < *(void *)(a4 + 96))
          {
            int v493 = (unsigned __int8 *)(*(void *)(a4 + 40) + *v237);
            goto LABEL_833;
          }
        }
        int v352 = 0;
LABEL_835:
        *((_DWORD *)v50 + 40) = v352;
        void v50[2] = (uint64_t)(v212 + 1);
        if (*v212 == 4)
        {
          if (v247 == v352) {
            goto LABEL_967;
          }
        }
        else
        {
LABEL_838:
          if (v247 != v352) {
            goto LABEL_967;
          }
        }
        continue;
      case 5u:
        uint64_t v267 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v267 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v267 + 1);
        int v268 = *v267;
        if (!*(_DWORD *)(a4 + 60)) {
          goto LABEL_431;
        }
        if ((v268 & 0xC0) != 0xC0) {
          goto LABEL_431;
        }
        int v269 = utf8_table4[v268 & 0x3F];
        int v270 = 6 * v269;
        int v268 = (utf8_table3[utf8_table4[v268 & 0x3F]] & v268) << (6 * v269);
        int v271 = v267 + 2;
        unsigned int v272 = v269 + 1;
        int v273 = v270 - 6;
        do
        {
          v50[1] = (uint64_t)v271;
          v268 |= (*(v271++ - 1) & 0x3F) << v273;
          --v272;
          v273 -= 6;
        }
        while (v272 > 1);
        if (v268 <= 255)
        {
LABEL_431:
          if ((*(unsigned char *)(*(void *)(a4 + 40) + v268) & 4) != 0) {
            goto LABEL_967;
          }
        }
        goto LABEL_846;
      case 6u:
        uint64_t v274 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v274 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v274 + 1);
        int v275 = *v274;
        if (*(_DWORD *)(a4 + 60))
        {
          if ((v275 & 0xC0) == 0xC0)
          {
            int v276 = utf8_table4[v275 & 0x3F];
            int v277 = 6 * v276;
            int v275 = (utf8_table3[utf8_table4[v275 & 0x3F]] & v275) << (6 * v276);
            int v278 = v274 + 2;
            unsigned int v279 = v276 + 1;
            int v280 = v277 - 6;
            do
            {
              v50[1] = (uint64_t)v278;
              v275 |= (*(v278++ - 1) & 0x3F) << v280;
              --v279;
              v280 -= 6;
            }
            while (v279 > 1);
            if (v275 > 255) {
              goto LABEL_967;
            }
          }
        }
        if ((*(unsigned char *)(*(void *)(a4 + 40) + v275) & 4) == 0) {
          goto LABEL_967;
        }
        goto LABEL_846;
      case 7u:
        uint64_t v281 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v281 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v281 + 1);
        int v282 = *v281;
        if (!*(_DWORD *)(a4 + 60)) {
          goto LABEL_447;
        }
        if ((v282 & 0xC0) != 0xC0) {
          goto LABEL_447;
        }
        int v283 = utf8_table4[v282 & 0x3F];
        int v284 = 6 * v283;
        int v282 = (utf8_table3[utf8_table4[v282 & 0x3F]] & v282) << (6 * v283);
        v285 = v281 + 2;
        unsigned int v286 = v283 + 1;
        int v287 = v284 - 6;
        do
        {
          v50[1] = (uint64_t)v285;
          v282 |= (*(v285++ - 1) & 0x3F) << v287;
          --v286;
          v287 -= 6;
        }
        while (v286 > 1);
        if (v282 <= 255)
        {
LABEL_447:
          if (*(unsigned char *)(*(void *)(a4 + 40) + v282)) {
            goto LABEL_967;
          }
        }
        goto LABEL_846;
      case 8u:
        size_t v288 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v288 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v288 + 1);
        int v289 = *v288;
        if (*(_DWORD *)(a4 + 60))
        {
          if ((v289 & 0xC0) == 0xC0)
          {
            int v290 = utf8_table4[v289 & 0x3F];
            int v291 = 6 * v290;
            int v289 = (utf8_table3[utf8_table4[v289 & 0x3F]] & v289) << (6 * v290);
            int v292 = v288 + 2;
            unsigned int v293 = v290 + 1;
            int v294 = v291 - 6;
            do
            {
              v50[1] = (uint64_t)v292;
              v289 |= (*(v292++ - 1) & 0x3F) << v294;
              --v293;
              v294 -= 6;
            }
            while (v293 > 1);
            if (v289 > 255) {
              goto LABEL_967;
            }
          }
        }
        if ((*(unsigned char *)(*(void *)(a4 + 40) + v289) & 1) == 0) {
          goto LABEL_967;
        }
        goto LABEL_846;
      case 9u:
        int v295 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v295 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v295 + 1);
        int v296 = *v295;
        if (!*(_DWORD *)(a4 + 60)) {
          goto LABEL_463;
        }
        if ((v296 & 0xC0) != 0xC0) {
          goto LABEL_463;
        }
        int v297 = utf8_table4[v296 & 0x3F];
        int v298 = 6 * v297;
        int v296 = (utf8_table3[utf8_table4[v296 & 0x3F]] & v296) << (6 * v297);
        uint64_t v299 = v295 + 2;
        unsigned int v300 = v297 + 1;
        int v301 = v298 - 6;
        do
        {
          v50[1] = (uint64_t)v299;
          v296 |= (*(v299++ - 1) & 0x3F) << v301;
          --v300;
          v301 -= 6;
        }
        while (v300 > 1);
        if (v296 <= 255)
        {
LABEL_463:
          if ((*(unsigned char *)(*(void *)(a4 + 40) + v296) & 0x10) != 0) {
            goto LABEL_967;
          }
        }
        goto LABEL_846;
      case 0xAu:
        int v302 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v302 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v302 + 1);
        int v303 = *v302;
        if (*(_DWORD *)(a4 + 60))
        {
          if ((v303 & 0xC0) == 0xC0)
          {
            int v304 = utf8_table4[v303 & 0x3F];
            int v305 = 6 * v304;
            int v303 = (utf8_table3[utf8_table4[v303 & 0x3F]] & v303) << (6 * v304);
            long long v306 = v302 + 2;
            unsigned int v307 = v304 + 1;
            int v308 = v305 - 6;
            do
            {
              v50[1] = (uint64_t)v306;
              v303 |= (*(v306++ - 1) & 0x3F) << v308;
              --v307;
              v308 -= 6;
            }
            while (v307 > 1);
            if (v303 > 255) {
              goto LABEL_967;
            }
          }
        }
        if ((*(unsigned char *)(*(void *)(a4 + 40) + v303) & 0x10) == 0) {
          goto LABEL_967;
        }
        goto LABEL_846;
      case 0xBu:
        BOOL v309 = (unsigned char *)v50[1];
        unint64_t v310 = *(void *)(a4 + 96);
        if ((v50[4] & 4) == 0 && (unint64_t)v309 < v310 && *v309 == 10) {
          goto LABEL_967;
        }
        v311 = v309 + 1;
        v50[1] = (uint64_t)(v309 + 1);
        if ((unint64_t)v309 >= v310) {
          goto LABEL_967;
        }
        if (*(_DWORD *)(a4 + 60) && (unint64_t)v311 < v310)
        {
          unint64_t v312 = v310 - (void)v311;
          int v313 = v309 + 2;
          do
          {
            if ((*(v313 - 1) & 0xC0) != 0x80) {
              break;
            }
            v50[1] = (uint64_t)v313++;
            --v312;
          }
          while (v312);
        }
        goto LABEL_846;
      case 0xCu:
        unint64_t v314 = v50[1];
        v50[1] = v314 + 1;
        if (v314 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        goto LABEL_846;
      case 0xDu:
      case 0xEu:
        int v248 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v248 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v248 + 1);
        int v249 = *v248;
        if (*(_DWORD *)(a4 + 60) && (v249 & 0xC0) == 0xC0)
        {
          int v250 = utf8_table4[v249 & 0x3F];
          int v251 = 6 * v250;
          int v249 = (utf8_table3[utf8_table4[v249 & 0x3F]] & v249) << (6 * v250);
          unsigned int v252 = v248 + 2;
          unsigned int v253 = v250 + 1;
          int v254 = v251 - 6;
          do
          {
            v50[1] = (uint64_t)v252;
            v249 |= (*(v252++ - 1) & 0x3F) << v254;
            --v253;
            v254 -= 6;
          }
          while (v253 > 1);
        }
        LODWORD(v778) = 0;
        int v255 = ucp_findchar(v249, (int *)&v778, &v777);
        void v50[2] = (uint64_t)(v212 + 1);
        int v256 = (char)v212[1];
        int v257 = v212[1];
        void v50[2] = (uint64_t)(v212 + 2);
        if (v256 < 0)
        {
          int v247 = v213 == 14;
          BOOL v258 = v257 - 128 == v255;
        }
        else
        {
          int v247 = v213 == 14;
          BOOL v258 = v778 == v257;
        }
        int v352 = v258;
        goto LABEL_838;
      case 0xFu:
        int v315 = (unsigned __int8 *)v50[1];
        unint64_t v316 = *(void *)(a4 + 96);
        if ((unint64_t)v315 >= v316) {
          goto LABEL_967;
        }
        int v317 = v315 + 1;
        v50[1] = (uint64_t)(v315 + 1);
        int v318 = *v315;
        int v319 = *(_DWORD *)(a4 + 60);
        if (v319 && (v318 & 0xC0) == 0xC0)
        {
          int v320 = utf8_table4[v318 & 0x3F];
          int v321 = 6 * v320;
          int v318 = (utf8_table3[utf8_table4[v318 & 0x3F]] & v318) << (6 * v320);
          unsigned int v322 = v320 + 1;
          int v323 = v321 - 6;
          do
          {
            uint64_t v324 = v317 + 1;
            v50[1] = (uint64_t)(v317 + 1);
            v318 |= (*v317 & 0x3F) << v323;
            --v322;
            v323 -= 6;
            ++v317;
          }
          while (v322 > 1);
        }
        else
        {
          uint64_t v324 = v315 + 1;
        }
        unsigned int v777 = 0;
        LODWORD(v778) = 0;
        if (ucp_findchar(v318, (int *)&v778, &v777) == 2) {
          goto LABEL_967;
        }
        unsigned int v496 = v8;
        while ((unint64_t)v324 < v316)
        {
          int v497 = *v324;
          unsigned int v498 = 1;
          if (v319 && (v497 & 0xC0) == 0xC0)
          {
            unint64_t v499 = utf8_table4[v497 & 0x3F];
            int v497 = (utf8_table3[v499] & v497) << (6 * v499);
            unsigned int v500 = (char *)(v324 + 1);
            if (v499 <= 1) {
              uint64_t v501 = 1;
            }
            else {
              uint64_t v501 = v499;
            }
            int v502 = 6 * v499 - 6;
            do
            {
              char v503 = *v500++;
              v497 |= (v503 & 0x3F) << v502;
              v502 -= 6;
              --v501;
            }
            while (v501);
            unsigned int v498 = v499 + 1;
          }
          if (ucp_findchar(v497, (int *)&v778, &v777) != 2) {
            break;
          }
          v324 += v498;
          v50[1] = (uint64_t)v324;
        }
        void v50[2] = (uint64_t)(v212 + 1);
        uint64_t v8 = v496;
        continue;
      case 0x10u:
        unint64_t v325 = (unsigned __int8 *)v50[1];
        unint64_t v326 = *(void *)(a4 + 96) - 1;
        if ((unint64_t)v325 < v326) {
          goto LABEL_967;
        }
        if (v325 == (unsigned __int8 *)v326) {
          goto LABEL_749;
        }
        goto LABEL_846;
      case 0x11u:
        unint64_t v327 = *(void *)(a4 + 96);
        goto LABEL_504;
      case 0x12u:
        v50[4] = v212[1];
        goto LABEL_791;
      case 0x13u:
        uint64_t v266 = *(void *)(a4 + 88);
        if (*(_DWORD *)(a4 + 52) && v50[1] == v266) {
          goto LABEL_967;
        }
        if ((v50[4] & 2) == 0)
        {
LABEL_499:
          if (v50[1] != v266) {
            goto LABEL_967;
          }
          goto LABEL_846;
        }
        uint64_t v495 = v50[1];
        if (v495 == v266) {
          goto LABEL_846;
        }
        int v494 = *(unsigned __int8 *)(v495 - 1);
        goto LABEL_752;
      case 0x14u:
        if ((v50[4] & 2) != 0)
        {
          unint64_t v325 = (unsigned __int8 *)v50[1];
          if ((unint64_t)v325 < *(void *)(a4 + 96))
          {
LABEL_749:
            int v494 = *v325;
            goto LABEL_752;
          }
          if (*(_DWORD *)(a4 + 56)) {
            goto LABEL_967;
          }
        }
        else
        {
          if (*(_DWORD *)(a4 + 56)) {
            goto LABEL_967;
          }
          unint64_t v327 = *(void *)(a4 + 96);
          if (*(_DWORD *)(a4 + 64))
          {
LABEL_504:
            if (v50[1] < v327) {
              goto LABEL_967;
            }
            goto LABEL_846;
          }
          unsigned int v539 = (unsigned __int8 *)v50[1];
          int v540 = (unsigned __int8 *)(v327 - 1);
          if (v539 < v540) {
            goto LABEL_967;
          }
          if (v539 == v540)
          {
            int v494 = *v539;
LABEL_752:
            if (v494 != 10) {
              goto LABEL_967;
            }
          }
        }
LABEL_846:
        void v50[2] = (uint64_t)(v212 + 1);
        continue;
      case 0x15u:
        if (!*(_DWORD *)(a4 + 60))
        {
          long long v510 = (unsigned __int8 *)v50[1];
          if ((uint64_t)(*(void *)(a4 + 96) - (void)v510) <= 0) {
            goto LABEL_967;
          }
          int v511 = v212[1];
          v50[1] = (uint64_t)(v510 + 1);
          if (v511 != *v510) {
            goto LABEL_967;
          }
          goto LABEL_791;
        }
        int v328 = 1;
        *((_DWORD *)v50 + 57) = 1;
        void v50[2] = (uint64_t)(v212 + 1);
        int v329 = v212[1];
        *((_DWORD *)v50 + 55) = v329;
        if ((~v329 & 0xC0) == 0)
        {
          unint64_t v330 = utf8_table4[v329 & 0x3F];
          int v331 = (utf8_table3[v330] & v329) << (6 * v330);
          *((_DWORD *)v50 + 55) = v331;
          long long v332 = (char *)(v212 + 2);
          if (v330 <= 1) {
            uint64_t v333 = 1;
          }
          else {
            uint64_t v333 = v330;
          }
          int v334 = 6 * v330 - 6;
          do
          {
            char v335 = *v332++;
            v331 |= (v335 & 0x3F) << v334;
            *((_DWORD *)v50 + 55) = v331;
            v334 -= 6;
            --v333;
          }
          while (v333);
          int v328 = v330 + 1;
          *((_DWORD *)v50 + 57) = v328;
        }
        uint64_t v336 = v50[1];
        if (*(void *)(a4 + 96) - v336 < v328) {
          goto LABEL_967;
        }
        uint64_t v337 = v336 + 1;
        unsigned int v338 = v212 + 2;
        while (1)
        {
          BOOL v339 = __OFSUB__(v328--, 1);
          *((_DWORD *)v50 + 57) = v328;
          if (v328 < 0 != v339) {
            goto LABEL_369;
          }
          void v50[2] = (uint64_t)v338;
          int v340 = *(v338 - 1);
          v50[1] = v337;
          int v341 = *(unsigned __int8 *)(v337++ - 1);
          ++v338;
          if (v340 != v341) {
            goto LABEL_967;
          }
        }
      case 0x16u:
        if (*(_DWORD *)(a4 + 60))
        {
          unsigned int v342 = 1;
          *((_DWORD *)v50 + 57) = 1;
          unsigned int v343 = v212 + 1;
          void v50[2] = (uint64_t)(v212 + 1);
          int v344 = v212[1];
          *((_DWORD *)v50 + 55) = v344;
          if ((~v344 & 0xC0) == 0)
          {
            unint64_t v345 = utf8_table4[v344 & 0x3F];
            int v344 = (utf8_table3[v345] & v344) << (6 * v345);
            *((_DWORD *)v50 + 55) = v344;
            unsigned int v346 = (char *)(v212 + 2);
            if (v345 <= 1) {
              uint64_t v347 = 1;
            }
            else {
              uint64_t v347 = v345;
            }
            int v348 = 6 * v345 - 6;
            do
            {
              char v349 = *v346++;
              v344 |= (v349 & 0x3F) << v348;
              *((_DWORD *)v50 + 55) = v344;
              v348 -= 6;
              --v347;
            }
            while (v347);
            unsigned int v342 = v345 + 1;
            *((_DWORD *)v50 + 57) = v342;
          }
          BOOL v350 = (unsigned __int8 *)v50[1];
          if (*(void *)(a4 + 96) - (void)v350 < (uint64_t)v342) {
            goto LABEL_967;
          }
          if (v344 <= 127)
          {
            uint64_t v351 = *(void *)(a4 + 32);
            void v50[2] = (uint64_t)(v212 + 2);
            int v247 = *(unsigned __int8 *)(v351 + v212[1]);
            v50[1] = (uint64_t)(v350 + 1);
            int v352 = *(unsigned __int8 *)(v351 + *v350);
            goto LABEL_838;
          }
          v50[1] = (uint64_t)(v350 + 1);
          int v533 = *v350;
          if ((~v533 & 0xC0) == 0)
          {
            int v534 = utf8_table4[v533 & 0x3F];
            int v535 = 6 * v534;
            int v533 = (utf8_table3[utf8_table4[v533 & 0x3F]] & v533) << (6 * v534);
            uint64_t v536 = v350 + 2;
            unsigned int v537 = v534 + 1;
            int v538 = v535 - 6;
            do
            {
              v50[1] = (uint64_t)v536;
              v533 |= (*(v536++ - 1) & 0x3F) << v538;
              --v537;
              v538 -= 6;
            }
            while (v537 > 1);
          }
          void v50[2] = (uint64_t)&v343[v342];
          if (v344 != v533)
          {
            unsigned int v777 = 0;
            if ((ucp_findchar(v344, (int *)&v778, &v777) & 0x80000000) != 0 || v533 != v777) {
              goto LABEL_967;
            }
          }
        }
        else
        {
          long long v512 = (unsigned __int8 *)v50[1];
          if ((uint64_t)(*(void *)(a4 + 96) - (void)v512) <= 0) {
            goto LABEL_967;
          }
          uint64_t v513 = *(void *)(a4 + 32);
          int v514 = *(unsigned __int8 *)(v513 + v212[1]);
          v50[1] = (uint64_t)(v512 + 1);
          if (v514 != *(unsigned __int8 *)(v513 + *v512)) {
            goto LABEL_967;
          }
LABEL_791:
          void v50[2] = (uint64_t)(v212 + 2);
        }
        continue;
      case 0x17u:
        unsigned int v353 = (unsigned __int8 *)v50[1];
        if ((unint64_t)v353 >= *(void *)(a4 + 96)) {
          goto LABEL_967;
        }
        v50[1] = (uint64_t)(v353 + 1);
        void v50[2] = (uint64_t)(v212 + 1);
        int v354 = *v353;
        if (*(_DWORD *)(a4 + 60) && (v354 & 0xC0) == 0xC0)
        {
          int v355 = utf8_table4[v354 & 0x3F];
          int v356 = 6 * v355;
          int v354 = (utf8_table3[utf8_table4[v354 & 0x3F]] & v354) << (6 * v355);
          unsigned int v357 = v353 + 2;
          unsigned int v358 = v355 + 1;
          int v359 = v356 - 6;
          do
          {
            v50[1] = (uint64_t)v357;
            v354 |= (*(v357++ - 1) & 0x3F) << v359;
            --v358;
            v359 -= 6;
          }
          while (v358 > 1);
        }
        if (v50[4])
        {
          uint64_t v504 = *(void *)(a4 + 32);
          if (v354 <= 255) {
            int v354 = *(unsigned __int8 *)(v504 + v354);
          }
          void v50[2] = (uint64_t)(v212 + 2);
          int v360 = *(unsigned __int8 *)(v504 + v212[1]);
        }
        else
        {
          void v50[2] = (uint64_t)(v212 + 2);
          int v360 = v212[1];
        }
        if (v354 == v360) {
          goto LABEL_967;
        }
        continue;
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
        uint64_t v215 = v212 + 1;
        void v50[2] = (uint64_t)(v212 + 1);
        uint64_t v216 = *v212;
        BOOL v217 = v216 & 1;
        *((_DWORD *)v50 + 42) = v217;
        int v218 = rep_min_0[v216 - 24];
        *((_DWORD *)v50 + 59) = v218;
        unsigned int v219 = rep_max_0[v216 - 24];
        if ((v216 - 30) < 0xFFFFFFFE) {
          unsigned int v219 = 0x7FFFFFFF;
        }
        *((_DWORD *)v50 + 58) = v219;
        goto LABEL_539;
      case 0x1Eu:
      case 0x1Fu:
        int v218 = 0;
        *((_DWORD *)v50 + 59) = 0;
        unsigned int v219 = __rev16(*(unsigned __int16 *)(v212 + 1));
        *((_DWORD *)v50 + 58) = v219;
        BOOL v217 = *v212 == 31;
        *((_DWORD *)v50 + 42) = v217;
        goto LABEL_538;
      case 0x20u:
        BOOL v217 = 0;
        unsigned int v219 = __rev16(*(unsigned __int16 *)(v212 + 1));
        *((_DWORD *)v50 + 58) = v219;
        *((_DWORD *)v50 + 59) = v219;
        int v218 = v219;
LABEL_538:
        uint64_t v215 = v212 + 3;
        void v50[2] = (uint64_t)(v212 + 3);
LABEL_539:
        if (!*(_DWORD *)(a4 + 60))
        {
          unint64_t v368 = *(void *)(a4 + 96);
          uint64_t v81 = (unsigned __int8 *)v50[1];
          if ((uint64_t)(v368 - (void)v81) < v218) {
            goto LABEL_967;
          }
          void v50[2] = (uint64_t)(v215 + 1);
          int v362 = *v215;
          *((_DWORD *)v50 + 55) = v362;
LABEL_563:
          if (v50[4])
          {
            uint64_t v378 = *(void *)(a4 + 32);
            int v379 = *(unsigned __int8 *)(v378 + v362);
            *((_DWORD *)v50 + 55) = v379;
            int v380 = v218;
            if (v218 >= 1)
            {
              do
              {
                v50[1] = (uint64_t)(v81 + 1);
                if (v379 != *(unsigned __int8 *)(v378 + *v81)) {
                  goto LABEL_967;
                }
                ++v81;
              }
              while (--v380);
            }
            if (v219 != v218)
            {
              if (v217)
              {
                *((_DWORD *)v50 + 56) = v218;
LABEL_103:
                *(void *)&long long v778 = 0;
                uint64_t v63 = a1;
                char v64 = 30;
                goto LABEL_1191;
              }
              v50[11] = (uint64_t)v81;
              BOOL v339 = __OFSUB__(v219, v218);
              int v628 = v219 - v218;
              if ((v628 < 0) ^ v339 | (v628 == 0)) {
                goto LABEL_1067;
              }
              uint64_t v629 = 0;
              unint64_t v80 = (unint64_t)v81;
              while ((unint64_t)&v81[v629] < v368)
              {
                if (v379 == *(unsigned __int8 *)(v378 + v81[v629]))
                {
                  ++v80;
                  v50[1] = (uint64_t)&v81[++v629];
                  if (v628 != v629) {
                    continue;
                  }
                }
                unint64_t v80 = (unint64_t)&v81[v629];
                break;
              }
LABEL_106:
              if (v80 >= (unint64_t)v81)
              {
LABEL_1067:
                *(void *)&long long v778 = 0;
                uint64_t v63 = a1;
                char v64 = 31;
                goto LABEL_1191;
              }
              goto LABEL_967;
            }
          }
          else
          {
            int v377 = v218;
            if (v218 >= 1)
            {
              do
              {
                v50[1] = (uint64_t)(v81 + 1);
                if (v362 != *v81) {
                  goto LABEL_967;
                }
                ++v81;
              }
              while (--v377);
            }
            if (v219 != v218)
            {
              if (v217)
              {
                *((_DWORD *)v50 + 56) = v218;
LABEL_113:
                *(void *)&long long v778 = 0;
                uint64_t v63 = a1;
                char v64 = 32;
                goto LABEL_1191;
              }
              v50[11] = (uint64_t)v81;
              BOOL v339 = __OFSUB__(v219, v218);
              int v626 = v219 - v218;
              if ((v626 < 0) ^ v339 | (v626 == 0)) {
                goto LABEL_1060;
              }
              uint64_t v627 = 0;
              unint64_t v85 = (unint64_t)v81;
              while ((unint64_t)&v81[v627] < v368)
              {
                if (v362 == v81[v627])
                {
                  ++v85;
                  v50[1] = (uint64_t)&v81[++v627];
                  if (v626 != v627) {
                    continue;
                  }
                }
                unint64_t v85 = (unint64_t)&v81[v627];
                break;
              }
LABEL_116:
              if (v85 >= (unint64_t)v81)
              {
LABEL_1060:
                *(void *)&long long v778 = 0;
                uint64_t v63 = a1;
                char v64 = 33;
                goto LABEL_1191;
              }
              goto LABEL_967;
            }
          }
          continue;
        }
        int v361 = 1;
        *((_DWORD *)v50 + 57) = 1;
        v50[8] = (uint64_t)v215;
        int v362 = *v215;
        *((_DWORD *)v50 + 55) = v362;
        if ((~v362 & 0xC0) == 0)
        {
          unint64_t v363 = utf8_table4[v362 & 0x3F];
          int v362 = (utf8_table3[v363] & v362) << (6 * v363);
          *((_DWORD *)v50 + 55) = v362;
          unsigned int v364 = (char *)(v215 + 1);
          if (v363 <= 1) {
            uint64_t v365 = 1;
          }
          else {
            uint64_t v365 = v363;
          }
          int v366 = 6 * v363 - 6;
          do
          {
            char v367 = *v364++;
            v362 |= (v367 & 0x3F) << v366;
            *((_DWORD *)v50 + 55) = v362;
            v366 -= 6;
            --v365;
          }
          while (v365);
          int v361 = v363 + 1;
          *((_DWORD *)v50 + 57) = v363 + 1;
        }
        unint64_t v368 = *(void *)(a4 + 96);
        uint64_t v81 = (unsigned __int8 *)v50[1];
        if ((uint64_t)(v368 - (void)v81) < v361 * v218) {
          goto LABEL_967;
        }
        void v50[2] = (uint64_t)&v215[v361];
        if (v361 < 2) {
          goto LABEL_563;
        }
        v769 = v8;
        unsigned int __n = 0;
        __s2[0] = 0;
        int v775 = 0;
        int v776 = 0;
        if (v50[4])
        {
          unsigned int __n = 0;
          if ((ucp_findchar(v362, &v775, (unsigned int *)&v776) & 0x80000000) == 0 && v776 >= 1)
          {
            unsigned int __n = ord2utf8(v776, (uint64_t)__s2);
            int v50 = v782;
            int v218 = *((_DWORD *)v782 + 59);
          }
        }
        int v765 = v218;
        if (v218 < 1)
        {
LABEL_559:
          int v376 = *((_DWORD *)v50 + 58);
          uint64_t v8 = v769;
          if (v376 != v218)
          {
            if (!*((_DWORD *)v50 + 42))
            {
              char v75 = (char *)v50[1];
              v50[11] = (uint64_t)v75;
              int v631 = v376 - v218;
              if (v376 <= v765) {
                goto LABEL_1078;
              }
              size_t v632 = *((unsigned int *)v50 + 57);
              unint64_t v633 = *(void *)(a4 + 96) - (int)v632;
              int v74 = v75;
              while ((unint64_t)v74 <= v633)
              {
                int v634 = memcmp(v74, (const void *)v50[8], v632);
                uint64_t v635 = (int)v632;
                if (v634)
                {
                  if (!__n)
                  {
                    unsigned int __n = 0;
                    break;
                  }
                  int v636 = memcmp(v74, __s2, __n);
                  uint64_t v635 = (int)__n;
                  if (v636) {
                    break;
                  }
                }
                v74 += v635;
                v50[1] = (uint64_t)v74;
                if (!--v631) {
                  break;
                }
              }
              uint64_t v8 = v769;
LABEL_96:
              if (v74 >= v75)
              {
LABEL_1078:
                *(void *)&long long v778 = 0;
                uint64_t v63 = a1;
                char v64 = 29;
                goto LABEL_1191;
              }
              goto LABEL_967;
            }
            int v44 = v769;
            *((_DWORD *)v50 + 56) = v218;
            goto LABEL_326;
          }
          continue;
        }
        unsigned int v369 = (const void *)v50[8];
        size_t v370 = *((unsigned int *)v50 + 57);
        int v371 = v218;
        unsigned int v372 = (char *)v50[1];
        while (1)
        {
          int v373 = memcmp(v372, v369, v370);
          int v374 = v370;
          if (v373) {
            break;
          }
LABEL_558:
          v372 += v374;
          v50[1] = (uint64_t)v372;
          if (!--v371) {
            goto LABEL_559;
          }
        }
        if (!__n)
        {
          v782 = (uint64_t *)*v50;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
          unsigned int v573 = v782;
          if (!v782) {
            return 0;
          }
          unsigned int __n = 0;
LABEL_936:
          uint64_t v11 = 0;
          *((_DWORD *)v573 + 102) = 0;
          *int v13 = v573;
          uint64_t v8 = v769;
          goto LABEL_1203;
        }
        int v375 = memcmp(v372, __s2, __n);
        int v374 = __n;
        if (!v375) {
          goto LABEL_558;
        }
        v782 = (uint64_t *)*v50;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
        uint64_t v174 = v782;
        uint64_t v8 = v769;
        if (v782) {
          goto LABEL_969;
        }
        return 0;
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
        size_t v220 = v212 + 1;
        void v50[2] = (uint64_t)(v212 + 1);
        uint64_t v221 = *v212;
        BOOL v222 = (v221 - 33) & 1;
        *((_DWORD *)v50 + 42) = v222;
        int v223 = rep_min_0[v221 - 33];
        *((_DWORD *)v50 + 59) = v223;
        signed int v224 = rep_max_0[v221 - 33];
        if ((v221 - 39) < 0xFFFFFFFE) {
          signed int v224 = 0x7FFFFFFF;
        }
        *((_DWORD *)v50 + 58) = v224;
        goto LABEL_576;
      case 0x27u:
      case 0x28u:
        int v223 = 0;
        *((_DWORD *)v50 + 59) = 0;
        signed int v224 = __rev16(*(unsigned __int16 *)(v212 + 1));
        *((_DWORD *)v50 + 58) = v224;
        BOOL v222 = *v212 == 40;
        *((_DWORD *)v50 + 42) = v222;
        goto LABEL_575;
      case 0x29u:
        BOOL v222 = 0;
        signed int v224 = __rev16(*(unsigned __int16 *)(v212 + 1));
        *((_DWORD *)v50 + 58) = v224;
        *((_DWORD *)v50 + 59) = v224;
        int v223 = v224;
LABEL_575:
        size_t v220 = v212 + 3;
        void v50[2] = (uint64_t)(v212 + 3);
LABEL_576:
        unint64_t v381 = *(void *)(a4 + 96);
        unsigned int v382 = (unsigned __int8 *)v50[1];
        if ((uint64_t)(v381 - (void)v382) < v223) {
          goto LABEL_967;
        }
        void v50[2] = (uint64_t)(v220 + 1);
        uint64_t v383 = *v220;
        *((_DWORD *)v50 + 55) = v383;
        if (v50[4])
        {
          uint64_t v391 = *(void *)(a4 + 32);
          int v392 = *(unsigned __int8 *)(v391 + v383);
          *((_DWORD *)v50 + 55) = v392;
          int v393 = *(_DWORD *)(a4 + 60);
          if (v393)
          {
            if (v223 >= 1)
            {
              int v394 = 1;
              uint64_t v105 = v382;
              while (1)
              {
                int8x16_t v395 = v105++;
                v50[1] = (uint64_t)v105;
                int v396 = *v395;
                if ((~v396 & 0xC0) != 0) {
                  goto LABEL_597;
                }
                int v397 = utf8_table4[v396 & 0x3F];
                int v398 = 6 * v397;
                int v396 = (utf8_table3[utf8_table4[v396 & 0x3F]] & v396) << (6 * v397);
                unsigned int v399 = v397 + 1;
                int v400 = v398 - 6;
                do
                {
                  uint64_t v401 = v105++;
                  v50[1] = (uint64_t)v105;
                  a3 = (*v401 & 0x3F) << v400;
                  v396 |= a3;
                  --v399;
                  v400 -= 6;
                }
                while (v399 > 1);
                if (v396 <= 255) {
LABEL_597:
                }
                  int v396 = *(unsigned __int8 *)(v391 + v396);
                if (v396 == v392) {
                  goto LABEL_967;
                }
                BOOL v163 = v394++ == v223;
                if (v163) {
                  goto LABEL_614;
                }
              }
            }
            uint64_t v105 = v382;
          }
          else
          {
            int v403 = v223;
            uint64_t v105 = v382;
            if (v223 >= 1)
            {
              do
              {
                uint64_t v105 = v382 + 1;
                v50[1] = (uint64_t)(v382 + 1);
                if (v392 == *(unsigned __int8 *)(v391 + *v382)) {
                  goto LABEL_967;
                }
                ++v382;
              }
              while (--v403);
            }
          }
LABEL_614:
          if (v224 != v223)
          {
            if (v222)
            {
              *((_DWORD *)v50 + 56) = v223;
              if (v393)
              {
LABEL_128:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 34;
              }
              else
              {
LABEL_134:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 35;
              }
              goto LABEL_1105;
            }
            v50[11] = (uint64_t)v105;
            if (v393)
            {
              if (v224 <= v223)
              {
LABEL_140:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 36;
                goto LABEL_1105;
              }
              while (2)
              {
                if ((unint64_t)v105 >= v381) {
                  goto LABEL_140;
                }
                int v592 = *v105;
                if ((~v592 & 0xC0) != 0)
                {
                  unsigned int v598 = 1;
                }
                else
                {
                  unint64_t v593 = utf8_table4[v592 & 0x3F];
                  int v592 = (utf8_table3[v593] & v592) << (6 * v593);
                  v594 = (char *)(v105 + 1);
                  if (v593 <= 1) {
                    uint64_t v595 = 1;
                  }
                  else {
                    uint64_t v595 = v593;
                  }
                  int v596 = 6 * v593 - 6;
                  do
                  {
                    char v597 = *v594++;
                    v592 |= (v597 & 0x3F) << v596;
                    v596 -= 6;
                    --v595;
                  }
                  while (v595);
                  unsigned int v598 = v593 + 1;
                  if (v592 > 255)
                  {
LABEL_1005:
                    if (v592 == v392) {
                      goto LABEL_140;
                    }
                    v105 += v598;
                    v50[1] = (uint64_t)v105;
                    if (++v223 == v224) {
                      goto LABEL_140;
                    }
                    continue;
                  }
                }
                break;
              }
              int v592 = *(unsigned __int8 *)(v391 + v592);
              goto LABEL_1005;
            }
            BOOL v339 = __OFSUB__(v224, v223);
            int v649 = v224 - v223;
            if ((v649 < 0) ^ v339 | (v649 == 0)) {
              goto LABEL_1104;
            }
            uint64_t v650 = 0;
            unint64_t v104 = (unint64_t)v105;
            while ((unint64_t)&v105[v650] < v381)
            {
              if (v392 != *(unsigned __int8 *)(v391 + v105[v650]))
              {
                ++v104;
                v50[1] = (uint64_t)&v105[++v650];
                if (v649 != v650) {
                  continue;
                }
              }
              unint64_t v104 = (unint64_t)&v105[v650];
              break;
            }
LABEL_143:
            if (v104 >= (unint64_t)v105)
            {
LABEL_1104:
              *(void *)&long long v778 = 0;
              uint64_t v95 = a1;
              char v96 = 37;
              goto LABEL_1105;
            }
LABEL_967:
            uint64_t v204 = (uint64_t *)*v50;
LABEL_968:
            v782 = v204;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
            uint64_t v174 = v782;
            if (!v782) {
              return 0;
            }
LABEL_969:
            uint64_t v11 = 0;
            *((_DWORD *)v174 + 102) = 0;
            goto LABEL_1202;
          }
        }
        else
        {
          int v384 = *(_DWORD *)(a4 + 60);
          if (v384)
          {
            if (v223 >= 1)
            {
              int v385 = 1;
              uint64_t v120 = v382;
              while (1)
              {
                uint64_t v386 = v120 + 1;
                v50[1] = (uint64_t)(v120 + 1);
                int v387 = *v120;
                if ((~v387 & 0xC0) != 0)
                {
                  ++v120;
                }
                else
                {
                  int v388 = utf8_table4[v387 & 0x3F];
                  int v387 = (utf8_table3[utf8_table4[v387 & 0x3F]] & v387) << (6 * v388);
                  unsigned int v389 = v388 + 1;
                  int v390 = 6 * v388 - 6;
                  do
                  {
                    uint64_t v120 = v386 + 1;
                    v50[1] = (uint64_t)(v386 + 1);
                    v387 |= (*v386 & 0x3F) << v390;
                    --v389;
                    v390 -= 6;
                    ++v386;
                  }
                  while (v389 > 1);
                }
                if (v387 == v383) {
                  goto LABEL_967;
                }
                BOOL v163 = v385++ == v223;
                if (v163) {
                  goto LABEL_611;
                }
              }
            }
            uint64_t v120 = v382;
          }
          else
          {
            int v402 = v223;
            uint64_t v120 = v382;
            if (v223 >= 1)
            {
              do
              {
                uint64_t v120 = v382 + 1;
                v50[1] = (uint64_t)(v382 + 1);
                if (v383 == *v382) {
                  goto LABEL_967;
                }
                ++v382;
              }
              while (--v402);
            }
          }
LABEL_611:
          if (v224 != v223)
          {
            if (v222)
            {
              *((_DWORD *)v50 + 56) = v223;
              if (v384)
              {
LABEL_310:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 38;
              }
              else
              {
LABEL_155:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 39;
              }
              goto LABEL_1105;
            }
            v50[11] = (uint64_t)v120;
            if (v384)
            {
              if (v224 > v223)
              {
                do
                {
                  if ((unint64_t)v120 >= v381) {
                    break;
                  }
                  int v585 = *v120;
                  if ((~v585 & 0xC0) != 0)
                  {
                    unsigned int v591 = 1;
                  }
                  else
                  {
                    unint64_t v586 = utf8_table4[v585 & 0x3F];
                    int v585 = (utf8_table3[v586] & v585) << (6 * v586);
                    uint64_t v587 = (char *)(v120 + 1);
                    uint64_t v588 = v586 <= 1 ? 1 : v586;
                    int v589 = 6 * v586 - 6;
                    do
                    {
                      char v590 = *v587++;
                      v585 |= (v590 & 0x3F) << v589;
                      v589 -= 6;
                      --v588;
                    }
                    while (v588);
                    unsigned int v591 = v586 + 1;
                  }
                  if (v585 == v383) {
                    break;
                  }
                  v120 += v591;
                  v50[1] = (uint64_t)v120;
                  ++v223;
                }
                while (v223 != v224);
              }
LABEL_161:
              *(void *)&long long v778 = 0;
              uint64_t v63 = a1;
              char v64 = 40;
              goto LABEL_1191;
            }
            BOOL v339 = __OFSUB__(v224, v223);
            int v647 = v224 - v223;
            if ((v647 < 0) ^ v339 | (v647 == 0)) {
              goto LABEL_1097;
            }
            uint64_t v648 = 0;
            unint64_t v119 = (unint64_t)v120;
            while ((unint64_t)&v120[v648] < v381)
            {
              if (v383 != v120[v648])
              {
                ++v119;
                v50[1] = (uint64_t)&v120[++v648];
                if (v647 != v648) {
                  continue;
                }
              }
              unint64_t v119 = (unint64_t)&v120[v648];
              break;
            }
LABEL_164:
            if (v119 >= (unint64_t)v120)
            {
LABEL_1097:
              *(void *)&long long v778 = 0;
              uint64_t v63 = a1;
              char v64 = 41;
              goto LABEL_1191;
            }
            goto LABEL_967;
          }
        }
        continue;
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
        __int16 v225 = v212 + 1;
        void v50[2] = (uint64_t)(v212 + 1);
        uint64_t v226 = *v212;
        *((_DWORD *)v50 + 42) = v226 & 1;
        int v227 = rep_min_0[v226 - 42];
        *((_DWORD *)v50 + 59) = v227;
        if ((v226 - 48) >= 0xFFFFFFFE) {
          int v228 = rep_max_0[v226 - 42];
        }
        else {
          int v228 = 0x7FFFFFFF;
        }
        *((_DWORD *)v50 + 58) = v228;
        goto LABEL_618;
      case 0x30u:
      case 0x31u:
        int v227 = 0;
        *((_DWORD *)v50 + 59) = 0;
        *((_DWORD *)v50 + 58) = __rev16(*(unsigned __int16 *)(v212 + 1));
        BOOL v259 = *v212 == 49;
        goto LABEL_617;
      case 0x32u:
        int v227 = __rev16(*(unsigned __int16 *)(v212 + 1));
        *((_DWORD *)v50 + 58) = v227;
        *((_DWORD *)v50 + 59) = v227;
        BOOL v259 = 1;
LABEL_617:
        *((_DWORD *)v50 + 42) = v259;
        __int16 v225 = v212 + 3;
        void v50[2] = (uint64_t)(v212 + 3);
LABEL_618:
        void v50[2] = (uint64_t)(v225 + 1);
        int v404 = *v225;
        *((_DWORD *)v50 + 54) = v404;
        if ((v404 - 13) > 1)
        {
          int v406 = -1;
          *((_DWORD *)v50 + 46) = -1;
        }
        else
        {
          *((_DWORD *)v50 + 47) = v404 == 13;
          void v50[2] = (uint64_t)(v225 + 2);
          int v405 = (char)v225[1];
          int v406 = v405;
          *((_DWORD *)v50 + 46) = v405;
          if (v405 < 0)
          {
            *((_DWORD *)v50 + 51) = v405 - 128;
            uint64_t v407 = v50 + 24;
          }
          else
          {
            *((_DWORD *)v50 + 51) = v405;
            uint64_t v407 = (uint64_t *)((char *)v50 + 196);
          }
          v50[26] = (uint64_t)v407;
        }
        BOOL v408 = *(unsigned char **)(a4 + 96);
        v409 = (unsigned char *)v50[1];
        if (v408 - v409 < v227) {
          goto LABEL_967;
        }
        int v410 = v227;
        if (v227 <= 0) {
          goto LABEL_919;
        }
        if (v406 >= 1)
        {
          int v411 = 1;
          while (1)
          {
            int v412 = (unsigned __int8 *)v50[1];
            v50[1] = (uint64_t)(v412 + 1);
            int v413 = *v412;
            if ((~v413 & 0xC0) == 0)
            {
              int v414 = utf8_table4[v413 & 0x3F];
              int v413 = (utf8_table3[utf8_table4[v413 & 0x3F]] & v413) << (6 * v414);
              int v415 = v412 + 2;
              int v416 = 6 * v414 - 6;
              unsigned int v417 = v414 + 1;
              do
              {
                v50[1] = (uint64_t)v415;
                v413 |= (*(v415++ - 1) & 0x3F) << v416;
                v416 -= 6;
                --v417;
              }
              while (v417 > 1);
            }
            int v418 = ucp_findchar(v413, (int *)v50 + 49, (unsigned int *)v50 + 50);
            int v50 = v782;
            *((_DWORD *)v782 + 48) = v418;
            if (*((_DWORD *)v50 + 47) == (*(_DWORD *)v50[26] == *((_DWORD *)v50 + 51))) {
              goto LABEL_967;
            }
            int v410 = *((_DWORD *)v50 + 59);
            BOOL v419 = v411++ < v410;
            if (!v419) {
              goto LABEL_919;
            }
          }
        }
        if (v404 == 15)
        {
          int v420 = 1;
          while (1)
          {
            v421 = (unsigned __int8 *)v50[1];
            v50[1] = (uint64_t)(v421 + 1);
            int v422 = *v421;
            if (*(_DWORD *)(a4 + 60) && (v422 & 0xC0) == 0xC0)
            {
              int v423 = utf8_table4[v422 & 0x3F];
              int v422 = (utf8_table3[utf8_table4[v422 & 0x3F]] & v422) << (6 * v423);
              v424 = v421 + 2;
              int v425 = 6 * v423 - 6;
              unsigned int v426 = v423 + 1;
              do
              {
                v50[1] = (uint64_t)v424;
                v422 |= (*(v424++ - 1) & 0x3F) << v425;
                v425 -= 6;
                --v426;
              }
              while (v426 > 1);
            }
            int v427 = ucp_findchar(v422, (int *)v50 + 49, (unsigned int *)v50 + 50);
            int v50 = v782;
            *((_DWORD *)v782 + 48) = v427;
            if (v427 == 2) {
              goto LABEL_967;
            }
            for (uint64_t k = (unsigned __int8 *)v50[1]; (unint64_t)k < *(void *)(a4 + 96); v50[1] = (uint64_t)k)
            {
              int v429 = *k;
              unsigned int v430 = 1;
              if (*(_DWORD *)(a4 + 60) && (v429 & 0xC0) == 0xC0)
              {
                unint64_t v431 = utf8_table4[v429 & 0x3F];
                int v429 = (utf8_table3[v431] & v429) << (6 * v431);
                uint64_t v432 = (char *)(k + 1);
                if (v431 <= 1) {
                  uint64_t v433 = 1;
                }
                else {
                  uint64_t v433 = v431;
                }
                int v434 = 6 * v431 - 6;
                do
                {
                  char v435 = *v432++;
                  v429 |= (v435 & 0x3F) << v434;
                  v434 -= 6;
                  --v433;
                }
                while (v433);
                unsigned int v430 = v431 + 1;
              }
              int v436 = ucp_findchar(v429, (int *)v50 + 49, (unsigned int *)v50 + 50);
              int v50 = v782;
              *((_DWORD *)v782 + 48) = v436;
              if (v436 != 2) {
                break;
              }
              uint64_t k = (unsigned __int8 *)(v50[1] + v430);
            }
            int v410 = *((_DWORD *)v50 + 59);
            BOOL v419 = v420++ < v410;
            if (!v419) {
              goto LABEL_919;
            }
          }
        }
        if (*(_DWORD *)(a4 + 60))
        {
          switch(v404)
          {
            case 5:
              int v437 = 1;
              while (v409 < v408)
              {
                long long v438 = v409 + 1;
                v50[1] = (uint64_t)(v409 + 1);
                int v439 = *v409;
                if ((~v439 & 0xC0) != 0)
                {
                  ++v409;
                }
                else
                {
                  int v440 = utf8_table4[v439 & 0x3F];
                  int v439 = (utf8_table3[utf8_table4[v439 & 0x3F]] & v439) << (6 * v440);
                  int v441 = 6 * v440 - 6;
                  unsigned int v442 = v440 + 1;
                  do
                  {
                    v409 = v438 + 1;
                    v50[1] = (uint64_t)(v438 + 1);
                    v439 |= (*v438 & 0x3F) << v441;
                    v441 -= 6;
                    --v442;
                    ++v438;
                  }
                  while (v442 > 1);
                }
                if (v439 <= 127 && (*(unsigned char *)(*(void *)(a4 + 40) + v439) & 4) != 0) {
                  break;
                }
                BOOL v163 = v437++ == v227;
                if (v163) {
                  goto LABEL_919;
                }
              }
              goto LABEL_967;
            case 6:
              while (v409 < v408)
              {
                if ((char)*v409 < 0) {
                  break;
                }
                uint64_t v485 = *(void *)(a4 + 40);
                v50[1] = (uint64_t)(v409 + 1);
                if ((*(unsigned char *)(v485 + *v409) & 4) == 0) {
                  break;
                }
                ++v409;
                if (!--v227) {
                  goto LABEL_919;
                }
              }
              goto LABEL_967;
            case 7:
              int v543 = 1;
              while (v409 < v408)
              {
                if (((char)*v409 & 0x80000000) == 0)
                {
                  uint64_t v544 = *(void *)(a4 + 40);
                  v50[1] = (uint64_t)(v409 + 1);
                  LOBYTE(v544) = *(unsigned char *)(v544 + *v409++);
                  if (v544) {
                    break;
                  }
                }
                if (v409 < v408)
                {
                  uint64_t v545 = v408 - v409;
                  while ((*v409 & 0xC0) == 0x80)
                  {
                    v50[1] = (uint64_t)++v409;
                    if (!--v545)
                    {
                      v409 = v408;
                      break;
                    }
                  }
                }
                BOOL v163 = v543++ == v227;
                if (v163) {
                  goto LABEL_919;
                }
              }
              goto LABEL_967;
            case 8:
              while (v409 < v408)
              {
                if ((char)*v409 < 0) {
                  break;
                }
                uint64_t v486 = *(void *)(a4 + 40);
                v50[1] = (uint64_t)(v409 + 1);
                if ((*(unsigned char *)(v486 + *v409) & 1) == 0) {
                  break;
                }
                ++v409;
                if (!--v227) {
                  goto LABEL_919;
                }
              }
              goto LABEL_967;
            case 9:
              int v546 = 1;
              while (v409 < v408)
              {
                if (((char)*v409 & 0x80000000) == 0)
                {
                  uint64_t v547 = *(void *)(a4 + 40);
                  v50[1] = (uint64_t)(v409 + 1);
                  LOBYTE(v547) = *(unsigned char *)(v547 + *v409++);
                  if ((v547 & 0x10) != 0) {
                    break;
                  }
                }
                if (v409 < v408)
                {
                  uint64_t v548 = v408 - v409;
                  while ((*v409 & 0xC0) == 0x80)
                  {
                    v50[1] = (uint64_t)++v409;
                    if (!--v548)
                    {
                      v409 = v408;
                      break;
                    }
                  }
                }
                BOOL v163 = v546++ == v227;
                if (v163) {
                  goto LABEL_919;
                }
              }
              goto LABEL_967;
            case 10:
              uint64_t v549 = 0;
              while (1)
              {
                int v550 = &v409[v549];
                if (&v409[v549] >= v408) {
                  goto LABEL_967;
                }
                if ((char)*v550 < 0) {
                  goto LABEL_967;
                }
                uint64_t v551 = *(void *)(a4 + 40);
                v50[1] = (uint64_t)(v550 + 1);
                if ((*(unsigned char *)(v551 + *v550) & 0x10) == 0) {
                  goto LABEL_967;
                }
                if (v410 == ++v549) {
                  goto LABEL_919;
                }
              }
            case 11:
              int v552 = 1;
              break;
            case 12:
              goto LABEL_918;
            default:
              goto LABEL_1175;
          }
          while (v409 < v408)
          {
            int v553 = v409 + 1;
            v50[1] = (uint64_t)(v409 + 1);
            if (*v409 == 10 && (v50[4] & 4) == 0) {
              break;
            }
            if (v553 < v408)
            {
              uint64_t v554 = v408 - v553;
              while ((*v553 & 0xC0) == 0x80)
              {
                v50[1] = (uint64_t)++v553;
                if (!--v554)
                {
                  int v553 = v408;
                  break;
                }
              }
            }
            v409 = v553;
            BOOL v163 = v552++ == v227;
            if (v163) {
              goto LABEL_919;
            }
          }
          goto LABEL_967;
        }
        switch(v404)
        {
          case 5:
            uint64_t v508 = *(void *)(a4 + 40);
            v509 = v409 + 1;
            while (1)
            {
              v50[1] = (uint64_t)v509;
              if ((*(unsigned char *)(v508 + *(v509 - 1)) & 4) != 0) {
                goto LABEL_967;
              }
              ++v509;
              if (!--v227) {
                goto LABEL_919;
              }
            }
          case 6:
            uint64_t v555 = *(void *)(a4 + 40);
            uint64_t v556 = v409 + 1;
            while (1)
            {
              v50[1] = (uint64_t)v556;
              if ((*(unsigned char *)(v555 + *(v556 - 1)) & 4) == 0) {
                goto LABEL_967;
              }
              ++v556;
              if (!--v227) {
                goto LABEL_919;
              }
            }
          case 7:
            uint64_t v557 = *(void *)(a4 + 40);
            uint64_t v558 = v409 + 1;
            while (1)
            {
              v50[1] = (uint64_t)v558;
              if (*(unsigned char *)(v557 + *(v558 - 1))) {
                goto LABEL_967;
              }
              ++v558;
              if (!--v227) {
                goto LABEL_919;
              }
            }
          case 8:
            uint64_t v559 = *(void *)(a4 + 40);
            uint64_t v560 = v409 + 1;
            while (1)
            {
              v50[1] = (uint64_t)v560;
              if ((*(unsigned char *)(v559 + *(v560 - 1)) & 1) == 0) {
                goto LABEL_967;
              }
              ++v560;
              if (!--v227) {
                goto LABEL_919;
              }
            }
          case 9:
            uint64_t v561 = *(void *)(a4 + 40);
            size_t v562 = v409 + 1;
            while (1)
            {
              v50[1] = (uint64_t)v562;
              if ((*(unsigned char *)(v561 + *(v562 - 1)) & 0x10) != 0) {
                goto LABEL_967;
              }
              ++v562;
              if (!--v227) {
                goto LABEL_919;
              }
            }
          case 10:
            uint64_t v563 = *(void *)(a4 + 40);
            int v564 = v409 + 1;
            while (1)
            {
              v50[1] = (uint64_t)v564;
              if ((*(unsigned char *)(v563 + *(v564 - 1)) & 0x10) == 0) {
                goto LABEL_967;
              }
              ++v564;
              if (!--v227) {
                goto LABEL_919;
              }
            }
          case 11:
            if ((v50[4] & 4) != 0) {
              goto LABEL_918;
            }
            uint64_t v565 = v409 + 1;
            break;
          case 12:
LABEL_918:
            v50[1] = (uint64_t)&v409[v227];
            goto LABEL_919;
          default:
LABEL_1175:
            v782 = (uint64_t *)*v50;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
            v684 = v782;
            uint64_t v11 = 4294967282;
            if (!v782) {
              return v11;
            }
            *((_DWORD *)v782 + 102) = -14;
            *int v13 = v684;
            goto LABEL_1203;
        }
        do
        {
          v50[1] = (uint64_t)v565;
          if (*(v565 - 1) == 10) {
            goto LABEL_967;
          }
          ++v565;
          --v227;
        }
        while (v227);
LABEL_919:
        int v566 = *((_DWORD *)v50 + 58);
        int v567 = v566 - v410;
        if (v566 == v410) {
          continue;
        }
        if (*((_DWORD *)v50 + 42))
        {
          if (*((int *)v50 + 46) < 1)
          {
            if (*((_DWORD *)v50 + 54) == 15)
            {
              *((_DWORD *)v50 + 56) = v410;
LABEL_330:
              *(void *)&long long v778 = 0;
              uint64_t v95 = a1;
              char v96 = 43;
            }
            else
            {
              int v630 = *(_DWORD *)(a4 + 60);
              *((_DWORD *)v50 + 56) = v410;
              if (v630)
              {
LABEL_354:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 44;
              }
              else
              {
LABEL_368:
                *(void *)&long long v778 = 0;
                uint64_t v95 = a1;
                char v96 = 45;
              }
            }
          }
          else
          {
            *((_DWORD *)v50 + 56) = v410;
LABEL_174:
            *(void *)&long long v778 = 0;
            uint64_t v95 = a1;
            char v96 = 42;
          }
          goto LABEL_1105;
        }
        int v192 = (unsigned char *)v50[1];
        v50[11] = (uint64_t)v192;
        if (*((int *)v50 + 46) >= 1)
        {
          if (v566 > v410)
          {
            do
            {
              if ((unint64_t)v192 >= *(void *)(a4 + 96)) {
                break;
              }
              int v575 = *v192;
              if ((~v575 & 0xC0) != 0)
              {
                unsigned int v581 = 1;
              }
              else
              {
                unint64_t v576 = utf8_table4[v575 & 0x3F];
                int v575 = (utf8_table3[v576] & v575) << (6 * v576);
                size_t v577 = v192 + 1;
                uint64_t v578 = v576 <= 1 ? 1 : v576;
                int v579 = 6 * v576 - 6;
                do
                {
                  char v580 = *v577++;
                  v575 |= (v580 & 0x3F) << v579;
                  v579 -= 6;
                  --v578;
                }
                while (v578);
                unsigned int v581 = v576 + 1;
              }
              int v582 = ucp_findchar(v575, (int *)v50 + 49, (unsigned int *)v50 + 50);
              int v50 = v782;
              *((_DWORD *)v782 + 48) = v582;
              if (*((_DWORD *)v50 + 47) == (*(_DWORD *)v50[26] == *((_DWORD *)v50 + 51))) {
                break;
              }
              int v192 = (unsigned char *)(v50[1] + v581);
              v50[1] = (uint64_t)v192;
              ++v410;
            }
            while (v410 < *((_DWORD *)v50 + 58));
          }
LABEL_216:
          *(void *)&long long v778 = 0;
          uint64_t v95 = a1;
          char v96 = 46;
          goto LABEL_1105;
        }
        int v609 = *((_DWORD *)v50 + 54);
        if (v609 == 15)
        {
          if (v566 > v410)
          {
            do
            {
              int v610 = (unsigned __int8 *)v50[1];
              if ((unint64_t)v610 >= *(void *)(a4 + 96)) {
                break;
              }
              v50[1] = (uint64_t)(v610 + 1);
              int v611 = *v610;
              if (*(_DWORD *)(a4 + 60) && (v611 & 0xC0) == 0xC0)
              {
                int v612 = utf8_table4[v611 & 0x3F];
                int v611 = (utf8_table3[utf8_table4[v611 & 0x3F]] & v611) << (6 * v612);
                unsigned __int16 v613 = v610 + 2;
                int v614 = 6 * v612 - 6;
                unsigned int v615 = v612 + 1;
                do
                {
                  v50[1] = (uint64_t)v613;
                  v611 |= (*(v613++ - 1) & 0x3F) << v614;
                  v614 -= 6;
                  --v615;
                }
                while (v615 > 1);
              }
              int v616 = ucp_findchar(v611, (int *)v50 + 49, (unsigned int *)v50 + 50);
              int v50 = v782;
              *((_DWORD *)v782 + 48) = v616;
              if (v616 == 2) {
                break;
              }
              for (unsigned int m = (unsigned __int8 *)v50[1]; (unint64_t)m < *(void *)(a4 + 96); v50[1] = (uint64_t)m)
              {
                int v618 = *m;
                unsigned int v619 = 1;
                if (*(_DWORD *)(a4 + 60) && (v618 & 0xC0) == 0xC0)
                {
                  unint64_t v620 = utf8_table4[v618 & 0x3F];
                  int v618 = (utf8_table3[v620] & v618) << (6 * v620);
                  unint64_t v621 = (char *)(m + 1);
                  if (v620 <= 1) {
                    uint64_t v622 = 1;
                  }
                  else {
                    uint64_t v622 = v620;
                  }
                  int v623 = 6 * v620 - 6;
                  do
                  {
                    char v624 = *v621++;
                    v618 |= (v624 & 0x3F) << v623;
                    v623 -= 6;
                    --v622;
                  }
                  while (v622);
                  unsigned int v619 = v620 + 1;
                }
                int v625 = ucp_findchar(v618, (int *)v50 + 49, (unsigned int *)v50 + 50);
                int v50 = v782;
                *((_DWORD *)v782 + 48) = v625;
                if (v625 != 2) {
                  break;
                }
                unsigned int m = (unsigned __int8 *)(v50[1] + v619);
              }
              ++v410;
            }
            while (v410 < *((_DWORD *)v50 + 58));
          }
LABEL_1053:
          *(void *)&long long v778 = 0;
          uint64_t v95 = a1;
          char v96 = 47;
          goto LABEL_1105;
        }
        if (!*(_DWORD *)(a4 + 60))
        {
          switch(v609)
          {
            case 5:
              int v685 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v687 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              while (1)
              {
                v688 = &v192[v686];
                if ((unint64_t)&v192[v686] >= v687) {
                  goto LABEL_1336;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v688) & 4) != 0) {
                  goto LABEL_268;
                }
                ++v173;
                v50[1] = (uint64_t)&v192[++v686];
                if (v685 == v686) {
                  goto LABEL_1332;
                }
              }
            case 6:
              int v741 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v742 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              while (1)
              {
                v688 = &v192[v686];
                if ((unint64_t)&v192[v686] >= v742) {
                  goto LABEL_1336;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v688) & 4) == 0) {
                  goto LABEL_268;
                }
                ++v173;
                v50[1] = (uint64_t)&v192[++v686];
                if (v741 == v686) {
                  goto LABEL_1332;
                }
              }
            case 7:
              int v743 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v744 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              while (1)
              {
                v688 = &v192[v686];
                if ((unint64_t)&v192[v686] >= v744) {
                  goto LABEL_1336;
                }
                if (*(unsigned char *)(*(void *)(a4 + 40) + *v688)) {
                  goto LABEL_268;
                }
                ++v173;
                v50[1] = (uint64_t)&v192[++v686];
                if (v743 == v686) {
                  goto LABEL_1332;
                }
              }
            case 8:
              int v745 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v746 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              while (1)
              {
                v688 = &v192[v686];
                if ((unint64_t)&v192[v686] >= v746) {
                  goto LABEL_1336;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v688) & 1) == 0) {
                  goto LABEL_268;
                }
                ++v173;
                v50[1] = (uint64_t)&v192[++v686];
                if (v745 == v686) {
                  goto LABEL_1332;
                }
              }
            case 9:
              int v747 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v748 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              while (1)
              {
                v688 = &v192[v686];
                if ((unint64_t)&v192[v686] >= v748) {
                  goto LABEL_1336;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v688) & 0x10) != 0) {
                  goto LABEL_268;
                }
                ++v173;
                v50[1] = (uint64_t)&v192[++v686];
                if (v747 == v686) {
                  goto LABEL_1332;
                }
              }
            case 10:
              int v749 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v750 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              while (1)
              {
                v688 = &v192[v686];
                if ((unint64_t)&v192[v686] >= v750) {
                  goto LABEL_1336;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v688) & 0x10) == 0) {
                  goto LABEL_268;
                }
                ++v173;
                v50[1] = (uint64_t)&v192[++v686];
                if (v749 == v686) {
                  goto LABEL_1332;
                }
              }
            case 11:
              if ((v50[4] & 4) != 0) {
                goto LABEL_1333;
              }
              int v751 = v566 - v410;
              if (v566 <= v410) {
                goto LABEL_269;
              }
              uint64_t v686 = 0;
              unint64_t v752 = *(void *)(a4 + 96);
              unint64_t v173 = (unint64_t)v192;
              break;
            case 12:
LABEL_1333:
              uint64_t v753 = *(void *)(a4 + 96) - (void)v192;
              if (v753 >= v567) {
                LODWORD(v753) = v567;
              }
              unint64_t v173 = (unint64_t)&v192[(int)v753];
              v50[1] = v173;
              goto LABEL_268;
            default:
              BOOL v211 = (uint64_t *)*v50;
              goto LABEL_334;
          }
          while (1)
          {
            v688 = &v192[v686];
            if ((unint64_t)&v192[v686] >= v752) {
              break;
            }
            if (*v688 == 10) {
              goto LABEL_268;
            }
            ++v173;
            v50[1] = (uint64_t)&v192[++v686];
            if (v751 == v686)
            {
LABEL_1332:
              unint64_t v173 = (unint64_t)&v192[v686];
              goto LABEL_268;
            }
          }
LABEL_1336:
          unint64_t v173 = (unint64_t)v688;
LABEL_268:
          if (v173 < (unint64_t)v192) {
            goto LABEL_967;
          }
LABEL_269:
          *(void *)&long long v778 = 0;
          uint64_t v95 = a1;
          char v96 = 49;
LABEL_1105:
          int v651 = pcre_getMem(v95, v96, &v778, a4, a5, a6, a7, a8);
          uint64_t v22 = (uint64_t *)v778;
          unsigned int v210 = v782;
          if (!(void)v778 || v651 < 0) {
            goto LABEL_1198;
          }
LABEL_1193:
          long long v693 = *(_OWORD *)(v210 + 1);
          *(_OWORD *)(v22 + 1) = v693;
          *((_DWORD *)v22 + 6) = *((_DWORD *)v210 + 6);
          uint64_t v176 = v210[4];
          v22[4] = v176;
          uint64_t v175 = v210[5];
          v22[5] = v175;
          *((_DWORD *)v22 + 12) = 0;
          *uint64_t v22 = (uint64_t)v210;
          v782 = v22;
          uint64_t v25 = v693;
LABEL_1194:
          char v24 = 1;
          goto LABEL_1195;
        }
        switch(v609)
        {
          case 5:
            if (v566 <= v410) {
              goto LABEL_238;
            }
            unint64_t v652 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v652) {
                goto LABEL_238;
              }
              int v653 = *v192;
              if ((~v653 & 0xC0) != 0)
              {
                unsigned int v659 = 1;
              }
              else
              {
                unint64_t v654 = utf8_table4[v653 & 0x3F];
                int v653 = (utf8_table3[v654] & v653) << (6 * v654);
                v655 = v192 + 1;
                if (v654 <= 1) {
                  uint64_t v656 = 1;
                }
                else {
                  uint64_t v656 = v654;
                }
                int v657 = 6 * v654 - 6;
                do
                {
                  char v658 = *v655++;
                  v653 |= (v658 & 0x3F) << v657;
                  v657 -= 6;
                  --v656;
                }
                while (v656);
                unsigned int v659 = v654 + 1;
                if (v653 > 255) {
                  goto LABEL_1123;
                }
              }
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v653) & 4) != 0) {
                goto LABEL_238;
              }
LABEL_1123:
              v192 += v659;
              v50[1] = (uint64_t)v192;
              if (++v410 == v566) {
                goto LABEL_238;
              }
              continue;
            }
          case 6:
            if (v566 <= v410) {
              goto LABEL_238;
            }
            unint64_t v696 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v696) {
                goto LABEL_238;
              }
              int v697 = *v192;
              if ((~v697 & 0xC0) != 0)
              {
                unsigned int v703 = 1;
                goto LABEL_1221;
              }
              unint64_t v698 = utf8_table4[v697 & 0x3F];
              int v697 = (utf8_table3[v698] & v697) << (6 * v698);
              v699 = v192 + 1;
              if (v698 <= 1) {
                uint64_t v700 = 1;
              }
              else {
                uint64_t v700 = v698;
              }
              int v701 = 6 * v698 - 6;
              do
              {
                char v702 = *v699++;
                v697 |= (v702 & 0x3F) << v701;
                v701 -= 6;
                --v700;
              }
              while (v700);
              if (v697 <= 255)
              {
                unsigned int v703 = v698 + 1;
LABEL_1221:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v697) & 4) == 0) {
                  goto LABEL_238;
                }
                v192 += v703;
                v50[1] = (uint64_t)v192;
                if (++v410 == v566) {
                  goto LABEL_238;
                }
                continue;
              }
              goto LABEL_238;
            }
          case 7:
            if (v566 <= v410) {
              goto LABEL_238;
            }
            unint64_t v704 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v704) {
                goto LABEL_238;
              }
              int v705 = *v192;
              if ((~v705 & 0xC0) != 0)
              {
                unsigned int v711 = 1;
              }
              else
              {
                unint64_t v706 = utf8_table4[v705 & 0x3F];
                int v705 = (utf8_table3[v706] & v705) << (6 * v706);
                v707 = v192 + 1;
                if (v706 <= 1) {
                  uint64_t v708 = 1;
                }
                else {
                  uint64_t v708 = v706;
                }
                int v709 = 6 * v706 - 6;
                do
                {
                  char v710 = *v707++;
                  v705 |= (v710 & 0x3F) << v709;
                  v709 -= 6;
                  --v708;
                }
                while (v708);
                unsigned int v711 = v706 + 1;
                if (v705 > 255) {
                  goto LABEL_1237;
                }
              }
              if (*(unsigned char *)(*(void *)(a4 + 40) + v705)) {
                goto LABEL_238;
              }
LABEL_1237:
              v192 += v711;
              v50[1] = (uint64_t)v192;
              if (++v410 == v566) {
                goto LABEL_238;
              }
              continue;
            }
          case 8:
            if (v566 <= v410) {
              goto LABEL_238;
            }
            unint64_t v712 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v712) {
                goto LABEL_238;
              }
              int v713 = *v192;
              if ((~v713 & 0xC0) != 0)
              {
                unsigned int v719 = 1;
                goto LABEL_1251;
              }
              unint64_t v714 = utf8_table4[v713 & 0x3F];
              int v713 = (utf8_table3[v714] & v713) << (6 * v714);
              v715 = v192 + 1;
              if (v714 <= 1) {
                uint64_t v716 = 1;
              }
              else {
                uint64_t v716 = v714;
              }
              int v717 = 6 * v714 - 6;
              do
              {
                char v718 = *v715++;
                v713 |= (v718 & 0x3F) << v717;
                v717 -= 6;
                --v716;
              }
              while (v716);
              if (v713 <= 255)
              {
                unsigned int v719 = v714 + 1;
LABEL_1251:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v713) & 1) == 0) {
                  goto LABEL_238;
                }
                v192 += v719;
                v50[1] = (uint64_t)v192;
                if (++v410 == v566) {
                  goto LABEL_238;
                }
                continue;
              }
              goto LABEL_238;
            }
          case 9:
            if (v566 <= v410) {
              goto LABEL_238;
            }
            unint64_t v720 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v720) {
                goto LABEL_238;
              }
              int v721 = *v192;
              if ((~v721 & 0xC0) != 0)
              {
                unsigned int v727 = 1;
              }
              else
              {
                unint64_t v722 = utf8_table4[v721 & 0x3F];
                int v721 = (utf8_table3[v722] & v721) << (6 * v722);
                v723 = v192 + 1;
                if (v722 <= 1) {
                  uint64_t v724 = 1;
                }
                else {
                  uint64_t v724 = v722;
                }
                int v725 = 6 * v722 - 6;
                do
                {
                  char v726 = *v723++;
                  v721 |= (v726 & 0x3F) << v725;
                  v725 -= 6;
                  --v724;
                }
                while (v724);
                unsigned int v727 = v722 + 1;
                if (v721 > 255) {
                  goto LABEL_1267;
                }
              }
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v721) & 0x10) != 0) {
                goto LABEL_238;
              }
LABEL_1267:
              v192 += v727;
              v50[1] = (uint64_t)v192;
              if (++v410 == v566) {
                goto LABEL_238;
              }
              continue;
            }
          case 10:
            if (v566 <= v410) {
              goto LABEL_238;
            }
            unint64_t v728 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v728) {
                goto LABEL_238;
              }
              int v729 = *v192;
              if ((~v729 & 0xC0) != 0)
              {
                unsigned int v735 = 1;
              }
              else
              {
                unint64_t v730 = utf8_table4[v729 & 0x3F];
                int v729 = (utf8_table3[v730] & v729) << (6 * v730);
                v731 = v192 + 1;
                if (v730 <= 1) {
                  uint64_t v732 = 1;
                }
                else {
                  uint64_t v732 = v730;
                }
                int v733 = 6 * v730 - 6;
                do
                {
                  char v734 = *v731++;
                  v729 |= (v734 & 0x3F) << v733;
                  v733 -= 6;
                  --v732;
                }
                while (v732);
                if (v729 > 255)
                {
LABEL_238:
                  *(void *)&long long v778 = 0;
                  uint64_t v95 = a1;
                  char v96 = 48;
                  goto LABEL_1105;
                }
                unsigned int v735 = v730 + 1;
              }
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v729) & 0x10) == 0) {
                goto LABEL_238;
              }
              v192 += v735;
              v50[1] = (uint64_t)v192;
              if (++v410 == v566) {
                goto LABEL_238;
              }
              continue;
            }
          case 11:
            uint64_t v736 = v50[4];
            if (v566 == 0x7FFFFFFF)
            {
              if ((v736 & 4) != 0)
              {
                uint64_t v740 = v410 ^ 0x7FFFFFFFu;
                if (*(void *)(a4 + 96) - (void)v192 < v740) {
                  LODWORD(v740) = *(_DWORD *)(a4 + 96) - v192;
                }
LABEL_1351:
                v50[1] = (uint64_t)&v192[(int)v740];
              }
              else if (v410 != 0x7FFFFFFF)
              {
                unint64_t v737 = *(void *)(a4 + 96);
                int v738 = v410 - 0x7FFFFFFF;
                do
                {
                  if ((unint64_t)v192 >= v737) {
                    break;
                  }
                  if (*v192 == 10) {
                    break;
                  }
                  v50[1] = (uint64_t)++v192;
                }
                while (!__CFADD__(v738++, 1));
              }
            }
            else
            {
              if ((v736 & 4) != 0)
              {
                if (v566 <= v410) {
                  goto LABEL_238;
                }
                unint64_t v756 = *(void *)(a4 + 96);
                while (1)
                {
                  v757 = v192 + 1;
                  v50[1] = (uint64_t)(v192 + 1);
                  if ((unint64_t)(v192 + 1) < v756)
                  {
                    unint64_t v758 = v756 - 1 - (void)v192;
                    do
                    {
                      if ((*v757 & 0xC0) != 0x80) {
                        goto LABEL_1359;
                      }
                      v50[1] = (uint64_t)++v757;
                      --v758;
                    }
                    while (v758);
                    v757 = (unsigned char *)v756;
                  }
LABEL_1359:
                  ++v410;
                  int v192 = v757;
                  if (v410 == v566) {
                    goto LABEL_238;
                  }
                }
              }
              if (v566 <= v410) {
                goto LABEL_238;
              }
              v754 = *(unsigned char **)(a4 + 96);
              while (v192 < v754 && *v192 != 10)
              {
                v50[1] = (uint64_t)++v192;
                if (v192 < v754)
                {
                  uint64_t v755 = v754 - v192;
                  while ((*v192 & 0xC0) == 0x80)
                  {
                    v50[1] = (uint64_t)++v192;
                    if (!--v755)
                    {
                      int v192 = v754;
                      break;
                    }
                  }
                }
                if (++v410 == v566) {
                  goto LABEL_238;
                }
              }
            }
            goto LABEL_238;
          case 12:
            uint64_t v740 = *(void *)(a4 + 96) - (void)v192;
            if (v740 >= v567) {
              LODWORD(v740) = v567;
            }
            goto LABEL_1351;
          default:
            goto LABEL_1175;
        }
      case 0x3Bu:
      case 0x3Cu:
        __int16 v260 = v212 + 1;
        v50[9] = (uint64_t)(v212 + 1);
        void v50[2] = (uint64_t)(v212 + 33);
        int v261 = v212[33];
        if ((v261 - 51) >= 6)
        {
          if ((v261 - 57) >= 2)
          {
            BOOL v263 = 0;
            v50[29] = 0x100000001;
            signed int v265 = 1;
            int v264 = 1;
            if (*(_DWORD *)(a4 + 60))
            {
LABEL_709:
              unint64_t v470 = *(void *)(a4 + 96);
              uint64_t v471 = (unsigned __int8 *)v50[1];
              int v472 = 1;
              while ((unint64_t)v471 < v470)
              {
                v473 = v471 + 1;
                v50[1] = (uint64_t)(v471 + 1);
                int v474 = *v471;
                if ((~v474 & 0xC0) != 0) {
                  goto LABEL_717;
                }
                int v475 = utf8_table4[v474 & 0x3F];
                int v476 = 6 * v475;
                int v474 = (utf8_table3[utf8_table4[v474 & 0x3F]] & v474) << (6 * v475);
                unsigned int v477 = v475 + 1;
                int v478 = v476 - 6;
                do
                {
                  BOOL v479 = v473++;
                  v50[1] = (uint64_t)v473;
                  v474 |= (*v479 & 0x3F) << v478;
                  --v477;
                  v478 -= 6;
                }
                while (v477 > 1);
                if (v474 < 256)
                {
LABEL_717:
                  if (((v260[v474 / 8] >> (v474 & 7)) & 1) == 0) {
                    goto LABEL_967;
                  }
                }
                else if (v213 == 59)
                {
                  goto LABEL_967;
                }
                uint64_t v471 = v473;
                BOOL v163 = v472++ == v264;
                if (v163) {
                  goto LABEL_720;
                }
              }
            }
            else
            {
LABEL_722:
              uint64_t v481 = 0;
              unint64_t v482 = *(void *)(a4 + 96);
              uint64_t v483 = v50[1];
              while (1)
              {
                uint64_t v484 = (unsigned char *)(v483 + v481);
                if (v483 + v481 >= v482) {
                  break;
                }
                v50[1] = (uint64_t)(v484 + 1);
                if (((v260[(unint64_t)*v484 >> 3] >> (*v484 & 7)) & 1) == 0) {
                  break;
                }
                if (v264 == ++v481) {
                  goto LABEL_726;
                }
              }
            }
            goto LABEL_967;
          }
          BOOL v263 = v261 == 58;
          *((_DWORD *)v50 + 42) = v263;
          int v264 = __rev16(*((unsigned __int16 *)v212 + 17));
          *((_DWORD *)v50 + 59) = v264;
          signed int v265 = __rev16(*((unsigned __int16 *)v212 + 18));
          if (!v265) {
            signed int v265 = 0x7FFFFFFF;
          }
          *((_DWORD *)v50 + 58) = v265;
          void v50[2] = (uint64_t)(v212 + 38);
        }
        else
        {
          void v50[2] = (uint64_t)(v212 + 34);
          uint64_t v262 = v212[33];
          BOOL v263 = (v262 - 51) & 1;
          *((_DWORD *)v50 + 42) = v263;
          int v264 = rep_min_0[v262 - 51];
          *((_DWORD *)v50 + 59) = v264;
          if ((v262 - 57) >= 0xFFFFFFFE) {
            signed int v265 = rep_max_0[v262 - 51];
          }
          else {
            signed int v265 = 0x7FFFFFFF;
          }
          *((_DWORD *)v50 + 58) = v265;
        }
        if (*(_DWORD *)(a4 + 60))
        {
          if (v264 >= 1) {
            goto LABEL_709;
          }
LABEL_720:
          char v480 = 0;
        }
        else
        {
          if (v264 >= 1) {
            goto LABEL_722;
          }
LABEL_726:
          char v480 = 1;
        }
        if (v265 == v264) {
          continue;
        }
        if (v263)
        {
          *((_DWORD *)v50 + 56) = v264;
          if (v480)
          {
LABEL_73:
            *(void *)&long long v778 = 0;
            uint64_t v63 = a1;
            char v64 = 23;
            goto LABEL_1191;
          }
          goto LABEL_323;
        }
        BOOL v69 = (unsigned __int8 *)v50[1];
        v50[11] = (uint64_t)v69;
        if (v480)
        {
          BOOL v339 = __OFSUB__(v265, v264);
          int v660 = v265 - v264;
          if ((v660 < 0) ^ v339 | (v660 == 0)) {
            goto LABEL_1132;
          }
          uint64_t v661 = 0;
          unint64_t v662 = *(void *)(a4 + 96);
          unint64_t v68 = (unint64_t)v69;
          while ((unint64_t)&v69[v661] < v662)
          {
            if (((v260[(unint64_t)v69[v661] >> 3] >> (v69[v661] & 7)) & 1) == 0) {
              goto LABEL_82;
            }
            ++v68;
            v50[1] = (uint64_t)&v69[++v661];
            if (v660 == v661)
            {
              unint64_t v68 = (unint64_t)&v69[v661];
              goto LABEL_82;
            }
          }
          unint64_t v68 = (unint64_t)&v69[v661];
LABEL_82:
          if (v68 >= (unint64_t)v69)
          {
LABEL_1132:
            *(void *)&long long v778 = 0;
            uint64_t v63 = a1;
            char v64 = 25;
            goto LABEL_1191;
          }
          goto LABEL_967;
        }
        if (v265 <= v264)
        {
LABEL_79:
          *(void *)&long long v778 = 0;
          uint64_t v63 = a1;
          char v64 = 24;
          goto LABEL_1191;
        }
        unint64_t v676 = *(void *)(a4 + 96);
        while (1)
        {
          if ((unint64_t)v69 >= v676) {
            goto LABEL_79;
          }
          int v677 = *v69;
          if ((~v677 & 0xC0) != 0) {
            break;
          }
          unint64_t v678 = utf8_table4[v677 & 0x3F];
          int v677 = (utf8_table3[v678] & v677) << (6 * v678);
          v679 = (char *)(v69 + 1);
          if (v678 <= 1) {
            uint64_t v680 = 1;
          }
          else {
            uint64_t v680 = v678;
          }
          int v681 = 6 * v678 - 6;
          do
          {
            char v682 = *v679++;
            v677 |= (v682 & 0x3F) << v681;
            v681 -= 6;
            --v680;
          }
          while (v680);
          unsigned int v683 = v678 + 1;
          if (v677 < 256) {
            goto LABEL_1170;
          }
          if (v213 == 59) {
            goto LABEL_79;
          }
LABEL_1171:
          v69 += v683;
          v50[1] = (uint64_t)v69;
          if (++v264 == v265) {
            goto LABEL_79;
          }
        }
        unsigned int v683 = 1;
LABEL_1170:
        if (((v260[v677 / 8] >> (v677 & 7)) & 1) == 0) {
          goto LABEL_79;
        }
        goto LABEL_1171;
      case 0x3Du:
        v443 = v212 + 3;
        v50[9] = (uint64_t)(v212 + 3);
        uint64_t v444 = &v212[__rev16(*(unsigned __int16 *)(v212 + 1))];
        void v50[2] = (uint64_t)v444;
        int v445 = *v444;
        if ((v445 - 51) >= 6)
        {
          if ((v445 - 57) >= 2)
          {
            BOOL v447 = 0;
            v50[29] = 0x100000001;
            int v448 = 1;
            signed int v449 = 1;
            goto LABEL_799;
          }
          BOOL v447 = v445 == 58;
          *((_DWORD *)v50 + 42) = v447;
          int v448 = __rev16(*(unsigned __int16 *)(v444 + 1));
          *((_DWORD *)v50 + 59) = v448;
          signed int v449 = __rev16(*(unsigned __int16 *)(v444 + 3));
          if (!v449) {
            signed int v449 = 0x7FFFFFFF;
          }
          *((_DWORD *)v50 + 58) = v449;
          void v50[2] = (uint64_t)(v444 + 5);
        }
        else
        {
          void v50[2] = (uint64_t)(v444 + 1);
          uint64_t v446 = *v444;
          BOOL v447 = (v446 - 51) & 1;
          *((_DWORD *)v50 + 42) = v447;
          int v448 = rep_min_0[v446 - 51];
          *((_DWORD *)v50 + 59) = v448;
          signed int v449 = rep_max_0[v446 - 51];
          if ((v446 - 57) < 0xFFFFFFFE) {
            signed int v449 = 0x7FFFFFFF;
          }
          *((_DWORD *)v50 + 58) = v449;
        }
        if (v448 < 1) {
          goto LABEL_810;
        }
LABEL_799:
        signed int v766 = v449;
        v769 = v8;
        unint64_t v516 = *(void *)(a4 + 96);
        unsigned int v517 = (unsigned __int8 *)v50[1];
        int v518 = 1;
        do
        {
          if ((unint64_t)v517 >= v516) {
            goto LABEL_935;
          }
          v519 = v517 + 1;
          v50[1] = (uint64_t)(v517 + 1);
          int v520 = *v517;
          if ((~v520 & 0xC0) != 0)
          {
            ++v517;
          }
          else
          {
            int v521 = utf8_table4[v520 & 0x3F];
            int v522 = 6 * v521;
            int v520 = (utf8_table3[utf8_table4[v520 & 0x3F]] & v520) << (6 * v521);
            unsigned int v523 = v521 + 1;
            int v524 = v522 - 6;
            do
            {
              unsigned int v517 = v519 + 1;
              v50[1] = (uint64_t)(v519 + 1);
              v520 |= (*v519 & 0x3F) << v524;
              --v523;
              v524 -= 6;
              ++v519;
            }
            while (v523 > 1);
          }
          if (!match_xclass(v520, v443))
          {
LABEL_935:
            v782 = (uint64_t *)*v50;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
            unsigned int v573 = v782;
            if (!v782) {
              return 0;
            }
            goto LABEL_936;
          }
          BOOL v163 = v518++ == v448;
        }
        while (!v163);
        uint64_t v8 = v769;
        signed int v449 = v766;
LABEL_810:
        if (v448 == v449) {
          continue;
        }
        if (v447)
        {
          *((_DWORD *)v50 + 56) = v448;
LABEL_259:
          *(void *)&long long v778 = 0;
          uint64_t v63 = a1;
          char v64 = 26;
        }
        else
        {
          v666 = (unsigned __int8 *)v50[1];
          v50[11] = (uint64_t)v666;
          if (v448 < v449)
          {
            uint64_t v763 = a1;
            unint64_t v667 = *(void *)(a4 + 96);
            signed int v668 = v449;
            do
            {
              if ((unint64_t)v666 >= v667) {
                break;
              }
              int v669 = *v666;
              if ((~v669 & 0xC0) != 0)
              {
                unsigned int v675 = 1;
              }
              else
              {
                unint64_t v670 = utf8_table4[v669 & 0x3F];
                int v669 = (utf8_table3[v670] & v669) << (6 * v670);
                v671 = (char *)(v666 + 1);
                uint64_t v672 = v670 <= 1 ? 1 : v670;
                int v673 = 6 * v670 - 6;
                do
                {
                  char v674 = *v671++;
                  v669 |= (v674 & 0x3F) << v673;
                  v673 -= 6;
                  --v672;
                }
                while (v672);
                unsigned int v675 = v670 + 1;
              }
              if (!match_xclass(v669, v443)) {
                break;
              }
              v666 += v675;
              v50[1] = (uint64_t)v666;
              ++v448;
            }
            while (v448 != v668);
            a1 = v763;
          }
LABEL_91:
          *(void *)&long long v778 = 0;
          uint64_t v63 = a1;
          char v64 = 27;
        }
LABEL_1191:
        int v209 = pcre_getMem(v63, v64, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        unsigned int v210 = v782;
        if ((void)v778)
        {
LABEL_1192:
          if ((v209 & 0x80000000) == 0) {
            goto LABEL_1193;
          }
        }
LABEL_1198:
        v584 = (uint64_t *)*v210;
LABEL_1199:
        v782 = v584;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
        uint64_t v174 = v782;
        if (!v782) {
          return 4294967290;
        }
        uint64_t v11 = 4294967290;
LABEL_1201:
        *((_DWORD *)v174 + 102) = v11;
LABEL_1202:
        *int v13 = v174;
LABEL_1203:
        int v12 = v783;
        goto LABEL_2;
      case 0x3Eu:
        uint64_t v450 = (v212[1] << 9) | (2 * v212[2]);
        *((_DWORD *)v50 + 61) = v450;
        void v50[2] = (uint64_t)(v212 + 3);
        if ((int)v450 >= *((_DWORD *)v50 + 6)
          || (uint64_t v451 = *(void *)(a4 + 16), v452 = *(_DWORD *)(v451 + 4 * v450), v452 < 0))
        {
          a3 = *(void *)(a4 + 96) - v50[1] + 1;
        }
        else
        {
          a3 = (*(_DWORD *)(v451 + 4 * (v450 | 1)) - v452);
        }
        *((_DWORD *)v50 + 57) = a3;
        int v466 = v212[3];
        if ((v466 - 51) >= 6)
        {
          if ((v466 - 57) >= 2)
          {
            uint64_t v541 = (unsigned __int8 *)v50[1];
            int v542 = a3;
            if (!match_ref_0(v450, v541, a3, (void *)a4, v50[4])) {
              goto LABEL_967;
            }
            v50[1] = (uint64_t)&v541[v542];
            continue;
          }
          BOOL v761 = v466 == 58;
          *((_DWORD *)v50 + 42) = v761;
          int v468 = __rev16(*((unsigned __int16 *)v212 + 2));
          *((_DWORD *)v50 + 59) = v468;
          unsigned int v525 = __rev16(*((unsigned __int16 *)v212 + 3));
          if (v525) {
            int v469 = v525;
          }
          else {
            int v469 = 0x7FFFFFFF;
          }
          *((_DWORD *)v50 + 58) = v469;
          void v50[2] = (uint64_t)(v212 + 8);
          if (!a3) {
            continue;
          }
        }
        else
        {
          void v50[2] = (uint64_t)(v212 + 4);
          uint64_t v467 = v212[3];
          BOOL v761 = (v467 - 51) & 1;
          *((_DWORD *)v50 + 42) = v761;
          int v468 = rep_min_0[v467 - 51];
          *((_DWORD *)v50 + 59) = v468;
          int v469 = rep_max_0[v467 - 51];
          if ((v467 - 57) < 0xFFFFFFFE) {
            int v469 = 0x7FFFFFFF;
          }
          *((_DWORD *)v50 + 58) = v469;
          if (!a3) {
            continue;
          }
        }
        int v762 = v469;
        v764 = v13;
        int v44 = v8;
        int v767 = v468;
        if (v468 >= 1)
        {
          uint64_t v526 = v50[4];
          uint64_t v527 = (int)a3;
          int v528 = (unsigned __int8 *)v50[1];
          int v529 = v468;
          do
          {
            uint64_t v530 = v450;
            uint64_t v531 = a3;
            if (!match_ref_0(v450, v528, a3, (void *)a4, v526))
            {
              v782 = (uint64_t *)*v50;
              pcre_freeMem(a1, &v783, v532, a4, a5, a6, a7, a8, v760);
              uint64_t v174 = v782;
              if (!v782) {
                return 0;
              }
              uint64_t v8 = v44;
              uint64_t v11 = 0;
              *((_DWORD *)v782 + 102) = 0;
              int v13 = v764;
              goto LABEL_1202;
            }
            v528 += v527;
            v50[1] = (uint64_t)v528;
            --v529;
            uint64_t v450 = v530;
            a3 = v531;
          }
          while (v529);
        }
        uint64_t v8 = v44;
        int v13 = v764;
        if (v762 != v767)
        {
          if (!v761)
          {
            int v52 = (unsigned __int8 *)v50[1];
            v50[11] = (uint64_t)v52;
            int v689 = v762 - v767;
            if (v762 <= v767)
            {
              uint64_t v8 = v44;
            }
            else
            {
              uint64_t v690 = v50[4];
              size_t v768 = (int)a3;
              __int16 v51 = v52;
              do
              {
                uint64_t v691 = v450;
                uint64_t v692 = a3;
                if (!match_ref_0(v450, v51, a3, (void *)a4, v690)) {
                  break;
                }
                v51 += v768;
                v50[1] = (uint64_t)v51;
                --v689;
                uint64_t v450 = v691;
                a3 = v692;
              }
              while (v689);
              uint64_t v8 = v44;
              int v13 = v764;
LABEL_57:
              if (v51 < v52) {
                goto LABEL_967;
              }
            }
            *(void *)&long long v778 = 0;
            uint64_t v63 = a1;
            char v64 = 21;
            goto LABEL_1191;
          }
          *((_DWORD *)v50 + 56) = v767;
LABEL_54:
          *(void *)&long long v778 = 0;
          uint64_t v48 = a1;
          char v49 = 20;
LABEL_327:
          int v209 = pcre_getMem(v48, v49, &v778, a4, a5, a6, a7, a8);
          uint64_t v22 = (uint64_t *)v778;
          unsigned int v210 = v782;
          uint64_t v8 = v44;
          if ((void)v778) {
            goto LABEL_1192;
          }
          goto LABEL_1198;
        }
        continue;
      case 0x3Fu:
        v599 = (unsigned __int8 *)(*(void *)(a4 + 80) + __rev16(*(unsigned __int16 *)(v212 + 1)));
        v50[7] = (uint64_t)v599;
        unsigned int v600 = *v599;
        *((_DWORD *)v50 + 30) = v600 - 80;
        if (v600 >= 0xB5) {
          *((_DWORD *)v50 + 30) = __rev16(*((unsigned __int16 *)v599 + 2));
        }
        v50[14] = *(void *)(a4 + 136);
        *(void *)(a4 + 136) = v50 + 14;
        void v50[2] = (uint64_t)(v212 + 3);
        v50[16] = (uint64_t)(v212 + 3);
        uint64_t v601 = *(unsigned int *)(a4 + 24);
        *((_DWORD *)v50 + 38) = v601;
        if ((int)v601 > 30)
        {
          uint64_t v602 = (void *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 4 * v601);
          long long v644 = (uint64_t **)v782;
          v782[18] = (uint64_t)v602;
          if (!v602)
          {
            v782 = *v644;
            pcre_freeMem(a1, &v783, v638, v639, v640, v641, v642, v643, v760);
            uint64_t v174 = v782;
            uint64_t v11 = 4294967290;
            if (!v782) {
              return v11;
            }
            goto LABEL_1201;
          }
          uint64_t v601 = *((unsigned int *)v644 + 38);
        }
        else
        {
          uint64_t v602 = (char *)v50 + 268;
          v50[18] = (uint64_t)v50 + 268;
        }
        memcpy(v602, *(const void **)(a4 + 16), 4 * v601);
        v645 = v782;
        v782[17] = *(void *)(a4 + 104);
        *(void *)(a4 + 104) = v645[1];
        goto LABEL_287;
      case 0x40u:
        if (!v8) {
          goto LABEL_680;
        }
        long long v780 = 0u;
        long long v781 = 0u;
        long long v778 = 0u;
        long long v779 = 0u;
        LODWORD(v778) = 1;
        uint64_t v453 = v50[2];
        DWORD1(v778) = *(unsigned __int8 *)(v453 + 1);
        unint64_t v454 = *(void *)(a4 + 88);
        *((void *)&v778 + 1) = *(void *)(a4 + 16);
        *(void *)&long long v779 = v454;
        *((int32x2_t *)&v779 + 1) = vmovn_s64(vsubq_s64(*(int64x2_t *)(a4 + 96), vdupq_n_s64(v454)));
        LODWORD(v780) = *((_DWORD *)v50 + 2) - v454;
        DWORD2(v781) = __rev16(*(unsigned __int16 *)(v453 + 2));
        HIDWORD(v781) = __rev16(*(unsigned __int16 *)(v453 + 4));
        int v455 = *(_DWORD *)(a4 + 124);
        DWORD1(v780) = *((_DWORD *)v50 + 6) / 2;
        DWORD2(v780) = v455;
        *(void *)&long long v781 = *(void *)(a4 + 144);
        uint64_t v456 = v8(&v778);
        if ((int)v456 >= 1)
        {
          v782 = (uint64_t *)*v782;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
          uint64_t v11 = 0;
LABEL_242:
          uint64_t v174 = v782;
          if (!v782) {
            return v11;
          }
          goto LABEL_1201;
        }
        uint64_t v11 = v456;
        if ((v456 & 0x80000000) != 0) {
          goto LABEL_48;
        }
        int v50 = v782;
        uint64_t v212 = (unsigned __int8 *)v782[2];
LABEL_680:
        void v50[2] = (uint64_t)(v212 + 6);
        continue;
      case 0x41u:
        do
        {
          v212 += __rev16(*(unsigned __int16 *)(v212 + 1));
          void v50[2] = (uint64_t)v212;
        }
        while (*v212 == 65);
        continue;
      case 0x42u:
      case 0x43u:
      case 0x44u:
        unint64_t v229 = &v212[-__rev16(*(unsigned __int16 *)(v212 + 1))];
        v50[12] = (uint64_t)v229;
        size_t v230 = (uint64_t *)v50[5];
        uint64_t v231 = v230[1];
        v50[13] = v231;
        v50[5] = *v230;
        unsigned int v232 = *v229;
        if (v232 == 75) {
          goto LABEL_778;
        }
        if (v232 - 69 < 4 || v232 == 74)
        {
          uint64_t v574 = v50[1];
          goto LABEL_938;
        }
        int v233 = v232 - 80;
        *((_DWORD *)v50 + 60) = v232 - 80;
        if (v232 >= 0xB5)
        {
          int v233 = __rev16(*((unsigned __int16 *)v229 + 2));
          *((_DWORD *)v50 + 60) = v233;
        }
        int v234 = 2 * v233;
        *((_DWORD *)v50 + 61) = 2 * v233;
        if (v233 < 1) {
          goto LABEL_778;
        }
        *(_DWORD *)(a4 + 124) = v233;
        if (v234 >= *(_DWORD *)(a4 + 28))
        {
          *(_DWORD *)(a4 + 48) = 1;
        }
        else
        {
          uint64_t v235 = *(void *)(a4 + 16);
          *(_DWORD *)(v235 + 4 * v234) = *(_DWORD *)(v235 + 4 * (*(_DWORD *)(a4 + 24) - v233));
          *(_DWORD *)(v235 + 4 * *((int *)v50 + 61) + 4) = *((_DWORD *)v50 + 2) - *(_DWORD *)(a4 + 88);
          int v236 = *((_DWORD *)v50 + 61);
          if (*((_DWORD *)v50 + 6) <= v236) {
            *((_DWORD *)v50 + 6) = v236 + 2;
          }
        }
        uint64_t v505 = *(void *)(a4 + 136);
        if (v505 && *(_DWORD *)(v505 + 8) == *((_DWORD *)v50 + 60))
        {
          *(void *)(a4 + 136) = *(void *)v505;
          *(void *)(a4 + 104) = *(void *)(v505 + 24);
          memcpy(*(void **)(a4 + 16), *(const void **)(v505 + 32), 4 * *(unsigned int *)(v505 + 40));
          unsigned int v506 = v782;
          v782[2] = *(void *)(v505 + 16);
          v506[4] = v506[22];
        }
        else
        {
LABEL_778:
          v50[4] = v50[22];
          int v507 = *v212;
          if (v507 != 66 && v50[1] != v231)
          {
            if (v507 == 68)
            {
              *(void *)&long long v778 = 0;
              int v583 = pcre_getMem(a1, 16, &v778, a4, a5, a6, a7, a8);
              uint64_t v22 = (uint64_t *)v778;
              BOOL v178 = v782;
              if ((void)v778 && (v583 & 0x80000000) == 0) {
                goto LABEL_251;
              }
              goto LABEL_977;
            }
            *(void *)&long long v778 = 0;
            int v637 = pcre_getMem(a1, 18, &v778, a4, a5, a6, a7, a8);
            uint64_t v22 = (uint64_t *)v778;
            int v23 = v782;
            if ((void)v778 && (v637 & 0x80000000) == 0) {
              goto LABEL_46;
            }
            goto LABEL_1142;
          }
LABEL_793:
          void v50[2] = (uint64_t)(v212 + 3);
        }
        continue;
      case 0x45u:
      case 0x47u:
        goto LABEL_276;
      case 0x46u:
      case 0x48u:
        goto LABEL_282;
      case 0x49u:
        uint64_t v457 = v212[1];
        uint64_t v458 = v212[2];
        if (*(_DWORD *)(a4 + 60))
        {
          int v459 = v458 | (v457 << 8);
          if (v459)
          {
            int v460 = 0;
            unint64_t v461 = *(void *)(a4 + 88);
            uint64_t v462 = (unsigned char *)v50[1];
            while (1)
            {
              uint64_t v463 = v462 - 1;
              v50[1] = (uint64_t)(v462 - 1);
              if ((unint64_t)(v462 - 1) < v461) {
                goto LABEL_967;
              }
              if ((*v463 & 0xC0) == 0x80)
              {
                unsigned __int16 v464 = v462 - 2;
                do
                {
                  v50[1] = (uint64_t)v464;
                  char v465 = *v464--;
                }
                while ((v465 & 0xC0) == 0x80);
                uint64_t v463 = v464 + 1;
              }
              ++v460;
              uint64_t v462 = v463;
              if (v460 == v459) {
                goto LABEL_793;
              }
            }
          }
        }
        else
        {
          unint64_t v515 = v50[1] - (v458 | (v457 << 8));
          v50[1] = v515;
          if (v515 < *(void *)(a4 + 88)) {
            goto LABEL_967;
          }
        }
        goto LABEL_793;
      case 0x4Au:
        uint64_t v603 = v50[1];
        v50[12] = (uint64_t)v212;
        v50[13] = v603;
        goto LABEL_293;
      case 0x4Bu:
        if (v212[3] != 76)
        {
          *(void *)&long long v778 = 0;
          int v646 = pcre_getMem(a1, 4, &v778, a4, a5, a6, a7, a8);
          uint64_t v22 = (uint64_t *)v778;
          int v23 = v782;
          if (!(void)v778 || v646 < 0) {
            goto LABEL_1142;
          }
          uint64_t v175 = 0;
          char v24 = 0;
          uint64_t v25 = v782[1];
          *(void *)(v778 + 8) = v25;
          v22[2] = v23[2] + 3;
          *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
          uint64_t v176 = v23[4];
          *((_DWORD *)v22 + 12) = 3;
          *uint64_t v22 = (uint64_t)v23;
          v22[4] = v176;
          v22[5] = 0;
          goto LABEL_1026;
        }
        int v604 = (v212[4] << 9) | (2 * v212[5]);
        *((_DWORD *)v50 + 61) = v604;
        if (v604 == 131070)
        {
          BOOL v605 = *(void *)(a4 + 136) != 0;
        }
        else
        {
          BOOL v605 = 0;
          if (v604 < *((_DWORD *)v50 + 6)) {
            BOOL v605 = *(_DWORD *)(*(void *)(a4 + 16) + 4 * v604) >= 0;
          }
        }
        *((_DWORD *)v50 + 41) = v605;
        *(void *)&long long v778 = 0;
        int v663 = pcre_getMem(a1, 3, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || v663 < 0) {
          goto LABEL_1142;
        }
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        uint64_t v664 = v23[2];
        uint64_t v665 = 6;
        if (!*((_DWORD *)v23 + 41)) {
          uint64_t v665 = __rev16(*(unsigned __int16 *)(v664 + 1)) + 3;
        }
        char v24 = 0;
        v22[2] = v664 + v665;
        *((_DWORD *)v22 + 6) = *((_DWORD *)v23 + 6);
        uint64_t v176 = v23[4];
        v22[4] = v176;
        uint64_t v175 = v23[5];
        v22[5] = v175;
        *((_DWORD *)v22 + 12) = 2;
        goto LABEL_1025;
      case 0x4Cu:
      case 0x4Fu:
        goto LABEL_793;
      case 0x4Du:
        v50[10] = (uint64_t)(v212 + 1);
        *(void *)&long long v778 = 0;
        int v606 = pcre_getMem(a1, 14, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || v606 < 0) {
          goto LABEL_1142;
        }
        char v24 = 0;
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        uint64_t v41 = v23[10];
        goto LABEL_1024;
      case 0x4Eu:
        uint64_t v607 = v212 + 1;
        v50[10] = (uint64_t)(v212 + 1);
        do
        {
          v607 += __rev16(*(unsigned __int16 *)(v607 + 1));
          v50[10] = (uint64_t)v607;
        }
        while (*v607 == 65);
        *(void *)&long long v778 = 0;
        int v608 = pcre_getMem(a1, 15, &v778, a4, a5, a6, a7, a8);
        uint64_t v22 = (uint64_t *)v778;
        int v23 = v782;
        if (!(void)v778 || v608 < 0) {
          goto LABEL_1142;
        }
        char v24 = 0;
        uint64_t v25 = v782[1];
        *(void *)(v778 + 8) = v25;
        uint64_t v194 = v23[10];
        goto LABEL_274;
      case 0x50u:
        goto LABEL_10;
      default:
        v782 = (uint64_t *)*v50;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v760);
        uint64_t v174 = v782;
        uint64_t v11 = 4294967291;
        if (!v782) {
          return v11;
        }
        goto LABEL_1201;
    }
  }
}

uint64_t nuance_pcre_ObjOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v16 = 0;
  if (!a3) {
    return 2320506887;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: Begin", v4, v5, v6, v14);
    uint64_t v8 = (void *)heap_Calloc(*(void **)(v16 + 8), 1, 32);
    if (v8)
    {
      *uint64_t v8 = v16;
      *(void *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 56663;
    }
    else
    {
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"PCRE", 1000, 0, v9, v10, v11, v12, v15);
      uint64_t inited = 2320506890;
    }
    log_OutText(*(void *)(v16 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: End (%x)", v10, v11, v12, inited);
  }
  return inited;
}

uint64_t nuance_pcre_Init(void *a1, int a2, unsigned int a3, __int16 a4)
{
  uint64_t v11 = safeh_HandleCheck((uint64_t)a1, a2, 56663, 32);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = *a1;
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE Init: Begin", v8, v9, v10, v26);
    *((_WORD *)a1 + 10) = 416;
    *((_WORD *)a1 + 8) = 0;
    *((_WORD *)a1 + 11) = a3;
    *((_DWORD *)a1 + 6) = 0;
    *((_WORD *)a1 + 14) = 0;
    *((_WORD *)a1 + 9) = a4;
    uint64_t v13 = heap_Calloc(*(void **)(v12 + 8), 1, 8 * a3 + 8);
    a1[1] = v13;
    if (!v13) {
      goto LABEL_7;
    }
    uint64_t v18 = heap_Calloc(*(void **)(v12 + 8), 1, 32);
    uint64_t v19 = *((unsigned __int16 *)a1 + 8);
    *(void *)(a1[1] + 8 * v19) = v18;
    uint64_t v20 = *(void *)(a1[1] + 8 * v19);
    if (!v20) {
      goto LABEL_7;
    }
    uint64_t v21 = *((unsigned __int16 *)a1 + 9) * *((unsigned __int16 *)a1 + 10) + 1;
    *(void *)(v20 + 8) = v21;
    *(void *)uint64_t v20 = 0;
    uint64_t v22 = heap_Calloc(*(void **)(v12 + 8), 1, v21);
    *(void *)uint64_t v20 = v22;
    if (!v22) {
      goto LABEL_7;
    }
    *(unsigned char *)(v20 + 24) = 0;
    *(void *)(v20 + 16) = 0;
    uint64_t v23 = heap_Calloc(*(void **)(v12 + 8), 1, *((unsigned __int16 *)a1 + 9) + 1);
    *(void *)(v20 + 16) = v23;
    if (v23)
    {
      __int16 v24 = *((_WORD *)a1 + 8) + 1;
      *((_WORD *)a1 + 8) = v24;
      *((_WORD *)a1 + 13) = v24;
    }
    else
    {
LABEL_7:
      log_OutPublic(*(void *)(v12 + 32), (uint64_t)"PCRE", 1000, 0, v14, v15, v16, v17, v27);
      nuance_pcre_DeInit(a1, a2);
      uint64_t v11 = 2320506890;
    }
    log_OutText(*(void *)(v12 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: End (%x)", v15, v16, v17, v11);
  }
  return v11;
}

uint64_t nuance_pcre_DeInit(void *a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck((uint64_t)a1, a2, 56663, 32);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE DeInit : Begin", v3, v4, v5, v16);
    pcre_clearMem(a1);
    uint64_t v10 = (uint64_t **)a1[1];
    if (v10)
    {
      if (*v10)
      {
        heap_Free(*(void **)(*a1 + 8), **v10);
        uint64_t v12 = *a1;
        uint64_t v11 = a1[1];
        **(void **)uint64_t v11 = 0;
        heap_Free(*(void **)(v12 + 8), *(void *)(*(void *)v11 + 16));
        uint64_t v14 = *a1;
        uint64_t v13 = (uint64_t *)a1[1];
        *(void *)(*v13 + 16) = 0;
        heap_Free(*(void **)(v14 + 8), *v13);
        *(void *)a1[1] = 0;
        uint64_t v10 = (uint64_t **)a1[1];
      }
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v10);
      a1[1] = 0;
    }
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE DeInit : End (%x)", v7, v8, v9, v6);
    return 0;
  }
  return v6;
}

uint64_t nuance_pcre_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 56663, 32);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)a1;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjClose : End (%x)", v8, v9, v10, v6);
    return 0;
  }
  return v6;
}

uint64_t nuance_pcre_ErrorToLhError(unsigned int a1)
{
  if (a1 < 0xFFFFFFF0) {
    return 2320514663;
  }
  else {
    return *((unsigned int *)&unk_20D680904 + (int)(a1 + 16));
  }
}

uint64_t ucp_findchar(int a1, int *a2, unsigned int *a3)
{
  if (a1 == 12063)
  {
    *a2 = 26;
    return 5;
  }
  else
  {
    LOWORD(v4) = -26112;
    int v5 = 12063;
    uint64_t v6 = (unsigned __int16 *)&ucp_table;
    do
    {
      uint64_t v7 = v6;
      if (v5 <= a1)
      {
        unsigned int v9 = v6[2];
        if (v9 < 0x1000) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v8 = 1 << ((v9 >> 12) - 1);
      }
      else
      {
        if ((v4 & 0x8000) == 0) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v8 = 1;
      }
      v6 += 3 * v8;
      unsigned int v4 = *v6;
      int v5 = v6[1] | (*v6 << 16);
    }
    while (v5 != a1);
    int v10 = (v4 >> 8) & 0x3F;
    *a2 = v10;
    uint64_t v3 = 0;
    switch(v10)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return v3;
      case 5:
      case 9:
        unsigned __int16 v12 = v7[3 * v8 + 2];
        if ((v12 & 0x100) != 0) {
          unsigned int v13 = v12 & 0xFFF | 0xFFFFF000;
        }
        else {
          unsigned int v13 = v12 & 0xFFF;
        }
        if (v13) {
          unsigned int v14 = v13 + a1;
        }
        else {
          unsigned int v14 = 0;
        }
        *a3 = v14;
        goto LABEL_26;
      case 6:
      case 7:
      case 8:
        *a3 = 0;
LABEL_26:
        uint64_t v3 = 1;
        break;
      case 10:
      case 11:
      case 12:
        uint64_t v3 = 2;
        break;
      case 13:
      case 14:
      case 15:
        uint64_t v3 = 3;
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
        uint64_t v3 = 4;
        break;
      case 23:
      case 24:
      case 25:
      case 26:
        return 5;
      case 27:
      case 28:
      case 29:
        uint64_t v3 = 6;
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t find_fixedlength(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  unsigned int v4 = (unsigned __int8 *)(a1 + 3);
  uint64_t v5 = 0xFFFFFFFFLL;
  while (2)
  {
    uint64_t v6 = v4;
    unsigned int v7 = *v4;
    if (v7 >= 0x50) {
      int v8 = 80;
    }
    else {
      int v8 = v7;
    }
    uint64_t result = 4294967294;
    switch(v8)
    {
      case 0:
      case 65:
      case 66:
      case 67:
      case 68:
        if ((v5 & 0x80000000) != 0)
        {
          uint64_t v5 = v3;
        }
        else if (v5 != v3)
        {
          return 0xFFFFFFFFLL;
        }
        if (v7 == 65)
        {
          uint64_t v3 = 0;
          unsigned int v4 = v6 + 3;
          continue;
        }
        return v5;
      case 1:
      case 2:
      case 3:
      case 4:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 64:
      case 73:
      case 76:
      case 79:
        goto LABEL_10;
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        goto LABEL_15;
      case 12:
        return result;
      case 13:
      case 14:
        ++v6;
LABEL_15:
        uint64_t v3 = (v3 + 1);
        unsigned int v4 = v6 + 1;
        continue;
      case 21:
      case 22:
        uint64_t v3 = (v3 + 1);
        unsigned int v4 = v6 + 2;
        if ((a2 & 0x800) != 0)
        {
          unsigned int v4 = v6 + 1;
          do
            char v10 = *++v4;
          while ((v10 & 0xC0) == 0x80);
        }
        continue;
      case 32:
        uint64_t v3 = v3 + (bswap32(*(unsigned __int16 *)(v6 + 1)) >> 16);
        unsigned int v4 = v6 + 4;
        if ((a2 & 0x800) != 0)
        {
          unsigned int v4 = v6 + 3;
          do
            int v11 = (char)*++v4;
          while (v11 < 0);
        }
        continue;
      case 50:
        uint64_t v3 = v3 + (bswap32(*(unsigned __int16 *)(v6 + 1)) >> 16);
        unsigned int v4 = v6 + 4;
        continue;
      case 59:
      case 60:
        goto LABEL_29;
      case 61:
        uint64_t v6 = &v6[__rev16(*(unsigned __int16 *)(v6 + 1)) - 33];
LABEL_29:
        unsigned int v4 = v6 + 33;
        unsigned int v12 = v6[33];
        if (v12 > 0x3A) {
          goto LABEL_34;
        }
        if (((1 << v12) & 0x600000000000000) != 0)
        {
          unsigned int v13 = __rev16(*((unsigned __int16 *)v6 + 17));
          if (v13 != bswap32(*((unsigned __int16 *)v6 + 18)) >> 16) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v3 = v13 + v3;
          unsigned int v4 = v6 + 38;
        }
        else
        {
          if (((1 << v12) & 0x198000000000000) != 0) {
            return 0xFFFFFFFFLL;
          }
LABEL_34:
          uint64_t v3 = (v3 + 1);
        }
        continue;
      case 69:
      case 70:
      case 71:
      case 72:
        do
        {
          v6 += __rev16(*(unsigned __int16 *)(v6 + 1));
          unsigned int v7 = *v6;
        }
        while (v7 == 65);
LABEL_10:
        unsigned int v4 = &v6[OP_lengths[v7]];
        continue;
      case 74:
      case 75:
      case 80:
        uint64_t result = find_fixedlength(v6, a2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        do
          v6 += __rev16(*(unsigned __int16 *)(v6 + 1));
        while (*v6 == 65);
        uint64_t v3 = (result + v3);
        unsigned int v4 = v6 + 3;
        continue;
      default:
        return 0xFFFFFFFFLL;
    }
  }
}

unsigned __int8 *adjust_recurse(unsigned __int8 *result, int a2, int a3, uint64_t a4)
{
  unsigned int v4 = result;
  while (1)
  {
    while (1)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *v4;
      if (v6 != 63) {
        break;
      }
      uint64_t v9 = __rev16(*(unsigned __int16 *)(v4 + 1));
      if (*(void *)(a4 + 32) + v9 >= (unint64_t)result) {
        *(_WORD *)(v5 + 1) = bswap32(v9 + a2) >> 16;
      }
LABEL_12:
      unsigned int v4 = v5 + 3;
    }
    if (!*v4) {
      return result;
    }
    if (v6 >= 0x51) {
      goto LABEL_12;
    }
    uint64_t v7 = OP_lengths[v6];
    v4 += v7;
    if (a3)
    {
      if ((v6 - 24) < 9 || (v6 - 21) < 2)
      {
        unsigned int v4 = &v5[v7 - 1];
        do
          char v8 = *++v4;
        while ((v8 & 0xC0) == 0x80);
      }
      else if (v6 == 61)
      {
        v4 += __rev16(*(unsigned __int16 *)(v4 + 1)) + 1;
      }
    }
  }
}

uint64_t could_be_empty_branch(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = 1;
  significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 1);
  if ((unint64_t)significant_code_0 < a2)
  {
    while (1)
    {
      unsigned int v7 = *significant_code_0;
      if (v7 < 0x50)
      {
        uint64_t v5 = 0;
        uint64_t v12 = 33;
        switch(*significant_code_0)
        {
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x1Au:
          case 0x1Bu:
          case 0x20u:
          case 0x23u:
          case 0x24u:
          case 0x29u:
          case 0x2Cu:
          case 0x2Du:
          case 0x32u:
            return v5;
          case 0x18u:
          case 0x19u:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
            if (a3)
            {
              --significant_code_0;
              do
              {
                int v13 = significant_code_0[3] & 0xC0;
                ++significant_code_0;
              }
              while (v13 == 128);
            }
            goto LABEL_17;
          case 0x3Bu:
          case 0x3Cu:
            goto LABEL_20;
          case 0x3Du:
            uint64_t v12 = __rev16(*(unsigned __int16 *)(significant_code_0 + 1));
LABEL_20:
            uint64_t v5 = 0;
            unsigned int v14 = &significant_code_0[v12];
            unsigned int v15 = *v14;
            if (v15 > 0x3A) {
              return v5;
            }
            if (((1 << v15) & 0x198000000000000) != 0) {
              goto LABEL_17;
            }
            if (((1 << v15) & 0x600000000000000) == 0) {
              return v5;
            }
            if (__rev16(*(unsigned __int16 *)(v14 + 1))) {
              return 0;
            }
            goto LABEL_17;
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
            return 1;
          default:
            goto LABEL_17;
        }
      }
      if (!__rev16(*(unsigned __int16 *)(significant_code_0 + 1))) {
        return 1;
      }
      BOOL v8 = 1;
      do
      {
        while (1)
        {
          uint64_t v9 = significant_code_0;
          if (v8) {
            break;
          }
          BOOL v8 = 0;
          uint64_t v11 = __rev16(*(unsigned __int16 *)(significant_code_0 + 1));
          significant_code_0 += v11;
          if (v9[v11] != 65) {
            goto LABEL_16;
          }
        }
        int v10 = could_be_empty_branch(significant_code_0, a2, a3);
        BOOL v8 = v10 == 0;
        uint64_t v11 = __rev16(*(unsigned __int16 *)(v9 + 1));
        significant_code_0 = &v9[v11];
      }
      while (v9[v11] == 65);
      if (!v10) {
        return 0;
      }
LABEL_16:
      significant_code_0 = &v9[v11 + 3];
      unsigned int v7 = *significant_code_0;
LABEL_17:
      uint64_t v5 = 1;
      significant_code_0 = first_significant_code_0(&significant_code_0[OP_lengths[v7]], 0, 0, 1);
      if ((unint64_t)significant_code_0 >= a2) {
        return v5;
      }
    }
  }
  return v5;
}

unsigned __int8 *first_significant_code_0(unsigned __int8 *result, _DWORD *a2, int a3, int a4)
{
  while (1)
  {
    uint64_t v4 = *result;
    char v5 = v4 - 18;
    if ((v4 - 18) > 0x3D) {
      break;
    }
    if (((1 << v5) & 0x70000000000000) != 0)
    {
      if (!a4) {
        return result;
      }
      do
      {
        result += __rev16(*(unsigned __int16 *)(result + 1));
        uint64_t v4 = *result;
      }
      while (v4 == 65);
LABEL_16:
      result += OP_lengths[v4];
    }
    else
    {
      if (((1 << v5) & 0x2400400000000000) != 0) {
        goto LABEL_16;
      }
      if (v4 != 18) {
        break;
      }
      if (a3 >= 1)
      {
        int v6 = result[1];
        if (((*a2 ^ v6) & a3) != 0) {
          *a2 = v6;
        }
      }
      result += 2;
    }
  }
  if ((v4 - 3) < 2 && a4 != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t pcre_getMem(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a3 = 0;
  unsigned int v9 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
  {
    uint64_t v18 = 2320506880;
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v20 = 1001;
    uint64_t v21 = 0;
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v14 = *(void *)(v12 + 8 * v13);
  if (*(_DWORD *)(v14 + 12) + *(unsigned __int16 *)(a1 + 20) >= *(_DWORD *)(v14 + 8))
  {
    if (v9 < *(unsigned __int16 *)(a1 + 22))
    {
      if ((int)v13 + 1 < v9) {
        goto LABEL_13;
      }
      uint64_t v22 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 32);
      uint64_t v27 = *(unsigned __int16 *)(a1 + 16);
      *(void *)(*(void *)(a1 + 8) + 8 * v27) = v22;
      uint64_t v28 = *(void *)(*(void *)(a1 + 8) + 8 * v27);
      if (v28)
      {
        uint64_t v29 = *(unsigned __int16 *)(a1 + 18) * *(unsigned __int16 *)(a1 + 20) + 1;
        *(void *)(v28 + 8) = v29;
        *(void *)uint64_t v28 = 0;
        *(void *)(v28 + 16) = 0;
        uint64_t v30 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v29);
        *(void *)uint64_t v28 = v30;
        if (v30)
        {
          *(unsigned char *)(v28 + 24) = 0;
          uint64_t v32 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, *(unsigned __int16 *)(a1 + 18) + 1);
          *(void *)(v28 + 16) = v32;
          if (v32)
          {
            ++*(_WORD *)(a1 + 16);
            LOWORD(v13) = *(_WORD *)(a1 + 24);
            uint64_t v12 = *(void *)(a1 + 8);
LABEL_13:
            unsigned __int16 v33 = v13 + 1;
            *(_WORD *)(a1 + 24) = v33;
            uint64_t v14 = *(void *)(v12 + 8 * v33);
            if (*(unsigned __int16 *)(a1 + 26) < v33) {
              *(_WORD *)(a1 + 26) = v33;
            }
            goto LABEL_3;
          }
        }
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PCRE", 1000, 0, v31, a6, a7, a8, v36);
        if (*(void *)v28)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), *(void *)v28);
          *(void *)uint64_t v28 = 0;
        }
        uint64_t v35 = *(void *)(v28 + 16);
        if (v35)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v35);
          *(void *)(v28 + 16) = 0;
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v28);
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PCRE", 1000, 0, v23, v24, v25, v26, v36);
      }
      return 2320506890;
    }
    uint64_t v18 = 2320506880;
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    char v36 = "maxBlocks";
    uint64_t v21 = "%s%hu%s%hu";
    uint64_t v20 = 1002;
LABEL_16:
    log_OutPublic(v19, (uint64_t)"PCRE", v20, v21, a5, a6, a7, a8, v36);
    return v18;
  }
LABEL_3:
  uint64_t v15 = *(unsigned int *)(v14 + 12);
  *(_DWORD *)(v14 + 12) = v15 + *(unsigned __int16 *)(a1 + 20);
  *(unsigned char *)(*(void *)(v14 + 16) + *(unsigned __int8 *)(v14 + 24)) = a2;
  unsigned __int8 v16 = *(unsigned char *)(v14 + 24) + 1;
  *(unsigned char *)(v14 + 24) = v16;
  unsigned int v17 = *(unsigned __int16 *)(a1 + 28);
  if (v17 < v16)
  {
    unsigned int v17 = v16;
    *(_WORD *)(a1 + 28) = v16;
  }
  *a3 = *(void *)v14 + v15;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"Memory now in use: %d of %d", a6, a7, a8, *(_DWORD *)(v14 + 12) + *(unsigned __int16 *)(a1 + 20) * *(unsigned __int16 *)(a1 + 24) * v17);
  return 0;
}

uint64_t pcre_freeMem(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (*(_WORD *)(result + 16))
  {
    uint64_t v9 = *(void *)(result + 8);
    uint64_t v10 = *(unsigned __int16 *)(result + 24);
    uint64_t v11 = *(void *)(v9 + 8 * v10);
    int v12 = *(_DWORD *)(v11 + 12);
    if (v12)
    {
LABEL_5:
      *(_DWORD *)(v11 + 12) = v12 - *(unsigned __int16 *)(result + 20);
      unsigned __int8 v13 = *(unsigned char *)(v11 + 24) - 1;
      *(unsigned char *)(v11 + 24) = v13;
      *a2 = *(unsigned __int8 *)(*(void *)(v11 + 16) + v13);
      return result;
    }
    if (*(_WORD *)(result + 24))
    {
      *(_WORD *)(result + 24) = v10 - 1;
      uint64_t v11 = *(void *)(v9 + 8 * (unsigned __int16)(v10 - 1));
      int v12 = *(_DWORD *)(v11 + 12);
      goto LABEL_5;
    }
    uint64_t v14 = *(void *)(*(void *)result + 32);
    uint64_t v15 = 1004;
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)result + 32);
    uint64_t v15 = 1003;
  }
  return log_OutPublic(v14, (uint64_t)"PCRE", v15, 0, a5, a6, a7, a8, a9);
}

uint64_t match_ref_0(int a1, unsigned __int8 *a2, int a3, void *a4, char a5)
{
  if (a4[12] - (void)a2 < a3) {
    return 0;
  }
  int v6 = (unsigned __int8 *)(a4[11] + *(int *)(a4[2] + 4 * a1));
  if (a5)
  {
    while (1)
    {
      BOOL v7 = __OFSUB__(a3--, 1);
      if (a3 < 0 != v7) {
        break;
      }
      uint64_t v11 = a4[4];
      unsigned int v12 = *v6++;
      int v13 = *(unsigned __int8 *)(v11 + v12);
      unsigned int v14 = *a2++;
      if (v13 != *(unsigned __int8 *)(v11 + v14)) {
        return 0;
      }
    }
  }
  else
  {
    while (1)
    {
      BOOL v7 = __OFSUB__(a3--, 1);
      if (a3 < 0 != v7) {
        break;
      }
      int v9 = *v6++;
      int v8 = v9;
      int v10 = *a2++;
      if (v8 != v10) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t match_xclass(int a1, unsigned char *a2)
{
  uint64_t v3 = *a2 & 1;
  if (a1 <= 255 && (*a2 & 2) != 0 && ((a2[a1 / 8 + 1] >> (a1 & 7)) & 1) != 0) {
    return !(*a2 & 1);
  }
  if ((*a2 & 2) != 0) {
    uint64_t v4 = a2 + 33;
  }
  else {
    uint64_t v4 = a2 + 1;
  }
  do
  {
    while (1)
    {
      int v5 = *v4;
      if (v5 == 1) {
        break;
      }
      if (v5 == 2)
      {
        unsigned __int8 v16 = (char *)(v4 + 2);
        int v17 = v4[1];
        if ((~v17 & 0xC0) == 0)
        {
          int v18 = utf8_table4[v17 & 0x3F];
          int v17 = (utf8_table3[utf8_table4[v17 & 0x3F]] & v17) << (6 * v18);
          int v19 = 6 * v18 - 6;
          unsigned int v20 = v18 + 1;
          do
          {
            char v21 = *v16++;
            v17 |= (v21 & 0x3F) << v19;
            v19 -= 6;
            --v20;
          }
          while (v20 > 1);
        }
        int v22 = *v16;
        uint64_t v4 = (unsigned __int8 *)(v16 + 1);
        if ((~v22 & 0xC0) == 0)
        {
          int v23 = utf8_table4[v22 & 0x3F];
          int v22 = (utf8_table3[utf8_table4[v22 & 0x3F]] & v22) << (6 * v23);
          int v24 = 6 * v23 - 6;
          unsigned int v25 = v23 + 1;
          do
          {
            char v26 = *v4++;
            v22 |= (v26 & 0x3F) << v24;
            v24 -= 6;
            --v25;
          }
          while (v25 > 1);
        }
        if (v17 <= a1 && v22 >= a1) {
          return v3 ^ 1;
        }
      }
      else
      {
        if (!*v4) {
          return v3;
        }
        uint64_t v28 = 0;
        int v6 = v4 + 2;
        int v7 = (char)v4[1];
        int v8 = v4[1];
        int v9 = ucp_findchar(a1, (int *)&v28 + 1, (unsigned int *)&v28);
        if (v7 < 0)
        {
          uint64_t v4 = v6;
          if ((v5 == 3) != (v8 - 128 != v9)) {
            return v3 ^ 1;
          }
        }
        else
        {
          uint64_t v4 = v6;
          if ((v5 == 3) != (HIDWORD(v28) != v8)) {
            return v3 ^ 1;
          }
        }
      }
    }
    int v10 = v4 + 2;
    int v11 = v4[1];
    if ((~v11 & 0xC0) == 0)
    {
      int v12 = utf8_table4[v11 & 0x3F];
      int v11 = (utf8_table3[utf8_table4[v11 & 0x3F]] & v11) << (6 * v12);
      int v13 = 6 * v12 - 6;
      unsigned int v14 = v12 + 1;
      do
      {
        char v15 = *v10++;
        v11 |= (v15 & 0x3F) << v13;
        v13 -= 6;
        --v14;
      }
      while (v14 > 1);
    }
    uint64_t v4 = v10;
  }
  while (v11 != a1);
  return v3 ^ 1;
}

uint64_t clcml_ObjOpen(_WORD *a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v55 = 0;
  *(void *)int v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  int v52 = 0;
  int __src = 0;
  __int16 v51 = 0;
  uint64_t v48 = 0;
  char v49 = 0;
  int v47 = 0;
  unsigned int v46 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, v56);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v12 = heap_Calloc(*(void **)(*(void *)v56 + 8), 1, 544);
  *a4 = v12;
  int v13 = *(uint64_t ***)(*(void *)v56 + 32);
  if (!v12)
  {
    uint64_t Str = 2358255626;
    log_OutPublic((uint64_t)v13, (uint64_t)"FE_CLCML", 60000, 0, v8, v9, v10, v11, v42);
    return Str;
  }
  log_OutTraceTuningData(v13, 600, (uint64_t)"%s%s", v7, v8, v9, v10, v11, "BEG");
  uint64_t Object = rsrc_Open(*(void **)(*(void *)v56 + 8), *(void *)(*(void *)v56 + 16), 0, 0, *a4 + 8);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  uint64_t Object = InitRsrcFunction(*(_WORD **)(*a4 + 8), *(void *)(*a4 + 16), (void *)*a4);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  uint64_t v20 = *(void *)v56;
  *(void *)(*(void *)*a4 + 64) = *(void *)(*(void *)v56 + 64);
  *(_OWORD *)(*(void *)*a4 + 384) = *(_OWORD *)(v20 + 384);
  *(void *)(*(void *)*a4 + 24) = *(void *)(v20 + 24);
  *(void *)(*(void *)*a4 + 32) = *(void *)(v20 + 32);
  uint64_t Object = paramc_ObjOpen(0, *(void *)(*a4 + 8), *(void *)(*a4 + 16), *(void *)*a4 + 40);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  uint64_t Object = objc_ObjOpen(0, *(_WORD **)(*a4 + 8), *(void *)(*a4 + 16), (uint64_t *)(*(void *)*a4 + 48));
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  *(_DWORD *)(*a4 + 540) = 0;
  if ((objc_GetObject(*(void *)(*(void *)v56 + 48), (uint64_t)"LANGCODECONVERTER", &v51) & 0x80000000) == 0)
  {
    uint64_t Object = objc_RegisterObject(*(void *)(*(void *)*a4 + 48), (uint64_t)"LANGCODECONVERTER", v51);
    if ((Object & 0x80000000) != 0)
    {
LABEL_53:
      uint64_t Str = Object;
      goto LABEL_54;
    }
    *(_DWORD *)(*a4 + 540) = 1;
    objc_ReleaseObject(*(void *)(*(void *)v56 + 48), (uint64_t)"LANGCODECONVERTER");
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"noclmset", &v49) & 0x80000000) != 0) {
    char v49 = 0;
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"datapackagename", &v48) & 0x80000000) != 0) {
    uint64_t v48 = 0;
  }
  if ((paramc_ParamGetUInt(*(void *)(*(void *)v56 + 40), (uint64_t)"pipelineswitchexecuting", &v46) & 0x80000000) != 0) {
    unsigned int v46 = 0;
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"blockautoinsertionfeclm", &v47) & 0x80000000) != 0) {
    int v47 = 0;
  }
  *(void *)int v56 = *(void *)*a4;
  paramc_ParamSetUInt(*(void *)(*(void *)v56 + 40), (uint64_t)"pipelineswitchexecuting", v46);
  paramc_ParamSetUInt(*(void *)(*(void *)v56 + 40), (uint64_t)"readmode", 1u);
  paramc_ParamSetUInt(*(void *)(*(void *)v56 + 40), (uint64_t)"infiniteloopdetectlimit", 0x2710u);
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"numberoutputtranscriptions", "1");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"numberoutputorthsubstitutes", "1");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"numberpartialorthvariants", "1");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"clmvariants", "no");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"norichtranscription", "false");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"clcpppipelinemode", "internal");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"fedatapackaging", a3);
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"foreignpron", "yes");
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"fedataprefix", &byte_20D5A22AE);
  paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"feextcfgdataprefix", &byte_20D5A22AE);
  if (v48) {
    paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"datapackagename", v48);
  }
  if (v49) {
    paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"noclmset", v49);
  }
  if (v47) {
    paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"blockautoinsertionfeclm", v47);
  }
  *(void *)(*a4 + 120) = 0;
  brokeraux_ComposeBrokerString(*(uint64_t *)v56, "pipeline", 0, 1, 0, 0, 0, v57, 0x400uLL);
  uint64_t Object = brk_DataOpen(*(void *)(*(void *)v56 + 24));
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  uint64_t Object = brk_DataMap(*(void *)(*(void *)v56 + 24), *(void *)(*a4 + 120), 0, 0, (uint64_t)&v55);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  uint64_t Object = hdrpars_ReadHeader(*(_WORD **)(*a4 + 8), *(void *)(*a4 + 16), 0, v55, &v54, &v53);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_53;
  }
  if (v53)
  {
    *(void *)&long long v44 = 0;
    if (vector_GetElemAt(v53, 0, &v44))
    {
      unsigned int v21 = 1;
      do
        ssftmap_ObjClose(*(void *)v44);
      while (vector_GetElemAt(v53, v21++, &v44));
    }
    vector_ObjClose(v53);
    uint64_t v53 = 0;
    log_OutPublic(*(void *)(*(void *)v56 + 32), (uint64_t)"FE_CLCML", 60001, 0, v23, v24, v25, v26, v43);
    uint64_t Str = 2358255623;
    goto LABEL_54;
  }
  if (v55)
  {
    brk_DataUnmap(*(void *)(*(void *)v56 + 24), *(void *)(*a4 + 120), (uint64_t)v55);
    int v55 = 0;
  }
  uint64_t v28 = *(void **)(*(void *)v56 + 8);
  uint64_t v29 = (uint64_t *)(*a4 + 32);
  long long v44 = xmmword_26C21F5D8;
  int v45 = off_26C21F5E8;
  if (vector_ObjOpen(v28, &v44, 1, v29))
  {
    uint64_t Object = clcpipeline_LoadObject(*(_WORD **)(*a4 + 8), *(void *)(*a4 + 16), (uint64_t)"SYNTHSTREAM", (uint64_t)"synthstream", *(void *)(*a4 + 32), 0);
    if ((Object & 0x80000000) == 0)
    {
      uint64_t Object = objc_GetObject(*(void *)(*(void *)v56 + 48), (uint64_t)"SYNTHSTREAM", &v51);
      if ((Object & 0x80000000) == 0)
      {
        *(void *)(*a4 + 40) = *((void *)v51 + 1);
        uint64_t Object = clcpipeline_LoadObject(*(_WORD **)(*a4 + 8), *(void *)(*a4 + 16), (uint64_t)"LINGDB", (uint64_t)"lingdb", *(void *)(*a4 + 32), 0);
        if ((Object & 0x80000000) == 0)
        {
          uint64_t Object = objc_GetObject(*(void *)(*(void *)v56 + 48), (uint64_t)"LINGDB", &v51);
          if ((Object & 0x80000000) == 0)
          {
            *(void *)(*a4 + 48) = *((void *)v51 + 1);
            uint64_t Object = clcpipeline_ObjOpen(*(_WORD **)(*a4 + 8), *(void *)(*a4 + 16), v54, *(void *)(*a4 + 32), (uint64_t *)(*a4 + 24), &v52);
            if ((Object & 0x80000000) == 0)
            {
              paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"nativetypeofchar", "utf-8");
              paramc_ParamSetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
              if (v54) {
                ssftmap_ObjClose(v54);
              }
              int v34 = *(uint64_t (**)(uint64_t))(*(void *)(*a4 + 40) + 32);
              uint64_t NullHandle = safeh_GetNullHandle();
              uint64_t Object = v34(NullHandle);
              if ((Object & 0x80000000) == 0)
              {
                char v36 = *(uint64_t (**)(uint64_t))(*(void *)(*a4 + 48) + 32);
                uint64_t v37 = safeh_GetNullHandle();
                uint64_t Object = v36(v37);
                if ((Object & 0x80000000) == 0)
                {
                  uint64_t Object = (*(uint64_t (**)(void, void, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(*a4 + 40) + 64))(*(void *)(*a4 + 56), *(void *)(*a4 + 64), 201, "text/plain;charset=utf-8",
                             0,
                             1,
                             *a4 + 88);
                  if ((Object & 0x80000000) == 0)
                  {
                    unint64_t v38 = 0;
                    while (v38 < *(unsigned __int16 *)(*(void *)(*a4 + 24) + 16))
                    {
                      __int16 v39 = v38 + 1;
                      (*(void (**)(void, void, void))(*(void *)(*a4 + 40) + 56))(*(void *)(*a4 + 56), *(void *)(*a4 + 64), (unsigned __int16)(v38 + 1));
                      int v40 = *(void **)(*(void *)(*(void *)(*a4 + 24) + 8) + 8 * v38++);
                      if (((*(uint64_t (**)(void, void, void, void))(v40[2] + 96))(v40[3], v40[4], *(void *)(*a4 + 56), *(void *)(*a4 + 64)) & 0x80000000) != 0)
                      {
                        *(_WORD *)(*(void *)(*a4 + 24) + 16) = v39 - 1;
                        break;
                      }
                    }
                    uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)v56 + 40), (uint64_t)"langcode", &__src);
                    if ((Str & 0x80000000) == 0) {
                      strncpy((char *)(*a4 + 128), __src, 3uLL);
                    }
                    goto LABEL_54;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_53;
  }
  uint64_t Str = 2358255626;
  log_OutPublic(*(void *)(*(void *)v56 + 32), (uint64_t)"FE_CLCML", 60000, 0, v30, v31, v32, v33, v43);
LABEL_54:
  log_OutTraceTuningData(*(uint64_t ***)(*(void *)v56 + 32), 600, (uint64_t)"%s%s", v15, v16, v17, v18, v19, "END");
  if ((Str & 0x80000000) != 0) {
    clcml_ObjClose(*a4);
  }
  return Str;
}

uint64_t vclc_loc_ElemCopyPartsString(const char **a1, uint64_t a2, uint64_t *a3)
{
  int v5 = *a1;
  if (*a1) {
    uint64_t v6 = strlen(*a1) + 1;
  }
  else {
    uint64_t v6 = 1;
  }
  uint64_t result = heap_Alloc(a2, v6);
  *a3 = result;
  if (result)
  {
    if (v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = &byte_20D5A22AE;
    }
    strcpy((char *)result, v8);
    return 1;
  }
  return result;
}

uint64_t *vclc_loc_ElemFreePartsString(uint64_t *result, void *a2)
{
  if (*result) {
    return heap_Free(a2, *result);
  }
  return result;
}

uint64_t clcml_ObjClose(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(_WORD *)(v2 + 16))
  {
    unint64_t v3 = 0;
    LODWORD(v4) = 0;
    do
    {
      int v5 = *(void **)(*(void *)(v2 + 8) + 8 * v3);
      int v6 = (*(uint64_t (**)(void, void))(v5[2] + 112))(v5[3], v5[4]);
      if ((int)v4 > -1 && v6 < 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = v4;
      }
      ++v3;
      uint64_t v2 = *(void *)(a1 + 24);
    }
    while (v3 < *(unsigned __int16 *)(v2 + 16));
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 120);
  if (v8)
  {
    brk_DataClose(*(void *)(*(void *)a1 + 24), v8);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(*(void *)(a1 + 88), *(void *)(a1 + 96), NullHandle, v10))
  {
    int v18 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 88), *(void *)(a1 + 96));
    *(void *)(a1 + 88) = safeh_GetNullHandle();
    *(void *)(a1 + 96) = v11;
    if (v18 >= 0 || (int)v4 <= -1) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v18;
    }
  }
  uint64_t v20 = *(void *)(a1 + 56);
  if (v20)
  {
    int v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 40) + 40))(v20, *(void *)(a1 + 64));
    if ((int)v4 > -1 && v21 < 0) {
      uint64_t v4 = v21;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v23 = *(void *)(a1 + 72);
  if (v23)
  {
    int v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 48) + 40))(v23, *(void *)(a1 + 80));
    if ((int)v4 > -1 && v24 < 0) {
      uint64_t v4 = v24;
    }
    else {
      uint64_t v4 = v4;
    }
  }
  uint64_t v26 = *(void *)(a1 + 24);
  if (v26)
  {
    int v27 = clcpipeline_ObjClose(v26, v11, v12, v13, v14, v15, v16, v17);
    if (v27 >= 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v27;
    }
    *(void *)(a1 + 24) = 0;
  }
  if (*(void *)(a1 + 48))
  {
    int v28 = objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"LINGDB");
    if (v28 >= 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v28;
    }
    *(void *)(a1 + 48) = 0;
  }
  if (*(void *)(a1 + 40))
  {
    int v29 = objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (v29 >= 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v29;
    }
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30)
  {
    int v31 = clcpipeline_UnloadObjects(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), v30);
    if (v31 >= 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v31;
    }
    vector_ObjClose(*(void *)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v32 = *(void **)a1;
  if (*(void *)a1)
  {
    if ((uint64_t v33 = v32[6]) == 0
      || !*(_DWORD *)(a1 + 540)
      || ((int v34 = objc_UnregisterObject(v33, (uint64_t)"LANGCODECONVERTER"), (int)v4 > -1) ? (v35 = v34 < 0) : (v35 = 0),
          !v35 ? (uint64_t v4 = v4) : (uint64_t v4 = v34),
          (uint64_t v32 = *(void **)a1) != 0))
    {
      uint64_t v36 = v32[6];
      if (v36)
      {
        int v37 = objc_ObjClose(v36);
        uint64_t v32 = *(void **)a1;
        *(void *)(*(void *)a1 + 48) = 0;
        if ((int)v4 > -1 && v37 < 0) {
          uint64_t v4 = v37;
        }
        else {
          uint64_t v4 = v4;
        }
      }
      uint64_t v39 = v32[5];
      if (v39)
      {
        int v40 = paramc_ObjClose(v39);
        uint64_t v32 = *(void **)a1;
        *(void *)(*(void *)a1 + 40) = 0;
        if ((int)v4 > -1 && v40 < 0) {
          uint64_t v4 = v40;
        }
        else {
          uint64_t v4 = v4;
        }
      }
      unsigned int v42 = (void *)v32[1];
      unsigned int v43 = *(_WORD **)(a1 + 8);
      if (v43)
      {
        int v44 = rsrc_Close(v43, *(void *)(a1 + 16));
        if ((int)v4 > -1 && v44 < 0) {
          uint64_t v4 = v44;
        }
        else {
          uint64_t v4 = v4;
        }
      }
      uint64_t v46 = *(void *)(a1 + 528);
      if (v46) {
        heap_Free(v42, v46);
      }
      heap_Free(v42, a1);
    }
  }
  return v4;
}

uint64_t clcml_Process(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int PreviousUtf8Offset, char *__s1, const char *a6)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  unsigned int v91 = 0;
  int v92 = 0;
  unsigned __int16 v90 = 0;
  HIWORD(v86) = 0;
  **(unsigned char **)(a1 + 104) = 0;
  *(_WORD *)(a1 + 260) = 0;
  if (!__s1 || !strcmp(__s1, "normal"))
  {
    for (uint64_t i = 0; i != 3; ++i)
      __s1a[i] = ssft_tolower(*(unsigned __int8 *)(a1 + 128 + i));
  }
  else
  {
    for (uint64_t j = 0; j != 3; ++j)
      __s1a[j] = ssft_tolower(__s1[j]);
  }
  for (__s1a[3] = 0; PreviousUtf8Offset > a3; unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(a2, PreviousUtf8Offset))
  {
    if (*(unsigned __int8 *)(a2 + utf8_GetPreviousUtf8Offset(a2, PreviousUtf8Offset)) > 0x20u) {
      break;
    }
  }
  uint64_t v14 = PreviousUtf8Offset - a3;
  if (PreviousUtf8Offset != a3)
  {
    uint64_t v16 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned __int16 *)(*(void *)(a1 + 24) + 16), 4);
    if (!v16)
    {
      uint64_t v15 = 2358255626;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v18, v19, v20, v21, v83);
      return v15;
    }
    uint64_t v22 = v16;
    int v89 = 0;
    long long v87 = 0;
    log_OutTraceTuningData(*(uint64_t ***)(*(void *)a1 + 32), 600, (uint64_t)"%s%s", v17, v18, v19, v20, v21, "BEG");
    uint64_t v23 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 48) + 64))(*(void *)(a1 + 72), *(void *)(a1 + 80));
    if ((v23 & 0x80000000) == 0)
    {
      if (!__s1
        || (strcpy(__s, "\x1B\\lang="),
            __strcat_chk(),
            __strcat_chk(),
            size_t v24 = strlen(__s),
            uint64_t v23 = (*(uint64_t (**)(void, void, char *, size_t))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s, v24), (v23 & 0x80000000) == 0))
      {
        if (!strcmp(a6, "normal")
          || !strcmp(a6, "mpthree")
          || (strcpy(__s, "\x1B\\tn="),
              __strcat_chk(),
              __strcat_chk(),
              size_t v25 = strlen(__s),
              uint64_t v23 = (*(uint64_t (**)(void, void, char *, size_t))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 88), *(void *)(a1 + 96), __s, v25), (v23 & 0x80000000) == 0))
        {
          uint64_t v23 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 88), *(void *)(a1 + 96), a2 + a3, v14);
          if ((v23 & 0x80000000) == 0)
          {
            unint64_t v29 = 0;
            uint64_t v30 = v22;
            while (1)
            {
              uint64_t v31 = *(void *)(a1 + 24);
              if (v29 >= *(unsigned __int16 *)(v31 + 16)) {
                break;
              }
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Calling Process for %s", v26, v27, v28, *(void *)(*(void *)(*(void *)(v31 + 8) + 8 * v29) + 8));
              uint64_t v32 = *(void **)(*(void *)(*(void *)(a1 + 24) + 8) + 8 * v29);
              uint64_t v15 = (*(uint64_t (**)(void, void, void, void, uint64_t))(v32[2] + 104))(v32[3], v32[4], *(void *)(a1 + 72), *(void *)(a1 + 80), v30);
              uint64_t v33 = *(void *)(a1 + 48);
              if (*(void *)(v33 + 200))
              {
                *(_DWORD *)__s2 = 0;
                if (((*(uint64_t (**)(void, void, char *))(v33 + 216))(*(void *)(a1 + 72), *(void *)(a1 + 80), __s2) & 0x80000000) == 0)
                {
                  if (*(_DWORD *)__s2) {
                    (*(void (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 48) + 200))(*(void *)(a1 + 72), *(void *)(a1 + 80), 0, *(void *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 8 * v29) + 8), 1);
                  }
                }
              }
              ++v29;
              v30 += 4;
              if ((v15 & 0x80000000) != 0) {
                goto LABEL_100;
              }
            }
            uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, void, char *))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 72), *(void *)(a1 + 80), 1, 0, (char *)&v92 + 2);
            if ((v15 & 0x80000000) != 0) {
              goto LABEL_100;
            }
            if (((*(uint64_t (**)(void, void, void, void, char *))(*(void *)(a1 + 48) + 184))(*(void *)(a1 + 72), *(void *)(a1 + 80), HIWORD(v92), 0, (char *)&v86 + 2) & 0x80000000) != 0|| HIWORD(v86) != 1)
            {
              goto LABEL_76;
            }
            uint64_t v15 = (*(uint64_t (**)(void, void, void, void, uint64_t, int *))(*(void *)(a1 + 48)
                                                                                            + 176))(*(void *)(a1 + 72), *(void *)(a1 + 80), HIWORD(v92), 0, a1 + 520, &v92);
            if ((v15 & 0x80000000) != 0) {
              goto LABEL_100;
            }
            if (((*(uint64_t (**)(void, void, uint64_t, void, char *))(*(void *)(a1 + 48) + 152))(*(void *)(a1 + 72), *(void *)(a1 + 80), 2, HIWORD(v92), (char *)&v86 + 2) & 0x80000000) == 0)
            {
              if (HIWORD(v86))
              {
                uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 72), *(void *)(a1 + 80), 2, HIWORD(v92), &v90);
                if ((v15 & 0x80000000) != 0) {
                  goto LABEL_100;
                }
              }
            }
            *(_DWORD *)(a1 + 112) = 0;
            unsigned __int16 v34 = v90;
            if (!v90)
            {
LABEL_76:
              int v56 = *(char **)(a1 + 104);
              if (*(_WORD *)(a1 + 112))
              {
                uint64_t v57 = *(unsigned __int16 *)(a1 + 112) - 1;
                if (v56[v57] == 95)
                {
                  v56[v57] = 0;
                  --*(_WORD *)(a1 + 112);
                  int v56 = *(char **)(a1 + 104);
                }
              }
              uint64_t v58 = strstr(v56, "_\\TQ\\_");
              if (v58)
              {
                unsigned int v59 = v58;
                int v60 = v58 + 6;
                size_t v61 = strlen(v58 + 6);
                memmove(v59, v60, v61 + 1);
                *(_WORD *)(a1 + 112) -= 6;
                int v56 = *(char **)(a1 + 104);
              }
              int64_t v62 = strstr(v56, "\\TQ\\"");
              if (v62)
              {
                uint64_t v63 = v62;
                char v64 = v62 + 4;
                size_t v65 = strlen(v62 + 4);
                memmove(v63, v64, v65 + 1);
                *(_WORD *)(a1 + 112) -= 4;
              }
              if (((*(uint64_t (**)(void, void, void, uint64_t, char *))(*(void *)(a1 + 48) + 184))(*(void *)(a1 + 72), *(void *)(a1 + 80), HIWORD(v92), 1, (char *)&v86 + 2) & 0x80000000) == 0&& HIWORD(v86) == 1)
              {
                *(void *)__s2 = 0;
                LOWORD(v86) = 0;
                *(_WORD *)(a1 + 536) = 0;
                uint64_t v15 = (*(uint64_t (**)(void, void, void, uint64_t, char *, int *))(*(void *)(a1 + 48)
                                                                                                + 176))(*(void *)(a1 + 72), *(void *)(a1 + 80), HIWORD(v92), 1, __s2, &v86);
                if ((v15 & 0x80000000) == 0)
                {
                  uint64_t v66 = (unsigned __int16)v86;
                  if ((_WORD)v86)
                  {
                    char v67 = *(int **)__s2;
                    do
                    {
                      int v68 = *v67;
                      v67 += 8;
                      if (v68 == 1) {
                        ++*(_WORD *)(a1 + 536);
                      }
                      --v66;
                    }
                    while (v66);
                  }
                  if (*(_WORD *)(a1 + 536))
                  {
                    uint64_t v69 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 528), 4 * *(unsigned __int16 *)(a1 + 536));
                    if (v69)
                    {
                      *(void *)(a1 + 528) = v69;
                      uint64_t v70 = (unsigned __int16)v86;
                      if ((_WORD)v86)
                      {
                        int v71 = 0;
                        unsigned int v72 = *(_DWORD **)__s2;
                        char v73 = *(_DWORD **)__s2;
                        int v74 = *(_DWORD **)__s2;
                        do
                        {
                          int v75 = *v74;
                          v74 += 8;
                          if (v75 == 1)
                          {
                            uint64_t v76 = (unsigned __int16)v71++;
                            *(_DWORD *)(v69 + 4 * v76) = v73[3] - v72[3];
                          }
                          char v73 = v74;
                          --v70;
                        }
                        while (v70);
                      }
                    }
                    else
                    {
LABEL_102:
                      uint64_t v15 = 2358255626;
                      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v50, v51, v52, v53, v84);
                    }
                  }
                }
              }
              goto LABEL_100;
            }
            __int16 v35 = 0;
            while (1)
            {
              uint64_t v23 = (*(uint64_t (**)(void, void, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 48) + 168))(*(void *)(a1 + 72), *(void *)(a1 + 80), v34, 0, 1, &v91, &v92);
              if ((v23 & 0x80000000) != 0) {
                break;
              }
              if (v91 <= 0xA && ((1 << v91) & 0x610) != 0)
              {
                int v86 = 0;
                uint64_t v23 = (*(uint64_t (**)(void, void, void, uint64_t, char **, int *))(*(void *)(a1 + 48)
                                                                                                 + 176))(*(void *)(a1 + 72), *(void *)(a1 + 80), v90, 3, &v89, &v92);
                if ((v23 & 0x80000000) != 0) {
                  break;
                }
                if (!strcmp(a6, "mpthree"))
                {
                  uint64_t v23 = (*(uint64_t (**)(void, void, void, uint64_t, unsigned char **, int *))(*(void *)(a1 + 48) + 176))(*(void *)(a1 + 72), *(void *)(a1 + 80), v90, 9, &v87, &v92);
                  if ((v23 & 0x80000000) != 0) {
                    break;
                  }
                  if (*v87)
                  {
                    for (uint64_t k = 0; k != 3; ++k)
                      __s2[k] = ssft_tolower(v87[k]);
                  }
                  else
                  {
                    for (uint64_t m = 0; m != 3; ++m)
                      __s2[m] = ssft_tolower(*(unsigned __int8 *)(a1 + 128 + m));
                  }
                  void __s2[3] = 0;
                  if (strcmp(__s1a, __s2))
                  {
                    unint64_t v39 = *(unsigned __int16 *)(a1 + 260);
                    if (v39 <= 0x3F)
                    {
                      strcpy((char *)(a1 + 4 * v39 + 262), __s2);
                      uint64_t v40 = *(unsigned __int16 *)(a1 + 260);
                      *(_WORD *)(a1 + 260) = v40 + 1;
                      *(_WORD *)(a1 + 2 * v40 + 132) = v35;
                    }
                  }
                  for (uint64_t n = 0; n != 4; ++n)
                    __s1a[n] = ssft_tolower(__s2[n]);
                  ++v35;
                }
                if (((*(uint64_t (**)(void, void, void, uint64_t, char *))(*(void *)(a1 + 48) + 184))(*(void *)(a1 + 72), *(void *)(a1 + 80), v90, 8, (char *)&v86 + 2) & 0x80000000) == 0&& HIWORD(v86) == 1)
                {
                  uint64_t v23 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 48) + 168))(*(void *)(a1 + 72), *(void *)(a1 + 80), v90, 8, 1, &v86, &v92);
                  if ((v23 & 0x80000000) != 0) {
                    break;
                  }
                }
                unsigned int v42 = v89;
                size_t v43 = strlen(v89);
                if (!v43 || (size_t v44 = v43, !strcmp(v89, "_")))
                {
                  if ((_WORD)v86 && *(_WORD *)(a1 + 112)) {
                    *(unsigned char *)(*(void *)(a1 + 104) + *(unsigned __int16 *)(a1 + 112) - 1) = 35;
                  }
                }
                else
                {
                  uint64_t v45 = *(unsigned __int16 *)(a1 + 112);
                  int v46 = v44 + v45;
                  unint64_t v47 = v44 + v45 - 1023;
                  uint64_t v48 = *(char **)(a1 + 104);
                  if (v47 <= 0xFFFFFFFFFFFFFBFFLL)
                  {
                    uint64_t v49 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 104), (v46 + 2));
                    if (!v49) {
                      goto LABEL_102;
                    }
                    uint64_t v48 = (char *)v49;
                    *(void *)(a1 + 104) = v49;
                    LOWORD(v45) = *(_WORD *)(a1 + 112);
                    unsigned int v42 = v89;
                  }
                  *(_WORD *)(a1 + 112) = v45 + strlen(v42) + 1;
                  strcat(v48, v42);
                  size_t v54 = strlen(*(const char **)(a1 + 104));
                  if ((_WORD)v86) {
                    __int16 v55 = 35;
                  }
                  else {
                    __int16 v55 = 95;
                  }
                  *(_WORD *)(*(void *)(a1 + 104) + v54) = v55;
                }
              }
              uint64_t v15 = (*(uint64_t (**)(void, void, void, unsigned __int16 *))(*(void *)(a1 + 48) + 120))(*(void *)(a1 + 72), *(void *)(a1 + 80), v90, &v90);
              if ((v15 & 0x80000000) != 0) {
                goto LABEL_100;
              }
              unsigned __int16 v34 = v90;
              if (!v90) {
                goto LABEL_76;
              }
            }
          }
        }
      }
    }
    uint64_t v15 = v23;
LABEL_100:
    heap_Free(*(void **)(*(void *)a1 + 8), v22);
    log_OutTraceTuningData(*(uint64_t ***)(*(void *)a1 + 32), 600, (uint64_t)"%s%s", v77, v78, v79, v80, v81, "END");
    return v15;
  }
  return 0;
}

uint64_t fe_clcml_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v5 = 2358255623;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v34);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    int v10 = (void *)heap_Calloc(*(void **)(v34 + 8), 1, 1000);
    if (!v10)
    {
      log_OutPublic(*(void *)(v34 + 32), (uint64_t)"FE_CLCML", 60000, 0, v11, v12, v13, v14, v24);
      return 2358255626;
    }
    uint64_t v15 = (uint64_t)v10;
    void *v10 = v34;
    v10[1] = a3;
    v10[2] = a4;
    uint64_t Object = objc_GetObject(*(void *)(v34 + 48), (uint64_t)"SYNTHSTREAM", &v33);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_19;
    }
    uint64_t Object = objc_GetObject(*(void *)(v34 + 48), (uint64_t)"FE_DEPES", &v32);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_19;
    }
    uint64_t Object = objc_GetObject(*(void *)(v34 + 48), (uint64_t)"FE_DCTLKP", &v31);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_19;
    }
    *(void *)(v15 + 24) = *(void *)(v33 + 8);
    uint64_t v17 = v32;
    *(void *)(v15 + 48) = *(void *)(v32 + 8);
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v17 + 16);
    uint64_t v18 = v31;
    *(void *)(v15 + 72) = *(void *)(v31 + 8);
    *(_OWORD *)(v15 + 56) = *(_OWORD *)(v18 + 16);
    *(_DWORD *)(v15 + 992) = 0;
    *(void *)(v15 + 976) = 0;
    *(void *)(v15 + 984) = 0;
    *(void *)(v15 + 968) = 0;
    if ((paramc_ParamGetStr(*(void *)(v34 + 40), (uint64_t)"extraesclang", &v30) & 0x80000000) != 0)
    {
      uint64_t Object = paramc_ParamSetStr(*(void *)(v34 + 40), (uint64_t)"extraesclang", &byte_20D5A22AE);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_19;
      }
    }
    if ((paramc_ParamGetStr(*(void *)(v34 + 40), (uint64_t)"extraesctn", &v30) & 0x80000000) != 0)
    {
      uint64_t Object = paramc_ParamSetStr(*(void *)(v34 + 40), (uint64_t)"extraesctn", &byte_20D5A22AE);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_19;
      }
    }
    if ((paramc_ParamGetStr(*(void *)(v34 + 40), (uint64_t)"lidvoiceswitch", &v30) & 0x80000000) != 0)
    {
      uint64_t Object = paramc_ParamSetStr(*(void *)(v34 + 40), (uint64_t)"lidvoiceswitch", &byte_20D5A22AE);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_19;
      }
    }
    uint64_t v19 = *(void *)(v34 + 40);
    uint64_t v26 = (uint64_t (*)(const char *, uint64_t, char **))v15;
    long long v25 = xmmword_26C21F5F8;
    long long v27 = xmmword_26C21F5F8;
    uint64_t Object = paramc_ListenerAdd(v19, "extraesclang", &v26);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_19;
    }
    uint64_t v20 = *(void *)(v34 + 40);
    uint64_t v26 = (uint64_t (*)(const char *, uint64_t, char **))v15;
    long long v27 = v25;
    uint64_t Object = paramc_ListenerAdd(v20, "extraesctn", &v26);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_19;
    }
    uint64_t v21 = *(void *)(v34 + 40);
    uint64_t v26 = (uint64_t (*)(const char *, uint64_t, char **))v15;
    long long v27 = v25;
    uint64_t Object = paramc_ListenerAdd(v21, "lidvoiceswitch", &v26);
    if ((Object & 0x80000000) != 0
      || (uint64_t v22 = *(void **)(*(void *)v15 + 8),
          uint64_t v26 = ssftmap_ElemCopyString,
          *(void *)&long long v27 = ssftmap_ElemFreeString,
          *((void *)&v27 + 1) = ssftmap_ElemCompareKeysString,
          uint64_t v28 = stringmap_loc_ElemCopyPtr_1,
          unint64_t v29 = stringmap_loc_ElemFreeNoOp_1,
          uint64_t Object = ssftmap_ObjOpen(v22, 0, (long long *)&v26, (uint64_t *)(v15 + 976)),
          (Object & 0x80000000) != 0))
    {
LABEL_19:
      uint64_t v5 = Object;
      *(void *)a5 = v15;
      *(_DWORD *)(a5 + 8) = 62600;
LABEL_20:
      fe_clcml_ObjClose((void *)v15, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return v5;
    }
    uint64_t v5 = hlp_activate(v15);
    *(void *)a5 = v15;
    *(_DWORD *)(a5 + 8) = 62600;
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_20;
    }
  }
  return v5;
}

uint64_t fe_clcml_ParamCheckChange()
{
  return 0;
}

uint64_t fe_clcml_ParamLearnChange(uint64_t a1, const char *a2)
{
  __s2 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"clcpreventhlpactivate", &__s2);
  if ((Str & 0x80000000) != 0) {
    return hlp_activate(a1);
  }
  uint64_t v5 = Str;
  if (strcmp("yes", __s2)) {
    return hlp_activate(a1);
  }
  if (strcmp("extraesclang", a2) && strcmp("extraesctn", a2)) {
    paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"clcpreventhlpactivate", "no");
  }
  return v5;
}

uint64_t stringmap_loc_ElemCopyPtr_1(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t hlp_activate(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  char __s = 0;
  char v64 = 0;
  size_t v61 = 0;
  int64_t v62 = 0;
  uint64_t v59 = 0;
  int __src = 0;
  long long __s1 = 0;
  uint64_t v58 = 0;
  uint64_t Str = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"extclccfg", &v64) & 0x80000000) != 0 || !v64) {
    return Str;
  }
  if (!*v64) {
    return 0;
  }
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"extraesclang", &__s);
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"extraesctn", &v62);
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"mlset", &v61);
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &__src);
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"fedataprefix", &v59);
  paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"feextcfgdataprefix", &v58);
  if (LH_stricmp(v62, "mpthree") && LH_stricmp(v62, &byte_20D5A22AE)) {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 60002, "%s%s", v3, v4, v5, v6, "extraesctn");
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"voiceml", &__s1);
  if ((Str & 0x80000000) == 0)
  {
    uint64_t v11 = __s1;
    if (!strcmp(__s1, "no") || !*v11)
    {
      uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"lidvoiceswitch", &__s1);
      if ((Str & 0x80000000) == 0 && !LH_stricmp(__s1, "yes")) {
        return 0;
      }
    }
  }
  uint64_t v12 = __s;
  if (!*__s) {
    goto LABEL_29;
  }
  if ((Str & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    unsigned __int16 v14 = 0;
    unsigned __int16 v15 = 0;
    uint64_t v12 = __s;
    do
    {
      if ((++v14 & 3) != 0)
      {
        int v16 = v12[v13];
        if ((v16 & 0xFFFFFFDF) - 91 > 0xFFFFFFE5) {
          __s2[v15++] = ssft_tolower(v16);
        }
        else {
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 60003, "%s%s", v7, v8, v9, v10, "extraesclang");
        }
      }
      else
      {
        __s2[v15] = 0;
        if (v12[v13] && v12[v13] != 44)
        {
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 60003, "%s%s", v7, v8, v9, v10, "extraesclang");
        }
        else if (!strstr(v61, __s2) || !LH_stricmp(__src, __s2))
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Ignoring language in extraesclang, language=%s", v17, v18, v19, (uint64_t)__s2);
        }
        unsigned __int16 v15 = 0;
      }
      uint64_t v13 = v14;
      uint64_t v12 = __s;
    }
    while (strlen(__s) >= v14);
  }
  int v20 = strlen(v12);
  uint64_t v21 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), (v20 + 5));
  if (!v21)
  {
LABEL_102:
    uint64_t Str = 2358255626;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v22, v23, v24, v25, v55);
    return Str;
  }
  uint64_t v26 = v21;
  long long v27 = strcpy(v21, __src);
  *(_WORD *)&v26[strlen(v27)] = 44;
  strcat(v26, __s);
  uint64_t Str = paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"lidlanguages", v26);
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v26);
  if ((Str & 0x80000000) == 0)
  {
LABEL_29:
    uint64_t v28 = *(unsigned char **)(a1 + 984);
    if (v28) {
      *uint64_t v28 = 0;
    }
    if (*__s || *v62)
    {
      unint64_t v29 = v64;
      if (*v64)
      {
        while (1)
        {
          uint64_t v56 = 0;
          int v30 = *v29;
          if (v30 == 43)
          {
            int v31 = 0;
          }
          else
          {
            unint64_t v32 = 0;
            int v31 = 0;
            while (v30 && v32 <= 0xFE)
            {
              unint64_t v33 = v32 + 1;
              ++v31;
              __s2[v32] = v30;
              int v30 = v29[++v32];
              if (v30 == 43)
              {
                v29 += v33;
                goto LABEL_42;
              }
            }
            int v31 = (unsigned __int16)v32;
            v29 += v32;
LABEL_42:
            if (v31 == 255) {
              return 0;
            }
          }
          __s2[v31] = 0;
          uint64_t v34 = v29 + 1;
          if (*v29 != 43) {
            uint64_t v34 = v29;
          }
          int v35 = *v34;
          if (v35 == 61)
          {
            int v36 = 0;
          }
          else
          {
            unint64_t v37 = 0;
            int v36 = 0;
            while (v35 && v37 <= 0xFE)
            {
              unint64_t v38 = v37 + 1;
              ++v36;
              v66[v37] = v35;
              int v35 = v34[++v37];
              if (v35 == 61)
              {
                v34 += v38;
                goto LABEL_53;
              }
            }
            int v36 = (unsigned __int16)v37;
            v34 += v37;
LABEL_53:
            if (v36 == 255) {
              return 0;
            }
          }
          v66[v36] = 0;
          if (*v34 == 61) {
            unint64_t v29 = v34 + 1;
          }
          else {
            unint64_t v29 = v34;
          }
          if (v58)
          {
            unint64_t v39 = (unsigned __int16)strlen(v58);
            __strcpy_chk();
          }
          else
          {
            unint64_t v39 = 0;
            v65[0] = 0;
          }
          int v40 = *v29;
          if (v40 == 44)
          {
            unint64_t v41 = v39;
          }
          else
          {
            unint64_t v41 = v39;
            while (v40 && v39 <= 0xFE)
            {
              v65[v39] = v40;
              int v42 = *++v29;
              int v40 = v42;
              ++v39;
              ++v41;
              if (v42 == 44) {
                goto LABEL_68;
              }
            }
            unint64_t v41 = (unsigned __int16)v39;
          }
LABEL_68:
          if (v41 == 255) {
            return 0;
          }
          v65[v41] = 0;
          if (*v29 == 44) {
            ++v29;
          }
          if ((*(unsigned __int16 *)__s2 == 42
             || !LH_stricmp(__s2, __src)
             || strstr(v61, __s2) && __s && strstr(__s, __s2))
            && (*(unsigned __int16 *)v66 == 42 || v62 && strstr(v62, v66)))
          {
            size_t v43 = *(char **)(a1 + 984);
            if (!v43)
            {
              size_t v44 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), 0, &byte_20D5A22AE, (unsigned int *)(a1 + 992));
              *(void *)(a1 + 984) = v44;
              if (!v44) {
                goto LABEL_102;
              }
              char *v44 = 0;
              size_t v43 = *(char **)(a1 + 984);
            }
            uint64_t v45 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), v43, __s2, (unsigned int *)(a1 + 992));
            *(void *)(a1 + 984) = v45;
            if (!v45) {
              goto LABEL_102;
            }
            int v46 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), v45, "+", (unsigned int *)(a1 + 992));
            *(void *)(a1 + 984) = v46;
            if (!v46) {
              goto LABEL_102;
            }
            unint64_t v47 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), v46, v66, (unsigned int *)(a1 + 992));
            *(void *)(a1 + 984) = v47;
            if (!v47) {
              goto LABEL_102;
            }
            uint64_t v48 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), v47, "=", (unsigned int *)(a1 + 992));
            *(void *)(a1 + 984) = v48;
            if (!v48) {
              goto LABEL_102;
            }
            uint64_t v49 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), v48, v65, (unsigned int *)(a1 + 992));
            *(void *)(a1 + 984) = v49;
            if (!v49) {
              goto LABEL_102;
            }
            uint64_t v50 = hlp_StringAppend(*(uint64_t **)(*(void *)a1 + 8), v49, ",", (unsigned int *)(a1 + 992));
            *(void *)(a1 + 984) = v50;
            if (!v50) {
              goto LABEL_102;
            }
            if (!*(void *)(a1 + 968))
            {
              uint64_t v51 = heap_Alloc(*(void *)(*(void *)a1 + 8), 1024);
              *(void *)(a1 + 968) = v51;
              if (!v51) {
                goto LABEL_102;
              }
            }
            uint64_t Str = ssftmap_FindReadOnly(*(void *)(a1 + 976), (uint64_t)v65, &v56);
            if ((Str & 0x80000000) != 0)
            {
              uint64_t v52 = clcml_ObjOpen(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), v65, &v56);
              if ((v52 & 0x80000000) != 0) {
                return v52;
              }
              uint64_t v53 = ssftmap_Insert(*(void *)(a1 + 976), (uint64_t)v65, v56);
LABEL_96:
              uint64_t Str = v53;
              if ((v53 & 0x80000000) != 0) {
                return Str;
              }
            }
          }
          else
          {
            if ((ssftmap_FindReadOnly(*(void *)(a1 + 976), (uint64_t)v65, &v56) & 0x80000000) == 0)
            {
              uint64_t v52 = ssftmap_Remove(*(void *)(a1 + 976), (uint64_t)v65);
              if ((v52 & 0x80000000) != 0) {
                return v52;
              }
              uint64_t v53 = clcml_ObjClose(v56);
              goto LABEL_96;
            }
            uint64_t Str = 0;
          }
          if (!*v29) {
            return Str;
          }
        }
      }
      return Str;
    }
    return 0;
  }
  return Str;
}

uint64_t fe_clcml_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000);
  if ((result & 0x80000000) != 0) {
    return 2358255624;
  }
  if (a1)
  {
    uint64_t v4 = *(void *)(*a1 + 40);
    uint64_t v10 = a1;
    long long v9 = xmmword_26C21F5F8;
    long long v11 = xmmword_26C21F5F8;
    paramc_ListenerRemove(v4, "extraesclang", (long long *)&v10);
    uint64_t v5 = *(void *)(*a1 + 40);
    uint64_t v10 = a1;
    long long v11 = v9;
    paramc_ListenerRemove(v5, "extraesctn", (long long *)&v10);
    uint64_t v6 = *(void *)(*a1 + 40);
    uint64_t v10 = a1;
    long long v11 = v9;
    paramc_ListenerRemove(v6, "lidvoiceswitch", (long long *)&v10);
    if (a1[122])
    {
      hlp_deactivate((uint64_t)a1);
      ssftmap_ObjClose(a1[122]);
    }
    if (a1[3]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    }
    if (a1[6]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
    }
    if (a1[9]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v7 = a1[121];
    if (v7) {
      heap_Free(*(void **)(*a1 + 8), v7);
    }
    uint64_t v8 = a1[123];
    if (v8) {
      heap_Free(*(void **)(*a1 + 8), v8);
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_deactivate(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t result = *(void *)(a1 + 976);
  if (result)
  {
    uint64_t result = ssftmap_IteratorOpen(result, 0, 1, (uint64_t)&v4);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      while ((ssftmap_IteratorNext(v4, &v3, &v2) & 0x80000000) == 0)
      {
        clcml_ObjClose(v2);
        ssftmap_IteratorRemove(v4);
      }
      return ssftmap_IteratorClose((uint64_t)v4);
    }
  }
  return result;
}

uint64_t fe_clcml_ObjReopen(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000);
  if ((result & 0x80000000) != 0) {
    return 2358255624;
  }
  if (a1)
  {
    hlp_deactivate((uint64_t)a1);
    uint64_t v4 = a1[123];
    if (v4)
    {
      heap_Free(*(void **)(*a1 + 8), v4);
      a1[123] = 0;
    }
    return hlp_activate((uint64_t)a1);
  }
  return result;
}

uint64_t fe_clcml_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 62600, 1000) & 0x80000000) != 0) {
    return 2358255624;
  }
  synstrmaux_InitStreamOpener(a1 + 80, *(void *)(*(void *)a1 + 32), (uint64_t)"FE_CLCML");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 80), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 904);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 80), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 80), (uint64_t)"text/plain;charset=utf-8", a1 + 936);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 80), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 952);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 80), *(void *)(a1 + 24), a3, a4);
  if ((v7 & 0x80000000) != 0) {
    synstrmaux_CloseStreams((_WORD *)(a1 + 80), *(void *)(a1 + 24));
  }
  return v7;
}

uint64_t fe_clcml_Process(const char **a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2358255626;
  memset(v62, 0, sizeof(v62));
  int __src = 0;
  memset(__n, 0, sizeof(__n));
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v55 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000) & 0x80000000) != 0) {
    return 2358255624;
  }
  uint64_t v54 = 0;
  *a5 = 1;
  uint64_t result = (*((uint64_t (**)(const char *, const char *, unsigned char *, unsigned char *))a1[3] + 18))(a1[113], a1[114], &v62[8], v62);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*((uint64_t (**)(const char *, const char *, unsigned char *, unsigned char *))a1[3] + 18))(a1[115], a1[116], &v62[4], v62);
    if ((result & 0x80000000) == 0)
    {
      if (*(_DWORD *)&v62[8])
      {
        uint64_t v9 = (*((uint64_t (**)(const char *, const char *, void **, _DWORD *))a1[3] + 11))(a1[113], a1[114], &__src, __n);
        if ((v9 & 0x80000000) != 0) {
          goto LABEL_82;
        }
        uint64_t v10 = (char *)heap_Alloc(*((void *)*a1 + 1), (__n[0] + 1));
        *(void *)&__n[1] = v10;
        if (v10)
        {
          unsigned __int16 v15 = v10;
          memcpy(v10, __src, __n[0]);
          v15[__n[0]] = 0;
          uint64_t v9 = (*((uint64_t (**)(const char *, const char *, void **, char *))a1[3] + 11))(a1[115], a1[116], &v59, (char *)&v56 + 4);
          if ((v9 & 0x80000000) != 0) {
            goto LABEL_82;
          }
          unsigned int v16 = HIDWORD(v56);
          unsigned int v17 = HIDWORD(v56) >> 5;
          LODWORD(v56) = HIDWORD(v56) >> 5;
          HIDWORD(v56) >>= 5;
          uint64_t v18 = heap_Calloc(*((void **)*a1 + 1), 1, v16 & 0xFFFFFFE0);
          uint64_t v58 = (uint64_t *)v18;
          uint64_t v19 = *a1;
          if (!v18)
          {
LABEL_23:
            log_OutPublic(*((void *)v19 + 4), (uint64_t)"FE_CLCML", 60000, 0, v11, v12, v13, v14, v52);
LABEL_83:
            if (*(void *)&__n[1]) {
              heap_Free(*((void **)*a1 + 1), *(uint64_t *)&__n[1]);
            }
            uint64_t v47 = (uint64_t)v58;
            if (v58)
            {
              unint64_t v48 = v56;
              if (v56)
              {
                unint64_t v49 = 0;
                uint64_t v50 = v57;
                uint64_t v51 = v58 + 3;
                do
                {
                  if (v50 && *(_DWORD *)(v50 + 4 * v49) && *v51) {
                    heap_Free(*((void **)*a1 + 1), *v51);
                  }
                  ++v49;
                  v51 += 4;
                }
                while (v49 < v48);
              }
              heap_Free(*((void **)*a1 + 1), v47);
            }
            if (v57) {
              heap_Free(*((void **)*a1 + 1), v57);
            }
            return v7;
          }
          int v20 = (char *)v18;
          uint64_t v57 = heap_Calloc(*((void **)v19 + 1), 1, 4 * HIDWORD(v56));
          if (v57)
          {
            int v53 = *((_DWORD *)v59 + 3);
            memcpy(v20, v59, 32 * HIDWORD(v56));
            uint64_t v9 = (*((uint64_t (**)(const char *, const char *, int *, void))a1[6] + 14))(a1[4], a1[5], &v55, 0);
            if ((v9 & 0x80000000) != 0) {
              goto LABEL_82;
            }
            if (!a1[123]) {
              goto LABEL_76;
            }
            if (v16 < 0x20)
            {
              unsigned int v21 = 0;
              unsigned int v22 = 0;
              uint64_t v23 = 0;
              unsigned int v24 = 0;
              int v25 = 0;
              uint64_t v26 = "normal";
LABEL_67:
              uint64_t v54 = 0;
              unsigned int v43 = strlen(v15);
              unsigned int v44 = v24 - v53;
              BOOL v45 = v44 < v43 && v25 == 0;
              if (!v45 || (hlp_getclcml((uint64_t)a1, v23, v26, &v54) & 0x80000000) != 0 || !v54)
              {
LABEL_76:
                size_t v46 = strlen(v15);
                if (!v46
                  || (uint64_t v9 = (*((uint64_t (**)(const char *, const char *, const char *, void))a1[3] + 13))(a1[117], a1[118], v15, (v46 + 1)), (v9 & 0x80000000) == 0))
                {
                  uint64_t v9 = (*((uint64_t (**)(const char *, const char *, void))a1[3] + 12))(a1[113], a1[114], __n[0]);
                  if ((v9 & 0x80000000) == 0)
                  {
                    uint64_t v9 = (*((uint64_t (**)(const char *, const char *, uint64_t *, void))a1[3] + 13))(a1[119], a1[120], v58, (32 * v56));
                    if ((v9 & 0x80000000) == 0)
                    {
                      uint64_t v9 = (*((uint64_t (**)(const char *, const char *, void))a1[3] + 12))(a1[115], a1[116], (32 * HIDWORD(v56)));
                      if ((v9 & 0x80000000) == 0)
                      {
                        int v55 = v55 + strlen(v15) - __n[0] + 1;
                        uint64_t v9 = (*((uint64_t (**)(const char *, const char *))a1[6] + 13))(a1[4], a1[5]);
                      }
                    }
                  }
                }
                goto LABEL_82;
              }
              uint64_t v9 = hlp_processclcml(a1, v54, (uint64_t *)&__n[1], v44, v43, (uint64_t *)&v58, &v57, v22, v21, &v56, v23, v26);
              if ((v9 & 0x80000000) == 0)
              {
                unsigned __int16 v15 = *(const char **)&__n[1];
                goto LABEL_76;
              }
LABEL_82:
              uint64_t v7 = v9;
              goto LABEL_83;
            }
            int v25 = 0;
            unsigned int v24 = 0;
            uint64_t v28 = 0;
            unsigned int v22 = 0;
            unsigned int v21 = 0;
            uint64_t v26 = "normal";
            while (1)
            {
              unsigned int v29 = *(_DWORD *)&v20[32 * v21];
              BOOL v30 = v29 > 0x33;
              uint64_t v31 = (1 << v29) & 0x8011400200080;
              if (!v30 && v31 != 0)
              {
                uint64_t v33 = v21;
                uint64_t v54 = 0;
                uint64_t v34 = &v20[32 * v21];
                unsigned int v36 = *((_DWORD *)v34 + 3);
                int v35 = v34 + 12;
                if (v36 > v24 && v25 == 0)
                {
                  unint64_t v38 = v28;
                  if ((hlp_getclcml((uint64_t)a1, v28, v26, &v54) & 0x80000000) == 0 && v54)
                  {
                    uint64_t v9 = hlp_processclcml(a1, v54, (uint64_t *)&__n[1], v24 - v53, *v35 - v53, (uint64_t *)&v58, &v57, v22, v21, &v56, v38, v26);
                    if ((v9 & 0x80000000) != 0) {
                      goto LABEL_82;
                    }
                    if (**(unsigned char **)(v54 + 104)) {
                      uint64_t v33 = v21 + 2;
                    }
                    else {
                      uint64_t v33 = v21;
                    }
                    int v20 = (char *)v58;
                    unsigned int v21 = v33;
                  }
                  uint64_t v28 = v38;
                }
                if (*(_DWORD *)&v20[32 * v33] == 51) {
                  *(_DWORD *)&v20[32 * v33 + 16] = 0;
                }
                unint64_t v39 = &v20[32 * v33];
                unsigned int v24 = *((_DWORD *)v39 + 3);
                unsigned int v17 = v56;
                if (v21 < v56)
                {
                  int v40 = (char **)(v39 + 24);
                  while (1)
                  {
                    if (*((_DWORD *)v40 - 3) != v24)
                    {
                      unsigned int v21 = v33;
                      break;
                    }
                    int v41 = *((_DWORD *)v40 - 6);
                    if (v41 == 7)
                    {
                      if (v25) {
                        goto LABEL_54;
                      }
                      int v25 = 1;
                    }
                    else
                    {
                      if (v41 != 21)
                      {
                        if (v41 == 36)
                        {
                          int v25 = 0;
                          uint64_t v28 = *v40;
                        }
                        else
                        {
                          if (v25) {
                            BOOL v42 = 0;
                          }
                          else {
                            BOOL v42 = v41 == 34;
                          }
                          if (v42) {
                            int v25 = 1;
                          }
                        }
                        goto LABEL_61;
                      }
                      uint64_t v26 = *v40;
                      if (v25) {
LABEL_54:
                      }
                        int v25 = 0;
                    }
LABEL_61:
                    v40 += 4;
                    if (v56 == ++v33)
                    {
                      unsigned int v21 = v56;
                      break;
                    }
                  }
                }
                unsigned int v22 = v21--;
              }
              if (++v21 >= v17)
              {
                uint64_t v23 = v28;
                unsigned __int16 v15 = *(const char **)&__n[1];
                goto LABEL_67;
              }
            }
          }
        }
        uint64_t v19 = *a1;
        goto LABEL_23;
      }
      int v27 = *(_DWORD *)v62;
      if (*(void *)v62)
      {
        if (*(_DWORD *)&v62[4])
        {
          uint64_t result = (*((uint64_t (**)(const char *, const char *, const char *, const char *, uint64_t, uint64_t *))a1[3]
                    + 16))(a1[119], a1[120], a1[115], a1[116], 0xFFFFFFFFLL, &v56);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int v27 = *(_DWORD *)v62;
        }
        if (v27) {
          return synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 40, (uint64_t)a1[3]);
        }
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return result;
}

uint64_t hlp_getclcml(uint64_t a1, char *a2, const char *a3, void *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  strcpy(v41, "normal");
  if (a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = v41;
  }
  if (strstr(v7, "_lid"))
  {
    uint64_t v8 = 0;
    do
    {
      __s2[v8] = ssft_tolower(v7[v8]);
      uint64_t v9 = v8 + 1;
      uint64_t v8 = v9;
    }
    while (v9 != 3);
  }
  else
  {
    LODWORD(v9) = *v7;
    if (*v7)
    {
      unint64_t v14 = 0;
      do
      {
        unsigned __int16 v15 = v14 + 1;
        __s2[v14] = ssft_tolower(v7[v14]);
        if (strlen(v7) <= v14 + 1) {
          break;
        }
        BOOL v16 = v14++ >= 0xFE;
      }
      while (!v16);
      LODWORD(v9) = v15;
      if (v15 > 0xFEu)
      {
        LODWORD(v10) = 255;
        goto LABEL_20;
      }
    }
  }
  uint64_t v10 = v9 + 1;
  __s2[v9] = 43;
  if (*a3 && v9 <= 0xFD)
  {
    uint64_t v11 = 0;
    do
    {
      __s2[v10 + v11] = ssft_tolower(a3[v11]);
      __int16 v12 = v11 + 1;
      if (strlen(a3) <= v11 + 1) {
        break;
      }
      unint64_t v13 = v10 + v11++;
    }
    while (v13 < 0xFE);
    LODWORD(v10) = (unsigned __int16)(v10 + v12);
  }
LABEL_20:
  __s2[v10] = 0;
  unsigned int v17 = strstr(*(char **)(a1 + 984), __s2);
  if (strstr(v7, "_lid"))
  {
    uint64_t v18 = 0;
    do
    {
      __s2[v18] = ssft_tolower(v7[v18]);
      uint64_t v19 = v18 + 1;
      uint64_t v18 = v19;
    }
    while (v19 != 3);
    goto LABEL_23;
  }
  LODWORD(v19) = *v7;
  if (!*v7)
  {
LABEL_23:
    __s2[v19] = 43;
LABEL_24:
    int v20 = &__s2[v19];
    uint64_t v21 = (v19 + 2);
    v20[1] = 42;
    goto LABEL_25;
  }
  unint64_t v30 = 0;
  do
  {
    unint64_t v31 = v30 + 1;
    __s2[v30] = ssft_tolower(v7[v30]);
    if (strlen(v7) <= v30 + 1) {
      break;
    }
    BOOL v16 = v30++ >= 0xFE;
  }
  while (!v16);
  LODWORD(v19) = (unsigned __int16)v31;
  if ((unsigned __int16)v31 <= 0xFEu)
  {
    __s2[v31] = 43;
    if ((unsigned __int16)v31 != 254) {
      goto LABEL_24;
    }
  }
  uint64_t v21 = 255;
LABEL_25:
  __s2[v21] = 0;
  unsigned int v22 = *(char **)(a1 + 984);
  uint64_t v23 = strstr(v22, __s2);
  if (v23 < v17 || v17 == 0) {
    int v25 = v23;
  }
  else {
    int v25 = v17;
  }
  if (v23) {
    unsigned int v17 = v25;
  }
  *(_WORD *)__s2 = 11050;
  if (*a3)
  {
    uint64_t v26 = 0;
    do
    {
      v44[v26] = ssft_tolower(a3[v26]);
      uint64_t v27 = v26 + 1;
      if (strlen(a3) <= v26 + 1) {
        break;
      }
      unint64_t v28 = v26 + 2;
      ++v26;
    }
    while (v28 < 0xFE);
    unsigned int v22 = *(char **)(a1 + 984);
    uint64_t v29 = v27 + 2;
  }
  else
  {
    uint64_t v29 = 2;
  }
  uint64_t v32 = 2358255616;
  __s2[v29] = 0;
  uint64_t v33 = strstr(v22, __s2);
  if (v33 < v17 || v17 == 0) {
    int v35 = v33;
  }
  else {
    int v35 = v17;
  }
  if (!v33) {
    int v35 = v17;
  }
  if (v35)
  {
    for (uint64_t i = v35 + 2; *(i - 2); ++i)
    {
      if (*(i - 2) == 61)
      {
        int v37 = *(i - 1);
        if (v37 == 44)
        {
          unsigned __int16 v38 = 0;
        }
        else
        {
          unint64_t v39 = 0;
          unsigned __int16 v38 = 0;
          while (v37 && v39 <= 0xFE)
          {
            v42[v39] = v37;
            int v37 = i[v39++];
            ++v38;
            if (v37 == 44) {
              goto LABEL_68;
            }
          }
          unsigned __int16 v38 = v39;
        }
LABEL_68:
        v42[v38] = 0;
        return ssftmap_FindReadOnly(*(void *)(a1 + 976), (uint64_t)v42, a4);
      }
    }
  }
  return v32;
}

uint64_t hlp_processclcml(const char **a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6, uint64_t *a7, unsigned int a8, unsigned int a9, _DWORD *a10, char *a11, const char *a12)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  strcpy(__s, " ");
  __strcat_chk();
  unsigned int v214 = strlen(__s);
  int v216 = *(_DWORD *)(*a6 + 12);
  *(void *)(a2 + 104) = a1[121];
  uint64_t result = clcml_Process(a2, *a3, a4, a5, a11, a12);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v20 = *(const char **)(a2 + 104);
  a1[121] = v20;
  if (!*v20) {
    return result;
  }
  unsigned int v211 = a4;
  unsigned int v213 = a8;
  unsigned int v207 = result;
  BOOL v217 = a6;
  uint64_t v21 = heap_Realloc(*((uint64_t **)*a1 + 1), *a6, 32 * (*a10 + 2));
  uint64_t v26 = (uint64_t *)a1;
  if (!v21) {
    goto LABEL_229;
  }
  uint64_t v27 = v21;
  bzero((void *)(v21 + 32 * *a10), 32 * ((*a10 + 2) - (unint64_t)*a10));
  *a6 = v27;
  uint64_t v28 = heap_Realloc(*((uint64_t **)*a1 + 1), *a7, 4 * (*a10 + 2));
  if (!v28) {
    goto LABEL_229;
  }
  *a7 = v28;
  unsigned int v29 = strlen(a1[121]);
  __dst = (char *)heap_Calloc(*((void **)*a1 + 1), v29 + 8, 1);
  if (!__dst) {
    goto LABEL_229;
  }
  unint64_t v30 = strcpy(__dst, a1[121]);
  *(_WORD *)&__dst[strlen(v30)] = 20;
  strcat(__dst, "EXTCLC");
  log_OutText(*((void *)*a1 + 4), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Inserting phon marker with transcription %s at position %d", v31, v32, v33, (uint64_t)a1[121]);
  uint64_t v34 = a10;
  int v35 = *a10;
  LODWORD(v36) = a8;
  if (*a10 <= a8)
  {
    unint64_t v39 = a8;
    int v37 = v217;
  }
  else
  {
    int v37 = a6;
    uint64_t v38 = a8 + 1;
    unint64_t v39 = a8;
    memmove((void *)(*v217 + 32 * v38), (const void *)(*v217 + 32 * a8), 32 * (*a10 - a8));
    memmove((void *)(*a7 + 4 * v38), (const void *)(*a7 + 4 * a8), 4 * (*a10 - a8));
    uint64_t v34 = a10;
    int v35 = *a10;
  }
  *uint64_t v34 = v35 + 1;
  uint64_t v40 = *v37 + 32 * v39;
  *(_DWORD *)uint64_t v40 = 34;
  *(void *)(v40 + 24) = __dst;
  uint64_t v41 = *v37;
  BOOL v42 = (_DWORD *)(*v37 + 32 * v39);
  v42[3] = v216 + v211;
  if (a8) {
    int v43 = *(_DWORD *)(v41 + 32 * (a8 - 1) + 4);
  }
  else {
    int v43 = 0;
  }
  unsigned int v210 = v26;
  v42[1] = v43;
  v42[2] = 0;
  v42[4] = 0;
  unint64_t v200 = v39;
  *(_DWORD *)(*a7 + 4 * v39) = 1;
  unsigned int v44 = strlen((const char *)*a3);
  int v45 = utf8_BelongsToSet(0, (unsigned char *)*a3, v211, v44);
  unsigned int NextUtf8Offset = v211;
  if (v211 < a5)
  {
    unsigned int NextUtf8Offset = v211;
    if (v45)
    {
      unsigned int NextUtf8Offset = v211;
      do
      {
        unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
        int v47 = utf8_BelongsToSet(0, (unsigned char *)*a3, NextUtf8Offset, v44);
      }
      while (NextUtf8Offset < a5 && v47 != 0);
    }
  }
  unsigned int v49 = strlen((const char *)*a3);
  int v50 = v216;
  if (NextUtf8Offset < a5)
  {
    unsigned int v51 = v49;
    unsigned int v52 = 0;
    LODWORD(v36) = v213;
    do
    {
      if (!utf8_BelongsToSet(0, (unsigned char *)*a3, NextUtf8Offset, v51))
      {
        do
        {
          unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
          int v53 = utf8_BelongsToSet(0, (unsigned char *)*a3, NextUtf8Offset, v51);
        }
        while (NextUtf8Offset < a5 && v53 == 0);
      }
      if (v36 < *a10)
      {
        uint64_t v55 = *v37;
        unint64_t v36 = v36;
        uint64_t v56 = (_DWORD *)(*v37 + 32 * v36 + 12);
        do
        {
          if (*v56 >= NextUtf8Offset + v216) {
            break;
          }
          uint64_t v57 = *(void *)(a2 + 528);
          if (!v57) {
            break;
          }
          if (v52 >= *(unsigned __int16 *)(a2 + 536) || (unsigned int v58 = *(_DWORD *)(v57 + 4 * v52) + v211, v58 >= a5)) {
            int v59 = *(_DWORD *)(v55 + 32 * (v36 - 1) + 12);
          }
          else {
            int v59 = v58 + v216;
          }
          _DWORD *v56 = v59;
          v56 += 8;
          ++v36;
        }
        while (v36 < *a10);
      }
      int v60 = utf8_BelongsToSet(0, (unsigned char *)*a3, NextUtf8Offset, v51);
      if (NextUtf8Offset < a5 && v60)
      {
        do
        {
          unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
          int v61 = utf8_BelongsToSet(0, (unsigned char *)*a3, NextUtf8Offset, v51);
        }
        while (NextUtf8Offset < a5 && v61 != 0);
      }
      ++v52;
    }
    while (NextUtf8Offset < a5);
  }
  uint64_t v202 = a9 + 1;
  if (v36 < *a10)
  {
    unsigned int v63 = v216 + a5;
    unint64_t v64 = v36;
    size_t v65 = (unsigned int *)(*v37 + 32 * v36 + 12);
    do
    {
      if (*v65 >= v63) {
        break;
      }
      *size_t v65 = v63;
      v65 += 8;
      ++v64;
    }
    while (v64 < *a10);
  }
  unint64_t v66 = *a3;
  char v67 = (unsigned __int8 *)(*a3 + a5);
  uint64_t v68 = v67 - 1;
  do
  {
    BOOL v69 = (unint64_t)v68 > v66;
    int v71 = *v68--;
    int v70 = v71;
  }
  while (v69 && memchr("_ \r\n\x1B\t", v70, 7uLL));
  if (memchr("(),;:", v70, 6uLL))
  {
    size_t v72 = strlen(*(const char **)(a2 + 520));
    BOOL v205 = memchr("(),;:", *(char *)(v72 + *(void *)(a2 + 520) - 1), 6uLL) == 0;
  }
  else
  {
    BOOL v205 = 0;
  }
  int v73 = *(v67 - 1);
  if (*(v67 - 1))
  {
    while (memchr("_ \r\n\x1B\t", v73, 7uLL))
    {
      int v74 = *v67++;
      int v73 = v74;
      if (!v74) {
        goto LABEL_63;
      }
    }
    if (memchr("(),;:", v73, 6uLL))
    {
      size_t v75 = strlen(*(const char **)(a2 + 520));
      uint64_t v76 = memchr("(),;:", *(char *)(v75 + *(void *)(a2 + 520) - 1), 6uLL);
      int v77 = v205;
      if (!v76) {
        int v77 = 1;
      }
      BOOL v205 = v77;
    }
  }
LABEL_63:
  uint64_t v78 = v66 + v211 - 1;
  do
  {
    int v80 = *(unsigned __int8 *)++v78;
    int v79 = v80;
  }
  while (memchr("_ \r\n\x1B\t", v80, 7uLL));
  if (!memchr("(),;:", v79, 6uLL)) {
    goto LABEL_71;
  }
  uint64_t v81 = (unsigned __int8 *)((__PAIR128__(v78, v66) - (unint64_t)v78) >> 64);
  if ((unint64_t)v81 > v66)
  {
    while (memchr("_ \r\n\x1B\t", *v81, 7uLL))
    {
      if ((unint64_t)--v81 <= v66)
      {
        uint64_t v81 = (unsigned __int8 *)v66;
        break;
      }
    }
  }
  if (!memchr("(),;:", *v81, 6uLL))
  {
    __int16 v82 = 0;
    v81[1] = 44;
  }
  else
  {
LABEL_71:
    __int16 v82 = 1;
  }
  __int16 v83 = v211 - a5 + strlen(*(const char **)(a2 + 520));
  if (v205) {
    __int16 v84 = 2;
  }
  else {
    __int16 v84 = 1;
  }
  int v85 = (__int16)(v84 + (v82 ^ 1) + v83);
  if (v85 < 1)
  {
    if (!(v84 + ((unsigned __int16)v82 ^ 1) + v83))
    {
      char v96 = v210;
      unsigned int v97 = v214;
      if (v82) {
        goto LABEL_89;
      }
      goto LABEL_91;
    }
    char v201 = v82;
    long long v87 = (const char *)*a3;
  }
  else
  {
    uint64_t v26 = v210;
    __int16 v86 = strlen((const char *)*a3);
    long long v87 = (const char *)heap_Realloc(*(uint64_t **)(*v210 + 8), *a3, (unsigned __int16)(v85 + v86 + 1));
    if (!v87) {
      goto LABEL_229;
    }
    char v201 = v82;
    *a3 = (uint64_t)v87;
    int v50 = v216;
  }
  int v88 = (char *)&v87[v85 + a5];
  int v89 = &v87[a5];
  size_t v90 = strlen(v87);
  memmove(v88, v89, v90 - a5 + 1);
  uint64_t v91 = *v217;
  *(_DWORD *)(*v217 + 16) += v85;
  unsigned int v92 = *a10;
  if (v36 >= *a10)
  {
    a5 += v85;
    char v96 = v210;
    unsigned int v97 = v214;
    if (v201) {
      goto LABEL_89;
    }
LABEL_91:
    *(unsigned char *)(*a3 + v211) = 32;
    unsigned int v98 = v211 + 1;
    goto LABEL_92;
  }
  unsigned int v93 = v50 + a5;
  unint64_t v94 = v36;
  uint64_t v95 = (unsigned int *)(v91 + 32 * v36 + 12);
  char v96 = v210;
  unsigned int v97 = v214;
  do
  {
    if (*v95 >= v93)
    {
      *v95 += v85;
      unsigned int v92 = *a10;
    }
    ++v94;
    v95 += 8;
  }
  while (v94 < v92);
  a5 += v85;
  if ((v201 & 1) == 0) {
    goto LABEL_91;
  }
LABEL_89:
  unsigned int v98 = v211;
LABEL_92:
  int v99 = *(const char **)(a2 + 520);
  if (*v99)
  {
    size_t v100 = 0;
    int v101 = 0;
    do
    {
      *(unsigned char *)(*a3 + v98 + v101) = v99[v100];
      size_t v100 = (v101 + 1);
      int v99 = *(const char **)(a2 + 520);
      size_t v102 = strlen(v99);
      int v101 = v100;
    }
    while (v102 > v100);
  }
  else
  {
    LODWORD(v100) = 0;
  }
  uint64_t v103 = *a3;
  if (v205)
  {
    *(unsigned char *)(v103 + v100 + v98) = 44;
    LODWORD(v100) = v100 + 1;
    uint64_t v103 = *a3;
  }
  *(unsigned char *)(v103 + v100 + v98) = 32;
  unsigned int v104 = strlen((const char *)*a3);
  unsigned int v105 = v98;
  if (utf8_BelongsToSet(1u, (unsigned char *)*a3, v98, v104))
  {
    unsigned int v105 = v98;
    do
      unsigned int v105 = utf8_GetNextUtf8Offset((char *)*a3, v105);
    while (utf8_BelongsToSet(1u, (unsigned char *)*a3, v105, v104));
  }
  unsigned int v212 = v98;
  unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(*a3, a5);
  if (a5)
  {
    unsigned int v110 = PreviousUtf8Offset;
    unsigned int v111 = a5;
    if (utf8_BelongsToSet(1u, (unsigned char *)*a3, PreviousUtf8Offset, v104))
    {
      do
      {
        unsigned int v111 = v110;
        unsigned int v112 = utf8_GetPreviousUtf8Offset(*a3, v110);
        if (!v110) {
          break;
        }
        unsigned int v110 = v112;
      }
      while (utf8_BelongsToSet(1u, (unsigned char *)*a3, v112, v104));
    }
  }
  else
  {
    unsigned int v111 = 0;
  }
  unsigned int v206 = v105;
  if (v105 >= v111)
  {
    unsigned __int16 v114 = 1;
  }
  else
  {
    unsigned int v113 = v105;
    unsigned __int16 v114 = 1;
    do
    {
      if (!*(unsigned char *)(*a3 + v113)) {
        break;
      }
      if (utf8_BelongsToSet(1u, (unsigned char *)*a3, v113, v104))
      {
        ++v114;
        for (; v113 < v111; unsigned int v113 = utf8_GetNextUtf8Offset((char *)*a3, v113))
        {
          if (!utf8_BelongsToSet(1u, (unsigned char *)*a3, v113, v104)) {
            break;
          }
        }
      }
      unsigned int v113 = utf8_GetNextUtf8Offset((char *)*a3, v113);
    }
    while (v113 < v111);
  }
  uint64_t v115 = v96[121];
  unsigned int v116 = 1;
  unsigned __int16 v117 = 1;
  while (1)
  {
    unsigned int v118 = *(unsigned __int8 *)(v115 + v116 - 1);
    if (v118 > 0x5E)
    {
      if (v118 != 95) {
        goto LABEL_129;
      }
LABEL_124:
      ++v117;
      goto LABEL_129;
    }
    if (v118 != 35) {
      break;
    }
    if (*(unsigned char *)(v115 + v116)) {
      goto LABEL_124;
    }
LABEL_129:
    ++v116;
  }
  if (*(unsigned char *)(v115 + v116 - 1)) {
    BOOL v119 = v118 == 18;
  }
  else {
    BOOL v119 = 1;
  }
  if (!v119) {
    goto LABEL_129;
  }
  unsigned __int16 v120 = v114;
  unsigned __int16 v121 = v117;
  if (v114 < v117)
  {
    unsigned __int16 v122 = v117 - v114;
    uint64_t v123 = (unsigned __int16)(v117 - v120);
    log_OutText(*(void *)(*v96 + 32), (uint64_t)"FE_CLCML", 5, 0, (uint64_t)"TYPE1 modification : insert %u dummy words (%u orthographic words, %u phonetic words)", v107, v108, v109, (unsigned __int16)(v121 - v120));
    unsigned int v124 = strlen((const char *)*a3);
    uint64_t v204 = v123 * v97;
    int v125 = (char *)heap_Realloc(*(uint64_t **)(*v96 + 8), *a3, v204 + v124 + 2);
    uint64_t v26 = v96;
    if (v125)
    {
      *a3 = (uint64_t)v125;
      if (a5) {
        unsigned __int16 v126 = a5 - 1;
      }
      else {
        unsigned __int16 v126 = 0;
      }
      while (1)
      {
        if ((v125[v126] | 0x20) != 0x20)
        {
          int v127 = (*(uint64_t (**)(uint64_t, uint64_t))(v96[9] + 128))(v96[7], v96[8]);
          int v125 = (char *)*a3;
          if (!v127) {
            break;
          }
        }
        unsigned __int16 v126 = utf8_GetPreviousUtf8Offset((uint64_t)v125, v126);
        int v125 = (char *)*a3;
      }
      unsigned __int16 v203 = v122;
      uint64_t v131 = (unsigned __int16)utf8_GetNextUtf8Offset(v125, v126);
      size_t v132 = strlen((const char *)*a3);
      memmove((void *)(*a3 + (v204 + v131)), (const void *)(*a3 + v131), v132 - v131 + 2);
      if (v123)
      {
        unsigned int v133 = 0;
        do
        {
          strncpy((char *)(*a3 + v131 + v133), __s, v214);
          v133 += v214;
          --v123;
        }
        while (v123);
      }
      uint64_t v134 = *v217;
      *(_DWORD *)(*v217 + 16) += v204;
      v111 += v204;
      unsigned int v135 = *a10;
      if (*a10 <= v213)
      {
        char v96 = v210;
        unsigned __int16 v130 = v203;
      }
      else
      {
        unsigned int v136 = v131 + v216;
        unint64_t v137 = v200;
        unint64_t v138 = (unsigned int *)(v134 + 32 * v200 + 12);
        char v96 = v210;
        unsigned __int16 v130 = v203;
        do
        {
          if (*v138 >= v136)
          {
            *v138 += v204;
            unsigned int v135 = *a10;
          }
          ++v137;
          v138 += 8;
        }
        while (v137 < v135);
      }
      goto LABEL_166;
    }
    goto LABEL_229;
  }
  if (v114 > v117)
  {
    log_OutText(*(void *)(*v96 + 32), (uint64_t)"FE_CLCML", 5, 0, (uint64_t)"TYPE2 modification : hyphenate words (%u orthographic words, %u phonetic words)", v107, v108, v109, v114);
    unsigned int v128 = a5 - 1;
    if (a5 != 1)
    {
      __int16 v129 = v114 - v117;
      while (*(unsigned char *)(*a3 + v128) == 32)
      {
        unsigned int v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
        if (!v128) {
          goto LABEL_143;
        }
      }
      while (*(unsigned char *)(*a3 + v128) != 32)
      {
        unsigned int v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
        if (!v128) {
          goto LABEL_143;
        }
      }
      while (v129)
      {
        while (*(unsigned char *)(*a3 + v128) == 32)
        {
          *(unsigned char *)(*a3 + v128) = 45;
          unsigned int v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
          if (!v128) {
            goto LABEL_143;
          }
        }
        --v129;
        while (*(unsigned char *)(*a3 + v128) != 32)
        {
          unsigned int v128 = utf8_GetPreviousUtf8Offset(*a3, v128);
          if (!v128) {
            goto LABEL_143;
          }
        }
      }
    }
  }
LABEL_143:
  unsigned __int16 v130 = 0;
LABEL_166:
  int v139 = strlen(a12);
  uint64_t v140 = (char *)heap_Calloc(*(void **)(*v96 + 8), (v139 + 1), 1);
  uint64_t v26 = v96;
  if (v140)
  {
    int v141 = v140;
    strcpy(v140, a12);
    char v142 = a10;
    int v143 = *a10;
    int v144 = v217;
    if (*a10 > v202)
    {
      unsigned __int16 v145 = v130;
      uint64_t v146 = a9 + 2;
      memmove((void *)(*v217 + 32 * v146), (const void *)(*v217 + 32 * v202), 32 * (*a10 - v202));
      int v147 = (void *)(*a7 + 4 * v146);
      unsigned __int16 v130 = v145;
      memmove(v147, (const void *)(*a7 + 4 * v202), 4 * (*a10 - v202));
      char v142 = a10;
      int v143 = *a10;
    }
    uint64_t v26 = v210;
    *char v142 = v143 + 1;
    uint64_t v148 = *v217 + 32 * v202;
    *(_DWORD *)uint64_t v148 = 21;
    *(void *)(v148 + 24) = v141;
    int v149 = v130 * v214;
    uint64_t v150 = *v217;
    int v151 = (_DWORD *)(*v217 + 32 * v202);
    if (v149 + a5 <= v104) {
      unsigned int v152 = a5 + v216 + v149;
    }
    else {
      unsigned int v152 = v216 + v104;
    }
    v151[3] = v152;
    if (a9 == -1) {
      int v153 = 0;
    }
    else {
      int v153 = *(_DWORD *)(v150 + 32 * a9 + 4);
    }
    v151[1] = v153;
    v151[2] = 0;
    v151[4] = 0;
    *(_DWORD *)(*a7 + 4 * v202) = 1;
    if (*(_WORD *)(a2 + 260))
    {
      uint64_t v154 = 0;
      while (1)
      {
        uint64_t v215 = v154;
        uint64_t v155 = a2 + 2 * v154;
        int v157 = *(unsigned __int16 *)(v155 + 132);
        char v156 = (_WORD *)(v155 + 132);
        int v158 = v157 ? 3 : 1;
        uint64_t v159 = heap_Realloc(*(uint64_t **)(*v26 + 8), *v144, 32 * (*v142 + v158));
        if (!v159) {
          goto LABEL_229;
        }
        *BOOL v217 = v159;
        uint64_t v160 = heap_Realloc(*(uint64_t **)(*v26 + 8), *a7, 4 * (*a10 + v158));
        if (!v160) {
          goto LABEL_229;
        }
        *a7 = v160;
        unsigned int v161 = strlen((const char *)*a3);
        if (*v156)
        {
          unsigned int v162 = v161;
          unsigned int v163 = 0;
          unsigned int v164 = v206;
          int v165 = v217;
          uint64_t v26 = v210;
          do
          {
            if (utf8_BelongsToSet(1u, (unsigned char *)*a3, v164, v162))
            {
              ++v163;
              for (; v164 < v111; unsigned int v164 = utf8_GetNextUtf8Offset((char *)*a3, v164))
              {
                if (!utf8_BelongsToSet(1u, (unsigned char *)*a3, v164, v162)) {
                  break;
                }
              }
            }
            unsigned int v164 = utf8_GetNextUtf8Offset((char *)*a3, v164);
            unsigned int v166 = (unsigned __int16)*v156;
          }
          while (v163 < v166);
        }
        else
        {
          unsigned int v166 = 0;
          unsigned int v164 = v206;
          int v165 = v217;
          uint64_t v26 = v210;
        }
        if (v164 > v212)
        {
          unsigned int v164 = utf8_GetPreviousUtf8Offset(*a3, v164);
          unsigned int v166 = (unsigned __int16)*v156;
        }
        LODWORD(v167) = v213;
        uint64_t v168 = *v165;
        unsigned int v169 = v164 + v216;
        if (v166)
        {
          LODWORD(v167) = v213 - 1;
          do
            uint64_t v167 = (v167 + 1);
          while (*(_DWORD *)(v168 + 32 * v167 + 12) + 1 < v169);
          uint64_t v170 = (char *)heap_Calloc(*(void **)(*v26 + 8), 7, 1);
          if (!v170) {
            goto LABEL_229;
          }
          uint64_t v171 = v170;
          uint64_t v172 = (v167 + 1);
          strcpy(v170, "normal");
          memmove((void *)(*v217 + 32 * v172), (const void *)(*v217 + 32 * v167), 32 * (*a10 - v167));
          memmove((void *)(*a7 + 4 * v172), (const void *)(*a7 + 4 * v167), 4 * (*a10 - v167));
          ++*a10;
          uint64_t v173 = *v217 + 32 * v167;
          *(_DWORD *)uint64_t v173 = 21;
          *(void *)(v173 + 24) = v171;
          if (v164) {
            unsigned int v174 = v216 - 1 + v164;
          }
          else {
            unsigned int v174 = v216;
          }
          uint64_t v168 = *v217;
          uint64_t v175 = (_DWORD *)(*v217 + 32 * v167);
          v175[3] = v174;
          if (v167) {
            int v176 = *(_DWORD *)(v168 + 32 * (v167 - 1) + 4);
          }
          else {
            int v176 = 0;
          }
          uint64_t v26 = v210;
          v175[1] = v176;
          v175[2] = 0;
          v175[4] = 0;
          *(_DWORD *)(*a7 + 4 * v167) = 1;
          LODWORD(v167) = v167 + 1;
        }
        do
        {
          uint64_t v177 = v167;
          unsigned int v178 = *(_DWORD *)(v168 + 32 * v167 + 12);
          uint64_t v167 = (v167 + 1);
        }
        while (v178 < v169);
        int v179 = (char *)heap_Calloc(*(void **)(*v26 + 8), 4, 1);
        if (!v179) {
          goto LABEL_229;
        }
        size_t v180 = v179;
        strcpy(v179, (const char *)(a2 + 4 * v215 + 262));
        memmove((void *)(*v217 + 32 * v167), (const void *)(*v217 + 32 * v177), 32 * (*a10 - v167 + 1));
        memmove((void *)(*a7 + 4 * v167), (const void *)(*a7 + 4 * v177), 4 * (*a10 - v167 + 1));
        char v142 = a10;
        ++*a10;
        uint64_t v181 = *v217 + 32 * v177;
        *(_DWORD *)uint64_t v181 = 36;
        *(void *)(v181 + 24) = v180;
        uint64_t v182 = *v217;
        int v183 = (_DWORD *)(*v217 + 32 * v177);
        v183[3] = v169;
        if (v167 == 1) {
          int v184 = 0;
        }
        else {
          int v184 = *(_DWORD *)(v182 + 32 * (v167 - 2) + 4);
        }
        uint64_t v26 = v210;
        v183[1] = v184;
        v183[2] = 0;
        v183[4] = 0;
        *(_DWORD *)(*a7 + 4 * v177) = 1;
        if (*v156)
        {
          if (v215) {
            unsigned int v185 = *(unsigned __int16 *)(a2 + 2 * (v215 - 1) + 132);
          }
          else {
            unsigned int v185 = 0;
          }
          if (v185 >= (unsigned __int16)*v156)
          {
            uint64_t v186 = 0;
          }
          else
          {
            uint64_t v186 = 0;
            do
            {
              int v187 = __dst[v186];
              if (v187 == 95 || v187 == 35) {
                ++v185;
              }
              uint64_t v186 = (unsigned __int16)utf8_GetNextUtf8Offset(__dst, (unsigned __int16)v186);
            }
            while (v185 < (unsigned __int16)*v156);
          }
          uint64_t v26 = v210;
          int v188 = strlen(&__dst[v186]);
          unsigned int v189 = (char *)heap_Calloc(*(void **)(*v210 + 8), (v188 + 1), 1);
          if (!v189) {
            goto LABEL_229;
          }
          int __src = v189;
          strcpy(v189, &__dst[v186]);
          uint64_t v190 = &__dst[(unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)__dst, v186)];
          *(_WORD *)uint64_t v190 = 20;
          strcat(v190, "EXTCLC");
          log_OutText(*(void *)(*v210 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Inserting phon marker with transcription %s at position %d", v191, v192, v193, v210[121]);
          uint64_t v194 = (v167 + 1);
          memmove((void *)(*v217 + 32 * v194), (const void *)(*v217 + 32 * v167), 32 * (*a10 - v167));
          memmove((void *)(*a7 + 4 * v194), (const void *)(*a7 + 4 * v167), 4 * (*a10 - v167));
          char v142 = a10;
          ++*a10;
          uint64_t v195 = *v217 + 32 * v167;
          *(_DWORD *)uint64_t v195 = 34;
          *(void *)(v195 + 24) = __src;
          uint64_t v196 = *v217;
          int v197 = (_DWORD *)(*v217 + 32 * v167);
          v197[3] = v169;
          if (v167) {
            int v198 = *(_DWORD *)(v196 + 32 * v177 + 4);
          }
          else {
            int v198 = 0;
          }
          v197[1] = v198;
          v197[2] = 0;
          v197[4] = 0;
          *(_DWORD *)(*a7 + 4 * v167) = 1;
          unsigned int v213 = v167 + 1;
          __dst = __src;
          int v144 = v217;
          uint64_t v26 = v210;
        }
        else
        {
          unsigned int v213 = v167 + 1;
          int v144 = v217;
        }
        uint64_t v154 = v215 + 1;
        if (v215 + 1 >= (unint64_t)*(unsigned __int16 *)(a2 + 260)) {
          return v207;
        }
      }
    }
    return v207;
  }
  else
  {
LABEL_229:
    log_OutPublic(*(void *)(*v26 + 32), (uint64_t)"FE_CLCML", 60000, 0, v22, v23, v24, v25, v199);
    return 2358255626;
  }
}

uint64_t fe_clcml_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62600, 1000) & 0x80000000) != 0) {
    return 2358255624;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 80), v3);
}

uint64_t fe_clcml_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2358255617;
  }
  uint64_t result = 0;
  *a2 = &IFeClcml;
  return result;
}

char *hlp_StringAppend(uint64_t *a1, char *a2, char *__s, unsigned int *a4)
{
  if (!__s) {
    return a2;
  }
  unsigned int v8 = strlen(__s);
  unsigned int v9 = v8;
  if (!a2)
  {
    unsigned int v12 = v8 + 129;
    unint64_t v13 = (char *)heap_Alloc((uint64_t)a1, v8 + 129);
    a2 = v13;
    if (!v13) {
      return a2;
    }
    if (a4) {
      *a4 = v12;
    }
    int v10 = 0;
    *unint64_t v13 = 0;
LABEL_11:
    strncat(a2, __s, v9);
    a2[v10 + v9] = 0;
    return a2;
  }
  if (!a4) {
    return 0;
  }
  int v10 = strlen(a2);
  if (v9 + v10 + 1 < *a4) {
    goto LABEL_11;
  }
  uint64_t v11 = v9 + *a4 + 129;
  *a4 = v11;
  a2 = (char *)heap_Realloc(a1, (uint64_t)a2, v11);
  if (a2) {
    goto LABEL_11;
  }
  return a2;
}

uint64_t clcpipeline_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  unsigned __int16 v122 = 0;
  uint64_t v123 = 0;
  unsigned __int16 v120 = 0;
  unsigned __int16 v121 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v121);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v13 = 2358255626;
  *a5 = 0;
  *a6 = 0;
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"BROKERSTRING", &v123) & 0x80000000) != 0 || !*v123) {
    return 2358255623;
  }
  log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"clcpipeline_ObjOpen : Begin %s", v14, v15, v16, *v123);
  unsigned int v17 = (void *)heap_Calloc((void *)v121[1], 1, 48);
  uint64_t v22 = (uint64_t)v17;
  if (!v17)
  {
    log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16000, 0, v18, v19, v20, v21, v111);
    uint64_t v80 = 0;
    goto LABEL_52;
  }
  uint64_t v112 = a4;
  unsigned int v113 = a6;
  uint64_t v114 = a2;
  uint64_t v115 = a3;
  unsigned __int16 v117 = a5;
  uint64_t v118 = 0;
  *unsigned int v17 = v121;
  uint64_t v23 = v17 + 3;
  unsigned int v24 = 1;
  do
  {
    uint64_t ReadOnly = ssftmap_FindReadOnly(a3, (uint64_t)"COMPONENTS", &v123);
    if ((ReadOnly & 0x80000000) != 0
      || (uint64_t ReadOnly = ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120), (ReadOnly & 0x80000000) != 0))
    {
      uint64_t v13 = ReadOnly;
      uint64_t v81 = v121[4];
      unsigned int v111 = "clcpipeline";
      __int16 v83 = "%s%s";
      uint64_t v82 = 16072;
      goto LABEL_49;
    }
    for (unsigned __int16 i = 0; (ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0; ++i)
    {
      if (v24 == 1)
      {
        if (!v122 || strcmp(v122, "COMPONENT"))
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16091, "%s%s%s%s", v30, v31, v32, v33, "clcpipeline");
          goto LABEL_40;
        }
        if (!*v123 || !*(unsigned char *)*v123)
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16092, "%s%s", v30, v31, v32, v33, "clcpipeline");
LABEL_40:
          uint64_t v13 = 2358255620;
          goto LABEL_50;
        }
      }
      else
      {
        int v35 = v121;
        unint64_t v36 = (char *)*v123;
        if (*v23)
        {
          int v37 = heap_strdup(v121[1], (char *)*v123);
          uint64_t v38 = i + 2;
          *(void *)(*(void *)(v22 + 40) + 8 * v38) = v37;
          compstats_Start(*(void *)(v22 + 24), *(void *)(v22 + 32), v38, v39, v40, v41, v42, v43);
        }
        unsigned int v44 = (_WORD *)heap_Calloc((void *)v35[1], 1, 40);
        if (!v44)
        {
          uint64_t v81 = v35[4];
          goto LABEL_42;
        }
        int v45 = v44;
        *(void *)(*(void *)(v22 + 8) + 8 * i) = v44;
        _WORD *v44 = 1;
        size_t v46 = heap_strdup(v35[1], v36);
        v45[1] = v46;
        if (!v46)
        {
          log_OutPublic(v35[4], (uint64_t)"FE_CLCML", 16000, 0, v47, v48, v49, v50, v111);
LABEL_45:
          uint64_t v84 = v45[1];
          a5 = v117;
          uint64_t v80 = v118;
          if (v84) {
            heap_Free((void *)v35[1], v84);
          }
          heap_Free((void *)v35[1], (uint64_t)v45);
          *(void *)(*(void *)(v22 + 8) + 8 * i) = 0;
          goto LABEL_52;
        }
        v45[3] = safeh_GetNullHandle();
        v45[4] = v51;
        uint64_t v52 = brk_InterfaceQuery(v35[3]);
        if ((v52 & 0x80000000) != 0)
        {
          uint64_t v13 = v52;
          goto LABEL_45;
        }
        if (*v23) {
          compstats_Stop(*v23, *(void *)(v22 + 32), i + 2, v53, v54, v55, v56, v57);
        }
      }
    }
    ssftmap_IteratorClose((uint64_t)v120);
    unsigned __int16 v120 = 0;
    if (v24 != 1)
    {
LABEL_30:
      a3 = v115;
      continue;
    }
    uint64_t v58 = heap_Calloc((void *)v121[1], i, 8);
    *(void *)(v22 + 8) = v58;
    if (!v58)
    {
      uint64_t v81 = v121[4];
LABEL_42:
      uint64_t v82 = 16000;
      __int16 v83 = 0;
LABEL_49:
      log_OutPublic(v81, (uint64_t)"FE_CLCML", v82, v83, v26, v27, v28, v29, v111);
      goto LABEL_50;
    }
    *(_WORD *)(v22 + 16) = i;
    uint64_t v63 = heap_Calloc((void *)v121[1], i, 16);
    uint64_t v64 = v121[4];
    uint64_t v118 = v63;
    if (!v63)
    {
      log_OutPublic(v64, (uint64_t)"FE_CLCML", 16000, 0, v59, v60, v61, v62, v111);
      uint64_t v80 = 0;
      a5 = v117;
      goto LABEL_52;
    }
    if (log_GetLogLevel(v64) < 2) {
      goto LABEL_30;
    }
    compstats_ObjOpen(a1, v114, *(unsigned __int16 *)(v22 + 16) + 3, v22 + 24);
    compstats_Start(*(void *)(v22 + 24), *(void *)(v22 + 32), 0, v65, v66, v67, v68, v69);
    a3 = v115;
    if (*(void *)(v22 + 24))
    {
      uint64_t v70 = heap_Calloc((void *)v121[1], *(unsigned __int16 *)(v22 + 16) + 3, 8);
      *(void *)(v22 + 40) = v70;
      if (v70)
      {
        **(void **)(v22 + 40) = heap_strdup(v121[1], "Total");
        *(void *)(*(void *)(v22 + 40) + 8) = heap_strdup(v121[1], "TTSEG input CB");
        *(void *)(*(void *)(v22 + 40) + 8 * *(unsigned __int16 *)(v22 + 16) + 16) = heap_strdup(v121[1], "TTSEG output CB");
      }
      else
      {
        compstats_ObjClose(*(void *)(v22 + 24), *(void *)(v22 + 32));
        *(void *)(v22 + 24) = safeh_GetNullHandle();
        *(void *)(v22 + 32) = v72;
      }
    }
  }
  while (v24++ < 2);
  int v86 = ssftmap_FindReadOnly(a3, (uint64_t)"PARAMETERS", &v123);
  a5 = v117;
  if ((v86 & 0x80000000) == 0 && (ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120) & 0x80000000) == 0)
  {
    while ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0)
    {
      if (v122 && *v122)
      {
        if (*v123) {
          long long v87 = (char *)*v123;
        }
        else {
          long long v87 = &byte_20D5A22AE;
        }
        paramc_ParamSetStr(v121[5], (uint64_t)v122, v87);
      }
    }
    ssftmap_IteratorClose((uint64_t)v120);
    unsigned __int16 v120 = 0;
  }
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"OBJECTS", &v123) & 0x80000000) == 0
    && (ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0)
    {
      while (1)
      {
        unsigned int v92 = v122;
        if (!v122 || (unsigned int v93 = (unsigned char *)*v123) == 0 || !*v93)
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16099, "%s%s%s%s", v88, v89, v90, v91, "clcpipeline");
          uint64_t v13 = 2358255620;
          goto LABEL_51;
        }
        if (strcmp(v122, "INET"))
        {
          uint64_t Object = clcpipeline_LoadObject(a1, v114, (uint64_t)v92, (uint64_t)v93, v112, v113);
          if ((Object & 0x80000000) != 0) {
            break;
          }
          if (!strcmp(v122, "FE_DCTLKP") && !strcmp((const char *)*v123, "fe/fe_dctlkp"))
          {
            uint64_t Object = clcpipeline_LoadObject(a1, v114, (uint64_t)"FE_NN", (uint64_t)"fe/fe_nn", v112, v113);
            if ((Object & 0x80000000) != 0) {
              break;
            }
          }
        }
        if ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) != 0) {
          goto LABEL_86;
        }
      }
LABEL_131:
      uint64_t v13 = Object;
      goto LABEL_51;
    }
LABEL_86:
    uint64_t Object = clcpipeline_LoadObject(a1, v114, (uint64_t)"CLMOBJECT", (uint64_t)"clmobjectinterface", v112, v113);
    if ((Object & 0x80000000) != 0) {
      goto LABEL_131;
    }
    ssftmap_IteratorClose((uint64_t)v120);
    unsigned __int16 v120 = 0;
  }
  uint64_t v95 = clcpipeline_disclose_location_of_fe_clm_component((uint64_t)v121, v22);
  uint64_t v96 = v95;
  if ((v95 & 0x80000000) != 0)
  {
    uint64_t v13 = v95;
    goto LABEL_51;
  }
  unsigned int v97 = *(unsigned __int16 *)(v22 + 16);
  if (!*(_WORD *)(v22 + 16))
  {
LABEL_104:
    uint64_t v104 = ssftmap_FindReadOnly(v115, (uint64_t)"RESOURCES", &v123);
    if ((v104 & 0x80000000) != 0)
    {
      a5 = v117;
      uint64_t v80 = v118;
    }
    else
    {
      uint64_t v104 = ssftmap_IteratorOpen(v123[2], 0, 0, (uint64_t)&v120);
      uint64_t v105 = v104;
      a5 = v117;
      uint64_t v80 = v118;
      if ((v104 & 0x80000000) == 0) {
        goto LABEL_111;
      }
    }
    uint64_t v105 = 0;
    if ((v104 & 0x1FFF) != 0xD && (v104 & 0x1FFF) != 0x14)
    {
      uint64_t v13 = v104;
      goto LABEL_52;
    }
LABEL_111:
    unsigned int v116 = (uint64_t *)(v22 + 24);
    BOOL v119 = 0;
    while ((ssftmap_IteratorNext(v120, &v122, &v123) & 0x80000000) == 0)
    {
      if (v122 && !strcmp(v122, "RESOURCE"))
      {
        if (*v123 && *(unsigned char *)*v123)
        {
          uint64_t v110 = v123[1];
          if (v110 && (ssftmap_FindReadOnly(v110, (uint64_t)"content-type", &v119) & 0x80000000) == 0 && v119 && *v119)
          {
            log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"ResourceLoad: %s, %s", v107, v108, v109, *v123);
            clcpipeline_ResourceLoad((uint64_t *)v22, 1, v119, (const char *)*v123, 0, 0, 0);
          }
          else
          {
            log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16095, "%s%s", v106, v107, v108, v109, "clcpipeline");
            uint64_t v105 = 2358255620;
          }
        }
        else
        {
          log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16094, "%s%s", v106, v107, v108, v109, "clcpipeline");
        }
      }
      else
      {
        log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16093, "%s%s%s%s", v106, v107, v108, v109, "clcpipeline");
      }
    }
    ssftmap_IteratorClose((uint64_t)v120);
    unsigned __int16 v120 = 0;
    if (*v116)
    {
      a5 = v117;
      uint64_t v80 = v118;
      if (*(void *)(v22 + 40))
      {
        compstats_Stop(*v116, *(void *)(v22 + 32), 0, v75, v76, v77, v78, v79);
        compstats_Log(*(void *)(v22 + 24), *(void *)(v22 + 32), v121[4], "Pipeline Open", *(void *)(v22 + 40), 0, 0);
      }
      uint64_t v13 = v105;
      goto LABEL_52;
    }
    uint64_t v13 = v105;
    a5 = v117;
    uint64_t v80 = v118;
    if (v118) {
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  unint64_t v98 = 0;
  int v99 = (void *)(v118 + 8);
  while (1)
  {
    size_t v100 = *(uint64_t **)(*(void *)(v22 + 8) + 8 * v98);
    if (v100) {
      break;
    }
LABEL_103:
    ++v98;
    v99 += 2;
    if (v98 >= v97) {
      goto LABEL_104;
    }
  }
  if (*v23) {
    compstats_Start(*v23, *(void *)(v22 + 32), (v98 + 2), v75, v76, v77, v78, v79);
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual(v100[3], v100[4], NullHandle, v102))
  {
    log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Open component: %s", v77, v78, v79, v100[1]);
    uint64_t v103 = (*(uint64_t (**)(void, void, _WORD *, uint64_t, uint64_t *))(v100[2] + 32))(*(v99 - 1), *v99, a1, v114, v100 + 3);
    goto LABEL_98;
  }
  if (*(void *)(v100[2] + 48))
  {
    log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Reopen component: %s", v77, v78, v79, v100[1]);
    *unsigned int v113 = 1;
    uint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v100[2] + 48))(v100[3], v100[4]);
LABEL_98:
    uint64_t v96 = v103;
  }
  if (*v23) {
    compstats_Stop(*v23, *(void *)(v22 + 32), (v98 + 2), v75, v76, v77, v78, v79);
  }
  if ((v96 & 0x80000000) == 0)
  {
    unsigned int v97 = *(unsigned __int16 *)(v22 + 16);
    goto LABEL_103;
  }
  log_OutPublic(v121[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v76, v77, v78, v79, "component");
  uint64_t v13 = v96;
LABEL_50:
  a5 = v117;
LABEL_51:
  uint64_t v80 = v118;
LABEL_52:
  if (v120) {
    ssftmap_IteratorClose((uint64_t)v120);
  }
  if (v80) {
LABEL_55:
  }
    heap_Free((void *)v121[1], v80);
LABEL_56:
  if ((v13 & 0x80000000) != 0)
  {
    if (v22) {
      clcpipeline_ObjClose(v22, v73, v74, v75, v76, v77, v78, v79);
    }
  }
  else
  {
    *a5 = v22;
  }
  log_OutText(v121[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"clcpipeline_ObjOpen : End (%x)", v77, v78, v79, v13);
  return v13;
}

uint64_t clcpipeline_LoadObject(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v47 = 0;
  uint64_t v48 = a3;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v46 = v12;
  unsigned int v44 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v47);
  if ((inited & 0x80000000) == 0)
  {
    if ((objc_GetObject(v47[6], a3, &v44) & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      LOBYTE(v41) = 1;
      uint64_t v23 = brk_InterfaceQuery(v47[3]);
      if ((v23 & 0x80000000) != 0) {
        return v23;
      }
      log_OutText(v47[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Open component: %s", v24, v25, v26, a4);
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t, long long *))(*((void *)&v41 + 1) + 32))(NullHandle, v46, a1, a2, &v42);
      if ((v27 & 0x80000000) != 0)
      {
        uint64_t inited = v27;
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v28, v29, v30, v31, "component");
        brk_InterfaceRelease(v47[3], *((uint64_t *)&v41 + 1));
        return inited;
      }
      uint64_t inited = objc_RegisterObject(v47[6], a3, &v41);
      if ((inited & 0x80000000) != 0)
      {
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v32, v33, v34, v35, "component");
      }
      else
      {
        if (!a5 || vector_Add(a5, &v48)) {
          return inited;
        }
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16000, 0, v36, v37, v38, v39, v40);
        uint64_t inited = 2358255626;
      }
      (*(void (**)(void, void))(*((void *)&v41 + 1) + 40))(v42, *((void *)&v42 + 1));
      brk_InterfaceRelease(v47[3], *((uint64_t *)&v41 + 1));
      return inited;
    }
    uint64_t v17 = v44[1];
    if (*(void *)(v17 + 48))
    {
      log_OutText(v47[4], (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Reopen object: %s", v14, v15, v16, a3);
      if (a6) {
        *a6 = 1;
      }
      uint64_t inited = (*(uint64_t (**)(void, void))(v17 + 48))(v44[2], v44[3]);
      if ((inited & 0x80000000) != 0) {
        log_OutPublic(v47[4], (uint64_t)"FE_CLCML", 16001, "%s%s%s%x", v18, v19, v20, v21, "component");
      }
    }
    objc_ReleaseObject(v47[6], a3);
  }
  return inited;
}

uint64_t clcpipeline_disclose_location_of_fe_clm_component(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = paramc_ParamSetUInt(*(void *)(a1 + 40), (uint64_t)"fe_clm_component", 0);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  uint64_t v5 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16)) {
    return v4;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  unsigned __int16 v8 = -1;
  unsigned __int16 v9 = -1;
  do
  {
    uint64_t v10 = *(void *)(v7 + 8 * v6);
    if (v10)
    {
      uint64_t v11 = *(const char **)(v10 + 8);
      if (!strcmp(v11, "fe/fe_clm"))
      {
        unsigned __int16 v9 = v6;
      }
      else if (!strcmp(v11, "fe/fe_global"))
      {
        unsigned __int16 v8 = v6;
      }
    }
    ++v6;
  }
  while (v5 != v6);
  if (v9 == 0xFFFF || v8 == 0xFFFF) {
    return v4;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v8 >= v9) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = 2;
  }
  return paramc_ParamSetUInt(v12, (uint64_t)"fe_clm_component", v13);
}

uint64_t clcpipeline_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v14 = 2358255623;
  uint64_t v35 = 0;
  *(void *)&long long v34 = safeh_GetNullHandle();
  *((void *)&v34 + 1) = v15;
  if (a1 && a3)
  {
    uint64_t v16 = *a1;
    if (a4)
    {
      if (strstr(a3, ";loader=broker"))
      {
        *(void *)uint64_t v33 = 0;
        uint64_t Str = paramc_ParamGetStr(*(void *)(v16 + 40), (uint64_t)"langcode", v33);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        int v18 = brokeraux_ComposeBrokerString(v16, a4, 1, 1, *(char **)v33, 0, 0, v36, 0x400uLL);
        if (v18 < 0) {
          return v18 | 0x8C902000;
        }
        a4 = v36;
      }
    }
    else
    {
      a4 = &byte_20D5A22AE;
    }
    if (a7)
    {
      *a7 = safeh_GetNullHandle();
      a7[1] = v19;
    }
    uint64_t ResourceOwner = clcpipeline_FindResourceOwner((uint64_t)a1, a3, (uint64_t *)&v35);
    if ((ResourceOwner & 0x80000000) != 0)
    {
      uint64_t v31 = ResourceOwner;
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"FE_CLCML", 16077, "%s%s%s%s", v21, v22, v23, v24, "uri");
      return v31;
    }
    else
    {
      uint64_t v25 = *(uint64_t (**)(void, void, char *, const char *, uint64_t, uint64_t, long long *))(v35[2] + 64);
      if (v25)
      {
        uint64_t v26 = v25(v35[3], v35[4], a3, a4, a5, a6, &v34);
        uint64_t v14 = v26;
        if ((v26 & 0x80000000) != 0)
        {
          if (!a2 || (v26 & 0x1FFF) != 0x40C) {
            log_OutPublic(*(void *)(v16 + 32), (uint64_t)"FE_CLCML", 16038, "%s%s%s%s%s%s%s%x", v27, v28, v29, v30, "component");
          }
        }
        else if (a7)
        {
          *(_OWORD *)a7 = v34;
        }
      }
      else
      {
        log_OutPublic(*(void *)(v16 + 32), (uint64_t)"FE_CLCML", 16039, "%s%s%s%s%s%s", v21, v22, v23, v24, "component");
      }
    }
  }
  return v14;
}

uint64_t clcpipeline_ObjClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2358255622;
  }
  uint64_t v9 = *(void *)a1;
  if (*(void *)(a1 + 8))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10)
    {
      compstats_Reset(v10);
      compstats_Start(*(void *)(a1 + 24), *(void *)(a1 + 32), 0, v11, v12, v13, v14, v15);
    }
    __int16 v16 = *(_WORD *)(a1 + 16);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (unsigned __int16)(v16 - 1) + 2;
      unsigned __int16 v19 = v16 - 1;
      do
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(unsigned __int16 **)(*(void *)(a1 + 8) + 8 * v19);
        if (v21)
        {
          int v22 = *v21;
          BOOL v23 = v22 != 0;
          int v24 = v22 - 1;
          if (v24 != 0 && v23)
          {
            *uint64_t v21 = v24;
          }
          else
          {
            uint64_t NullHandle = safeh_GetNullHandle();
            if (!safeh_HandlesEqual(*((void *)v21 + 3), *((void *)v21 + 4), NullHandle, v26))
            {
              log_OutText(*(void *)(v9 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Close component: %s", v27, v28, v29, *(void *)(*(void *)(*(void *)(a1 + 8) + 8 * v19) + 8));
              uint64_t v35 = *(void *)(a1 + 24);
              if (v35) {
                compstats_Start(v35, *(void *)(a1 + 32), v18, v30, v31, v32, v33, v34);
              }
              uint64_t v36 = *(void **)(*(void *)(a1 + 8) + 8 * v19);
              unsigned int v42 = (*(uint64_t (**)(void, void))(v36[2] + 40))(v36[3], v36[4]);
              uint64_t v43 = *(void *)(a1 + 24);
              if (v43) {
                compstats_Stop(v43, *(void *)(a1 + 32), v18, v37, v38, v39, v40, v41);
              }
              if ((v42 & 0x80000000) != 0)
              {
                log_OutPublic(*(void *)(v9 + 32), (uint64_t)"FE_CLCML", 16002, "%s%s%s%x", v38, v39, v40, v41, "component");
                if ((int)v17 >= 0) {
                  uint64_t v17 = v42;
                }
                else {
                  uint64_t v17 = v17;
                }
              }
            }
            uint64_t v44 = *(void *)(*(void *)(a1 + 8) + 8 * v19);
            uint64_t v45 = *(void *)(v44 + 16);
            if (v45)
            {
              int v46 = brk_InterfaceRelease(*(void *)(v9 + 24), v45);
              if (v46 >= 0 || (int)v17 <= -1) {
                uint64_t v17 = v17;
              }
              else {
                uint64_t v17 = v46;
              }
              uint64_t v44 = *(void *)(*(void *)(a1 + 8) + 8 * v19);
            }
            heap_Free(*(void **)(v9 + 8), *(void *)(v44 + 8));
            heap_Free(*(void **)(v9 + 8), *(void *)(*(void *)(a1 + 8) + 8 * v19));
          }
        }
        uint64_t v18 = (v18 - 1);
        --v19;
      }
      while (v20);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v48 = *(void *)(a1 + 24);
    if (v48)
    {
      compstats_Stop(v48, *(void *)(a1 + 32), 0, a4, a5, a6, a7, a8);
      compstats_Log(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(v9 + 32), "Pipeline Close", *(void *)(a1 + 40), 0, 0);
    }
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 8));
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v49 = *(void *)(a1 + 24);
  if (v49) {
    compstats_ObjClose(v49, *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 40))
  {
    unsigned __int16 v50 = 0;
    do
    {
      uint64_t v51 = *(void *)(*(void *)(a1 + 40) + 8 * v50);
      if (v51) {
        heap_Free(*(void **)(v9 + 8), v51);
      }
      ++v50;
    }
    while (*(unsigned __int16 *)(a1 + 16) + 3 > v50);
    heap_Free(*(void **)(v9 + 8), *(void *)(a1 + 40));
  }
  heap_Free(*(void **)(v9 + 8), a1);
  return v17;
}

uint64_t clcpipeline_FindResourceOwner(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v3 = 2358255623;
  if (a1 && a2 && *a2)
  {
    unint64_t v7 = 0;
    *a3 = 0;
    while (v7 < *(unsigned __int16 *)(a1 + 16))
    {
      uint64_t v20 = 0;
      unsigned __int16 v8 = *(void **)(*(void *)(a1 + 8) + 8 * v7);
      uint64_t v9 = *(uint64_t (**)(void, void, uint64_t *))(v8[2] + 56);
      if (v9)
      {
        int v10 = v9(v8[3], v8[4], &v20);
        uint64_t v11 = *a3;
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v12 = v20;
          if (v20)
          {
            if (v11) {
              return 0;
            }
            unsigned __int16 v13 = 0;
            do
            {
              uint64_t v14 = *(const char **)(v12 + 8 * v13);
              if (!v14) {
                break;
              }
              size_t v15 = strlen(*(const char **)(v12 + 8 * v13));
              if (!strncmp(a2, v14, v15)
                && ((int v17 = a2[v15], v17 != 59) ? (v18 = v17 == 0) : (v18 = 1), v18))
              {
                uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8 * v7);
                *a3 = v11;
                uint64_t v16 = v11;
              }
              else
              {
                uint64_t v16 = 0;
              }
              ++v13;
            }
            while (!v16);
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      ++v7;
      if (v11) {
        return 0;
      }
    }
    return 2358255636;
  }
  return v3;
}

uint64_t clcpipeline_UnloadObjects(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned __int16 v19 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v21);
  if ((inited & 0x80000000) == 0)
  {
    for (int i = 1; i != 3; ++i)
    {
      int Size = vector_GetSize(a3);
      if (Size)
      {
        unsigned int v7 = Size - 1;
        do
        {
          if (!vector_GetElemAt(a3, v7, &v20)) {
            break;
          }
          if ((objc_GetObject(v21[6], *v20, &v19) & 0x80000000) == 0)
          {
            objc_ReleaseObject(v21[6], *v20);
            if (i == 1)
            {
              int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v19[1] + 40))(v19[2], v19[3]);
              if (v8 < 0)
              {
                int v13 = v8;
                log_OutPublic(v21[4], (uint64_t)"FE_CLCML", 16100, "%s%x%s%s", v9, v10, v11, v12, "lherror");
              }
              else
              {
                int v13 = brk_InterfaceRelease(v21[3], v19[1]);
              }
            }
            else
            {
              int v13 = objc_UnregisterObject(v21[6], *v20);
              if (v13 < 0) {
                log_OutPublic(v21[4], (uint64_t)"FE_CLCML", 16101, "%s%x%s%s", v14, v15, v16, v17, "lherror");
              }
            }
            if (v13 >= 0) {
              uint64_t inited = inited;
            }
            else {
              uint64_t inited = v13;
            }
          }
          --v7;
        }
        while (v7 != -1);
      }
    }
  }
  return inited;
}

uint64_t fe_deinitlingdb_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v22 = 0;
  BOOL v23 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned int v19 = 0;
  if (!a5) {
    return 2308972551;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v23);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(v23[6], (uint64_t)"LINGDB", &v21);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(v23[6], (uint64_t)"SYNTHSTREAM", &v22);
  uint64_t v8 = v23[6];
  if ((Object & 0x80000000) != 0)
  {
    uint64_t v16 = "LINGDB";
LABEL_15:
    objc_ReleaseObject(v8, (uint64_t)v16);
    return Object;
  }
  uint64_t Object = objc_GetObject(v8, (uint64_t)"FE_DEPES", &v20);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v23[6], (uint64_t)"LINGDB");
    uint64_t v8 = v23[6];
    uint64_t v16 = "SYNTHSTREAM";
    goto LABEL_15;
  }
  uint64_t v9 = heap_Alloc(v23[1], 928);
  if (v9)
  {
    uint64_t v14 = v9;
    *(void *)uint64_t v9 = v23;
    *(void *)(v9 + 8) = *(void *)(v21 + 8);
    *(void *)(v9 + 16) = *(void *)(v22 + 8);
    uint64_t v15 = v20;
    *(void *)(v9 + 40) = *(void *)(v20 + 8);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v15 + 16);
    *(_DWORD *)(v9 + 920) = 0;
    if ((paramc_ParamGetUInt(v23[5], (uint64_t)"usewordorthography", &v19) & 0x80000000) == 0 && v19 == 1) {
      *(_DWORD *)(v14 + 920) = 1;
    }
    *(void *)a5 = v14;
    *(_DWORD *)(a5 + 8) = 62337;
  }
  else
  {
    log_OutPublic(v23[4], (uint64_t)"FE_DEINITLINGDB", 31000, 0, v10, v11, v12, v13, v18);
    objc_ReleaseObject(v23[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v23[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v23[6], (uint64_t)"FE_DEPES");
    return 2308972554;
  }
  return Object;
}

uint64_t fe_deinitlingdb_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((result & 0x80000000) != 0) {
    return 2308972552;
  }
  if (a1)
  {
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_deinitlingdb_ObjReopen(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2308972552;
  }
}

uint64_t fe_deinitlingdb_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 62337, 928) & 0x80000000) != 0) {
    return 2308972552;
  }
  synstrmaux_InitStreamOpener(a1 + 48, *(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEINITLINGDB");
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"text/plain;charset=depes", a1 + 872);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 888);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"text/x-realspeak-phonemes;charset=tts", a1 + 904);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 48), *(void *)(a1 + 16), a3, a4);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v8 = v7;
LABEL_7:
    synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(void *)(a1 + 16));
    return v8;
  }
  uint64_t v8 = paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"willbeprocessingdeinitlingdb", "yes");
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_7;
  }
  return v8;
}

uint64_t fe_deinitlingdb_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  char __s = 0;
  uint64_t v91 = 0;
  uint64_t v88 = 0;
  int v87 = 0;
  unsigned __int16 v83 = 0;
  int v82 = 0;
  __int16 v81 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 62337, 928);
  if ((result & 0x80000000) != 0) {
    return 2308972552;
  }
  *a5 = 1;
  if (*(void *)(a1 + 872))
  {
    int v92 = 0;
    unsigned __int16 v90 = 0;
    int v89 = 0;
    unsigned int v85 = 0;
    int v86 = 0;
    unsigned __int16 v84 = 0;
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(a1 + 8) + 272))(a3, a4, 98, 3, 0, 0);
    if (v10 < 0) {
      goto LABEL_46;
    }
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v92 + 2);
    if (v10 < 0) {
      goto LABEL_46;
    }
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 8)
                                                                                              + 168))(a3, a4, HIWORD(v92), 3, 1, &v82, &v92);
    if (v10 < 0) {
      goto LABEL_46;
    }
    int v10 = (*(uint64_t (**)(void, void, int *, uint64_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 24), *(void *)(a1 + 32), &v86, 1);
    if (v10 < 0) {
      goto LABEL_46;
    }
    int v10 = (*(uint64_t (**)(void, void, unsigned int *, void))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 24), *(void *)(a1 + 32), &v85, 0);
    if (v10 < 0) {
      goto LABEL_46;
    }
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(*(void *)(a1 + 8) + 184))(a3, a4, HIWORD(v92), 0, &v87);
    uint64_t v12 = *(void *)(a1 + 8);
    if (v11 < 0 || (unsigned __int16)v87 != 1)
    {
      unsigned int v13 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(v12 + 184))(a3, a4, HIWORD(v92), 1, &v87) & 0x80000000) != 0|| (unsigned __int16)v87 != 1|| (v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(*(void *)(a1 + 8)+ 176))(a3, a4, HIWORD(v92), 1, &v91, &v92), (v10 & 0x80000000) == 0)&& ((unsigned int v13 = (unsigned __int16)v92, !(_WORD)v92)|| (v10 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 888), *(void *)(a1 + 896),
                     v91,
                     32 * (unsigned __int16)v92),
             (v10 & 0x80000000) == 0)))
      {
        int v14 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 872), *(void *)(a1 + 880), "##", 3);
        if (v13)
        {
          unsigned int v15 = 0;
          unsigned int v16 = 0;
          uint64_t v17 = (_DWORD *)(v91 + 12);
          uint64_t v18 = v13;
          do
          {
            if (*(v17 - 3) == 8)
            {
              int v19 = v17[3];
              unsigned int v20 = v19 + v15;
              unsigned int v21 = v19 + v16;
              if (*v17 == *(_DWORD *)(v91 + 12)) {
                unsigned int v16 = v21;
              }
              else {
                unsigned int v15 = v20;
              }
            }
            v17 += 8;
            --v18;
          }
          while (v18);
        }
        else
        {
          unsigned int v16 = 0;
          unsigned int v15 = 0;
        }
        if (!(v16 | v15)) {
          goto LABEL_47;
        }
        char v94 = 35;
        if (v16)
        {
          char v95 = 91;
          LH_utoa(v16, v96, 0xAu);
          unsigned int v29 = strlen(&v94);
          *(&v94 + v29) = 93;
          *(&v94 + v29 + 1) = 35;
          uint64_t v30 = v29 + 2;
        }
        else
        {
          char v95 = 35;
          uint64_t v30 = 2;
        }
        int v10 = (*(uint64_t (**)(void, void, char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v94, v30);
        if ((v10 & 0x80000000) == 0)
        {
          if (v15)
          {
            char v94 = 91;
            LH_utoa(v15, &v95, 0xAu);
            unsigned int v31 = strlen(&v94);
            *(&v94 + v31) = 93;
            *(&v94 + v31 + 1) = 0;
            uint64_t v32 = v31 + 2;
          }
          else
          {
            char v94 = 0;
            uint64_t v32 = 1;
          }
          int v10 = (*(uint64_t (**)(void, void, char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v94, v32);
        }
      }
    }
    else
    {
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(v12 + 176))(a3, a4, HIWORD(v92), 0, &__s, &v92);
      if ((v10 & 0x80000000) == 0)
      {
        if ((unsigned __int16)v92 <= 1u)
        {
          int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 872), *(void *)(a1 + 880), "##", 3);
          goto LABEL_46;
        }
        int v22 = strlen(__s);
        int v10 = (*(uint64_t (**)(void, void, char *, void))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 872), *(void *)(a1 + 880), __s, (v22 + 1));
        if (v10 < 0) {
          goto LABEL_46;
        }
        int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(*(void *)(a1 + 8)
                                                                                             + 176))(a3, a4, HIWORD(v92), 1, &v91, &v92);
        if (v10 < 0) {
          goto LABEL_46;
        }
        uint64_t v23 = (unsigned __int16)v92;
        uint64_t v24 = v91 + 12;
        int v25 = *(_DWORD *)(v91 + 12);
        __int16 v80 = v22;
        if ((_WORD)v92)
        {
          uint64_t v26 = 0;
          unsigned __int16 v27 = 0;
          while (*(_DWORD *)v24 == v25)
          {
            if (*(_DWORD *)(v24 - 12) == 8) {
              v27 += *(_WORD *)(v24 + 12);
            }
            ++v26;
            v24 += 32;
            if ((unsigned __int16)v92 == v26)
            {
              unsigned int v28 = (unsigned __int16)v92;
              goto LABEL_58;
            }
          }
          unsigned int v28 = (unsigned __int16)v26;
        }
        else
        {
          unsigned __int16 v27 = 0;
          unsigned int v28 = 0;
        }
LABEL_58:
        int v34 = 1;
        (*(void (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "#", 1);
        if (v27)
        {
          int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "[", 1);
          if (v10 < 0) {
            goto LABEL_46;
          }
          LH_itoa(v27, &v94, 0xAu);
          size_t v35 = strlen(&v94);
          int v10 = (*(uint64_t (**)(void, void, char *, size_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v94, v35);
          if (v10 < 0) {
            goto LABEL_46;
          }
          int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "]", 1);
          if (v10 < 0) {
            goto LABEL_46;
          }
          int v34 = strlen(&v94) + 3;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 8) + 152))(a3, a4, 2, HIWORD(v92), &v87) & 0x80000000) != 0|| !(_WORD)v87)
        {
          unsigned __int16 v67 = v83;
        }
        else
        {
          int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 8)
                                                                                                 + 104))(a3, a4, 2, HIWORD(v92), &v90);
          if (v10 < 0) {
            goto LABEL_46;
          }
          uint64_t v76 = v23;
          int v77 = 0;
          int v36 = 0;
          unsigned int v78 = 0;
          uint64_t v79 = 0;
          int v75 = 1;
          while (v90)
          {
            int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 168))(a3, a4);
            if (v10 < 0) {
              goto LABEL_46;
            }
            int v37 = v89;
            BOOL v38 = (v89 - 9) < 6 || v89 == 4;
            if (v38)
            {
              if (v89 != 11 && HIDWORD(v79) != 0)
              {
                int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "\x12\x10", 2);
                if (v10 < 0) {
                  goto LABEL_46;
                }
                HIDWORD(v79) = 0;
                v34 += 2;
                int v37 = v89;
              }
              if (v37 != 12 && v79)
              {
                int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "\x13\x10", 2);
                if (v10 < 0) {
                  goto LABEL_46;
                }
                LODWORD(v79) = 0;
                v34 += 2;
              }
              int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v90, 1, 1, &v84, &v92);
              if (v10 < 0) {
                goto LABEL_46;
              }
              int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v90, 2, 1, &v83, &v92);
              if (v10 < 0) {
                goto LABEL_46;
              }
              int v40 = v84;
              int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 8)
                                                                                                 + 176))(a3, a4, v90, 3, &v88, &v92);
              if (v10 < 0) {
                goto LABEL_46;
              }
              int v41 = v34 - v40 + v36;
              unsigned int v42 = v88;
              if (!v88 || !*v88) {
                goto LABEL_107;
              }
              int v43 = strlen(v88);
              int v77 = v43;
              if (!*(_DWORD *)(a1 + 920))
              {
                if ((_WORD)v43)
                {
                  uint64_t v44 = 0;
                  char v45 = 0;
                  do
                  {
                    while (v44 && v88[v44] == 42 && v88[(v44 - 1)] != 45)
                    {
                      v88[v44] = 45;
                      char v45 = 1;
                      BOOL v38 = (unsigned __int16)v43 - 1 == v44++;
                      if (v38)
                      {
                        unsigned int v42 = v88;
                        goto LABEL_101;
                      }
                    }
                    ++v44;
                  }
                  while ((unsigned __int16)v43 != v44);
                  unsigned int v42 = v88;
                  if ((v45 & 1) == 0) {
                    goto LABEL_103;
                  }
LABEL_101:
                  __int16 v46 = strlen(v42);
                  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(*(void *)(a1 + 8) + 160))(a3, a4, v90, 3, (unsigned __int16)(v46 + 1), v42, &v81);
                  if (v10 < 0) {
                    goto LABEL_46;
                  }
                  unsigned int v42 = v88;
LABEL_103:
                  if (!v42) {
                    goto LABEL_107;
                  }
                }
              }
              if (*v42)
              {
                if (v75)
                {
                  __int16 v47 = 0;
                  int v48 = v41;
                }
                else
                {
                  uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(void *)(a1 + 16) + 104);
                  uint64_t v63 = *(void *)(a1 + 904);
                  uint64_t v64 = *(void *)(a1 + 912);
                  if (HIWORD(v87))
                  {
                    int v10 = v62(v63, v64, "%#[", 3);
                    if (v10 < 0) {
                      goto LABEL_46;
                    }
                    LH_itoa(HIWORD(v87), &v94, 0xAu);
                    size_t v65 = strlen(&v94);
                    int v10 = (*(uint64_t (**)(void, void, char *, size_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v94, v65);
                    if (v10 < 0) {
                      goto LABEL_46;
                    }
                    int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "]", 1);
                    if (v10 < 0) {
                      goto LABEL_46;
                    }
                    int v48 = v41 + strlen(&v94) + 4;
                    __int16 v47 = v41;
                  }
                  else
                  {
                    int v10 = v62(v63, v64, "-*", 2);
                    if (v10 < 0) {
                      goto LABEL_46;
                    }
                    __int16 v47 = 0;
                    int v48 = v41 + 2;
                  }
                  LODWORD(v23) = v76;
                }
                int v66 = v89;
                if (v89 == 13)
                {
                  int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "\x10\x12", 2);
                  if (v10 < 0) {
                    goto LABEL_46;
                  }
                  v48 += 2;
                  HIDWORD(v79) = 1;
                  int v66 = v89;
                }
                if (v66 == 14)
                {
                  int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "\x10\x13", 2);
                  if (v10 < 0) {
                    goto LABEL_46;
                  }
                  int v41 = v48 + 2;
                  LODWORD(v79) = 1;
                }
                else
                {
                  int v41 = v48;
                }
                if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 8) + 184))(a3, a4, v90, 8, &v87) & 0x80000000) != 0|| (unsigned __int16)v87 != 1)
                {
                  int v75 = 0;
                  HIWORD(v87) = 0;
                }
                else
                {
                  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v90, 8, 1, (char *)&v87 + 2, &v92);
                  if (v10 < 0) {
                    goto LABEL_46;
                  }
                  int v75 = 0;
                }
              }
              else
              {
LABEL_107:
                __int16 v47 = 0;
              }
              unsigned int v49 = v84;
              if (v28 >= v23)
              {
                unsigned __int16 v27 = 0;
              }
              else
              {
                unsigned __int16 v27 = 0;
                uint64_t v50 = v91;
                int v51 = v25 + (__int16)v84 + (__int16)v41;
                int v52 = v25 + (__int16)v84 + v47;
                unsigned int v53 = v78;
                while (1)
                {
                  uint64_t v54 = v50 + 32 * v28;
                  int v56 = *(_DWORD *)(v54 + 12);
                  uint64_t v55 = (int *)(v54 + 12);
                  if (v49 < (unsigned __int16)(v56 - v25)) {
                    break;
                  }
                  *uint64_t v55 = v51;
                  if (*(_DWORD *)(v50 + 32 * v28) == 8)
                  {
                    if (v28)
                    {
                      unsigned int v57 = v28;
                      do
                      {
                        uint64_t v58 = v50 + 32 * (v57 - 1);
                        int v60 = *(_DWORD *)(v58 + 12);
                        uint64_t v59 = (int *)(v58 + 12);
                        if (v60 == *v55) {
                          *uint64_t v59 = v52;
                        }
                        --v57;
                      }
                      while ((_WORD)v57);
                    }
                    v27 += *(_WORD *)(v50 + 32 * v28 + 24);
                    *uint64_t v55 = v52;
                    unsigned int v53 = v49;
                  }
                  if (++v28 >= v23)
                  {
                    unsigned int v78 = v53;
                    unsigned int v28 = v23;
                    goto LABEL_122;
                  }
                }
                unsigned int v78 = v53;
              }
LABEL_122:
              int v36 = v83;
              int v34 = v49 - v83 + v41;
              if (v88 && *v88)
              {
                int v61 = v83;
                int v10 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912));
                if (v10 < 0) {
                  goto LABEL_46;
                }
                v34 += v77;
                int v36 = v61;
                LODWORD(v23) = v76;
              }
            }
            int v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 8) + 120))(a3, a4, v90, &v90);
            if (v14 < 0) {
              goto LABEL_47;
            }
          }
          if (HIDWORD(v79))
          {
            int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "\x12\x10", 2);
            if (v10 < 0) {
              goto LABEL_46;
            }
            LOWORD(v34) = v34 + 2;
          }
          if (v79)
          {
            int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "\x13\x10", 2);
            if (v10 < 0) {
              goto LABEL_46;
            }
            LOWORD(v34) = v34 + 2;
          }
          unsigned __int16 v67 = v83;
          if ((_WORD)v78)
          {
            uint64_t v23 = v76;
            if ((unsigned __int16)v78 == (unsigned __int16)(v83 - 1))
            {
LABEL_150:
              if (v28 >= v23)
              {
                __int16 v71 = v80;
              }
              else
              {
                int v68 = v25 + (__int16)v34 + (__int16)v67 + 1;
                uint64_t v69 = v91 + 32 * v28 + 12;
                uint64_t v70 = v23 - v28;
                __int16 v71 = v80;
                do
                {
                  *(_DWORD *)uint64_t v69 = v68;
                  if (*(_DWORD *)(v69 - 12) == 8) {
                    v27 += *(_WORD *)(v69 + 12);
                  }
                  v69 += 32;
                  --v70;
                }
                while (v70);
              }
              (*(void (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "#", 1);
              __int16 v72 = v34 - v71 + v67 + 1;
              if (v27)
              {
                int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "[", 1);
                if (v10 < 0) {
                  goto LABEL_46;
                }
                LH_itoa(v27, &v94, 0xAu);
                size_t v73 = strlen(&v94);
                int v10 = (*(uint64_t (**)(void, void, char *, size_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), &v94, v73);
                if (v10 < 0) {
                  goto LABEL_46;
                }
                int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), "]", 1);
                if (v10 < 0) {
                  goto LABEL_46;
                }
                v72 += strlen(&v94) + 2;
              }
              (*(void (**)(void, void, char *, uint64_t))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 904), *(void *)(a1 + 912), &byte_20D5A22AE, 1);
              *(_DWORD *)(v91 + 16) += v72;
              int v74 = v85 + v72 + v86;
              unsigned int v85 = 0;
              int v86 = v74;
              int v10 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 24), *(void *)(a1 + 32));
              if ((v10 & 0x80000000) == 0)
              {
                int v10 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 24), *(void *)(a1 + 32), v85, 0);
                if ((v10 & 0x80000000) == 0) {
                  int v10 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 16) + 104))(*(void *)(a1 + 888), *(void *)(a1 + 896), v91, (32 * v23));
                }
              }
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v23 = v76;
          }
        }
        unsigned __int16 v27 = 0;
        goto LABEL_150;
      }
    }
LABEL_46:
    int v14 = v10;
LABEL_47:
    if (v82) {
      int v14 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 48), *(void *)(a1 + 16));
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 64))(a3, a4);
    if (v14 > -1 && (int)result < 0) {
      return result;
    }
    else {
      return v14;
    }
  }
  return result;
}

uint64_t fe_deinitlingdb_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62337, 928) & 0x80000000) != 0) {
    return 2308972552;
  }
  uint64_t result = synstrmaux_CloseStreams((_WORD *)(a1 + 48), *(void *)(a1 + 16));
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 40);
    return paramc_ParamSetStr(v4, (uint64_t)"willbeprocessingdeinitlingdb", "no");
  }
  return result;
}

uint64_t fe_deinitlingdb_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2308972545;
  }
  uint64_t result = 0;
  *a2 = &IFeDeinitlingdb;
  return result;
}

uint64_t sprop_str_realloc(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  if (a3 + 1 <= v3) {
    return 0;
  }
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  do
  {
    unsigned int v6 = v3;
    v3 *= 2;
  }
  while (v6 < a3 + 1);
  uint64_t v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a2, v6);
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t result = 0;
    *(void *)a2 = v12;
    *(_DWORD *)(a2 + 16) = v6;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v8, v9, v10, v11, v14);
    return 2409635850;
  }
  return result;
}

uint64_t sprop_str_dealloc(uint64_t a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 4))
  {
    heap_Free(*(void **)(a1 + 8), *a2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  a2[1] = 0;
  return 0;
}

uint64_t sprop_str_clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    *(void *)(a1 + 8) = 0;
    **(unsigned char **)a1 = 0;
  }
  return 0;
}

uint64_t sprop_str_cat(uint64_t a1, uint64_t a2, char *__s, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (!a4) {
    unsigned int v4 = strlen(__s);
  }
  unsigned int v9 = v4 + v8;
  uint64_t v10 = sprop_str_realloc(a1, a2, v4 + v8);
  if ((v10 & 0x80000000) == 0)
  {
    memcpy((void *)(*(void *)a2 + v8), __s, v4);
    *(unsigned char *)(*(void *)a2 + v9) = 0;
    *(_DWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 12) += Utf8_LengthInUtf8chars((unint64_t)__s, v4);
  }
  return v10;
}

uint64_t sprop_str_copy(uint64_t a1, uint64_t a2, char *a3, unsigned int a4)
{
  if (*(_DWORD *)(a2 + 16))
  {
    *(void *)(a2 + 8) = 0;
    **(unsigned char **)a2 = 0;
  }
  if (!a3) {
    return 0;
  }
  uint64_t result = sprop_str_cat(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sprop_str_take_ownership(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a2 + 16))
  {
    heap_Free(*(void **)(a1 + 8), *(void *)a2);
    *(void *)(a2 + 16) = 0;
  }
  *(void *)a2 = a3;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = a4;
  *(_DWORD *)(a2 + 8) = a4 - 1;
  *(unsigned char *)(a3 + (a4 - 1)) = 0;
  unint64_t v8 = Utf8_LengthInUtf8chars(*(void *)a2, *(_DWORD *)(a2 + 8));
  *(_DWORD *)(a2 + 12) = v8;
  if (*(_DWORD *)(a2 + 8) != v8) {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"utf8length = %d, byte length = %d", v9, v10, v11, v8);
  }
  return 0;
}

uint64_t sprop_ne_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  BOOL v38 = 0;
  uint64_t v39 = 0;
  *(_DWORD *)(a4 + 352) = 0;
  long long __s1 = 0;
  *(void *)int v41 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  *(_OWORD *)unsigned int v42 = 0u;
  long long v43 = 0u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", v41);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"voice", &__s1);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v39);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v9 = heap_Realloc(*(uint64_t **)(a3 + 8), *(void *)a4, 256);
  if (v9)
  {
    unsigned int v14 = (char *)v9;
    *(void *)a4 = v9;
    unsigned int v15 = __s1;
    if (strstr(__s1, "uni"))
    {
      __sprintf_chk(v42, 0, 0x80uLL, "crf/ne/%s/%s/ne", *(const char **)v41, v39);
      unsigned int v16 = 0;
      long long __s1 = 0;
    }
    else
    {
      __sprintf_chk(v42, 0, 0x80uLL, "crf/ne/%s/%s/%s/ne", *(const char **)v41, v15, v39);
      unsigned int v16 = __s1;
    }
    uint64_t v17 = brokeraux_ComposeBrokerString(a3, v42, 1, 1, *(char **)v41, v16, 0, v14, 0x100uLL);
    if ((v17 & 0x80000000) == 0)
    {
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"broker string = %s", v18, v19, v20, *(void *)a4);
      if ((ssftriff_reader_ObjOpen(a1, a2, 2, *(const char **)a4, "CRPH", 1031, (uint64_t *)&v38) & 0x80000000) == 0)
      {
        uint64_t v24 = crf_Init(a1, a2, (uint64_t)v38, a4 + 8);
        if ((v24 & 0x80000000) != 0)
        {
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"error reading named entity model (NE): %x", v25, v26, v27, v24);
        }
        else
        {
          *(_DWORD *)(a4 + 352) = 1;
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"loaded %s", v25, v26, v27, *(void *)a4);
        }
        return ssftriff_reader_ObjClose(v38, v28, v29, v30, v31, v32, v33, v34);
      }
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"no named entity model (NE)", v21, v22, v23, v37);
    }
  }
  else
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 39000, 0, v10, v11, v12, v13, v36);
    return 2409635850;
  }
  return v17;
}

uint64_t sprop_ne_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a2;
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    *(void *)a2 = 0;
  }
  if (*(_DWORD *)(a2 + 352) == 1) {
    crf_Deinit(a2 + 8, v10, a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)(a2 + 352) = 0;
  uint64_t v11 = *(void *)(a2 + 360);
  if (v11 && *(_DWORD *)(a2 + 376))
  {
    unsigned __int16 v12 = 0;
    while (1)
    {
      uint64_t v13 = sprop_str_set_dealloc(a1, *(void *)(a2 + 360) + 16 * v12);
      if ((v13 & 0x80000000) != 0) {
        break;
      }
      if (*(_DWORD *)(a2 + 376) <= ++v12)
      {
        uint64_t v11 = *(void *)(a2 + 360);
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
LABEL_12:
    heap_Free(*(void **)(a1 + 8), v11);
    *(void *)(a2 + 360) = 0;
    heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 368));
    *(void *)(a2 + 368) = 0;
    *(_DWORD *)(a2 + 376) = 0;
  }
  return v13;
}

uint64_t sprop_ne_label(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a2 + 352);
  long long v38 = SPROP_STR_SET_null;
  if (v9)
  {
    int v14 = *(_DWORD *)(a5 + 8);
    if (v14)
    {
      unsigned int v15 = (void *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 360), (16 * v14));
      if (!v15
        || (*(void *)(a2 + 360) = v15,
            bzero(v15, (16 * v14)),
            (uint64_t v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 368), (8 * v14))) == 0))
      {
        uint64_t v33 = 2409635850;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v16, v17, v18, v19, v35);
        return v33;
      }
      *(void *)(a2 + 368) = v20;
    }
    *(_DWORD *)(a2 + 376) = v14;
    uint64_t word_features = sprop_get_word_features(a1, a3, *(void *)(a2 + 360));
    if ((word_features & 0x80000000) == 0)
    {
      uint64_t v37 = 0;
      int v36 = 0;
      if (*(_DWORD *)(a2 + 376))
      {
        for (unsigned __int16 i = 0; ; ++i)
        {
          sprop_str_set_add(a1, (uint64_t)&v38, &byte_20D5A22AE, &byte_20D5A22AE, 0);
          unsigned __int16 v23 = i;
          uint64_t word_features = sprop_str_set_join(a1, v38 + 24 * i, *(void *)(a2 + 360) + 16 * i);
          if ((word_features & 0x80000000) != 0) {
            break;
          }
          uint64_t word_features = sprop_str_set_dealloc(a1, *(void *)(a2 + 360) + 16 * i);
          if ((word_features & 0x80000000) != 0) {
            break;
          }
          *(void *)(*(void *)(a2 + 368) + 8 * i) = *(void *)(v38 + 24 * i);
          unsigned int v24 = *(_DWORD *)(a2 + 376);
          if (v24 <= (unsigned __int16)(v23 + 1))
          {
            if (!v24) {
              return sprop_str_set_dealloc(a1, (uint64_t)&v38);
            }
            uint64_t word_features = crf_Process(a2 + 8, *(void **)(a2 + 368), v24, &v37, &v36);
            if ((word_features & 0x80000000) == 0)
            {
              if (v36 == *(_DWORD *)(a2 + 376))
              {
                if (v36)
                {
                  unsigned __int16 v28 = 0;
                  do
                  {
                    sprop_str_set_add(a1, (uint64_t)a4, &byte_20D5A22AE, &byte_20D5A22AE, 0);
                    int v29 = strlen(*(const char **)(v37 + 8 * v28));
                    sprop_str_take_ownership(a1, *a4 + 24 * v28, *(void *)(v37 + 8 * v28), v29);
                    if (a5 && *(_DWORD *)(*(void *)a5 + 24 * v28 + 8)) {
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"traceFeatureVector ne : %s %s : %s", v25, v26, v27, *(void *)(*(void *)(a2 + 368) + 8 * v28));
                    }
                    ++v28;
                  }
                  while (*(_DWORD *)(a2 + 376) > v28);
                }
                uint64_t v30 = *(void *)(a1 + 32);
                uint64_t v31 = "traceFeatureVector ne : END_OF_SEQUENCE : ";
                uint64_t v32 = 4;
              }
              else
              {
                uint64_t v30 = *(void *)(a1 + 32);
                uint64_t v31 = "sprop_dcme_label: crf_Process returned no predictions";
                uint64_t v32 = 0;
              }
              log_OutText(v30, (uint64_t)"FE_SPROP", v32, 0, (uint64_t)v31, v25, v26, v27, v35);
              if (v37) {
                heap_Free(*(void **)(a1 + 8), v37);
              }
              return sprop_str_set_dealloc(a1, (uint64_t)&v38);
            }
            return word_features;
          }
        }
      }
      else
      {
        return sprop_str_set_dealloc(a1, (uint64_t)&v38);
      }
    }
    return word_features;
  }
  else
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_ne_label: called while model not loaded", a6, a7, a8, v35);
    return 2409635842;
  }
}

uint64_t sprop_str_set_realloc(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  if (v3 >= a3) {
    return 0;
  }
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  do
  {
    unsigned int v6 = v3;
    v3 *= 2;
  }
  while (v6 < a3);
  uint64_t v7 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a2, 24 * v6);
  if (v7)
  {
    *(void *)a2 = v7;
    *(_DWORD *)(a2 + 12) = v6;
    bzero((void *)(v7 + 24 * *(unsigned int *)(a2 + 8)), 24 * (v6 - *(_DWORD *)(a2 + 8)));
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 39000, 0, v8, v9, v10, v11, v13);
  return 2409635850;
}

uint64_t sprop_str_set_dealloc(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 12);
  if (!v2) {
    return 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  while (1)
  {
    uint64_t v5 = sprop_str_dealloc(a1, (uint64_t *)(*(void *)a2 + 24 * v2 - 24));
    if ((v5 & 0x80000000) != 0) {
      break;
    }
    unsigned int v2 = *(_DWORD *)(a2 + 12) - 1;
    *(_DWORD *)(a2 + 12) = v2;
    if (!v2)
    {
      heap_Free(*(void **)(a1 + 8), *(void *)a2);
      *(void *)a2 = 0;
      return v5;
    }
  }
  return v5;
}

uint64_t sprop_str_set_clear(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  do
  {
    uint64_t result = sprop_str_clear(*(void *)a1 + 24 * v1 - 24);
    if ((result & 0x80000000) != 0) {
      break;
    }
    unsigned int v1 = *(_DWORD *)(a1 + 8) - 1;
    *(_DWORD *)(a1 + 8) = v1;
  }
  while (v1);
  return result;
}

uint64_t sprop_str_set_add(uint64_t a1, uint64_t a2, char *a3, char *a4, unsigned int a5)
{
  uint64_t result = sprop_str_set_realloc(a1, a2, *(_DWORD *)(a2 + 8) + 1);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sprop_str_cat(a1, *(void *)a2 + 24 * *(unsigned int *)(a2 + 8), a3, 0);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = sprop_str_cat(a1, *(void *)a2 + 24 * *(unsigned int *)(a2 + 8), a4, a5);
      if ((result & 0x80000000) == 0) {
        ++*(_DWORD *)(a2 + 8);
      }
    }
  }
  return result;
}

uint64_t sprop_str_set_join(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sprop_str_clear(a2);
  if (!*(_DWORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t result = sprop_str_copy(a1, a2, **(char ***)a3, *(_DWORD *)(*(void *)a3 + 8));
  if ((result & 0x80000000) == 0 && *(_DWORD *)(a3 + 8) >= 2u)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 1;
    do
    {
      uint64_t result = sprop_str_cat(a1, a2, " ", 1u);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t result = sprop_str_cat(a1, a2, *(char **)(*(void *)a3 + v7 + 24), *(_DWORD *)(*(void *)a3 + v7 + 32));
      if ((result & 0x80000000) != 0) {
        break;
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a3 + 8));
  }
  return result;
}

uint64_t sprop_dcme_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  int v52 = 0;
  unsigned int v53 = 0;
  *(_DWORD *)(a4 + 352) = 0;
  long long __s1 = 0;
  *(void *)uint64_t v55 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)int v56 = 0u;
  long long v57 = 0u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", v55);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"voice", &__s1);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v53);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v9 = heap_Realloc(*(uint64_t **)(a3 + 8), *(void *)a4, 256);
  if (!v9)
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 39000, 0, v10, v11, v12, v13, v49);
    return 2409635850;
  }
  int v14 = (char *)v9;
  *(void *)a4 = v9;
  unsigned int v15 = __s1;
  if (strstr(__s1, "uni"))
  {
    __sprintf_chk(v56, 0, 0x80uLL, "crf/dcls/%s/%s/default", *(const char **)v55, v53);
    uint64_t v16 = 0;
    long long __s1 = 0;
  }
  else
  {
    __sprintf_chk(v56, 0, 0x80uLL, "crf/dcls/%s/%s/%s/default", *(const char **)v55, v15, v53);
    uint64_t v16 = __s1;
  }
  uint64_t v17 = brokeraux_ComposeBrokerString(a3, v56, 1, 1, *(char **)v55, v16, 0, v14, 0x100uLL);
  if ((v17 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"broker string = %s", v18, v19, v20, *(void *)a4);
    if ((ssftriff_reader_ObjOpen(a1, a2, 2, *(const char **)a4, "CRPH", 1031, (uint64_t *)&v52) & 0x80000000) != 0)
    {
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"no maxent doc class model (DCME)", v21, v22, v23, v50);
      return v17;
    }
    uint64_t v24 = crf_Init(a1, a2, (uint64_t)v52, a4 + 8);
    if ((v24 & 0x80000000) != 0)
    {
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"error reading maxent doc class model (DCME): %x", v25, v26, v27, v24);
      return ssftriff_reader_ObjClose(v52, v28, v29, v30, v31, v32, v33, v34);
    }
    *(_DWORD *)(a4 + 352) = 1;
    log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"loaded %s", v25, v26, v27, *(void *)a4);
    if (*(_DWORD *)(a4 + 352) == 1)
    {
      if (*(_DWORD *)(a4 + 48))
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        do
        {
          strlen(*(const char **)(*(void *)(a4 + 40) + v35));
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"_dcme_dump_params: param[%d].key   = %.40s%s", v37, v38, v39, v36);
          strlen(*(const char **)(*(void *)(a4 + 40) + v35 + 8));
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"_dcme_dump_params: param[%d].value = %.40s%s", v40, v41, v42, v36++);
          v35 += 16;
        }
        while (v36 < *(unsigned int *)(a4 + 48));
      }
      else
      {
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_SPROP", 3, 0, (uint64_t)"_dcme_dump_params: no params loaded", v32, v33, v34, v51);
      }
      if (*(_DWORD *)(a4 + 352) == 1 && *(_DWORD *)(a4 + 48))
      {
        uint64_t v43 = 0;
        uint64_t v17 = 0;
        while (1)
        {
          uint64_t v44 = *(void *)(a4 + 40);
          long long v45 = *(const char **)(v44 + 16 * v43);
          if (!strcmp("features", v45))
          {
            uint64_t v17 = sprop_str_copy(a3, a4 + 400, *(char **)(v44 + 16 * v43 + 8), 0);
            long long v46 = (unsigned char **)(a4 + 400);
            if ((v17 & 0x80000000) != 0) {
              return v17;
            }
            goto LABEL_32;
          }
          if (!strcmp("uni500", v45)) {
            break;
          }
          if (!strcmp("threshold", v45))
          {
            uint64_t v17 = sprop_str_copy(a3, a4 + 448, *(char **)(v44 + 16 * v43 + 8), 0);
            if ((v17 & 0x80000000) != 0) {
              return v17;
            }
          }
          else if (!strcmp("numbers", v45))
          {
            long long v46 = (unsigned char **)(a4 + 472);
            uint64_t v17 = sprop_str_copy(a3, a4 + 472, *(char **)(v44 + 16 * v43 + 8), 0);
            if ((v17 & 0x80000000) != 0) {
              return v17;
            }
            goto LABEL_32;
          }
LABEL_39:
          if (++v43 >= (unint64_t)*(unsigned int *)(a4 + 48))
          {
            if ((v17 & 0x80000000) == 0) {
              return ssftriff_reader_ObjClose(v52, v28, v29, v30, v31, v32, v33, v34);
            }
            return v17;
          }
        }
        uint64_t v17 = sprop_str_copy(a3, a4 + 424, *(char **)(v44 + 16 * v43 + 8), 0);
        long long v46 = (unsigned char **)(a4 + 424);
        if ((v17 & 0x80000000) != 0) {
          return v17;
        }
LABEL_32:
        for (unsigned __int16 i = *v46; ; ++i)
        {
          if (*i == 32)
          {
            *unsigned __int16 i = 0;
          }
          else if (!*i)
          {
            goto LABEL_39;
          }
        }
      }
    }
    return ssftriff_reader_ObjClose(v52, v28, v29, v30, v31, v32, v33, v34);
  }
  return v17;
}

uint64_t sprop_dcme_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a2;
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    *(void *)a2 = 0;
  }
  if (*(_DWORD *)(a2 + 352) == 1) {
    crf_Deinit(a2 + 8, v10, a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)(a2 + 352) = 0;
  uint64_t result = sprop_str_set_dealloc(a1, a2 + 360);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 376));
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 400));
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 424));
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = sprop_str_dealloc(a1, (uint64_t *)(a2 + 448));
          if ((result & 0x80000000) == 0)
          {
            return sprop_str_dealloc(a1, (uint64_t *)(a2 + 472));
          }
        }
      }
    }
  }
  return result;
}

uint64_t sprop_dcme_label(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a2 + 352))
  {
    uint64_t v13 = a2 + 360;
    uint64_t features = sprop_str_set_clear(a2 + 360);
    if ((features & 0x80000000) != 0) {
      return features;
    }
    unsigned int v15 = (void *)(a2 + 448);
    uint64_t features = sprop_get_features(a1, a3, a2 + 400, a2 + 424, (void *)(a2 + 448), a2 + 472, v13);
    if ((features & 0x80000000) != 0) {
      return features;
    }
    uint64_t v16 = (char **)(a2 + 376);
    uint64_t features = sprop_str_set_join(a1, a2 + 376, v13);
    if ((features & 0x80000000) != 0) {
      return features;
    }
    uint64_t v40 = 0;
    unsigned int v39 = 0;
    uint64_t v20 = *v16;
    if (!*v15)
    {
      uint64_t v21 = strstr(*v16, " lc");
      if (v21)
      {
        v21[3] = 0;
        uint64_t v20 = *v16;
      }
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_dcme_label: uint64_t features = %s", v17, v18, v19, (uint64_t)v20);
    uint64_t v41 = *(void *)(a2 + 376);
    uint64_t features = crf_Process(a2 + 8, &v41, 1u, (uint64_t *)&v40, &v39);
    if ((features & 0x80000000) != 0)
    {
      return features;
    }
    else
    {
      if (v39)
      {
        uint64_t v25 = *v40;
        if (v39 != 1) {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"sprop_dcme_label: crf_Process returned %d predictions, using only first one", v22, v23, v24, v39);
        }
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_dcme_label: pred[0] = %s", v22, v23, v24, (uint64_t)v25);
        int v26 = strlen(v25);
        uint64_t v30 = sprop_str_take_ownership(a1, a4, (uint64_t)v25, v26);
        if (a5 && *(_DWORD *)(a5 + 8))
        {
          if (*v15) {
            uint64_t v31 = "intc ";
          }
          else {
            uint64_t v31 = &byte_20D5A22AE;
          }
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"traceFeatureVector dcls : %s%s %s : %s", v27, v28, v29, (uint64_t)v31);
        }
      }
      else
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_dcme_label: crf_Process returned no predictions", v22, v23, v24, v38);
        uint64_t v30 = 2409635847;
      }
      uint64_t v33 = (uint64_t)v40;
      if (v40)
      {
        unsigned int v34 = v39;
        unsigned int v35 = --v39;
        if (v34 >= 2)
        {
          do
          {
            heap_Free(*(void **)(a1 + 8), (uint64_t)v40[v35]);
            unsigned int v35 = v39 - 1;
          }
          while (v39-- > 1);
          uint64_t v33 = (uint64_t)v40;
        }
        heap_Free(*(void **)(a1 + 8), v33);
      }
    }
  }
  else
  {
    uint64_t v30 = 2409635842;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"sprop_dcme_label: called while model not loaded", a6, a7, a8, v37);
  }
  return v30;
}

uint64_t sprop_input_dealloc(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sprop_str_dealloc(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sprop_str_dealloc(a1, a2 + 3);
    if ((result & 0x80000000) == 0)
    {
      return sprop_str_dealloc(a1, a2 + 6);
    }
  }
  return result;
}

uint64_t sprop_input_clear(uint64_t a1)
{
  uint64_t result = sprop_str_clear(a1);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sprop_str_clear(a1 + 24);
    if ((result & 0x80000000) == 0)
    {
      return sprop_str_clear(a1 + 48);
    }
  }
  return result;
}

uint64_t sprop_input_mrk_cnt(uint64_t a1)
{
  return (unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5);
}

uint64_t sprop_input_mrk(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

_DWORD *sprop_input_find_marker(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v3 = (unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5);
  if ((unsigned __int16)(*(_DWORD *)(a1 + 56) >> 5))
  {
    unsigned int v4 = 0;
    uint64_t result = *(_DWORD **)(a1 + 48);
    do
    {
      if (a3)
      {
        if (result == a3) {
          a3 = 0;
        }
      }
      else
      {
        if (*result == a2) {
          return result;
        }
        a3 = 0;
      }
      result += 8;
      ++v4;
    }
    while (v4 < v3);
  }
  return 0;
}

_DWORD *sprop_input_rfind_marker(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  if ((unsigned __int16)(v3 >> 5))
  {
    unsigned int v4 = 0;
    uint64_t result = (_DWORD *)((*(void *)&v3 & 0x1FFFE0) + *(void *)(a1 + 48) - 32);
    do
    {
      if (a3)
      {
        if (result == a3) {
          a3 = 0;
        }
      }
      else
      {
        if (*result == a2) {
          return result;
        }
        a3 = 0;
      }
      ++v4;
      result -= 8;
    }
    while (v4 < (unsigned __int16)(v3 >> 5));
  }
  return 0;
}

_OWORD *sprop_input_insert_marker(uint64_t a1, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  unint64_t v7 = *(void *)(a2 + 48);
  uint64_t v5 = a2 + 48;
  unint64_t v6 = v7;
  unint64_t v8 = *(unsigned int *)(v5 + 8);
  unint64_t v9 = v7 + 32 * (unsigned __int16)(v8 >> 5);
  BOOL v10 = v7 <= a3 && v9 > a3;
  if (!v10 || (sprop_str_realloc(a1, v5, (int)v8 + 32) & 0x80000000) != 0) {
    return 0;
  }
  int v13 = (v8 >> 5) - ((a3 - v6) >> 5);
  int v14 = (_OWORD *)(*(void *)(a2 + 48) + a3 - v6);
  memmove(v14 + 2, v14, 32 * (unsigned __int16)v13);
  *(_DWORD *)(a2 + 56) += 32;
  long long v15 = a4[1];
  *int v14 = *a4;
  v14[1] = v15;
  return v14;
}

uint64_t fe_sprop_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2409635841;
  }
  uint64_t result = 0;
  *a2 = &ISProp;
  return result;
}

uint64_t fe_sprop_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2409635847;
  if (a3)
  {
    uint64_t v11 = 0;
    uint64_t inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      unint64_t v8 = (void *)heap_Calloc(*(void **)(v11 + 8), 1, 24);
      if (v8)
      {
        uint64_t v3 = 0;
        uint64_t v9 = v11;
        v8[1] = a2;
        void v8[2] = v9;
        *unint64_t v8 = a1;
        *(void *)a3 = v8;
        *(_DWORD *)(a3 + 8) = 501;
      }
      else
      {
        return 2409635850;
      }
    }
  }
  return v3;
}

uint64_t fe_sprop_ClassClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 501, 24);
  if ((result & 0x80000000) == 0)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_sprop_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2409635847;
  if (a5)
  {
    uint64_t inited = safeh_HandleCheck(a1, a2, 501, 24);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v18);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = objc_GetObject(*(void *)(v18 + 48), (uint64_t)"SYNTHSTREAM", &v17);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t v11 = (uint64_t *)heap_Calloc(*(void **)(v18 + 8), 1, 1944);
    if (!v11) {
      return 2409635850;
    }
    uint64_t v12 = v11;
    uint64_t v13 = v18;
    *uint64_t v11 = v18;
    v11[1] = (uint64_t)a3;
    void v11[2] = a4;
    v11[3] = a1;
    uint64_t v14 = v18;
    v11[4] = *(void *)(v17 + 8);
    unsigned int v19 = 0;
    uint64_t inited = sprop_dcme_load(a3, a4, v13, (uint64_t)(v11 + 125));
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = sprop_ne_load((_WORD *)v12[1], v12[2], *v12, (uint64_t)(v12 + 187));
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *((_DWORD *)v12 + 484) = 0;
      uint64_t UInt = paramc_ParamGetUInt(*(void *)(v14 + 40), (uint64_t)"dont_insert_ne_markers", &v19);
      if ((UInt & 0x1FFF) == 0x14)
      {
LABEL_16:
        uint64_t v5 = 0;
        *(void *)a5 = v12;
        *(_DWORD *)(a5 + 8) = 501;
        return v5;
      }
      uint64_t v5 = UInt;
      if ((UInt & 0x80000000) == 0 && v19 == 1)
      {
        *((_DWORD *)v12 + 484) = 1;
        goto LABEL_16;
      }
      if ((UInt & 0x80000000) == 0) {
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t fe_sprop_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 501, 1944);
  if ((result & 0x80000000) == 0)
  {
    if (a1)
    {
      uint64_t v10 = *a1;
      uint64_t result = sprop_dcme_unload(*a1, (uint64_t)(a1 + 125), v4, v5, v6, v7, v8, v9);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = sprop_ne_unload(v10, (uint64_t)(a1 + 187), v11, v12, v13, v14, v15, v16);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = sprop_input_dealloc(v10, a1 + 116);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = sprop_str_dealloc(v10, a1 + 237);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = sprop_str_set_dealloc(v10, (uint64_t)(a1 + 240));
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = sprop_str_set_dealloc(v10, (uint64_t)(a1 + 235));
                if ((result & 0x80000000) == 0)
                {
                  objc_ReleaseObject(*(void *)(v10 + 48), (uint64_t)"SYNTHSTREAM");
                  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_sprop_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 501, 1944);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sprop_dcme_unload(*(void *)a1, a1 + 1000, v4, v5, v6, v7, v8, v9);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = sprop_dcme_load(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, a1 + 1000);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = sprop_ne_unload(*(void *)a1, a1 + 1496, v10, v11, v12, v13, v14, v15);
        if ((result & 0x80000000) == 0)
        {
          int v16 = sprop_ne_load(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, a1 + 1496);
          return v16 & (v16 >> 31);
        }
      }
    }
  }
  return result;
}

uint64_t fe_sprop_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 501, 1944) & 0x80000000) != 0) {
    return 2409635848;
  }
  synstrmaux_InitStreamOpener(a1 + 40, *(void *)(*(void *)a1 + 32), (uint64_t)"FE_SPROP");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 864);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 880);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"text/plain;charset=utf-8", a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 40), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 40), *(void *)(a1 + 32), a3, a4);
  if ((v7 & 0x80000000) != 0) {
    synstrmaux_CloseStreams((_WORD *)(a1 + 40), *(void *)(a1 + 32));
  }
  return v7;
}

uint64_t fe_sprop_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 501, 1944) & 0x80000000) != 0) {
    return 2409635848;
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"fe_sprop_Process: start", v7, v8, v9, v113);
  *a5 = 1;
  *(void *)&__n[1] = 0;
  LODWORD(v123) = 0;
  LODWORD(v124[0]) = 0;
  __n[0] = 0;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[108];
  uint64_t v12 = a1[109];
  LODWORD(__s1[0]) = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, char **, uint64_t *))(v10 + 144))(v11, v12, __s1, v124);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (LODWORD(__s1[0]))
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, long long *))(v10 + 88))(v11, v12, &__n[1], &v123);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v14 = *(char **)&__n[1];
  }
  else
  {
    uint64_t v14 = 0;
    *(void *)&__n[1] = 0;
    LODWORD(v123) = 0;
  }
  uint64_t v13 = sprop_str_copy(*a1, (uint64_t)(a1 + 116), v14, 0);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v13 = (*(uint64_t (**)(void, void, void))(a1[4] + 96))(a1[108], a1[109], v123);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[110];
  uint64_t v18 = a1[111];
  LODWORD(__s1[0]) = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, char **, _DWORD *))(v16 + 144))(v17, v18, __s1, __n);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (LODWORD(__s1[0]))
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, long long *))(v16 + 88))(v17, v18, &__n[1], &v123);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    unsigned int v19 = *(char **)&__n[1];
    unsigned int v20 = v123;
  }
  else
  {
    unsigned int v20 = 0;
    unsigned int v19 = 0;
    *(void *)&__n[1] = 0;
    LODWORD(v123) = 0;
  }
  uint64_t v13 = sprop_str_copy(*a1, (uint64_t)(a1 + 122), v19, v20);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v21 = sprop_input_mrk((uint64_t)(a1 + 116));
  unsigned int v22 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
  if (!v22) {
    goto LABEL_23;
  }
  uint64_t v15 = 0;
  uint64_t v23 = v22;
  uint64_t v24 = (char **)(v21 + 24);
  do
  {
    if (marker_hasNonConstCharPtrArg(*((_DWORD *)v24 - 6)))
    {
      uint64_t v15 = sprop_str_set_add(*a1, (uint64_t)(a1 + 235), &byte_20D5A22AE, *v24, 0);
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      *uint64_t v24 = *(char **)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
    }
    v24 += 4;
    --v23;
  }
  while (v23);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_23:
    uint64_t v13 = (*(uint64_t (**)(void, void, void))(a1[4] + 96))(a1[110], a1[111], v123);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v25 = *a1;
    int v26 = (int *)sprop_input_mrk((uint64_t)(a1 + 116));
    unsigned int v27 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
    _dump_markers(v25, v26, v27);
    int v31 = v124[0];
    int v32 = v124[0];
    if (LODWORD(v124[0]) != __n[0])
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"_read_streams: detected sync loss: bEndText=%d, bEndMrk=%d", v28, v29, v30, LODWORD(v124[0]));
      int v32 = v124[0];
      int v31 = __n[0];
    }
    BOOL v34 = v32 == 1 || v31 == 1;
    if (!*((_DWORD *)a1 + 234)) {
      goto LABEL_129;
    }
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 4, 0, (uint64_t)"fe_sprop_Process: input = %s", v28, v29, v30, a1[116]);
    if (*((_DWORD *)a1 + 338) != 1) {
      goto LABEL_144;
    }
    *(_OWORD *)long long __s1 = SPROP_STR_null;
    uint64_t v122 = 0;
    *(void *)&__n[1] = 0;
    *(void *)&long long v123 = &byte_20D5A22AE;
    LOWORD(v124[0]) = 0;
    LOWORD(__n[0]) = 0;
    marker = (char **)sprop_input_find_marker((uint64_t)(a1 + 116), 51, 0);
    if (marker)
    {
      unint64_t v36 = marker;
      do
      {
        uint64_t v37 = hlp_NLUStrFind(v36[3], "S_CLASS", (uint64_t *)&__n[1], (unsigned __int16 *)v124);
        BOOL v38 = v37 == 0;
        if (v37) {
          break;
        }
        unint64_t v36 = (char **)sprop_input_find_marker((uint64_t)(a1 + 116), 51, v36);
      }
      while (v36);
    }
    else
    {
      BOOL v38 = 1;
    }
    unsigned int v39 = (char **)sprop_input_rfind_marker((uint64_t)(a1 + 116), 51, 0);
    if (v39)
    {
      uint64_t v43 = v39;
      do
      {
        uint64_t v44 = hlp_NLUStrFind(v43[3], "E_CLASS", (uint64_t *)&v123, (unsigned __int16 *)__n);
        BOOL v45 = v44 == 0;
        if (v44) {
          break;
        }
        uint64_t v43 = (char **)sprop_input_rfind_marker((uint64_t)(a1 + 116), 51, v43);
      }
      while (v43);
    }
    else
    {
      BOOL v45 = 1;
    }
    if (!v38)
    {
      if (*((_DWORD *)a1 + 476)) {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"unbalanced NLU mark-up: S_CLASS:%s implicitly closed by S_CLASS:%*s", v40, v41, v42, a1[237]);
      }
      sprop_str_copy(*a1, (uint64_t)(a1 + 237), *(char **)&__n[1], LOWORD(v124[0]));
    }
    if (!v45)
    {
      if (*((_DWORD *)a1 + 476))
      {
        long long v46 = (const char *)a1[237];
        if (strncmp(v46, (const char *)v123, LOWORD(__n[0]))) {
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 1, 0, (uint64_t)"unbalanced NLU mark-up: S_CLASS:%s closed by E_CLASS:%*s", v40, v41, v42, (uint64_t)v46);
        }
      }
    }
    if (v38 && !*((_DWORD *)a1 + 476))
    {
      uint64_t v47 = (uint64_t)(a1 + 237);
      int v87 = sprop_dcme_label(*a1, (uint64_t)(a1 + 125), (int32x2_t *)a1 + 116, (uint64_t)__s1, 0, v40, v41, v42);
      uint64_t v88 = sprop_input_find_marker((uint64_t)(a1 + 116), 1, 0);
      if (v88)
      {
        unint64_t v92 = (unint64_t)v88;
        *(void *)&_DWORD __n[3] = 0;
        *(void *)&long long v120 = 0;
        int v93 = v88[1];
        __n[1] = 51;
        __n[2] = v93;
        __n[4] = v88[3];
        if (v87 < 0 || (char v94 = __s1[0], !strcmp(__s1[0], "1")))
        {
          uint64_t v95 = *a1;
          uint64_t v96 = (uint64_t)(a1 + 235);
          uint64_t v97 = "none";
        }
        else
        {
          uint64_t v95 = *a1;
          uint64_t v96 = (uint64_t)(a1 + 235);
          uint64_t v97 = v94;
        }
        uint64_t v98 = sprop_str_set_add(v95, v96, "S_CLASS:", v97, 0);
        if ((v98 & 0x80000000) != 0)
        {
          uint64_t v15 = v98;
        }
        else
        {
          *((void *)&v120 + 1) = *(void *)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
          sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v92, &__n[1]);
          int v99 = sprop_input_rfind_marker((uint64_t)(a1 + 116), 1, 0);
          int v100 = v99[3];
          __n[2] = v99[1];
          __n[4] = v100;
          if (v87 < 0 || (int v101 = __s1[0], !strcmp(__s1[0], "1")))
          {
            uint64_t v102 = *a1;
            uint64_t v104 = "none";
            uint64_t v103 = (uint64_t)(a1 + 235);
          }
          else
          {
            uint64_t v102 = *a1;
            uint64_t v103 = (uint64_t)(a1 + 235);
            uint64_t v104 = v101;
          }
          uint64_t v15 = sprop_str_set_add(v102, v103, "E_CLASS:", v104, 0);
          if ((v15 & 0x80000000) == 0)
          {
            *((void *)&v120 + 1) = *(void *)(a1[235] + 24 * (*((_DWORD *)a1 + 472) - 1));
            sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), (unint64_t)v99, &__n[1]);
          }
        }
      }
      else
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 0, 0, (uint64_t)"unable to insert NLU CLASS markers", v89, v90, v91, v114);
        uint64_t v15 = 2409635847;
      }
    }
    else
    {
      uint64_t v47 = (uint64_t)(a1 + 237);
      int v48 = sprop_dcme_label(*a1, (uint64_t)(a1 + 125), (int32x2_t *)a1 + 116, (uint64_t)__s1, (uint64_t)(a1 + 237), v40, v41, v42);
      uint64_t v15 = v48 & ~(v48 >> 31);
    }
    if (!v45) {
      sprop_str_clear(v47);
    }
    sprop_str_dealloc(*a1, (uint64_t *)__s1);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_144:
      if (*((_DWORD *)a1 + 462) != 1) {
        goto LABEL_127;
      }
      long long v123 = SPROP_STR_SET_null;
      uint64_t v122 = 0;
      long long v120 = 0u;
      *(_OWORD *)long long __s1 = SPROP_STR_null;
      *(_OWORD *)&__n[1] = 0u;
      uint64_t v15 = sprop_str_set_clear((uint64_t)(a1 + 240));
      BOOL v118 = v34;
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_126;
      }
      unsigned int v49 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
      uint64_t v50 = sprop_input_mrk((uint64_t)(a1 + 116));
      if (!v49) {
        goto LABEL_81;
      }
      int v54 = 0;
      unsigned int v55 = 0;
      v124[0] = 0;
      LOWORD(__n[0]) = 0;
      uint64_t v56 = v49;
      long long v57 = (char **)(v50 + 24);
      long long v58 = &byte_20D5A22AE;
      long long v59 = "O";
      do
      {
        int v60 = *((_DWORD *)v57 - 6);
        if (v60 == 1)
        {
          uint64_t v15 = sprop_str_set_add(*a1, (uint64_t)(a1 + 240), v59, v58, v55);
          if ((v15 & 0x80000000) != 0) {
            goto LABEL_126;
          }
          int v61 = strcmp(v59, "B-");
          long long v62 = "I-";
          if (v61) {
            long long v62 = v59;
          }
          if (v54)
          {
            long long v58 = &byte_20D5A22AE;
            long long v59 = "O";
          }
          else
          {
            long long v59 = (char *)v62;
          }
          if (v54) {
            unsigned int v55 = 0;
          }
          int v54 = 0;
        }
        else if (v60 == 51)
        {
          if (hlp_NLUStrFind(*v57, "S_NE", v124, (unsigned __int16 *)__n))
          {
            long long v58 = (char *)v124[0];
            long long v59 = "B-";
            unsigned int v55 = LOWORD(__n[0]);
          }
          if (hlp_NLUStrFind(*v57, "E_NE", v124, (unsigned __int16 *)__n)) {
            int v54 = 1;
          }
        }
        v57 += 4;
        --v56;
      }
      while (v56);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_81:
        uint64_t v63 = sprop_ne_label(*a1, (uint64_t)(a1 + 187), (uint64_t)(a1 + 116), &v123, (uint64_t)(a1 + 240), v51, v52, v53);
        if ((v63 & 0x80000000) != 0)
        {
          uint64_t v15 = 0;
          goto LABEL_126;
        }
        uint64_t v15 = v63;
        unsigned int v64 = *((_DWORD *)a1 + 468);
        if (v64)
        {
          unsigned int v65 = 0;
          unsigned __int16 v66 = 0;
          do
          {
            uint64_t v67 = v123;
            unsigned int v68 = v66;
            uint64_t v69 = *(const char **)(v123 + 24 * v66);
            if (!strncmp(v69, "I-", 2uLL))
            {
              if (!v68 || (uint64_t v70 = *(const char **)(v67 + 24 * (v65 - 1)), strlen(v70) < 3) || strcmp(v69 + 2, v70 + 2))
              {
                uint64_t v71 = sprop_str_copy(*a1, (uint64_t)__s1, "B-", 0);
                if ((v71 & 0x80000000) != 0
                  || (uint64_t v71 = sprop_str_cat(*a1, (uint64_t)__s1, (char *)(*(void *)(v123 + 24 * v68) + 2), 0),
                      (v71 & 0x80000000) != 0))
                {
LABEL_125:
                  uint64_t v15 = v71;
                  goto LABEL_126;
                }
                uint64_t v15 = sprop_str_copy(*a1, v123 + 24 * v68, __s1[0], 0);
                if ((v15 & 0x80000000) != 0) {
                  goto LABEL_126;
                }
                unsigned int v64 = *((_DWORD *)a1 + 468);
              }
            }
            unsigned __int16 v66 = v68 + 1;
            unsigned int v65 = (unsigned __int16)(v68 + 1);
          }
          while (v64 > v65);
        }
        if (!*((_DWORD *)a1 + 484))
        {
          int v72 = sprop_input_mrk_cnt((uint64_t)(a1 + 116));
          uint64_t v73 = sprop_input_mrk((uint64_t)(a1 + 116));
          if (v72)
          {
            uint64_t v74 = v73;
            uint64_t v115 = (uint64_t)(a1 + 235);
            int v116 = *((_DWORD *)a1 + 468);
            unsigned __int16 v75 = v72 - 1;
            do
            {
              uint64_t v76 = v75;
              if (*(_DWORD *)(v74 + 32 * v75) == 1)
              {
                uint64_t v77 = v123;
                __int16 v78 = v116;
                BOOL v117 = *((_DWORD *)a1 + 468) != (unsigned __int16)v116
                    && strncmp(*(const char **)(v123 + 24 * (unsigned __int16)v116), "I-", 2uLL) == 0;
                LOWORD(v116) = v116 - 1;
                unsigned int v79 = (unsigned __int16)(v78 - 1);
                __int16 v80 = (const char **)(v77 + 24 * v79);
                uint64_t v81 = v74;
                if (!strncmp(*v80, "B-", 2uLL))
                {
                  *(_OWORD *)&__n[1] = 0u;
                  long long v120 = 0u;
                  __n[1] = 51;
                  uint64_t v82 = v74 + 32 * v75;
                  __n[2] = *(_DWORD *)(v82 + 4);
                  __n[4] = *(_DWORD *)(v82 + 12);
                  uint64_t v15 = sprop_str_set_add(*a1, v115, "S_NE:", (char *)*v80 + 2, 0);
                  if ((v15 & 0x80000000) != 0) {
                    break;
                  }
                  unsigned int v83 = *((_DWORD *)a1 + 472);
                  unsigned __int16 v84 = (void *)(a1[235] + 24 * v83 - 24);
                  if (!v117)
                  {
                    uint64_t v71 = sprop_str_cat(*a1, a1[235] + 24 * v83 - 24, ";E_NE:", 0);
                    if ((v71 & 0x80000000) != 0) {
                      goto LABEL_125;
                    }
                    uint64_t v15 = sprop_str_cat(*a1, (uint64_t)v84, (char *)(*(void *)(v123 + 24 * v79) + 2), 0);
                    if ((v15 & 0x80000000) != 0) {
                      break;
                    }
                  }
                  *((void *)&v120 + 1) = *v84;
                  sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v74 + 32 * v75, &__n[1]);
                  uint64_t v81 = sprop_input_mrk((uint64_t)(a1 + 116));
                }
                if (v117)
                {
                  uint64_t v74 = v81;
                }
                else
                {
                  unsigned int v85 = (const char **)(v123 + 24 * v79);
                  if (!strncmp(*v85, "I-", 2uLL))
                  {
                    *(_OWORD *)&__n[1] = 0u;
                    long long v120 = 0u;
                    __n[1] = 51;
                    uint64_t v86 = v74 + 32 * v75;
                    __n[2] = *(_DWORD *)(v86 + 4);
                    __n[4] = *(_DWORD *)(v86 + 12);
                    uint64_t v15 = sprop_str_set_add(*a1, v115, "E_NE:", (char *)*v85 + 2, 0);
                    if ((v15 & 0x80000000) != 0) {
                      break;
                    }
                    *((void *)&v120 + 1) = *(void *)(a1[235] + 24 * *((unsigned int *)a1 + 472) - 24);
                    sprop_input_insert_marker(*a1, (uint64_t)(a1 + 116), v74 + 32 * v75, &__n[1]);
                    uint64_t v74 = sprop_input_mrk((uint64_t)(a1 + 116));
                  }
                  else
                  {
                    uint64_t v74 = v81;
                  }
                }
              }
              --v75;
            }
            while (v76);
          }
        }
      }
LABEL_126:
      sprop_str_set_dealloc(*a1, (uint64_t)&v123);
      sprop_str_dealloc(*a1, (uint64_t *)__s1);
      BOOL v34 = v118;
      if ((v15 & 0x80000000) == 0)
      {
LABEL_127:
        int v105 = *((_DWORD *)a1 + 234);
        if (v105)
        {
          uint64_t v13 = (*(uint64_t (**)(void, void, void, void))(a1[4] + 104))(a1[112], a1[113], a1[116], (v105 + 1));
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
        }
LABEL_129:
        if (!*((_DWORD *)a1 + 246)
          || (uint64_t v106 = *a1,
              uint64_t v107 = (int *)sprop_input_mrk((uint64_t)(a1 + 116)),
              unsigned int v108 = sprop_input_mrk_cnt((uint64_t)(a1 + 116)),
              _dump_markers(v106, v107, v108),
              uint64_t v13 = (*(uint64_t (**)(void, void, void, void))(a1[4] + 104))(a1[114], a1[115], a1[122], *((unsigned int *)a1 + 246)), (v13 & 0x80000000) == 0))
        {
          if (!v34 || (uint64_t v13 = synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 20, a1[4]), (v13 & 0x80000000) == 0))
          {
            uint64_t v13 = sprop_input_clear((uint64_t)(a1 + 116));
            if ((v13 & 0x80000000) == 0)
            {
              uint64_t v15 = sprop_str_set_clear((uint64_t)(a1 + 235));
              if ((v15 & 0x80000000) == 0) {
                log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"fe_sprop_Process: end (fRet=0x%x)", v109, v110, v111, v15);
              }
              return v15;
            }
          }
        }
        return v13;
      }
    }
  }
  return v15;
}

uint64_t fe_sprop_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 501, 1944) & 0x80000000) != 0) {
    return 2409635848;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  return synstrmaux_CloseStreams((_WORD *)(a1 + 40), v3);
}

uint64_t _dump_markers(uint64_t result, int *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
    {
      marker_hasCharPtrArg(*a2);
      uint64_t result = log_OutText(*(void *)(v4 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"mrk[%02d] = %-4s (%05d) %3d %3d %3d %3d %p %s", v7, v8, v9, v5++);
      a2 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

const char *sprop_bigrams(const char *a1, char *__s)
{
  uint64_t v4 = strchr(__s, 95);
  if (!v4 || !*a1) {
    return 0;
  }
  uint64_t v5 = v4 + 1;
  size_t v6 = (unsigned __int16)((_WORD)v4 - (_WORD)__s);
  while (1)
  {
    if (!strncmp(a1, __s, v6) && a1[v6] == 32)
    {
      size_t v7 = strlen(v5);
      if (!strncmp(&a1[v6 + 1], v5, v7)) {
        break;
      }
    }
    if (!*(unsigned __int8 *)++a1) {
      return 0;
    }
  }
  return a1;
}

uint64_t sprop_get_features(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  if (a2[1].i32[0] && !a2[4].i32[0])
  {
    unsigned int v19 = (uint64_t *)&a2[3];
    uint64_t v14 = sprop_normalize(a1, a2 + 3, (uint64_t)a2, 1);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_SPROP", 5, 0, (uint64_t)"sprop_get_features: normalized input = %s", v20, v21, v22, *v19);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = _sprop_feature_set_catalogs[*a5 == 0];
  if (*(void *)v15)
  {
    uint64_t v16 = v15 + 16;
    do
    {
      if (*a5) {
        uint64_t v17 = a3;
      }
      else {
        uint64_t v17 = a4;
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void, int32x2_t *, uint64_t, void *, uint64_t, uint64_t))v16)(a1, *((void *)v16 - 1), a2, v17, a5, a6, a7);
      if ((v14 & 0x80000000) != 0) {
        break;
      }
      uint64_t v18 = *((void *)v16 + 1);
      v16 += 24;
    }
    while (v18);
  }
  return v14;
}

uint64_t sprop_normalize(uint64_t a1, int32x2_t *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(unsigned __int8 **)a3;
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  uint64_t v10 = sprop_str_clear((uint64_t)a2);
  if ((v10 & 0x80000000) == 0)
  {
    unint64_t v11 = (unint64_t)&v8[v9];
    uint64_t v12 = *(unsigned __int8 **)a3;
    if (v12 < &v8[v9])
    {
      int v13 = 0;
      do
      {
        unsigned int v14 = Utf8_LengthInBytes(v12, 1);
        if (utf8_BelongsToSet(0, v12, 0, v14) == 1)
        {
          if (v13)
          {
            int v13 = 1;
          }
          else
          {
            int v13 = 1;
            sprop_str_cat(a1, (uint64_t)a2, " ", 1u);
          }
        }
        else if (!utf8_BelongsToSet(0xAu, v12, 0, v14))
        {
          if (a4 && utf8_ToLower((char *)v12, 0, (uint64_t)v22))
          {
            uint64_t v15 = v22;
            uint64_t v16 = a1;
            uint64_t v17 = (uint64_t)a2;
            unsigned int v18 = 0;
          }
          else
          {
            uint64_t v16 = a1;
            uint64_t v17 = (uint64_t)a2;
            uint64_t v15 = (char *)v12;
            unsigned int v18 = v14;
          }
          sprop_str_cat(v16, v17, v15, v18);
          int v13 = 0;
        }
        v12 += v14;
      }
      while ((unint64_t)v12 < v11);
    }
    if (!*(void *)a2) {
      sprop_str_cat(a1, (uint64_t)a2, " ", 1u);
    }
    __int32 v19 = a2[1].i32[0];
    if (v19)
    {
      uint64_t v20 = (v19 - 1);
      if (*(unsigned char *)(*(void *)a2 + v20) == 32)
      {
        *(unsigned char *)(*(void *)a2 + v20) = 0;
        a2[1] = vadd_s32(a2[1], (int32x2_t)-1);
      }
    }
  }
  return v10;
}

uint64_t sprop_get_word_features(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (!v6
    || *(_DWORD *)(a2 + 32)
    || (uint64_t result = sprop_str_copy(a1, a2 + 24, *(char **)a2, v6), (result & 0x80000000) == 0))
  {
    uint64_t v8 = &off_26C21B380;
    do
    {
      uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, void, void, void, uint64_t))*v8)(a1, *(v8 - 1), a2, 0, 0, 0, a3);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v9 = v8[1];
      v8 += 3;
    }
    while (v9);
  }
  return result;
}

uint64_t SPROP_sen_len(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(unsigned char **)(a3 + 24);
  uint64_t v13 = 1;
  while (*v12 == 32)
  {
    uint64_t v13 = (v13 + 1);
LABEL_6:
    ++v12;
  }
  if (*v12) {
    goto LABEL_6;
  }
  unsigned int v14 = uint32_log2(v13);
  if (v14 >= 8) {
    char v15 = 8;
  }
  else {
    char v15 = v14;
  }
  char v18 = v15 | 0x30;
  if (*a5) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = 0;
  }
  return sprop_add_feature(a1, a7, v16, "SENTLEN=", a2, &v18, 1u);
}

uint64_t SPROP_avg_wrd_len(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(unsigned char **)(a3 + 24);
  unsigned int v13 = 1;
  while (*v12 == 32)
  {
    ++v13;
LABEL_6:
    ++v12;
  }
  if (*v12) {
    goto LABEL_6;
  }
  unsigned int v14 = uint32_log2(4 * *(_DWORD *)(a3 + 36) / v13);
  if (v14 >= 8) {
    char v15 = 8;
  }
  else {
    char v15 = v14;
  }
  char v18 = v15 | 0x30;
  if (*a5) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = 0;
  }
  return sprop_add_feature(a1, a7, v16, "WORDLEN=", a2, &v18, 1u);
}

uint64_t SPROP_freq10_caps(uint64_t a1, char *a2, unsigned __int8 **a3, uint64_t a4, void *a5, int a6, uint64_t a7)
{
  unsigned int v12 = *((_DWORD *)a3 + 2);
  if (v12)
  {
    unsigned int v14 = *a3;
    unsigned int v15 = **a3;
    if (**a3)
    {
      int v16 = 0;
      do
      {
        unsigned int v17 = Utf8_LengthInBytes(v14, 1);
        if (utf8_ToLower((char *)v14, 0, (uint64_t)v20)) {
          ++v16;
        }
        v14 += v17;
      }
      while (*v14);
      unsigned int v15 = 10 * v16;
    }
    unsigned int v12 = v15 / *((_DWORD *)a3 + 3);
  }
  if (v12 >= 9) {
    LOBYTE(v12) = 9;
  }
  char v21 = v12 | 0x30;
  if (*a5) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = 0;
  }
  return sprop_add_feature(a1, a7, v18, "CAPS=", a2, &v21, 1u);
}

uint64_t SPROP_freq10_puncs(uint64_t a1, char *a2, unsigned __int8 **a3, uint64_t a4, void *a5, int a6, uint64_t a7)
{
  if (*((_DWORD *)a3 + 2))
  {
    unsigned int v13 = *a3;
    unsigned int v14 = **a3;
    if (**a3)
    {
      int v15 = 0;
      do
      {
        unsigned int v16 = Utf8_LengthInBytes(v13, 1);
        if (utf8_BelongsToSet(0xAu, v13, 0, v16) == 1) {
          ++v15;
        }
        v13 += v16;
      }
      while (*v13);
      unsigned int v14 = 10 * v15;
    }
    int v17 = v14 / *((_DWORD *)a3 + 3) + 48;
  }
  else
  {
    LOBYTE(v17) = 48;
  }
  char v20 = v17;
  if (*a5) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = 0;
  }
  return sprop_add_feature(a1, a7, v18, "PUNC=", a2, &v20, 1u);
}

uint64_t SPROP_first_wrd(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v13 = utf8_strchr(*(char **)(a3 + 24), " ");
  unsigned int v14 = *(char **)(a3 + 24);
  unsigned int v15 = strlen(v14);
  if (v13) {
    unsigned int v16 = v13 - v14;
  }
  else {
    unsigned int v16 = v15;
  }
  if (*a5) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  return sprop_add_feature(a1, a7, v17, "FIRSTWD=", a2, v14, v16);
}

uint64_t SPROP_last_char(uint64_t a1, char *a2, unsigned char **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = *((_DWORD *)a3 + 2);
  if (v7)
  {
    do
    {
      unsigned int v19 = v7 - 1;
      if (v7 == 1) {
        break;
      }
      utf8_GetPreviousValidUtf8Offset((uint64_t)*a3, &v19);
      if (!utf8_BelongsToSet(0, *a3, v19, *((_DWORD *)a3 + 2)))
      {
        uint64_t v14 = (uint64_t)*a3;
        unsigned int v15 = &(*a3)[v19];
        unsigned int v16 = Utf8_LengthInBytes(v15, 1);
        if (!v14) {
          return 0;
        }
        if (*a5) {
          uint64_t v17 = a4;
        }
        else {
          uint64_t v17 = 0;
        }
        return sprop_add_feature(a1, a7, v17, "LASTCH=", a2, (char *)v15, v16);
      }
      unsigned int v7 = v19;
    }
    while (v19);
  }
  return 0;
}

uint64_t SPROP_freq4_singlechars(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  if (!*(_DWORD *)(a3 + 32)) {
    return 0;
  }
  unsigned int v7 = *(unsigned __int8 **)(a3 + 24);
  if (!*v7) {
    return 0;
  }
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = *(unsigned __int8 **)(a3 + 24);
  do
  {
    unsigned int v16 = &v15[Utf8_LengthInBytes(v15, 1)];
    if ((*v15 | 0x20) == 0x20)
    {
      ++v13;
      if (Utf8_LengthInUtf8chars((unint64_t)v7, (int)v15 - (int)v7) == 1)
      {
        ++v14;
        unsigned int v7 = v16;
      }
    }
    unsigned int v15 = v16;
  }
  while (*v16);
  if (!v13) {
    return 0;
  }
  char v19 = v14 / v13 + 48;
  if (*a5) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  return sprop_add_feature(a1, a7, v17, "SINGLECH=", a2, &v19, 1u);
}

uint64_t SPROP_numeral(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(unsigned int *)(a6 + 8);
  uint64_t v10 = *(char **)(a3 + 24);
  uint64_t v11 = *(unsigned int *)(a3 + 32);
  unint64_t v12 = (unint64_t)&v10[v11];
  if (v9)
  {
    unsigned int v13 = *(const char **)a6;
    unint64_t v14 = *(void *)a6 + v9;
    unsigned int v15 = "1";
    do
    {
      int v16 = strlen(v13);
      if (v11)
      {
        uint64_t v17 = v10;
        do
        {
          uint64_t v18 = strstr(v17, v13);
          if (!v18) {
            break;
          }
          char v19 = v18;
          uint64_t v17 = &v18[v16];
          if ((*v17 | 0x20) == 0x20 && (v19 == v10 || *(v19 - 1) == 32))
          {
            uint64_t v20 = a7;
            goto LABEL_22;
          }
        }
        while ((unint64_t)v17 < v12);
      }
      v13 += (v16 + 1);
    }
    while ((unint64_t)v13 < v14);
  }
  uint64_t v20 = a7;
  if (!v11) {
    goto LABEL_19;
  }
  char v21 = v10 + 1;
  do
    unsigned int v22 = *(v21 - 1) - 58;
  while (v22 <= 0xFFFFFFF5 && (unint64_t)v21++ < v12);
  if (v22 > 0xFFFFFFF5) {
    unsigned int v15 = "1";
  }
  else {
LABEL_19:
  }
    unsigned int v15 = "0";
LABEL_22:
  if (*a5) {
    uint64_t v24 = a4;
  }
  else {
    uint64_t v24 = 0;
  }
  return sprop_add_feature(a1, v20, v24, "NUMERAL=", a2, v15, 0);
}

uint64_t SPROP_keywords(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(unsigned int *)(a4 + 8);
  if (!v7) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = *(char **)a4;
  unint64_t v13 = *(void *)a4 + v7;
  unint64_t v14 = *(void *)(a3 + 24) + *(unsigned int *)(a3 + 32);
  do
  {
    unsigned int v15 = *(char **)(a3 + 24);
    unsigned int v16 = strlen(v12);
    if ((unint64_t)v15 < v14)
    {
      uint64_t v17 = *(char **)(a3 + 24);
      do
      {
        uint64_t v18 = strstr(v17, v12);
        if (!v18) {
          break;
        }
        char v19 = v18;
        uint64_t v17 = &v18[v16];
        if ((*v17 | 0x20) == 0x20 && (v19 == v15 || *(v19 - 1) == 32))
        {
          uint64_t v11 = sprop_str_set_add(a1, a7, a2, v12, v16);
          if ((v11 & 0x80000000) != 0) {
            return v11;
          }
          break;
        }
      }
      while ((unint64_t)v17 < v14);
    }
    v12 += v16 + 1;
  }
  while ((unint64_t)v12 < v13);
  return v11;
}

uint64_t SPROP_keywords_bigrams(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(unsigned int *)(a4 + 8);
  if (!v7) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = *(char **)a4;
  unint64_t v13 = *(void *)a4 + v7;
  unint64_t v14 = *(void *)(a3 + 24) + *(unsigned int *)(a3 + 32);
  do
  {
    unsigned int v15 = *(const char **)(a3 + 24);
    unsigned int v16 = strlen(v12);
    if ((unint64_t)v15 < v14)
    {
      uint64_t v17 = *(const char **)(a3 + 24);
      do
      {
        uint64_t v18 = sprop_bigrams(v17, v12);
        if (!v18) {
          break;
        }
        char v19 = v18;
        uint64_t v17 = &v18[v16];
        if ((*(unsigned __int8 *)v17 | 0x20) == 0x20 && (v19 == v15 || *(v19 - 1) == 32))
        {
          uint64_t v11 = sprop_str_set_add(a1, a7, a2, v12, v16);
          if ((v11 & 0x80000000) != 0) {
            return v11;
          }
          break;
        }
      }
      while ((unint64_t)v17 < v14);
    }
    v12 += v16 + 1;
  }
  while ((unint64_t)v12 < v13);
  return v11;
}

uint64_t sprop_add_feature(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, char *a5, char *a6, unsigned int a7)
{
  if (a3)
  {
    unint64_t v13 = *(const char **)a3;
    uint64_t v14 = *(unsigned int *)(a3 + 8);
    unsigned __int16 v15 = strlen(__s);
    if (a7)
    {
      unsigned __int16 v16 = a7;
      if (!v14) {
        return 0;
      }
    }
    else
    {
      unsigned __int16 v16 = strlen(a6);
      if (!v14) {
        return 0;
      }
    }
    uint64_t v17 = &v13[v14];
    size_t v18 = v16;
    while (strncmp(v13, __s, v15) || strncmp(&v13[v15], a6, v18))
    {
      v13 += strlen(v13) + 1;
      if (v13 >= v17) {
        return 0;
      }
    }
  }
  return sprop_str_set_add(a1, a2, a5, a6, a7);
}

uint64_t SPROP_word_token(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10 = sprop_input_mrk_cnt((uint64_t)a3);
  uint64_t v11 = sprop_input_mrk((uint64_t)a3);
  long long v23 = SPROP_STR_null;
  uint64_t v24 = 0;
  if (v10)
  {
    uint64_t v12 = 0;
    unsigned __int16 v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v10;
    unsigned __int16 v16 = (unsigned int *)(v11 + 12);
    while (1)
    {
      int v17 = *(v16 - 3);
      if (v17 == 1)
      {
        uint64_t v18 = sprop_str_set_add(a1, a7 + 16 * v13, &byte_20D5A22AE, &byte_20D5A22AE, 0);
        if ((v18 & 0x80000000) != 0
          || (uint64_t v19 = *(void *)(a7 + 16 * v13),
              unsigned int v20 = *(_DWORD *)(a7 + 16 * v13 + 8),
              uint64_t v18 = sprop_str_copy(a1, (uint64_t)&v23, (char *)(*a3 + *v16 - v12), v16[1]),
              (v18 & 0x80000000) != 0))
        {
          uint64_t v14 = v18;
          goto LABEL_16;
        }
        uint64_t v21 = v19 + 24 * v20;
        uint64_t v14 = sprop_normalize(a1, (int32x2_t *)(v21 - 24), (uint64_t)&v23, 0);
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_16;
        }
        if (!*(_DWORD *)(v21 - 16))
        {
          uint64_t v14 = sprop_str_cat(a1, v21 - 24, "-", 0);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_16;
          }
        }
        ++v13;
      }
      else if (v17 == 0x4000)
      {
        uint64_t v12 = *v16;
      }
      v16 += 8;
      if (!--v15) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_16:
  sprop_str_dealloc(a1, (uint64_t *)&v23);
  return v14;
}

uint64_t SPROP_word_lowercase_token(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10 = sprop_input_mrk_cnt((uint64_t)a3);
  uint64_t v11 = sprop_input_mrk((uint64_t)a3);
  long long v23 = SPROP_STR_null;
  uint64_t v24 = 0;
  if (v10)
  {
    uint64_t v12 = 0;
    unsigned __int16 v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v10;
    unsigned __int16 v16 = (unsigned int *)(v11 + 12);
    while (1)
    {
      int v17 = *(v16 - 3);
      if (v17 == 1)
      {
        uint64_t v18 = sprop_str_set_add(a1, a7 + 16 * v13, &byte_20D5A22AE, &byte_20D5A22AE, 0);
        if ((v18 & 0x80000000) != 0
          || (uint64_t v19 = *(void *)(a7 + 16 * v13),
              unsigned int v20 = *(_DWORD *)(a7 + 16 * v13 + 8),
              uint64_t v18 = sprop_str_copy(a1, (uint64_t)&v23, (char *)(*a3 + *v16 - v12), v16[1]),
              (v18 & 0x80000000) != 0))
        {
          uint64_t v14 = v18;
          goto LABEL_16;
        }
        uint64_t v21 = v19 + 24 * v20;
        uint64_t v14 = sprop_normalize(a1, (int32x2_t *)(v21 - 24), (uint64_t)&v23, 1);
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_16;
        }
        if (!*(_DWORD *)(v21 - 16))
        {
          uint64_t v14 = sprop_str_cat(a1, v21 - 24, "-", 0);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_16;
          }
        }
        ++v13;
      }
      else if (v17 == 0x4000)
      {
        uint64_t v12 = *v16;
      }
      v16 += 8;
      if (!--v15) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_16:
  sprop_str_dealloc(a1, (uint64_t *)&v23);
  return v14;
}

uint64_t SPROP_word_token_class(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8 = sprop_input_mrk_cnt(a3);
  int v31 = (void *)a3;
  uint64_t v9 = sprop_input_mrk(a3);
  if (v8)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unsigned __int16 v13 = 0;
    uint64_t result = 0;
    uint64_t v15 = v8;
    while (1)
    {
      int v16 = *(_DWORD *)(v10 + 32 * v11);
      if (v16 == 1) {
        break;
      }
      if (v16 == 0x4000) {
        uint64_t v12 = *(unsigned int *)(v10 + 32 * v11 + 12);
      }
LABEL_48:
      if (++v11 == v15) {
        return result;
      }
    }
    uint64_t v17 = v10 + 32 * v11;
    unsigned int v20 = *(_DWORD *)(v17 + 16);
    uint64_t v19 = (unsigned int *)(v17 + 16);
    unsigned int v18 = v20;
    if (v20)
    {
      uint64_t v21 = 0;
      __int16 v22 = 0;
      uint64_t v34 = v12;
      long long v23 = (unsigned char *)(*v31 + *(v19 - 1) - v12);
      unsigned int v24 = 30;
      do
      {
        if (utf8_BelongsToSet(6u, v23, v21, v18))
        {
          unsigned int v24 = v24 & 0xFFFFFEF1 | 0x100;
          ++v22;
        }
        else if (utf8_BelongsToSet(0xAu, v23, v21, *v19))
        {
          v24 &= 0xFFFFFFE1;
          switch(v23[v21])
          {
            case ',':
              v24 |= 0x40u;
              break;
            case '-':
              v24 |= 0x200u;
              break;
            case '.':
              v24 |= 0x20u;
              break;
            case '/':
              v24 |= 0x80u;
              break;
            default:
              break;
          }
        }
        else if (utf8_BelongsToSet(0x12u, v23, v21, *v19) {
               || utf8_BelongsToSet(0x15u, v23, v21, *v19)
        }
               || utf8_BelongsToSet(0x18u, v23, v21, *v19)
               || utf8_BelongsToSet(0x1Bu, v23, v21, *v19)
               || utf8_BelongsToSet(0x1Eu, v23, v21, *v19))
        {
          unsigned int v26 = v24 | 0xC01;
          if (v21) {
            unsigned int v26 = v24 & 0xFFFFFBEF | 0x400;
          }
          unsigned int v24 = v26 & 0xFFFFFFEB;
        }
        else
        {
          unsigned int v24 = v24 & 0xFFFFFBED | 0x400;
        }
        uint64_t NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(v23, v21, *v19);
        uint64_t v21 = NextUtf8OffsetLimit;
        unsigned int v18 = *v19;
      }
      while (NextUtf8OffsetLimit != *v19);
      unsigned int v27 = "lc";
      uint64_t v12 = v34;
      if ((v24 & 4) != 0) {
        goto LABEL_46;
      }
      if (v22 == 2)
      {
        unsigned int v27 = "2d";
      }
      else
      {
        if (v22 != 4)
        {
          if ((v24 & 0x100) != 0)
          {
            unsigned int v27 = "an";
            if ((v24 & 0x400) != 0) {
              goto LABEL_46;
            }
            unsigned int v27 = "dd";
            if ((v24 & 0x200) != 0) {
              goto LABEL_46;
            }
            unsigned int v27 = "ds";
            if ((v24 & 0x80) != 0) {
              goto LABEL_46;
            }
            unsigned int v27 = "dc";
            if ((v24 & 0x40) != 0) {
              goto LABEL_46;
            }
            BOOL v28 = (v24 & 0x20) == 0;
            uint64_t v29 = "dp";
            uint64_t v30 = "num";
          }
          else if ((v24 & 2) != 0)
          {
            BOOL v28 = NextUtf8OffsetLimit == 1;
            uint64_t v29 = "ac";
            uint64_t v30 = "sc";
          }
          else
          {
            unsigned int v27 = "cp";
            if ((v24 & 0x20) != 0) {
              goto LABEL_46;
            }
            BOOL v28 = (v24 & 1) == 0;
            uint64_t v29 = "ic";
            uint64_t v30 = "other";
          }
          if (v28) {
            unsigned int v27 = (char *)v30;
          }
          else {
            unsigned int v27 = (char *)v29;
          }
          goto LABEL_46;
        }
        unsigned int v27 = "4d";
      }
    }
    else
    {
      unsigned int v27 = "lc";
    }
LABEL_46:
    uint64_t result = sprop_str_set_add(a1, a7 + 16 * v13, &byte_20D5A22AE, v27, 0);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    ++v13;
    goto LABEL_48;
  }
  return 0;
}

uint64_t SPROP_word_begin_sentence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10 = sprop_input_mrk_cnt(a3);
  uint64_t v11 = sprop_input_mrk(a3);
  if (!v10) {
    return 0;
  }
  uint64_t v12 = (int *)v11;
  unsigned __int16 v13 = 0;
  uint64_t result = 0;
  uint64_t v15 = v10;
  int v16 = "1";
  do
  {
    int v17 = *v12;
    v12 += 8;
    if (v17 == 1)
    {
      uint64_t result = sprop_str_set_add(a1, a7 + 16 * v13, &byte_20D5A22AE, v16, 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      ++v13;
      int v16 = "0";
    }
    --v15;
  }
  while (v15);
  return result;
}

uint64_t be_adapt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v5 = 2410684423;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v28);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v10 = heap_Calloc(*(void **)(v28 + 8), 1, 656);
      if (v10)
      {
        uint64_t v15 = v10;
        uint64_t Object = objc_GetObject(*(void *)(v28 + 48), (uint64_t)"LINGDB", &v27);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_13;
        }
        *(void *)(v15 + 8) = *(void *)(v27 + 8);
        uint64_t Object = objc_GetObject(*(void *)(v28 + 48), (uint64_t)"FE_DEPES", &v26);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_13;
        }
        uint64_t v17 = v26;
        *(void *)(v15 + 32) = *(void *)(v26 + 8);
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(v17 + 16);
        uint64_t Object = objc_GetObject(*(void *)(v28 + 48), (uint64_t)"FE_DCTLKP", &v25);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_13;
        }
        uint64_t v18 = v25;
        *(void *)(v15 + 56) = *(void *)(v25 + 8);
        *(_OWORD *)(v15 + 40) = *(_OWORD *)(v18 + 16);
        *(void *)(v15 + 80) = 0;
        *(void *)(v15 + 64) = safeh_GetNullHandle();
        *(void *)(v15 + 72) = v19;
        if ((objc_GetObject(*(void *)(v28 + 48), (uint64_t)"PHONMAP", &v24) & 0x80000000) == 0)
        {
          uint64_t v20 = v24;
          *(void *)(v15 + 80) = *(void *)(v24 + 8);
          *(_OWORD *)(v15 + 64) = *(_OWORD *)(v20 + 16);
        }
        *(void *)uint64_t v15 = v28;
        *(_DWORD *)(v15 + 88) = 0;
        *(void *)(v15 + 296) = a3;
        *(void *)(v15 + 304) = a4;
        uint64_t Object = hlp_VoiceSetup_0(v15);
        if ((Object & 0x80000000) != 0)
        {
LABEL_13:
          uint64_t v5 = Object;
        }
        else
        {
          uint64_t v5 = globalbeadapt_SetFEBOOLKeyword((void *)v15, (uint64_t)"feGlobalmergemorphemes", (_DWORD *)(v15 + 280), 1);
          if ((v5 & 0x80000000) == 0)
          {
            int v21 = 503;
LABEL_16:
            *(void *)a5 = v15;
            *(_DWORD *)(a5 + 8) = v21;
            return v5;
          }
        }
      }
      else
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v11, v12, v13, v14, v23);
        uint64_t v5 = 2410684426;
      }
      be_adapt_ObjClose(*(void **)a5, *(void *)(a5 + 8));
      uint64_t v15 = 0;
      int v21 = 0;
      goto LABEL_16;
    }
    return inited;
  }
  return v5;
}

uint64_t hlp_VoiceSetup_0(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  __c_3 = 0;
  __int16 __c_1 = 0;
  unsigned __int8 __c = 0;
  unsigned int v93 = 0;
  long long __s1 = 0;
  int v91 = 0;
  *(_DWORD *)(a1 + 636) = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"voicelexicontraining", &__s1) & 0x80000000) == 0
    && __s1
    && !strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 636) = 1;
  }
  *(_DWORD *)(a1 + 264) = 0;
  if ((paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"prmigexists", &v93) & 0x80000000) == 0
    && v93 == 1)
  {
    *(_DWORD *)(a1 + 264) = 1;
  }
  *(_DWORD *)(a1 + 248) = 0;
  __int16 __c_1 = 0;
  uint64_t inited = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "fecfg", "usetntag", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (__c_1 == 1 && __c_3 && **__c_3 == 49) {
    *(_DWORD *)(a1 + 248) = 1;
  }
  *(_DWORD *)(a1 + 252) = 0;
  __int16 __c_1 = 0;
  uint64_t inited = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "fecfg", "docclassmap", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (__c_1 == 1 && __c_3 && !strncmp(*__c_3, "yes", 3uLL)) {
    *(_DWORD *)(a1 + 252) = 1;
  }
  uint64_t inited = com_depes_InitLayers(*(void *)a1, a1 + 96);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(void *)(a1 + 224) = 0x3000200010000;
  *(_WORD *)(a1 + 232) = 4;
  if (*(_DWORD *)(a1 + 264))
  {
    __int16 v3 = 8;
    __int16 v4 = 7;
    __int16 v5 = 6;
    __int16 v6 = 5;
  }
  else
  {
    __int16 v6 = 0;
    __int16 v3 = 7;
    __int16 v4 = 6;
    __int16 v5 = 5;
  }
  *(_WORD *)(a1 + 234) = v6;
  *(_WORD *)(a1 + 238) = v5;
  *(_WORD *)(a1 + 240) = v4;
  __int16 v7 = v3 - (*(_DWORD *)(a1 + 248) == 0);
  *(_WORD *)(a1 + 236) = v7;
  *(_WORD *)(a1 + 106) = v7 + 1;
  uint64_t inited = globalbeadapt_Init_SpecialSymbolsFromPhonmap(a1);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  int v8 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 32) + 72))(*(void *)(a1 + 16), *(void *)(a1 + 24), "pre_be_adapt");
  BOOL v9 = 1;
  if (!v8) {
    BOOL v9 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 32) + 72))(*(void *)(a1 + 16), *(void *)(a1 + 24), "post_be_adapt") != 0;
  }
  *(_DWORD *)(a1 + 320) = v9;
  *(_DWORD *)(a1 + 312) = 1;
  uint64_t inited = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 56) + 72))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptlex", a1 + 312);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(unsigned char *)(a1 + 480) = 1;
  *(_DWORD *)(a1 + 316) = 1;
  uint64_t inited = (*(uint64_t (**)(void, void, const char *, uint64_t))(*(void *)(a1 + 56) + 72))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptlexmw", a1 + 316);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_WORD *)(a1 + 632) = 513;
  uint64_t v10 = (*(uint64_t (**)(void, void, const char *, int *))(*(void *)(a1 + 56) + 72))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", &v91);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  *(_OWORD *)(a1 + 640) = 0u;
  if (v91)
  {
    __int16 __c_1 = 2;
    uint64_t inited = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", "loo", &__c_3, &__c_1, &__c);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    if (__c_1 == 1)
    {
      uint64_t v11 = *__c_3;
      uint64_t v12 = strchr((char *)*__c_3, __c);
      if (v12)
      {
        char *v12 = 0;
        uint64_t v11 = *__c_3;
      }
      size_t v13 = strlen(v11);
      uint64_t v14 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v13 + 1);
      *(void *)(a1 + 640) = v14;
      if (!v14) {
        goto LABEL_143;
      }
      strcpy(v14, *__c_3);
    }
    __int16 __c_1 = 2;
    uint64_t v10 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", "loodiff", &__c_3, &__c_1, &__c);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    if (__c_1 == 1)
    {
      uint64_t v19 = *__c_3;
      uint64_t v20 = strchr((char *)*__c_3, __c);
      if (v20)
      {
        *uint64_t v20 = 0;
        uint64_t v19 = *__c_3;
      }
      size_t v21 = strlen(v19);
      __int16 v22 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v21 + 1);
      *(void *)(a1 + 648) = v22;
      if (!v22) {
        goto LABEL_143;
      }
      strcpy(v22, *__c_3);
    }
  }
  if (*(_DWORD *)(a1 + 312))
  {
    __int16 __c_1 = 2;
    uint64_t inited = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", "nrdctpart", &__c_3, &__c_1, &__c);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    if (__c_1 == 1)
    {
      unsigned int v23 = *__c_3;
      uint64_t v24 = strchr((char *)*__c_3, __c);
      if (v24)
      {
        *uint64_t v24 = 0;
        unsigned int v23 = *__c_3;
      }
      *(unsigned char *)(a1 + 480) = atoi(v23);
    }
    __int16 __c_1 = 2;
    uint64_t v10 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", "fn", &__c_3, &__c_1, &__c);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    if (__c_1 == 1)
    {
      uint64_t v25 = *__c_3;
      uint64_t v26 = strchr((char *)*__c_3, 59);
      if (v26)
      {
        uint64_t v27 = v26;
        do
        {
          char *v27 = 0;
          unsigned int v28 = *(unsigned __int8 *)(a1 + 324);
          *(unsigned char *)(a1 + 324) = v28 + 1;
          strcpy((char *)(a1 + 10 * v28 + 325), v25);
          uint64_t v25 = v27 + 1;
          uint64_t v27 = strchr(v27 + 1, 59);
        }
        while (v27);
      }
      unsigned int v29 = *(unsigned __int8 *)(a1 + 324);
      *(unsigned char *)(a1 + 324) = v29 + 1;
      strcpy((char *)(a1 + 10 * v29 + 325), v25);
      __int16 __c_1 = 2;
      uint64_t v10 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", "ft", &__c_3, &__c_1, &__c);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      if (__c_1 == 1)
      {
        uint64_t v30 = *__c_3;
        int v31 = strchr((char *)*__c_3, 59);
        *(unsigned char *)(a1 + 324) = 0;
        if (v31)
        {
          int v32 = v31;
          while (1)
          {
            *int v32 = 0;
            if (!strcmp(v30, "NLU")) {
              break;
            }
            if (!strcmp(v30, "PRM"))
            {
              int v33 = 1;
              goto LABEL_64;
            }
            if (!strcmp(v30, "BND"))
            {
              int v33 = 2;
              goto LABEL_64;
            }
            if (!strcmp(v30, "LNG"))
            {
              int v33 = 3;
LABEL_64:
              uint64_t v34 = *(unsigned __int8 *)(a1 + 324);
              *(unsigned char *)(a1 + 324) = v34 + 1;
              *(_DWORD *)(a1 + 4 * v34 + 428) = v33;
            }
            uint64_t v30 = v32 + 1;
            int v32 = strchr(v32 + 1, 59);
            if (!v32) {
              goto LABEL_66;
            }
          }
          int v33 = 0;
          goto LABEL_64;
        }
LABEL_66:
        if (!strcmp(v30, "NLU"))
        {
          uint64_t v38 = *(unsigned __int8 *)(a1 + 324);
          LOBYTE(v36) = v38 + 1;
          *(unsigned char *)(a1 + 324) = v38 + 1;
          *(_DWORD *)(a1 + 4 * v38 + 428) = 0;
        }
        else
        {
          if (!strcmp(v30, "PRM"))
          {
            uint64_t v39 = *(unsigned __int8 *)(a1 + 324);
            LOBYTE(v36) = v39 + 1;
            *(unsigned char *)(a1 + 324) = v39 + 1;
            uint64_t v40 = a1 + 4 * v39;
            int v41 = 1;
          }
          else
          {
            if (strcmp(v30, "BND"))
            {
              int v35 = strcmp(v30, "LNG");
              uint64_t v36 = *(unsigned __int8 *)(a1 + 324);
              if (!v35)
              {
                uint64_t v37 = a1 + 4 * v36;
                LOBYTE(v36) = v36 + 1;
                *(unsigned char *)(a1 + 324) = v36;
                *(_DWORD *)(v37 + 428) = 3;
              }
              goto LABEL_76;
            }
            uint64_t v42 = *(unsigned __int8 *)(a1 + 324);
            LOBYTE(v36) = v42 + 1;
            *(unsigned char *)(a1 + 324) = v42 + 1;
            uint64_t v40 = a1 + 4 * v42;
            int v41 = 2;
          }
          *(_DWORD *)(v40 + 428) = v41;
        }
      }
      else
      {
        LOBYTE(v36) = *(unsigned char *)(a1 + 324);
      }
LABEL_76:
      uint64_t v43 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 8 * v36);
      *(void *)(a1 + 472) = v43;
      if (!v43)
      {
LABEL_143:
        uint64_t v10 = 2410684426;
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v15, v16, v17, v18, v84);
        return v10;
      }
      if (*(unsigned char *)(a1 + 324))
      {
        unint64_t v44 = 0;
        long long v45 = xmmword_26C21F608;
        long long v46 = *(_OWORD *)off_26C21F618;
        uint64_t v47 = off_26C21F628;
        long long v84 = *(_OWORD *)off_26C21F618;
        long long v86 = xmmword_26C21F608;
        do
        {
          int v48 = *(void **)(*(void *)a1 + 8);
          unsigned int v49 = (uint64_t *)(*(void *)(a1 + 472) + 8 * v44);
          long long v88 = v45;
          long long v89 = v46;
          uint64_t v90 = v47;
          uint64_t inited = ssftmap_ObjOpen(v48, 0, &v88, v49);
          if ((inited & 0x80000000) != 0) {
            return inited;
          }
          __int16 __c_1 = 2;
          LH_itoa(1u, v97, 0xAu);
          __strcat_chk();
          uint64_t v10 = (*(uint64_t (**)(void, void, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", v97, &__c_3, &__c_1, &__c);
          if ((v10 & 0x80000000) != 0) {
            return v10;
          }
          if (__c_1)
          {
            int v50 = 1;
            do
            {
              uint64_t v51 = strchr((char *)*__c_3, 59);
              if (v51)
              {
                char *v51 = 0;
                uint64_t inited = ssftmap_Insert(*(void *)(*(void *)(a1 + 472) + 8 * v44), (uint64_t)*__c_3, (uint64_t)(v51 + 1));
                if ((inited & 0x80000000) != 0) {
                  return inited;
                }
              }
              __int16 __c_1 = 2;
              LH_itoa((unsigned __int16)++v50, v97, 0xAu);
              __strcat_chk();
              uint64_t v10 = (*(uint64_t (**)(void, void, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfg", v97, &__c_3, &__c_1, &__c);
              if ((v10 & 0x80000000) != 0) {
                return v10;
              }
            }
            while (__c_1);
          }
          ++v44;
          long long v46 = v84;
          long long v45 = v86;
        }
        while (v44 < *(unsigned __int8 *)(a1 + 324));
      }
    }
  }
  if (!*(_DWORD *)(a1 + 316)) {
    return v10;
  }
  __int16 __c_1 = 2;
  uint64_t inited = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfgmw", "nrdctpart", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (__c_1 == 1)
  {
    uint64_t v52 = *__c_3;
    uint64_t v53 = strchr((char *)*__c_3, __c);
    if (v53)
    {
      char *v53 = 0;
      uint64_t v52 = *__c_3;
    }
    *(unsigned char *)(a1 + 632) = atoi(v52);
  }
  __int16 __c_1 = 2;
  uint64_t inited = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfgmw", "maxnrword", &__c_3, &__c_1, &__c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (__c_1 == 1)
  {
    int v54 = *__c_3;
    unsigned int v55 = strchr((char *)*__c_3, __c);
    if (v55)
    {
      *unsigned int v55 = 0;
      int v54 = *__c_3;
    }
    *(unsigned char *)(a1 + 633) = atoi(v54);
  }
  __int16 __c_1 = 2;
  uint64_t v10 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfgmw", "fn", &__c_3, &__c_1, &__c);
  if ((v10 & 0x80000000) != 0 || __c_1 != 1) {
    return v10;
  }
  uint64_t v56 = *__c_3;
  long long v57 = strchr((char *)*__c_3, 59);
  if (v57)
  {
    long long v58 = v57;
    do
    {
      *long long v58 = 0;
      unsigned int v59 = *(unsigned __int8 *)(a1 + 481);
      *(unsigned char *)(a1 + 481) = v59 + 1;
      strcpy((char *)(a1 + 10 * v59 + 482), v56);
      uint64_t v56 = v58 + 1;
      long long v58 = strchr(v58 + 1, 59);
    }
    while (v58);
  }
  unsigned int v60 = *(unsigned __int8 *)(a1 + 481);
  *(unsigned char *)(a1 + 481) = v60 + 1;
  strcpy((char *)(a1 + 10 * v60 + 482), v56);
  __int16 __c_1 = 2;
  uint64_t v10 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfgmw", "ft", &__c_3, &__c_1, &__c);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if (__c_1 != 1)
  {
    LOBYTE(v67) = *(unsigned char *)(a1 + 481);
    goto LABEL_128;
  }
  int v61 = *__c_3;
  long long v62 = strchr((char *)*__c_3, 59);
  *(unsigned char *)(a1 + 481) = 0;
  if (v62)
  {
    uint64_t v63 = v62;
    while (1)
    {
      *uint64_t v63 = 0;
      if (!strcmp(v61, "NLU")) {
        break;
      }
      if (!strcmp(v61, "PRM"))
      {
        int v64 = 1;
        goto LABEL_116;
      }
      if (!strcmp(v61, "BND"))
      {
        int v64 = 2;
        goto LABEL_116;
      }
      if (!strcmp(v61, "LNG"))
      {
        int v64 = 3;
LABEL_116:
        uint64_t v65 = *(unsigned __int8 *)(a1 + 481);
        *(unsigned char *)(a1 + 481) = v65 + 1;
        *(_DWORD *)(a1 + 4 * v65 + 584) = v64;
      }
      int v61 = v63 + 1;
      uint64_t v63 = strchr(v63 + 1, 59);
      if (!v63) {
        goto LABEL_118;
      }
    }
    int v64 = 0;
    goto LABEL_116;
  }
LABEL_118:
  if (!strcmp(v61, "NLU"))
  {
    uint64_t v69 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v67) = v69 + 1;
    *(unsigned char *)(a1 + 481) = v69 + 1;
    *(_DWORD *)(a1 + 4 * v69 + 584) = 0;
    goto LABEL_128;
  }
  if (!strcmp(v61, "PRM"))
  {
    uint64_t v70 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v67) = v70 + 1;
    *(unsigned char *)(a1 + 481) = v70 + 1;
    uint64_t v71 = a1 + 4 * v70;
    int v72 = 1;
LABEL_127:
    *(_DWORD *)(v71 + 584) = v72;
    goto LABEL_128;
  }
  if (!strcmp(v61, "BND"))
  {
    uint64_t v73 = *(unsigned __int8 *)(a1 + 481);
    LOBYTE(v67) = v73 + 1;
    *(unsigned char *)(a1 + 481) = v73 + 1;
    uint64_t v71 = a1 + 4 * v73;
    int v72 = 2;
    goto LABEL_127;
  }
  int v66 = strcmp(v61, "LNG");
  uint64_t v67 = *(unsigned __int8 *)(a1 + 481);
  if (!v66)
  {
    uint64_t v68 = a1 + 4 * v67;
    LOBYTE(v67) = v67 + 1;
    *(unsigned char *)(a1 + 481) = v67;
    *(_DWORD *)(v68 + 584) = 3;
  }
LABEL_128:
  uint64_t v74 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 8 * v67);
  *(void *)(a1 + 624) = v74;
  if (!v74) {
    goto LABEL_143;
  }
  if (*(unsigned char *)(a1 + 481))
  {
    unint64_t v75 = 0;
    long long v76 = xmmword_26C21F608;
    long long v77 = *(_OWORD *)off_26C21F618;
    __int16 v78 = off_26C21F628;
    long long v85 = *(_OWORD *)off_26C21F618;
    long long v87 = xmmword_26C21F608;
    while (1)
    {
      unsigned int v79 = *(void **)(*(void *)a1 + 8);
      __int16 v80 = (uint64_t *)(*(void *)(a1 + 624) + 8 * v75);
      long long v88 = v76;
      long long v89 = v77;
      uint64_t v90 = v78;
      uint64_t inited = ssftmap_ObjOpen(v79, 0, &v88, v80);
      if ((inited & 0x80000000) != 0) {
        return inited;
      }
      __int16 __c_1 = 2;
      LH_itoa(1u, v97, 0xAu);
      __strcat_chk();
      uint64_t v10 = (*(uint64_t (**)(void, void, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfgmw", v97, &__c_3, &__c_1, &__c);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      if (__c_1)
      {
        int v81 = 1;
        do
        {
          uint64_t v82 = strchr((char *)*__c_3, 59);
          if (v82)
          {
            *uint64_t v82 = 0;
            uint64_t inited = ssftmap_Insert(*(void *)(*(void *)(a1 + 624) + 8 * v75), (uint64_t)*__c_3, (uint64_t)(v82 + 1));
            if ((inited & 0x80000000) != 0) {
              return inited;
            }
          }
          __int16 __c_1 = 2;
          LH_itoa((unsigned __int16)++v81, v97, 0xAu);
          __strcat_chk();
          uint64_t v10 = (*(uint64_t (**)(void, void, const char *, char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 56) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptcfgmw", v97, &__c_3, &__c_1, &__c);
          if ((v10 & 0x80000000) != 0) {
            return v10;
          }
        }
        while (__c_1);
      }
      ++v75;
      long long v77 = v85;
      long long v76 = v87;
      if (v75 >= *(unsigned __int8 *)(a1 + 481)) {
        return v10;
      }
    }
  }
  return v10;
}

uint64_t be_adapt_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 503, 656);
  if ((result & 0x80000000) != 0) {
    return 2410684424;
  }
  if (a1)
  {
    globalbeadapt_DeInit_SpecialSymbolsFromPhonmap(a1);
    if (a1[1]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
    }
    if (a1[4]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
    }
    if (a1[7]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    }
    if (a1[10]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"PHONMAP");
    }
    FreeFeatureMaps(a1);
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t be_adapt_ObjReopen(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 503, 656);
  if ((result & 0x80000000) != 0) {
    return 2410684424;
  }
  if (a1)
  {
    FreeFeatureMaps(a1);
    return hlp_VoiceSetup_0((uint64_t)a1);
  }
  return result;
}

void *FreeFeatureMaps(void *result)
{
  unsigned int v1 = result;
  uint64_t v2 = result[59];
  if (v2)
  {
    unsigned int v3 = *((unsigned __int8 *)result + 324);
    if (*((unsigned char *)result + 324))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = v1[59];
        uint64_t v6 = *(void *)(v5 + 8 * v4);
        if (v6)
        {
          ssftmap_ObjClose(v6);
          uint64_t v5 = v1[59];
          unsigned int v3 = *((unsigned __int8 *)v1 + 324);
        }
        *(void *)(v5 + 8 * v4++) = 0;
      }
      while (v4 < v3);
      uint64_t v2 = v1[59];
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v2);
    *((unsigned char *)v1 + 324) = 0;
    v1[59] = 0;
  }
  uint64_t v7 = v1[78];
  if (v7)
  {
    unsigned int v8 = *((unsigned __int8 *)v1 + 481);
    if (*((unsigned char *)v1 + 481))
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = v1[78];
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        if (v11)
        {
          ssftmap_ObjClose(v11);
          uint64_t v10 = v1[78];
          unsigned int v8 = *((unsigned __int8 *)v1 + 481);
        }
        *(void *)(v10 + 8 * v9++) = 0;
      }
      while (v9 < v8);
      uint64_t v7 = v1[78];
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v7);
    *((unsigned char *)v1 + 481) = 0;
    v1[78] = 0;
  }
  uint64_t v12 = v1[80];
  if (v12)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v12);
    v1[80] = 0;
  }
  uint64_t v13 = v1[81];
  if (v13)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v13);
    v1[81] = 0;
  }
  return result;
}

uint64_t be_adapt_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 503, 656);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2410684424;
  }
}

uint64_t be_adapt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  __int16 v45 = 0;
  __int16 v41 = 2;
  if ((safeh_HandleCheck(a1, a2, 503, 656) & 0x80000000) != 0) {
    return 2410684424;
  }
  int v50 = 0;
  int v49 = 0;
  __int16 v48 = 0;
  uint64_t v47 = 0;
  unsigned __int16 v46 = 0;
  unsigned __int16 v44 = 0;
  unsigned int v43 = 0;
  uint64_t v42 = 0;
  char v40 = 0;
  *a5 = 1;
  uint64_t v9 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 16), *(void *)(a1 + 24), a1 + 104);
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_101;
  }
  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 8) + 104))(a3, a4, 1, 0, (char *)&v49 + 2);
  if ((updated & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 8) + 184))(a3, a4, HIWORD(v49), 0, &v45) & 0x80000000) == 0&& v45 == 1)
  {
    uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, int *))(*(void *)(a1 + 8)
                                                                                                + 176))(a3, a4, HIWORD(v49), 0, &v50, &v49);
    if ((updated & 0x80000000) == 0 && (unsigned __int16)v49 >= 2u)
    {
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(a1 + 8) + 160))(a3, a4, HIWORD(v49), 2, 1, &byte_20D5A22AE, &v48);
      if ((updated & 0x80000000) != 0) {
        goto LABEL_102;
      }
      if (!*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 320))
      {
LABEL_27:
        if (*(void *)(a1 + 640) && *(void *)(a1 + 648) && *(void *)(a1 + 80)) {
          hlp_DifferentiatorLOO((void *)a1, a3, a4, HIWORD(v49));
        }
        goto LABEL_102;
      }
      *(_DWORD *)(a1 + 268) = 0;
      strcpy(v60, "pre_be_adapt");
      uint64_t v9 = globalbeadapt_SetupDepesInput(a1, a3, a4, HIWORD(v49), (uint64_t)v60, 1, v11, v12);
      if ((v9 & 0x80000000) == 0)
      {
        if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 32) + 80))(*(void *)(a1 + 16), *(void *)(a1 + 24), v60) & 0x80000000) != 0|| (uint64_t v9 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 32)+ 128))(*(void *)(a1 + 16), *(void *)(a1 + 24), 0, &v47, &v46), (v9 & 0x80000000) == 0)&& (v47[v46] = 0, uint64_t v9 = globalbeadapt_DoPostprocessing((void *)a1, v50, &v47, 0), (v9 & 0x80000000) == 0)&& (uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 8) + 320))(a3, a4, 0), (v9 & 0x80000000) == 0)&& (log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0,
                (uint64_t)"%s O1: %s",
                v13,
                v14,
                v15,
                (uint64_t)v60),
              uint64_t v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v49), (uint64_t)v50, v47),
              (v9 & 0x80000000) == 0))
        {
          com_depes_FreeLayers(*(void *)a1, a1 + 96);
          if (*(_DWORD *)(a1 + 312) && !*(_DWORD *)(a1 + 636))
          {
            uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 8)
                                                                                                  + 104))(a3, a4, 2, HIWORD(v49), &v44);
            if ((v9 & 0x80000000) != 0) {
              goto LABEL_101;
            }
            while (v44)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 168))(a3, a4);
              if ((updated & 0x80000000) != 0) {
                goto LABEL_102;
              }
              if (v43 <= 0xA && ((1 << v43) & 0x610) != 0)
              {
                int v39 = 0;
                int v22 = *(unsigned __int8 *)(a1 + 633);
                if (*(unsigned char *)(a1 + 633))
                {
                  while (1)
                  {
                    uint64_t v23 = v44;
                    unsigned __int16 v54 = v44;
                    unsigned __int16 v53 = 0;
                    unsigned int v51 = 0;
                    int v52 = 0;
                    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v44, 1, 1, &v53, &v52);
                    if ((v9 & 0x80000000) != 0) {
                      goto LABEL_101;
                    }
                    uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v23, 2, 1, (char *)&v52 + 2, &v52);
                    if ((updated & 0x80000000) != 0) {
                      goto LABEL_102;
                    }
                    if (HIWORD(v52) - v53 < 256)
                    {
                      __strncpy_chk();
                      __int16 v28 = HIWORD(v52);
                      unsigned __int16 v29 = v53;
                      __s[HIWORD(v52) - v53] = 0;
                      uint64_t v9 = (*(uint64_t (**)(void, void, const char *, char *, void))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 40), *(void *)(a1 + 48), "normal", __s, (unsigned __int16)(v28 - v29));
                      if ((v9 & 0x80000000) != 0) {
                        goto LABEL_101;
                      }
                      int v27 = 1;
                      if (v22 >= 2u && v23)
                      {
                        unsigned __int16 v30 = v23;
                        while (1)
                        {
                          uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 8) + 120))(a3, a4, v30, &v54);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_101;
                          }
                          if (v54)
                          {
                            uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 168))(a3, a4);
                            if ((v9 & 0x80000000) != 0) {
                              goto LABEL_101;
                            }
                            if (v51 - 11 < 5) {
                              break;
                            }
                            if (v51 <= 0xA && ((1 << v51) & 0x610) != 0)
                            {
                              uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v54, 1, 1, &v53, &v52);
                              if ((v9 & 0x80000000) != 0) {
                                goto LABEL_101;
                              }
                              uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 8) + 168))(a3, a4, v54, 2, 1, (char *)&v52 + 2, &v52);
                              if ((v9 & 0x80000000) != 0) {
                                goto LABEL_101;
                              }
                              if (strlen(__s) + HIWORD(v52) - v53 - 255 < 0xFFFFFFFFFFFFFF00) {
                                break;
                              }
                              __strncpy_chk();
                              __int16 v31 = HIWORD(v52);
                              unsigned __int16 v32 = v53;
                              v61[HIWORD(v52) - v53] = 0;
                              uint64_t v9 = (*(uint64_t (**)(void, void, const char *, unsigned char *, void))(*(void *)(a1 + 56) + 112))(*(void *)(a1 + 40), *(void *)(a1 + 48), "normal", v61, (unsigned __int16)(v31 - v32));
                              if ((v9 & 0x80000000) != 0) {
                                goto LABEL_101;
                              }
                              __strcat_chk();
                              __strcat_chk();
                              ++v27;
                            }
                          }
                          if (v27 < v22)
                          {
                            unsigned __int16 v30 = v54;
                            if (v54) {
                              continue;
                            }
                          }
                          break;
                        }
                      }
                      unsigned __int16 v58 = v23;
                      __int16 v57 = 0;
                      uint64_t v56 = 0;
                      unsigned int v55 = 0;
                      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(void *)(a1 + 8) + 176))(a3, a4, v23, 3, &v56, &v57);
                      if ((updated & 0x80000000) != 0) {
                        goto LABEL_102;
                      }
                      size_t v33 = strlen(__s);
                      if (v33 + strlen(v56) - 255 >= 0xFFFFFFFFFFFFFF00)
                      {
                        __strcat_chk();
                        __strcat_chk();
                        if (v23 && v27 >= 2u)
                        {
                          unsigned __int8 v35 = 1;
                          while (1)
                          {
                            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 8) + 120))(a3, a4, (unsigned __int16)v23, &v58);
                            if ((updated & 0x80000000) != 0) {
                              goto LABEL_102;
                            }
                            if (v58)
                            {
                              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 168))(a3, a4);
                              if ((updated & 0x80000000) != 0) {
                                goto LABEL_102;
                              }
                              if (v55 <= 0xA && ((1 << v55) & 0x610) != 0)
                              {
                                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(*(void *)(a1 + 8) + 176))(a3, a4, v58, 3, &v56, &v57);
                                if ((updated & 0x80000000) != 0) {
                                  goto LABEL_102;
                                }
                                size_t v37 = strlen(__s);
                                if (v37 + strlen(v56) - 255 < 0xFFFFFFFFFFFFFF00) {
                                  goto LABEL_63;
                                }
                                ++v35;
                                __strcat_chk();
                                __strcat_chk();
                              }
                            }
                            if (v35 < v27)
                            {
                              LOWORD(v23) = v58;
                              if (v58) {
                                continue;
                              }
                            }
                            break;
                          }
                        }
                      }
                      else
                      {
LABEL_63:
                        __s[0] = 0;
                      }
                    }
                    else
                    {
                      __s[0] = 0;
                      int v27 = v22;
                    }
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"voice lexicon key= %s", v24, v25, v26, (uint64_t)__s);
                    int v34 = 0;
                    if (v27 == 1 && __s[0])
                    {
                      __int16 v41 = 2;
                      uint64_t updated = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, char *, void))(*(void *)(a1 + 56) + 152))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptlex", __s, &v42, &v41, &v40, *(unsigned __int8 *)(a1 + 480));
                      if ((updated & 0x80000000) != 0) {
                        goto LABEL_102;
                      }
                      if (v41 == 1)
                      {
                        int v39 = 1;
                        uint64_t updated = hlp_UpdateLdb((void *)a1, a3, a4, &v44, *v42, 1u, 0, &v39, (uint64_t)v50);
                        if ((updated & 0x80000000) != 0) {
                          goto LABEL_102;
                        }
                        int v34 = v39;
                      }
                      else
                      {
                        int v34 = 0;
                      }
                    }
                    if (__s[0])
                    {
                      if (!v34)
                      {
                        int v34 = *(_DWORD *)(a1 + 316);
                        if (v34)
                        {
                          __int16 v41 = 2;
                          uint64_t updated = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, char *, void))(*(void *)(a1 + 56) + 152))(*(void *)(a1 + 40), *(void *)(a1 + 48), "adaptlexmw", __s, &v42, &v41, &v40, *(unsigned __int8 *)(a1 + 632));
                          if ((updated & 0x80000000) != 0) {
                            goto LABEL_102;
                          }
                          if (v41 == 1)
                          {
                            int v39 = 1;
                            uint64_t updated = hlp_UpdateLdb((void *)a1, a3, a4, &v44, *v42, v27, 1, &v39, (uint64_t)v50);
                            if ((updated & 0x80000000) != 0) {
                              goto LABEL_102;
                            }
                            int v34 = v39;
                          }
                          else
                          {
                            int v34 = 0;
                          }
                        }
                      }
                    }
                    int v22 = v27 - 1;
                    if ((_BYTE)v27 == 1 || v34) {
                      break;
                    }
                  }
                }
              }
              if (v44) {
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 120))(a3, a4);
              }
              if ((updated & 0x80000000) != 0) {
                goto LABEL_102;
              }
            }
          }
          strcpy(v60, "post_be_adapt");
          uint64_t v9 = globalbeadapt_SetupDepesInput(a1, a3, a4, HIWORD(v49), (uint64_t)v60, 0, v16, v17);
          if ((v9 & 0x80000000) == 0)
          {
            if (!*(_DWORD *)(a1 + 636)) {
              (*(void (**)(void, void, char *))(*(void *)(a1 + 32) + 80))(*(void *)(a1 + 16), *(void *)(a1 + 24), v60);
            }
            uint64_t v9 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 32)
                                                                                                + 128))(*(void *)(a1 + 16), *(void *)(a1 + 24), 0, &v47, &v46);
            if ((v9 & 0x80000000) == 0)
            {
              v47[v46] = 0;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"%s O1: %s", v18, v19, v20, (uint64_t)v60);
              uint64_t v9 = globalbeadapt_DoPostprocessing((void *)a1, v50, &v47, 1);
              if ((v9 & 0x80000000) == 0)
              {
                uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 320))(a3, a4, 1);
                if ((v9 & 0x80000000) == 0)
                {
                  uint64_t v9 = globalbeadapt_OutputToLingDB(a1, a3, a4, HIWORD(v49), (uint64_t)v50, v47);
                  if ((v9 & 0x80000000) == 0)
                  {
                    uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(a1 + 8) + 272))(a3, a4, 4, 1, 0, 0);
                    if ((updated & 0x80000000) == 0) {
                      goto LABEL_27;
                    }
LABEL_102:
                    com_depes_FreeLayers(*(void *)a1, a1 + 96);
                    return updated;
                  }
                }
              }
            }
          }
        }
      }
LABEL_101:
      uint64_t updated = v9;
      goto LABEL_102;
    }
  }
  return updated;
}

uint64_t hlp_UpdateLdb(void *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, char *a5, unsigned int a6, int a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  __int16 v87 = 0;
  long long __s1 = 0;
  long long v86 = 0;
  unsigned int v83 = 0;
  uint64_t v84 = 0;
  uint64_t v82 = 0;
  unsigned int v81 = 0;
  uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 3, &v83, &v87);
  if ((ReadOnly & 0x80000000) != 0) {
    return ReadOnly;
  }
  uint64_t v73 = a8;
  unsigned int v75 = a6;
  uint64_t v18 = 481;
  if (a7)
  {
    uint64_t v19 = a1 + 73;
  }
  else
  {
    uint64_t v18 = 324;
    uint64_t v19 = (void *)((char *)a1 + 428);
  }
  uint64_t v20 = 78;
  if (!a7) {
    uint64_t v20 = 59;
  }
  uint64_t v21 = a1[v20];
  v88[0] = 0;
  v88[1] = 0;
  int v89 = 0;
  strcpy(__s, "|");
  uint64_t v22 = *((unsigned __int8 *)a1 + v18);
  if (*((unsigned char *)a1 + v18))
  {
    uint64_t v23 = 0;
    do
    {
      if (v23)
      {
        __strcat_chk();
        *((_WORD *)v88 + v23) = strlen(__s);
      }
      switch(*((_DWORD *)v19 + v23))
      {
        case 0:
          uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 14, &__s1, &v87);
          if ((ReadOnly & 0x80000000) == 0)
          {
            if ((ssftmap_IteratorOpen(*(void *)(v21 + 8 * v23), 0, 0, (uint64_t)&v82) & 0x80000000) == 0)
            {
              while ((ssftmap_IteratorNext(v82, &v86, &v84) & 0x80000000) == 0)
              {
                if (strstr(__s1, v86)) {
                  __strcat_chk();
                }
              }
              ssftmap_IteratorClose((uint64_t)v82);
            }
            goto LABEL_35;
          }
          return ReadOnly;
        case 1:
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 13, &v86, &v87);
          goto LABEL_31;
        case 2:
          unsigned __int16 v79 = 0;
          int v78 = 0;
          unsigned __int16 v77 = 3;
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 1, 1, (char *)&v78 + 2, &v87);
          if ((v24 & 0x80000000) != 0) {
            return v24;
          }
          LOWORD(v78) = *a4;
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
          break;
        case 3:
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 9, &v86, &v87);
LABEL_31:
          if ((v24 & 0x80000000) != 0) {
            return v24;
          }
          uint64_t ReadOnly = ssftmap_FindReadOnly(*(void *)(v21 + 8 * v23), (uint64_t)v86, &v84);
          goto LABEL_33;
        default:
          goto LABEL_35;
      }
      while (1)
      {
        if ((v24 & 0x80000000) != 0) {
          return v24;
        }
        if (!(_WORD)v78 || v79 > HIWORD(v78)) {
          break;
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
        if ((v24 & 0x80000000) != 0) {
          return v24;
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, (unsigned __int16)v78, 1, 1, &v79, &v87);
        if ((v24 & 0x80000000) != 0) {
          return v24;
        }
        if (v81 == 15)
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, (unsigned __int16)v78, 7, 1, &v77, &v87);
          if ((v24 & 0x80000000) != 0) {
            return v24;
          }
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
      }
      if ((_WORD)v78)
      {
        unsigned int v26 = v77;
      }
      else
      {
        unsigned int v26 = 0;
        unsigned __int16 v77 = 0;
      }
      LH_itoa(v26, (char *)&v80, 0xAu);
      uint64_t ReadOnly = ssftmap_FindReadOnly(*(void *)(v21 + 8 * v23), (uint64_t)&v80, &v84);
LABEL_33:
      __strcat_chk();
LABEL_35:
      ++v23;
    }
    while (v23 != v22);
  }
  __strcat_chk();
  int v27 = strstr(a5, __s);
  if (!v27 && v22)
  {
    do
    {
      __s[*((unsigned __int16 *)v88 + (v22 - 1))] = 0;
      int v27 = strstr(a5, __s);
      if (v27) {
        break;
      }
      LODWORD(v22) = v22 - 1;
    }
    while ((_BYTE)v22);
  }
  if (!v27) {
    int v27 = a5;
  }
  __int16 v28 = strchr(v27, 59);
  if (v28)
  {
    unsigned __int16 v29 = v28 + 1;
    unsigned __int16 v30 = strchr(v28 + 1, 124);
    if (v30)
    {
      *unsigned __int16 v30 = 0;
      unsigned int v83 = v29;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"BE_ADAPT", 5, 0, (uint64_t)"adapted transcription= %s", v31, v32, v33, (uint64_t)v29);
    }
  }
  int v34 = v83;
  uint64_t v35 = *v83 != 0;
  unsigned __int8 v36 = 1;
  while (v83[v35] == 95)
  {
    ++v36;
LABEL_55:
    ++v35;
  }
  if (v83[v35]) {
    goto LABEL_55;
  }
  if (v75 != 1)
  {
    if (v36 != 1)
    {
      if (v75 == v36)
      {
        uint64_t v47 = strchr(v83, 95);
        __int16 v48 = v47;
        if (v47)
        {
          *uint64_t v47 = 0;
          int v34 = v83;
        }
        uint64_t ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v34);
        if ((ReadOnly & 0x80000000) == 0 && v75 >= 2)
        {
          unsigned __int16 v49 = *a4;
          if (*a4)
          {
            if (v48)
            {
              unsigned __int8 v50 = 1;
              while (1)
              {
                uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 120))(a2, a3, v49, a4);
                if ((ReadOnly & 0x80000000) != 0) {
                  break;
                }
                if (*a4)
                {
                  uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
                  if ((ReadOnly & 0x80000000) != 0) {
                    return ReadOnly;
                  }
                  if (v81 <= 0xA && ((1 << v81) & 0x610) != 0)
                  {
                    int v52 = v48 + 1;
                    unsigned int v83 = v48 + 1;
                    unsigned __int16 v53 = strchr(v48 + 1, 95);
                    __int16 v48 = v53;
                    if (v53)
                    {
                      char *v53 = 0;
                      int v52 = v83;
                    }
                    uint64_t ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v52);
                    if ((ReadOnly & 0x80000000) != 0) {
                      return ReadOnly;
                    }
                    ++v50;
                  }
                }
                if (v75 > v50)
                {
                  unsigned __int16 v49 = *a4;
                  if (*a4)
                  {
                    if (v48) {
                      continue;
                    }
                  }
                }
                return ReadOnly;
              }
            }
          }
        }
      }
      else
      {
        _DWORD *v73 = 0;
      }
      return ReadOnly;
    }
    uint64_t v38 = *a4;
    uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, v38, 14, &__s1, &v87);
    if ((ReadOnly & 0x80000000) != 0) {
      return ReadOnly;
    }
    int v39 = __s1;
    if (!strstr(__s1, "E_") && !strstr(v39, "e_"))
    {
      if (v75 >= 2)
      {
        int v62 = 1;
        unsigned __int8 v63 = 1;
        while (*a4)
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 120))(a2, a3);
          if ((v24 & 0x80000000) != 0) {
            return v24;
          }
          if (*a4)
          {
            uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
            if ((v24 & 0x80000000) != 0) {
              return v24;
            }
            if (v81 <= 0xA && ((1 << v81) & 0x610) != 0)
            {
              uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1[1] + 176))(a2, a3, *a4, 14, &__s1, &v87);
              if ((ReadOnly & 0x80000000) != 0) {
                return ReadOnly;
              }
              int v64 = __s1;
              if (v75 - 1 != v62 && (strstr(__s1, "E_") || strstr(v64, "e_"))
                || strstr(v64, "S_")
                || strstr(v64, "s_")
                || strstr(v64, "B-"))
              {
                *a4 = v38;
                goto LABEL_148;
              }
              ++v63;
            }
          }
          int v62 = v63;
          if (v63 >= v75) {
            break;
          }
        }
      }
      uint64_t ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, v38, v83);
      if ((ReadOnly & 0x80000000) == 0)
      {
        *a4 = v38;
        if (v75 >= 2)
        {
          if (v38)
          {
            int v40 = 1;
            unsigned __int16 v41 = v38;
            do
            {
              uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 120))(a2, a3, v41, a4);
              if ((ReadOnly & 0x80000000) != 0) {
                break;
              }
              if (*a4)
              {
                uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
                if ((ReadOnly & 0x80000000) != 0) {
                  break;
                }
                if (v81 <= 0xA && ((1 << v81) & 0x610) != 0)
                {
                  uint64_t ReadOnly = hlp_DeleteWordRecord(a1, a2, a3, a4, v38, a9);
                  if ((ReadOnly & 0x80000000) != 0) {
                    break;
                  }
                  if (v75 <= ++v40) {
                    break;
                  }
                }
              }
              unsigned __int16 v41 = *a4;
            }
            while (*a4);
          }
        }
      }
      return ReadOnly;
    }
    goto LABEL_148;
  }
  int v37 = v36 - 1;
  if (v36 == 1) {
    return hlp_AdjustWordRecord(a1, a2, a3, *a4, v83);
  }
  unsigned __int16 v80 = 0;
  HIWORD(v78) = 0;
  unsigned __int16 v43 = *a4;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 1, 1, &v80, &v87);
  if ((v24 & 0x80000000) != 0) {
    return v24;
  }
  uint64_t ReadOnly = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1[1] + 168))(a2, a3, *a4, 2, 1, (char *)&v78 + 2, &v87);
  if ((ReadOnly & 0x80000000) == 0)
  {
    if (v80 >= HIWORD(v78))
    {
      unsigned __int8 v44 = 0;
    }
    else
    {
      unsigned __int8 v44 = 0;
      __int16 v45 = (unsigned __int8 *)(a9 + v80);
      do
      {
        int v46 = *v45++;
        if (v46 == 45) {
          ++v44;
        }
      }
      while ((unint64_t)v45 < a9 + (unint64_t)HIWORD(v78));
    }
    if (v37 == v44)
    {
      unsigned __int16 v54 = v83;
      unsigned int v55 = strchr(v83, 95);
      uint64_t v56 = v55;
      if (v55)
      {
        *unsigned int v55 = 0;
        unsigned __int16 v54 = v83;
      }
      uint64_t v24 = hlp_AdjustWordRecord(a1, a2, a3, *a4, v54);
      if ((v24 & 0x80000000) != 0) {
        return v24;
      }
      unsigned __int16 v57 = v80;
      unsigned __int16 v58 = strchr((char *)(a9 + v80), 45);
      if (v58)
      {
        *unsigned __int16 v58 = 32;
        __int16 v76 = (_WORD)v58 - a9 + 1;
        unsigned __int16 v57 = v80;
      }
      else
      {
        __int16 v76 = 0;
      }
      unsigned __int16 v79 = v57;
      uint64_t v59 = *a4;
      if (*a4)
      {
        unsigned __int16 v60 = *a4;
        do
        {
          unsigned __int16 v43 = v60;
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 120))(a2, a3, v60, a4);
          if ((v24 & 0x80000000) != 0) {
            return v24;
          }
          if (!*a4) {
            break;
          }
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
          if ((v24 & 0x80000000) != 0) {
            return v24;
          }
          unsigned __int16 v60 = *a4;
        }
        while (*a4 && v79 == v80);
      }
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 80))(a2, a3, v43, a4);
      if ((v24 & 0x80000000) != 0) {
        return v24;
      }
      uint64_t v24 = hlp_CopyWordRec_0(a1, a2, a3, v59, *a4, v76);
      if ((v24 & 0x80000000) != 0) {
        return v24;
      }
      if (v56)
      {
        int v61 = v56 + 1;
        unsigned int v83 = v61;
      }
      else
      {
        int v61 = v83;
      }
      uint64_t v65 = strchr(v61, 95);
      if (v65)
      {
        *uint64_t v65 = 0;
        int v61 = v83;
      }
      uint64_t v74 = v65;
      uint64_t ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v61);
      if ((ReadOnly & 0x80000000) == 0)
      {
        unsigned __int16 v66 = v76;
        unsigned __int16 v80 = v76;
        if (v44 >= 2u)
        {
          int v67 = 1;
          while (1)
          {
            uint64_t v68 = strchr((char *)(a9 + v66), 45);
            if (v68)
            {
              *uint64_t v68 = 32;
              unsigned __int16 v66 = (_WORD)v68 - a9 + 1;
            }
            uint64_t v69 = *a4;
            uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 80))(a2, a3, v69, a4);
            if ((v24 & 0x80000000) != 0) {
              break;
            }
            uint64_t v24 = hlp_CopyWordRec_0(a1, a2, a3, v69, *a4, v66);
            if ((v24 & 0x80000000) != 0) {
              break;
            }
            if (v74)
            {
              uint64_t v70 = v74 + 1;
              unsigned int v83 = v74 + 1;
            }
            else
            {
              uint64_t v70 = v83;
            }
            uint64_t v71 = strchr(v70, 95);
            if (v71)
            {
              *uint64_t v71 = 0;
              uint64_t v70 = v83;
            }
            uint64_t v74 = v71;
            uint64_t ReadOnly = hlp_AdjustWordRecord(a1, a2, a3, *a4, v70);
            if ((ReadOnly & 0x80000000) == 0)
            {
              unsigned __int16 v80 = v66;
              if (++v67 < v44) {
                continue;
              }
            }
            return ReadOnly;
          }
          return v24;
        }
      }
      return ReadOnly;
    }
LABEL_148:
    _DWORD *v73 = 0;
  }
  return ReadOnly;
}

uint64_t hlp_DifferentiatorLOO(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v46 = 0;
  char __s = 0;
  *(_WORD *)__s2 = 0;
  char v44 = 0;
  uint64_t v43 = 0;
  int v41 = 0;
  int v42 = 0;
  uint64_t v40 = 0;
  __int16 v48 = 0;
  memset(v50, 0, 512);
  while (1)
  {
    uint64_t v9 = off_264111388[v8];
    if ((objc_GetObject(*(void *)(*a1 + 48), (uint64_t)v9, &v48) & 0x80000000) == 0) {
      break;
    }
    if (++v8 == 3)
    {
      LODWORD(v10) = 0;
      goto LABEL_9;
    }
  }
  uint64_t v10 = v48;
  if (v48)
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (safeh_HandlesEqual(v10[2], v10[3], NullHandle, v12)
      || (uint64_t v36 = v48[1]) == 0
      || (int v37 = *(uint64_t (**)(void, void, _OWORD *))(v36 + 120)) == 0
      || (v37(v48[2], v48[3], v50) & 0x80000000) != 0)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      __strcpy_chk();
      LODWORD(v10) = 1;
    }
  }
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)v9);
LABEL_9:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 104))(a2, a3, 2, a4, (char *)&v41 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetUInt(*(void *)(*a1 + 40), (uint64_t)"disableloodifferentiator", (unsigned int *)&v40);
    BOOL v14 = (int)result >= 0 && v40 == 1;
    BOOL v15 = !v14;
    unsigned __int16 v16 = HIWORD(v41);
    if (HIWORD(v41))
    {
      unsigned int v38 = v15;
      int v39 = (int)v10;
      uint64_t v17 = 0;
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v16, 0, 1, (char *)&v40 + 4, (char *)&v42 + 2);
        if ((result & 0x80000000) != 0) {
          break;
        }
        if (HIDWORD(v40) <= 0xA && ((1 << SBYTE4(v40)) & 0x610) != 0)
        {
          LOWORD(v41) = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[1] + 184))(a2, a3, HIWORD(v41), 12, &v41);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if ((unsigned __int16)v41 == 1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, HIWORD(v41), 12, &__s, (char *)&v42 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t v19 = (char *)a1[80];
            if (v19)
            {
              uint64_t v20 = __s;
              uint64_t v21 = (unsigned char *)a1[81];
              size_t v22 = (unsigned __int16)strlen(__s);
              do
              {
                int v23 = (char)*v21;
                if (!*v21) {
                  break;
                }
                if (!strncmp(v20, v19, v22))
                {
                  if (v39 && !strchr(v49, v23)) {
                    break;
                  }
                  char v44 = v23;
                  if (!v38) {
                    goto LABEL_32;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, HIWORD(v41), 3, &v46, (char *)&v42 + 2);
                  if ((result & 0x80000000) == 0)
                  {
                    size_t v25 = (2 * (strlen(v46) & 0x7FFF)) | 1;
                    unsigned int v26 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v17, v25);
                    if (!v26)
                    {
                      uint64_t result = log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v27, v28, v29, v30, v38);
                      goto LABEL_56;
                    }
                    uint64_t v17 = v26;
                    bzero(v26, v25);
                    uint64_t v43 = 0;
                    uint64_t v31 = v46;
                    if (*v46)
                    {
                      uint64_t v32 = 0;
                      int v33 = 0;
                      BOOL v34 = 1;
                      do
                      {
                        __s2[0] = v31[v32];
                        strcat(v17, __s2);
                        if (__s2[0] == 92)
                        {
                          BOOL v34 = !v34;
                        }
                        else if (v34)
                        {
                          BOOL v34 = 1;
                          if (((*(uint64_t (**)(void, void, void, char *, uint64_t *, void))(a1[10] + 64))(a1[8], a1[9], 0, __s2, &v43, 0) & 0x80000000) == 0)
                          {
                            if (v43)
                            {
                              BOOL v34 = 1;
                              strncat(v17, &v44, 1uLL);
                            }
                          }
                        }
                        uint64_t v32 = (unsigned __int16)++v33;
                        uint64_t v31 = v46;
                      }
                      while (strlen(v46) > (unsigned __int16)v33);
                    }
                    __int16 v35 = strlen(v17);
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a1[1] + 160))(a2, a3, HIWORD(v41), 3, (unsigned __int16)(v35 + 1), v17, &v42);
                    if ((result & 0x80000000) == 0) {
                      goto LABEL_32;
                    }
                  }
                  goto LABEL_56;
                }
                uint64_t v24 = strchr(v19, 44);
                uint64_t v19 = v24 + 1;
                ++v21;
              }
              while (v24);
            }
            char v44 = 0;
          }
        }
LABEL_32:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[1] + 120))(a2, a3, HIWORD(v41), (char *)&v41 + 2);
        if ((result & 0x80000000) != 0) {
          break;
        }
        unsigned __int16 v16 = HIWORD(v41);
      }
      while (HIWORD(v41));
LABEL_56:
      if (v17) {
        return (uint64_t)heap_Free(*(void **)(*a1 + 8), (uint64_t)v17);
      }
    }
  }
  return result;
}

uint64_t be_adapt_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 503, 656);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2410684424;
  }
}

uint64_t be_adapt_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2410684417;
  }
  uint64_t result = 0;
  *a2 = &IFeBeadapt;
  return result;
}

uint64_t hlp_AdjustWordRecord(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s)
{
  __sa = 0;
  long long __s1 = 0;
  unsigned __int16 v16 = 0;
  uint64_t v17 = 0;
  BOOL v10 = !strchr(__s, 39) && !strchr(__s, 34);
  int v18 = 0;
  int v19 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 3, &__sa, (char *)&v19 + 2);
  if ((result & 0x80000000) == 0)
  {
    int v12 = __sa;
    BOOL v13 = strchr(__sa, 39) || strchr(v12, 34);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, a4, 13, &__s1, (char *)&v19 + 2);
    if ((result & 0x80000000) == 0)
    {
      if (!v10 && !v13 && !strcmp(__s1, "0"))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(a2, a3, a4, 13, 2, "1", &v19);
      }
      else
      {
        if (!v10 || !strcmp(__s1, "0"))
        {
LABEL_18:
          __int16 v14 = strlen(__s);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160))(a2, a3, a4, 3, (unsigned __int16)(v14 + 1), __s, &v19);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, a4, 0, 1, &v18, (char *)&v19 + 2);
            if ((result & 0x80000000) == 0 && v18 == 10)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char **, char *))(a1[1] + 176))(a2, a3, a4, 9, &v17, (char *)&v19 + 2);
              if ((result & 0x80000000) == 0)
              {
                if (v17 && *v17
                  || (uint64_t result = paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"langcode", &v16),
                      (result & 0x80000000) == 0)
                  && (!v16
                   || (__int16 v15 = strlen(v16),
                       uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160))(a2, a3, a4, 9, (unsigned __int16)(v15 + 1), v16, &v19), (result & 0x80000000) == 0)))
                {
                  int v18 = 4;
                  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, a4, 0, 4, &v18, &v19);
                }
              }
            }
          }
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a1[1] + 160))(a2, a3, a4, 13, 2, "0", &v19);
      }
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t hlp_CopyWordRec_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __int16 a6)
{
  int v47 = 0;
  BOOL v10 = 0;
  unsigned __int8 v11 = 0;
  __int16 v51 = a6;
  __int16 v50 = 0;
  __int16 v49 = 0;
  long long __s1 = 0;
  do
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(a1[1] + 184))(a2, a3, a4, v11, &v50);
    if ((v12 & 0x80000000) != 0) {
      break;
    }
    if (v50)
    {
      if (v11 > 0x11u || ((1 << v11) & 0x20186) == 0)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[1] + 176))(a2, a3, a4);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_47:
          uint64_t v12 = v13;
          break;
        }
        if (v11 == 14)
        {
          uint64_t v21 = __s1;
          size_t v22 = strstr(__s1, "e_");
          if (v22)
          {
            do
            {
              *size_t v22 = 69;
              size_t v22 = strstr(v22 + 1, "e_");
            }
            while (v22);
            uint64_t v21 = __s1;
          }
          int v23 = strstr(v21, "s_");
          if (v23)
          {
            do
            {
              *int v23 = 83;
              int v23 = strstr(v23 + 1, "s_");
            }
            while (v23);
            uint64_t v21 = __s1;
          }
          int v24 = strlen(v21);
          size_t v25 = (char *)heap_Alloc(*(void *)(*a1 + 8), (v24 + 1));
          if (!v25)
          {
            log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"BE_ADAPT", 64000, 0, v26, v27, v28, v29, v45);
            return 2410684426;
          }
          BOOL v10 = v25;
          strcpy(v25, __s1);
          uint64_t v30 = strstr(__s1, "E_");
          if (v30)
          {
            uint64_t v31 = v30;
            do
            {
              *uint64_t v31 = 83;
              uint64_t v32 = strchr(v31, 59);
              if (v32)
              {
                int v33 = v32;
                *uint64_t v32 = 0;
                if (strstr(v10, v31))
                {
                  size_t v34 = strlen(v33 + 1);
                  memmove(v31, v33 + 1, v34 + 1);
                }
                else
                {
                  *uint64_t v31 = 73;
                  char *v33 = 59;
                }
              }
              else if (strstr(v10, v31))
              {
                *uint64_t v31 = 0;
              }
              else
              {
                *uint64_t v31 = 73;
              }
              uint64_t v31 = strstr(v31 + 1, "E_");
            }
            while (v31);
          }
          __int16 v35 = strstr(v10, "S_");
          if (v35)
          {
            uint64_t v36 = v35;
            do
            {
              char *v36 = 69;
              int v37 = strchr(v36, 59);
              if (v37)
              {
                unsigned int v38 = v37;
                *int v37 = 0;
                int v39 = v37 + 1;
                if (strstr(v37 + 1, v36))
                {
                  size_t v40 = strlen(v39);
                  memmove(v36, v39, v40 + 1);
                }
                else
                {
                  char *v36 = 73;
                  *unsigned int v38 = 59;
                }
              }
              else
              {
                char *v36 = 73;
              }
              uint64_t v36 = strstr(v36 + 1, "S_");
            }
            while (v36);
          }
          for (unsigned __int16 i = strstr(v10, "PHR:B-"); i; unsigned __int16 i = strstr(i + 1, "PHR:B-"))
            i[4] = 73;
          __int16 v42 = strlen(v10);
          uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a1[1] + 160))(a2, a3, a5, 14, (unsigned __int16)(v42 + 1), v10, &v47);
        }
        else
        {
          __int16 v43 = strlen(__s1);
          uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, char *, int *))(a1[1] + 160))(a2, a3, a5, v11, (unsigned __int16)(v43 + 1), __s1, &v47);
        }
        goto LABEL_13;
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *, char *))(a1[1] + 168))(a2, a3, a4, v11, 1, &v49, (char *)&v47 + 2);
      if ((v13 & 0x80000000) != 0) {
        goto LABEL_47;
      }
      __int16 v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(a1[1] + 160);
      if (v11 == 1)
      {
        uint64_t v15 = a2;
        uint64_t v16 = a3;
        uint64_t v17 = a5;
        uint64_t v18 = 1;
        goto LABEL_12;
      }
      uint64_t v12 = v14(a2, a3, a5, v11, 1, &v49, &v47);
      if ((v12 & 0x80000000) != 0) {
        break;
      }
      if (v11 == 2)
      {
        --v51;
        __int16 v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(a1[1] + 160);
        uint64_t v15 = a2;
        uint64_t v16 = a3;
        uint64_t v17 = a4;
        uint64_t v18 = 2;
LABEL_12:
        uint64_t v19 = v14(v15, v16, v17, v18, 1, &v51, &v47);
LABEL_13:
        uint64_t v12 = v19;
        if ((v19 & 0x80000000) != 0) {
          break;
        }
      }
    }
    unsigned int v20 = v11++;
  }
  while (v20 < 0x15);
  if (v10) {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v10);
  }
  return v12;
}